
SAMGELHEALERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d30  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408d30  00408d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000088c  20000000  00408d38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004b0  2000088c  004095c4  0002088c  2**2
                  ALLOC
  4 .stack        00003004  20000d3c  00409a74  0002088c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002088c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208b6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000d3c8  00000000  00000000  0002090f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002019  00000000  00000000  0002dcd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006db0  00000000  00000000  0002fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c00  00000000  00000000  00036aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ae0  00000000  00000000  000376a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013a9b  00000000  00000000  00038180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000dbf0  00000000  00000000  0004bc1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004cb5b  00000000  00000000  0005980b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003f50  00000000  00000000  000a6368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003d40 	.word	0x20003d40
  400004:	004022c9 	.word	0x004022c9
  400008:	00402391 	.word	0x00402391
  40000c:	00402391 	.word	0x00402391
  400010:	00402391 	.word	0x00402391
  400014:	00402391 	.word	0x00402391
  400018:	00402391 	.word	0x00402391
	...
  40002c:	00402391 	.word	0x00402391
  400030:	00402391 	.word	0x00402391
  400034:	00000000 	.word	0x00000000
  400038:	00402391 	.word	0x00402391
  40003c:	00402951 	.word	0x00402951
  400040:	00402391 	.word	0x00402391
  400044:	00402391 	.word	0x00402391
  400048:	00402391 	.word	0x00402391
  40004c:	00402391 	.word	0x00402391
  400050:	00402391 	.word	0x00402391
  400054:	00402391 	.word	0x00402391
  400058:	00402391 	.word	0x00402391
  40005c:	00000000 	.word	0x00000000
  400060:	00402391 	.word	0x00402391
  400064:	00402391 	.word	0x00402391
  400068:	00000000 	.word	0x00000000
  40006c:	00400b61 	.word	0x00400b61
  400070:	00400b79 	.word	0x00400b79
  400074:	00000000 	.word	0x00000000
  400078:	00402391 	.word	0x00402391
  40007c:	00402391 	.word	0x00402391
	...
  400088:	00402391 	.word	0x00402391
  40008c:	00402391 	.word	0x00402391
  400090:	00402391 	.word	0x00402391
  400094:	00402391 	.word	0x00402391
  400098:	00402391 	.word	0x00402391
  40009c:	00402391 	.word	0x00402391
  4000a0:	00402391 	.word	0x00402391
  4000a4:	00402391 	.word	0x00402391
	...
  4000b4:	00402391 	.word	0x00402391
  4000b8:	00402391 	.word	0x00402391
  4000bc:	00402391 	.word	0x00402391
  4000c0:	00402391 	.word	0x00402391
  4000c4:	00402391 	.word	0x00402391
  4000c8:	00402391 	.word	0x00402391

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000088c 	.word	0x2000088c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00408d38 	.word	0x00408d38

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000890 	.word	0x20000890
  40011c:	00408d38 	.word	0x00408d38
  400120:	00408d38 	.word	0x00408d38
  400124:	00000000 	.word	0x00000000

00400128 <CBuffWriteByte>:
	}
	return retVal;
 }
  
 void CBuffWriteByte(struct cBuff_t *cbuff, CBUFF_TYPE dByte)
 {
  400128:	b480      	push	{r7}
  40012a:	b083      	sub	sp, #12
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
  400130:	460b      	mov	r3, r1
  400132:	70fb      	strb	r3, [r7, #3]
	cbuff->buff[cbuff->wPtr++] = dByte;
  400134:	687b      	ldr	r3, [r7, #4]
  400136:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
  40013a:	1c5a      	adds	r2, r3, #1
  40013c:	b2d1      	uxtb	r1, r2
  40013e:	687a      	ldr	r2, [r7, #4]
  400140:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
  400144:	4619      	mov	r1, r3
  400146:	687b      	ldr	r3, [r7, #4]
  400148:	78fa      	ldrb	r2, [r7, #3]
  40014a:	545a      	strb	r2, [r3, r1]
	if(cbuff->wPtr>(CBUFF_SIZE-1))
  40014c:	687b      	ldr	r3, [r7, #4]
  40014e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
  400152:	2b63      	cmp	r3, #99	; 0x63
  400154:	d903      	bls.n	40015e <CBuffWriteByte+0x36>
	{
		cbuff->wPtr = 0;
  400156:	687b      	ldr	r3, [r7, #4]
  400158:	2200      	movs	r2, #0
  40015a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	}
  40015e:	bf00      	nop
  400160:	370c      	adds	r7, #12
  400162:	46bd      	mov	sp, r7
  400164:	bc80      	pop	{r7}
  400166:	4770      	bx	lr

00400168 <ReadPressureSen>:
 */ 

 #include "pressureSens.h"

 void ReadPressureSen(Twi * Port, uint8_t addr, uint8_t *dPkt)
 {
  400168:	b580      	push	{r7, lr}
  40016a:	b08a      	sub	sp, #40	; 0x28
  40016c:	af00      	add	r7, sp, #0
  40016e:	60f8      	str	r0, [r7, #12]
  400170:	460b      	mov	r3, r1
  400172:	607a      	str	r2, [r7, #4]
  400174:	72fb      	strb	r3, [r7, #11]
	twi_packet_t pkt;
	/* Set Device Address */
	pkt.chip = addr;
  400176:	7afb      	ldrb	r3, [r7, #11]
  400178:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	/* No Address Bytes to be clocked */
	pkt.addr_length = 0;
  40017c:	2300      	movs	r3, #0
  40017e:	61bb      	str	r3, [r7, #24]
	/* Address of buffer where recvd data is to be stored */
	pkt.buffer = dPkt;
  400180:	687b      	ldr	r3, [r7, #4]
  400182:	61fb      	str	r3, [r7, #28]
	/* No of bytes to read */
	pkt.length = 2;
  400184:	2302      	movs	r3, #2
  400186:	623b      	str	r3, [r7, #32]
	twi_master_read(Port, &pkt);
  400188:	f107 0314 	add.w	r3, r7, #20
  40018c:	4619      	mov	r1, r3
  40018e:	68f8      	ldr	r0, [r7, #12]
  400190:	4b06      	ldr	r3, [pc, #24]	; (4001ac <ReadPressureSen+0x44>)
  400192:	4798      	blx	r3
	dPkt[0] &= 0x3F;
  400194:	687b      	ldr	r3, [r7, #4]
  400196:	781b      	ldrb	r3, [r3, #0]
  400198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40019c:	b2da      	uxtb	r2, r3
  40019e:	687b      	ldr	r3, [r7, #4]
  4001a0:	701a      	strb	r2, [r3, #0]
 }
  4001a2:	bf00      	nop
  4001a4:	3728      	adds	r7, #40	; 0x28
  4001a6:	46bd      	mov	sp, r7
  4001a8:	bd80      	pop	{r7, pc}
  4001aa:	bf00      	nop
  4001ac:	00400ded 	.word	0x00400ded

004001b0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4001b0:	b480      	push	{r7}
  4001b2:	b083      	sub	sp, #12
  4001b4:	af00      	add	r7, sp, #0
  4001b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b8:	687b      	ldr	r3, [r7, #4]
  4001ba:	2b07      	cmp	r3, #7
  4001bc:	d825      	bhi.n	40020a <osc_get_rate+0x5a>
  4001be:	a201      	add	r2, pc, #4	; (adr r2, 4001c4 <osc_get_rate+0x14>)
  4001c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c4:	004001e5 	.word	0x004001e5
  4001c8:	004001eb 	.word	0x004001eb
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f7 	.word	0x004001f7
  4001d4:	004001fb 	.word	0x004001fb
  4001d8:	004001ff 	.word	0x004001ff
  4001dc:	00400203 	.word	0x00400203
  4001e0:	00400207 	.word	0x00400207
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4001e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4001e8:	e010      	b.n	40020c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4001ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001ee:	e00d      	b.n	40020c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4001f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001f4:	e00a      	b.n	40020c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4001f6:	4b08      	ldr	r3, [pc, #32]	; (400218 <osc_get_rate+0x68>)
  4001f8:	e008      	b.n	40020c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4001fa:	4b08      	ldr	r3, [pc, #32]	; (40021c <osc_get_rate+0x6c>)
  4001fc:	e006      	b.n	40020c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4001fe:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_get_rate+0x70>)
  400200:	e004      	b.n	40020c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400202:	4b07      	ldr	r3, [pc, #28]	; (400220 <osc_get_rate+0x70>)
  400204:	e002      	b.n	40020c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_get_rate+0x70>)
  400208:	e000      	b.n	40020c <osc_get_rate+0x5c>
	}

	return 0;
  40020a:	2300      	movs	r3, #0
}
  40020c:	4618      	mov	r0, r3
  40020e:	370c      	adds	r7, #12
  400210:	46bd      	mov	sp, r7
  400212:	bc80      	pop	{r7}
  400214:	4770      	bx	lr
  400216:	bf00      	nop
  400218:	003d0900 	.word	0x003d0900
  40021c:	007a1200 	.word	0x007a1200
  400220:	00b71b00 	.word	0x00b71b00

00400224 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400224:	b580      	push	{r7, lr}
  400226:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400228:	2006      	movs	r0, #6
  40022a:	4b04      	ldr	r3, [pc, #16]	; (40023c <sysclk_get_main_hz+0x18>)
  40022c:	4798      	blx	r3
  40022e:	4602      	mov	r2, r0
  400230:	4613      	mov	r3, r2
  400232:	009b      	lsls	r3, r3, #2
  400234:	4413      	add	r3, r2
  400236:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400238:	4618      	mov	r0, r3
  40023a:	bd80      	pop	{r7, pc}
  40023c:	004001b1 	.word	0x004001b1

00400240 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400240:	b580      	push	{r7, lr}
  400242:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400244:	4b02      	ldr	r3, [pc, #8]	; (400250 <sysclk_get_peripheral_hz+0x10>)
  400246:	4798      	blx	r3
  400248:	4603      	mov	r3, r0
  40024a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40024c:	4618      	mov	r0, r3
  40024e:	bd80      	pop	{r7, pc}
  400250:	00400225 	.word	0x00400225

00400254 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400254:	b580      	push	{r7, lr}
  400256:	b082      	sub	sp, #8
  400258:	af00      	add	r7, sp, #0
  40025a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40025c:	6878      	ldr	r0, [r7, #4]
  40025e:	4b03      	ldr	r3, [pc, #12]	; (40026c <sysclk_enable_peripheral_clock+0x18>)
  400260:	4798      	blx	r3
}
  400262:	bf00      	nop
  400264:	3708      	adds	r7, #8
  400266:	46bd      	mov	sp, r7
  400268:	bd80      	pop	{r7, pc}
  40026a:	bf00      	nop
  40026c:	004020ad 	.word	0x004020ad

00400270 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  400270:	b580      	push	{r7, lr}
  400272:	b08c      	sub	sp, #48	; 0x30
  400274:	af00      	add	r7, sp, #0
  400276:	6078      	str	r0, [r7, #4]
  400278:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40027a:	4b31      	ldr	r3, [pc, #196]	; (400340 <usart_serial_init+0xd0>)
  40027c:	4798      	blx	r3
  40027e:	4603      	mov	r3, r0
  400280:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  400282:	683b      	ldr	r3, [r7, #0]
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  400288:	683b      	ldr	r3, [r7, #0]
  40028a:	689b      	ldr	r3, [r3, #8]
  40028c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40028e:	683b      	ldr	r3, [r7, #0]
  400290:	681b      	ldr	r3, [r3, #0]
  400292:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  400294:	683b      	ldr	r3, [r7, #0]
  400296:	685b      	ldr	r3, [r3, #4]
  400298:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40029a:	683b      	ldr	r3, [r7, #0]
  40029c:	689b      	ldr	r3, [r3, #8]
  40029e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	68db      	ldr	r3, [r3, #12]
  4002a4:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4002a6:	2300      	movs	r3, #0
  4002a8:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4002aa:	687b      	ldr	r3, [r7, #4]
  4002ac:	4a25      	ldr	r2, [pc, #148]	; (400344 <usart_serial_init+0xd4>)
  4002ae:	4293      	cmp	r3, r2
  4002b0:	d108      	bne.n	4002c4 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4002b2:	2008      	movs	r0, #8
  4002b4:	4b24      	ldr	r3, [pc, #144]	; (400348 <usart_serial_init+0xd8>)
  4002b6:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4002b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4002bc:	4619      	mov	r1, r3
  4002be:	6878      	ldr	r0, [r7, #4]
  4002c0:	4b22      	ldr	r3, [pc, #136]	; (40034c <usart_serial_init+0xdc>)
  4002c2:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4002c4:	687b      	ldr	r3, [r7, #4]
  4002c6:	4a22      	ldr	r2, [pc, #136]	; (400350 <usart_serial_init+0xe0>)
  4002c8:	4293      	cmp	r3, r2
  4002ca:	d108      	bne.n	4002de <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4002cc:	2009      	movs	r0, #9
  4002ce:	4b1e      	ldr	r3, [pc, #120]	; (400348 <usart_serial_init+0xd8>)
  4002d0:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4002d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4002d6:	4619      	mov	r1, r3
  4002d8:	6878      	ldr	r0, [r7, #4]
  4002da:	4b1c      	ldr	r3, [pc, #112]	; (40034c <usart_serial_init+0xdc>)
  4002dc:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002de:	687b      	ldr	r3, [r7, #4]
  4002e0:	4a1c      	ldr	r2, [pc, #112]	; (400354 <usart_serial_init+0xe4>)
  4002e2:	4293      	cmp	r3, r2
  4002e4:	d111      	bne.n	40030a <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4002e6:	200e      	movs	r0, #14
  4002e8:	4b17      	ldr	r3, [pc, #92]	; (400348 <usart_serial_init+0xd8>)
  4002ea:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4002ec:	4b14      	ldr	r3, [pc, #80]	; (400340 <usart_serial_init+0xd0>)
  4002ee:	4798      	blx	r3
  4002f0:	4602      	mov	r2, r0
  4002f2:	f107 030c 	add.w	r3, r7, #12
  4002f6:	4619      	mov	r1, r3
  4002f8:	6878      	ldr	r0, [r7, #4]
  4002fa:	4b17      	ldr	r3, [pc, #92]	; (400358 <usart_serial_init+0xe8>)
  4002fc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002fe:	6878      	ldr	r0, [r7, #4]
  400300:	4b16      	ldr	r3, [pc, #88]	; (40035c <usart_serial_init+0xec>)
  400302:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400304:	6878      	ldr	r0, [r7, #4]
  400306:	4b16      	ldr	r3, [pc, #88]	; (400360 <usart_serial_init+0xf0>)
  400308:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40030a:	687b      	ldr	r3, [r7, #4]
  40030c:	4a15      	ldr	r2, [pc, #84]	; (400364 <usart_serial_init+0xf4>)
  40030e:	4293      	cmp	r3, r2
  400310:	d111      	bne.n	400336 <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  400312:	200f      	movs	r0, #15
  400314:	4b0c      	ldr	r3, [pc, #48]	; (400348 <usart_serial_init+0xd8>)
  400316:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  400318:	4b09      	ldr	r3, [pc, #36]	; (400340 <usart_serial_init+0xd0>)
  40031a:	4798      	blx	r3
  40031c:	4602      	mov	r2, r0
  40031e:	f107 030c 	add.w	r3, r7, #12
  400322:	4619      	mov	r1, r3
  400324:	6878      	ldr	r0, [r7, #4]
  400326:	4b0c      	ldr	r3, [pc, #48]	; (400358 <usart_serial_init+0xe8>)
  400328:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40032a:	6878      	ldr	r0, [r7, #4]
  40032c:	4b0b      	ldr	r3, [pc, #44]	; (40035c <usart_serial_init+0xec>)
  40032e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400330:	6878      	ldr	r0, [r7, #4]
  400332:	4b0b      	ldr	r3, [pc, #44]	; (400360 <usart_serial_init+0xf0>)
  400334:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  400336:	bf00      	nop
  400338:	3730      	adds	r7, #48	; 0x30
  40033a:	46bd      	mov	sp, r7
  40033c:	bd80      	pop	{r7, pc}
  40033e:	bf00      	nop
  400340:	00400241 	.word	0x00400241
  400344:	400e0600 	.word	0x400e0600
  400348:	00400255 	.word	0x00400255
  40034c:	00400f15 	.word	0x00400f15
  400350:	400e0800 	.word	0x400e0800
  400354:	40024000 	.word	0x40024000
  400358:	00401129 	.word	0x00401129
  40035c:	004011ad 	.word	0x004011ad
  400360:	004011f5 	.word	0x004011f5
  400364:	40028000 	.word	0x40028000

00400368 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400368:	b580      	push	{r7, lr}
  40036a:	b082      	sub	sp, #8
  40036c:	af00      	add	r7, sp, #0
  40036e:	6078      	str	r0, [r7, #4]
  400370:	460b      	mov	r3, r1
  400372:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	4a20      	ldr	r2, [pc, #128]	; (4003f8 <usart_serial_putchar+0x90>)
  400378:	4293      	cmp	r3, r2
  40037a:	d10a      	bne.n	400392 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40037c:	bf00      	nop
  40037e:	78fb      	ldrb	r3, [r7, #3]
  400380:	4619      	mov	r1, r3
  400382:	6878      	ldr	r0, [r7, #4]
  400384:	4b1d      	ldr	r3, [pc, #116]	; (4003fc <usart_serial_putchar+0x94>)
  400386:	4798      	blx	r3
  400388:	4603      	mov	r3, r0
  40038a:	2b00      	cmp	r3, #0
  40038c:	d1f7      	bne.n	40037e <usart_serial_putchar+0x16>
		return 1;
  40038e:	2301      	movs	r3, #1
  400390:	e02d      	b.n	4003ee <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400392:	687b      	ldr	r3, [r7, #4]
  400394:	4a1a      	ldr	r2, [pc, #104]	; (400400 <usart_serial_putchar+0x98>)
  400396:	4293      	cmp	r3, r2
  400398:	d10a      	bne.n	4003b0 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40039a:	bf00      	nop
  40039c:	78fb      	ldrb	r3, [r7, #3]
  40039e:	4619      	mov	r1, r3
  4003a0:	6878      	ldr	r0, [r7, #4]
  4003a2:	4b16      	ldr	r3, [pc, #88]	; (4003fc <usart_serial_putchar+0x94>)
  4003a4:	4798      	blx	r3
  4003a6:	4603      	mov	r3, r0
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d1f7      	bne.n	40039c <usart_serial_putchar+0x34>
		return 1;
  4003ac:	2301      	movs	r3, #1
  4003ae:	e01e      	b.n	4003ee <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4003b0:	687b      	ldr	r3, [r7, #4]
  4003b2:	4a14      	ldr	r2, [pc, #80]	; (400404 <usart_serial_putchar+0x9c>)
  4003b4:	4293      	cmp	r3, r2
  4003b6:	d10a      	bne.n	4003ce <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  4003b8:	bf00      	nop
  4003ba:	78fb      	ldrb	r3, [r7, #3]
  4003bc:	4619      	mov	r1, r3
  4003be:	6878      	ldr	r0, [r7, #4]
  4003c0:	4b11      	ldr	r3, [pc, #68]	; (400408 <usart_serial_putchar+0xa0>)
  4003c2:	4798      	blx	r3
  4003c4:	4603      	mov	r3, r0
  4003c6:	2b00      	cmp	r3, #0
  4003c8:	d1f7      	bne.n	4003ba <usart_serial_putchar+0x52>
		return 1;
  4003ca:	2301      	movs	r3, #1
  4003cc:	e00f      	b.n	4003ee <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4003ce:	687b      	ldr	r3, [r7, #4]
  4003d0:	4a0e      	ldr	r2, [pc, #56]	; (40040c <usart_serial_putchar+0xa4>)
  4003d2:	4293      	cmp	r3, r2
  4003d4:	d10a      	bne.n	4003ec <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  4003d6:	bf00      	nop
  4003d8:	78fb      	ldrb	r3, [r7, #3]
  4003da:	4619      	mov	r1, r3
  4003dc:	6878      	ldr	r0, [r7, #4]
  4003de:	4b0a      	ldr	r3, [pc, #40]	; (400408 <usart_serial_putchar+0xa0>)
  4003e0:	4798      	blx	r3
  4003e2:	4603      	mov	r3, r0
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	d1f7      	bne.n	4003d8 <usart_serial_putchar+0x70>
		return 1;
  4003e8:	2301      	movs	r3, #1
  4003ea:	e000      	b.n	4003ee <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4003ec:	2300      	movs	r3, #0
}
  4003ee:	4618      	mov	r0, r3
  4003f0:	3708      	adds	r7, #8
  4003f2:	46bd      	mov	sp, r7
  4003f4:	bd80      	pop	{r7, pc}
  4003f6:	bf00      	nop
  4003f8:	400e0600 	.word	0x400e0600
  4003fc:	00400fa5 	.word	0x00400fa5
  400400:	400e0800 	.word	0x400e0800
  400404:	40024000 	.word	0x40024000
  400408:	004012a9 	.word	0x004012a9
  40040c:	40028000 	.word	0x40028000

00400410 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400410:	b580      	push	{r7, lr}
  400412:	b084      	sub	sp, #16
  400414:	af00      	add	r7, sp, #0
  400416:	6078      	str	r0, [r7, #4]
  400418:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40041a:	2300      	movs	r3, #0
  40041c:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40041e:	687b      	ldr	r3, [r7, #4]
  400420:	4a1f      	ldr	r2, [pc, #124]	; (4004a0 <usart_serial_getchar+0x90>)
  400422:	4293      	cmp	r3, r2
  400424:	d107      	bne.n	400436 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  400426:	bf00      	nop
  400428:	6839      	ldr	r1, [r7, #0]
  40042a:	6878      	ldr	r0, [r7, #4]
  40042c:	4b1d      	ldr	r3, [pc, #116]	; (4004a4 <usart_serial_getchar+0x94>)
  40042e:	4798      	blx	r3
  400430:	4603      	mov	r3, r0
  400432:	2b00      	cmp	r3, #0
  400434:	d1f8      	bne.n	400428 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400436:	687b      	ldr	r3, [r7, #4]
  400438:	4a1b      	ldr	r2, [pc, #108]	; (4004a8 <usart_serial_getchar+0x98>)
  40043a:	4293      	cmp	r3, r2
  40043c:	d107      	bne.n	40044e <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40043e:	bf00      	nop
  400440:	6839      	ldr	r1, [r7, #0]
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b17      	ldr	r3, [pc, #92]	; (4004a4 <usart_serial_getchar+0x94>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d1f8      	bne.n	400440 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40044e:	687b      	ldr	r3, [r7, #4]
  400450:	4a16      	ldr	r2, [pc, #88]	; (4004ac <usart_serial_getchar+0x9c>)
  400452:	4293      	cmp	r3, r2
  400454:	d10d      	bne.n	400472 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  400456:	bf00      	nop
  400458:	f107 030c 	add.w	r3, r7, #12
  40045c:	4619      	mov	r1, r3
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b13      	ldr	r3, [pc, #76]	; (4004b0 <usart_serial_getchar+0xa0>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d1f6      	bne.n	400458 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  40046a:	68fb      	ldr	r3, [r7, #12]
  40046c:	b2da      	uxtb	r2, r3
  40046e:	683b      	ldr	r3, [r7, #0]
  400470:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400472:	687b      	ldr	r3, [r7, #4]
  400474:	4a0f      	ldr	r2, [pc, #60]	; (4004b4 <usart_serial_getchar+0xa4>)
  400476:	4293      	cmp	r3, r2
  400478:	d10d      	bne.n	400496 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  40047a:	bf00      	nop
  40047c:	f107 030c 	add.w	r3, r7, #12
  400480:	4619      	mov	r1, r3
  400482:	6878      	ldr	r0, [r7, #4]
  400484:	4b0a      	ldr	r3, [pc, #40]	; (4004b0 <usart_serial_getchar+0xa0>)
  400486:	4798      	blx	r3
  400488:	4603      	mov	r3, r0
  40048a:	2b00      	cmp	r3, #0
  40048c:	d1f6      	bne.n	40047c <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  40048e:	68fb      	ldr	r3, [r7, #12]
  400490:	b2da      	uxtb	r2, r3
  400492:	683b      	ldr	r3, [r7, #0]
  400494:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400496:	bf00      	nop
  400498:	3710      	adds	r7, #16
  40049a:	46bd      	mov	sp, r7
  40049c:	bd80      	pop	{r7, pc}
  40049e:	bf00      	nop
  4004a0:	400e0600 	.word	0x400e0600
  4004a4:	00400fd5 	.word	0x00400fd5
  4004a8:	400e0800 	.word	0x400e0800
  4004ac:	40024000 	.word	0x40024000
  4004b0:	004012d9 	.word	0x004012d9
  4004b4:	40028000 	.word	0x40028000

004004b8 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  4004b8:	b580      	push	{r7, lr}
  4004ba:	b082      	sub	sp, #8
  4004bc:	af00      	add	r7, sp, #0
  4004be:	6078      	str	r0, [r7, #4]
  4004c0:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  4004c2:	4a0f      	ldr	r2, [pc, #60]	; (400500 <stdio_serial_init+0x48>)
  4004c4:	687b      	ldr	r3, [r7, #4]
  4004c6:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4004c8:	4b0e      	ldr	r3, [pc, #56]	; (400504 <stdio_serial_init+0x4c>)
  4004ca:	4a0f      	ldr	r2, [pc, #60]	; (400508 <stdio_serial_init+0x50>)
  4004cc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4004ce:	4b0f      	ldr	r3, [pc, #60]	; (40050c <stdio_serial_init+0x54>)
  4004d0:	4a0f      	ldr	r2, [pc, #60]	; (400510 <stdio_serial_init+0x58>)
  4004d2:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  4004d4:	6839      	ldr	r1, [r7, #0]
  4004d6:	6878      	ldr	r0, [r7, #4]
  4004d8:	4b0e      	ldr	r3, [pc, #56]	; (400514 <stdio_serial_init+0x5c>)
  4004da:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <stdio_serial_init+0x60>)
  4004de:	681b      	ldr	r3, [r3, #0]
  4004e0:	689b      	ldr	r3, [r3, #8]
  4004e2:	2100      	movs	r1, #0
  4004e4:	4618      	mov	r0, r3
  4004e6:	4b0d      	ldr	r3, [pc, #52]	; (40051c <stdio_serial_init+0x64>)
  4004e8:	4798      	blx	r3
	setbuf(stdin, NULL);
  4004ea:	4b0b      	ldr	r3, [pc, #44]	; (400518 <stdio_serial_init+0x60>)
  4004ec:	681b      	ldr	r3, [r3, #0]
  4004ee:	685b      	ldr	r3, [r3, #4]
  4004f0:	2100      	movs	r1, #0
  4004f2:	4618      	mov	r0, r3
  4004f4:	4b09      	ldr	r3, [pc, #36]	; (40051c <stdio_serial_init+0x64>)
  4004f6:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4004f8:	bf00      	nop
  4004fa:	3708      	adds	r7, #8
  4004fc:	46bd      	mov	sp, r7
  4004fe:	bd80      	pop	{r7, pc}
  400500:	20000b3c 	.word	0x20000b3c
  400504:	20000b38 	.word	0x20000b38
  400508:	00400369 	.word	0x00400369
  40050c:	20000b34 	.word	0x20000b34
  400510:	00400411 	.word	0x00400411
  400514:	00400271 	.word	0x00400271
  400518:	20000440 	.word	0x20000440
  40051c:	00403a25 	.word	0x00403a25

00400520 <SenInitUsart>:
 pdc_packet_t pdcPkt;// pdcPkt2;
 /* Pointer to PDC register base. */
 Pdc *sen1PdcBase, *sen2PdcBase;

 void SenInitUsart(void)
 {
  400520:	b5b0      	push	{r4, r5, r7, lr}
  400522:	b08a      	sub	sp, #40	; 0x28
  400524:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  400526:	4b36      	ldr	r3, [pc, #216]	; (400600 <SenInitUsart+0xe0>)
  400528:	f107 0410 	add.w	r4, r7, #16
  40052c:	461d      	mov	r5, r3
  40052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400532:	e895 0003 	ldmia.w	r5, {r0, r1}
  400536:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(SEN1_USART_ID);
  40053a:	200e      	movs	r0, #14
  40053c:	4b31      	ldr	r3, [pc, #196]	; (400604 <SenInitUsart+0xe4>)
  40053e:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs232(SEN1_USART, &usart_console_settings,
  400540:	4b31      	ldr	r3, [pc, #196]	; (400608 <SenInitUsart+0xe8>)
  400542:	4798      	blx	r3
  400544:	4602      	mov	r2, r0
  400546:	f107 0310 	add.w	r3, r7, #16
  40054a:	4619      	mov	r1, r3
  40054c:	482f      	ldr	r0, [pc, #188]	; (40060c <SenInitUsart+0xec>)
  40054e:	4b30      	ldr	r3, [pc, #192]	; (400610 <SenInitUsart+0xf0>)
  400550:	4798      	blx	r3
	 sysclk_get_peripheral_hz());

	 /* Enable RX function. */
	 usart_disable_tx(SEN1_USART);
  400552:	482e      	ldr	r0, [pc, #184]	; (40060c <SenInitUsart+0xec>)
  400554:	4b2f      	ldr	r3, [pc, #188]	; (400614 <SenInitUsart+0xf4>)
  400556:	4798      	blx	r3
	 usart_enable_rx(SEN1_USART);
  400558:	482c      	ldr	r0, [pc, #176]	; (40060c <SenInitUsart+0xec>)
  40055a:	4b2f      	ldr	r3, [pc, #188]	; (400618 <SenInitUsart+0xf8>)
  40055c:	4798      	blx	r3

	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 sen1PdcBase = usart_get_pdc_base(SEN1_USART);
  40055e:	482b      	ldr	r0, [pc, #172]	; (40060c <SenInitUsart+0xec>)
  400560:	4b2e      	ldr	r3, [pc, #184]	; (40061c <SenInitUsart+0xfc>)
  400562:	4798      	blx	r3
  400564:	4602      	mov	r2, r0
  400566:	4b2e      	ldr	r3, [pc, #184]	; (400620 <SenInitUsart+0x100>)
  400568:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(sen1PdcBase, PERIPH_PTCR_RXTEN);
  40056a:	4b2d      	ldr	r3, [pc, #180]	; (400620 <SenInitUsart+0x100>)
  40056c:	681b      	ldr	r3, [r3, #0]
  40056e:	2101      	movs	r1, #1
  400570:	4618      	mov	r0, r3
  400572:	4b2c      	ldr	r3, [pc, #176]	; (400624 <SenInitUsart+0x104>)
  400574:	4798      	blx	r3

	 pdcPkt.ul_addr = (uint32_t) sen1Buff;
  400576:	4a2c      	ldr	r2, [pc, #176]	; (400628 <SenInitUsart+0x108>)
  400578:	4b2c      	ldr	r3, [pc, #176]	; (40062c <SenInitUsart+0x10c>)
  40057a:	601a      	str	r2, [r3, #0]
	 pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  40057c:	4b2b      	ldr	r3, [pc, #172]	; (40062c <SenInitUsart+0x10c>)
  40057e:	22c8      	movs	r2, #200	; 0xc8
  400580:	605a      	str	r2, [r3, #4]
	 //For circular buffer operation
	 pdc_rx_init(sen1PdcBase, &pdcPkt, &pdcPkt);
  400582:	4b27      	ldr	r3, [pc, #156]	; (400620 <SenInitUsart+0x100>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	4a29      	ldr	r2, [pc, #164]	; (40062c <SenInitUsart+0x10c>)
  400588:	4928      	ldr	r1, [pc, #160]	; (40062c <SenInitUsart+0x10c>)
  40058a:	4618      	mov	r0, r3
  40058c:	4b28      	ldr	r3, [pc, #160]	; (400630 <SenInitUsart+0x110>)
  40058e:	4798      	blx	r3
		 usart_disable_tx(SEN2_USART);
		 usart_enable_rx(SEN2_USART);

		sen2PdcBase = usart_get_pdc_base(SEN2_USART);
	#elif defined(BOARD_NIRA91)
		const usart_serial_options_t uart_serial_options = {
  400590:	463b      	mov	r3, r7
  400592:	2200      	movs	r2, #0
  400594:	601a      	str	r2, [r3, #0]
  400596:	605a      	str	r2, [r3, #4]
  400598:	609a      	str	r2, [r3, #8]
  40059a:	60da      	str	r2, [r3, #12]
  40059c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  4005a0:	603b      	str	r3, [r7, #0]
  4005a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005a6:	60bb      	str	r3, [r7, #8]
			.baudrate = SEN2_BAUDRATE,
			.paritytype = UART_MR_PAR_NO
		};

		sysclk_enable_peripheral_clock(SEN2_UART_ID);
  4005a8:	2008      	movs	r0, #8
  4005aa:	4b16      	ldr	r3, [pc, #88]	; (400604 <SenInitUsart+0xe4>)
  4005ac:	4798      	blx	r3
		stdio_serial_init(SEN2_UART, &uart_serial_options);
  4005ae:	463b      	mov	r3, r7
  4005b0:	4619      	mov	r1, r3
  4005b2:	4820      	ldr	r0, [pc, #128]	; (400634 <SenInitUsart+0x114>)
  4005b4:	4b20      	ldr	r3, [pc, #128]	; (400638 <SenInitUsart+0x118>)
  4005b6:	4798      	blx	r3
		
		uart_enable_rx(SEN2_UART);
  4005b8:	481e      	ldr	r0, [pc, #120]	; (400634 <SenInitUsart+0x114>)
  4005ba:	4b20      	ldr	r3, [pc, #128]	; (40063c <SenInitUsart+0x11c>)
  4005bc:	4798      	blx	r3
		uart_disable_tx(SEN2_UART);
  4005be:	481d      	ldr	r0, [pc, #116]	; (400634 <SenInitUsart+0x114>)
  4005c0:	4b1f      	ldr	r3, [pc, #124]	; (400640 <SenInitUsart+0x120>)
  4005c2:	4798      	blx	r3

		sen2PdcBase = uart_get_pdc_base(SEN2_UART);
  4005c4:	481b      	ldr	r0, [pc, #108]	; (400634 <SenInitUsart+0x114>)
  4005c6:	4b1f      	ldr	r3, [pc, #124]	; (400644 <SenInitUsart+0x124>)
  4005c8:	4798      	blx	r3
  4005ca:	4602      	mov	r2, r0
  4005cc:	4b1e      	ldr	r3, [pc, #120]	; (400648 <SenInitUsart+0x128>)
  4005ce:	601a      	str	r2, [r3, #0]
	#endif

	pdc_enable_transfer(sen2PdcBase, PERIPH_PTCR_RXTEN);
  4005d0:	4b1d      	ldr	r3, [pc, #116]	; (400648 <SenInitUsart+0x128>)
  4005d2:	681b      	ldr	r3, [r3, #0]
  4005d4:	2101      	movs	r1, #1
  4005d6:	4618      	mov	r0, r3
  4005d8:	4b12      	ldr	r3, [pc, #72]	; (400624 <SenInitUsart+0x104>)
  4005da:	4798      	blx	r3

	pdcPkt.ul_addr = (uint32_t) sen2Buff;
  4005dc:	4a1b      	ldr	r2, [pc, #108]	; (40064c <SenInitUsart+0x12c>)
  4005de:	4b13      	ldr	r3, [pc, #76]	; (40062c <SenInitUsart+0x10c>)
  4005e0:	601a      	str	r2, [r3, #0]
	pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  4005e2:	4b12      	ldr	r3, [pc, #72]	; (40062c <SenInitUsart+0x10c>)
  4005e4:	22c8      	movs	r2, #200	; 0xc8
  4005e6:	605a      	str	r2, [r3, #4]
	//For circular buffer operation
	pdc_rx_init(sen2PdcBase, &pdcPkt, &pdcPkt);
  4005e8:	4b17      	ldr	r3, [pc, #92]	; (400648 <SenInitUsart+0x128>)
  4005ea:	681b      	ldr	r3, [r3, #0]
  4005ec:	4a0f      	ldr	r2, [pc, #60]	; (40062c <SenInitUsart+0x10c>)
  4005ee:	490f      	ldr	r1, [pc, #60]	; (40062c <SenInitUsart+0x10c>)
  4005f0:	4618      	mov	r0, r3
  4005f2:	4b0f      	ldr	r3, [pc, #60]	; (400630 <SenInitUsart+0x110>)
  4005f4:	4798      	blx	r3
 }
  4005f6:	bf00      	nop
  4005f8:	3728      	adds	r7, #40	; 0x28
  4005fa:	46bd      	mov	sp, r7
  4005fc:	bdb0      	pop	{r4, r5, r7, pc}
  4005fe:	bf00      	nop
  400600:	00408b4c 	.word	0x00408b4c
  400604:	00400255 	.word	0x00400255
  400608:	00400241 	.word	0x00400241
  40060c:	40024000 	.word	0x40024000
  400610:	00401129 	.word	0x00401129
  400614:	004011c5 	.word	0x004011c5
  400618:	004011f5 	.word	0x004011f5
  40061c:	0040130d 	.word	0x0040130d
  400620:	20000b30 	.word	0x20000b30
  400624:	00401755 	.word	0x00401755
  400628:	200008a8 	.word	0x200008a8
  40062c:	20000b24 	.word	0x20000b24
  400630:	00401711 	.word	0x00401711
  400634:	400e0600 	.word	0x400e0600
  400638:	004004b9 	.word	0x004004b9
  40063c:	00400f8d 	.word	0x00400f8d
  400640:	00400f75 	.word	0x00400f75
  400644:	00401005 	.word	0x00401005
  400648:	20000b2c 	.word	0x20000b2c
  40064c:	20000970 	.word	0x20000970

00400650 <SenPdcManageBuff>:

 void SenPdcManageBuff(void)
 {
  400650:	b580      	push	{r7, lr}
  400652:	af00      	add	r7, sp, #0
	/* If PDC receive next pointer is 0 */
	if(pdc_read_rx_next_counter(sen1PdcBase)==0)
  400654:	4b28      	ldr	r3, [pc, #160]	; (4006f8 <SenPdcManageBuff+0xa8>)
  400656:	681b      	ldr	r3, [r3, #0]
  400658:	4618      	mov	r0, r3
  40065a:	4b28      	ldr	r3, [pc, #160]	; (4006fc <SenPdcManageBuff+0xac>)
  40065c:	4798      	blx	r3
  40065e:	4603      	mov	r3, r0
  400660:	2b00      	cmp	r3, #0
  400662:	d10c      	bne.n	40067e <SenPdcManageBuff+0x2e>
	{
		/* If code reaches here it means current buffer is full and 
		next buffer ptr is assigned to current buffer ptr by PDC. */
		pdcPkt.ul_addr = (uint32_t) sen1Buff;
  400664:	4a26      	ldr	r2, [pc, #152]	; (400700 <SenPdcManageBuff+0xb0>)
  400666:	4b27      	ldr	r3, [pc, #156]	; (400704 <SenPdcManageBuff+0xb4>)
  400668:	601a      	str	r2, [r3, #0]
		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  40066a:	4b26      	ldr	r3, [pc, #152]	; (400704 <SenPdcManageBuff+0xb4>)
  40066c:	22c8      	movs	r2, #200	; 0xc8
  40066e:	605a      	str	r2, [r3, #4]
		//For circular buffer operation infinitely
		pdc_rx_init(sen1PdcBase, NULL, &pdcPkt);
  400670:	4b21      	ldr	r3, [pc, #132]	; (4006f8 <SenPdcManageBuff+0xa8>)
  400672:	681b      	ldr	r3, [r3, #0]
  400674:	4a23      	ldr	r2, [pc, #140]	; (400704 <SenPdcManageBuff+0xb4>)
  400676:	2100      	movs	r1, #0
  400678:	4618      	mov	r0, r3
  40067a:	4b23      	ldr	r3, [pc, #140]	; (400708 <SenPdcManageBuff+0xb8>)
  40067c:	4798      	blx	r3
	}
	sen1Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen1PdcBase);
  40067e:	4b1e      	ldr	r3, [pc, #120]	; (4006f8 <SenPdcManageBuff+0xa8>)
  400680:	681b      	ldr	r3, [r3, #0]
  400682:	4618      	mov	r0, r3
  400684:	4b21      	ldr	r3, [pc, #132]	; (40070c <SenPdcManageBuff+0xbc>)
  400686:	4798      	blx	r3
  400688:	4603      	mov	r3, r0
  40068a:	b29b      	uxth	r3, r3
  40068c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400690:	b29a      	uxth	r2, r3
  400692:	4b1f      	ldr	r3, [pc, #124]	; (400710 <SenPdcManageBuff+0xc0>)
  400694:	801a      	strh	r2, [r3, #0]
	if(sen1Wptr>=SEN_USART_BUFF_SIZE)
  400696:	4b1e      	ldr	r3, [pc, #120]	; (400710 <SenPdcManageBuff+0xc0>)
  400698:	881b      	ldrh	r3, [r3, #0]
  40069a:	2bc7      	cmp	r3, #199	; 0xc7
  40069c:	d902      	bls.n	4006a4 <SenPdcManageBuff+0x54>
		sen1Wptr = 0;
  40069e:	4b1c      	ldr	r3, [pc, #112]	; (400710 <SenPdcManageBuff+0xc0>)
  4006a0:	2200      	movs	r2, #0
  4006a2:	801a      	strh	r2, [r3, #0]

	/* If PDC receive next pointer is 0 */
	if(pdc_read_rx_next_counter(sen2PdcBase)==0)
  4006a4:	4b1b      	ldr	r3, [pc, #108]	; (400714 <SenPdcManageBuff+0xc4>)
  4006a6:	681b      	ldr	r3, [r3, #0]
  4006a8:	4618      	mov	r0, r3
  4006aa:	4b14      	ldr	r3, [pc, #80]	; (4006fc <SenPdcManageBuff+0xac>)
  4006ac:	4798      	blx	r3
  4006ae:	4603      	mov	r3, r0
  4006b0:	2b00      	cmp	r3, #0
  4006b2:	d10c      	bne.n	4006ce <SenPdcManageBuff+0x7e>
	{
		/* If code reaches here it means current buffer is full and 
		next buffer ptr is assigned to current buffer ptr by PDC. */
		pdcPkt.ul_addr = (uint32_t) sen2Buff;
  4006b4:	4a18      	ldr	r2, [pc, #96]	; (400718 <SenPdcManageBuff+0xc8>)
  4006b6:	4b13      	ldr	r3, [pc, #76]	; (400704 <SenPdcManageBuff+0xb4>)
  4006b8:	601a      	str	r2, [r3, #0]
		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  4006ba:	4b12      	ldr	r3, [pc, #72]	; (400704 <SenPdcManageBuff+0xb4>)
  4006bc:	22c8      	movs	r2, #200	; 0xc8
  4006be:	605a      	str	r2, [r3, #4]
		//For circular buffer operation infinitely
		pdc_rx_init(sen2PdcBase, NULL, &pdcPkt);
  4006c0:	4b14      	ldr	r3, [pc, #80]	; (400714 <SenPdcManageBuff+0xc4>)
  4006c2:	681b      	ldr	r3, [r3, #0]
  4006c4:	4a0f      	ldr	r2, [pc, #60]	; (400704 <SenPdcManageBuff+0xb4>)
  4006c6:	2100      	movs	r1, #0
  4006c8:	4618      	mov	r0, r3
  4006ca:	4b0f      	ldr	r3, [pc, #60]	; (400708 <SenPdcManageBuff+0xb8>)
  4006cc:	4798      	blx	r3
	}
	sen2Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen2PdcBase);
  4006ce:	4b11      	ldr	r3, [pc, #68]	; (400714 <SenPdcManageBuff+0xc4>)
  4006d0:	681b      	ldr	r3, [r3, #0]
  4006d2:	4618      	mov	r0, r3
  4006d4:	4b0d      	ldr	r3, [pc, #52]	; (40070c <SenPdcManageBuff+0xbc>)
  4006d6:	4798      	blx	r3
  4006d8:	4603      	mov	r3, r0
  4006da:	b29b      	uxth	r3, r3
  4006dc:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  4006e0:	b29a      	uxth	r2, r3
  4006e2:	4b0e      	ldr	r3, [pc, #56]	; (40071c <SenPdcManageBuff+0xcc>)
  4006e4:	801a      	strh	r2, [r3, #0]
	if(sen2Wptr>=SEN_USART_BUFF_SIZE)
  4006e6:	4b0d      	ldr	r3, [pc, #52]	; (40071c <SenPdcManageBuff+0xcc>)
  4006e8:	881b      	ldrh	r3, [r3, #0]
  4006ea:	2bc7      	cmp	r3, #199	; 0xc7
  4006ec:	d902      	bls.n	4006f4 <SenPdcManageBuff+0xa4>
		sen2Wptr = 0;
  4006ee:	4b0b      	ldr	r3, [pc, #44]	; (40071c <SenPdcManageBuff+0xcc>)
  4006f0:	2200      	movs	r2, #0
  4006f2:	801a      	strh	r2, [r3, #0]
 }
  4006f4:	bf00      	nop
  4006f6:	bd80      	pop	{r7, pc}
  4006f8:	20000b30 	.word	0x20000b30
  4006fc:	0040178d 	.word	0x0040178d
  400700:	200008a8 	.word	0x200008a8
  400704:	20000b24 	.word	0x20000b24
  400708:	00401711 	.word	0x00401711
  40070c:	00401775 	.word	0x00401775
  400710:	20000a3c 	.word	0x20000a3c
  400714:	20000b2c 	.word	0x20000b2c
  400718:	20000970 	.word	0x20000970
  40071c:	20000a3e 	.word	0x20000a3e

00400720 <SenGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t SenGetRxBytes(uint8_t senNo)
 {
  400720:	b480      	push	{r7}
  400722:	b085      	sub	sp, #20
  400724:	af00      	add	r7, sp, #0
  400726:	4603      	mov	r3, r0
  400728:	71fb      	strb	r3, [r7, #7]
	uint32_t recvdBytes;
	if(senNo == 1)
  40072a:	79fb      	ldrb	r3, [r7, #7]
  40072c:	2b01      	cmp	r3, #1
  40072e:	d11f      	bne.n	400770 <SenGetRxBytes+0x50>
	{
		if(sen1Wptr>sen1Rptr)
  400730:	4b22      	ldr	r3, [pc, #136]	; (4007bc <SenGetRxBytes+0x9c>)
  400732:	881a      	ldrh	r2, [r3, #0]
  400734:	4b22      	ldr	r3, [pc, #136]	; (4007c0 <SenGetRxBytes+0xa0>)
  400736:	881b      	ldrh	r3, [r3, #0]
  400738:	429a      	cmp	r2, r3
  40073a:	d907      	bls.n	40074c <SenGetRxBytes+0x2c>
		{
			recvdBytes = (sen1Wptr-sen1Rptr);
  40073c:	4b1f      	ldr	r3, [pc, #124]	; (4007bc <SenGetRxBytes+0x9c>)
  40073e:	881b      	ldrh	r3, [r3, #0]
  400740:	461a      	mov	r2, r3
  400742:	4b1f      	ldr	r3, [pc, #124]	; (4007c0 <SenGetRxBytes+0xa0>)
  400744:	881b      	ldrh	r3, [r3, #0]
  400746:	1ad3      	subs	r3, r2, r3
  400748:	60fb      	str	r3, [r7, #12]
  40074a:	e030      	b.n	4007ae <SenGetRxBytes+0x8e>
		}
		else if(sen1Wptr<sen1Rptr)
  40074c:	4b1b      	ldr	r3, [pc, #108]	; (4007bc <SenGetRxBytes+0x9c>)
  40074e:	881a      	ldrh	r2, [r3, #0]
  400750:	4b1b      	ldr	r3, [pc, #108]	; (4007c0 <SenGetRxBytes+0xa0>)
  400752:	881b      	ldrh	r3, [r3, #0]
  400754:	429a      	cmp	r2, r3
  400756:	d208      	bcs.n	40076a <SenGetRxBytes+0x4a>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen1Rptr) + sen1Wptr;
  400758:	4b19      	ldr	r3, [pc, #100]	; (4007c0 <SenGetRxBytes+0xa0>)
  40075a:	881b      	ldrh	r3, [r3, #0]
  40075c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400760:	4a16      	ldr	r2, [pc, #88]	; (4007bc <SenGetRxBytes+0x9c>)
  400762:	8812      	ldrh	r2, [r2, #0]
  400764:	4413      	add	r3, r2
  400766:	60fb      	str	r3, [r7, #12]
  400768:	e021      	b.n	4007ae <SenGetRxBytes+0x8e>
		}
		else
		{
			recvdBytes = 0;
  40076a:	2300      	movs	r3, #0
  40076c:	60fb      	str	r3, [r7, #12]
  40076e:	e01e      	b.n	4007ae <SenGetRxBytes+0x8e>
		}
	}
	else
	{
		if(sen2Wptr>sen2Rptr)
  400770:	4b14      	ldr	r3, [pc, #80]	; (4007c4 <SenGetRxBytes+0xa4>)
  400772:	881a      	ldrh	r2, [r3, #0]
  400774:	4b14      	ldr	r3, [pc, #80]	; (4007c8 <SenGetRxBytes+0xa8>)
  400776:	881b      	ldrh	r3, [r3, #0]
  400778:	429a      	cmp	r2, r3
  40077a:	d907      	bls.n	40078c <SenGetRxBytes+0x6c>
		{
			recvdBytes = (sen2Wptr-sen2Rptr);
  40077c:	4b11      	ldr	r3, [pc, #68]	; (4007c4 <SenGetRxBytes+0xa4>)
  40077e:	881b      	ldrh	r3, [r3, #0]
  400780:	461a      	mov	r2, r3
  400782:	4b11      	ldr	r3, [pc, #68]	; (4007c8 <SenGetRxBytes+0xa8>)
  400784:	881b      	ldrh	r3, [r3, #0]
  400786:	1ad3      	subs	r3, r2, r3
  400788:	60fb      	str	r3, [r7, #12]
  40078a:	e010      	b.n	4007ae <SenGetRxBytes+0x8e>
		}
		else if(sen2Wptr<sen2Rptr)
  40078c:	4b0d      	ldr	r3, [pc, #52]	; (4007c4 <SenGetRxBytes+0xa4>)
  40078e:	881a      	ldrh	r2, [r3, #0]
  400790:	4b0d      	ldr	r3, [pc, #52]	; (4007c8 <SenGetRxBytes+0xa8>)
  400792:	881b      	ldrh	r3, [r3, #0]
  400794:	429a      	cmp	r2, r3
  400796:	d208      	bcs.n	4007aa <SenGetRxBytes+0x8a>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen2Rptr) + sen2Wptr;
  400798:	4b0b      	ldr	r3, [pc, #44]	; (4007c8 <SenGetRxBytes+0xa8>)
  40079a:	881b      	ldrh	r3, [r3, #0]
  40079c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  4007a0:	4a08      	ldr	r2, [pc, #32]	; (4007c4 <SenGetRxBytes+0xa4>)
  4007a2:	8812      	ldrh	r2, [r2, #0]
  4007a4:	4413      	add	r3, r2
  4007a6:	60fb      	str	r3, [r7, #12]
  4007a8:	e001      	b.n	4007ae <SenGetRxBytes+0x8e>
		}
		else
		{
			recvdBytes = 0;
  4007aa:	2300      	movs	r3, #0
  4007ac:	60fb      	str	r3, [r7, #12]
		}
	}
	
	return recvdBytes;
  4007ae:	68fb      	ldr	r3, [r7, #12]
 }
  4007b0:	4618      	mov	r0, r3
  4007b2:	3714      	adds	r7, #20
  4007b4:	46bd      	mov	sp, r7
  4007b6:	bc80      	pop	{r7}
  4007b8:	4770      	bx	lr
  4007ba:	bf00      	nop
  4007bc:	20000a3c 	.word	0x20000a3c
  4007c0:	20000a38 	.word	0x20000a38
  4007c4:	20000a3e 	.word	0x20000a3e
  4007c8:	20000a3a 	.word	0x20000a3a

004007cc <SenGetByte>:

 uint8_t SenGetByte(uint8_t senNo)
 {
  4007cc:	b480      	push	{r7}
  4007ce:	b085      	sub	sp, #20
  4007d0:	af00      	add	r7, sp, #0
  4007d2:	4603      	mov	r3, r0
  4007d4:	71fb      	strb	r3, [r7, #7]
	uint8_t dataByte;
	if(senNo==1)
  4007d6:	79fb      	ldrb	r3, [r7, #7]
  4007d8:	2b01      	cmp	r3, #1
  4007da:	d111      	bne.n	400800 <SenGetByte+0x34>
	{
		dataByte = sen1Buff[sen1Rptr++];
  4007dc:	4b14      	ldr	r3, [pc, #80]	; (400830 <SenGetByte+0x64>)
  4007de:	881b      	ldrh	r3, [r3, #0]
  4007e0:	1c5a      	adds	r2, r3, #1
  4007e2:	b291      	uxth	r1, r2
  4007e4:	4a12      	ldr	r2, [pc, #72]	; (400830 <SenGetByte+0x64>)
  4007e6:	8011      	strh	r1, [r2, #0]
  4007e8:	461a      	mov	r2, r3
  4007ea:	4b12      	ldr	r3, [pc, #72]	; (400834 <SenGetByte+0x68>)
  4007ec:	5c9b      	ldrb	r3, [r3, r2]
  4007ee:	73fb      	strb	r3, [r7, #15]
		if(sen1Rptr>=SEN_USART_BUFF_SIZE)
  4007f0:	4b0f      	ldr	r3, [pc, #60]	; (400830 <SenGetByte+0x64>)
  4007f2:	881b      	ldrh	r3, [r3, #0]
  4007f4:	2bc7      	cmp	r3, #199	; 0xc7
  4007f6:	d914      	bls.n	400822 <SenGetByte+0x56>
			sen1Rptr = 0;
  4007f8:	4b0d      	ldr	r3, [pc, #52]	; (400830 <SenGetByte+0x64>)
  4007fa:	2200      	movs	r2, #0
  4007fc:	801a      	strh	r2, [r3, #0]
  4007fe:	e010      	b.n	400822 <SenGetByte+0x56>
	}
	else
	{
		dataByte = sen2Buff[sen2Rptr++];
  400800:	4b0d      	ldr	r3, [pc, #52]	; (400838 <SenGetByte+0x6c>)
  400802:	881b      	ldrh	r3, [r3, #0]
  400804:	1c5a      	adds	r2, r3, #1
  400806:	b291      	uxth	r1, r2
  400808:	4a0b      	ldr	r2, [pc, #44]	; (400838 <SenGetByte+0x6c>)
  40080a:	8011      	strh	r1, [r2, #0]
  40080c:	461a      	mov	r2, r3
  40080e:	4b0b      	ldr	r3, [pc, #44]	; (40083c <SenGetByte+0x70>)
  400810:	5c9b      	ldrb	r3, [r3, r2]
  400812:	73fb      	strb	r3, [r7, #15]
		if(sen2Rptr>=SEN_USART_BUFF_SIZE)
  400814:	4b08      	ldr	r3, [pc, #32]	; (400838 <SenGetByte+0x6c>)
  400816:	881b      	ldrh	r3, [r3, #0]
  400818:	2bc7      	cmp	r3, #199	; 0xc7
  40081a:	d902      	bls.n	400822 <SenGetByte+0x56>
			sen2Rptr = 0;
  40081c:	4b06      	ldr	r3, [pc, #24]	; (400838 <SenGetByte+0x6c>)
  40081e:	2200      	movs	r2, #0
  400820:	801a      	strh	r2, [r3, #0]
	}
	return dataByte;
  400822:	7bfb      	ldrb	r3, [r7, #15]
  400824:	4618      	mov	r0, r3
  400826:	3714      	adds	r7, #20
  400828:	46bd      	mov	sp, r7
  40082a:	bc80      	pop	{r7}
  40082c:	4770      	bx	lr
  40082e:	bf00      	nop
  400830:	20000a38 	.word	0x20000a38
  400834:	200008a8 	.word	0x200008a8
  400838:	20000a3a 	.word	0x20000a3a
  40083c:	20000970 	.word	0x20000970

00400840 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400840:	b580      	push	{r7, lr}
  400842:	b086      	sub	sp, #24
  400844:	af00      	add	r7, sp, #0
  400846:	60f8      	str	r0, [r7, #12]
  400848:	60b9      	str	r1, [r7, #8]
  40084a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40084c:	2300      	movs	r3, #0
  40084e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400850:	68fb      	ldr	r3, [r7, #12]
  400852:	2b00      	cmp	r3, #0
  400854:	d012      	beq.n	40087c <_read+0x3c>
		return -1;
  400856:	f04f 33ff 	mov.w	r3, #4294967295
  40085a:	e013      	b.n	400884 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  40085c:	4b0b      	ldr	r3, [pc, #44]	; (40088c <_read+0x4c>)
  40085e:	681b      	ldr	r3, [r3, #0]
  400860:	4a0b      	ldr	r2, [pc, #44]	; (400890 <_read+0x50>)
  400862:	6812      	ldr	r2, [r2, #0]
  400864:	68b9      	ldr	r1, [r7, #8]
  400866:	4610      	mov	r0, r2
  400868:	4798      	blx	r3
		ptr++;
  40086a:	68bb      	ldr	r3, [r7, #8]
  40086c:	3301      	adds	r3, #1
  40086e:	60bb      	str	r3, [r7, #8]
		nChars++;
  400870:	697b      	ldr	r3, [r7, #20]
  400872:	3301      	adds	r3, #1
  400874:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400876:	687b      	ldr	r3, [r7, #4]
  400878:	3b01      	subs	r3, #1
  40087a:	607b      	str	r3, [r7, #4]
  40087c:	687b      	ldr	r3, [r7, #4]
  40087e:	2b00      	cmp	r3, #0
  400880:	dcec      	bgt.n	40085c <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400882:	697b      	ldr	r3, [r7, #20]
}
  400884:	4618      	mov	r0, r3
  400886:	3718      	adds	r7, #24
  400888:	46bd      	mov	sp, r7
  40088a:	bd80      	pop	{r7, pc}
  40088c:	20000b34 	.word	0x20000b34
  400890:	20000b3c 	.word	0x20000b3c

00400894 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400894:	b580      	push	{r7, lr}
  400896:	b086      	sub	sp, #24
  400898:	af00      	add	r7, sp, #0
  40089a:	60f8      	str	r0, [r7, #12]
  40089c:	60b9      	str	r1, [r7, #8]
  40089e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4008a0:	2300      	movs	r3, #0
  4008a2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4008a4:	68fb      	ldr	r3, [r7, #12]
  4008a6:	2b01      	cmp	r3, #1
  4008a8:	d01e      	beq.n	4008e8 <_write+0x54>
  4008aa:	68fb      	ldr	r3, [r7, #12]
  4008ac:	2b02      	cmp	r3, #2
  4008ae:	d01b      	beq.n	4008e8 <_write+0x54>
  4008b0:	68fb      	ldr	r3, [r7, #12]
  4008b2:	2b03      	cmp	r3, #3
  4008b4:	d018      	beq.n	4008e8 <_write+0x54>
		return -1;
  4008b6:	f04f 33ff 	mov.w	r3, #4294967295
  4008ba:	e019      	b.n	4008f0 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4008bc:	4b0e      	ldr	r3, [pc, #56]	; (4008f8 <_write+0x64>)
  4008be:	681a      	ldr	r2, [r3, #0]
  4008c0:	4b0e      	ldr	r3, [pc, #56]	; (4008fc <_write+0x68>)
  4008c2:	6818      	ldr	r0, [r3, #0]
  4008c4:	68bb      	ldr	r3, [r7, #8]
  4008c6:	1c59      	adds	r1, r3, #1
  4008c8:	60b9      	str	r1, [r7, #8]
  4008ca:	781b      	ldrb	r3, [r3, #0]
  4008cc:	4619      	mov	r1, r3
  4008ce:	4790      	blx	r2
  4008d0:	4603      	mov	r3, r0
  4008d2:	2b00      	cmp	r3, #0
  4008d4:	da02      	bge.n	4008dc <_write+0x48>
			return -1;
  4008d6:	f04f 33ff 	mov.w	r3, #4294967295
  4008da:	e009      	b.n	4008f0 <_write+0x5c>
		}
		++nChars;
  4008dc:	697b      	ldr	r3, [r7, #20]
  4008de:	3301      	adds	r3, #1
  4008e0:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4008e2:	687b      	ldr	r3, [r7, #4]
  4008e4:	3b01      	subs	r3, #1
  4008e6:	607b      	str	r3, [r7, #4]
  4008e8:	687b      	ldr	r3, [r7, #4]
  4008ea:	2b00      	cmp	r3, #0
  4008ec:	d1e6      	bne.n	4008bc <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4008ee:	697b      	ldr	r3, [r7, #20]
}
  4008f0:	4618      	mov	r0, r3
  4008f2:	3718      	adds	r7, #24
  4008f4:	46bd      	mov	sp, r7
  4008f6:	bd80      	pop	{r7, pc}
  4008f8:	20000b38 	.word	0x20000b38
  4008fc:	20000b3c 	.word	0x20000b3c

00400900 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400900:	b480      	push	{r7}
  400902:	b083      	sub	sp, #12
  400904:	af00      	add	r7, sp, #0
  400906:	4603      	mov	r3, r0
  400908:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40090a:	4908      	ldr	r1, [pc, #32]	; (40092c <NVIC_EnableIRQ+0x2c>)
  40090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400910:	095b      	lsrs	r3, r3, #5
  400912:	79fa      	ldrb	r2, [r7, #7]
  400914:	f002 021f 	and.w	r2, r2, #31
  400918:	2001      	movs	r0, #1
  40091a:	fa00 f202 	lsl.w	r2, r0, r2
  40091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400922:	bf00      	nop
  400924:	370c      	adds	r7, #12
  400926:	46bd      	mov	sp, r7
  400928:	bc80      	pop	{r7}
  40092a:	4770      	bx	lr
  40092c:	e000e100 	.word	0xe000e100

00400930 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  400930:	b480      	push	{r7}
  400932:	b083      	sub	sp, #12
  400934:	af00      	add	r7, sp, #0
  400936:	4603      	mov	r3, r0
  400938:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40093a:	4909      	ldr	r1, [pc, #36]	; (400960 <NVIC_DisableIRQ+0x30>)
  40093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400940:	095b      	lsrs	r3, r3, #5
  400942:	79fa      	ldrb	r2, [r7, #7]
  400944:	f002 021f 	and.w	r2, r2, #31
  400948:	2001      	movs	r0, #1
  40094a:	fa00 f202 	lsl.w	r2, r0, r2
  40094e:	3320      	adds	r3, #32
  400950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400954:	bf00      	nop
  400956:	370c      	adds	r7, #12
  400958:	46bd      	mov	sp, r7
  40095a:	bc80      	pop	{r7}
  40095c:	4770      	bx	lr
  40095e:	bf00      	nop
  400960:	e000e100 	.word	0xe000e100

00400964 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400964:	b480      	push	{r7}
  400966:	b083      	sub	sp, #12
  400968:	af00      	add	r7, sp, #0
  40096a:	4603      	mov	r3, r0
  40096c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40096e:	4909      	ldr	r1, [pc, #36]	; (400994 <NVIC_ClearPendingIRQ+0x30>)
  400970:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400974:	095b      	lsrs	r3, r3, #5
  400976:	79fa      	ldrb	r2, [r7, #7]
  400978:	f002 021f 	and.w	r2, r2, #31
  40097c:	2001      	movs	r0, #1
  40097e:	fa00 f202 	lsl.w	r2, r0, r2
  400982:	3360      	adds	r3, #96	; 0x60
  400984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400988:	bf00      	nop
  40098a:	370c      	adds	r7, #12
  40098c:	46bd      	mov	sp, r7
  40098e:	bc80      	pop	{r7}
  400990:	4770      	bx	lr
  400992:	bf00      	nop
  400994:	e000e100 	.word	0xe000e100

00400998 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400998:	b480      	push	{r7}
  40099a:	b083      	sub	sp, #12
  40099c:	af00      	add	r7, sp, #0
  40099e:	4603      	mov	r3, r0
  4009a0:	6039      	str	r1, [r7, #0]
  4009a2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4009a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4009a8:	2b00      	cmp	r3, #0
  4009aa:	da0b      	bge.n	4009c4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4009ac:	490d      	ldr	r1, [pc, #52]	; (4009e4 <NVIC_SetPriority+0x4c>)
  4009ae:	79fb      	ldrb	r3, [r7, #7]
  4009b0:	f003 030f 	and.w	r3, r3, #15
  4009b4:	3b04      	subs	r3, #4
  4009b6:	683a      	ldr	r2, [r7, #0]
  4009b8:	b2d2      	uxtb	r2, r2
  4009ba:	0112      	lsls	r2, r2, #4
  4009bc:	b2d2      	uxtb	r2, r2
  4009be:	440b      	add	r3, r1
  4009c0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  4009c2:	e009      	b.n	4009d8 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4009c4:	4908      	ldr	r1, [pc, #32]	; (4009e8 <NVIC_SetPriority+0x50>)
  4009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4009ca:	683a      	ldr	r2, [r7, #0]
  4009cc:	b2d2      	uxtb	r2, r2
  4009ce:	0112      	lsls	r2, r2, #4
  4009d0:	b2d2      	uxtb	r2, r2
  4009d2:	440b      	add	r3, r1
  4009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4009d8:	bf00      	nop
  4009da:	370c      	adds	r7, #12
  4009dc:	46bd      	mov	sp, r7
  4009de:	bc80      	pop	{r7}
  4009e0:	4770      	bx	lr
  4009e2:	bf00      	nop
  4009e4:	e000ed00 	.word	0xe000ed00
  4009e8:	e000e100 	.word	0xe000e100

004009ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009ec:	b580      	push	{r7, lr}
  4009ee:	b084      	sub	sp, #16
  4009f0:	af00      	add	r7, sp, #0
  4009f2:	6078      	str	r0, [r7, #4]
  4009f4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009f6:	6878      	ldr	r0, [r7, #4]
  4009f8:	4b2c      	ldr	r3, [pc, #176]	; (400aac <pio_handler_process+0xc0>)
  4009fa:	4798      	blx	r3
  4009fc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4009fe:	6878      	ldr	r0, [r7, #4]
  400a00:	4b2b      	ldr	r3, [pc, #172]	; (400ab0 <pio_handler_process+0xc4>)
  400a02:	4798      	blx	r3
  400a04:	4602      	mov	r2, r0
  400a06:	68fb      	ldr	r3, [r7, #12]
  400a08:	4013      	ands	r3, r2
  400a0a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	2b00      	cmp	r3, #0
  400a10:	d03c      	beq.n	400a8c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400a12:	2300      	movs	r3, #0
  400a14:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400a16:	e034      	b.n	400a82 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400a18:	4a26      	ldr	r2, [pc, #152]	; (400ab4 <pio_handler_process+0xc8>)
  400a1a:	68bb      	ldr	r3, [r7, #8]
  400a1c:	011b      	lsls	r3, r3, #4
  400a1e:	4413      	add	r3, r2
  400a20:	681a      	ldr	r2, [r3, #0]
  400a22:	683b      	ldr	r3, [r7, #0]
  400a24:	429a      	cmp	r2, r3
  400a26:	d126      	bne.n	400a76 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a28:	4a22      	ldr	r2, [pc, #136]	; (400ab4 <pio_handler_process+0xc8>)
  400a2a:	68bb      	ldr	r3, [r7, #8]
  400a2c:	011b      	lsls	r3, r3, #4
  400a2e:	4413      	add	r3, r2
  400a30:	3304      	adds	r3, #4
  400a32:	681a      	ldr	r2, [r3, #0]
  400a34:	68fb      	ldr	r3, [r7, #12]
  400a36:	4013      	ands	r3, r2
  400a38:	2b00      	cmp	r3, #0
  400a3a:	d01c      	beq.n	400a76 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a3c:	4a1d      	ldr	r2, [pc, #116]	; (400ab4 <pio_handler_process+0xc8>)
  400a3e:	68bb      	ldr	r3, [r7, #8]
  400a40:	011b      	lsls	r3, r3, #4
  400a42:	4413      	add	r3, r2
  400a44:	330c      	adds	r3, #12
  400a46:	681b      	ldr	r3, [r3, #0]
  400a48:	491a      	ldr	r1, [pc, #104]	; (400ab4 <pio_handler_process+0xc8>)
  400a4a:	68ba      	ldr	r2, [r7, #8]
  400a4c:	0112      	lsls	r2, r2, #4
  400a4e:	440a      	add	r2, r1
  400a50:	6810      	ldr	r0, [r2, #0]
  400a52:	4918      	ldr	r1, [pc, #96]	; (400ab4 <pio_handler_process+0xc8>)
  400a54:	68ba      	ldr	r2, [r7, #8]
  400a56:	0112      	lsls	r2, r2, #4
  400a58:	440a      	add	r2, r1
  400a5a:	3204      	adds	r2, #4
  400a5c:	6812      	ldr	r2, [r2, #0]
  400a5e:	4611      	mov	r1, r2
  400a60:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400a62:	4a14      	ldr	r2, [pc, #80]	; (400ab4 <pio_handler_process+0xc8>)
  400a64:	68bb      	ldr	r3, [r7, #8]
  400a66:	011b      	lsls	r3, r3, #4
  400a68:	4413      	add	r3, r2
  400a6a:	3304      	adds	r3, #4
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	43db      	mvns	r3, r3
  400a70:	68fa      	ldr	r2, [r7, #12]
  400a72:	4013      	ands	r3, r2
  400a74:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400a76:	68bb      	ldr	r3, [r7, #8]
  400a78:	3301      	adds	r3, #1
  400a7a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a7c:	68bb      	ldr	r3, [r7, #8]
  400a7e:	2b06      	cmp	r3, #6
  400a80:	d803      	bhi.n	400a8a <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400a82:	68fb      	ldr	r3, [r7, #12]
  400a84:	2b00      	cmp	r3, #0
  400a86:	d1c7      	bne.n	400a18 <pio_handler_process+0x2c>
  400a88:	e000      	b.n	400a8c <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400a8a:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400a8c:	4b0a      	ldr	r3, [pc, #40]	; (400ab8 <pio_handler_process+0xcc>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	2b00      	cmp	r3, #0
  400a92:	d007      	beq.n	400aa4 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400a94:	4b09      	ldr	r3, [pc, #36]	; (400abc <pio_handler_process+0xd0>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	2b00      	cmp	r3, #0
  400a9a:	d003      	beq.n	400aa4 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400a9c:	4b07      	ldr	r3, [pc, #28]	; (400abc <pio_handler_process+0xd0>)
  400a9e:	681b      	ldr	r3, [r3, #0]
  400aa0:	6878      	ldr	r0, [r7, #4]
  400aa2:	4798      	blx	r3
		}
	}
#endif
}
  400aa4:	bf00      	nop
  400aa6:	3710      	adds	r7, #16
  400aa8:	46bd      	mov	sp, r7
  400aaa:	bd80      	pop	{r7, pc}
  400aac:	00401aa1 	.word	0x00401aa1
  400ab0:	00401ab9 	.word	0x00401ab9
  400ab4:	20000a40 	.word	0x20000a40
  400ab8:	20000b40 	.word	0x20000b40
  400abc:	20000ab4 	.word	0x20000ab4

00400ac0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400ac0:	b580      	push	{r7, lr}
  400ac2:	b086      	sub	sp, #24
  400ac4:	af00      	add	r7, sp, #0
  400ac6:	60f8      	str	r0, [r7, #12]
  400ac8:	60b9      	str	r1, [r7, #8]
  400aca:	607a      	str	r2, [r7, #4]
  400acc:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400ace:	4b21      	ldr	r3, [pc, #132]	; (400b54 <pio_handler_set+0x94>)
  400ad0:	681b      	ldr	r3, [r3, #0]
  400ad2:	2b06      	cmp	r3, #6
  400ad4:	d901      	bls.n	400ada <pio_handler_set+0x1a>
		return 1;
  400ad6:	2301      	movs	r3, #1
  400ad8:	e038      	b.n	400b4c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400ada:	2300      	movs	r3, #0
  400adc:	75fb      	strb	r3, [r7, #23]
  400ade:	e011      	b.n	400b04 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400ae0:	7dfb      	ldrb	r3, [r7, #23]
  400ae2:	011b      	lsls	r3, r3, #4
  400ae4:	4a1c      	ldr	r2, [pc, #112]	; (400b58 <pio_handler_set+0x98>)
  400ae6:	4413      	add	r3, r2
  400ae8:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400aea:	693b      	ldr	r3, [r7, #16]
  400aec:	681a      	ldr	r2, [r3, #0]
  400aee:	68bb      	ldr	r3, [r7, #8]
  400af0:	429a      	cmp	r2, r3
  400af2:	d104      	bne.n	400afe <pio_handler_set+0x3e>
  400af4:	693b      	ldr	r3, [r7, #16]
  400af6:	685a      	ldr	r2, [r3, #4]
  400af8:	687b      	ldr	r3, [r7, #4]
  400afa:	429a      	cmp	r2, r3
  400afc:	d008      	beq.n	400b10 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400afe:	7dfb      	ldrb	r3, [r7, #23]
  400b00:	3301      	adds	r3, #1
  400b02:	75fb      	strb	r3, [r7, #23]
  400b04:	7dfa      	ldrb	r2, [r7, #23]
  400b06:	4b13      	ldr	r3, [pc, #76]	; (400b54 <pio_handler_set+0x94>)
  400b08:	681b      	ldr	r3, [r3, #0]
  400b0a:	429a      	cmp	r2, r3
  400b0c:	d9e8      	bls.n	400ae0 <pio_handler_set+0x20>
  400b0e:	e000      	b.n	400b12 <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  400b10:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400b12:	693b      	ldr	r3, [r7, #16]
  400b14:	68ba      	ldr	r2, [r7, #8]
  400b16:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400b18:	693b      	ldr	r3, [r7, #16]
  400b1a:	687a      	ldr	r2, [r7, #4]
  400b1c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400b1e:	693b      	ldr	r3, [r7, #16]
  400b20:	683a      	ldr	r2, [r7, #0]
  400b22:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400b24:	693b      	ldr	r3, [r7, #16]
  400b26:	6a3a      	ldr	r2, [r7, #32]
  400b28:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400b2a:	7dfa      	ldrb	r2, [r7, #23]
  400b2c:	4b09      	ldr	r3, [pc, #36]	; (400b54 <pio_handler_set+0x94>)
  400b2e:	681b      	ldr	r3, [r3, #0]
  400b30:	3301      	adds	r3, #1
  400b32:	429a      	cmp	r2, r3
  400b34:	d104      	bne.n	400b40 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400b36:	4b07      	ldr	r3, [pc, #28]	; (400b54 <pio_handler_set+0x94>)
  400b38:	681b      	ldr	r3, [r3, #0]
  400b3a:	3301      	adds	r3, #1
  400b3c:	4a05      	ldr	r2, [pc, #20]	; (400b54 <pio_handler_set+0x94>)
  400b3e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400b40:	683a      	ldr	r2, [r7, #0]
  400b42:	6879      	ldr	r1, [r7, #4]
  400b44:	68f8      	ldr	r0, [r7, #12]
  400b46:	4b05      	ldr	r3, [pc, #20]	; (400b5c <pio_handler_set+0x9c>)
  400b48:	4798      	blx	r3

	return 0;
  400b4a:	2300      	movs	r3, #0
}
  400b4c:	4618      	mov	r0, r3
  400b4e:	3718      	adds	r7, #24
  400b50:	46bd      	mov	sp, r7
  400b52:	bd80      	pop	{r7, pc}
  400b54:	20000ab0 	.word	0x20000ab0
  400b58:	20000a40 	.word	0x20000a40
  400b5c:	004019fd 	.word	0x004019fd

00400b60 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400b60:	b580      	push	{r7, lr}
  400b62:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400b64:	210b      	movs	r1, #11
  400b66:	4802      	ldr	r0, [pc, #8]	; (400b70 <PIOA_Handler+0x10>)
  400b68:	4b02      	ldr	r3, [pc, #8]	; (400b74 <PIOA_Handler+0x14>)
  400b6a:	4798      	blx	r3
}
  400b6c:	bf00      	nop
  400b6e:	bd80      	pop	{r7, pc}
  400b70:	400e0e00 	.word	0x400e0e00
  400b74:	004009ed 	.word	0x004009ed

00400b78 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400b78:	b580      	push	{r7, lr}
  400b7a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400b7c:	210c      	movs	r1, #12
  400b7e:	4802      	ldr	r0, [pc, #8]	; (400b88 <PIOB_Handler+0x10>)
  400b80:	4b02      	ldr	r3, [pc, #8]	; (400b8c <PIOB_Handler+0x14>)
  400b82:	4798      	blx	r3
}
  400b84:	bf00      	nop
  400b86:	bd80      	pop	{r7, pc}
  400b88:	400e1000 	.word	0x400e1000
  400b8c:	004009ed 	.word	0x004009ed

00400b90 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400b90:	b580      	push	{r7, lr}
  400b92:	b086      	sub	sp, #24
  400b94:	af00      	add	r7, sp, #0
  400b96:	60f8      	str	r0, [r7, #12]
  400b98:	460b      	mov	r3, r1
  400b9a:	607a      	str	r2, [r7, #4]
  400b9c:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  400b9e:	2300      	movs	r3, #0
  400ba0:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  400ba2:	68f8      	ldr	r0, [r7, #12]
  400ba4:	4b13      	ldr	r3, [pc, #76]	; (400bf4 <pio_handler_set_priority+0x64>)
  400ba6:	4798      	blx	r3
  400ba8:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400baa:	f04f 31ff 	mov.w	r1, #4294967295
  400bae:	68f8      	ldr	r0, [r7, #12]
  400bb0:	4b11      	ldr	r3, [pc, #68]	; (400bf8 <pio_handler_set_priority+0x68>)
  400bb2:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400bb4:	68f8      	ldr	r0, [r7, #12]
  400bb6:	4b11      	ldr	r3, [pc, #68]	; (400bfc <pio_handler_set_priority+0x6c>)
  400bb8:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  400bba:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400bbe:	4618      	mov	r0, r3
  400bc0:	4b0f      	ldr	r3, [pc, #60]	; (400c00 <pio_handler_set_priority+0x70>)
  400bc2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  400bc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400bc8:	4618      	mov	r0, r3
  400bca:	4b0e      	ldr	r3, [pc, #56]	; (400c04 <pio_handler_set_priority+0x74>)
  400bcc:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  400bce:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400bd2:	6879      	ldr	r1, [r7, #4]
  400bd4:	4618      	mov	r0, r3
  400bd6:	4b0c      	ldr	r3, [pc, #48]	; (400c08 <pio_handler_set_priority+0x78>)
  400bd8:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  400bda:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400bde:	4618      	mov	r0, r3
  400be0:	4b0a      	ldr	r3, [pc, #40]	; (400c0c <pio_handler_set_priority+0x7c>)
  400be2:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  400be4:	6979      	ldr	r1, [r7, #20]
  400be6:	68f8      	ldr	r0, [r7, #12]
  400be8:	4b09      	ldr	r3, [pc, #36]	; (400c10 <pio_handler_set_priority+0x80>)
  400bea:	4798      	blx	r3
}
  400bec:	bf00      	nop
  400bee:	3718      	adds	r7, #24
  400bf0:	46bd      	mov	sp, r7
  400bf2:	bd80      	pop	{r7, pc}
  400bf4:	00401ab9 	.word	0x00401ab9
  400bf8:	00401a85 	.word	0x00401a85
  400bfc:	00401aa1 	.word	0x00401aa1
  400c00:	00400931 	.word	0x00400931
  400c04:	00400965 	.word	0x00400965
  400c08:	00400999 	.word	0x00400999
  400c0c:	00400901 	.word	0x00400901
  400c10:	00401a69 	.word	0x00401a69

00400c14 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  400c14:	b480      	push	{r7}
  400c16:	b083      	sub	sp, #12
  400c18:	af00      	add	r7, sp, #0
  400c1a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400c1c:	687b      	ldr	r3, [r7, #4]
  400c1e:	2208      	movs	r2, #8
  400c20:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400c22:	687b      	ldr	r3, [r7, #4]
  400c24:	2220      	movs	r2, #32
  400c26:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400c28:	687b      	ldr	r3, [r7, #4]
  400c2a:	2204      	movs	r2, #4
  400c2c:	601a      	str	r2, [r3, #0]
}
  400c2e:	bf00      	nop
  400c30:	370c      	adds	r7, #12
  400c32:	46bd      	mov	sp, r7
  400c34:	bc80      	pop	{r7}
  400c36:	4770      	bx	lr

00400c38 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400c38:	b580      	push	{r7, lr}
  400c3a:	b084      	sub	sp, #16
  400c3c:	af00      	add	r7, sp, #0
  400c3e:	6078      	str	r0, [r7, #4]
  400c40:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  400c42:	2300      	movs	r3, #0
  400c44:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400c46:	687b      	ldr	r3, [r7, #4]
  400c48:	f04f 32ff 	mov.w	r2, #4294967295
  400c4c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400c4e:	687b      	ldr	r3, [r7, #4]
  400c50:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  400c52:	6878      	ldr	r0, [r7, #4]
  400c54:	4b0e      	ldr	r3, [pc, #56]	; (400c90 <twi_master_init+0x58>)
  400c56:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  400c58:	6878      	ldr	r0, [r7, #4]
  400c5a:	4b0e      	ldr	r3, [pc, #56]	; (400c94 <twi_master_init+0x5c>)
  400c5c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400c5e:	683b      	ldr	r3, [r7, #0]
  400c60:	6859      	ldr	r1, [r3, #4]
  400c62:	683b      	ldr	r3, [r7, #0]
  400c64:	681b      	ldr	r3, [r3, #0]
  400c66:	461a      	mov	r2, r3
  400c68:	6878      	ldr	r0, [r7, #4]
  400c6a:	4b0b      	ldr	r3, [pc, #44]	; (400c98 <twi_master_init+0x60>)
  400c6c:	4798      	blx	r3
  400c6e:	4603      	mov	r3, r0
  400c70:	2b01      	cmp	r3, #1
  400c72:	d101      	bne.n	400c78 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  400c74:	2301      	movs	r3, #1
  400c76:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  400c78:	683b      	ldr	r3, [r7, #0]
  400c7a:	7a5b      	ldrb	r3, [r3, #9]
  400c7c:	2b01      	cmp	r3, #1
  400c7e:	d102      	bne.n	400c86 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  400c80:	687b      	ldr	r3, [r7, #4]
  400c82:	2240      	movs	r2, #64	; 0x40
  400c84:	601a      	str	r2, [r3, #0]
	}

	return status;
  400c86:	68fb      	ldr	r3, [r7, #12]
}
  400c88:	4618      	mov	r0, r3
  400c8a:	3710      	adds	r7, #16
  400c8c:	46bd      	mov	sp, r7
  400c8e:	bd80      	pop	{r7, pc}
  400c90:	00400ef9 	.word	0x00400ef9
  400c94:	00400c15 	.word	0x00400c15
  400c98:	00400c9d 	.word	0x00400c9d

00400c9c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400c9c:	b480      	push	{r7}
  400c9e:	b089      	sub	sp, #36	; 0x24
  400ca0:	af00      	add	r7, sp, #0
  400ca2:	60f8      	str	r0, [r7, #12]
  400ca4:	60b9      	str	r1, [r7, #8]
  400ca6:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  400ca8:	2300      	movs	r3, #0
  400caa:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400cac:	68bb      	ldr	r3, [r7, #8]
  400cae:	4a34      	ldr	r2, [pc, #208]	; (400d80 <twi_set_speed+0xe4>)
  400cb0:	4293      	cmp	r3, r2
  400cb2:	d901      	bls.n	400cb8 <twi_set_speed+0x1c>
		return FAIL;
  400cb4:	2301      	movs	r3, #1
  400cb6:	e05d      	b.n	400d74 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400cb8:	68bb      	ldr	r3, [r7, #8]
  400cba:	4a32      	ldr	r2, [pc, #200]	; (400d84 <twi_set_speed+0xe8>)
  400cbc:	4293      	cmp	r3, r2
  400cbe:	d937      	bls.n	400d30 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400cc0:	687b      	ldr	r3, [r7, #4]
  400cc2:	4a31      	ldr	r2, [pc, #196]	; (400d88 <twi_set_speed+0xec>)
  400cc4:	fba2 2303 	umull	r2, r3, r2, r3
  400cc8:	0b9b      	lsrs	r3, r3, #14
  400cca:	3b04      	subs	r3, #4
  400ccc:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400cce:	68ba      	ldr	r2, [r7, #8]
  400cd0:	4b2e      	ldr	r3, [pc, #184]	; (400d8c <twi_set_speed+0xf0>)
  400cd2:	4413      	add	r3, r2
  400cd4:	009b      	lsls	r3, r3, #2
  400cd6:	687a      	ldr	r2, [r7, #4]
  400cd8:	fbb2 f3f3 	udiv	r3, r2, r3
  400cdc:	3b04      	subs	r3, #4
  400cde:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ce0:	e005      	b.n	400cee <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  400ce2:	69fb      	ldr	r3, [r7, #28]
  400ce4:	3301      	adds	r3, #1
  400ce6:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400ce8:	697b      	ldr	r3, [r7, #20]
  400cea:	085b      	lsrs	r3, r3, #1
  400cec:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400cee:	697b      	ldr	r3, [r7, #20]
  400cf0:	2bff      	cmp	r3, #255	; 0xff
  400cf2:	d909      	bls.n	400d08 <twi_set_speed+0x6c>
  400cf4:	69fb      	ldr	r3, [r7, #28]
  400cf6:	2b06      	cmp	r3, #6
  400cf8:	d9f3      	bls.n	400ce2 <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400cfa:	e005      	b.n	400d08 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  400cfc:	69fb      	ldr	r3, [r7, #28]
  400cfe:	3301      	adds	r3, #1
  400d00:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  400d02:	693b      	ldr	r3, [r7, #16]
  400d04:	085b      	lsrs	r3, r3, #1
  400d06:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400d08:	693b      	ldr	r3, [r7, #16]
  400d0a:	2bff      	cmp	r3, #255	; 0xff
  400d0c:	d902      	bls.n	400d14 <twi_set_speed+0x78>
  400d0e:	69fb      	ldr	r3, [r7, #28]
  400d10:	2b06      	cmp	r3, #6
  400d12:	d9f3      	bls.n	400cfc <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400d14:	697b      	ldr	r3, [r7, #20]
  400d16:	b2da      	uxtb	r2, r3
  400d18:	693b      	ldr	r3, [r7, #16]
  400d1a:	021b      	lsls	r3, r3, #8
  400d1c:	b29b      	uxth	r3, r3
  400d1e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  400d20:	69fb      	ldr	r3, [r7, #28]
  400d22:	041b      	lsls	r3, r3, #16
  400d24:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400d28:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400d2a:	68fb      	ldr	r3, [r7, #12]
  400d2c:	611a      	str	r2, [r3, #16]
  400d2e:	e020      	b.n	400d72 <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400d30:	68bb      	ldr	r3, [r7, #8]
  400d32:	005b      	lsls	r3, r3, #1
  400d34:	687a      	ldr	r2, [r7, #4]
  400d36:	fbb2 f3f3 	udiv	r3, r2, r3
  400d3a:	3b04      	subs	r3, #4
  400d3c:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400d3e:	e005      	b.n	400d4c <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  400d40:	69fb      	ldr	r3, [r7, #28]
  400d42:	3301      	adds	r3, #1
  400d44:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  400d46:	69bb      	ldr	r3, [r7, #24]
  400d48:	085b      	lsrs	r3, r3, #1
  400d4a:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400d4c:	69bb      	ldr	r3, [r7, #24]
  400d4e:	2bff      	cmp	r3, #255	; 0xff
  400d50:	d902      	bls.n	400d58 <twi_set_speed+0xbc>
  400d52:	69fb      	ldr	r3, [r7, #28]
  400d54:	2b06      	cmp	r3, #6
  400d56:	d9f3      	bls.n	400d40 <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400d58:	69bb      	ldr	r3, [r7, #24]
  400d5a:	b2da      	uxtb	r2, r3
  400d5c:	69bb      	ldr	r3, [r7, #24]
  400d5e:	021b      	lsls	r3, r3, #8
  400d60:	b29b      	uxth	r3, r3
  400d62:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  400d64:	69fb      	ldr	r3, [r7, #28]
  400d66:	041b      	lsls	r3, r3, #16
  400d68:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400d6c:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400d6e:	68fb      	ldr	r3, [r7, #12]
  400d70:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400d72:	2300      	movs	r3, #0
}
  400d74:	4618      	mov	r0, r3
  400d76:	3724      	adds	r7, #36	; 0x24
  400d78:	46bd      	mov	sp, r7
  400d7a:	bc80      	pop	{r7}
  400d7c:	4770      	bx	lr
  400d7e:	bf00      	nop
  400d80:	00061a80 	.word	0x00061a80
  400d84:	0005dc00 	.word	0x0005dc00
  400d88:	057619f1 	.word	0x057619f1
  400d8c:	3ffd1200 	.word	0x3ffd1200

00400d90 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  400d90:	b480      	push	{r7}
  400d92:	b085      	sub	sp, #20
  400d94:	af00      	add	r7, sp, #0
  400d96:	6078      	str	r0, [r7, #4]
  400d98:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  400d9a:	683b      	ldr	r3, [r7, #0]
  400d9c:	2b00      	cmp	r3, #0
  400d9e:	d101      	bne.n	400da4 <twi_mk_addr+0x14>
		return 0;
  400da0:	2300      	movs	r3, #0
  400da2:	e01d      	b.n	400de0 <twi_mk_addr+0x50>

	val = addr[0];
  400da4:	687b      	ldr	r3, [r7, #4]
  400da6:	781b      	ldrb	r3, [r3, #0]
  400da8:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  400daa:	683b      	ldr	r3, [r7, #0]
  400dac:	2b01      	cmp	r3, #1
  400dae:	dd09      	ble.n	400dc4 <twi_mk_addr+0x34>
		val <<= 8;
  400db0:	68fb      	ldr	r3, [r7, #12]
  400db2:	021b      	lsls	r3, r3, #8
  400db4:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  400db6:	687b      	ldr	r3, [r7, #4]
  400db8:	3301      	adds	r3, #1
  400dba:	781b      	ldrb	r3, [r3, #0]
  400dbc:	461a      	mov	r2, r3
  400dbe:	68fb      	ldr	r3, [r7, #12]
  400dc0:	4313      	orrs	r3, r2
  400dc2:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  400dc4:	683b      	ldr	r3, [r7, #0]
  400dc6:	2b02      	cmp	r3, #2
  400dc8:	dd09      	ble.n	400dde <twi_mk_addr+0x4e>
		val <<= 8;
  400dca:	68fb      	ldr	r3, [r7, #12]
  400dcc:	021b      	lsls	r3, r3, #8
  400dce:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  400dd0:	687b      	ldr	r3, [r7, #4]
  400dd2:	3302      	adds	r3, #2
  400dd4:	781b      	ldrb	r3, [r3, #0]
  400dd6:	461a      	mov	r2, r3
  400dd8:	68fb      	ldr	r3, [r7, #12]
  400dda:	4313      	orrs	r3, r2
  400ddc:	60fb      	str	r3, [r7, #12]
	}
	return val;
  400dde:	68fb      	ldr	r3, [r7, #12]
}
  400de0:	4618      	mov	r0, r3
  400de2:	3714      	adds	r7, #20
  400de4:	46bd      	mov	sp, r7
  400de6:	bc80      	pop	{r7}
  400de8:	4770      	bx	lr
  400dea:	bf00      	nop

00400dec <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400dec:	b580      	push	{r7, lr}
  400dee:	b088      	sub	sp, #32
  400df0:	af00      	add	r7, sp, #0
  400df2:	6078      	str	r0, [r7, #4]
  400df4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400df6:	683b      	ldr	r3, [r7, #0]
  400df8:	68db      	ldr	r3, [r3, #12]
  400dfa:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  400dfc:	683b      	ldr	r3, [r7, #0]
  400dfe:	689b      	ldr	r3, [r3, #8]
  400e00:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  400e02:	2300      	movs	r3, #0
  400e04:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  400e06:	f247 5330 	movw	r3, #30000	; 0x7530
  400e0a:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  400e0c:	69fb      	ldr	r3, [r7, #28]
  400e0e:	2b00      	cmp	r3, #0
  400e10:	d101      	bne.n	400e16 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  400e12:	2301      	movs	r3, #1
  400e14:	e069      	b.n	400eea <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400e16:	687b      	ldr	r3, [r7, #4]
  400e18:	2200      	movs	r2, #0
  400e1a:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400e1c:	683b      	ldr	r3, [r7, #0]
  400e1e:	7c1b      	ldrb	r3, [r3, #16]
  400e20:	041b      	lsls	r3, r3, #16
  400e22:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400e26:	683b      	ldr	r3, [r7, #0]
  400e28:	685b      	ldr	r3, [r3, #4]
  400e2a:	021b      	lsls	r3, r3, #8
  400e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400e30:	4313      	orrs	r3, r2
  400e32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  400e36:	687b      	ldr	r3, [r7, #4]
  400e38:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400e3a:	687b      	ldr	r3, [r7, #4]
  400e3c:	2200      	movs	r2, #0
  400e3e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400e40:	683a      	ldr	r2, [r7, #0]
  400e42:	683b      	ldr	r3, [r7, #0]
  400e44:	685b      	ldr	r3, [r3, #4]
  400e46:	4619      	mov	r1, r3
  400e48:	4610      	mov	r0, r2
  400e4a:	4b2a      	ldr	r3, [pc, #168]	; (400ef4 <twi_master_read+0x108>)
  400e4c:	4798      	blx	r3
  400e4e:	4602      	mov	r2, r0
  400e50:	687b      	ldr	r3, [r7, #4]
  400e52:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400e54:	69fb      	ldr	r3, [r7, #28]
  400e56:	2b01      	cmp	r3, #1
  400e58:	d105      	bne.n	400e66 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400e5a:	687b      	ldr	r3, [r7, #4]
  400e5c:	2203      	movs	r2, #3
  400e5e:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  400e60:	2301      	movs	r3, #1
  400e62:	75fb      	strb	r3, [r7, #23]
  400e64:	e034      	b.n	400ed0 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400e66:	687b      	ldr	r3, [r7, #4]
  400e68:	2201      	movs	r2, #1
  400e6a:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  400e6c:	2300      	movs	r3, #0
  400e6e:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  400e70:	e02e      	b.n	400ed0 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  400e72:	687b      	ldr	r3, [r7, #4]
  400e74:	6a1b      	ldr	r3, [r3, #32]
  400e76:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400e78:	68fb      	ldr	r3, [r7, #12]
  400e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400e7e:	2b00      	cmp	r3, #0
  400e80:	d001      	beq.n	400e86 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  400e82:	2305      	movs	r3, #5
  400e84:	e031      	b.n	400eea <twi_master_read+0xfe>
		}

		if (!timeout--) {
  400e86:	693b      	ldr	r3, [r7, #16]
  400e88:	1e5a      	subs	r2, r3, #1
  400e8a:	613a      	str	r2, [r7, #16]
  400e8c:	2b00      	cmp	r3, #0
  400e8e:	d101      	bne.n	400e94 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  400e90:	2309      	movs	r3, #9
  400e92:	e02a      	b.n	400eea <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400e94:	69fb      	ldr	r3, [r7, #28]
  400e96:	2b01      	cmp	r3, #1
  400e98:	d107      	bne.n	400eaa <twi_master_read+0xbe>
  400e9a:	7dfb      	ldrb	r3, [r7, #23]
  400e9c:	2b00      	cmp	r3, #0
  400e9e:	d104      	bne.n	400eaa <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  400ea0:	687b      	ldr	r3, [r7, #4]
  400ea2:	2202      	movs	r2, #2
  400ea4:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  400ea6:	2301      	movs	r3, #1
  400ea8:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  400eaa:	68fb      	ldr	r3, [r7, #12]
  400eac:	f003 0302 	and.w	r3, r3, #2
  400eb0:	2b00      	cmp	r3, #0
  400eb2:	d100      	bne.n	400eb6 <twi_master_read+0xca>
			continue;
  400eb4:	e00c      	b.n	400ed0 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  400eb6:	69bb      	ldr	r3, [r7, #24]
  400eb8:	1c5a      	adds	r2, r3, #1
  400eba:	61ba      	str	r2, [r7, #24]
  400ebc:	687a      	ldr	r2, [r7, #4]
  400ebe:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400ec0:	b2d2      	uxtb	r2, r2
  400ec2:	701a      	strb	r2, [r3, #0]

		cnt--;
  400ec4:	69fb      	ldr	r3, [r7, #28]
  400ec6:	3b01      	subs	r3, #1
  400ec8:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  400eca:	f247 5330 	movw	r3, #30000	; 0x7530
  400ece:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400ed0:	69fb      	ldr	r3, [r7, #28]
  400ed2:	2b00      	cmp	r3, #0
  400ed4:	d1cd      	bne.n	400e72 <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400ed6:	bf00      	nop
  400ed8:	687b      	ldr	r3, [r7, #4]
  400eda:	6a1b      	ldr	r3, [r3, #32]
  400edc:	f003 0301 	and.w	r3, r3, #1
  400ee0:	2b00      	cmp	r3, #0
  400ee2:	d0f9      	beq.n	400ed8 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  400ee4:	687b      	ldr	r3, [r7, #4]
  400ee6:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  400ee8:	2300      	movs	r3, #0
}
  400eea:	4618      	mov	r0, r3
  400eec:	3720      	adds	r7, #32
  400eee:	46bd      	mov	sp, r7
  400ef0:	bd80      	pop	{r7, pc}
  400ef2:	bf00      	nop
  400ef4:	00400d91 	.word	0x00400d91

00400ef8 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  400ef8:	b480      	push	{r7}
  400efa:	b083      	sub	sp, #12
  400efc:	af00      	add	r7, sp, #0
  400efe:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400f00:	687b      	ldr	r3, [r7, #4]
  400f02:	2280      	movs	r2, #128	; 0x80
  400f04:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  400f06:	687b      	ldr	r3, [r7, #4]
  400f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400f0a:	bf00      	nop
  400f0c:	370c      	adds	r7, #12
  400f0e:	46bd      	mov	sp, r7
  400f10:	bc80      	pop	{r7}
  400f12:	4770      	bx	lr

00400f14 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400f14:	b480      	push	{r7}
  400f16:	b085      	sub	sp, #20
  400f18:	af00      	add	r7, sp, #0
  400f1a:	6078      	str	r0, [r7, #4]
  400f1c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  400f1e:	2300      	movs	r3, #0
  400f20:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400f22:	687b      	ldr	r3, [r7, #4]
  400f24:	22ac      	movs	r2, #172	; 0xac
  400f26:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400f28:	683b      	ldr	r3, [r7, #0]
  400f2a:	681a      	ldr	r2, [r3, #0]
  400f2c:	683b      	ldr	r3, [r7, #0]
  400f2e:	685b      	ldr	r3, [r3, #4]
  400f30:	fbb2 f3f3 	udiv	r3, r2, r3
  400f34:	091b      	lsrs	r3, r3, #4
  400f36:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400f38:	68fb      	ldr	r3, [r7, #12]
  400f3a:	2b00      	cmp	r3, #0
  400f3c:	d003      	beq.n	400f46 <uart_init+0x32>
  400f3e:	68fb      	ldr	r3, [r7, #12]
  400f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400f44:	d301      	bcc.n	400f4a <uart_init+0x36>
		return 1;
  400f46:	2301      	movs	r3, #1
  400f48:	e00f      	b.n	400f6a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  400f4a:	687b      	ldr	r3, [r7, #4]
  400f4c:	68fa      	ldr	r2, [r7, #12]
  400f4e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400f50:	683b      	ldr	r3, [r7, #0]
  400f52:	689a      	ldr	r2, [r3, #8]
  400f54:	687b      	ldr	r3, [r7, #4]
  400f56:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400f58:	687b      	ldr	r3, [r7, #4]
  400f5a:	f240 2202 	movw	r2, #514	; 0x202
  400f5e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400f62:	687b      	ldr	r3, [r7, #4]
  400f64:	2250      	movs	r2, #80	; 0x50
  400f66:	601a      	str	r2, [r3, #0]

	return 0;
  400f68:	2300      	movs	r3, #0
}
  400f6a:	4618      	mov	r0, r3
  400f6c:	3714      	adds	r7, #20
  400f6e:	46bd      	mov	sp, r7
  400f70:	bc80      	pop	{r7}
  400f72:	4770      	bx	lr

00400f74 <uart_disable_tx>:
 * \brief Disable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable_tx(Uart *p_uart)
{
  400f74:	b480      	push	{r7}
  400f76:	b083      	sub	sp, #12
  400f78:	af00      	add	r7, sp, #0
  400f7a:	6078      	str	r0, [r7, #4]
	/* Disable transmitter */
	p_uart->UART_CR = UART_CR_TXDIS;
  400f7c:	687b      	ldr	r3, [r7, #4]
  400f7e:	2280      	movs	r2, #128	; 0x80
  400f80:	601a      	str	r2, [r3, #0]
}
  400f82:	bf00      	nop
  400f84:	370c      	adds	r7, #12
  400f86:	46bd      	mov	sp, r7
  400f88:	bc80      	pop	{r7}
  400f8a:	4770      	bx	lr

00400f8c <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
  400f8c:	b480      	push	{r7}
  400f8e:	b083      	sub	sp, #12
  400f90:	af00      	add	r7, sp, #0
  400f92:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  400f94:	687b      	ldr	r3, [r7, #4]
  400f96:	2210      	movs	r2, #16
  400f98:	601a      	str	r2, [r3, #0]
}
  400f9a:	bf00      	nop
  400f9c:	370c      	adds	r7, #12
  400f9e:	46bd      	mov	sp, r7
  400fa0:	bc80      	pop	{r7}
  400fa2:	4770      	bx	lr

00400fa4 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  400fa4:	b480      	push	{r7}
  400fa6:	b083      	sub	sp, #12
  400fa8:	af00      	add	r7, sp, #0
  400faa:	6078      	str	r0, [r7, #4]
  400fac:	460b      	mov	r3, r1
  400fae:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400fb0:	687b      	ldr	r3, [r7, #4]
  400fb2:	695b      	ldr	r3, [r3, #20]
  400fb4:	f003 0302 	and.w	r3, r3, #2
  400fb8:	2b00      	cmp	r3, #0
  400fba:	d101      	bne.n	400fc0 <uart_write+0x1c>
		return 1;
  400fbc:	2301      	movs	r3, #1
  400fbe:	e003      	b.n	400fc8 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  400fc0:	78fa      	ldrb	r2, [r7, #3]
  400fc2:	687b      	ldr	r3, [r7, #4]
  400fc4:	61da      	str	r2, [r3, #28]
	return 0;
  400fc6:	2300      	movs	r3, #0
}
  400fc8:	4618      	mov	r0, r3
  400fca:	370c      	adds	r7, #12
  400fcc:	46bd      	mov	sp, r7
  400fce:	bc80      	pop	{r7}
  400fd0:	4770      	bx	lr
  400fd2:	bf00      	nop

00400fd4 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  400fd4:	b480      	push	{r7}
  400fd6:	b083      	sub	sp, #12
  400fd8:	af00      	add	r7, sp, #0
  400fda:	6078      	str	r0, [r7, #4]
  400fdc:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400fde:	687b      	ldr	r3, [r7, #4]
  400fe0:	695b      	ldr	r3, [r3, #20]
  400fe2:	f003 0301 	and.w	r3, r3, #1
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d101      	bne.n	400fee <uart_read+0x1a>
		return 1;
  400fea:	2301      	movs	r3, #1
  400fec:	e005      	b.n	400ffa <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400fee:	687b      	ldr	r3, [r7, #4]
  400ff0:	699b      	ldr	r3, [r3, #24]
  400ff2:	b2da      	uxtb	r2, r3
  400ff4:	683b      	ldr	r3, [r7, #0]
  400ff6:	701a      	strb	r2, [r3, #0]
	return 0;
  400ff8:	2300      	movs	r3, #0
}
  400ffa:	4618      	mov	r0, r3
  400ffc:	370c      	adds	r7, #12
  400ffe:	46bd      	mov	sp, r7
  401000:	bc80      	pop	{r7}
  401002:	4770      	bx	lr

00401004 <uart_get_pdc_base>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return UART PDC registers base for PDC driver to access.
 */
Pdc *uart_get_pdc_base(Uart *p_uart)
{
  401004:	b480      	push	{r7}
  401006:	b085      	sub	sp, #20
  401008:	af00      	add	r7, sp, #0
  40100a:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART0)
  40100c:	687b      	ldr	r3, [r7, #4]
  40100e:	4a08      	ldr	r2, [pc, #32]	; (401030 <uart_get_pdc_base+0x2c>)
  401010:	4293      	cmp	r3, r2
  401012:	d101      	bne.n	401018 <uart_get_pdc_base+0x14>
		p_pdc_base = PDC_UART0;
  401014:	4b07      	ldr	r3, [pc, #28]	; (401034 <uart_get_pdc_base+0x30>)
  401016:	60fb      	str	r3, [r7, #12]
#else
#error "Unsupported device"
#endif

#if (SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART1)
  401018:	687b      	ldr	r3, [r7, #4]
  40101a:	4a07      	ldr	r2, [pc, #28]	; (401038 <uart_get_pdc_base+0x34>)
  40101c:	4293      	cmp	r3, r2
  40101e:	d101      	bne.n	401024 <uart_get_pdc_base+0x20>
		p_pdc_base = PDC_UART1;
  401020:	4b06      	ldr	r3, [pc, #24]	; (40103c <uart_get_pdc_base+0x38>)
  401022:	60fb      	str	r3, [r7, #12]
#if (SAM4N)
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
  401024:	68fb      	ldr	r3, [r7, #12]
}
  401026:	4618      	mov	r0, r3
  401028:	3714      	adds	r7, #20
  40102a:	46bd      	mov	sp, r7
  40102c:	bc80      	pop	{r7}
  40102e:	4770      	bx	lr
  401030:	400e0600 	.word	0x400e0600
  401034:	400e0700 	.word	0x400e0700
  401038:	400e0800 	.word	0x400e0800
  40103c:	400e0900 	.word	0x400e0900

00401040 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401040:	b480      	push	{r7}
  401042:	b089      	sub	sp, #36	; 0x24
  401044:	af00      	add	r7, sp, #0
  401046:	60f8      	str	r0, [r7, #12]
  401048:	60b9      	str	r1, [r7, #8]
  40104a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40104c:	68bb      	ldr	r3, [r7, #8]
  40104e:	011a      	lsls	r2, r3, #4
  401050:	687b      	ldr	r3, [r7, #4]
  401052:	429a      	cmp	r2, r3
  401054:	d802      	bhi.n	40105c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401056:	2310      	movs	r3, #16
  401058:	61fb      	str	r3, [r7, #28]
  40105a:	e001      	b.n	401060 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40105c:	2308      	movs	r3, #8
  40105e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401060:	687b      	ldr	r3, [r7, #4]
  401062:	00da      	lsls	r2, r3, #3
  401064:	69fb      	ldr	r3, [r7, #28]
  401066:	68b9      	ldr	r1, [r7, #8]
  401068:	fb01 f303 	mul.w	r3, r1, r3
  40106c:	085b      	lsrs	r3, r3, #1
  40106e:	441a      	add	r2, r3
  401070:	69fb      	ldr	r3, [r7, #28]
  401072:	68b9      	ldr	r1, [r7, #8]
  401074:	fb01 f303 	mul.w	r3, r1, r3
  401078:	fbb2 f3f3 	udiv	r3, r2, r3
  40107c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40107e:	69bb      	ldr	r3, [r7, #24]
  401080:	08db      	lsrs	r3, r3, #3
  401082:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401084:	69bb      	ldr	r3, [r7, #24]
  401086:	f003 0307 	and.w	r3, r3, #7
  40108a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40108c:	697b      	ldr	r3, [r7, #20]
  40108e:	2b00      	cmp	r3, #0
  401090:	d003      	beq.n	40109a <usart_set_async_baudrate+0x5a>
  401092:	697b      	ldr	r3, [r7, #20]
  401094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401098:	d301      	bcc.n	40109e <usart_set_async_baudrate+0x5e>
		return 1;
  40109a:	2301      	movs	r3, #1
  40109c:	e00f      	b.n	4010be <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40109e:	69fb      	ldr	r3, [r7, #28]
  4010a0:	2b08      	cmp	r3, #8
  4010a2:	d105      	bne.n	4010b0 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4010a4:	68fb      	ldr	r3, [r7, #12]
  4010a6:	685b      	ldr	r3, [r3, #4]
  4010a8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4010ac:	68fb      	ldr	r3, [r7, #12]
  4010ae:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4010b0:	693b      	ldr	r3, [r7, #16]
  4010b2:	041a      	lsls	r2, r3, #16
  4010b4:	697b      	ldr	r3, [r7, #20]
  4010b6:	431a      	orrs	r2, r3
  4010b8:	68fb      	ldr	r3, [r7, #12]
  4010ba:	621a      	str	r2, [r3, #32]

	return 0;
  4010bc:	2300      	movs	r3, #0
}
  4010be:	4618      	mov	r0, r3
  4010c0:	3724      	adds	r7, #36	; 0x24
  4010c2:	46bd      	mov	sp, r7
  4010c4:	bc80      	pop	{r7}
  4010c6:	4770      	bx	lr

004010c8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4010c8:	b580      	push	{r7, lr}
  4010ca:	b082      	sub	sp, #8
  4010cc:	af00      	add	r7, sp, #0
  4010ce:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4010d0:	6878      	ldr	r0, [r7, #4]
  4010d2:	4b0f      	ldr	r3, [pc, #60]	; (401110 <usart_reset+0x48>)
  4010d4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4010d6:	687b      	ldr	r3, [r7, #4]
  4010d8:	2200      	movs	r2, #0
  4010da:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4010dc:	687b      	ldr	r3, [r7, #4]
  4010de:	2200      	movs	r2, #0
  4010e0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4010e2:	687b      	ldr	r3, [r7, #4]
  4010e4:	2200      	movs	r2, #0
  4010e6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4010e8:	6878      	ldr	r0, [r7, #4]
  4010ea:	4b0a      	ldr	r3, [pc, #40]	; (401114 <usart_reset+0x4c>)
  4010ec:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4010ee:	6878      	ldr	r0, [r7, #4]
  4010f0:	4b09      	ldr	r3, [pc, #36]	; (401118 <usart_reset+0x50>)
  4010f2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4010f4:	6878      	ldr	r0, [r7, #4]
  4010f6:	4b09      	ldr	r3, [pc, #36]	; (40111c <usart_reset+0x54>)
  4010f8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4010fa:	6878      	ldr	r0, [r7, #4]
  4010fc:	4b08      	ldr	r3, [pc, #32]	; (401120 <usart_reset+0x58>)
  4010fe:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  401100:	6878      	ldr	r0, [r7, #4]
  401102:	4b08      	ldr	r3, [pc, #32]	; (401124 <usart_reset+0x5c>)
  401104:	4798      	blx	r3
#endif
}
  401106:	bf00      	nop
  401108:	3708      	adds	r7, #8
  40110a:	46bd      	mov	sp, r7
  40110c:	bd80      	pop	{r7, pc}
  40110e:	bf00      	nop
  401110:	00401355 	.word	0x00401355
  401114:	004011dd 	.word	0x004011dd
  401118:	00401225 	.word	0x00401225
  40111c:	00401255 	.word	0x00401255
  401120:	0040128d 	.word	0x0040128d
  401124:	00401271 	.word	0x00401271

00401128 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401128:	b580      	push	{r7, lr}
  40112a:	b084      	sub	sp, #16
  40112c:	af00      	add	r7, sp, #0
  40112e:	60f8      	str	r0, [r7, #12]
  401130:	60b9      	str	r1, [r7, #8]
  401132:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401134:	68f8      	ldr	r0, [r7, #12]
  401136:	4b1a      	ldr	r3, [pc, #104]	; (4011a0 <usart_init_rs232+0x78>)
  401138:	4798      	blx	r3

	ul_reg_val = 0;
  40113a:	4b1a      	ldr	r3, [pc, #104]	; (4011a4 <usart_init_rs232+0x7c>)
  40113c:	2200      	movs	r2, #0
  40113e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401140:	68bb      	ldr	r3, [r7, #8]
  401142:	2b00      	cmp	r3, #0
  401144:	d009      	beq.n	40115a <usart_init_rs232+0x32>
  401146:	68bb      	ldr	r3, [r7, #8]
  401148:	681b      	ldr	r3, [r3, #0]
  40114a:	687a      	ldr	r2, [r7, #4]
  40114c:	4619      	mov	r1, r3
  40114e:	68f8      	ldr	r0, [r7, #12]
  401150:	4b15      	ldr	r3, [pc, #84]	; (4011a8 <usart_init_rs232+0x80>)
  401152:	4798      	blx	r3
  401154:	4603      	mov	r3, r0
  401156:	2b00      	cmp	r3, #0
  401158:	d001      	beq.n	40115e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40115a:	2301      	movs	r3, #1
  40115c:	e01b      	b.n	401196 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40115e:	68bb      	ldr	r3, [r7, #8]
  401160:	685a      	ldr	r2, [r3, #4]
  401162:	68bb      	ldr	r3, [r7, #8]
  401164:	689b      	ldr	r3, [r3, #8]
  401166:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401168:	68bb      	ldr	r3, [r7, #8]
  40116a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40116c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40116e:	68bb      	ldr	r3, [r7, #8]
  401170:	68db      	ldr	r3, [r3, #12]
  401172:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401174:	4b0b      	ldr	r3, [pc, #44]	; (4011a4 <usart_init_rs232+0x7c>)
  401176:	681b      	ldr	r3, [r3, #0]
  401178:	4313      	orrs	r3, r2
  40117a:	4a0a      	ldr	r2, [pc, #40]	; (4011a4 <usart_init_rs232+0x7c>)
  40117c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40117e:	4b09      	ldr	r3, [pc, #36]	; (4011a4 <usart_init_rs232+0x7c>)
  401180:	681b      	ldr	r3, [r3, #0]
  401182:	4a08      	ldr	r2, [pc, #32]	; (4011a4 <usart_init_rs232+0x7c>)
  401184:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401186:	68fb      	ldr	r3, [r7, #12]
  401188:	685a      	ldr	r2, [r3, #4]
  40118a:	4b06      	ldr	r3, [pc, #24]	; (4011a4 <usart_init_rs232+0x7c>)
  40118c:	681b      	ldr	r3, [r3, #0]
  40118e:	431a      	orrs	r2, r3
  401190:	68fb      	ldr	r3, [r7, #12]
  401192:	605a      	str	r2, [r3, #4]

	return 0;
  401194:	2300      	movs	r3, #0
}
  401196:	4618      	mov	r0, r3
  401198:	3710      	adds	r7, #16
  40119a:	46bd      	mov	sp, r7
  40119c:	bd80      	pop	{r7, pc}
  40119e:	bf00      	nop
  4011a0:	004010c9 	.word	0x004010c9
  4011a4:	20000ab8 	.word	0x20000ab8
  4011a8:	00401041 	.word	0x00401041

004011ac <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4011ac:	b480      	push	{r7}
  4011ae:	b083      	sub	sp, #12
  4011b0:	af00      	add	r7, sp, #0
  4011b2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4011b4:	687b      	ldr	r3, [r7, #4]
  4011b6:	2240      	movs	r2, #64	; 0x40
  4011b8:	601a      	str	r2, [r3, #0]
}
  4011ba:	bf00      	nop
  4011bc:	370c      	adds	r7, #12
  4011be:	46bd      	mov	sp, r7
  4011c0:	bc80      	pop	{r7}
  4011c2:	4770      	bx	lr

004011c4 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  4011c4:	b480      	push	{r7}
  4011c6:	b083      	sub	sp, #12
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  4011cc:	687b      	ldr	r3, [r7, #4]
  4011ce:	2280      	movs	r2, #128	; 0x80
  4011d0:	601a      	str	r2, [r3, #0]
}
  4011d2:	bf00      	nop
  4011d4:	370c      	adds	r7, #12
  4011d6:	46bd      	mov	sp, r7
  4011d8:	bc80      	pop	{r7}
  4011da:	4770      	bx	lr

004011dc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4011dc:	b480      	push	{r7}
  4011de:	b083      	sub	sp, #12
  4011e0:	af00      	add	r7, sp, #0
  4011e2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4011e4:	687b      	ldr	r3, [r7, #4]
  4011e6:	2288      	movs	r2, #136	; 0x88
  4011e8:	601a      	str	r2, [r3, #0]
}
  4011ea:	bf00      	nop
  4011ec:	370c      	adds	r7, #12
  4011ee:	46bd      	mov	sp, r7
  4011f0:	bc80      	pop	{r7}
  4011f2:	4770      	bx	lr

004011f4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4011f4:	b480      	push	{r7}
  4011f6:	b083      	sub	sp, #12
  4011f8:	af00      	add	r7, sp, #0
  4011fa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4011fc:	687b      	ldr	r3, [r7, #4]
  4011fe:	2210      	movs	r2, #16
  401200:	601a      	str	r2, [r3, #0]
}
  401202:	bf00      	nop
  401204:	370c      	adds	r7, #12
  401206:	46bd      	mov	sp, r7
  401208:	bc80      	pop	{r7}
  40120a:	4770      	bx	lr

0040120c <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
  40120c:	b480      	push	{r7}
  40120e:	b083      	sub	sp, #12
  401210:	af00      	add	r7, sp, #0
  401212:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
  401214:	687b      	ldr	r3, [r7, #4]
  401216:	2220      	movs	r2, #32
  401218:	601a      	str	r2, [r3, #0]
}
  40121a:	bf00      	nop
  40121c:	370c      	adds	r7, #12
  40121e:	46bd      	mov	sp, r7
  401220:	bc80      	pop	{r7}
  401222:	4770      	bx	lr

00401224 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401224:	b480      	push	{r7}
  401226:	b083      	sub	sp, #12
  401228:	af00      	add	r7, sp, #0
  40122a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40122c:	687b      	ldr	r3, [r7, #4]
  40122e:	2224      	movs	r2, #36	; 0x24
  401230:	601a      	str	r2, [r3, #0]
}
  401232:	bf00      	nop
  401234:	370c      	adds	r7, #12
  401236:	46bd      	mov	sp, r7
  401238:	bc80      	pop	{r7}
  40123a:	4770      	bx	lr

0040123c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40123c:	b480      	push	{r7}
  40123e:	b083      	sub	sp, #12
  401240:	af00      	add	r7, sp, #0
  401242:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401244:	687b      	ldr	r3, [r7, #4]
  401246:	695b      	ldr	r3, [r3, #20]
}
  401248:	4618      	mov	r0, r3
  40124a:	370c      	adds	r7, #12
  40124c:	46bd      	mov	sp, r7
  40124e:	bc80      	pop	{r7}
  401250:	4770      	bx	lr
  401252:	bf00      	nop

00401254 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401254:	b480      	push	{r7}
  401256:	b083      	sub	sp, #12
  401258:	af00      	add	r7, sp, #0
  40125a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40125c:	687b      	ldr	r3, [r7, #4]
  40125e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401262:	601a      	str	r2, [r3, #0]
}
  401264:	bf00      	nop
  401266:	370c      	adds	r7, #12
  401268:	46bd      	mov	sp, r7
  40126a:	bc80      	pop	{r7}
  40126c:	4770      	bx	lr
  40126e:	bf00      	nop

00401270 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  401270:	b480      	push	{r7}
  401272:	b083      	sub	sp, #12
  401274:	af00      	add	r7, sp, #0
  401276:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  401278:	687b      	ldr	r3, [r7, #4]
  40127a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40127e:	601a      	str	r2, [r3, #0]
}
  401280:	bf00      	nop
  401282:	370c      	adds	r7, #12
  401284:	46bd      	mov	sp, r7
  401286:	bc80      	pop	{r7}
  401288:	4770      	bx	lr
  40128a:	bf00      	nop

0040128c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40128c:	b480      	push	{r7}
  40128e:	b083      	sub	sp, #12
  401290:	af00      	add	r7, sp, #0
  401292:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401294:	687b      	ldr	r3, [r7, #4]
  401296:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40129a:	601a      	str	r2, [r3, #0]
}
  40129c:	bf00      	nop
  40129e:	370c      	adds	r7, #12
  4012a0:	46bd      	mov	sp, r7
  4012a2:	bc80      	pop	{r7}
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop

004012a8 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4012a8:	b480      	push	{r7}
  4012aa:	b083      	sub	sp, #12
  4012ac:	af00      	add	r7, sp, #0
  4012ae:	6078      	str	r0, [r7, #4]
  4012b0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4012b2:	687b      	ldr	r3, [r7, #4]
  4012b4:	695b      	ldr	r3, [r3, #20]
  4012b6:	f003 0302 	and.w	r3, r3, #2
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	d101      	bne.n	4012c2 <usart_write+0x1a>
		return 1;
  4012be:	2301      	movs	r3, #1
  4012c0:	e005      	b.n	4012ce <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4012c2:	683b      	ldr	r3, [r7, #0]
  4012c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	61da      	str	r2, [r3, #28]
	return 0;
  4012cc:	2300      	movs	r3, #0
}
  4012ce:	4618      	mov	r0, r3
  4012d0:	370c      	adds	r7, #12
  4012d2:	46bd      	mov	sp, r7
  4012d4:	bc80      	pop	{r7}
  4012d6:	4770      	bx	lr

004012d8 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4012d8:	b480      	push	{r7}
  4012da:	b083      	sub	sp, #12
  4012dc:	af00      	add	r7, sp, #0
  4012de:	6078      	str	r0, [r7, #4]
  4012e0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4012e2:	687b      	ldr	r3, [r7, #4]
  4012e4:	695b      	ldr	r3, [r3, #20]
  4012e6:	f003 0301 	and.w	r3, r3, #1
  4012ea:	2b00      	cmp	r3, #0
  4012ec:	d101      	bne.n	4012f2 <usart_read+0x1a>
		return 1;
  4012ee:	2301      	movs	r3, #1
  4012f0:	e006      	b.n	401300 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4012f2:	687b      	ldr	r3, [r7, #4]
  4012f4:	699b      	ldr	r3, [r3, #24]
  4012f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4012fa:	683b      	ldr	r3, [r7, #0]
  4012fc:	601a      	str	r2, [r3, #0]

	return 0;
  4012fe:	2300      	movs	r3, #0
}
  401300:	4618      	mov	r0, r3
  401302:	370c      	adds	r7, #12
  401304:	46bd      	mov	sp, r7
  401306:	bc80      	pop	{r7}
  401308:	4770      	bx	lr
  40130a:	bf00      	nop

0040130c <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  40130c:	b480      	push	{r7}
  40130e:	b085      	sub	sp, #20
  401310:	af00      	add	r7, sp, #0
  401312:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  401314:	2300      	movs	r3, #0
  401316:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  401318:	687b      	ldr	r3, [r7, #4]
  40131a:	4a0a      	ldr	r2, [pc, #40]	; (401344 <usart_get_pdc_base+0x38>)
  40131c:	4293      	cmp	r3, r2
  40131e:	d103      	bne.n	401328 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  401320:	4b09      	ldr	r3, [pc, #36]	; (401348 <usart_get_pdc_base+0x3c>)
  401322:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  401324:	68fb      	ldr	r3, [r7, #12]
  401326:	e008      	b.n	40133a <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  401328:	687b      	ldr	r3, [r7, #4]
  40132a:	4a08      	ldr	r2, [pc, #32]	; (40134c <usart_get_pdc_base+0x40>)
  40132c:	4293      	cmp	r3, r2
  40132e:	d103      	bne.n	401338 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  401330:	4b07      	ldr	r3, [pc, #28]	; (401350 <usart_get_pdc_base+0x44>)
  401332:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  401334:	68fb      	ldr	r3, [r7, #12]
  401336:	e000      	b.n	40133a <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  401338:	68fb      	ldr	r3, [r7, #12]
}
  40133a:	4618      	mov	r0, r3
  40133c:	3714      	adds	r7, #20
  40133e:	46bd      	mov	sp, r7
  401340:	bc80      	pop	{r7}
  401342:	4770      	bx	lr
  401344:	40024000 	.word	0x40024000
  401348:	40024100 	.word	0x40024100
  40134c:	40028000 	.word	0x40028000
  401350:	40028100 	.word	0x40028100

00401354 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401354:	b480      	push	{r7}
  401356:	b083      	sub	sp, #12
  401358:	af00      	add	r7, sp, #0
  40135a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40135c:	687b      	ldr	r3, [r7, #4]
  40135e:	4a04      	ldr	r2, [pc, #16]	; (401370 <usart_disable_writeprotect+0x1c>)
  401360:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401364:	bf00      	nop
  401366:	370c      	adds	r7, #12
  401368:	46bd      	mov	sp, r7
  40136a:	bc80      	pop	{r7}
  40136c:	4770      	bx	lr
  40136e:	bf00      	nop
  401370:	55534100 	.word	0x55534100

00401374 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  401374:	b580      	push	{r7, lr}
  401376:	b082      	sub	sp, #8
  401378:	af00      	add	r7, sp, #0
  40137a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40137c:	687b      	ldr	r3, [r7, #4]
  40137e:	2b07      	cmp	r3, #7
  401380:	d831      	bhi.n	4013e6 <osc_enable+0x72>
  401382:	a201      	add	r2, pc, #4	; (adr r2, 401388 <osc_enable+0x14>)
  401384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401388:	004013e5 	.word	0x004013e5
  40138c:	004013a9 	.word	0x004013a9
  401390:	004013b1 	.word	0x004013b1
  401394:	004013b9 	.word	0x004013b9
  401398:	004013c1 	.word	0x004013c1
  40139c:	004013c9 	.word	0x004013c9
  4013a0:	004013d1 	.word	0x004013d1
  4013a4:	004013db 	.word	0x004013db
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4013a8:	2000      	movs	r0, #0
  4013aa:	4b11      	ldr	r3, [pc, #68]	; (4013f0 <osc_enable+0x7c>)
  4013ac:	4798      	blx	r3
		break;
  4013ae:	e01a      	b.n	4013e6 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4013b0:	2001      	movs	r0, #1
  4013b2:	4b0f      	ldr	r3, [pc, #60]	; (4013f0 <osc_enable+0x7c>)
  4013b4:	4798      	blx	r3
		break;
  4013b6:	e016      	b.n	4013e6 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4013b8:	2000      	movs	r0, #0
  4013ba:	4b0e      	ldr	r3, [pc, #56]	; (4013f4 <osc_enable+0x80>)
  4013bc:	4798      	blx	r3
		break;
  4013be:	e012      	b.n	4013e6 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4013c0:	2010      	movs	r0, #16
  4013c2:	4b0c      	ldr	r3, [pc, #48]	; (4013f4 <osc_enable+0x80>)
  4013c4:	4798      	blx	r3
		break;
  4013c6:	e00e      	b.n	4013e6 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4013c8:	2020      	movs	r0, #32
  4013ca:	4b0a      	ldr	r3, [pc, #40]	; (4013f4 <osc_enable+0x80>)
  4013cc:	4798      	blx	r3
		break;
  4013ce:	e00a      	b.n	4013e6 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4013d0:	213e      	movs	r1, #62	; 0x3e
  4013d2:	2000      	movs	r0, #0
  4013d4:	4b08      	ldr	r3, [pc, #32]	; (4013f8 <osc_enable+0x84>)
  4013d6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4013d8:	e005      	b.n	4013e6 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4013da:	213e      	movs	r1, #62	; 0x3e
  4013dc:	2001      	movs	r0, #1
  4013de:	4b06      	ldr	r3, [pc, #24]	; (4013f8 <osc_enable+0x84>)
  4013e0:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4013e2:	e000      	b.n	4013e6 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  4013e4:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  4013e6:	bf00      	nop
  4013e8:	3708      	adds	r7, #8
  4013ea:	46bd      	mov	sp, r7
  4013ec:	bd80      	pop	{r7, pc}
  4013ee:	bf00      	nop
  4013f0:	00401ee1 	.word	0x00401ee1
  4013f4:	00401f4d 	.word	0x00401f4d
  4013f8:	00401fbd 	.word	0x00401fbd

004013fc <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4013fc:	b580      	push	{r7, lr}
  4013fe:	b082      	sub	sp, #8
  401400:	af00      	add	r7, sp, #0
  401402:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401404:	687b      	ldr	r3, [r7, #4]
  401406:	2b07      	cmp	r3, #7
  401408:	d826      	bhi.n	401458 <osc_is_ready+0x5c>
  40140a:	a201      	add	r2, pc, #4	; (adr r2, 401410 <osc_is_ready+0x14>)
  40140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401410:	00401431 	.word	0x00401431
  401414:	00401435 	.word	0x00401435
  401418:	00401435 	.word	0x00401435
  40141c:	00401447 	.word	0x00401447
  401420:	00401447 	.word	0x00401447
  401424:	00401447 	.word	0x00401447
  401428:	00401447 	.word	0x00401447
  40142c:	00401447 	.word	0x00401447
	case OSC_SLCK_32K_RC:
		return 1;
  401430:	2301      	movs	r3, #1
  401432:	e012      	b.n	40145a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  401434:	4b0b      	ldr	r3, [pc, #44]	; (401464 <osc_is_ready+0x68>)
  401436:	4798      	blx	r3
  401438:	4603      	mov	r3, r0
  40143a:	2b00      	cmp	r3, #0
  40143c:	bf14      	ite	ne
  40143e:	2301      	movne	r3, #1
  401440:	2300      	moveq	r3, #0
  401442:	b2db      	uxtb	r3, r3
  401444:	e009      	b.n	40145a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401446:	4b08      	ldr	r3, [pc, #32]	; (401468 <osc_is_ready+0x6c>)
  401448:	4798      	blx	r3
  40144a:	4603      	mov	r3, r0
  40144c:	2b00      	cmp	r3, #0
  40144e:	bf14      	ite	ne
  401450:	2301      	movne	r3, #1
  401452:	2300      	moveq	r3, #0
  401454:	b2db      	uxtb	r3, r3
  401456:	e000      	b.n	40145a <osc_is_ready+0x5e>
	}

	return 0;
  401458:	2300      	movs	r3, #0
}
  40145a:	4618      	mov	r0, r3
  40145c:	3708      	adds	r7, #8
  40145e:	46bd      	mov	sp, r7
  401460:	bd80      	pop	{r7, pc}
  401462:	bf00      	nop
  401464:	00401f19 	.word	0x00401f19
  401468:	00402035 	.word	0x00402035

0040146c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40146c:	b480      	push	{r7}
  40146e:	b083      	sub	sp, #12
  401470:	af00      	add	r7, sp, #0
  401472:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401474:	687b      	ldr	r3, [r7, #4]
  401476:	2b07      	cmp	r3, #7
  401478:	d825      	bhi.n	4014c6 <osc_get_rate+0x5a>
  40147a:	a201      	add	r2, pc, #4	; (adr r2, 401480 <osc_get_rate+0x14>)
  40147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401480:	004014a1 	.word	0x004014a1
  401484:	004014a7 	.word	0x004014a7
  401488:	004014ad 	.word	0x004014ad
  40148c:	004014b3 	.word	0x004014b3
  401490:	004014b7 	.word	0x004014b7
  401494:	004014bb 	.word	0x004014bb
  401498:	004014bf 	.word	0x004014bf
  40149c:	004014c3 	.word	0x004014c3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4014a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4014a4:	e010      	b.n	4014c8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4014a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014aa:	e00d      	b.n	4014c8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4014ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014b0:	e00a      	b.n	4014c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4014b2:	4b08      	ldr	r3, [pc, #32]	; (4014d4 <osc_get_rate+0x68>)
  4014b4:	e008      	b.n	4014c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4014b6:	4b08      	ldr	r3, [pc, #32]	; (4014d8 <osc_get_rate+0x6c>)
  4014b8:	e006      	b.n	4014c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4014ba:	4b08      	ldr	r3, [pc, #32]	; (4014dc <osc_get_rate+0x70>)
  4014bc:	e004      	b.n	4014c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4014be:	4b07      	ldr	r3, [pc, #28]	; (4014dc <osc_get_rate+0x70>)
  4014c0:	e002      	b.n	4014c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4014c2:	4b06      	ldr	r3, [pc, #24]	; (4014dc <osc_get_rate+0x70>)
  4014c4:	e000      	b.n	4014c8 <osc_get_rate+0x5c>
	}

	return 0;
  4014c6:	2300      	movs	r3, #0
}
  4014c8:	4618      	mov	r0, r3
  4014ca:	370c      	adds	r7, #12
  4014cc:	46bd      	mov	sp, r7
  4014ce:	bc80      	pop	{r7}
  4014d0:	4770      	bx	lr
  4014d2:	bf00      	nop
  4014d4:	003d0900 	.word	0x003d0900
  4014d8:	007a1200 	.word	0x007a1200
  4014dc:	00b71b00 	.word	0x00b71b00

004014e0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4014e0:	b580      	push	{r7, lr}
  4014e2:	b082      	sub	sp, #8
  4014e4:	af00      	add	r7, sp, #0
  4014e6:	4603      	mov	r3, r0
  4014e8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4014ea:	bf00      	nop
  4014ec:	79fb      	ldrb	r3, [r7, #7]
  4014ee:	4618      	mov	r0, r3
  4014f0:	4b05      	ldr	r3, [pc, #20]	; (401508 <osc_wait_ready+0x28>)
  4014f2:	4798      	blx	r3
  4014f4:	4603      	mov	r3, r0
  4014f6:	f083 0301 	eor.w	r3, r3, #1
  4014fa:	b2db      	uxtb	r3, r3
  4014fc:	2b00      	cmp	r3, #0
  4014fe:	d1f5      	bne.n	4014ec <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401500:	bf00      	nop
  401502:	3708      	adds	r7, #8
  401504:	46bd      	mov	sp, r7
  401506:	bd80      	pop	{r7, pc}
  401508:	004013fd 	.word	0x004013fd

0040150c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40150c:	b580      	push	{r7, lr}
  40150e:	b086      	sub	sp, #24
  401510:	af00      	add	r7, sp, #0
  401512:	60f8      	str	r0, [r7, #12]
  401514:	607a      	str	r2, [r7, #4]
  401516:	603b      	str	r3, [r7, #0]
  401518:	460b      	mov	r3, r1
  40151a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40151c:	7afb      	ldrb	r3, [r7, #11]
  40151e:	4618      	mov	r0, r3
  401520:	4b0d      	ldr	r3, [pc, #52]	; (401558 <pll_config_init+0x4c>)
  401522:	4798      	blx	r3
  401524:	4602      	mov	r2, r0
  401526:	687b      	ldr	r3, [r7, #4]
  401528:	fbb2 f3f3 	udiv	r3, r2, r3
  40152c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40152e:	697b      	ldr	r3, [r7, #20]
  401530:	683a      	ldr	r2, [r7, #0]
  401532:	fb02 f303 	mul.w	r3, r2, r3
  401536:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401538:	683b      	ldr	r3, [r7, #0]
  40153a:	3b01      	subs	r3, #1
  40153c:	041a      	lsls	r2, r3, #16
  40153e:	4b07      	ldr	r3, [pc, #28]	; (40155c <pll_config_init+0x50>)
  401540:	4013      	ands	r3, r2
  401542:	687a      	ldr	r2, [r7, #4]
  401544:	b2d2      	uxtb	r2, r2
  401546:	4313      	orrs	r3, r2
  401548:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40154c:	68fb      	ldr	r3, [r7, #12]
  40154e:	601a      	str	r2, [r3, #0]
}
  401550:	bf00      	nop
  401552:	3718      	adds	r7, #24
  401554:	46bd      	mov	sp, r7
  401556:	bd80      	pop	{r7, pc}
  401558:	0040146d 	.word	0x0040146d
  40155c:	07ff0000 	.word	0x07ff0000

00401560 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401560:	b580      	push	{r7, lr}
  401562:	b082      	sub	sp, #8
  401564:	af00      	add	r7, sp, #0
  401566:	6078      	str	r0, [r7, #4]
  401568:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40156a:	683b      	ldr	r3, [r7, #0]
  40156c:	2b00      	cmp	r3, #0
  40156e:	d108      	bne.n	401582 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401570:	4b09      	ldr	r3, [pc, #36]	; (401598 <pll_enable+0x38>)
  401572:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401574:	4a09      	ldr	r2, [pc, #36]	; (40159c <pll_enable+0x3c>)
  401576:	687b      	ldr	r3, [r7, #4]
  401578:	681b      	ldr	r3, [r3, #0]
  40157a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40157e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401580:	e005      	b.n	40158e <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  401582:	4b07      	ldr	r3, [pc, #28]	; (4015a0 <pll_enable+0x40>)
  401584:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  401586:	4a05      	ldr	r2, [pc, #20]	; (40159c <pll_enable+0x3c>)
  401588:	687b      	ldr	r3, [r7, #4]
  40158a:	681b      	ldr	r3, [r3, #0]
  40158c:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  40158e:	bf00      	nop
  401590:	3708      	adds	r7, #8
  401592:	46bd      	mov	sp, r7
  401594:	bd80      	pop	{r7, pc}
  401596:	bf00      	nop
  401598:	0040204d 	.word	0x0040204d
  40159c:	400e0400 	.word	0x400e0400
  4015a0:	0040207d 	.word	0x0040207d

004015a4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4015a4:	b580      	push	{r7, lr}
  4015a6:	b082      	sub	sp, #8
  4015a8:	af00      	add	r7, sp, #0
  4015aa:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4015ac:	687b      	ldr	r3, [r7, #4]
  4015ae:	2b00      	cmp	r3, #0
  4015b0:	d103      	bne.n	4015ba <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4015b2:	4b05      	ldr	r3, [pc, #20]	; (4015c8 <pll_is_locked+0x24>)
  4015b4:	4798      	blx	r3
  4015b6:	4603      	mov	r3, r0
  4015b8:	e002      	b.n	4015c0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4015ba:	4b04      	ldr	r3, [pc, #16]	; (4015cc <pll_is_locked+0x28>)
  4015bc:	4798      	blx	r3
  4015be:	4603      	mov	r3, r0
	}
}
  4015c0:	4618      	mov	r0, r3
  4015c2:	3708      	adds	r7, #8
  4015c4:	46bd      	mov	sp, r7
  4015c6:	bd80      	pop	{r7, pc}
  4015c8:	00402065 	.word	0x00402065
  4015cc:	00402095 	.word	0x00402095

004015d0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4015d0:	b580      	push	{r7, lr}
  4015d2:	b082      	sub	sp, #8
  4015d4:	af00      	add	r7, sp, #0
  4015d6:	4603      	mov	r3, r0
  4015d8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4015da:	79fb      	ldrb	r3, [r7, #7]
  4015dc:	3b03      	subs	r3, #3
  4015de:	2b04      	cmp	r3, #4
  4015e0:	d808      	bhi.n	4015f4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4015e2:	79fb      	ldrb	r3, [r7, #7]
  4015e4:	4618      	mov	r0, r3
  4015e6:	4b06      	ldr	r3, [pc, #24]	; (401600 <pll_enable_source+0x30>)
  4015e8:	4798      	blx	r3
		osc_wait_ready(e_src);
  4015ea:	79fb      	ldrb	r3, [r7, #7]
  4015ec:	4618      	mov	r0, r3
  4015ee:	4b05      	ldr	r3, [pc, #20]	; (401604 <pll_enable_source+0x34>)
  4015f0:	4798      	blx	r3
		break;
  4015f2:	e000      	b.n	4015f6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4015f4:	bf00      	nop
	}
}
  4015f6:	bf00      	nop
  4015f8:	3708      	adds	r7, #8
  4015fa:	46bd      	mov	sp, r7
  4015fc:	bd80      	pop	{r7, pc}
  4015fe:	bf00      	nop
  401600:	00401375 	.word	0x00401375
  401604:	004014e1 	.word	0x004014e1

00401608 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401608:	b580      	push	{r7, lr}
  40160a:	b082      	sub	sp, #8
  40160c:	af00      	add	r7, sp, #0
  40160e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401610:	bf00      	nop
  401612:	6878      	ldr	r0, [r7, #4]
  401614:	4b04      	ldr	r3, [pc, #16]	; (401628 <pll_wait_for_lock+0x20>)
  401616:	4798      	blx	r3
  401618:	4603      	mov	r3, r0
  40161a:	2b00      	cmp	r3, #0
  40161c:	d0f9      	beq.n	401612 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40161e:	2300      	movs	r3, #0
}
  401620:	4618      	mov	r0, r3
  401622:	3708      	adds	r7, #8
  401624:	46bd      	mov	sp, r7
  401626:	bd80      	pop	{r7, pc}
  401628:	004015a5 	.word	0x004015a5

0040162c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40162c:	b580      	push	{r7, lr}
  40162e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401630:	2006      	movs	r0, #6
  401632:	4b04      	ldr	r3, [pc, #16]	; (401644 <sysclk_get_main_hz+0x18>)
  401634:	4798      	blx	r3
  401636:	4602      	mov	r2, r0
  401638:	4613      	mov	r3, r2
  40163a:	009b      	lsls	r3, r3, #2
  40163c:	4413      	add	r3, r2
  40163e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401640:	4618      	mov	r0, r3
  401642:	bd80      	pop	{r7, pc}
  401644:	0040146d 	.word	0x0040146d

00401648 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401648:	b580      	push	{r7, lr}
  40164a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40164c:	4b02      	ldr	r3, [pc, #8]	; (401658 <sysclk_get_cpu_hz+0x10>)
  40164e:	4798      	blx	r3
  401650:	4603      	mov	r3, r0
  401652:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401654:	4618      	mov	r0, r3
  401656:	bd80      	pop	{r7, pc}
  401658:	0040162d 	.word	0x0040162d

0040165c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40165c:	b590      	push	{r4, r7, lr}
  40165e:	b083      	sub	sp, #12
  401660:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401662:	4811      	ldr	r0, [pc, #68]	; (4016a8 <sysclk_init+0x4c>)
  401664:	4b11      	ldr	r3, [pc, #68]	; (4016ac <sysclk_init+0x50>)
  401666:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401668:	2006      	movs	r0, #6
  40166a:	4b11      	ldr	r3, [pc, #68]	; (4016b0 <sysclk_init+0x54>)
  40166c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40166e:	1d38      	adds	r0, r7, #4
  401670:	2314      	movs	r3, #20
  401672:	2201      	movs	r2, #1
  401674:	2106      	movs	r1, #6
  401676:	4c0f      	ldr	r4, [pc, #60]	; (4016b4 <sysclk_init+0x58>)
  401678:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40167a:	1d3b      	adds	r3, r7, #4
  40167c:	2100      	movs	r1, #0
  40167e:	4618      	mov	r0, r3
  401680:	4b0d      	ldr	r3, [pc, #52]	; (4016b8 <sysclk_init+0x5c>)
  401682:	4798      	blx	r3
		pll_wait_for_lock(0);
  401684:	2000      	movs	r0, #0
  401686:	4b0d      	ldr	r3, [pc, #52]	; (4016bc <sysclk_init+0x60>)
  401688:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40168a:	2010      	movs	r0, #16
  40168c:	4b0c      	ldr	r3, [pc, #48]	; (4016c0 <sysclk_init+0x64>)
  40168e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401690:	4b0c      	ldr	r3, [pc, #48]	; (4016c4 <sysclk_init+0x68>)
  401692:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401694:	4b0c      	ldr	r3, [pc, #48]	; (4016c8 <sysclk_init+0x6c>)
  401696:	4798      	blx	r3
  401698:	4603      	mov	r3, r0
  40169a:	4618      	mov	r0, r3
  40169c:	4b03      	ldr	r3, [pc, #12]	; (4016ac <sysclk_init+0x50>)
  40169e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4016a0:	bf00      	nop
  4016a2:	370c      	adds	r7, #12
  4016a4:	46bd      	mov	sp, r7
  4016a6:	bd90      	pop	{r4, r7, pc}
  4016a8:	07270e00 	.word	0x07270e00
  4016ac:	00402535 	.word	0x00402535
  4016b0:	004015d1 	.word	0x004015d1
  4016b4:	0040150d 	.word	0x0040150d
  4016b8:	00401561 	.word	0x00401561
  4016bc:	00401609 	.word	0x00401609
  4016c0:	00401e61 	.word	0x00401e61
  4016c4:	00402399 	.word	0x00402399
  4016c8:	00401649 	.word	0x00401649

004016cc <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4016cc:	b480      	push	{r7}
  4016ce:	b085      	sub	sp, #20
  4016d0:	af00      	add	r7, sp, #0
  4016d2:	60f8      	str	r0, [r7, #12]
  4016d4:	60b9      	str	r1, [r7, #8]
  4016d6:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4016d8:	68bb      	ldr	r3, [r7, #8]
  4016da:	2b00      	cmp	r3, #0
  4016dc:	d007      	beq.n	4016ee <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4016de:	68bb      	ldr	r3, [r7, #8]
  4016e0:	681a      	ldr	r2, [r3, #0]
  4016e2:	68fb      	ldr	r3, [r7, #12]
  4016e4:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4016e6:	68bb      	ldr	r3, [r7, #8]
  4016e8:	685a      	ldr	r2, [r3, #4]
  4016ea:	68fb      	ldr	r3, [r7, #12]
  4016ec:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  4016ee:	687b      	ldr	r3, [r7, #4]
  4016f0:	2b00      	cmp	r3, #0
  4016f2:	d007      	beq.n	401704 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4016f4:	687b      	ldr	r3, [r7, #4]
  4016f6:	681a      	ldr	r2, [r3, #0]
  4016f8:	68fb      	ldr	r3, [r7, #12]
  4016fa:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4016fc:	687b      	ldr	r3, [r7, #4]
  4016fe:	685a      	ldr	r2, [r3, #4]
  401700:	68fb      	ldr	r3, [r7, #12]
  401702:	61da      	str	r2, [r3, #28]
	}
}
  401704:	bf00      	nop
  401706:	3714      	adds	r7, #20
  401708:	46bd      	mov	sp, r7
  40170a:	bc80      	pop	{r7}
  40170c:	4770      	bx	lr
  40170e:	bf00      	nop

00401710 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  401710:	b480      	push	{r7}
  401712:	b085      	sub	sp, #20
  401714:	af00      	add	r7, sp, #0
  401716:	60f8      	str	r0, [r7, #12]
  401718:	60b9      	str	r1, [r7, #8]
  40171a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  40171c:	68bb      	ldr	r3, [r7, #8]
  40171e:	2b00      	cmp	r3, #0
  401720:	d007      	beq.n	401732 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  401722:	68bb      	ldr	r3, [r7, #8]
  401724:	681a      	ldr	r2, [r3, #0]
  401726:	68fb      	ldr	r3, [r7, #12]
  401728:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40172a:	68bb      	ldr	r3, [r7, #8]
  40172c:	685a      	ldr	r2, [r3, #4]
  40172e:	68fb      	ldr	r3, [r7, #12]
  401730:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  401732:	687b      	ldr	r3, [r7, #4]
  401734:	2b00      	cmp	r3, #0
  401736:	d007      	beq.n	401748 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  401738:	687b      	ldr	r3, [r7, #4]
  40173a:	681a      	ldr	r2, [r3, #0]
  40173c:	68fb      	ldr	r3, [r7, #12]
  40173e:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  401740:	687b      	ldr	r3, [r7, #4]
  401742:	685a      	ldr	r2, [r3, #4]
  401744:	68fb      	ldr	r3, [r7, #12]
  401746:	615a      	str	r2, [r3, #20]
	}
}
  401748:	bf00      	nop
  40174a:	3714      	adds	r7, #20
  40174c:	46bd      	mov	sp, r7
  40174e:	bc80      	pop	{r7}
  401750:	4770      	bx	lr
  401752:	bf00      	nop

00401754 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  401754:	b480      	push	{r7}
  401756:	b083      	sub	sp, #12
  401758:	af00      	add	r7, sp, #0
  40175a:	6078      	str	r0, [r7, #4]
  40175c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40175e:	683a      	ldr	r2, [r7, #0]
  401760:	f240 1301 	movw	r3, #257	; 0x101
  401764:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  401766:	687a      	ldr	r2, [r7, #4]
  401768:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  40176a:	bf00      	nop
  40176c:	370c      	adds	r7, #12
  40176e:	46bd      	mov	sp, r7
  401770:	bc80      	pop	{r7}
  401772:	4770      	bx	lr

00401774 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  401774:	b480      	push	{r7}
  401776:	b083      	sub	sp, #12
  401778:	af00      	add	r7, sp, #0
  40177a:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  40177c:	687b      	ldr	r3, [r7, #4]
  40177e:	685b      	ldr	r3, [r3, #4]
}
  401780:	4618      	mov	r0, r3
  401782:	370c      	adds	r7, #12
  401784:	46bd      	mov	sp, r7
  401786:	bc80      	pop	{r7}
  401788:	4770      	bx	lr
  40178a:	bf00      	nop

0040178c <pdc_read_rx_next_counter>:
 *
 * \return Receive Next Counter Register value.
 */
uint32_t pdc_read_rx_next_counter(
		Pdc *p_pdc)
{
  40178c:	b480      	push	{r7}
  40178e:	b083      	sub	sp, #12
  401790:	af00      	add	r7, sp, #0
  401792:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RNCR;
  401794:	687b      	ldr	r3, [r7, #4]
  401796:	695b      	ldr	r3, [r3, #20]
}
  401798:	4618      	mov	r0, r3
  40179a:	370c      	adds	r7, #12
  40179c:	46bd      	mov	sp, r7
  40179e:	bc80      	pop	{r7}
  4017a0:	4770      	bx	lr
  4017a2:	bf00      	nop

004017a4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4017a4:	b480      	push	{r7}
  4017a6:	b085      	sub	sp, #20
  4017a8:	af00      	add	r7, sp, #0
  4017aa:	60f8      	str	r0, [r7, #12]
  4017ac:	60b9      	str	r1, [r7, #8]
  4017ae:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4017b0:	687b      	ldr	r3, [r7, #4]
  4017b2:	2b00      	cmp	r3, #0
  4017b4:	d003      	beq.n	4017be <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4017b6:	68fb      	ldr	r3, [r7, #12]
  4017b8:	68ba      	ldr	r2, [r7, #8]
  4017ba:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4017bc:	e002      	b.n	4017c4 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4017be:	68fb      	ldr	r3, [r7, #12]
  4017c0:	68ba      	ldr	r2, [r7, #8]
  4017c2:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  4017c4:	bf00      	nop
  4017c6:	3714      	adds	r7, #20
  4017c8:	46bd      	mov	sp, r7
  4017ca:	bc80      	pop	{r7}
  4017cc:	4770      	bx	lr
  4017ce:	bf00      	nop

004017d0 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  4017d0:	b480      	push	{r7}
  4017d2:	b085      	sub	sp, #20
  4017d4:	af00      	add	r7, sp, #0
  4017d6:	60f8      	str	r0, [r7, #12]
  4017d8:	60b9      	str	r1, [r7, #8]
  4017da:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4017dc:	68fb      	ldr	r3, [r7, #12]
  4017de:	68ba      	ldr	r2, [r7, #8]
  4017e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4017e4:	687b      	ldr	r3, [r7, #4]
  4017e6:	005b      	lsls	r3, r3, #1
  4017e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4017ec:	fbb2 f3f3 	udiv	r3, r2, r3
  4017f0:	3b01      	subs	r3, #1
  4017f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4017f6:	68fb      	ldr	r3, [r7, #12]
  4017f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  4017fc:	bf00      	nop
  4017fe:	3714      	adds	r7, #20
  401800:	46bd      	mov	sp, r7
  401802:	bc80      	pop	{r7}
  401804:	4770      	bx	lr
  401806:	bf00      	nop

00401808 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401808:	b480      	push	{r7}
  40180a:	b087      	sub	sp, #28
  40180c:	af00      	add	r7, sp, #0
  40180e:	60f8      	str	r0, [r7, #12]
  401810:	60b9      	str	r1, [r7, #8]
  401812:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401814:	68fb      	ldr	r3, [r7, #12]
  401816:	687a      	ldr	r2, [r7, #4]
  401818:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40181a:	68bb      	ldr	r3, [r7, #8]
  40181c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401820:	d04a      	beq.n	4018b8 <pio_set_peripheral+0xb0>
  401822:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401826:	d808      	bhi.n	40183a <pio_set_peripheral+0x32>
  401828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40182c:	d016      	beq.n	40185c <pio_set_peripheral+0x54>
  40182e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401832:	d02c      	beq.n	40188e <pio_set_peripheral+0x86>
  401834:	2b00      	cmp	r3, #0
  401836:	d069      	beq.n	40190c <pio_set_peripheral+0x104>
  401838:	e064      	b.n	401904 <pio_set_peripheral+0xfc>
  40183a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40183e:	d065      	beq.n	40190c <pio_set_peripheral+0x104>
  401840:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401844:	d803      	bhi.n	40184e <pio_set_peripheral+0x46>
  401846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40184a:	d04a      	beq.n	4018e2 <pio_set_peripheral+0xda>
  40184c:	e05a      	b.n	401904 <pio_set_peripheral+0xfc>
  40184e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401852:	d05b      	beq.n	40190c <pio_set_peripheral+0x104>
  401854:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401858:	d058      	beq.n	40190c <pio_set_peripheral+0x104>
  40185a:	e053      	b.n	401904 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40185c:	68fb      	ldr	r3, [r7, #12]
  40185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401860:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401862:	68fb      	ldr	r3, [r7, #12]
  401864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401866:	687b      	ldr	r3, [r7, #4]
  401868:	43d9      	mvns	r1, r3
  40186a:	697b      	ldr	r3, [r7, #20]
  40186c:	400b      	ands	r3, r1
  40186e:	401a      	ands	r2, r3
  401870:	68fb      	ldr	r3, [r7, #12]
  401872:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401874:	68fb      	ldr	r3, [r7, #12]
  401876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401878:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40187a:	68fb      	ldr	r3, [r7, #12]
  40187c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40187e:	687b      	ldr	r3, [r7, #4]
  401880:	43d9      	mvns	r1, r3
  401882:	697b      	ldr	r3, [r7, #20]
  401884:	400b      	ands	r3, r1
  401886:	401a      	ands	r2, r3
  401888:	68fb      	ldr	r3, [r7, #12]
  40188a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40188c:	e03a      	b.n	401904 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40188e:	68fb      	ldr	r3, [r7, #12]
  401890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401892:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401894:	687a      	ldr	r2, [r7, #4]
  401896:	697b      	ldr	r3, [r7, #20]
  401898:	431a      	orrs	r2, r3
  40189a:	68fb      	ldr	r3, [r7, #12]
  40189c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40189e:	68fb      	ldr	r3, [r7, #12]
  4018a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4018a2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4018a4:	68fb      	ldr	r3, [r7, #12]
  4018a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4018a8:	687b      	ldr	r3, [r7, #4]
  4018aa:	43d9      	mvns	r1, r3
  4018ac:	697b      	ldr	r3, [r7, #20]
  4018ae:	400b      	ands	r3, r1
  4018b0:	401a      	ands	r2, r3
  4018b2:	68fb      	ldr	r3, [r7, #12]
  4018b4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4018b6:	e025      	b.n	401904 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4018b8:	68fb      	ldr	r3, [r7, #12]
  4018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4018bc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4018be:	68fb      	ldr	r3, [r7, #12]
  4018c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4018c2:	687b      	ldr	r3, [r7, #4]
  4018c4:	43d9      	mvns	r1, r3
  4018c6:	697b      	ldr	r3, [r7, #20]
  4018c8:	400b      	ands	r3, r1
  4018ca:	401a      	ands	r2, r3
  4018cc:	68fb      	ldr	r3, [r7, #12]
  4018ce:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4018d0:	68fb      	ldr	r3, [r7, #12]
  4018d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4018d4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4018d6:	687a      	ldr	r2, [r7, #4]
  4018d8:	697b      	ldr	r3, [r7, #20]
  4018da:	431a      	orrs	r2, r3
  4018dc:	68fb      	ldr	r3, [r7, #12]
  4018de:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4018e0:	e010      	b.n	401904 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4018e2:	68fb      	ldr	r3, [r7, #12]
  4018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4018e6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4018e8:	687a      	ldr	r2, [r7, #4]
  4018ea:	697b      	ldr	r3, [r7, #20]
  4018ec:	431a      	orrs	r2, r3
  4018ee:	68fb      	ldr	r3, [r7, #12]
  4018f0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4018f2:	68fb      	ldr	r3, [r7, #12]
  4018f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4018f6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4018f8:	687a      	ldr	r2, [r7, #4]
  4018fa:	697b      	ldr	r3, [r7, #20]
  4018fc:	431a      	orrs	r2, r3
  4018fe:	68fb      	ldr	r3, [r7, #12]
  401900:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401902:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401904:	68fb      	ldr	r3, [r7, #12]
  401906:	687a      	ldr	r2, [r7, #4]
  401908:	605a      	str	r2, [r3, #4]
  40190a:	e000      	b.n	40190e <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  40190c:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40190e:	371c      	adds	r7, #28
  401910:	46bd      	mov	sp, r7
  401912:	bc80      	pop	{r7}
  401914:	4770      	bx	lr
  401916:	bf00      	nop

00401918 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401918:	b580      	push	{r7, lr}
  40191a:	b084      	sub	sp, #16
  40191c:	af00      	add	r7, sp, #0
  40191e:	60f8      	str	r0, [r7, #12]
  401920:	60b9      	str	r1, [r7, #8]
  401922:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401924:	68b9      	ldr	r1, [r7, #8]
  401926:	68f8      	ldr	r0, [r7, #12]
  401928:	4b19      	ldr	r3, [pc, #100]	; (401990 <pio_set_input+0x78>)
  40192a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40192c:	687b      	ldr	r3, [r7, #4]
  40192e:	f003 0301 	and.w	r3, r3, #1
  401932:	461a      	mov	r2, r3
  401934:	68b9      	ldr	r1, [r7, #8]
  401936:	68f8      	ldr	r0, [r7, #12]
  401938:	4b16      	ldr	r3, [pc, #88]	; (401994 <pio_set_input+0x7c>)
  40193a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40193c:	687b      	ldr	r3, [r7, #4]
  40193e:	f003 030a 	and.w	r3, r3, #10
  401942:	2b00      	cmp	r3, #0
  401944:	d003      	beq.n	40194e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401946:	68fb      	ldr	r3, [r7, #12]
  401948:	68ba      	ldr	r2, [r7, #8]
  40194a:	621a      	str	r2, [r3, #32]
  40194c:	e002      	b.n	401954 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40194e:	68fb      	ldr	r3, [r7, #12]
  401950:	68ba      	ldr	r2, [r7, #8]
  401952:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401954:	687b      	ldr	r3, [r7, #4]
  401956:	f003 0302 	and.w	r3, r3, #2
  40195a:	2b00      	cmp	r3, #0
  40195c:	d004      	beq.n	401968 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40195e:	68fb      	ldr	r3, [r7, #12]
  401960:	68ba      	ldr	r2, [r7, #8]
  401962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401966:	e008      	b.n	40197a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401968:	687b      	ldr	r3, [r7, #4]
  40196a:	f003 0308 	and.w	r3, r3, #8
  40196e:	2b00      	cmp	r3, #0
  401970:	d003      	beq.n	40197a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401972:	68fb      	ldr	r3, [r7, #12]
  401974:	68ba      	ldr	r2, [r7, #8]
  401976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40197a:	68fb      	ldr	r3, [r7, #12]
  40197c:	68ba      	ldr	r2, [r7, #8]
  40197e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401980:	68fb      	ldr	r3, [r7, #12]
  401982:	68ba      	ldr	r2, [r7, #8]
  401984:	601a      	str	r2, [r3, #0]
}
  401986:	bf00      	nop
  401988:	3710      	adds	r7, #16
  40198a:	46bd      	mov	sp, r7
  40198c:	bd80      	pop	{r7, pc}
  40198e:	bf00      	nop
  401990:	00401a85 	.word	0x00401a85
  401994:	004017a5 	.word	0x004017a5

00401998 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401998:	b580      	push	{r7, lr}
  40199a:	b084      	sub	sp, #16
  40199c:	af00      	add	r7, sp, #0
  40199e:	60f8      	str	r0, [r7, #12]
  4019a0:	60b9      	str	r1, [r7, #8]
  4019a2:	607a      	str	r2, [r7, #4]
  4019a4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4019a6:	68b9      	ldr	r1, [r7, #8]
  4019a8:	68f8      	ldr	r0, [r7, #12]
  4019aa:	4b12      	ldr	r3, [pc, #72]	; (4019f4 <pio_set_output+0x5c>)
  4019ac:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4019ae:	69ba      	ldr	r2, [r7, #24]
  4019b0:	68b9      	ldr	r1, [r7, #8]
  4019b2:	68f8      	ldr	r0, [r7, #12]
  4019b4:	4b10      	ldr	r3, [pc, #64]	; (4019f8 <pio_set_output+0x60>)
  4019b6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4019b8:	683b      	ldr	r3, [r7, #0]
  4019ba:	2b00      	cmp	r3, #0
  4019bc:	d003      	beq.n	4019c6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4019be:	68fb      	ldr	r3, [r7, #12]
  4019c0:	68ba      	ldr	r2, [r7, #8]
  4019c2:	651a      	str	r2, [r3, #80]	; 0x50
  4019c4:	e002      	b.n	4019cc <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4019c6:	68fb      	ldr	r3, [r7, #12]
  4019c8:	68ba      	ldr	r2, [r7, #8]
  4019ca:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4019cc:	687b      	ldr	r3, [r7, #4]
  4019ce:	2b00      	cmp	r3, #0
  4019d0:	d003      	beq.n	4019da <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4019d2:	68fb      	ldr	r3, [r7, #12]
  4019d4:	68ba      	ldr	r2, [r7, #8]
  4019d6:	631a      	str	r2, [r3, #48]	; 0x30
  4019d8:	e002      	b.n	4019e0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4019da:	68fb      	ldr	r3, [r7, #12]
  4019dc:	68ba      	ldr	r2, [r7, #8]
  4019de:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4019e0:	68fb      	ldr	r3, [r7, #12]
  4019e2:	68ba      	ldr	r2, [r7, #8]
  4019e4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4019e6:	68fb      	ldr	r3, [r7, #12]
  4019e8:	68ba      	ldr	r2, [r7, #8]
  4019ea:	601a      	str	r2, [r3, #0]
}
  4019ec:	bf00      	nop
  4019ee:	3710      	adds	r7, #16
  4019f0:	46bd      	mov	sp, r7
  4019f2:	bd80      	pop	{r7, pc}
  4019f4:	00401a85 	.word	0x00401a85
  4019f8:	004017a5 	.word	0x004017a5

004019fc <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  4019fc:	b480      	push	{r7}
  4019fe:	b085      	sub	sp, #20
  401a00:	af00      	add	r7, sp, #0
  401a02:	60f8      	str	r0, [r7, #12]
  401a04:	60b9      	str	r1, [r7, #8]
  401a06:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401a08:	687b      	ldr	r3, [r7, #4]
  401a0a:	f003 0310 	and.w	r3, r3, #16
  401a0e:	2b00      	cmp	r3, #0
  401a10:	d020      	beq.n	401a54 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	68ba      	ldr	r2, [r7, #8]
  401a16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401a1a:	687b      	ldr	r3, [r7, #4]
  401a1c:	f003 0320 	and.w	r3, r3, #32
  401a20:	2b00      	cmp	r3, #0
  401a22:	d004      	beq.n	401a2e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401a24:	68fb      	ldr	r3, [r7, #12]
  401a26:	68ba      	ldr	r2, [r7, #8]
  401a28:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401a2c:	e003      	b.n	401a36 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401a2e:	68fb      	ldr	r3, [r7, #12]
  401a30:	68ba      	ldr	r2, [r7, #8]
  401a32:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401a36:	687b      	ldr	r3, [r7, #4]
  401a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401a3c:	2b00      	cmp	r3, #0
  401a3e:	d004      	beq.n	401a4a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401a40:	68fb      	ldr	r3, [r7, #12]
  401a42:	68ba      	ldr	r2, [r7, #8]
  401a44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401a48:	e008      	b.n	401a5c <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  401a4a:	68fb      	ldr	r3, [r7, #12]
  401a4c:	68ba      	ldr	r2, [r7, #8]
  401a4e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401a52:	e003      	b.n	401a5c <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  401a54:	68fb      	ldr	r3, [r7, #12]
  401a56:	68ba      	ldr	r2, [r7, #8]
  401a58:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  401a5c:	bf00      	nop
  401a5e:	3714      	adds	r7, #20
  401a60:	46bd      	mov	sp, r7
  401a62:	bc80      	pop	{r7}
  401a64:	4770      	bx	lr
  401a66:	bf00      	nop

00401a68 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401a68:	b480      	push	{r7}
  401a6a:	b083      	sub	sp, #12
  401a6c:	af00      	add	r7, sp, #0
  401a6e:	6078      	str	r0, [r7, #4]
  401a70:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401a72:	687b      	ldr	r3, [r7, #4]
  401a74:	683a      	ldr	r2, [r7, #0]
  401a76:	641a      	str	r2, [r3, #64]	; 0x40
}
  401a78:	bf00      	nop
  401a7a:	370c      	adds	r7, #12
  401a7c:	46bd      	mov	sp, r7
  401a7e:	bc80      	pop	{r7}
  401a80:	4770      	bx	lr
  401a82:	bf00      	nop

00401a84 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401a84:	b480      	push	{r7}
  401a86:	b083      	sub	sp, #12
  401a88:	af00      	add	r7, sp, #0
  401a8a:	6078      	str	r0, [r7, #4]
  401a8c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401a8e:	687b      	ldr	r3, [r7, #4]
  401a90:	683a      	ldr	r2, [r7, #0]
  401a92:	645a      	str	r2, [r3, #68]	; 0x44
}
  401a94:	bf00      	nop
  401a96:	370c      	adds	r7, #12
  401a98:	46bd      	mov	sp, r7
  401a9a:	bc80      	pop	{r7}
  401a9c:	4770      	bx	lr
  401a9e:	bf00      	nop

00401aa0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401aa0:	b480      	push	{r7}
  401aa2:	b083      	sub	sp, #12
  401aa4:	af00      	add	r7, sp, #0
  401aa6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401aa8:	687b      	ldr	r3, [r7, #4]
  401aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401aac:	4618      	mov	r0, r3
  401aae:	370c      	adds	r7, #12
  401ab0:	46bd      	mov	sp, r7
  401ab2:	bc80      	pop	{r7}
  401ab4:	4770      	bx	lr
  401ab6:	bf00      	nop

00401ab8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401ab8:	b480      	push	{r7}
  401aba:	b083      	sub	sp, #12
  401abc:	af00      	add	r7, sp, #0
  401abe:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401ac0:	687b      	ldr	r3, [r7, #4]
  401ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401ac4:	4618      	mov	r0, r3
  401ac6:	370c      	adds	r7, #12
  401ac8:	46bd      	mov	sp, r7
  401aca:	bc80      	pop	{r7}
  401acc:	4770      	bx	lr
  401ace:	bf00      	nop

00401ad0 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
  401ad0:	b580      	push	{r7, lr}
  401ad2:	b084      	sub	sp, #16
  401ad4:	af00      	add	r7, sp, #0
  401ad6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401ad8:	6878      	ldr	r0, [r7, #4]
  401ada:	4b08      	ldr	r3, [pc, #32]	; (401afc <pio_get_pin_value+0x2c>)
  401adc:	4798      	blx	r3
  401ade:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  401ae0:	68fb      	ldr	r3, [r7, #12]
  401ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401ae4:	687b      	ldr	r3, [r7, #4]
  401ae6:	f003 031f 	and.w	r3, r3, #31
  401aea:	fa22 f303 	lsr.w	r3, r2, r3
  401aee:	f003 0301 	and.w	r3, r3, #1
}
  401af2:	4618      	mov	r0, r3
  401af4:	3710      	adds	r7, #16
  401af6:	46bd      	mov	sp, r7
  401af8:	bd80      	pop	{r7, pc}
  401afa:	bf00      	nop
  401afc:	00401e3d 	.word	0x00401e3d

00401b00 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  401b00:	b580      	push	{r7, lr}
  401b02:	b084      	sub	sp, #16
  401b04:	af00      	add	r7, sp, #0
  401b06:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401b08:	6878      	ldr	r0, [r7, #4]
  401b0a:	4b08      	ldr	r3, [pc, #32]	; (401b2c <pio_set_pin_high+0x2c>)
  401b0c:	4798      	blx	r3
  401b0e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  401b10:	687b      	ldr	r3, [r7, #4]
  401b12:	f003 031f 	and.w	r3, r3, #31
  401b16:	2201      	movs	r2, #1
  401b18:	fa02 f303 	lsl.w	r3, r2, r3
  401b1c:	461a      	mov	r2, r3
  401b1e:	68fb      	ldr	r3, [r7, #12]
  401b20:	631a      	str	r2, [r3, #48]	; 0x30
}
  401b22:	bf00      	nop
  401b24:	3710      	adds	r7, #16
  401b26:	46bd      	mov	sp, r7
  401b28:	bd80      	pop	{r7, pc}
  401b2a:	bf00      	nop
  401b2c:	00401e3d 	.word	0x00401e3d

00401b30 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  401b30:	b580      	push	{r7, lr}
  401b32:	b084      	sub	sp, #16
  401b34:	af00      	add	r7, sp, #0
  401b36:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401b38:	6878      	ldr	r0, [r7, #4]
  401b3a:	4b08      	ldr	r3, [pc, #32]	; (401b5c <pio_set_pin_low+0x2c>)
  401b3c:	4798      	blx	r3
  401b3e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401b40:	687b      	ldr	r3, [r7, #4]
  401b42:	f003 031f 	and.w	r3, r3, #31
  401b46:	2201      	movs	r2, #1
  401b48:	fa02 f303 	lsl.w	r3, r2, r3
  401b4c:	461a      	mov	r2, r3
  401b4e:	68fb      	ldr	r3, [r7, #12]
  401b50:	635a      	str	r2, [r3, #52]	; 0x34
}
  401b52:	bf00      	nop
  401b54:	3710      	adds	r7, #16
  401b56:	46bd      	mov	sp, r7
  401b58:	bd80      	pop	{r7, pc}
  401b5a:	bf00      	nop
  401b5c:	00401e3d 	.word	0x00401e3d

00401b60 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401b60:	b590      	push	{r4, r7, lr}
  401b62:	b087      	sub	sp, #28
  401b64:	af02      	add	r7, sp, #8
  401b66:	6078      	str	r0, [r7, #4]
  401b68:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401b6a:	6878      	ldr	r0, [r7, #4]
  401b6c:	4b63      	ldr	r3, [pc, #396]	; (401cfc <pio_configure_pin+0x19c>)
  401b6e:	4798      	blx	r3
  401b70:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401b72:	683b      	ldr	r3, [r7, #0]
  401b74:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401b7c:	d067      	beq.n	401c4e <pio_configure_pin+0xee>
  401b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401b82:	d809      	bhi.n	401b98 <pio_configure_pin+0x38>
  401b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401b88:	d02b      	beq.n	401be2 <pio_configure_pin+0x82>
  401b8a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401b8e:	d043      	beq.n	401c18 <pio_configure_pin+0xb8>
  401b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401b94:	d00a      	beq.n	401bac <pio_configure_pin+0x4c>
  401b96:	e0a9      	b.n	401cec <pio_configure_pin+0x18c>
  401b98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401b9c:	d07e      	beq.n	401c9c <pio_configure_pin+0x13c>
  401b9e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401ba2:	d07b      	beq.n	401c9c <pio_configure_pin+0x13c>
  401ba4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401ba8:	d06c      	beq.n	401c84 <pio_configure_pin+0x124>
  401baa:	e09f      	b.n	401cec <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401bac:	687b      	ldr	r3, [r7, #4]
  401bae:	f003 031f 	and.w	r3, r3, #31
  401bb2:	2201      	movs	r2, #1
  401bb4:	fa02 f303 	lsl.w	r3, r2, r3
  401bb8:	461a      	mov	r2, r3
  401bba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401bbe:	68f8      	ldr	r0, [r7, #12]
  401bc0:	4b4f      	ldr	r3, [pc, #316]	; (401d00 <pio_configure_pin+0x1a0>)
  401bc2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401bc4:	687b      	ldr	r3, [r7, #4]
  401bc6:	f003 031f 	and.w	r3, r3, #31
  401bca:	2201      	movs	r2, #1
  401bcc:	fa02 f303 	lsl.w	r3, r2, r3
  401bd0:	4619      	mov	r1, r3
  401bd2:	683b      	ldr	r3, [r7, #0]
  401bd4:	f003 0301 	and.w	r3, r3, #1
  401bd8:	461a      	mov	r2, r3
  401bda:	68f8      	ldr	r0, [r7, #12]
  401bdc:	4b49      	ldr	r3, [pc, #292]	; (401d04 <pio_configure_pin+0x1a4>)
  401bde:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401be0:	e086      	b.n	401cf0 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401be2:	687b      	ldr	r3, [r7, #4]
  401be4:	f003 031f 	and.w	r3, r3, #31
  401be8:	2201      	movs	r2, #1
  401bea:	fa02 f303 	lsl.w	r3, r2, r3
  401bee:	461a      	mov	r2, r3
  401bf0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401bf4:	68f8      	ldr	r0, [r7, #12]
  401bf6:	4b42      	ldr	r3, [pc, #264]	; (401d00 <pio_configure_pin+0x1a0>)
  401bf8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401bfa:	687b      	ldr	r3, [r7, #4]
  401bfc:	f003 031f 	and.w	r3, r3, #31
  401c00:	2201      	movs	r2, #1
  401c02:	fa02 f303 	lsl.w	r3, r2, r3
  401c06:	4619      	mov	r1, r3
  401c08:	683b      	ldr	r3, [r7, #0]
  401c0a:	f003 0301 	and.w	r3, r3, #1
  401c0e:	461a      	mov	r2, r3
  401c10:	68f8      	ldr	r0, [r7, #12]
  401c12:	4b3c      	ldr	r3, [pc, #240]	; (401d04 <pio_configure_pin+0x1a4>)
  401c14:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401c16:	e06b      	b.n	401cf0 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401c18:	687b      	ldr	r3, [r7, #4]
  401c1a:	f003 031f 	and.w	r3, r3, #31
  401c1e:	2201      	movs	r2, #1
  401c20:	fa02 f303 	lsl.w	r3, r2, r3
  401c24:	461a      	mov	r2, r3
  401c26:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401c2a:	68f8      	ldr	r0, [r7, #12]
  401c2c:	4b34      	ldr	r3, [pc, #208]	; (401d00 <pio_configure_pin+0x1a0>)
  401c2e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401c30:	687b      	ldr	r3, [r7, #4]
  401c32:	f003 031f 	and.w	r3, r3, #31
  401c36:	2201      	movs	r2, #1
  401c38:	fa02 f303 	lsl.w	r3, r2, r3
  401c3c:	4619      	mov	r1, r3
  401c3e:	683b      	ldr	r3, [r7, #0]
  401c40:	f003 0301 	and.w	r3, r3, #1
  401c44:	461a      	mov	r2, r3
  401c46:	68f8      	ldr	r0, [r7, #12]
  401c48:	4b2e      	ldr	r3, [pc, #184]	; (401d04 <pio_configure_pin+0x1a4>)
  401c4a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401c4c:	e050      	b.n	401cf0 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401c4e:	687b      	ldr	r3, [r7, #4]
  401c50:	f003 031f 	and.w	r3, r3, #31
  401c54:	2201      	movs	r2, #1
  401c56:	fa02 f303 	lsl.w	r3, r2, r3
  401c5a:	461a      	mov	r2, r3
  401c5c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401c60:	68f8      	ldr	r0, [r7, #12]
  401c62:	4b27      	ldr	r3, [pc, #156]	; (401d00 <pio_configure_pin+0x1a0>)
  401c64:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401c66:	687b      	ldr	r3, [r7, #4]
  401c68:	f003 031f 	and.w	r3, r3, #31
  401c6c:	2201      	movs	r2, #1
  401c6e:	fa02 f303 	lsl.w	r3, r2, r3
  401c72:	4619      	mov	r1, r3
  401c74:	683b      	ldr	r3, [r7, #0]
  401c76:	f003 0301 	and.w	r3, r3, #1
  401c7a:	461a      	mov	r2, r3
  401c7c:	68f8      	ldr	r0, [r7, #12]
  401c7e:	4b21      	ldr	r3, [pc, #132]	; (401d04 <pio_configure_pin+0x1a4>)
  401c80:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401c82:	e035      	b.n	401cf0 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401c84:	687b      	ldr	r3, [r7, #4]
  401c86:	f003 031f 	and.w	r3, r3, #31
  401c8a:	2201      	movs	r2, #1
  401c8c:	fa02 f303 	lsl.w	r3, r2, r3
  401c90:	683a      	ldr	r2, [r7, #0]
  401c92:	4619      	mov	r1, r3
  401c94:	68f8      	ldr	r0, [r7, #12]
  401c96:	4b1c      	ldr	r3, [pc, #112]	; (401d08 <pio_configure_pin+0x1a8>)
  401c98:	4798      	blx	r3
		break;
  401c9a:	e029      	b.n	401cf0 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401c9c:	687b      	ldr	r3, [r7, #4]
  401c9e:	f003 031f 	and.w	r3, r3, #31
  401ca2:	2201      	movs	r2, #1
  401ca4:	fa02 f303 	lsl.w	r3, r2, r3
  401ca8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401caa:	683b      	ldr	r3, [r7, #0]
  401cac:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401cb0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401cb4:	bf0c      	ite	eq
  401cb6:	2301      	moveq	r3, #1
  401cb8:	2300      	movne	r3, #0
  401cba:	b2db      	uxtb	r3, r3
  401cbc:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401cbe:	683b      	ldr	r3, [r7, #0]
  401cc0:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401cc4:	2b00      	cmp	r3, #0
  401cc6:	bf14      	ite	ne
  401cc8:	2301      	movne	r3, #1
  401cca:	2300      	moveq	r3, #0
  401ccc:	b2db      	uxtb	r3, r3
  401cce:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401cd0:	683b      	ldr	r3, [r7, #0]
  401cd2:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401cd6:	2b00      	cmp	r3, #0
  401cd8:	bf14      	ite	ne
  401cda:	2301      	movne	r3, #1
  401cdc:	2300      	moveq	r3, #0
  401cde:	b2db      	uxtb	r3, r3
  401ce0:	9300      	str	r3, [sp, #0]
  401ce2:	4603      	mov	r3, r0
  401ce4:	68f8      	ldr	r0, [r7, #12]
  401ce6:	4c09      	ldr	r4, [pc, #36]	; (401d0c <pio_configure_pin+0x1ac>)
  401ce8:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401cea:	e001      	b.n	401cf0 <pio_configure_pin+0x190>

	default:
		return 0;
  401cec:	2300      	movs	r3, #0
  401cee:	e000      	b.n	401cf2 <pio_configure_pin+0x192>
	}

	return 1;
  401cf0:	2301      	movs	r3, #1
}
  401cf2:	4618      	mov	r0, r3
  401cf4:	3714      	adds	r7, #20
  401cf6:	46bd      	mov	sp, r7
  401cf8:	bd90      	pop	{r4, r7, pc}
  401cfa:	bf00      	nop
  401cfc:	00401e3d 	.word	0x00401e3d
  401d00:	00401809 	.word	0x00401809
  401d04:	004017a5 	.word	0x004017a5
  401d08:	00401919 	.word	0x00401919
  401d0c:	00401999 	.word	0x00401999

00401d10 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401d10:	b590      	push	{r4, r7, lr}
  401d12:	b087      	sub	sp, #28
  401d14:	af02      	add	r7, sp, #8
  401d16:	60f8      	str	r0, [r7, #12]
  401d18:	60b9      	str	r1, [r7, #8]
  401d1a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401d1c:	687b      	ldr	r3, [r7, #4]
  401d1e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d26:	d043      	beq.n	401db0 <pio_configure_pin_group+0xa0>
  401d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d2c:	d809      	bhi.n	401d42 <pio_configure_pin_group+0x32>
  401d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d32:	d01f      	beq.n	401d74 <pio_configure_pin_group+0x64>
  401d34:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d38:	d02b      	beq.n	401d92 <pio_configure_pin_group+0x82>
  401d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d3e:	d00a      	beq.n	401d56 <pio_configure_pin_group+0x46>
  401d40:	e06d      	b.n	401e1e <pio_configure_pin_group+0x10e>
  401d42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d46:	d048      	beq.n	401dda <pio_configure_pin_group+0xca>
  401d48:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d4c:	d045      	beq.n	401dda <pio_configure_pin_group+0xca>
  401d4e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d52:	d03c      	beq.n	401dce <pio_configure_pin_group+0xbe>
  401d54:	e063      	b.n	401e1e <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401d56:	68ba      	ldr	r2, [r7, #8]
  401d58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d5c:	68f8      	ldr	r0, [r7, #12]
  401d5e:	4b33      	ldr	r3, [pc, #204]	; (401e2c <pio_configure_pin_group+0x11c>)
  401d60:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401d62:	687b      	ldr	r3, [r7, #4]
  401d64:	f003 0301 	and.w	r3, r3, #1
  401d68:	461a      	mov	r2, r3
  401d6a:	68b9      	ldr	r1, [r7, #8]
  401d6c:	68f8      	ldr	r0, [r7, #12]
  401d6e:	4b30      	ldr	r3, [pc, #192]	; (401e30 <pio_configure_pin_group+0x120>)
  401d70:	4798      	blx	r3
		break;
  401d72:	e056      	b.n	401e22 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401d74:	68ba      	ldr	r2, [r7, #8]
  401d76:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d7a:	68f8      	ldr	r0, [r7, #12]
  401d7c:	4b2b      	ldr	r3, [pc, #172]	; (401e2c <pio_configure_pin_group+0x11c>)
  401d7e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401d80:	687b      	ldr	r3, [r7, #4]
  401d82:	f003 0301 	and.w	r3, r3, #1
  401d86:	461a      	mov	r2, r3
  401d88:	68b9      	ldr	r1, [r7, #8]
  401d8a:	68f8      	ldr	r0, [r7, #12]
  401d8c:	4b28      	ldr	r3, [pc, #160]	; (401e30 <pio_configure_pin_group+0x120>)
  401d8e:	4798      	blx	r3
		break;
  401d90:	e047      	b.n	401e22 <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401d92:	68ba      	ldr	r2, [r7, #8]
  401d94:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401d98:	68f8      	ldr	r0, [r7, #12]
  401d9a:	4b24      	ldr	r3, [pc, #144]	; (401e2c <pio_configure_pin_group+0x11c>)
  401d9c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401d9e:	687b      	ldr	r3, [r7, #4]
  401da0:	f003 0301 	and.w	r3, r3, #1
  401da4:	461a      	mov	r2, r3
  401da6:	68b9      	ldr	r1, [r7, #8]
  401da8:	68f8      	ldr	r0, [r7, #12]
  401daa:	4b21      	ldr	r3, [pc, #132]	; (401e30 <pio_configure_pin_group+0x120>)
  401dac:	4798      	blx	r3
		break;
  401dae:	e038      	b.n	401e22 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401db0:	68ba      	ldr	r2, [r7, #8]
  401db2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401db6:	68f8      	ldr	r0, [r7, #12]
  401db8:	4b1c      	ldr	r3, [pc, #112]	; (401e2c <pio_configure_pin_group+0x11c>)
  401dba:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401dbc:	687b      	ldr	r3, [r7, #4]
  401dbe:	f003 0301 	and.w	r3, r3, #1
  401dc2:	461a      	mov	r2, r3
  401dc4:	68b9      	ldr	r1, [r7, #8]
  401dc6:	68f8      	ldr	r0, [r7, #12]
  401dc8:	4b19      	ldr	r3, [pc, #100]	; (401e30 <pio_configure_pin_group+0x120>)
  401dca:	4798      	blx	r3
		break;
  401dcc:	e029      	b.n	401e22 <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401dce:	687a      	ldr	r2, [r7, #4]
  401dd0:	68b9      	ldr	r1, [r7, #8]
  401dd2:	68f8      	ldr	r0, [r7, #12]
  401dd4:	4b17      	ldr	r3, [pc, #92]	; (401e34 <pio_configure_pin_group+0x124>)
  401dd6:	4798      	blx	r3
		break;
  401dd8:	e023      	b.n	401e22 <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401dda:	687b      	ldr	r3, [r7, #4]
  401ddc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401de0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401de4:	bf0c      	ite	eq
  401de6:	2301      	moveq	r3, #1
  401de8:	2300      	movne	r3, #0
  401dea:	b2db      	uxtb	r3, r3
  401dec:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401dee:	687b      	ldr	r3, [r7, #4]
  401df0:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401df4:	2b00      	cmp	r3, #0
  401df6:	bf14      	ite	ne
  401df8:	2301      	movne	r3, #1
  401dfa:	2300      	moveq	r3, #0
  401dfc:	b2db      	uxtb	r3, r3
  401dfe:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401e00:	687b      	ldr	r3, [r7, #4]
  401e02:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401e06:	2b00      	cmp	r3, #0
  401e08:	bf14      	ite	ne
  401e0a:	2301      	movne	r3, #1
  401e0c:	2300      	moveq	r3, #0
  401e0e:	b2db      	uxtb	r3, r3
  401e10:	9300      	str	r3, [sp, #0]
  401e12:	460b      	mov	r3, r1
  401e14:	68b9      	ldr	r1, [r7, #8]
  401e16:	68f8      	ldr	r0, [r7, #12]
  401e18:	4c07      	ldr	r4, [pc, #28]	; (401e38 <pio_configure_pin_group+0x128>)
  401e1a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401e1c:	e001      	b.n	401e22 <pio_configure_pin_group+0x112>

	default:
		return 0;
  401e1e:	2300      	movs	r3, #0
  401e20:	e000      	b.n	401e24 <pio_configure_pin_group+0x114>
	}

	return 1;
  401e22:	2301      	movs	r3, #1
}
  401e24:	4618      	mov	r0, r3
  401e26:	3714      	adds	r7, #20
  401e28:	46bd      	mov	sp, r7
  401e2a:	bd90      	pop	{r4, r7, pc}
  401e2c:	00401809 	.word	0x00401809
  401e30:	004017a5 	.word	0x004017a5
  401e34:	00401919 	.word	0x00401919
  401e38:	00401999 	.word	0x00401999

00401e3c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401e3c:	b480      	push	{r7}
  401e3e:	b085      	sub	sp, #20
  401e40:	af00      	add	r7, sp, #0
  401e42:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401e44:	687b      	ldr	r3, [r7, #4]
  401e46:	095b      	lsrs	r3, r3, #5
  401e48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401e4c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401e50:	025b      	lsls	r3, r3, #9
  401e52:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401e54:	68fb      	ldr	r3, [r7, #12]
}
  401e56:	4618      	mov	r0, r3
  401e58:	3714      	adds	r7, #20
  401e5a:	46bd      	mov	sp, r7
  401e5c:	bc80      	pop	{r7}
  401e5e:	4770      	bx	lr

00401e60 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401e60:	b480      	push	{r7}
  401e62:	b085      	sub	sp, #20
  401e64:	af00      	add	r7, sp, #0
  401e66:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401e68:	491c      	ldr	r1, [pc, #112]	; (401edc <pmc_switch_mck_to_pllack+0x7c>)
  401e6a:	4b1c      	ldr	r3, [pc, #112]	; (401edc <pmc_switch_mck_to_pllack+0x7c>)
  401e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401e72:	687b      	ldr	r3, [r7, #4]
  401e74:	4313      	orrs	r3, r2
  401e76:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401e7c:	60fb      	str	r3, [r7, #12]
  401e7e:	e007      	b.n	401e90 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e80:	68fb      	ldr	r3, [r7, #12]
  401e82:	2b00      	cmp	r3, #0
  401e84:	d101      	bne.n	401e8a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401e86:	2301      	movs	r3, #1
  401e88:	e023      	b.n	401ed2 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401e8a:	68fb      	ldr	r3, [r7, #12]
  401e8c:	3b01      	subs	r3, #1
  401e8e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e90:	4b12      	ldr	r3, [pc, #72]	; (401edc <pmc_switch_mck_to_pllack+0x7c>)
  401e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401e94:	f003 0308 	and.w	r3, r3, #8
  401e98:	2b00      	cmp	r3, #0
  401e9a:	d0f1      	beq.n	401e80 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401e9c:	4a0f      	ldr	r2, [pc, #60]	; (401edc <pmc_switch_mck_to_pllack+0x7c>)
  401e9e:	4b0f      	ldr	r3, [pc, #60]	; (401edc <pmc_switch_mck_to_pllack+0x7c>)
  401ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ea2:	f023 0303 	bic.w	r3, r3, #3
  401ea6:	f043 0302 	orr.w	r3, r3, #2
  401eaa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401eb0:	60fb      	str	r3, [r7, #12]
  401eb2:	e007      	b.n	401ec4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401eb4:	68fb      	ldr	r3, [r7, #12]
  401eb6:	2b00      	cmp	r3, #0
  401eb8:	d101      	bne.n	401ebe <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401eba:	2301      	movs	r3, #1
  401ebc:	e009      	b.n	401ed2 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401ebe:	68fb      	ldr	r3, [r7, #12]
  401ec0:	3b01      	subs	r3, #1
  401ec2:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ec4:	4b05      	ldr	r3, [pc, #20]	; (401edc <pmc_switch_mck_to_pllack+0x7c>)
  401ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401ec8:	f003 0308 	and.w	r3, r3, #8
  401ecc:	2b00      	cmp	r3, #0
  401ece:	d0f1      	beq.n	401eb4 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401ed0:	2300      	movs	r3, #0
}
  401ed2:	4618      	mov	r0, r3
  401ed4:	3714      	adds	r7, #20
  401ed6:	46bd      	mov	sp, r7
  401ed8:	bc80      	pop	{r7}
  401eda:	4770      	bx	lr
  401edc:	400e0400 	.word	0x400e0400

00401ee0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401ee0:	b480      	push	{r7}
  401ee2:	b083      	sub	sp, #12
  401ee4:	af00      	add	r7, sp, #0
  401ee6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401ee8:	687b      	ldr	r3, [r7, #4]
  401eea:	2b01      	cmp	r3, #1
  401eec:	d107      	bne.n	401efe <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401eee:	4a08      	ldr	r2, [pc, #32]	; (401f10 <pmc_switch_sclk_to_32kxtal+0x30>)
  401ef0:	4b07      	ldr	r3, [pc, #28]	; (401f10 <pmc_switch_sclk_to_32kxtal+0x30>)
  401ef2:	689b      	ldr	r3, [r3, #8]
  401ef4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401efc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401efe:	4b04      	ldr	r3, [pc, #16]	; (401f10 <pmc_switch_sclk_to_32kxtal+0x30>)
  401f00:	4a04      	ldr	r2, [pc, #16]	; (401f14 <pmc_switch_sclk_to_32kxtal+0x34>)
  401f02:	601a      	str	r2, [r3, #0]
}
  401f04:	bf00      	nop
  401f06:	370c      	adds	r7, #12
  401f08:	46bd      	mov	sp, r7
  401f0a:	bc80      	pop	{r7}
  401f0c:	4770      	bx	lr
  401f0e:	bf00      	nop
  401f10:	400e1410 	.word	0x400e1410
  401f14:	a5000008 	.word	0xa5000008

00401f18 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401f18:	b480      	push	{r7}
  401f1a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401f1c:	4b09      	ldr	r3, [pc, #36]	; (401f44 <pmc_osc_is_ready_32kxtal+0x2c>)
  401f1e:	695b      	ldr	r3, [r3, #20]
  401f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401f24:	2b00      	cmp	r3, #0
  401f26:	d007      	beq.n	401f38 <pmc_osc_is_ready_32kxtal+0x20>
  401f28:	4b07      	ldr	r3, [pc, #28]	; (401f48 <pmc_osc_is_ready_32kxtal+0x30>)
  401f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401f30:	2b00      	cmp	r3, #0
  401f32:	d001      	beq.n	401f38 <pmc_osc_is_ready_32kxtal+0x20>
  401f34:	2301      	movs	r3, #1
  401f36:	e000      	b.n	401f3a <pmc_osc_is_ready_32kxtal+0x22>
  401f38:	2300      	movs	r3, #0
}
  401f3a:	4618      	mov	r0, r3
  401f3c:	46bd      	mov	sp, r7
  401f3e:	bc80      	pop	{r7}
  401f40:	4770      	bx	lr
  401f42:	bf00      	nop
  401f44:	400e1410 	.word	0x400e1410
  401f48:	400e0400 	.word	0x400e0400

00401f4c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401f4c:	b480      	push	{r7}
  401f4e:	b083      	sub	sp, #12
  401f50:	af00      	add	r7, sp, #0
  401f52:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401f54:	4a18      	ldr	r2, [pc, #96]	; (401fb8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401f56:	4b18      	ldr	r3, [pc, #96]	; (401fb8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401f58:	6a1b      	ldr	r3, [r3, #32]
  401f5a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401f5e:	f043 0308 	orr.w	r3, r3, #8
  401f62:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401f64:	bf00      	nop
  401f66:	4b14      	ldr	r3, [pc, #80]	; (401fb8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401f6e:	2b00      	cmp	r3, #0
  401f70:	d0f9      	beq.n	401f66 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401f72:	4911      	ldr	r1, [pc, #68]	; (401fb8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401f74:	4b10      	ldr	r3, [pc, #64]	; (401fb8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401f76:	6a1b      	ldr	r3, [r3, #32]
  401f78:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401f80:	687a      	ldr	r2, [r7, #4]
  401f82:	4313      	orrs	r3, r2
  401f84:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401f88:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401f8a:	bf00      	nop
  401f8c:	4b0a      	ldr	r3, [pc, #40]	; (401fb8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401f94:	2b00      	cmp	r3, #0
  401f96:	d0f9      	beq.n	401f8c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401f98:	4a07      	ldr	r2, [pc, #28]	; (401fb8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401f9a:	4b07      	ldr	r3, [pc, #28]	; (401fb8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401f9c:	6a1b      	ldr	r3, [r3, #32]
  401f9e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401fa6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401faa:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401fac:	bf00      	nop
  401fae:	370c      	adds	r7, #12
  401fb0:	46bd      	mov	sp, r7
  401fb2:	bc80      	pop	{r7}
  401fb4:	4770      	bx	lr
  401fb6:	bf00      	nop
  401fb8:	400e0400 	.word	0x400e0400

00401fbc <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401fbc:	b480      	push	{r7}
  401fbe:	b083      	sub	sp, #12
  401fc0:	af00      	add	r7, sp, #0
  401fc2:	6078      	str	r0, [r7, #4]
  401fc4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401fc6:	687b      	ldr	r3, [r7, #4]
  401fc8:	2b00      	cmp	r3, #0
  401fca:	d008      	beq.n	401fde <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401fcc:	4916      	ldr	r1, [pc, #88]	; (402028 <pmc_switch_mainck_to_xtal+0x6c>)
  401fce:	4b16      	ldr	r3, [pc, #88]	; (402028 <pmc_switch_mainck_to_xtal+0x6c>)
  401fd0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401fd2:	4a16      	ldr	r2, [pc, #88]	; (40202c <pmc_switch_mainck_to_xtal+0x70>)
  401fd4:	401a      	ands	r2, r3
  401fd6:	4b16      	ldr	r3, [pc, #88]	; (402030 <pmc_switch_mainck_to_xtal+0x74>)
  401fd8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401fda:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401fdc:	e01e      	b.n	40201c <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401fde:	4912      	ldr	r1, [pc, #72]	; (402028 <pmc_switch_mainck_to_xtal+0x6c>)
  401fe0:	4b11      	ldr	r3, [pc, #68]	; (402028 <pmc_switch_mainck_to_xtal+0x6c>)
  401fe2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401fe4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401fe8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401fec:	683a      	ldr	r2, [r7, #0]
  401fee:	0212      	lsls	r2, r2, #8
  401ff0:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ff2:	4313      	orrs	r3, r2
  401ff4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401ff8:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ffc:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401ffe:	bf00      	nop
  402000:	4b09      	ldr	r3, [pc, #36]	; (402028 <pmc_switch_mainck_to_xtal+0x6c>)
  402002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402004:	f003 0301 	and.w	r3, r3, #1
  402008:	2b00      	cmp	r3, #0
  40200a:	d0f9      	beq.n	402000 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40200c:	4a06      	ldr	r2, [pc, #24]	; (402028 <pmc_switch_mainck_to_xtal+0x6c>)
  40200e:	4b06      	ldr	r3, [pc, #24]	; (402028 <pmc_switch_mainck_to_xtal+0x6c>)
  402010:	6a1b      	ldr	r3, [r3, #32]
  402012:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40201a:	6213      	str	r3, [r2, #32]
	}
}
  40201c:	bf00      	nop
  40201e:	370c      	adds	r7, #12
  402020:	46bd      	mov	sp, r7
  402022:	bc80      	pop	{r7}
  402024:	4770      	bx	lr
  402026:	bf00      	nop
  402028:	400e0400 	.word	0x400e0400
  40202c:	fec8fffc 	.word	0xfec8fffc
  402030:	01370002 	.word	0x01370002

00402034 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402034:	b480      	push	{r7}
  402036:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402038:	4b03      	ldr	r3, [pc, #12]	; (402048 <pmc_osc_is_ready_mainck+0x14>)
  40203a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402040:	4618      	mov	r0, r3
  402042:	46bd      	mov	sp, r7
  402044:	bc80      	pop	{r7}
  402046:	4770      	bx	lr
  402048:	400e0400 	.word	0x400e0400

0040204c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40204c:	b480      	push	{r7}
  40204e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402050:	4b03      	ldr	r3, [pc, #12]	; (402060 <pmc_disable_pllack+0x14>)
  402052:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402056:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402058:	bf00      	nop
  40205a:	46bd      	mov	sp, r7
  40205c:	bc80      	pop	{r7}
  40205e:	4770      	bx	lr
  402060:	400e0400 	.word	0x400e0400

00402064 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402064:	b480      	push	{r7}
  402066:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402068:	4b03      	ldr	r3, [pc, #12]	; (402078 <pmc_is_locked_pllack+0x14>)
  40206a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40206c:	f003 0302 	and.w	r3, r3, #2
}
  402070:	4618      	mov	r0, r3
  402072:	46bd      	mov	sp, r7
  402074:	bc80      	pop	{r7}
  402076:	4770      	bx	lr
  402078:	400e0400 	.word	0x400e0400

0040207c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  40207c:	b480      	push	{r7}
  40207e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402080:	4b03      	ldr	r3, [pc, #12]	; (402090 <pmc_disable_pllbck+0x14>)
  402082:	2200      	movs	r2, #0
  402084:	62da      	str	r2, [r3, #44]	; 0x2c
}
  402086:	bf00      	nop
  402088:	46bd      	mov	sp, r7
  40208a:	bc80      	pop	{r7}
  40208c:	4770      	bx	lr
  40208e:	bf00      	nop
  402090:	400e0400 	.word	0x400e0400

00402094 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  402094:	b480      	push	{r7}
  402096:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402098:	4b03      	ldr	r3, [pc, #12]	; (4020a8 <pmc_is_locked_pllbck+0x14>)
  40209a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40209c:	f003 0304 	and.w	r3, r3, #4
}
  4020a0:	4618      	mov	r0, r3
  4020a2:	46bd      	mov	sp, r7
  4020a4:	bc80      	pop	{r7}
  4020a6:	4770      	bx	lr
  4020a8:	400e0400 	.word	0x400e0400

004020ac <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4020ac:	b480      	push	{r7}
  4020ae:	b083      	sub	sp, #12
  4020b0:	af00      	add	r7, sp, #0
  4020b2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4020b4:	687b      	ldr	r3, [r7, #4]
  4020b6:	2b22      	cmp	r3, #34	; 0x22
  4020b8:	d901      	bls.n	4020be <pmc_enable_periph_clk+0x12>
		return 1;
  4020ba:	2301      	movs	r3, #1
  4020bc:	e02f      	b.n	40211e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4020be:	687b      	ldr	r3, [r7, #4]
  4020c0:	2b1f      	cmp	r3, #31
  4020c2:	d813      	bhi.n	4020ec <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4020c4:	4b18      	ldr	r3, [pc, #96]	; (402128 <pmc_enable_periph_clk+0x7c>)
  4020c6:	699a      	ldr	r2, [r3, #24]
  4020c8:	2101      	movs	r1, #1
  4020ca:	687b      	ldr	r3, [r7, #4]
  4020cc:	fa01 f303 	lsl.w	r3, r1, r3
  4020d0:	401a      	ands	r2, r3
  4020d2:	2101      	movs	r1, #1
  4020d4:	687b      	ldr	r3, [r7, #4]
  4020d6:	fa01 f303 	lsl.w	r3, r1, r3
  4020da:	429a      	cmp	r2, r3
  4020dc:	d01e      	beq.n	40211c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4020de:	4a12      	ldr	r2, [pc, #72]	; (402128 <pmc_enable_periph_clk+0x7c>)
  4020e0:	2101      	movs	r1, #1
  4020e2:	687b      	ldr	r3, [r7, #4]
  4020e4:	fa01 f303 	lsl.w	r3, r1, r3
  4020e8:	6113      	str	r3, [r2, #16]
  4020ea:	e017      	b.n	40211c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4020ec:	687b      	ldr	r3, [r7, #4]
  4020ee:	3b20      	subs	r3, #32
  4020f0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4020f2:	4b0d      	ldr	r3, [pc, #52]	; (402128 <pmc_enable_periph_clk+0x7c>)
  4020f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4020f8:	2101      	movs	r1, #1
  4020fa:	687b      	ldr	r3, [r7, #4]
  4020fc:	fa01 f303 	lsl.w	r3, r1, r3
  402100:	401a      	ands	r2, r3
  402102:	2101      	movs	r1, #1
  402104:	687b      	ldr	r3, [r7, #4]
  402106:	fa01 f303 	lsl.w	r3, r1, r3
  40210a:	429a      	cmp	r2, r3
  40210c:	d006      	beq.n	40211c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40210e:	4a06      	ldr	r2, [pc, #24]	; (402128 <pmc_enable_periph_clk+0x7c>)
  402110:	2101      	movs	r1, #1
  402112:	687b      	ldr	r3, [r7, #4]
  402114:	fa01 f303 	lsl.w	r3, r1, r3
  402118:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40211c:	2300      	movs	r3, #0
}
  40211e:	4618      	mov	r0, r3
  402120:	370c      	adds	r7, #12
  402122:	46bd      	mov	sp, r7
  402124:	bc80      	pop	{r7}
  402126:	4770      	bx	lr
  402128:	400e0400 	.word	0x400e0400

0040212c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40212c:	b480      	push	{r7}
  40212e:	b083      	sub	sp, #12
  402130:	af00      	add	r7, sp, #0
  402132:	4603      	mov	r3, r0
  402134:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402136:	4908      	ldr	r1, [pc, #32]	; (402158 <NVIC_EnableIRQ+0x2c>)
  402138:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40213c:	095b      	lsrs	r3, r3, #5
  40213e:	79fa      	ldrb	r2, [r7, #7]
  402140:	f002 021f 	and.w	r2, r2, #31
  402144:	2001      	movs	r0, #1
  402146:	fa00 f202 	lsl.w	r2, r0, r2
  40214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40214e:	bf00      	nop
  402150:	370c      	adds	r7, #12
  402152:	46bd      	mov	sp, r7
  402154:	bc80      	pop	{r7}
  402156:	4770      	bx	lr
  402158:	e000e100 	.word	0xe000e100

0040215c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40215c:	b580      	push	{r7, lr}
  40215e:	b082      	sub	sp, #8
  402160:	af00      	add	r7, sp, #0
  402162:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402164:	6878      	ldr	r0, [r7, #4]
  402166:	4b03      	ldr	r3, [pc, #12]	; (402174 <sysclk_enable_peripheral_clock+0x18>)
  402168:	4798      	blx	r3
}
  40216a:	bf00      	nop
  40216c:	3708      	adds	r7, #8
  40216e:	46bd      	mov	sp, r7
  402170:	bd80      	pop	{r7, pc}
  402172:	bf00      	nop
  402174:	004020ad 	.word	0x004020ad

00402178 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  402178:	b580      	push	{r7, lr}
  40217a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  40217c:	200b      	movs	r0, #11
  40217e:	4b03      	ldr	r3, [pc, #12]	; (40218c <ioport_init+0x14>)
  402180:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  402182:	200c      	movs	r0, #12
  402184:	4b01      	ldr	r3, [pc, #4]	; (40218c <ioport_init+0x14>)
  402186:	4798      	blx	r3
	arch_ioport_init();
}
  402188:	bf00      	nop
  40218a:	bd80      	pop	{r7, pc}
  40218c:	0040215d 	.word	0x0040215d

00402190 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  402190:	b590      	push	{r4, r7, lr}
  402192:	b083      	sub	sp, #12
  402194:	af02      	add	r7, sp, #8
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402196:	4b3e      	ldr	r3, [pc, #248]	; (402290 <board_init+0x100>)
  402198:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40219c:	605a      	str	r2, [r3, #4]

	/* Init IO Port service to enable configuring pins */
	ioport_init();
  40219e:	4b3d      	ldr	r3, [pc, #244]	; (402294 <board_init+0x104>)
  4021a0:	4798      	blx	r3

	/* Configure UART0 pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4021a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4021a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4021aa:	483b      	ldr	r0, [pc, #236]	; (402298 <board_init+0x108>)
  4021ac:	4b3b      	ldr	r3, [pc, #236]	; (40229c <board_init+0x10c>)
  4021ae:	4798      	blx	r3

	/* Configure UART1 pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4021b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4021b4:	210c      	movs	r1, #12
  4021b6:	483a      	ldr	r0, [pc, #232]	; (4022a0 <board_init+0x110>)
  4021b8:	4b38      	ldr	r3, [pc, #224]	; (40229c <board_init+0x10c>)
  4021ba:	4798      	blx	r3

	/* Configure USART0 pins */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  4021bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4021c0:	2160      	movs	r1, #96	; 0x60
  4021c2:	4835      	ldr	r0, [pc, #212]	; (402298 <board_init+0x108>)
  4021c4:	4b35      	ldr	r3, [pc, #212]	; (40229c <board_init+0x10c>)
  4021c6:	4798      	blx	r3

	/* Configure USART1 pins */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  4021c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4021cc:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
  4021d0:	4831      	ldr	r0, [pc, #196]	; (402298 <board_init+0x108>)
  4021d2:	4b32      	ldr	r3, [pc, #200]	; (40229c <board_init+0x10c>)
  4021d4:	4798      	blx	r3

	#if defined(BOARD_NIRA91)
		/* Configure TWI0 Pins (Pressure sensors) */
		gpio_configure_group(PINS_TWI0_PIO, PINS_TWI0, PINS_TWI0_FLAGS);
  4021d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4021da:	2118      	movs	r1, #24
  4021dc:	482e      	ldr	r0, [pc, #184]	; (402298 <board_init+0x108>)
  4021de:	4b2f      	ldr	r3, [pc, #188]	; (40229c <board_init+0x10c>)
  4021e0:	4798      	blx	r3

		/* Enable PIO Clocks (GPIO I/P and Ext Int) */
		pmc_enable_periph_clk(ID_PIOA);
  4021e2:	200b      	movs	r0, #11
  4021e4:	4b2f      	ldr	r3, [pc, #188]	; (4022a4 <board_init+0x114>)
  4021e6:	4798      	blx	r3
		pmc_enable_periph_clk(ID_PIOB);
  4021e8:	200c      	movs	r0, #12
  4021ea:	4b2e      	ldr	r3, [pc, #184]	; (4022a4 <board_init+0x114>)
  4021ec:	4798      	blx	r3

		/* Configure Solenoid Pins */
		gpio_configure_pin(PIN_INAVALVE1_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  4021ee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4021f2:	200d      	movs	r0, #13
  4021f4:	4b2c      	ldr	r3, [pc, #176]	; (4022a8 <board_init+0x118>)
  4021f6:	4798      	blx	r3
		gpio_configure_pin(PIN_INAVALVE2_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  4021f8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4021fc:	200e      	movs	r0, #14
  4021fe:	4b2a      	ldr	r3, [pc, #168]	; (4022a8 <board_init+0x118>)
  402200:	4798      	blx	r3

		/* Configure Air Pump SSRly */
		gpio_configure_pin(PIN_AIR_PUMP_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  402202:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402206:	2018      	movs	r0, #24
  402208:	4b27      	ldr	r3, [pc, #156]	; (4022a8 <board_init+0x118>)
  40220a:	4798      	blx	r3

		/* Configure LED Pins */
		gpio_configure_pin(PIN_DEBUGLED_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  40220c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402210:	2010      	movs	r0, #16
  402212:	4b25      	ldr	r3, [pc, #148]	; (4022a8 <board_init+0x118>)
  402214:	4798      	blx	r3

		/* Configure SW Pins */
		gpio_configure_pin(PIN_SW_PRESS_UP_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  402216:	4925      	ldr	r1, [pc, #148]	; (4022ac <board_init+0x11c>)
  402218:	2020      	movs	r0, #32
  40221a:	4b23      	ldr	r3, [pc, #140]	; (4022a8 <board_init+0x118>)
  40221c:	4798      	blx	r3
		gpio_configure_pin(PIN_SW_PRESS_DN_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  40221e:	4923      	ldr	r1, [pc, #140]	; (4022ac <board_init+0x11c>)
  402220:	2021      	movs	r0, #33	; 0x21
  402222:	4b21      	ldr	r3, [pc, #132]	; (4022a8 <board_init+0x118>)
  402224:	4798      	blx	r3
		gpio_configure_pin(PIN_SW_DURATION_UP_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  402226:	4921      	ldr	r1, [pc, #132]	; (4022ac <board_init+0x11c>)
  402228:	2022      	movs	r0, #34	; 0x22
  40222a:	4b1f      	ldr	r3, [pc, #124]	; (4022a8 <board_init+0x118>)
  40222c:	4798      	blx	r3
		gpio_configure_pin(PIN_SW_DURATION_DN_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  40222e:	491f      	ldr	r1, [pc, #124]	; (4022ac <board_init+0x11c>)
  402230:	2023      	movs	r0, #35	; 0x23
  402232:	4b1d      	ldr	r3, [pc, #116]	; (4022a8 <board_init+0x118>)
  402234:	4798      	blx	r3
		gpio_configure_pin(PIN_SW_DELAY_UP_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  402236:	491d      	ldr	r1, [pc, #116]	; (4022ac <board_init+0x11c>)
  402238:	2013      	movs	r0, #19
  40223a:	4b1b      	ldr	r3, [pc, #108]	; (4022a8 <board_init+0x118>)
  40223c:	4798      	blx	r3
		#ifndef BOARD_NIRA91
			/* Delay down pin cannot be utilized as input as this pin is short with DISP UART RX (Schematic mistake) */
			gpio_configure_pin(PIN_SW_DELAY_DN_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
		#endif
		gpio_configure_pin(PIN_SW_SOS_IDX, PIO_INPUT);
  40223e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402242:	2014      	movs	r0, #20
  402244:	4b18      	ldr	r3, [pc, #96]	; (4022a8 <board_init+0x118>)
  402246:	4798      	blx	r3
		/*	
		 *Set debounce filter slow clock divider for PIOA and PIOB.
		 *Calling this function with mask value 0 will not disable the already enabled debounce filters.  
		 *Debounce value set for 100ms. (10Hz Filter)
		 */ 
		pio_set_debounce_filter(PIOA, 0, 10);
  402248:	220a      	movs	r2, #10
  40224a:	2100      	movs	r1, #0
  40224c:	4812      	ldr	r0, [pc, #72]	; (402298 <board_init+0x108>)
  40224e:	4b18      	ldr	r3, [pc, #96]	; (4022b0 <board_init+0x120>)
  402250:	4798      	blx	r3
		pio_set_debounce_filter(PIOB, 0, 10);
  402252:	220a      	movs	r2, #10
  402254:	2100      	movs	r1, #0
  402256:	4812      	ldr	r0, [pc, #72]	; (4022a0 <board_init+0x110>)
  402258:	4b15      	ldr	r3, [pc, #84]	; (4022b0 <board_init+0x120>)
  40225a:	4798      	blx	r3

		/* Initialize PIOs interrupt handlers (see PIO definition in board.h). */
		pio_handler_set(PIN_SW_SOS_PIO, PIN_SW_SOS_PIO_ID, PIN_SW_SOS_MASK, (PIO_OPENDRAIN | PIO_DEBOUNCE | PIO_IT_LOW_LEVEL), SosIntHandler);
  40225c:	4b15      	ldr	r3, [pc, #84]	; (4022b4 <board_init+0x124>)
  40225e:	9300      	str	r3, [sp, #0]
  402260:	231c      	movs	r3, #28
  402262:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402266:	210b      	movs	r1, #11
  402268:	480b      	ldr	r0, [pc, #44]	; (402298 <board_init+0x108>)
  40226a:	4c13      	ldr	r4, [pc, #76]	; (4022b8 <board_init+0x128>)
  40226c:	47a0      	blx	r4
		
		/* Enable PIO controller IRQs. */
		NVIC_EnableIRQ((IRQn_Type) PIN_SW_SOS_PIO_ID);
  40226e:	200b      	movs	r0, #11
  402270:	4b12      	ldr	r3, [pc, #72]	; (4022bc <board_init+0x12c>)
  402272:	4798      	blx	r3

		/* PIO configuration for Buttons. */
		pio_handler_set_priority(PIN_SW_SOS_PIO, (IRQn_Type) PIN_SW_SOS_PIO_ID, 0);
  402274:	2200      	movs	r2, #0
  402276:	210b      	movs	r1, #11
  402278:	4807      	ldr	r0, [pc, #28]	; (402298 <board_init+0x108>)
  40227a:	4b11      	ldr	r3, [pc, #68]	; (4022c0 <board_init+0x130>)
  40227c:	4798      	blx	r3
		
		/* Enable PIO line interrupts. */
		pio_enable_interrupt(PIN_SW_SOS_PIO, PIN_SW_SOS_MASK);
  40227e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  402282:	4805      	ldr	r0, [pc, #20]	; (402298 <board_init+0x108>)
  402284:	4b0f      	ldr	r3, [pc, #60]	; (4022c4 <board_init+0x134>)
  402286:	4798      	blx	r3
	#endif
}
  402288:	bf00      	nop
  40228a:	3704      	adds	r7, #4
  40228c:	46bd      	mov	sp, r7
  40228e:	bd90      	pop	{r4, r7, pc}
  402290:	400e1450 	.word	0x400e1450
  402294:	00402179 	.word	0x00402179
  402298:	400e0e00 	.word	0x400e0e00
  40229c:	00401d11 	.word	0x00401d11
  4022a0:	400e1000 	.word	0x400e1000
  4022a4:	004020ad 	.word	0x004020ad
  4022a8:	00401b61 	.word	0x00401b61
  4022ac:	2800000c 	.word	0x2800000c
  4022b0:	004017d1 	.word	0x004017d1
  4022b4:	00402989 	.word	0x00402989
  4022b8:	00400ac1 	.word	0x00400ac1
  4022bc:	0040212d 	.word	0x0040212d
  4022c0:	00400b91 	.word	0x00400b91
  4022c4:	00401a69 	.word	0x00401a69

004022c8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4022c8:	b580      	push	{r7, lr}
  4022ca:	b084      	sub	sp, #16
  4022cc:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4022ce:	4b27      	ldr	r3, [pc, #156]	; (40236c <Reset_Handler+0xa4>)
  4022d0:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4022d2:	4b27      	ldr	r3, [pc, #156]	; (402370 <Reset_Handler+0xa8>)
  4022d4:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4022d6:	68fa      	ldr	r2, [r7, #12]
  4022d8:	68bb      	ldr	r3, [r7, #8]
  4022da:	429a      	cmp	r2, r3
  4022dc:	d90d      	bls.n	4022fa <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4022de:	e007      	b.n	4022f0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4022e0:	68bb      	ldr	r3, [r7, #8]
  4022e2:	1d1a      	adds	r2, r3, #4
  4022e4:	60ba      	str	r2, [r7, #8]
  4022e6:	68fa      	ldr	r2, [r7, #12]
  4022e8:	1d11      	adds	r1, r2, #4
  4022ea:	60f9      	str	r1, [r7, #12]
  4022ec:	6812      	ldr	r2, [r2, #0]
  4022ee:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4022f0:	68bb      	ldr	r3, [r7, #8]
  4022f2:	4a20      	ldr	r2, [pc, #128]	; (402374 <Reset_Handler+0xac>)
  4022f4:	4293      	cmp	r3, r2
  4022f6:	d3f3      	bcc.n	4022e0 <Reset_Handler+0x18>
  4022f8:	e020      	b.n	40233c <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4022fa:	68fa      	ldr	r2, [r7, #12]
  4022fc:	68bb      	ldr	r3, [r7, #8]
  4022fe:	429a      	cmp	r2, r3
  402300:	d21c      	bcs.n	40233c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402302:	4a1c      	ldr	r2, [pc, #112]	; (402374 <Reset_Handler+0xac>)
  402304:	4b1a      	ldr	r3, [pc, #104]	; (402370 <Reset_Handler+0xa8>)
  402306:	1ad3      	subs	r3, r2, r3
  402308:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40230a:	68fa      	ldr	r2, [r7, #12]
  40230c:	687b      	ldr	r3, [r7, #4]
  40230e:	4413      	add	r3, r2
  402310:	3b04      	subs	r3, #4
  402312:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402314:	68ba      	ldr	r2, [r7, #8]
  402316:	687b      	ldr	r3, [r7, #4]
  402318:	4413      	add	r3, r2
  40231a:	3b04      	subs	r3, #4
  40231c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40231e:	e00a      	b.n	402336 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402320:	68bb      	ldr	r3, [r7, #8]
  402322:	1f1a      	subs	r2, r3, #4
  402324:	60ba      	str	r2, [r7, #8]
  402326:	68fa      	ldr	r2, [r7, #12]
  402328:	1f11      	subs	r1, r2, #4
  40232a:	60f9      	str	r1, [r7, #12]
  40232c:	6812      	ldr	r2, [r2, #0]
  40232e:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402330:	687b      	ldr	r3, [r7, #4]
  402332:	3b04      	subs	r3, #4
  402334:	607b      	str	r3, [r7, #4]
  402336:	687b      	ldr	r3, [r7, #4]
  402338:	2b00      	cmp	r3, #0
  40233a:	d1f1      	bne.n	402320 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40233c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40233e:	4b0e      	ldr	r3, [pc, #56]	; (402378 <Reset_Handler+0xb0>)
  402340:	60bb      	str	r3, [r7, #8]
  402342:	e004      	b.n	40234e <Reset_Handler+0x86>
		*pDest++ = 0;
  402344:	68bb      	ldr	r3, [r7, #8]
  402346:	1d1a      	adds	r2, r3, #4
  402348:	60ba      	str	r2, [r7, #8]
  40234a:	2200      	movs	r2, #0
  40234c:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40234e:	68bb      	ldr	r3, [r7, #8]
  402350:	4a0a      	ldr	r2, [pc, #40]	; (40237c <Reset_Handler+0xb4>)
  402352:	4293      	cmp	r3, r2
  402354:	d3f6      	bcc.n	402344 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402356:	4b0a      	ldr	r3, [pc, #40]	; (402380 <Reset_Handler+0xb8>)
  402358:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40235a:	4a0a      	ldr	r2, [pc, #40]	; (402384 <Reset_Handler+0xbc>)
  40235c:	68fb      	ldr	r3, [r7, #12]
  40235e:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402360:	4b09      	ldr	r3, [pc, #36]	; (402388 <Reset_Handler+0xc0>)
  402362:	4798      	blx	r3

	/* Branch to main function */
	main();
  402364:	4b09      	ldr	r3, [pc, #36]	; (40238c <Reset_Handler+0xc4>)
  402366:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402368:	e7fe      	b.n	402368 <Reset_Handler+0xa0>
  40236a:	bf00      	nop
  40236c:	00408d38 	.word	0x00408d38
  402370:	20000000 	.word	0x20000000
  402374:	2000088c 	.word	0x2000088c
  402378:	2000088c 	.word	0x2000088c
  40237c:	20000d3c 	.word	0x20000d3c
  402380:	00400000 	.word	0x00400000
  402384:	e000ed00 	.word	0xe000ed00
  402388:	00403939 	.word	0x00403939
  40238c:	004027e1 	.word	0x004027e1

00402390 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402390:	b480      	push	{r7}
  402392:	af00      	add	r7, sp, #0
	while (1) {
	}
  402394:	e7fe      	b.n	402394 <Dummy_Handler+0x4>
  402396:	bf00      	nop

00402398 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402398:	b480      	push	{r7}
  40239a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40239c:	4b5d      	ldr	r3, [pc, #372]	; (402514 <SystemCoreClockUpdate+0x17c>)
  40239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023a0:	f003 0303 	and.w	r3, r3, #3
  4023a4:	2b03      	cmp	r3, #3
  4023a6:	f200 8096 	bhi.w	4024d6 <SystemCoreClockUpdate+0x13e>
  4023aa:	a201      	add	r2, pc, #4	; (adr r2, 4023b0 <SystemCoreClockUpdate+0x18>)
  4023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4023b0:	004023c1 	.word	0x004023c1
  4023b4:	004023e1 	.word	0x004023e1
  4023b8:	0040242b 	.word	0x0040242b
  4023bc:	0040242b 	.word	0x0040242b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4023c0:	4b55      	ldr	r3, [pc, #340]	; (402518 <SystemCoreClockUpdate+0x180>)
  4023c2:	695b      	ldr	r3, [r3, #20]
  4023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4023c8:	2b00      	cmp	r3, #0
  4023ca:	d004      	beq.n	4023d6 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4023cc:	4b53      	ldr	r3, [pc, #332]	; (40251c <SystemCoreClockUpdate+0x184>)
  4023ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4023d2:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4023d4:	e080      	b.n	4024d8 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4023d6:	4b51      	ldr	r3, [pc, #324]	; (40251c <SystemCoreClockUpdate+0x184>)
  4023d8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4023dc:	601a      	str	r2, [r3, #0]
			}
		break;
  4023de:	e07b      	b.n	4024d8 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4023e0:	4b4c      	ldr	r3, [pc, #304]	; (402514 <SystemCoreClockUpdate+0x17c>)
  4023e2:	6a1b      	ldr	r3, [r3, #32]
  4023e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4023e8:	2b00      	cmp	r3, #0
  4023ea:	d003      	beq.n	4023f4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4023ec:	4b4b      	ldr	r3, [pc, #300]	; (40251c <SystemCoreClockUpdate+0x184>)
  4023ee:	4a4c      	ldr	r2, [pc, #304]	; (402520 <SystemCoreClockUpdate+0x188>)
  4023f0:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4023f2:	e071      	b.n	4024d8 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4023f4:	4b49      	ldr	r3, [pc, #292]	; (40251c <SystemCoreClockUpdate+0x184>)
  4023f6:	4a4b      	ldr	r2, [pc, #300]	; (402524 <SystemCoreClockUpdate+0x18c>)
  4023f8:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4023fa:	4b46      	ldr	r3, [pc, #280]	; (402514 <SystemCoreClockUpdate+0x17c>)
  4023fc:	6a1b      	ldr	r3, [r3, #32]
  4023fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402402:	2b10      	cmp	r3, #16
  402404:	d008      	beq.n	402418 <SystemCoreClockUpdate+0x80>
  402406:	2b20      	cmp	r3, #32
  402408:	d00a      	beq.n	402420 <SystemCoreClockUpdate+0x88>
  40240a:	2b00      	cmp	r3, #0
  40240c:	d000      	beq.n	402410 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40240e:	e00b      	b.n	402428 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402410:	4b42      	ldr	r3, [pc, #264]	; (40251c <SystemCoreClockUpdate+0x184>)
  402412:	4a44      	ldr	r2, [pc, #272]	; (402524 <SystemCoreClockUpdate+0x18c>)
  402414:	601a      	str	r2, [r3, #0]
			break;
  402416:	e007      	b.n	402428 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402418:	4b40      	ldr	r3, [pc, #256]	; (40251c <SystemCoreClockUpdate+0x184>)
  40241a:	4a43      	ldr	r2, [pc, #268]	; (402528 <SystemCoreClockUpdate+0x190>)
  40241c:	601a      	str	r2, [r3, #0]
			break;
  40241e:	e003      	b.n	402428 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402420:	4b3e      	ldr	r3, [pc, #248]	; (40251c <SystemCoreClockUpdate+0x184>)
  402422:	4a3f      	ldr	r2, [pc, #252]	; (402520 <SystemCoreClockUpdate+0x188>)
  402424:	601a      	str	r2, [r3, #0]
			break;
  402426:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  402428:	e056      	b.n	4024d8 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40242a:	4b3a      	ldr	r3, [pc, #232]	; (402514 <SystemCoreClockUpdate+0x17c>)
  40242c:	6a1b      	ldr	r3, [r3, #32]
  40242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402432:	2b00      	cmp	r3, #0
  402434:	d003      	beq.n	40243e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402436:	4b39      	ldr	r3, [pc, #228]	; (40251c <SystemCoreClockUpdate+0x184>)
  402438:	4a39      	ldr	r2, [pc, #228]	; (402520 <SystemCoreClockUpdate+0x188>)
  40243a:	601a      	str	r2, [r3, #0]
  40243c:	e019      	b.n	402472 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40243e:	4b37      	ldr	r3, [pc, #220]	; (40251c <SystemCoreClockUpdate+0x184>)
  402440:	4a38      	ldr	r2, [pc, #224]	; (402524 <SystemCoreClockUpdate+0x18c>)
  402442:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402444:	4b33      	ldr	r3, [pc, #204]	; (402514 <SystemCoreClockUpdate+0x17c>)
  402446:	6a1b      	ldr	r3, [r3, #32]
  402448:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40244c:	2b10      	cmp	r3, #16
  40244e:	d008      	beq.n	402462 <SystemCoreClockUpdate+0xca>
  402450:	2b20      	cmp	r3, #32
  402452:	d00a      	beq.n	40246a <SystemCoreClockUpdate+0xd2>
  402454:	2b00      	cmp	r3, #0
  402456:	d000      	beq.n	40245a <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402458:	e00b      	b.n	402472 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40245a:	4b30      	ldr	r3, [pc, #192]	; (40251c <SystemCoreClockUpdate+0x184>)
  40245c:	4a31      	ldr	r2, [pc, #196]	; (402524 <SystemCoreClockUpdate+0x18c>)
  40245e:	601a      	str	r2, [r3, #0]
					break;
  402460:	e007      	b.n	402472 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402462:	4b2e      	ldr	r3, [pc, #184]	; (40251c <SystemCoreClockUpdate+0x184>)
  402464:	4a30      	ldr	r2, [pc, #192]	; (402528 <SystemCoreClockUpdate+0x190>)
  402466:	601a      	str	r2, [r3, #0]
					break;
  402468:	e003      	b.n	402472 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40246a:	4b2c      	ldr	r3, [pc, #176]	; (40251c <SystemCoreClockUpdate+0x184>)
  40246c:	4a2c      	ldr	r2, [pc, #176]	; (402520 <SystemCoreClockUpdate+0x188>)
  40246e:	601a      	str	r2, [r3, #0]
					break;
  402470:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402472:	4b28      	ldr	r3, [pc, #160]	; (402514 <SystemCoreClockUpdate+0x17c>)
  402474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402476:	f003 0303 	and.w	r3, r3, #3
  40247a:	2b02      	cmp	r3, #2
  40247c:	d115      	bne.n	4024aa <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40247e:	4b25      	ldr	r3, [pc, #148]	; (402514 <SystemCoreClockUpdate+0x17c>)
  402480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402482:	4b2a      	ldr	r3, [pc, #168]	; (40252c <SystemCoreClockUpdate+0x194>)
  402484:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  402486:	0c1b      	lsrs	r3, r3, #16
  402488:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40248a:	4a24      	ldr	r2, [pc, #144]	; (40251c <SystemCoreClockUpdate+0x184>)
  40248c:	6812      	ldr	r2, [r2, #0]
  40248e:	fb02 f303 	mul.w	r3, r2, r3
  402492:	4a22      	ldr	r2, [pc, #136]	; (40251c <SystemCoreClockUpdate+0x184>)
  402494:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402496:	4b1f      	ldr	r3, [pc, #124]	; (402514 <SystemCoreClockUpdate+0x17c>)
  402498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40249a:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40249c:	4a1f      	ldr	r2, [pc, #124]	; (40251c <SystemCoreClockUpdate+0x184>)
  40249e:	6812      	ldr	r2, [r2, #0]
  4024a0:	fbb2 f3f3 	udiv	r3, r2, r3
  4024a4:	4a1d      	ldr	r2, [pc, #116]	; (40251c <SystemCoreClockUpdate+0x184>)
  4024a6:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4024a8:	e016      	b.n	4024d8 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4024aa:	4b1a      	ldr	r3, [pc, #104]	; (402514 <SystemCoreClockUpdate+0x17c>)
  4024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4024ae:	4b1f      	ldr	r3, [pc, #124]	; (40252c <SystemCoreClockUpdate+0x194>)
  4024b0:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4024b2:	0c1b      	lsrs	r3, r3, #16
  4024b4:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4024b6:	4a19      	ldr	r2, [pc, #100]	; (40251c <SystemCoreClockUpdate+0x184>)
  4024b8:	6812      	ldr	r2, [r2, #0]
  4024ba:	fb02 f303 	mul.w	r3, r2, r3
  4024be:	4a17      	ldr	r2, [pc, #92]	; (40251c <SystemCoreClockUpdate+0x184>)
  4024c0:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4024c2:	4b14      	ldr	r3, [pc, #80]	; (402514 <SystemCoreClockUpdate+0x17c>)
  4024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4024c6:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4024c8:	4a14      	ldr	r2, [pc, #80]	; (40251c <SystemCoreClockUpdate+0x184>)
  4024ca:	6812      	ldr	r2, [r2, #0]
  4024cc:	fbb2 f3f3 	udiv	r3, r2, r3
  4024d0:	4a12      	ldr	r2, [pc, #72]	; (40251c <SystemCoreClockUpdate+0x184>)
  4024d2:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4024d4:	e000      	b.n	4024d8 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4024d6:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4024d8:	4b0e      	ldr	r3, [pc, #56]	; (402514 <SystemCoreClockUpdate+0x17c>)
  4024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024e0:	2b70      	cmp	r3, #112	; 0x70
  4024e2:	d108      	bne.n	4024f6 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4024e4:	4b0d      	ldr	r3, [pc, #52]	; (40251c <SystemCoreClockUpdate+0x184>)
  4024e6:	681b      	ldr	r3, [r3, #0]
  4024e8:	4a11      	ldr	r2, [pc, #68]	; (402530 <SystemCoreClockUpdate+0x198>)
  4024ea:	fba2 2303 	umull	r2, r3, r2, r3
  4024ee:	085b      	lsrs	r3, r3, #1
  4024f0:	4a0a      	ldr	r2, [pc, #40]	; (40251c <SystemCoreClockUpdate+0x184>)
  4024f2:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4024f4:	e00a      	b.n	40250c <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4024f6:	4b07      	ldr	r3, [pc, #28]	; (402514 <SystemCoreClockUpdate+0x17c>)
  4024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024fe:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402500:	4a06      	ldr	r2, [pc, #24]	; (40251c <SystemCoreClockUpdate+0x184>)
  402502:	6812      	ldr	r2, [r2, #0]
  402504:	fa22 f303 	lsr.w	r3, r2, r3
  402508:	4a04      	ldr	r2, [pc, #16]	; (40251c <SystemCoreClockUpdate+0x184>)
  40250a:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  40250c:	bf00      	nop
  40250e:	46bd      	mov	sp, r7
  402510:	bc80      	pop	{r7}
  402512:	4770      	bx	lr
  402514:	400e0400 	.word	0x400e0400
  402518:	400e1410 	.word	0x400e1410
  40251c:	20000000 	.word	0x20000000
  402520:	00b71b00 	.word	0x00b71b00
  402524:	003d0900 	.word	0x003d0900
  402528:	007a1200 	.word	0x007a1200
  40252c:	07ff0000 	.word	0x07ff0000
  402530:	aaaaaaab 	.word	0xaaaaaaab

00402534 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402534:	b480      	push	{r7}
  402536:	b083      	sub	sp, #12
  402538:	af00      	add	r7, sp, #0
  40253a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40253c:	687b      	ldr	r3, [r7, #4]
  40253e:	4a18      	ldr	r2, [pc, #96]	; (4025a0 <system_init_flash+0x6c>)
  402540:	4293      	cmp	r3, r2
  402542:	d804      	bhi.n	40254e <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402544:	4b17      	ldr	r3, [pc, #92]	; (4025a4 <system_init_flash+0x70>)
  402546:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40254a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40254c:	e023      	b.n	402596 <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40254e:	687b      	ldr	r3, [r7, #4]
  402550:	4a15      	ldr	r2, [pc, #84]	; (4025a8 <system_init_flash+0x74>)
  402552:	4293      	cmp	r3, r2
  402554:	d803      	bhi.n	40255e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402556:	4b13      	ldr	r3, [pc, #76]	; (4025a4 <system_init_flash+0x70>)
  402558:	4a14      	ldr	r2, [pc, #80]	; (4025ac <system_init_flash+0x78>)
  40255a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40255c:	e01b      	b.n	402596 <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40255e:	687b      	ldr	r3, [r7, #4]
  402560:	4a13      	ldr	r2, [pc, #76]	; (4025b0 <system_init_flash+0x7c>)
  402562:	4293      	cmp	r3, r2
  402564:	d803      	bhi.n	40256e <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402566:	4b0f      	ldr	r3, [pc, #60]	; (4025a4 <system_init_flash+0x70>)
  402568:	4a12      	ldr	r2, [pc, #72]	; (4025b4 <system_init_flash+0x80>)
  40256a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40256c:	e013      	b.n	402596 <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40256e:	687b      	ldr	r3, [r7, #4]
  402570:	4a11      	ldr	r2, [pc, #68]	; (4025b8 <system_init_flash+0x84>)
  402572:	4293      	cmp	r3, r2
  402574:	d803      	bhi.n	40257e <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402576:	4b0b      	ldr	r3, [pc, #44]	; (4025a4 <system_init_flash+0x70>)
  402578:	4a10      	ldr	r2, [pc, #64]	; (4025bc <system_init_flash+0x88>)
  40257a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40257c:	e00b      	b.n	402596 <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40257e:	687b      	ldr	r3, [r7, #4]
  402580:	4a0f      	ldr	r2, [pc, #60]	; (4025c0 <system_init_flash+0x8c>)
  402582:	4293      	cmp	r3, r2
  402584:	d804      	bhi.n	402590 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402586:	4b07      	ldr	r3, [pc, #28]	; (4025a4 <system_init_flash+0x70>)
  402588:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40258c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40258e:	e002      	b.n	402596 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402590:	4b04      	ldr	r3, [pc, #16]	; (4025a4 <system_init_flash+0x70>)
  402592:	4a0c      	ldr	r2, [pc, #48]	; (4025c4 <system_init_flash+0x90>)
  402594:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402596:	bf00      	nop
  402598:	370c      	adds	r7, #12
  40259a:	46bd      	mov	sp, r7
  40259c:	bc80      	pop	{r7}
  40259e:	4770      	bx	lr
  4025a0:	01312cff 	.word	0x01312cff
  4025a4:	400e0a00 	.word	0x400e0a00
  4025a8:	026259ff 	.word	0x026259ff
  4025ac:	04000100 	.word	0x04000100
  4025b0:	039386ff 	.word	0x039386ff
  4025b4:	04000200 	.word	0x04000200
  4025b8:	04c4b3ff 	.word	0x04c4b3ff
  4025bc:	04000300 	.word	0x04000300
  4025c0:	05f5e0ff 	.word	0x05f5e0ff
  4025c4:	04000500 	.word	0x04000500

004025c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4025c8:	b480      	push	{r7}
  4025ca:	b085      	sub	sp, #20
  4025cc:	af00      	add	r7, sp, #0
  4025ce:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4025d0:	4b10      	ldr	r3, [pc, #64]	; (402614 <_sbrk+0x4c>)
  4025d2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4025d4:	4b10      	ldr	r3, [pc, #64]	; (402618 <_sbrk+0x50>)
  4025d6:	681b      	ldr	r3, [r3, #0]
  4025d8:	2b00      	cmp	r3, #0
  4025da:	d102      	bne.n	4025e2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4025dc:	4b0e      	ldr	r3, [pc, #56]	; (402618 <_sbrk+0x50>)
  4025de:	4a0f      	ldr	r2, [pc, #60]	; (40261c <_sbrk+0x54>)
  4025e0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4025e2:	4b0d      	ldr	r3, [pc, #52]	; (402618 <_sbrk+0x50>)
  4025e4:	681b      	ldr	r3, [r3, #0]
  4025e6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4025e8:	68ba      	ldr	r2, [r7, #8]
  4025ea:	687b      	ldr	r3, [r7, #4]
  4025ec:	441a      	add	r2, r3
  4025ee:	68fb      	ldr	r3, [r7, #12]
  4025f0:	429a      	cmp	r2, r3
  4025f2:	dd02      	ble.n	4025fa <_sbrk+0x32>
		return (caddr_t) -1;	
  4025f4:	f04f 33ff 	mov.w	r3, #4294967295
  4025f8:	e006      	b.n	402608 <_sbrk+0x40>
	}

	heap += incr;
  4025fa:	4b07      	ldr	r3, [pc, #28]	; (402618 <_sbrk+0x50>)
  4025fc:	681a      	ldr	r2, [r3, #0]
  4025fe:	687b      	ldr	r3, [r7, #4]
  402600:	4413      	add	r3, r2
  402602:	4a05      	ldr	r2, [pc, #20]	; (402618 <_sbrk+0x50>)
  402604:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402606:	68bb      	ldr	r3, [r7, #8]
}
  402608:	4618      	mov	r0, r3
  40260a:	3714      	adds	r7, #20
  40260c:	46bd      	mov	sp, r7
  40260e:	bc80      	pop	{r7}
  402610:	4770      	bx	lr
  402612:	bf00      	nop
  402614:	20027ffc 	.word	0x20027ffc
  402618:	20000abc 	.word	0x20000abc
  40261c:	20003d40 	.word	0x20003d40

00402620 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  402620:	b480      	push	{r7}
  402622:	b083      	sub	sp, #12
  402624:	af00      	add	r7, sp, #0
  402626:	6078      	str	r0, [r7, #4]
	return -1;
  402628:	f04f 33ff 	mov.w	r3, #4294967295
}
  40262c:	4618      	mov	r0, r3
  40262e:	370c      	adds	r7, #12
  402630:	46bd      	mov	sp, r7
  402632:	bc80      	pop	{r7}
  402634:	4770      	bx	lr
  402636:	bf00      	nop

00402638 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  402638:	b480      	push	{r7}
  40263a:	b083      	sub	sp, #12
  40263c:	af00      	add	r7, sp, #0
  40263e:	6078      	str	r0, [r7, #4]
  402640:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402642:	683b      	ldr	r3, [r7, #0]
  402644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402648:	605a      	str	r2, [r3, #4]

	return 0;
  40264a:	2300      	movs	r3, #0
}
  40264c:	4618      	mov	r0, r3
  40264e:	370c      	adds	r7, #12
  402650:	46bd      	mov	sp, r7
  402652:	bc80      	pop	{r7}
  402654:	4770      	bx	lr
  402656:	bf00      	nop

00402658 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
  402658:	b480      	push	{r7}
  40265a:	b085      	sub	sp, #20
  40265c:	af00      	add	r7, sp, #0
  40265e:	60f8      	str	r0, [r7, #12]
  402660:	60b9      	str	r1, [r7, #8]
  402662:	607a      	str	r2, [r7, #4]
	return 0;
  402664:	2300      	movs	r3, #0
}
  402666:	4618      	mov	r0, r3
  402668:	3714      	adds	r7, #20
  40266a:	46bd      	mov	sp, r7
  40266c:	bc80      	pop	{r7}
  40266e:	4770      	bx	lr

00402670 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  402670:	b480      	push	{r7}
  402672:	b083      	sub	sp, #12
  402674:	af00      	add	r7, sp, #0
  402676:	4603      	mov	r3, r0
  402678:	6039      	str	r1, [r7, #0]
  40267a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402680:	2b00      	cmp	r3, #0
  402682:	da0b      	bge.n	40269c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402684:	490d      	ldr	r1, [pc, #52]	; (4026bc <NVIC_SetPriority+0x4c>)
  402686:	79fb      	ldrb	r3, [r7, #7]
  402688:	f003 030f 	and.w	r3, r3, #15
  40268c:	3b04      	subs	r3, #4
  40268e:	683a      	ldr	r2, [r7, #0]
  402690:	b2d2      	uxtb	r2, r2
  402692:	0112      	lsls	r2, r2, #4
  402694:	b2d2      	uxtb	r2, r2
  402696:	440b      	add	r3, r1
  402698:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  40269a:	e009      	b.n	4026b0 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40269c:	4908      	ldr	r1, [pc, #32]	; (4026c0 <NVIC_SetPriority+0x50>)
  40269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4026a2:	683a      	ldr	r2, [r7, #0]
  4026a4:	b2d2      	uxtb	r2, r2
  4026a6:	0112      	lsls	r2, r2, #4
  4026a8:	b2d2      	uxtb	r2, r2
  4026aa:	440b      	add	r3, r1
  4026ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4026b0:	bf00      	nop
  4026b2:	370c      	adds	r7, #12
  4026b4:	46bd      	mov	sp, r7
  4026b6:	bc80      	pop	{r7}
  4026b8:	4770      	bx	lr
  4026ba:	bf00      	nop
  4026bc:	e000ed00 	.word	0xe000ed00
  4026c0:	e000e100 	.word	0xe000e100

004026c4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  4026c4:	b580      	push	{r7, lr}
  4026c6:	b082      	sub	sp, #8
  4026c8:	af00      	add	r7, sp, #0
  4026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  4026cc:	687b      	ldr	r3, [r7, #4]
  4026ce:	3b01      	subs	r3, #1
  4026d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4026d4:	d301      	bcc.n	4026da <SysTick_Config+0x16>
  4026d6:	2301      	movs	r3, #1
  4026d8:	e00f      	b.n	4026fa <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4026da:	4a0a      	ldr	r2, [pc, #40]	; (402704 <SysTick_Config+0x40>)
  4026dc:	687b      	ldr	r3, [r7, #4]
  4026de:	3b01      	subs	r3, #1
  4026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  4026e2:	210f      	movs	r1, #15
  4026e4:	f04f 30ff 	mov.w	r0, #4294967295
  4026e8:	4b07      	ldr	r3, [pc, #28]	; (402708 <SysTick_Config+0x44>)
  4026ea:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4026ec:	4b05      	ldr	r3, [pc, #20]	; (402704 <SysTick_Config+0x40>)
  4026ee:	2200      	movs	r2, #0
  4026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4026f2:	4b04      	ldr	r3, [pc, #16]	; (402704 <SysTick_Config+0x40>)
  4026f4:	2207      	movs	r2, #7
  4026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  4026f8:	2300      	movs	r3, #0
}
  4026fa:	4618      	mov	r0, r3
  4026fc:	3708      	adds	r7, #8
  4026fe:	46bd      	mov	sp, r7
  402700:	bd80      	pop	{r7, pc}
  402702:	bf00      	nop
  402704:	e000e010 	.word	0xe000e010
  402708:	00402671 	.word	0x00402671

0040270c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40270c:	b480      	push	{r7}
  40270e:	b083      	sub	sp, #12
  402710:	af00      	add	r7, sp, #0
  402712:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402714:	687b      	ldr	r3, [r7, #4]
  402716:	2b07      	cmp	r3, #7
  402718:	d825      	bhi.n	402766 <osc_get_rate+0x5a>
  40271a:	a201      	add	r2, pc, #4	; (adr r2, 402720 <osc_get_rate+0x14>)
  40271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402720:	00402741 	.word	0x00402741
  402724:	00402747 	.word	0x00402747
  402728:	0040274d 	.word	0x0040274d
  40272c:	00402753 	.word	0x00402753
  402730:	00402757 	.word	0x00402757
  402734:	0040275b 	.word	0x0040275b
  402738:	0040275f 	.word	0x0040275f
  40273c:	00402763 	.word	0x00402763
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402740:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402744:	e010      	b.n	402768 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  402746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40274a:	e00d      	b.n	402768 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40274c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402750:	e00a      	b.n	402768 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402752:	4b08      	ldr	r3, [pc, #32]	; (402774 <osc_get_rate+0x68>)
  402754:	e008      	b.n	402768 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  402756:	4b08      	ldr	r3, [pc, #32]	; (402778 <osc_get_rate+0x6c>)
  402758:	e006      	b.n	402768 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40275a:	4b08      	ldr	r3, [pc, #32]	; (40277c <osc_get_rate+0x70>)
  40275c:	e004      	b.n	402768 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40275e:	4b07      	ldr	r3, [pc, #28]	; (40277c <osc_get_rate+0x70>)
  402760:	e002      	b.n	402768 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402762:	4b06      	ldr	r3, [pc, #24]	; (40277c <osc_get_rate+0x70>)
  402764:	e000      	b.n	402768 <osc_get_rate+0x5c>
	}

	return 0;
  402766:	2300      	movs	r3, #0
}
  402768:	4618      	mov	r0, r3
  40276a:	370c      	adds	r7, #12
  40276c:	46bd      	mov	sp, r7
  40276e:	bc80      	pop	{r7}
  402770:	4770      	bx	lr
  402772:	bf00      	nop
  402774:	003d0900 	.word	0x003d0900
  402778:	007a1200 	.word	0x007a1200
  40277c:	00b71b00 	.word	0x00b71b00

00402780 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402780:	b580      	push	{r7, lr}
  402782:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  402784:	2006      	movs	r0, #6
  402786:	4b04      	ldr	r3, [pc, #16]	; (402798 <sysclk_get_main_hz+0x18>)
  402788:	4798      	blx	r3
  40278a:	4602      	mov	r2, r0
  40278c:	4613      	mov	r3, r2
  40278e:	009b      	lsls	r3, r3, #2
  402790:	4413      	add	r3, r2
  402792:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402794:	4618      	mov	r0, r3
  402796:	bd80      	pop	{r7, pc}
  402798:	0040270d 	.word	0x0040270d

0040279c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40279c:	b580      	push	{r7, lr}
  40279e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4027a0:	4b02      	ldr	r3, [pc, #8]	; (4027ac <sysclk_get_cpu_hz+0x10>)
  4027a2:	4798      	blx	r3
  4027a4:	4603      	mov	r3, r0
  4027a6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4027a8:	4618      	mov	r0, r3
  4027aa:	bd80      	pop	{r7, pc}
  4027ac:	00402781 	.word	0x00402781

004027b0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4027b0:	b580      	push	{r7, lr}
  4027b2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4027b4:	4b02      	ldr	r3, [pc, #8]	; (4027c0 <sysclk_get_peripheral_hz+0x10>)
  4027b6:	4798      	blx	r3
  4027b8:	4603      	mov	r3, r0
  4027ba:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4027bc:	4618      	mov	r0, r3
  4027be:	bd80      	pop	{r7, pc}
  4027c0:	00402781 	.word	0x00402781

004027c4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4027c4:	b580      	push	{r7, lr}
  4027c6:	b082      	sub	sp, #8
  4027c8:	af00      	add	r7, sp, #0
  4027ca:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4027cc:	6878      	ldr	r0, [r7, #4]
  4027ce:	4b03      	ldr	r3, [pc, #12]	; (4027dc <sysclk_enable_peripheral_clock+0x18>)
  4027d0:	4798      	blx	r3
}
  4027d2:	bf00      	nop
  4027d4:	3708      	adds	r7, #8
  4027d6:	46bd      	mov	sp, r7
  4027d8:	bd80      	pop	{r7, pc}
  4027da:	bf00      	nop
  4027dc:	004020ad 	.word	0x004020ad

004027e0 <main>:
#endif
uint32_t holdDur = DEFAULT_DURATION, delayParam = DEFAULT_DELAY; 
float resPVal = 0;

int main (void)
{
  4027e0:	b580      	push	{r7, lr}
  4027e2:	b084      	sub	sp, #16
  4027e4:	af00      	add	r7, sp, #0
	uint16_t temp = 0;
  4027e6:	2300      	movs	r3, #0
  4027e8:	817b      	strh	r3, [r7, #10]
	uint32_t tempCount = 0;
  4027ea:	2300      	movs	r3, #0
  4027ec:	607b      	str	r3, [r7, #4]
	float p1Val = 0, p2Val = 0;
  4027ee:	f04f 0300 	mov.w	r3, #0
  4027f2:	603b      	str	r3, [r7, #0]
  4027f4:	f04f 0300 	mov.w	r3, #0
  4027f8:	60fb      	str	r3, [r7, #12]
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  4027fa:	4b39      	ldr	r3, [pc, #228]	; (4028e0 <main+0x100>)
  4027fc:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  4027fe:	4b39      	ldr	r3, [pc, #228]	; (4028e4 <main+0x104>)
  402800:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	InitPeripherals();
  402802:	4b39      	ldr	r3, [pc, #228]	; (4028e8 <main+0x108>)
  402804:	4798      	blx	r3
// 	SetValveState(s1CloseS2Close);
// 	gpio_set_pin_low(PIN_AIR_PUMP_IDX);

	#ifndef ALGO_TEST_MODE_EN
		/* Initialize pressure in reservoir */
		SetValveState(s1CloseS2Close);
  402806:	2000      	movs	r0, #0
  402808:	4b38      	ldr	r3, [pc, #224]	; (4028ec <main+0x10c>)
  40280a:	4798      	blx	r3
		gpio_set_pin_high(PIN_AIR_PUMP_IDX);
  40280c:	2018      	movs	r0, #24
  40280e:	4b38      	ldr	r3, [pc, #224]	; (4028f0 <main+0x110>)
  402810:	4798      	blx	r3
		while(p2Val<=5.0f)
  402812:	e01f      	b.n	402854 <main+0x74>
		{
			ReadPressureSen(BOARD_TWI, ADDR_PSEN2, dispPkt);
  402814:	4a37      	ldr	r2, [pc, #220]	; (4028f4 <main+0x114>)
  402816:	2148      	movs	r1, #72	; 0x48
  402818:	4837      	ldr	r0, [pc, #220]	; (4028f8 <main+0x118>)
  40281a:	4b38      	ldr	r3, [pc, #224]	; (4028fc <main+0x11c>)
  40281c:	4798      	blx	r3
			temp = ((((uint16_t)dispPkt[0])<<8)| dispPkt[1]);
  40281e:	4b35      	ldr	r3, [pc, #212]	; (4028f4 <main+0x114>)
  402820:	781b      	ldrb	r3, [r3, #0]
  402822:	021b      	lsls	r3, r3, #8
  402824:	b21a      	sxth	r2, r3
  402826:	4b33      	ldr	r3, [pc, #204]	; (4028f4 <main+0x114>)
  402828:	785b      	ldrb	r3, [r3, #1]
  40282a:	b21b      	sxth	r3, r3
  40282c:	4313      	orrs	r3, r2
  40282e:	b21b      	sxth	r3, r3
  402830:	817b      	strh	r3, [r7, #10]
			p2Val = ((float)temp/16383.0f)*PSEN2_MAXP;
  402832:	897a      	ldrh	r2, [r7, #10]
  402834:	4b32      	ldr	r3, [pc, #200]	; (402900 <main+0x120>)
  402836:	4610      	mov	r0, r2
  402838:	4798      	blx	r3
  40283a:	4602      	mov	r2, r0
  40283c:	4b31      	ldr	r3, [pc, #196]	; (402904 <main+0x124>)
  40283e:	4932      	ldr	r1, [pc, #200]	; (402908 <main+0x128>)
  402840:	4610      	mov	r0, r2
  402842:	4798      	blx	r3
  402844:	4603      	mov	r3, r0
  402846:	461a      	mov	r2, r3
  402848:	4b30      	ldr	r3, [pc, #192]	; (40290c <main+0x12c>)
  40284a:	4931      	ldr	r1, [pc, #196]	; (402910 <main+0x130>)
  40284c:	4610      	mov	r0, r2
  40284e:	4798      	blx	r3
  402850:	4603      	mov	r3, r0
  402852:	60fb      	str	r3, [r7, #12]

	#ifndef ALGO_TEST_MODE_EN
		/* Initialize pressure in reservoir */
		SetValveState(s1CloseS2Close);
		gpio_set_pin_high(PIN_AIR_PUMP_IDX);
		while(p2Val<=5.0f)
  402854:	4b2f      	ldr	r3, [pc, #188]	; (402914 <main+0x134>)
  402856:	4930      	ldr	r1, [pc, #192]	; (402918 <main+0x138>)
  402858:	68f8      	ldr	r0, [r7, #12]
  40285a:	4798      	blx	r3
  40285c:	4603      	mov	r3, r0
  40285e:	2b00      	cmp	r3, #0
  402860:	d1d8      	bne.n	402814 <main+0x34>
			p2Val = ((float)temp/16383.0f)*PSEN2_MAXP;
		}
	#endif

	/* Init. variables */
	memset(&sen1Data, 0, sizeof(struct senData));
  402862:	2269      	movs	r2, #105	; 0x69
  402864:	2100      	movs	r1, #0
  402866:	482d      	ldr	r0, [pc, #180]	; (40291c <main+0x13c>)
  402868:	4b2d      	ldr	r3, [pc, #180]	; (402920 <main+0x140>)
  40286a:	4798      	blx	r3
	memset(&sen2Data, 0, sizeof(struct senData));
  40286c:	2269      	movs	r2, #105	; 0x69
  40286e:	2100      	movs	r1, #0
  402870:	482c      	ldr	r0, [pc, #176]	; (402924 <main+0x144>)
  402872:	4b2b      	ldr	r3, [pc, #172]	; (402920 <main+0x140>)
  402874:	4798      	blx	r3
	memset(&trigBuff, 0, sizeof(struct cBuff_t));
  402876:	2266      	movs	r2, #102	; 0x66
  402878:	2100      	movs	r1, #0
  40287a:	482b      	ldr	r0, [pc, #172]	; (402928 <main+0x148>)
  40287c:	4b28      	ldr	r3, [pc, #160]	; (402920 <main+0x140>)
  40287e:	4798      	blx	r3
	sen1State.state = q0;
  402880:	4b2a      	ldr	r3, [pc, #168]	; (40292c <main+0x14c>)
  402882:	2200      	movs	r2, #0
  402884:	701a      	strb	r2, [r3, #0]
	sen1State.sum = 0;
  402886:	4b29      	ldr	r3, [pc, #164]	; (40292c <main+0x14c>)
  402888:	2200      	movs	r2, #0
  40288a:	705a      	strb	r2, [r3, #1]
	sen1State.ctr = 0;
  40288c:	4b27      	ldr	r3, [pc, #156]	; (40292c <main+0x14c>)
  40288e:	2200      	movs	r2, #0
  402890:	709a      	strb	r2, [r3, #2]
	sen2State.state = q0;
  402892:	4b27      	ldr	r3, [pc, #156]	; (402930 <main+0x150>)
  402894:	2200      	movs	r2, #0
  402896:	701a      	strb	r2, [r3, #0]
	sen2State.sum = 0;
  402898:	4b25      	ldr	r3, [pc, #148]	; (402930 <main+0x150>)
  40289a:	2200      	movs	r2, #0
  40289c:	705a      	strb	r2, [r3, #1]
	sen2State.ctr = 0;
  40289e:	4b24      	ldr	r3, [pc, #144]	; (402930 <main+0x150>)
  4028a0:	2200      	movs	r2, #0
  4028a2:	709a      	strb	r2, [r3, #2]
	{
		/* Toggle LED GPIO */
		//gpio_toggle_pin(PIO_PC23_IDX);

		/* Manage reservoir pressure */
		ManageResP();
  4028a4:	4b23      	ldr	r3, [pc, #140]	; (402934 <main+0x154>)
  4028a6:	4798      	blx	r3
		
		/* Emergency switch action already defined in ISR */
		
		/* Call frequently to update next pointer in PDC */
		SenPdcManageBuff();
  4028a8:	4b23      	ldr	r3, [pc, #140]	; (402938 <main+0x158>)
  4028aa:	4798      	blx	r3

		/* Poll switches */
		PollSwitches();
  4028ac:	4b23      	ldr	r3, [pc, #140]	; (40293c <main+0x15c>)
  4028ae:	4798      	blx	r3

		/* Collect sensor 1 data and run trigger calculation */
		if(SenGetRxBytes(1)>5)
  4028b0:	2001      	movs	r0, #1
  4028b2:	4b23      	ldr	r3, [pc, #140]	; (402940 <main+0x160>)
  4028b4:	4798      	blx	r3
  4028b6:	4603      	mov	r3, r0
  4028b8:	2b05      	cmp	r3, #5
  4028ba:	d902      	bls.n	4028c2 <main+0xe2>
		{
			SenProcessData(1);
  4028bc:	2001      	movs	r0, #1
  4028be:	4b21      	ldr	r3, [pc, #132]	; (402944 <main+0x164>)
  4028c0:	4798      	blx	r3
		}

		/* Collect sensor 2 data */
		if(SenGetRxBytes(2)>5)
  4028c2:	2002      	movs	r0, #2
  4028c4:	4b1e      	ldr	r3, [pc, #120]	; (402940 <main+0x160>)
  4028c6:	4798      	blx	r3
  4028c8:	4603      	mov	r3, r0
  4028ca:	2b05      	cmp	r3, #5
  4028cc:	d902      	bls.n	4028d4 <main+0xf4>
		{
			SenProcessData(2);
  4028ce:	2002      	movs	r0, #2
  4028d0:	4b1c      	ldr	r3, [pc, #112]	; (402944 <main+0x164>)
  4028d2:	4798      	blx	r3
		}

		/* Activate valves */
		ActivateValves();
  4028d4:	4b1c      	ldr	r3, [pc, #112]	; (402948 <main+0x168>)
  4028d6:	4798      	blx	r3

		/* Send data collected from sensors to display */
		SendDispData();
  4028d8:	4b1c      	ldr	r3, [pc, #112]	; (40294c <main+0x16c>)
  4028da:	4798      	blx	r3

		/* Clear WDT */
	}
  4028dc:	e7e2      	b.n	4028a4 <main+0xc4>
  4028de:	bf00      	nop
  4028e0:	0040165d 	.word	0x0040165d
  4028e4:	00402191 	.word	0x00402191
  4028e8:	004029c1 	.word	0x004029c1
  4028ec:	0040319d 	.word	0x0040319d
  4028f0:	00401b01 	.word	0x00401b01
  4028f4:	20000c1c 	.word	0x20000c1c
  4028f8:	40018000 	.word	0x40018000
  4028fc:	00400169 	.word	0x00400169
  402900:	004034fd 	.word	0x004034fd
  402904:	00403715 	.word	0x00403715
  402908:	467ffc00 	.word	0x467ffc00
  40290c:	004035ad 	.word	0x004035ad
  402910:	41f00000 	.word	0x41f00000
  402914:	004038fd 	.word	0x004038fd
  402918:	40a00000 	.word	0x40a00000
  40291c:	20000bb0 	.word	0x20000bb0
  402920:	00403989 	.word	0x00403989
  402924:	20000b44 	.word	0x20000b44
  402928:	20000cb4 	.word	0x20000cb4
  40292c:	20000d2c 	.word	0x20000d2c
  402930:	20000d24 	.word	0x20000d24
  402934:	00403291 	.word	0x00403291
  402938:	00400651 	.word	0x00400651
  40293c:	0040334d 	.word	0x0040334d
  402940:	00400721 	.word	0x00400721
  402944:	00402af5 	.word	0x00402af5
  402948:	00402f95 	.word	0x00402f95
  40294c:	0040320d 	.word	0x0040320d

00402950 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  402950:	b480      	push	{r7}
  402952:	af00      	add	r7, sp, #0
	tickCount++;
  402954:	4b09      	ldr	r3, [pc, #36]	; (40297c <SysTick_Handler+0x2c>)
  402956:	681b      	ldr	r3, [r3, #0]
  402958:	3301      	adds	r3, #1
  40295a:	4a08      	ldr	r2, [pc, #32]	; (40297c <SysTick_Handler+0x2c>)
  40295c:	6013      	str	r3, [r2, #0]
	cycleTime++;
  40295e:	4b08      	ldr	r3, [pc, #32]	; (402980 <SysTick_Handler+0x30>)
  402960:	681b      	ldr	r3, [r3, #0]
  402962:	3301      	adds	r3, #1
  402964:	4a06      	ldr	r2, [pc, #24]	; (402980 <SysTick_Handler+0x30>)
  402966:	6013      	str	r3, [r2, #0]
	#if defined(CYCLE_AVG_DISP_EN)
		dispTick++;
  402968:	4b06      	ldr	r3, [pc, #24]	; (402984 <SysTick_Handler+0x34>)
  40296a:	681b      	ldr	r3, [r3, #0]
  40296c:	3301      	adds	r3, #1
  40296e:	4a05      	ldr	r2, [pc, #20]	; (402984 <SysTick_Handler+0x34>)
  402970:	6013      	str	r3, [r2, #0]
	#endif
}
  402972:	bf00      	nop
  402974:	46bd      	mov	sp, r7
  402976:	bc80      	pop	{r7}
  402978:	4770      	bx	lr
  40297a:	bf00      	nop
  40297c:	20000ae0 	.word	0x20000ae0
  402980:	20000ad4 	.word	0x20000ad4
  402984:	20000ad8 	.word	0x20000ad8

00402988 <SosIntHandler>:
 *  Open all valves and turn off the compressor.
 *  Hang up in infinite loop until next reset.
 */

void SosIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
  402988:	b580      	push	{r7, lr}
  40298a:	b082      	sub	sp, #8
  40298c:	af00      	add	r7, sp, #0
  40298e:	6078      	str	r0, [r7, #4]
  402990:	6039      	str	r1, [r7, #0]
	if (PIN_SW_SOS_PIO_ID != ul_id || PIN_SW_SOS_MASK != ul_mask)
  402992:	687b      	ldr	r3, [r7, #4]
  402994:	2b0b      	cmp	r3, #11
  402996:	d10a      	bne.n	4029ae <SosIntHandler+0x26>
  402998:	683b      	ldr	r3, [r7, #0]
  40299a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  40299e:	d106      	bne.n	4029ae <SosIntHandler+0x26>
		return;

	SetValveState(s1OpenS2Open);
  4029a0:	2003      	movs	r0, #3
  4029a2:	4b05      	ldr	r3, [pc, #20]	; (4029b8 <SosIntHandler+0x30>)
  4029a4:	4798      	blx	r3
	gpio_set_pin_low(PIN_AIR_PUMP_IDX);
  4029a6:	2018      	movs	r0, #24
  4029a8:	4b04      	ldr	r3, [pc, #16]	; (4029bc <SosIntHandler+0x34>)
  4029aa:	4798      	blx	r3

	while(1);
  4029ac:	e7fe      	b.n	4029ac <SosIntHandler+0x24>
 */

void SosIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
	if (PIN_SW_SOS_PIO_ID != ul_id || PIN_SW_SOS_MASK != ul_mask)
		return;
  4029ae:	bf00      	nop

	SetValveState(s1OpenS2Open);
	gpio_set_pin_low(PIN_AIR_PUMP_IDX);

	while(1);
}
  4029b0:	3708      	adds	r7, #8
  4029b2:	46bd      	mov	sp, r7
  4029b4:	bd80      	pop	{r7, pc}
  4029b6:	bf00      	nop
  4029b8:	0040319d 	.word	0x0040319d
  4029bc:	00401b31 	.word	0x00401b31

004029c0 <InitPeripherals>:

void InitPeripherals(void)
{
  4029c0:	b580      	push	{r7, lr}
  4029c2:	af00      	add	r7, sp, #0

	/* Initialize Display UART */
	InitDispUart();
  4029c4:	4b04      	ldr	r3, [pc, #16]	; (4029d8 <InitPeripherals+0x18>)
  4029c6:	4798      	blx	r3

	/* Initialize sensor USARTs */
	SenInitUsart();
  4029c8:	4b04      	ldr	r3, [pc, #16]	; (4029dc <InitPeripherals+0x1c>)
  4029ca:	4798      	blx	r3

	/* Init TWI */
	InitTWI();
  4029cc:	4b04      	ldr	r3, [pc, #16]	; (4029e0 <InitPeripherals+0x20>)
  4029ce:	4798      	blx	r3

	/* Initialize Systick timer to generate interrupts every 10 ms */
	InitSystick();
  4029d0:	4b04      	ldr	r3, [pc, #16]	; (4029e4 <InitPeripherals+0x24>)
  4029d2:	4798      	blx	r3

	/* Enable WDT */

}
  4029d4:	bf00      	nop
  4029d6:	bd80      	pop	{r7, pc}
  4029d8:	00402a71 	.word	0x00402a71
  4029dc:	00400521 	.word	0x00400521
  4029e0:	004029e9 	.word	0x004029e9
  4029e4:	00402a39 	.word	0x00402a39

004029e8 <InitTWI>:

void InitTWI(void)
{
  4029e8:	b580      	push	{r7, lr}
  4029ea:	b084      	sub	sp, #16
  4029ec:	af00      	add	r7, sp, #0
	twi_options_t twiSettings = {
		sysclk_get_peripheral_hz(),
  4029ee:	4b0c      	ldr	r3, [pc, #48]	; (402a20 <InitTWI+0x38>)
  4029f0:	4798      	blx	r3
  4029f2:	4603      	mov	r3, r0

}

void InitTWI(void)
{
	twi_options_t twiSettings = {
  4029f4:	607b      	str	r3, [r7, #4]
  4029f6:	4b0b      	ldr	r3, [pc, #44]	; (402a24 <InitTWI+0x3c>)
  4029f8:	60bb      	str	r3, [r7, #8]
  4029fa:	2300      	movs	r3, #0
  4029fc:	733b      	strb	r3, [r7, #12]
  4029fe:	2300      	movs	r3, #0
  402a00:	737b      	strb	r3, [r7, #13]
		100000,
		0,
		0
	};
	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_TWI_ID);
  402a02:	2013      	movs	r0, #19
  402a04:	4b08      	ldr	r3, [pc, #32]	; (402a28 <InitTWI+0x40>)
  402a06:	4798      	blx	r3

	/* Enable TWI master mode */
	twi_enable_master_mode(BOARD_TWI);
  402a08:	4808      	ldr	r0, [pc, #32]	; (402a2c <InitTWI+0x44>)
  402a0a:	4b09      	ldr	r3, [pc, #36]	; (402a30 <InitTWI+0x48>)
  402a0c:	4798      	blx	r3

	/* Initialize TWI peripheral */
	twi_master_init(BOARD_TWI, &twiSettings);
  402a0e:	1d3b      	adds	r3, r7, #4
  402a10:	4619      	mov	r1, r3
  402a12:	4806      	ldr	r0, [pc, #24]	; (402a2c <InitTWI+0x44>)
  402a14:	4b07      	ldr	r3, [pc, #28]	; (402a34 <InitTWI+0x4c>)
  402a16:	4798      	blx	r3
}
  402a18:	bf00      	nop
  402a1a:	3710      	adds	r7, #16
  402a1c:	46bd      	mov	sp, r7
  402a1e:	bd80      	pop	{r7, pc}
  402a20:	004027b1 	.word	0x004027b1
  402a24:	000186a0 	.word	0x000186a0
  402a28:	004027c5 	.word	0x004027c5
  402a2c:	40018000 	.word	0x40018000
  402a30:	00400c15 	.word	0x00400c15
  402a34:	00400c39 	.word	0x00400c39

00402a38 <InitSystick>:
/**
 *  Configure system tick to generate an interrupt every 10 ms.
 */

void InitSystick(void)
{
  402a38:	b580      	push	{r7, lr}
  402a3a:	b082      	sub	sp, #8
  402a3c:	af00      	add	r7, sp, #0
	uint32_t ul_flag;
	ul_flag = SysTick_Config(sysclk_get_cpu_hz() / SYS_TICK_FREQ);
  402a3e:	4b09      	ldr	r3, [pc, #36]	; (402a64 <InitSystick+0x2c>)
  402a40:	4798      	blx	r3
  402a42:	4602      	mov	r2, r0
  402a44:	4b08      	ldr	r3, [pc, #32]	; (402a68 <InitSystick+0x30>)
  402a46:	fba3 2302 	umull	r2, r3, r3, r2
  402a4a:	099b      	lsrs	r3, r3, #6
  402a4c:	4618      	mov	r0, r3
  402a4e:	4b07      	ldr	r3, [pc, #28]	; (402a6c <InitSystick+0x34>)
  402a50:	4798      	blx	r3
  402a52:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  402a54:	687b      	ldr	r3, [r7, #4]
  402a56:	2b00      	cmp	r3, #0
  402a58:	d000      	beq.n	402a5c <InitSystick+0x24>
		/* Systick configuration error */
		while (1) {
		}
  402a5a:	e7fe      	b.n	402a5a <InitSystick+0x22>
	}
}
  402a5c:	bf00      	nop
  402a5e:	3708      	adds	r7, #8
  402a60:	46bd      	mov	sp, r7
  402a62:	bd80      	pop	{r7, pc}
  402a64:	0040279d 	.word	0x0040279d
  402a68:	10624dd3 	.word	0x10624dd3
  402a6c:	004026c5 	.word	0x004026c5

00402a70 <InitDispUart>:

/**
 *  Configure display UART for output.
 */
void InitDispUart(void)
{
  402a70:	b5b0      	push	{r4, r5, r7, lr}
  402a72:	b086      	sub	sp, #24
  402a74:	af00      	add	r7, sp, #0
		uart_disable_rx(DISP_UART);

		dispUartPdcBase = uart_get_pdc_base(DISP_UART);
		pdc_enable_transfer(dispUartPdcBase, PERIPH_PTCR_TXTEN);
	#elif defined(BOARD_NIRA91)
		const sam_usart_opt_t usart_console_settings = {
  402a76:	4b15      	ldr	r3, [pc, #84]	; (402acc <InitDispUart+0x5c>)
  402a78:	463c      	mov	r4, r7
  402a7a:	461d      	mov	r5, r3
  402a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402a80:	e895 0003 	ldmia.w	r5, {r0, r1}
  402a84:	e884 0003 	stmia.w	r4, {r0, r1}
			/* This field is only used in IrDA mode. */
			0
		};

		/* Enable the peripheral clock in the PMC. */
		sysclk_enable_peripheral_clock(DISP_USART_ID);
  402a88:	200f      	movs	r0, #15
  402a8a:	4b11      	ldr	r3, [pc, #68]	; (402ad0 <InitDispUart+0x60>)
  402a8c:	4798      	blx	r3

		/* Configure USART in RS485 mode. */
		usart_init_rs232(DISP_USART, &usart_console_settings,
  402a8e:	4b11      	ldr	r3, [pc, #68]	; (402ad4 <InitDispUart+0x64>)
  402a90:	4798      	blx	r3
  402a92:	4602      	mov	r2, r0
  402a94:	463b      	mov	r3, r7
  402a96:	4619      	mov	r1, r3
  402a98:	480f      	ldr	r0, [pc, #60]	; (402ad8 <InitDispUart+0x68>)
  402a9a:	4b10      	ldr	r3, [pc, #64]	; (402adc <InitDispUart+0x6c>)
  402a9c:	4798      	blx	r3
		sysclk_get_peripheral_hz());

		/* Enable TX function. */
		usart_disable_rx(DISP_USART);
  402a9e:	480e      	ldr	r0, [pc, #56]	; (402ad8 <InitDispUart+0x68>)
  402aa0:	4b0f      	ldr	r3, [pc, #60]	; (402ae0 <InitDispUart+0x70>)
  402aa2:	4798      	blx	r3
		usart_enable_tx(DISP_USART);
  402aa4:	480c      	ldr	r0, [pc, #48]	; (402ad8 <InitDispUart+0x68>)
  402aa6:	4b0f      	ldr	r3, [pc, #60]	; (402ae4 <InitDispUart+0x74>)
  402aa8:	4798      	blx	r3

		/* Get board USART PDC base address and enable receiver and transmitter. */
		dispUartPdcBase = usart_get_pdc_base(DISP_USART);
  402aaa:	480b      	ldr	r0, [pc, #44]	; (402ad8 <InitDispUart+0x68>)
  402aac:	4b0e      	ldr	r3, [pc, #56]	; (402ae8 <InitDispUart+0x78>)
  402aae:	4798      	blx	r3
  402ab0:	4602      	mov	r2, r0
  402ab2:	4b0e      	ldr	r3, [pc, #56]	; (402aec <InitDispUart+0x7c>)
  402ab4:	601a      	str	r2, [r3, #0]
		pdc_enable_transfer(dispUartPdcBase, PERIPH_PTCR_TXTEN);
  402ab6:	4b0d      	ldr	r3, [pc, #52]	; (402aec <InitDispUart+0x7c>)
  402ab8:	681b      	ldr	r3, [r3, #0]
  402aba:	f44f 7180 	mov.w	r1, #256	; 0x100
  402abe:	4618      	mov	r0, r3
  402ac0:	4b0b      	ldr	r3, [pc, #44]	; (402af0 <InitDispUart+0x80>)
  402ac2:	4798      	blx	r3

	#endif

}
  402ac4:	bf00      	nop
  402ac6:	3718      	adds	r7, #24
  402ac8:	46bd      	mov	sp, r7
  402aca:	bdb0      	pop	{r4, r5, r7, pc}
  402acc:	00408b64 	.word	0x00408b64
  402ad0:	004027c5 	.word	0x004027c5
  402ad4:	004027b1 	.word	0x004027b1
  402ad8:	40028000 	.word	0x40028000
  402adc:	00401129 	.word	0x00401129
  402ae0:	0040120d 	.word	0x0040120d
  402ae4:	004011ad 	.word	0x004011ad
  402ae8:	0040130d 	.word	0x0040130d
  402aec:	20000d34 	.word	0x20000d34
  402af0:	00401755 	.word	0x00401755

00402af4 <SenProcessData>:

void SenProcessData(uint8_t senNo)
{
  402af4:	b580      	push	{r7, lr}
  402af6:	b084      	sub	sp, #16
  402af8:	af00      	add	r7, sp, #0
  402afa:	4603      	mov	r3, r0
  402afc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	/* Process only 1 frame at a time i.e. 5B */
	for ( i = 0; i < 5; i++)
  402afe:	2300      	movs	r3, #0
  402b00:	73fb      	strb	r3, [r7, #15]
  402b02:	e014      	b.n	402b2e <SenProcessData+0x3a>
	{
		if(SenGetRxBytes(senNo))
  402b04:	79fb      	ldrb	r3, [r7, #7]
  402b06:	4618      	mov	r0, r3
  402b08:	4b0c      	ldr	r3, [pc, #48]	; (402b3c <SenProcessData+0x48>)
  402b0a:	4798      	blx	r3
  402b0c:	4603      	mov	r3, r0
  402b0e:	2b00      	cmp	r3, #0
  402b10:	d00a      	beq.n	402b28 <SenProcessData+0x34>
		{
			SenParseFrame(senNo, SenGetByte(senNo));
  402b12:	79fb      	ldrb	r3, [r7, #7]
  402b14:	4618      	mov	r0, r3
  402b16:	4b0a      	ldr	r3, [pc, #40]	; (402b40 <SenProcessData+0x4c>)
  402b18:	4798      	blx	r3
  402b1a:	4603      	mov	r3, r0
  402b1c:	461a      	mov	r2, r3
  402b1e:	79fb      	ldrb	r3, [r7, #7]
  402b20:	4611      	mov	r1, r2
  402b22:	4618      	mov	r0, r3
  402b24:	4b07      	ldr	r3, [pc, #28]	; (402b44 <SenProcessData+0x50>)
  402b26:	4798      	blx	r3

void SenProcessData(uint8_t senNo)
{
	uint8_t i;
	/* Process only 1 frame at a time i.e. 5B */
	for ( i = 0; i < 5; i++)
  402b28:	7bfb      	ldrb	r3, [r7, #15]
  402b2a:	3301      	adds	r3, #1
  402b2c:	73fb      	strb	r3, [r7, #15]
  402b2e:	7bfb      	ldrb	r3, [r7, #15]
  402b30:	2b04      	cmp	r3, #4
  402b32:	d9e7      	bls.n	402b04 <SenProcessData+0x10>
		if(SenGetRxBytes(senNo))
		{
			SenParseFrame(senNo, SenGetByte(senNo));
		}
	}
}
  402b34:	bf00      	nop
  402b36:	3710      	adds	r7, #16
  402b38:	46bd      	mov	sp, r7
  402b3a:	bd80      	pop	{r7, pc}
  402b3c:	00400721 	.word	0x00400721
  402b40:	004007cd 	.word	0x004007cd
  402b44:	00402b49 	.word	0x00402b49

00402b48 <SenParseFrame>:

void SenParseFrame(uint8_t senNo, uint8_t data)
{
  402b48:	b580      	push	{r7, lr}
  402b4a:	b082      	sub	sp, #8
  402b4c:	af00      	add	r7, sp, #0
  402b4e:	4603      	mov	r3, r0
  402b50:	460a      	mov	r2, r1
  402b52:	71fb      	strb	r3, [r7, #7]
  402b54:	4613      	mov	r3, r2
  402b56:	71bb      	strb	r3, [r7, #6]
	if(senNo == 1)
  402b58:	79fb      	ldrb	r3, [r7, #7]
  402b5a:	2b01      	cmp	r3, #1
  402b5c:	f040 80d4 	bne.w	402d08 <SenParseFrame+0x1c0>
	{
		switch(sen1State.state)
  402b60:	4ba3      	ldr	r3, [pc, #652]	; (402df0 <SenParseFrame+0x2a8>)
  402b62:	781b      	ldrb	r3, [r3, #0]
  402b64:	2b05      	cmp	r3, #5
  402b66:	f200 818e 	bhi.w	402e86 <SenParseFrame+0x33e>
  402b6a:	a201      	add	r2, pc, #4	; (adr r2, 402b70 <SenParseFrame+0x28>)
  402b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402b70:	00402b89 	.word	0x00402b89
  402b74:	00402b9f 	.word	0x00402b9f
  402b78:	00402bcf 	.word	0x00402bcf
  402b7c:	00402bf1 	.word	0x00402bf1
  402b80:	00402c1b 	.word	0x00402c1b
  402b84:	00402c7b 	.word	0x00402c7b
		{
			case q0:
				if(data==0x01)
  402b88:	79bb      	ldrb	r3, [r7, #6]
  402b8a:	2b01      	cmp	r3, #1
  402b8c:	f040 8174 	bne.w	402e78 <SenParseFrame+0x330>
				{
					sen1State.state = q1;
  402b90:	4b97      	ldr	r3, [pc, #604]	; (402df0 <SenParseFrame+0x2a8>)
  402b92:	2201      	movs	r2, #1
  402b94:	701a      	strb	r2, [r3, #0]
					sen1State.sum = 0x01;
  402b96:	4b96      	ldr	r3, [pc, #600]	; (402df0 <SenParseFrame+0x2a8>)
  402b98:	2201      	movs	r2, #1
  402b9a:	705a      	strb	r2, [r3, #1]
				}
				break;
  402b9c:	e16c      	b.n	402e78 <SenParseFrame+0x330>
			case q1:
				if((data>127)&&BIT_IS_SET(data,0))
  402b9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
  402ba2:	2b00      	cmp	r3, #0
  402ba4:	da0f      	bge.n	402bc6 <SenParseFrame+0x7e>
  402ba6:	79bb      	ldrb	r3, [r7, #6]
  402ba8:	f003 0301 	and.w	r3, r3, #1
  402bac:	2b00      	cmp	r3, #0
  402bae:	d00a      	beq.n	402bc6 <SenParseFrame+0x7e>
				{
					sen1State.state = q2;
  402bb0:	4b8f      	ldr	r3, [pc, #572]	; (402df0 <SenParseFrame+0x2a8>)
  402bb2:	2202      	movs	r2, #2
  402bb4:	701a      	strb	r2, [r3, #0]
					sen1State.sum += data;
  402bb6:	4b8e      	ldr	r3, [pc, #568]	; (402df0 <SenParseFrame+0x2a8>)
  402bb8:	785a      	ldrb	r2, [r3, #1]
  402bba:	79bb      	ldrb	r3, [r7, #6]
  402bbc:	4413      	add	r3, r2
  402bbe:	b2da      	uxtb	r2, r3
  402bc0:	4b8b      	ldr	r3, [pc, #556]	; (402df0 <SenParseFrame+0x2a8>)
  402bc2:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen1State.state = q0;
				}
				break;
  402bc4:	e15f      	b.n	402e86 <SenParseFrame+0x33e>
					sen1State.state = q2;
					sen1State.sum += data;
				}
				else
				{
					sen1State.state = q0;
  402bc6:	4b8a      	ldr	r3, [pc, #552]	; (402df0 <SenParseFrame+0x2a8>)
  402bc8:	2200      	movs	r2, #0
  402bca:	701a      	strb	r2, [r3, #0]
				}
				break;
  402bcc:	e15b      	b.n	402e86 <SenParseFrame+0x33e>
			case q2:
				//Pleath Reading
				sen1State.tempPleath = data;
  402bce:	4a88      	ldr	r2, [pc, #544]	; (402df0 <SenParseFrame+0x2a8>)
  402bd0:	79bb      	ldrb	r3, [r7, #6]
  402bd2:	7113      	strb	r3, [r2, #4]
				sen1State.state = q3;
  402bd4:	4b86      	ldr	r3, [pc, #536]	; (402df0 <SenParseFrame+0x2a8>)
  402bd6:	2203      	movs	r2, #3
  402bd8:	701a      	strb	r2, [r3, #0]
				sen1State.sum += data;
  402bda:	4b85      	ldr	r3, [pc, #532]	; (402df0 <SenParseFrame+0x2a8>)
  402bdc:	785a      	ldrb	r2, [r3, #1]
  402bde:	79bb      	ldrb	r3, [r7, #6]
  402be0:	4413      	add	r3, r2
  402be2:	b2da      	uxtb	r2, r3
  402be4:	4b82      	ldr	r3, [pc, #520]	; (402df0 <SenParseFrame+0x2a8>)
  402be6:	705a      	strb	r2, [r3, #1]
				sen1State.pIndex = 3;
  402be8:	4b81      	ldr	r3, [pc, #516]	; (402df0 <SenParseFrame+0x2a8>)
  402bea:	2203      	movs	r2, #3
  402bec:	70da      	strb	r2, [r3, #3]
				break;
  402bee:	e14a      	b.n	402e86 <SenParseFrame+0x33e>
			case q3:
				if(data<127)
  402bf0:	79bb      	ldrb	r3, [r7, #6]
  402bf2:	2b7e      	cmp	r3, #126	; 0x7e
  402bf4:	d80d      	bhi.n	402c12 <SenParseFrame+0xca>
				{
					//HRMSB
					//hrtRate = ((uint16_t)(data&0x03))<<8;
					sen1Data.hrMsb = data;
  402bf6:	4a7f      	ldr	r2, [pc, #508]	; (402df4 <SenParseFrame+0x2ac>)
  402bf8:	79bb      	ldrb	r3, [r7, #6]
  402bfa:	7013      	strb	r3, [r2, #0]
					sen1State.state = q4;
  402bfc:	4b7c      	ldr	r3, [pc, #496]	; (402df0 <SenParseFrame+0x2a8>)
  402bfe:	2204      	movs	r2, #4
  402c00:	701a      	strb	r2, [r3, #0]
					sen1State.sum += data;
  402c02:	4b7b      	ldr	r3, [pc, #492]	; (402df0 <SenParseFrame+0x2a8>)
  402c04:	785a      	ldrb	r2, [r3, #1]
  402c06:	79bb      	ldrb	r3, [r7, #6]
  402c08:	4413      	add	r3, r2
  402c0a:	b2da      	uxtb	r2, r3
  402c0c:	4b78      	ldr	r3, [pc, #480]	; (402df0 <SenParseFrame+0x2a8>)
  402c0e:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen1State.state = q0;
				}
				break;
  402c10:	e139      	b.n	402e86 <SenParseFrame+0x33e>
					sen1State.state = q4;
					sen1State.sum += data;
				}
				else
				{
					sen1State.state = q0;
  402c12:	4b77      	ldr	r3, [pc, #476]	; (402df0 <SenParseFrame+0x2a8>)
  402c14:	2200      	movs	r2, #0
  402c16:	701a      	strb	r2, [r3, #0]
				}
				break;
  402c18:	e135      	b.n	402e86 <SenParseFrame+0x33e>
			case q4:
				/* If Checksum matched */
				if(data==sen1State.sum)
  402c1a:	4b75      	ldr	r3, [pc, #468]	; (402df0 <SenParseFrame+0x2a8>)
  402c1c:	785b      	ldrb	r3, [r3, #1]
  402c1e:	79ba      	ldrb	r2, [r7, #6]
  402c20:	429a      	cmp	r2, r3
  402c22:	d126      	bne.n	402c72 <SenParseFrame+0x12a>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen1Data.pleathBuff, sen1State.tempPleath);
  402c24:	4b72      	ldr	r3, [pc, #456]	; (402df0 <SenParseFrame+0x2a8>)
  402c26:	791b      	ldrb	r3, [r3, #4]
  402c28:	4619      	mov	r1, r3
  402c2a:	4873      	ldr	r0, [pc, #460]	; (402df8 <SenParseFrame+0x2b0>)
  402c2c:	4b73      	ldr	r3, [pc, #460]	; (402dfc <SenParseFrame+0x2b4>)
  402c2e:	4798      	blx	r3
					//CBuffWriteByte(&trigBuff, tempPleath);

					if ((!trigFound) && (GetTrigger(sen1State.tempPleath)))
  402c30:	4b73      	ldr	r3, [pc, #460]	; (402e00 <SenParseFrame+0x2b8>)
  402c32:	781b      	ldrb	r3, [r3, #0]
  402c34:	2b00      	cmp	r3, #0
  402c36:	d111      	bne.n	402c5c <SenParseFrame+0x114>
  402c38:	4b6d      	ldr	r3, [pc, #436]	; (402df0 <SenParseFrame+0x2a8>)
  402c3a:	791b      	ldrb	r3, [r3, #4]
  402c3c:	4618      	mov	r0, r3
  402c3e:	4b71      	ldr	r3, [pc, #452]	; (402e04 <SenParseFrame+0x2bc>)
  402c40:	4798      	blx	r3
  402c42:	4603      	mov	r3, r0
  402c44:	2b00      	cmp	r3, #0
  402c46:	d009      	beq.n	402c5c <SenParseFrame+0x114>
					{
						/* Write data value to trigger circular buffer */
						CBuffWriteByte(&trigBuff, sen1State.tempPleath);
  402c48:	4b69      	ldr	r3, [pc, #420]	; (402df0 <SenParseFrame+0x2a8>)
  402c4a:	791b      	ldrb	r3, [r3, #4]
  402c4c:	4619      	mov	r1, r3
  402c4e:	486e      	ldr	r0, [pc, #440]	; (402e08 <SenParseFrame+0x2c0>)
  402c50:	4b6a      	ldr	r3, [pc, #424]	; (402dfc <SenParseFrame+0x2b4>)
  402c52:	4798      	blx	r3
						/* This flag will be reset in the pressure control loop */
						trigFound = 1;
  402c54:	4b6a      	ldr	r3, [pc, #424]	; (402e00 <SenParseFrame+0x2b8>)
  402c56:	2201      	movs	r2, #1
  402c58:	701a      	strb	r2, [r3, #0]
  402c5a:	e003      	b.n	402c64 <SenParseFrame+0x11c>
					}
					else
					{
						/* Write 0 to trigger circular buffer */
						CBuffWriteByte(&trigBuff, 0);
  402c5c:	2100      	movs	r1, #0
  402c5e:	486a      	ldr	r0, [pc, #424]	; (402e08 <SenParseFrame+0x2c0>)
  402c60:	4b66      	ldr	r3, [pc, #408]	; (402dfc <SenParseFrame+0x2b4>)
  402c62:	4798      	blx	r3
					}
					sen1State.state = q5;
  402c64:	4b62      	ldr	r3, [pc, #392]	; (402df0 <SenParseFrame+0x2a8>)
  402c66:	2205      	movs	r2, #5
  402c68:	701a      	strb	r2, [r3, #0]
					sen1State.ctr = 0;
  402c6a:	4b61      	ldr	r3, [pc, #388]	; (402df0 <SenParseFrame+0x2a8>)
  402c6c:	2200      	movs	r2, #0
  402c6e:	709a      	strb	r2, [r3, #2]
				}
				else
				{
					sen1State.state = q0;
				}
				break;
  402c70:	e109      	b.n	402e86 <SenParseFrame+0x33e>
					sen1State.state = q5;
					sen1State.ctr = 0;
				}
				else
				{
					sen1State.state = q0;
  402c72:	4b5f      	ldr	r3, [pc, #380]	; (402df0 <SenParseFrame+0x2a8>)
  402c74:	2200      	movs	r2, #0
  402c76:	701a      	strb	r2, [r3, #0]
				}
				break;
  402c78:	e105      	b.n	402e86 <SenParseFrame+0x33e>
			case q5:
				sen1State.ctr++;
  402c7a:	4b5d      	ldr	r3, [pc, #372]	; (402df0 <SenParseFrame+0x2a8>)
  402c7c:	789b      	ldrb	r3, [r3, #2]
  402c7e:	3301      	adds	r3, #1
  402c80:	b2da      	uxtb	r2, r3
  402c82:	4b5b      	ldr	r3, [pc, #364]	; (402df0 <SenParseFrame+0x2a8>)
  402c84:	709a      	strb	r2, [r3, #2]
				if(sen1State.ctr == sen1State.pIndex)
  402c86:	4b5a      	ldr	r3, [pc, #360]	; (402df0 <SenParseFrame+0x2a8>)
  402c88:	789a      	ldrb	r2, [r3, #2]
  402c8a:	4b59      	ldr	r3, [pc, #356]	; (402df0 <SenParseFrame+0x2a8>)
  402c8c:	78db      	ldrb	r3, [r3, #3]
  402c8e:	429a      	cmp	r2, r3
  402c90:	d120      	bne.n	402cd4 <SenParseFrame+0x18c>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen1Data.pleathBuff, data);
  402c92:	79bb      	ldrb	r3, [r7, #6]
  402c94:	4619      	mov	r1, r3
  402c96:	4858      	ldr	r0, [pc, #352]	; (402df8 <SenParseFrame+0x2b0>)
  402c98:	4b58      	ldr	r3, [pc, #352]	; (402dfc <SenParseFrame+0x2b4>)
  402c9a:	4798      	blx	r3
					//CBuffWriteByte(&trigBuff, data);

					if ((!trigFound) && (GetTrigger(data)))
  402c9c:	4b58      	ldr	r3, [pc, #352]	; (402e00 <SenParseFrame+0x2b8>)
  402c9e:	781b      	ldrb	r3, [r3, #0]
  402ca0:	2b00      	cmp	r3, #0
  402ca2:	d10c      	bne.n	402cbe <SenParseFrame+0x176>
  402ca4:	79bb      	ldrb	r3, [r7, #6]
  402ca6:	4618      	mov	r0, r3
  402ca8:	4b56      	ldr	r3, [pc, #344]	; (402e04 <SenParseFrame+0x2bc>)
  402caa:	4798      	blx	r3
  402cac:	4603      	mov	r3, r0
  402cae:	2b00      	cmp	r3, #0
  402cb0:	d005      	beq.n	402cbe <SenParseFrame+0x176>
					{
						/* Write data value to trigger circular buffer */
						CBuffWriteByte(&trigBuff, data);
  402cb2:	79bb      	ldrb	r3, [r7, #6]
  402cb4:	4619      	mov	r1, r3
  402cb6:	4854      	ldr	r0, [pc, #336]	; (402e08 <SenParseFrame+0x2c0>)
  402cb8:	4b50      	ldr	r3, [pc, #320]	; (402dfc <SenParseFrame+0x2b4>)
  402cba:	4798      	blx	r3
  402cbc:	e003      	b.n	402cc6 <SenParseFrame+0x17e>
					}
					else
					{
						/* Write 0 to trigger circular buffer */
						CBuffWriteByte(&trigBuff, 0);
  402cbe:	2100      	movs	r1, #0
  402cc0:	4851      	ldr	r0, [pc, #324]	; (402e08 <SenParseFrame+0x2c0>)
  402cc2:	4b4e      	ldr	r3, [pc, #312]	; (402dfc <SenParseFrame+0x2b4>)
  402cc4:	4798      	blx	r3
					}
					sen1State.pIndex += 5;
  402cc6:	4b4a      	ldr	r3, [pc, #296]	; (402df0 <SenParseFrame+0x2a8>)
  402cc8:	78db      	ldrb	r3, [r3, #3]
  402cca:	3305      	adds	r3, #5
  402ccc:	b2da      	uxtb	r2, r3
  402cce:	4b48      	ldr	r3, [pc, #288]	; (402df0 <SenParseFrame+0x2a8>)
  402cd0:	70da      	strb	r2, [r3, #3]
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  402cd2:	e0d3      	b.n	402e7c <SenParseFrame+0x334>
						/* Write 0 to trigger circular buffer */
						CBuffWriteByte(&trigBuff, 0);
					}
					sen1State.pIndex += 5;
				}
				else if(sen1State.ctr == 4)
  402cd4:	4b46      	ldr	r3, [pc, #280]	; (402df0 <SenParseFrame+0x2a8>)
  402cd6:	789b      	ldrb	r3, [r3, #2]
  402cd8:	2b04      	cmp	r3, #4
  402cda:	d103      	bne.n	402ce4 <SenParseFrame+0x19c>
				{
					sen1Data.hrLsb = data;
  402cdc:	4a45      	ldr	r2, [pc, #276]	; (402df4 <SenParseFrame+0x2ac>)
  402cde:	79bb      	ldrb	r3, [r7, #6]
  402ce0:	7053      	strb	r3, [r2, #1]
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  402ce2:	e0cb      	b.n	402e7c <SenParseFrame+0x334>
				}
				else if(sen1State.ctr == 4)
				{
					sen1Data.hrLsb = data;
				}
				else if(sen1State.ctr == 9)
  402ce4:	4b42      	ldr	r3, [pc, #264]	; (402df0 <SenParseFrame+0x2a8>)
  402ce6:	789b      	ldrb	r3, [r3, #2]
  402ce8:	2b09      	cmp	r3, #9
  402cea:	d103      	bne.n	402cf4 <SenParseFrame+0x1ac>
				{
					sen1Data.spo2 = data;
  402cec:	4a41      	ldr	r2, [pc, #260]	; (402df4 <SenParseFrame+0x2ac>)
  402cee:	79bb      	ldrb	r3, [r7, #6]
  402cf0:	7093      	strb	r3, [r2, #2]
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  402cf2:	e0c3      	b.n	402e7c <SenParseFrame+0x334>
				}
				else if(sen1State.ctr == 9)
				{
					sen1Data.spo2 = data;
				}
				else if(sen1State.ctr==120)
  402cf4:	4b3e      	ldr	r3, [pc, #248]	; (402df0 <SenParseFrame+0x2a8>)
  402cf6:	789b      	ldrb	r3, [r3, #2]
  402cf8:	2b78      	cmp	r3, #120	; 0x78
  402cfa:	f040 80bf 	bne.w	402e7c <SenParseFrame+0x334>
				{
					sen1State.state = q0;					
  402cfe:	4b3c      	ldr	r3, [pc, #240]	; (402df0 <SenParseFrame+0x2a8>)
  402d00:	2200      	movs	r2, #0
  402d02:	701a      	strb	r2, [r3, #0]
				}
				break;
  402d04:	bf00      	nop
  402d06:	e0b9      	b.n	402e7c <SenParseFrame+0x334>
		}
	}
	else
	{
		switch(sen2State.state)
  402d08:	4b40      	ldr	r3, [pc, #256]	; (402e0c <SenParseFrame+0x2c4>)
  402d0a:	781b      	ldrb	r3, [r3, #0]
  402d0c:	2b05      	cmp	r3, #5
  402d0e:	f200 80ba 	bhi.w	402e86 <SenParseFrame+0x33e>
  402d12:	a201      	add	r2, pc, #4	; (adr r2, 402d18 <SenParseFrame+0x1d0>)
  402d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402d18:	00402d31 	.word	0x00402d31
  402d1c:	00402d47 	.word	0x00402d47
  402d20:	00402d77 	.word	0x00402d77
  402d24:	00402d99 	.word	0x00402d99
  402d28:	00402dc3 	.word	0x00402dc3
  402d2c:	00402e19 	.word	0x00402e19
 		{
			case q0:
				if(data==0x01)
  402d30:	79bb      	ldrb	r3, [r7, #6]
  402d32:	2b01      	cmp	r3, #1
  402d34:	f040 80a4 	bne.w	402e80 <SenParseFrame+0x338>
				{
					sen2State.state = q1;
  402d38:	4b34      	ldr	r3, [pc, #208]	; (402e0c <SenParseFrame+0x2c4>)
  402d3a:	2201      	movs	r2, #1
  402d3c:	701a      	strb	r2, [r3, #0]
					sen2State.sum = 0x01;
  402d3e:	4b33      	ldr	r3, [pc, #204]	; (402e0c <SenParseFrame+0x2c4>)
  402d40:	2201      	movs	r2, #1
  402d42:	705a      	strb	r2, [r3, #1]
				}
				break;
  402d44:	e09c      	b.n	402e80 <SenParseFrame+0x338>
			case q1:
				if((data>127)&&BIT_IS_SET(data,0))
  402d46:	f997 3006 	ldrsb.w	r3, [r7, #6]
  402d4a:	2b00      	cmp	r3, #0
  402d4c:	da0f      	bge.n	402d6e <SenParseFrame+0x226>
  402d4e:	79bb      	ldrb	r3, [r7, #6]
  402d50:	f003 0301 	and.w	r3, r3, #1
  402d54:	2b00      	cmp	r3, #0
  402d56:	d00a      	beq.n	402d6e <SenParseFrame+0x226>
				{
					sen2State.state = q2;
  402d58:	4b2c      	ldr	r3, [pc, #176]	; (402e0c <SenParseFrame+0x2c4>)
  402d5a:	2202      	movs	r2, #2
  402d5c:	701a      	strb	r2, [r3, #0]
					sen2State.sum += data;
  402d5e:	4b2b      	ldr	r3, [pc, #172]	; (402e0c <SenParseFrame+0x2c4>)
  402d60:	785a      	ldrb	r2, [r3, #1]
  402d62:	79bb      	ldrb	r3, [r7, #6]
  402d64:	4413      	add	r3, r2
  402d66:	b2da      	uxtb	r2, r3
  402d68:	4b28      	ldr	r3, [pc, #160]	; (402e0c <SenParseFrame+0x2c4>)
  402d6a:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen2State.state = q0;
				}
				break;
  402d6c:	e08b      	b.n	402e86 <SenParseFrame+0x33e>
					sen2State.state = q2;
					sen2State.sum += data;
				}
				else
				{
					sen2State.state = q0;
  402d6e:	4b27      	ldr	r3, [pc, #156]	; (402e0c <SenParseFrame+0x2c4>)
  402d70:	2200      	movs	r2, #0
  402d72:	701a      	strb	r2, [r3, #0]
				}
				break;
  402d74:	e087      	b.n	402e86 <SenParseFrame+0x33e>
			case q2:
				//Pleath Reading
				sen2State.tempPleath = data;
  402d76:	4a25      	ldr	r2, [pc, #148]	; (402e0c <SenParseFrame+0x2c4>)
  402d78:	79bb      	ldrb	r3, [r7, #6]
  402d7a:	7113      	strb	r3, [r2, #4]
				sen2State.state = q3;
  402d7c:	4b23      	ldr	r3, [pc, #140]	; (402e0c <SenParseFrame+0x2c4>)
  402d7e:	2203      	movs	r2, #3
  402d80:	701a      	strb	r2, [r3, #0]
				sen2State.sum += data;
  402d82:	4b22      	ldr	r3, [pc, #136]	; (402e0c <SenParseFrame+0x2c4>)
  402d84:	785a      	ldrb	r2, [r3, #1]
  402d86:	79bb      	ldrb	r3, [r7, #6]
  402d88:	4413      	add	r3, r2
  402d8a:	b2da      	uxtb	r2, r3
  402d8c:	4b1f      	ldr	r3, [pc, #124]	; (402e0c <SenParseFrame+0x2c4>)
  402d8e:	705a      	strb	r2, [r3, #1]
				sen2State.pIndex = 3;
  402d90:	4b1e      	ldr	r3, [pc, #120]	; (402e0c <SenParseFrame+0x2c4>)
  402d92:	2203      	movs	r2, #3
  402d94:	70da      	strb	r2, [r3, #3]
				break;
  402d96:	e076      	b.n	402e86 <SenParseFrame+0x33e>
			case q3:
				if(data<127)
  402d98:	79bb      	ldrb	r3, [r7, #6]
  402d9a:	2b7e      	cmp	r3, #126	; 0x7e
  402d9c:	d80d      	bhi.n	402dba <SenParseFrame+0x272>
				{
					//HRMSB
					//hrtRate = ((uint16_t)(data&0x03))<<8;
					sen2Data.hrMsb = data;
  402d9e:	4a1c      	ldr	r2, [pc, #112]	; (402e10 <SenParseFrame+0x2c8>)
  402da0:	79bb      	ldrb	r3, [r7, #6]
  402da2:	7013      	strb	r3, [r2, #0]
					sen2State.state = q4;
  402da4:	4b19      	ldr	r3, [pc, #100]	; (402e0c <SenParseFrame+0x2c4>)
  402da6:	2204      	movs	r2, #4
  402da8:	701a      	strb	r2, [r3, #0]
					sen2State.sum += data;
  402daa:	4b18      	ldr	r3, [pc, #96]	; (402e0c <SenParseFrame+0x2c4>)
  402dac:	785a      	ldrb	r2, [r3, #1]
  402dae:	79bb      	ldrb	r3, [r7, #6]
  402db0:	4413      	add	r3, r2
  402db2:	b2da      	uxtb	r2, r3
  402db4:	4b15      	ldr	r3, [pc, #84]	; (402e0c <SenParseFrame+0x2c4>)
  402db6:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen2State.state = q0;
				}
				break;
  402db8:	e065      	b.n	402e86 <SenParseFrame+0x33e>
					sen2State.state = q4;
					sen2State.sum += data;
				}
				else
				{
					sen2State.state = q0;
  402dba:	4b14      	ldr	r3, [pc, #80]	; (402e0c <SenParseFrame+0x2c4>)
  402dbc:	2200      	movs	r2, #0
  402dbe:	701a      	strb	r2, [r3, #0]
				}
				break;
  402dc0:	e061      	b.n	402e86 <SenParseFrame+0x33e>
			case q4:
				/* If Checksum matched */
				if(data==sen2State.sum)
  402dc2:	4b12      	ldr	r3, [pc, #72]	; (402e0c <SenParseFrame+0x2c4>)
  402dc4:	785b      	ldrb	r3, [r3, #1]
  402dc6:	79ba      	ldrb	r2, [r7, #6]
  402dc8:	429a      	cmp	r2, r3
  402dca:	d10c      	bne.n	402de6 <SenParseFrame+0x29e>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen2Data.pleathBuff, sen2State.tempPleath);
  402dcc:	4b0f      	ldr	r3, [pc, #60]	; (402e0c <SenParseFrame+0x2c4>)
  402dce:	791b      	ldrb	r3, [r3, #4]
  402dd0:	4619      	mov	r1, r3
  402dd2:	4810      	ldr	r0, [pc, #64]	; (402e14 <SenParseFrame+0x2cc>)
  402dd4:	4b09      	ldr	r3, [pc, #36]	; (402dfc <SenParseFrame+0x2b4>)
  402dd6:	4798      	blx	r3
					sen2State.state = q5;
  402dd8:	4b0c      	ldr	r3, [pc, #48]	; (402e0c <SenParseFrame+0x2c4>)
  402dda:	2205      	movs	r2, #5
  402ddc:	701a      	strb	r2, [r3, #0]
					sen2State.ctr = 0;
  402dde:	4b0b      	ldr	r3, [pc, #44]	; (402e0c <SenParseFrame+0x2c4>)
  402de0:	2200      	movs	r2, #0
  402de2:	709a      	strb	r2, [r3, #2]
				}
				else
				{
					sen2State.state = q0;
				}
				break;
  402de4:	e04f      	b.n	402e86 <SenParseFrame+0x33e>
					sen2State.state = q5;
					sen2State.ctr = 0;
				}
				else
				{
					sen2State.state = q0;
  402de6:	4b09      	ldr	r3, [pc, #36]	; (402e0c <SenParseFrame+0x2c4>)
  402de8:	2200      	movs	r2, #0
  402dea:	701a      	strb	r2, [r3, #0]
				}
				break;
  402dec:	e04b      	b.n	402e86 <SenParseFrame+0x33e>
  402dee:	bf00      	nop
  402df0:	20000d2c 	.word	0x20000d2c
  402df4:	20000bb0 	.word	0x20000bb0
  402df8:	20000bb3 	.word	0x20000bb3
  402dfc:	00400129 	.word	0x00400129
  402e00:	20000ac0 	.word	0x20000ac0
  402e04:	00402ea1 	.word	0x00402ea1
  402e08:	20000cb4 	.word	0x20000cb4
  402e0c:	20000d24 	.word	0x20000d24
  402e10:	20000b44 	.word	0x20000b44
  402e14:	20000b47 	.word	0x20000b47
			case q5:
				sen2State.ctr++;
  402e18:	4b1d      	ldr	r3, [pc, #116]	; (402e90 <SenParseFrame+0x348>)
  402e1a:	789b      	ldrb	r3, [r3, #2]
  402e1c:	3301      	adds	r3, #1
  402e1e:	b2da      	uxtb	r2, r3
  402e20:	4b1b      	ldr	r3, [pc, #108]	; (402e90 <SenParseFrame+0x348>)
  402e22:	709a      	strb	r2, [r3, #2]
				if(sen2State.ctr == sen2State.pIndex)
  402e24:	4b1a      	ldr	r3, [pc, #104]	; (402e90 <SenParseFrame+0x348>)
  402e26:	789a      	ldrb	r2, [r3, #2]
  402e28:	4b19      	ldr	r3, [pc, #100]	; (402e90 <SenParseFrame+0x348>)
  402e2a:	78db      	ldrb	r3, [r3, #3]
  402e2c:	429a      	cmp	r2, r3
  402e2e:	d10b      	bne.n	402e48 <SenParseFrame+0x300>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen2Data.pleathBuff, data);
  402e30:	79bb      	ldrb	r3, [r7, #6]
  402e32:	4619      	mov	r1, r3
  402e34:	4817      	ldr	r0, [pc, #92]	; (402e94 <SenParseFrame+0x34c>)
  402e36:	4b18      	ldr	r3, [pc, #96]	; (402e98 <SenParseFrame+0x350>)
  402e38:	4798      	blx	r3
					sen2State.pIndex += 5;
  402e3a:	4b15      	ldr	r3, [pc, #84]	; (402e90 <SenParseFrame+0x348>)
  402e3c:	78db      	ldrb	r3, [r3, #3]
  402e3e:	3305      	adds	r3, #5
  402e40:	b2da      	uxtb	r2, r3
  402e42:	4b13      	ldr	r3, [pc, #76]	; (402e90 <SenParseFrame+0x348>)
  402e44:	70da      	strb	r2, [r3, #3]
				}
				else if(sen2State.ctr==120)
				{
					sen2State.state = q0;
				}
				break;
  402e46:	e01d      	b.n	402e84 <SenParseFrame+0x33c>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen2Data.pleathBuff, data);
					sen2State.pIndex += 5;
				}
				else if(sen2State.ctr == 4)
  402e48:	4b11      	ldr	r3, [pc, #68]	; (402e90 <SenParseFrame+0x348>)
  402e4a:	789b      	ldrb	r3, [r3, #2]
  402e4c:	2b04      	cmp	r3, #4
  402e4e:	d103      	bne.n	402e58 <SenParseFrame+0x310>
				{
					sen2Data.hrLsb = data;
  402e50:	4a12      	ldr	r2, [pc, #72]	; (402e9c <SenParseFrame+0x354>)
  402e52:	79bb      	ldrb	r3, [r7, #6]
  402e54:	7053      	strb	r3, [r2, #1]
				}
				else if(sen2State.ctr==120)
				{
					sen2State.state = q0;
				}
				break;
  402e56:	e015      	b.n	402e84 <SenParseFrame+0x33c>
				}
				else if(sen2State.ctr == 4)
				{
					sen2Data.hrLsb = data;
				}
				else if(sen2State.ctr == 9)
  402e58:	4b0d      	ldr	r3, [pc, #52]	; (402e90 <SenParseFrame+0x348>)
  402e5a:	789b      	ldrb	r3, [r3, #2]
  402e5c:	2b09      	cmp	r3, #9
  402e5e:	d103      	bne.n	402e68 <SenParseFrame+0x320>
				{
					sen2Data.spo2 = data;
  402e60:	4a0e      	ldr	r2, [pc, #56]	; (402e9c <SenParseFrame+0x354>)
  402e62:	79bb      	ldrb	r3, [r7, #6]
  402e64:	7093      	strb	r3, [r2, #2]
				}
				else if(sen2State.ctr==120)
				{
					sen2State.state = q0;
				}
				break;
  402e66:	e00d      	b.n	402e84 <SenParseFrame+0x33c>
				}
				else if(sen2State.ctr == 9)
				{
					sen2Data.spo2 = data;
				}
				else if(sen2State.ctr==120)
  402e68:	4b09      	ldr	r3, [pc, #36]	; (402e90 <SenParseFrame+0x348>)
  402e6a:	789b      	ldrb	r3, [r3, #2]
  402e6c:	2b78      	cmp	r3, #120	; 0x78
  402e6e:	d109      	bne.n	402e84 <SenParseFrame+0x33c>
				{
					sen2State.state = q0;
  402e70:	4b07      	ldr	r3, [pc, #28]	; (402e90 <SenParseFrame+0x348>)
  402e72:	2200      	movs	r2, #0
  402e74:	701a      	strb	r2, [r3, #0]
				}
				break;
  402e76:	e005      	b.n	402e84 <SenParseFrame+0x33c>
				if(data==0x01)
				{
					sen1State.state = q1;
					sen1State.sum = 0x01;
				}
				break;
  402e78:	bf00      	nop
  402e7a:	e004      	b.n	402e86 <SenParseFrame+0x33e>
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  402e7c:	bf00      	nop
  402e7e:	e002      	b.n	402e86 <SenParseFrame+0x33e>
				if(data==0x01)
				{
					sen2State.state = q1;
					sen2State.sum = 0x01;
				}
				break;
  402e80:	bf00      	nop
  402e82:	e000      	b.n	402e86 <SenParseFrame+0x33e>
				}
				else if(sen2State.ctr==120)
				{
					sen2State.state = q0;
				}
				break;
  402e84:	bf00      	nop
 		}
	}
}
  402e86:	bf00      	nop
  402e88:	3708      	adds	r7, #8
  402e8a:	46bd      	mov	sp, r7
  402e8c:	bd80      	pop	{r7, pc}
  402e8e:	bf00      	nop
  402e90:	20000d24 	.word	0x20000d24
  402e94:	20000b47 	.word	0x20000b47
  402e98:	00400129 	.word	0x00400129
  402e9c:	20000b44 	.word	0x20000b44

00402ea0 <GetTrigger>:

uint8_t GetTrigger(uint8_t currPleath)
{
  402ea0:	b480      	push	{r7}
  402ea2:	b085      	sub	sp, #20
  402ea4:	af00      	add	r7, sp, #0
  402ea6:	4603      	mov	r3, r0
  402ea8:	71fb      	strb	r3, [r7, #7]
	int8_t diff = (int8_t)prevPleath - (int8_t)currPleath;
  402eaa:	4b33      	ldr	r3, [pc, #204]	; (402f78 <GetTrigger+0xd8>)
  402eac:	781a      	ldrb	r2, [r3, #0]
  402eae:	79fb      	ldrb	r3, [r7, #7]
  402eb0:	1ad3      	subs	r3, r2, r3
  402eb2:	b2db      	uxtb	r3, r3
  402eb4:	73fb      	strb	r3, [r7, #15]
				ctr = 0;
			}
		}
	#else
		/* Use peak detection algorithm for trigger calculation */
		if(rising)
  402eb6:	4b31      	ldr	r3, [pc, #196]	; (402f7c <GetTrigger+0xdc>)
  402eb8:	781b      	ldrb	r3, [r3, #0]
  402eba:	2b00      	cmp	r3, #0
  402ebc:	d038      	beq.n	402f30 <GetTrigger+0x90>
		{
			if(diff > 0)
  402ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402ec2:	2b00      	cmp	r3, #0
  402ec4:	dd30      	ble.n	402f28 <GetTrigger+0x88>
			{
				ctr += 1;
  402ec6:	4b2e      	ldr	r3, [pc, #184]	; (402f80 <GetTrigger+0xe0>)
  402ec8:	781b      	ldrb	r3, [r3, #0]
  402eca:	3301      	adds	r3, #1
  402ecc:	b2da      	uxtb	r2, r3
  402ece:	4b2c      	ldr	r3, [pc, #176]	; (402f80 <GetTrigger+0xe0>)
  402ed0:	701a      	strb	r2, [r3, #0]
				if(ctr >= PLEATH_DIFF_CYCLES)
  402ed2:	4b2b      	ldr	r3, [pc, #172]	; (402f80 <GetTrigger+0xe0>)
  402ed4:	781b      	ldrb	r3, [r3, #0]
  402ed6:	2b01      	cmp	r3, #1
  402ed8:	d943      	bls.n	402f62 <GetTrigger+0xc2>
				{
					/* This flag will be reset in the pressure control loop */
					trigFound = 1;
  402eda:	4b2a      	ldr	r3, [pc, #168]	; (402f84 <GetTrigger+0xe4>)
  402edc:	2201      	movs	r2, #1
  402ede:	701a      	strb	r2, [r3, #0]
					rising = 0;
  402ee0:	4b26      	ldr	r3, [pc, #152]	; (402f7c <GetTrigger+0xdc>)
  402ee2:	2200      	movs	r2, #0
  402ee4:	701a      	strb	r2, [r3, #0]
					ctr = 0;
  402ee6:	4b26      	ldr	r3, [pc, #152]	; (402f80 <GetTrigger+0xe0>)
  402ee8:	2200      	movs	r2, #0
  402eea:	701a      	strb	r2, [r3, #0]

					avgCycleTime = (prevCycleTime[0]+prevCycleTime[1]+prevCycleTime[2]+cycleTime)>>2;
  402eec:	4b26      	ldr	r3, [pc, #152]	; (402f88 <GetTrigger+0xe8>)
  402eee:	681a      	ldr	r2, [r3, #0]
  402ef0:	4b25      	ldr	r3, [pc, #148]	; (402f88 <GetTrigger+0xe8>)
  402ef2:	685b      	ldr	r3, [r3, #4]
  402ef4:	441a      	add	r2, r3
  402ef6:	4b24      	ldr	r3, [pc, #144]	; (402f88 <GetTrigger+0xe8>)
  402ef8:	689b      	ldr	r3, [r3, #8]
  402efa:	441a      	add	r2, r3
  402efc:	4b23      	ldr	r3, [pc, #140]	; (402f8c <GetTrigger+0xec>)
  402efe:	681b      	ldr	r3, [r3, #0]
  402f00:	4413      	add	r3, r2
  402f02:	089b      	lsrs	r3, r3, #2
  402f04:	4a22      	ldr	r2, [pc, #136]	; (402f90 <GetTrigger+0xf0>)
  402f06:	6013      	str	r3, [r2, #0]
					prevCycleTime[0] = prevCycleTime[1];
  402f08:	4b1f      	ldr	r3, [pc, #124]	; (402f88 <GetTrigger+0xe8>)
  402f0a:	685b      	ldr	r3, [r3, #4]
  402f0c:	4a1e      	ldr	r2, [pc, #120]	; (402f88 <GetTrigger+0xe8>)
  402f0e:	6013      	str	r3, [r2, #0]
					prevCycleTime[1] = prevCycleTime[2];
  402f10:	4b1d      	ldr	r3, [pc, #116]	; (402f88 <GetTrigger+0xe8>)
  402f12:	689b      	ldr	r3, [r3, #8]
  402f14:	4a1c      	ldr	r2, [pc, #112]	; (402f88 <GetTrigger+0xe8>)
  402f16:	6053      	str	r3, [r2, #4]
					prevCycleTime[2] = cycleTime;
  402f18:	4b1c      	ldr	r3, [pc, #112]	; (402f8c <GetTrigger+0xec>)
  402f1a:	681b      	ldr	r3, [r3, #0]
  402f1c:	4a1a      	ldr	r2, [pc, #104]	; (402f88 <GetTrigger+0xe8>)
  402f1e:	6093      	str	r3, [r2, #8]
					cycleTime = 0;
  402f20:	4b1a      	ldr	r3, [pc, #104]	; (402f8c <GetTrigger+0xec>)
  402f22:	2200      	movs	r2, #0
  402f24:	601a      	str	r2, [r3, #0]
  402f26:	e01c      	b.n	402f62 <GetTrigger+0xc2>
				}
			}
			else
			{
				ctr = 0;
  402f28:	4b15      	ldr	r3, [pc, #84]	; (402f80 <GetTrigger+0xe0>)
  402f2a:	2200      	movs	r2, #0
  402f2c:	701a      	strb	r2, [r3, #0]
  402f2e:	e018      	b.n	402f62 <GetTrigger+0xc2>
			}
		}
		else
		{
			if(diff <= -PLEATH_DIFF_THRESHOLD)
  402f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402f34:	f113 0f02 	cmn.w	r3, #2
  402f38:	da10      	bge.n	402f5c <GetTrigger+0xbc>
			{
				ctr += 1;
  402f3a:	4b11      	ldr	r3, [pc, #68]	; (402f80 <GetTrigger+0xe0>)
  402f3c:	781b      	ldrb	r3, [r3, #0]
  402f3e:	3301      	adds	r3, #1
  402f40:	b2da      	uxtb	r2, r3
  402f42:	4b0f      	ldr	r3, [pc, #60]	; (402f80 <GetTrigger+0xe0>)
  402f44:	701a      	strb	r2, [r3, #0]
				if(ctr >= PLEATH_DIFF_CYCLES)
  402f46:	4b0e      	ldr	r3, [pc, #56]	; (402f80 <GetTrigger+0xe0>)
  402f48:	781b      	ldrb	r3, [r3, #0]
  402f4a:	2b01      	cmp	r3, #1
  402f4c:	d909      	bls.n	402f62 <GetTrigger+0xc2>
				{
					rising = 1;
  402f4e:	4b0b      	ldr	r3, [pc, #44]	; (402f7c <GetTrigger+0xdc>)
  402f50:	2201      	movs	r2, #1
  402f52:	701a      	strb	r2, [r3, #0]
					ctr = 0;
  402f54:	4b0a      	ldr	r3, [pc, #40]	; (402f80 <GetTrigger+0xe0>)
  402f56:	2200      	movs	r2, #0
  402f58:	701a      	strb	r2, [r3, #0]
  402f5a:	e002      	b.n	402f62 <GetTrigger+0xc2>
				}
			}
			else
			{
				ctr = 0;
  402f5c:	4b08      	ldr	r3, [pc, #32]	; (402f80 <GetTrigger+0xe0>)
  402f5e:	2200      	movs	r2, #0
  402f60:	701a      	strb	r2, [r3, #0]
			}
		}
	#endif
	
	prevPleath = currPleath;
  402f62:	4a05      	ldr	r2, [pc, #20]	; (402f78 <GetTrigger+0xd8>)
  402f64:	79fb      	ldrb	r3, [r7, #7]
  402f66:	7013      	strb	r3, [r2, #0]
	return trigFound;
  402f68:	4b06      	ldr	r3, [pc, #24]	; (402f84 <GetTrigger+0xe4>)
  402f6a:	781b      	ldrb	r3, [r3, #0]
}
  402f6c:	4618      	mov	r0, r3
  402f6e:	3714      	adds	r7, #20
  402f70:	46bd      	mov	sp, r7
  402f72:	bc80      	pop	{r7}
  402f74:	4770      	bx	lr
  402f76:	bf00      	nop
  402f78:	20000ac1 	.word	0x20000ac1
  402f7c:	20000ac2 	.word	0x20000ac2
  402f80:	20000aec 	.word	0x20000aec
  402f84:	20000ac0 	.word	0x20000ac0
  402f88:	20000ac4 	.word	0x20000ac4
  402f8c:	20000ad4 	.word	0x20000ad4
  402f90:	20000ad0 	.word	0x20000ad0

00402f94 <ActivateValves>:

void ActivateValves(void)
{
  402f94:	b580      	push	{r7, lr}
  402f96:	b084      	sub	sp, #16
  402f98:	af00      	add	r7, sp, #0
	#ifdef CTRL_TYPE_PRESSURE
		uint16_t temp = 0;
  402f9a:	2300      	movs	r3, #0
  402f9c:	81fb      	strh	r3, [r7, #14]
		float pVal = 0;
  402f9e:	f04f 0300 	mov.w	r3, #0
  402fa2:	60bb      	str	r3, [r7, #8]
		uint8_t pBuff[3];
	#endif

	if(trigFound)
  402fa4:	4b66      	ldr	r3, [pc, #408]	; (403140 <ActivateValves+0x1ac>)
  402fa6:	781b      	ldrb	r3, [r3, #0]
  402fa8:	2b00      	cmp	r3, #0
  402faa:	f000 80c5 	beq.w	403138 <ActivateValves+0x1a4>
	{
		switch(ctrlState)
  402fae:	4b65      	ldr	r3, [pc, #404]	; (403144 <ActivateValves+0x1b0>)
  402fb0:	781b      	ldrb	r3, [r3, #0]
  402fb2:	2b04      	cmp	r3, #4
  402fb4:	f200 80bd 	bhi.w	403132 <ActivateValves+0x19e>
  402fb8:	a201      	add	r2, pc, #4	; (adr r2, 402fc0 <ActivateValves+0x2c>)
  402fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402fbe:	bf00      	nop
  402fc0:	00402fd5 	.word	0x00402fd5
  402fc4:	00403019 	.word	0x00403019
  402fc8:	004030db 	.word	0x004030db
  402fcc:	004030fd 	.word	0x004030fd
  402fd0:	0040311f 	.word	0x0040311f
		{
			#if defined(ALGO_TYPE_PK_DET) 
			case insertDelay:
				tickDur = avgCycleTime - delayParam;
  402fd4:	4b5c      	ldr	r3, [pc, #368]	; (403148 <ActivateValves+0x1b4>)
  402fd6:	681a      	ldr	r2, [r3, #0]
  402fd8:	4b5c      	ldr	r3, [pc, #368]	; (40314c <ActivateValves+0x1b8>)
  402fda:	681b      	ldr	r3, [r3, #0]
  402fdc:	1ad3      	subs	r3, r2, r3
  402fde:	4a5c      	ldr	r2, [pc, #368]	; (403150 <ActivateValves+0x1bc>)
  402fe0:	6013      	str	r3, [r2, #0]
				/* This indicates overflow occurred */
				if(tickDur>10000)
  402fe2:	4b5b      	ldr	r3, [pc, #364]	; (403150 <ActivateValves+0x1bc>)
  402fe4:	681b      	ldr	r3, [r3, #0]
  402fe6:	f242 7210 	movw	r2, #10000	; 0x2710
  402fea:	4293      	cmp	r3, r2
  402fec:	d906      	bls.n	402ffc <ActivateValves+0x68>
				{
					tickDur = 0;
  402fee:	4b58      	ldr	r3, [pc, #352]	; (403150 <ActivateValves+0x1bc>)
  402ff0:	2200      	movs	r2, #0
  402ff2:	601a      	str	r2, [r3, #0]
					trigFound = 0;
  402ff4:	4b52      	ldr	r3, [pc, #328]	; (403140 <ActivateValves+0x1ac>)
  402ff6:	2200      	movs	r2, #0
  402ff8:	701a      	strb	r2, [r3, #0]
					tickCount = 0;
					tickDur = delayParam;
					ctrlState = waitCycles;
					nextCtrlState = fillCuff;
				}
				break;
  402ffa:	e09d      	b.n	403138 <ActivateValves+0x1a4>
					tickDur = 0;
					trigFound = 0;
				}
				else
				{
					tickCount = 0;
  402ffc:	4b55      	ldr	r3, [pc, #340]	; (403154 <ActivateValves+0x1c0>)
  402ffe:	2200      	movs	r2, #0
  403000:	601a      	str	r2, [r3, #0]
					tickDur = delayParam;
  403002:	4b52      	ldr	r3, [pc, #328]	; (40314c <ActivateValves+0x1b8>)
  403004:	681b      	ldr	r3, [r3, #0]
  403006:	4a52      	ldr	r2, [pc, #328]	; (403150 <ActivateValves+0x1bc>)
  403008:	6013      	str	r3, [r2, #0]
					ctrlState = waitCycles;
  40300a:	4b4e      	ldr	r3, [pc, #312]	; (403144 <ActivateValves+0x1b0>)
  40300c:	2202      	movs	r2, #2
  40300e:	701a      	strb	r2, [r3, #0]
					nextCtrlState = fillCuff;
  403010:	4b51      	ldr	r3, [pc, #324]	; (403158 <ActivateValves+0x1c4>)
  403012:	2201      	movs	r2, #1
  403014:	701a      	strb	r2, [r3, #0]
				}
				break;
  403016:	e08f      	b.n	403138 <ActivateValves+0x1a4>
					ctrlState = waitCycles;
					nextCtrlState = holdCuff;
				#else
					#ifndef ALGO_TEST_MODE_EN
						/* If operating in pressure control mode */
						ReadPressureSen(BOARD_TWI, ADDR_PSEN1, pBuff);
  403018:	1d3b      	adds	r3, r7, #4
  40301a:	461a      	mov	r2, r3
  40301c:	2128      	movs	r1, #40	; 0x28
  40301e:	484f      	ldr	r0, [pc, #316]	; (40315c <ActivateValves+0x1c8>)
  403020:	4b4f      	ldr	r3, [pc, #316]	; (403160 <ActivateValves+0x1cc>)
  403022:	4798      	blx	r3
						temp = ((((uint16_t)pBuff[0])<<8)| pBuff[1]);
  403024:	793b      	ldrb	r3, [r7, #4]
  403026:	021b      	lsls	r3, r3, #8
  403028:	b21a      	sxth	r2, r3
  40302a:	797b      	ldrb	r3, [r7, #5]
  40302c:	b21b      	sxth	r3, r3
  40302e:	4313      	orrs	r3, r2
  403030:	b21b      	sxth	r3, r3
  403032:	81fb      	strh	r3, [r7, #14]
						pVal = ((float)temp/16383.0f)*PSEN1_MAXP;
  403034:	89fa      	ldrh	r2, [r7, #14]
  403036:	4b4b      	ldr	r3, [pc, #300]	; (403164 <ActivateValves+0x1d0>)
  403038:	4610      	mov	r0, r2
  40303a:	4798      	blx	r3
  40303c:	4602      	mov	r2, r0
  40303e:	4b4a      	ldr	r3, [pc, #296]	; (403168 <ActivateValves+0x1d4>)
  403040:	494a      	ldr	r1, [pc, #296]	; (40316c <ActivateValves+0x1d8>)
  403042:	4610      	mov	r0, r2
  403044:	4798      	blx	r3
  403046:	4603      	mov	r3, r0
  403048:	461a      	mov	r2, r3
  40304a:	4b49      	ldr	r3, [pc, #292]	; (403170 <ActivateValves+0x1dc>)
  40304c:	4949      	ldr	r1, [pc, #292]	; (403174 <ActivateValves+0x1e0>)
  40304e:	4610      	mov	r0, r2
  403050:	4798      	blx	r3
  403052:	4603      	mov	r3, r0
  403054:	60bb      	str	r3, [r7, #8]
						if((pVal>=(pSetPt-0.5f)) && (pVal<=(pSetPt+0.5f)))
  403056:	4b48      	ldr	r3, [pc, #288]	; (403178 <ActivateValves+0x1e4>)
  403058:	681a      	ldr	r2, [r3, #0]
  40305a:	4b48      	ldr	r3, [pc, #288]	; (40317c <ActivateValves+0x1e8>)
  40305c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  403060:	4610      	mov	r0, r2
  403062:	4798      	blx	r3
  403064:	4603      	mov	r3, r0
  403066:	461a      	mov	r2, r3
  403068:	4b45      	ldr	r3, [pc, #276]	; (403180 <ActivateValves+0x1ec>)
  40306a:	68b9      	ldr	r1, [r7, #8]
  40306c:	4610      	mov	r0, r2
  40306e:	4798      	blx	r3
  403070:	4603      	mov	r3, r0
  403072:	2b00      	cmp	r3, #0
  403074:	d016      	beq.n	4030a4 <ActivateValves+0x110>
  403076:	4b40      	ldr	r3, [pc, #256]	; (403178 <ActivateValves+0x1e4>)
  403078:	681a      	ldr	r2, [r3, #0]
  40307a:	4b42      	ldr	r3, [pc, #264]	; (403184 <ActivateValves+0x1f0>)
  40307c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  403080:	4610      	mov	r0, r2
  403082:	4798      	blx	r3
  403084:	4603      	mov	r3, r0
  403086:	461a      	mov	r2, r3
  403088:	4b3f      	ldr	r3, [pc, #252]	; (403188 <ActivateValves+0x1f4>)
  40308a:	68b9      	ldr	r1, [r7, #8]
  40308c:	4610      	mov	r0, r2
  40308e:	4798      	blx	r3
  403090:	4603      	mov	r3, r0
  403092:	2b00      	cmp	r3, #0
  403094:	d006      	beq.n	4030a4 <ActivateValves+0x110>
						{
							SetValveState(s1CloseS2Close);
  403096:	2000      	movs	r0, #0
  403098:	4b3c      	ldr	r3, [pc, #240]	; (40318c <ActivateValves+0x1f8>)
  40309a:	4798      	blx	r3
							ctrlState = holdCuff;
  40309c:	4b29      	ldr	r3, [pc, #164]	; (403144 <ActivateValves+0x1b0>)
  40309e:	2203      	movs	r2, #3
  4030a0:	701a      	strb	r2, [r3, #0]
						}
					#else
						ctrlState = holdCuff;	
					#endif
				#endif
				break;
  4030a2:	e049      	b.n	403138 <ActivateValves+0x1a4>
						if((pVal>=(pSetPt-0.5f)) && (pVal<=(pSetPt+0.5f)))
						{
							SetValveState(s1CloseS2Close);
							ctrlState = holdCuff;
						}
						else if(pVal<pSetPt)
  4030a4:	4b34      	ldr	r3, [pc, #208]	; (403178 <ActivateValves+0x1e4>)
  4030a6:	681a      	ldr	r2, [r3, #0]
  4030a8:	4b39      	ldr	r3, [pc, #228]	; (403190 <ActivateValves+0x1fc>)
  4030aa:	4611      	mov	r1, r2
  4030ac:	68b8      	ldr	r0, [r7, #8]
  4030ae:	4798      	blx	r3
  4030b0:	4603      	mov	r3, r0
  4030b2:	2b00      	cmp	r3, #0
  4030b4:	d003      	beq.n	4030be <ActivateValves+0x12a>
						{
							SetValveState(s1OpenS2Close);
  4030b6:	2002      	movs	r0, #2
  4030b8:	4b34      	ldr	r3, [pc, #208]	; (40318c <ActivateValves+0x1f8>)
  4030ba:	4798      	blx	r3
						}
					#else
						ctrlState = holdCuff;	
					#endif
				#endif
				break;
  4030bc:	e03c      	b.n	403138 <ActivateValves+0x1a4>
						}
						else if(pVal<pSetPt)
						{
							SetValveState(s1OpenS2Close);
						}
						else if(pVal>pSetPt)
  4030be:	4b2e      	ldr	r3, [pc, #184]	; (403178 <ActivateValves+0x1e4>)
  4030c0:	681a      	ldr	r2, [r3, #0]
  4030c2:	4b34      	ldr	r3, [pc, #208]	; (403194 <ActivateValves+0x200>)
  4030c4:	4611      	mov	r1, r2
  4030c6:	68b8      	ldr	r0, [r7, #8]
  4030c8:	4798      	blx	r3
  4030ca:	4603      	mov	r3, r0
  4030cc:	2b00      	cmp	r3, #0
  4030ce:	d100      	bne.n	4030d2 <ActivateValves+0x13e>
						}
					#else
						ctrlState = holdCuff;	
					#endif
				#endif
				break;
  4030d0:	e032      	b.n	403138 <ActivateValves+0x1a4>
						{
							SetValveState(s1OpenS2Close);
						}
						else if(pVal>pSetPt)
						{
							SetValveState(s1CloseS2Open);
  4030d2:	2001      	movs	r0, #1
  4030d4:	4b2d      	ldr	r3, [pc, #180]	; (40318c <ActivateValves+0x1f8>)
  4030d6:	4798      	blx	r3
						}
					#else
						ctrlState = holdCuff;	
					#endif
				#endif
				break;
  4030d8:	e02e      	b.n	403138 <ActivateValves+0x1a4>
			case waitCycles:
				if(tickCount>=tickDur)
  4030da:	4b1e      	ldr	r3, [pc, #120]	; (403154 <ActivateValves+0x1c0>)
  4030dc:	681a      	ldr	r2, [r3, #0]
  4030de:	4b1c      	ldr	r3, [pc, #112]	; (403150 <ActivateValves+0x1bc>)
  4030e0:	681b      	ldr	r3, [r3, #0]
  4030e2:	429a      	cmp	r2, r3
  4030e4:	d327      	bcc.n	403136 <ActivateValves+0x1a2>
				{
					ctrlState = nextCtrlState;
  4030e6:	4b1c      	ldr	r3, [pc, #112]	; (403158 <ActivateValves+0x1c4>)
  4030e8:	781a      	ldrb	r2, [r3, #0]
  4030ea:	4b16      	ldr	r3, [pc, #88]	; (403144 <ActivateValves+0x1b0>)
  4030ec:	701a      	strb	r2, [r3, #0]
					tickCount = 0;
  4030ee:	4b19      	ldr	r3, [pc, #100]	; (403154 <ActivateValves+0x1c0>)
  4030f0:	2200      	movs	r2, #0
  4030f2:	601a      	str	r2, [r3, #0]
					tickDur = 0;
  4030f4:	4b16      	ldr	r3, [pc, #88]	; (403150 <ActivateValves+0x1bc>)
  4030f6:	2200      	movs	r2, #0
  4030f8:	601a      	str	r2, [r3, #0]
				}
				break;
  4030fa:	e01c      	b.n	403136 <ActivateValves+0x1a2>
			case holdCuff:
				#ifndef ALGO_TEST_MODE_EN
					SetValveState(s1CloseS2Close);
  4030fc:	2000      	movs	r0, #0
  4030fe:	4b23      	ldr	r3, [pc, #140]	; (40318c <ActivateValves+0x1f8>)
  403100:	4798      	blx	r3
				#endif
				tickCount = 0;
  403102:	4b14      	ldr	r3, [pc, #80]	; (403154 <ActivateValves+0x1c0>)
  403104:	2200      	movs	r2, #0
  403106:	601a      	str	r2, [r3, #0]
				tickDur = holdDur;
  403108:	4b23      	ldr	r3, [pc, #140]	; (403198 <ActivateValves+0x204>)
  40310a:	681b      	ldr	r3, [r3, #0]
  40310c:	4a10      	ldr	r2, [pc, #64]	; (403150 <ActivateValves+0x1bc>)
  40310e:	6013      	str	r3, [r2, #0]
				ctrlState = waitCycles;
  403110:	4b0c      	ldr	r3, [pc, #48]	; (403144 <ActivateValves+0x1b0>)
  403112:	2202      	movs	r2, #2
  403114:	701a      	strb	r2, [r3, #0]
				nextCtrlState = releaseCuff;
  403116:	4b10      	ldr	r3, [pc, #64]	; (403158 <ActivateValves+0x1c4>)
  403118:	2204      	movs	r2, #4
  40311a:	701a      	strb	r2, [r3, #0]
				break;
  40311c:	e00c      	b.n	403138 <ActivateValves+0x1a4>
			case releaseCuff:
				#ifndef ALGO_TEST_MODE_EN
					SetValveState(s1CloseS2Open);
  40311e:	2001      	movs	r0, #1
  403120:	4b1a      	ldr	r3, [pc, #104]	; (40318c <ActivateValves+0x1f8>)
  403122:	4798      	blx	r3
				#endif
				#ifndef ALGO_TYPE_PK_DET
					ctrlState = fillCuff;
				#else
					ctrlState = insertDelay; 
  403124:	4b07      	ldr	r3, [pc, #28]	; (403144 <ActivateValves+0x1b0>)
  403126:	2200      	movs	r2, #0
  403128:	701a      	strb	r2, [r3, #0]
				#endif
				trigFound = 0;
  40312a:	4b05      	ldr	r3, [pc, #20]	; (403140 <ActivateValves+0x1ac>)
  40312c:	2200      	movs	r2, #0
  40312e:	701a      	strb	r2, [r3, #0]
				break;
  403130:	e002      	b.n	403138 <ActivateValves+0x1a4>
			default:
				break;
  403132:	bf00      	nop
  403134:	e000      	b.n	403138 <ActivateValves+0x1a4>
				{
					ctrlState = nextCtrlState;
					tickCount = 0;
					tickDur = 0;
				}
				break;
  403136:	bf00      	nop
				break;
			default:
				break;
		}
	}
}
  403138:	bf00      	nop
  40313a:	3710      	adds	r7, #16
  40313c:	46bd      	mov	sp, r7
  40313e:	bd80      	pop	{r7, pc}
  403140:	20000ac0 	.word	0x20000ac0
  403144:	20000adc 	.word	0x20000adc
  403148:	20000ad0 	.word	0x20000ad0
  40314c:	20000010 	.word	0x20000010
  403150:	20000ae4 	.word	0x20000ae4
  403154:	20000ae0 	.word	0x20000ae0
  403158:	20000004 	.word	0x20000004
  40315c:	40018000 	.word	0x40018000
  403160:	00400169 	.word	0x00400169
  403164:	004034fd 	.word	0x004034fd
  403168:	00403715 	.word	0x00403715
  40316c:	467ffc00 	.word	0x467ffc00
  403170:	004035ad 	.word	0x004035ad
  403174:	41700000 	.word	0x41700000
  403178:	20000008 	.word	0x20000008
  40317c:	00403399 	.word	0x00403399
  403180:	004038fd 	.word	0x004038fd
  403184:	0040339d 	.word	0x0040339d
  403188:	00403911 	.word	0x00403911
  40318c:	0040319d 	.word	0x0040319d
  403190:	004038e9 	.word	0x004038e9
  403194:	00403925 	.word	0x00403925
  403198:	2000000c 	.word	0x2000000c

0040319c <SetValveState>:

void SetValveState(enum valveStates st)
{
  40319c:	b580      	push	{r7, lr}
  40319e:	b082      	sub	sp, #8
  4031a0:	af00      	add	r7, sp, #0
  4031a2:	4603      	mov	r3, r0
  4031a4:	71fb      	strb	r3, [r7, #7]
	switch (st)
  4031a6:	79fb      	ldrb	r3, [r7, #7]
  4031a8:	2b03      	cmp	r3, #3
  4031aa:	d827      	bhi.n	4031fc <SetValveState+0x60>
  4031ac:	a201      	add	r2, pc, #4	; (adr r2, 4031b4 <SetValveState+0x18>)
  4031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4031b2:	bf00      	nop
  4031b4:	004031c5 	.word	0x004031c5
  4031b8:	004031d3 	.word	0x004031d3
  4031bc:	004031e1 	.word	0x004031e1
  4031c0:	004031ef 	.word	0x004031ef
	{
		case s1CloseS2Close:
			gpio_set_pin_low(PIN_INAVALVE1_IDX);
  4031c4:	200d      	movs	r0, #13
  4031c6:	4b0f      	ldr	r3, [pc, #60]	; (403204 <SetValveState+0x68>)
  4031c8:	4798      	blx	r3
			gpio_set_pin_low(PIN_INAVALVE2_IDX);
  4031ca:	200e      	movs	r0, #14
  4031cc:	4b0d      	ldr	r3, [pc, #52]	; (403204 <SetValveState+0x68>)
  4031ce:	4798      	blx	r3
			break;
  4031d0:	e014      	b.n	4031fc <SetValveState+0x60>
		case s1CloseS2Open:
			gpio_set_pin_low(PIN_INAVALVE1_IDX);
  4031d2:	200d      	movs	r0, #13
  4031d4:	4b0b      	ldr	r3, [pc, #44]	; (403204 <SetValveState+0x68>)
  4031d6:	4798      	blx	r3
			gpio_set_pin_high(PIN_INAVALVE2_IDX);
  4031d8:	200e      	movs	r0, #14
  4031da:	4b0b      	ldr	r3, [pc, #44]	; (403208 <SetValveState+0x6c>)
  4031dc:	4798      	blx	r3
			break;
  4031de:	e00d      	b.n	4031fc <SetValveState+0x60>
		case s1OpenS2Close:
			gpio_set_pin_high(PIN_INAVALVE1_IDX);
  4031e0:	200d      	movs	r0, #13
  4031e2:	4b09      	ldr	r3, [pc, #36]	; (403208 <SetValveState+0x6c>)
  4031e4:	4798      	blx	r3
			gpio_set_pin_low(PIN_INAVALVE2_IDX);
  4031e6:	200e      	movs	r0, #14
  4031e8:	4b06      	ldr	r3, [pc, #24]	; (403204 <SetValveState+0x68>)
  4031ea:	4798      	blx	r3
			break;
  4031ec:	e006      	b.n	4031fc <SetValveState+0x60>
		case s1OpenS2Open:
			gpio_set_pin_high(PIN_INAVALVE1_IDX);
  4031ee:	200d      	movs	r0, #13
  4031f0:	4b05      	ldr	r3, [pc, #20]	; (403208 <SetValveState+0x6c>)
  4031f2:	4798      	blx	r3
			gpio_set_pin_high(PIN_INAVALVE2_IDX);
  4031f4:	200e      	movs	r0, #14
  4031f6:	4b04      	ldr	r3, [pc, #16]	; (403208 <SetValveState+0x6c>)
  4031f8:	4798      	blx	r3
			break;
  4031fa:	bf00      	nop
	}
}
  4031fc:	bf00      	nop
  4031fe:	3708      	adds	r7, #8
  403200:	46bd      	mov	sp, r7
  403202:	bd80      	pop	{r7, pc}
  403204:	00401b31 	.word	0x00401b31
  403208:	00401b01 	.word	0x00401b01

0040320c <SendDispData>:

void SendDispData(void)
{
  40320c:	b580      	push	{r7, lr}
  40320e:	af00      	add	r7, sp, #0
	/* If previous transfer not complete, return */
	#if defined(BOARD_XPLND)
		if (!(uart_get_status(DISP_UART) & UART_SR_ENDTX)) 
	#elif defined(BOARD_NIRA91)
		if (!(usart_get_status(DISP_USART) & US_CSR_ENDTX)) 
  403210:	4814      	ldr	r0, [pc, #80]	; (403264 <SendDispData+0x58>)
  403212:	4b15      	ldr	r3, [pc, #84]	; (403268 <SendDispData+0x5c>)
  403214:	4798      	blx	r3
  403216:	4603      	mov	r3, r0
  403218:	f003 0310 	and.w	r3, r3, #16
  40321c:	2b00      	cmp	r3, #0
  40321e:	d01f      	beq.n	403260 <SendDispData+0x54>
		}
	#else
		#ifndef ALGO_TYPE_PK_DET
			#warning "Invalid Algorithm selected..."
		#else
			if(dispTick>1000)
  403220:	4b12      	ldr	r3, [pc, #72]	; (40326c <SendDispData+0x60>)
  403222:	681b      	ldr	r3, [r3, #0]
  403224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403228:	d91b      	bls.n	403262 <SendDispData+0x56>
			{
				sprintf((char*)dispPkt,"Avg = %lu\r\n",avgCycleTime);
  40322a:	4b11      	ldr	r3, [pc, #68]	; (403270 <SendDispData+0x64>)
  40322c:	681b      	ldr	r3, [r3, #0]
  40322e:	461a      	mov	r2, r3
  403230:	4910      	ldr	r1, [pc, #64]	; (403274 <SendDispData+0x68>)
  403232:	4811      	ldr	r0, [pc, #68]	; (403278 <SendDispData+0x6c>)
  403234:	4b11      	ldr	r3, [pc, #68]	; (40327c <SendDispData+0x70>)
  403236:	4798      	blx	r3
				/* Initiate PDC Transfer to display avg cycle time */
				dispPdcPkt.ul_addr = (uint32_t) dispPkt;
  403238:	4a0f      	ldr	r2, [pc, #60]	; (403278 <SendDispData+0x6c>)
  40323a:	4b11      	ldr	r3, [pc, #68]	; (403280 <SendDispData+0x74>)
  40323c:	601a      	str	r2, [r3, #0]
				dispPdcPkt.ul_size = strlen((char*)dispPkt);
  40323e:	480e      	ldr	r0, [pc, #56]	; (403278 <SendDispData+0x6c>)
  403240:	4b10      	ldr	r3, [pc, #64]	; (403284 <SendDispData+0x78>)
  403242:	4798      	blx	r3
  403244:	4602      	mov	r2, r0
  403246:	4b0e      	ldr	r3, [pc, #56]	; (403280 <SendDispData+0x74>)
  403248:	605a      	str	r2, [r3, #4]
				pdc_tx_init(dispUartPdcBase, &dispPdcPkt, NULL);
  40324a:	4b0f      	ldr	r3, [pc, #60]	; (403288 <SendDispData+0x7c>)
  40324c:	681b      	ldr	r3, [r3, #0]
  40324e:	2200      	movs	r2, #0
  403250:	490b      	ldr	r1, [pc, #44]	; (403280 <SendDispData+0x74>)
  403252:	4618      	mov	r0, r3
  403254:	4b0d      	ldr	r3, [pc, #52]	; (40328c <SendDispData+0x80>)
  403256:	4798      	blx	r3
				dispTick = 0;
  403258:	4b04      	ldr	r3, [pc, #16]	; (40326c <SendDispData+0x60>)
  40325a:	2200      	movs	r2, #0
  40325c:	601a      	str	r2, [r3, #0]
  40325e:	e000      	b.n	403262 <SendDispData+0x56>
		if (!(uart_get_status(DISP_UART) & UART_SR_ENDTX)) 
	#elif defined(BOARD_NIRA91)
		if (!(usart_get_status(DISP_USART) & US_CSR_ENDTX)) 
	#endif
	{
		return;
  403260:	bf00      	nop
				pdc_tx_init(dispUartPdcBase, &dispPdcPkt, NULL);
				dispTick = 0;
			}
		#endif
	#endif
}
  403262:	bd80      	pop	{r7, pc}
  403264:	40028000 	.word	0x40028000
  403268:	0040123d 	.word	0x0040123d
  40326c:	20000ad8 	.word	0x20000ad8
  403270:	20000ad0 	.word	0x20000ad0
  403274:	00408b7c 	.word	0x00408b7c
  403278:	20000c1c 	.word	0x20000c1c
  40327c:	00403b85 	.word	0x00403b85
  403280:	20000d1c 	.word	0x20000d1c
  403284:	00403c01 	.word	0x00403c01
  403288:	20000d34 	.word	0x20000d34
  40328c:	004016cd 	.word	0x004016cd

00403290 <ManageResP>:
	pkt.length = dLen;
	twi_master_read(Port, &pkt);
}

void ManageResP(void)
{
  403290:	b580      	push	{r7, lr}
  403292:	b082      	sub	sp, #8
  403294:	af00      	add	r7, sp, #0
	#ifndef ALGO_TEST_MODE_EN
		uint16_t temp;
		uint8_t pBuff[3];

		ReadPressureSen(BOARD_TWI, ADDR_PSEN2, pBuff);
  403296:	463b      	mov	r3, r7
  403298:	461a      	mov	r2, r3
  40329a:	2148      	movs	r1, #72	; 0x48
  40329c:	481d      	ldr	r0, [pc, #116]	; (403314 <ManageResP+0x84>)
  40329e:	4b1e      	ldr	r3, [pc, #120]	; (403318 <ManageResP+0x88>)
  4032a0:	4798      	blx	r3
		temp = ((((uint16_t)pBuff[0])<<8)| pBuff[1]);
  4032a2:	783b      	ldrb	r3, [r7, #0]
  4032a4:	021b      	lsls	r3, r3, #8
  4032a6:	b21a      	sxth	r2, r3
  4032a8:	787b      	ldrb	r3, [r7, #1]
  4032aa:	b21b      	sxth	r3, r3
  4032ac:	4313      	orrs	r3, r2
  4032ae:	b21b      	sxth	r3, r3
  4032b0:	80fb      	strh	r3, [r7, #6]
		resPVal = ((float)temp/16383.0f)*PSEN2_MAXP;
  4032b2:	88fa      	ldrh	r2, [r7, #6]
  4032b4:	4b19      	ldr	r3, [pc, #100]	; (40331c <ManageResP+0x8c>)
  4032b6:	4610      	mov	r0, r2
  4032b8:	4798      	blx	r3
  4032ba:	4602      	mov	r2, r0
  4032bc:	4b18      	ldr	r3, [pc, #96]	; (403320 <ManageResP+0x90>)
  4032be:	4919      	ldr	r1, [pc, #100]	; (403324 <ManageResP+0x94>)
  4032c0:	4610      	mov	r0, r2
  4032c2:	4798      	blx	r3
  4032c4:	4603      	mov	r3, r0
  4032c6:	461a      	mov	r2, r3
  4032c8:	4b17      	ldr	r3, [pc, #92]	; (403328 <ManageResP+0x98>)
  4032ca:	4918      	ldr	r1, [pc, #96]	; (40332c <ManageResP+0x9c>)
  4032cc:	4610      	mov	r0, r2
  4032ce:	4798      	blx	r3
  4032d0:	4603      	mov	r3, r0
  4032d2:	461a      	mov	r2, r3
  4032d4:	4b16      	ldr	r3, [pc, #88]	; (403330 <ManageResP+0xa0>)
  4032d6:	601a      	str	r2, [r3, #0]
	
		if(resPVal>=MAX_RESERVOIR_P)
  4032d8:	4b15      	ldr	r3, [pc, #84]	; (403330 <ManageResP+0xa0>)
  4032da:	681a      	ldr	r2, [r3, #0]
  4032dc:	4b15      	ldr	r3, [pc, #84]	; (403334 <ManageResP+0xa4>)
  4032de:	4916      	ldr	r1, [pc, #88]	; (403338 <ManageResP+0xa8>)
  4032e0:	4610      	mov	r0, r2
  4032e2:	4798      	blx	r3
  4032e4:	4603      	mov	r3, r0
  4032e6:	2b00      	cmp	r3, #0
  4032e8:	d003      	beq.n	4032f2 <ManageResP+0x62>
		{
			/* Turn off the compressor */
			gpio_set_pin_low(PIN_AIR_PUMP_IDX);		
  4032ea:	2018      	movs	r0, #24
  4032ec:	4b13      	ldr	r3, [pc, #76]	; (40333c <ManageResP+0xac>)
  4032ee:	4798      	blx	r3
		{
			/* Turn on the compressor */
			gpio_set_pin_high(PIN_AIR_PUMP_IDX);
		}
	#endif
}
  4032f0:	e00c      	b.n	40330c <ManageResP+0x7c>
		if(resPVal>=MAX_RESERVOIR_P)
		{
			/* Turn off the compressor */
			gpio_set_pin_low(PIN_AIR_PUMP_IDX);		
		}
		else if(resPVal<CUTOFF_RESERVOIR_P)
  4032f2:	4b0f      	ldr	r3, [pc, #60]	; (403330 <ManageResP+0xa0>)
  4032f4:	681a      	ldr	r2, [r3, #0]
  4032f6:	4b12      	ldr	r3, [pc, #72]	; (403340 <ManageResP+0xb0>)
  4032f8:	4912      	ldr	r1, [pc, #72]	; (403344 <ManageResP+0xb4>)
  4032fa:	4610      	mov	r0, r2
  4032fc:	4798      	blx	r3
  4032fe:	4603      	mov	r3, r0
  403300:	2b00      	cmp	r3, #0
  403302:	d100      	bne.n	403306 <ManageResP+0x76>
		{
			/* Turn on the compressor */
			gpio_set_pin_high(PIN_AIR_PUMP_IDX);
		}
	#endif
}
  403304:	e002      	b.n	40330c <ManageResP+0x7c>
			gpio_set_pin_low(PIN_AIR_PUMP_IDX);		
		}
		else if(resPVal<CUTOFF_RESERVOIR_P)
		{
			/* Turn on the compressor */
			gpio_set_pin_high(PIN_AIR_PUMP_IDX);
  403306:	2018      	movs	r0, #24
  403308:	4b0f      	ldr	r3, [pc, #60]	; (403348 <ManageResP+0xb8>)
  40330a:	4798      	blx	r3
		}
	#endif
}
  40330c:	bf00      	nop
  40330e:	3708      	adds	r7, #8
  403310:	46bd      	mov	sp, r7
  403312:	bd80      	pop	{r7, pc}
  403314:	40018000 	.word	0x40018000
  403318:	00400169 	.word	0x00400169
  40331c:	004034fd 	.word	0x004034fd
  403320:	00403715 	.word	0x00403715
  403324:	467ffc00 	.word	0x467ffc00
  403328:	004035ad 	.word	0x004035ad
  40332c:	41f00000 	.word	0x41f00000
  403330:	20000ae8 	.word	0x20000ae8
  403334:	00403911 	.word	0x00403911
  403338:	41200000 	.word	0x41200000
  40333c:	00401b31 	.word	0x00401b31
  403340:	004038e9 	.word	0x004038e9
  403344:	41180000 	.word	0x41180000
  403348:	00401b01 	.word	0x00401b01

0040334c <PollSwitches>:

void PollSwitches(void)
{
  40334c:	b580      	push	{r7, lr}
  40334e:	af00      	add	r7, sp, #0
	#if defined(BOARD_NIRA91) 
		if(gpio_pin_is_low(PIN_SW_PRESS_UP_IDX))
  403350:	2020      	movs	r0, #32
  403352:	4b0e      	ldr	r3, [pc, #56]	; (40338c <PollSwitches+0x40>)
  403354:	4798      	blx	r3
  403356:	4603      	mov	r3, r0
  403358:	2b00      	cmp	r3, #0
  40335a:	d014      	beq.n	403386 <PollSwitches+0x3a>
		{
			
		}
		else if(gpio_pin_is_low(PIN_SW_PRESS_DN_IDX))
  40335c:	2021      	movs	r0, #33	; 0x21
  40335e:	4b0b      	ldr	r3, [pc, #44]	; (40338c <PollSwitches+0x40>)
  403360:	4798      	blx	r3
  403362:	4603      	mov	r3, r0
  403364:	2b00      	cmp	r3, #0
  403366:	d00e      	beq.n	403386 <PollSwitches+0x3a>
		{
		
		}
		else if(gpio_pin_is_low(PIN_SW_DURATION_UP_IDX))
  403368:	2022      	movs	r0, #34	; 0x22
  40336a:	4b08      	ldr	r3, [pc, #32]	; (40338c <PollSwitches+0x40>)
  40336c:	4798      	blx	r3
  40336e:	4603      	mov	r3, r0
  403370:	2b00      	cmp	r3, #0
  403372:	d008      	beq.n	403386 <PollSwitches+0x3a>
		{

		}
		else if(gpio_pin_is_low(PIN_SW_DURATION_DN_IDX))
  403374:	2023      	movs	r0, #35	; 0x23
  403376:	4b05      	ldr	r3, [pc, #20]	; (40338c <PollSwitches+0x40>)
  403378:	4798      	blx	r3
  40337a:	4603      	mov	r3, r0
  40337c:	2b00      	cmp	r3, #0
  40337e:	d002      	beq.n	403386 <PollSwitches+0x3a>
		{

		}
		else if(gpio_pin_is_low(PIN_SW_DELAY_UP_IDX))
  403380:	2013      	movs	r0, #19
  403382:	4b02      	ldr	r3, [pc, #8]	; (40338c <PollSwitches+0x40>)
  403384:	4798      	blx	r3
			{
				
			}
		#endif
	#endif
  403386:	bf00      	nop
  403388:	bd80      	pop	{r7, pc}
  40338a:	bf00      	nop
  40338c:	00401ad1 	.word	0x00401ad1

00403390 <__aeabi_frsub>:
  403390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  403394:	e002      	b.n	40339c <__addsf3>
  403396:	bf00      	nop

00403398 <__aeabi_fsub>:
  403398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040339c <__addsf3>:
  40339c:	0042      	lsls	r2, r0, #1
  40339e:	bf1f      	itttt	ne
  4033a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4033a4:	ea92 0f03 	teqne	r2, r3
  4033a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4033ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4033b0:	d06a      	beq.n	403488 <__addsf3+0xec>
  4033b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4033b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4033ba:	bfc1      	itttt	gt
  4033bc:	18d2      	addgt	r2, r2, r3
  4033be:	4041      	eorgt	r1, r0
  4033c0:	4048      	eorgt	r0, r1
  4033c2:	4041      	eorgt	r1, r0
  4033c4:	bfb8      	it	lt
  4033c6:	425b      	neglt	r3, r3
  4033c8:	2b19      	cmp	r3, #25
  4033ca:	bf88      	it	hi
  4033cc:	4770      	bxhi	lr
  4033ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4033d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4033d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  4033da:	bf18      	it	ne
  4033dc:	4240      	negne	r0, r0
  4033de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4033e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4033e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4033ea:	bf18      	it	ne
  4033ec:	4249      	negne	r1, r1
  4033ee:	ea92 0f03 	teq	r2, r3
  4033f2:	d03f      	beq.n	403474 <__addsf3+0xd8>
  4033f4:	f1a2 0201 	sub.w	r2, r2, #1
  4033f8:	fa41 fc03 	asr.w	ip, r1, r3
  4033fc:	eb10 000c 	adds.w	r0, r0, ip
  403400:	f1c3 0320 	rsb	r3, r3, #32
  403404:	fa01 f103 	lsl.w	r1, r1, r3
  403408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40340c:	d502      	bpl.n	403414 <__addsf3+0x78>
  40340e:	4249      	negs	r1, r1
  403410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  403414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  403418:	d313      	bcc.n	403442 <__addsf3+0xa6>
  40341a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40341e:	d306      	bcc.n	40342e <__addsf3+0x92>
  403420:	0840      	lsrs	r0, r0, #1
  403422:	ea4f 0131 	mov.w	r1, r1, rrx
  403426:	f102 0201 	add.w	r2, r2, #1
  40342a:	2afe      	cmp	r2, #254	; 0xfe
  40342c:	d251      	bcs.n	4034d2 <__addsf3+0x136>
  40342e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  403432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403436:	bf08      	it	eq
  403438:	f020 0001 	biceq.w	r0, r0, #1
  40343c:	ea40 0003 	orr.w	r0, r0, r3
  403440:	4770      	bx	lr
  403442:	0049      	lsls	r1, r1, #1
  403444:	eb40 0000 	adc.w	r0, r0, r0
  403448:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40344c:	f1a2 0201 	sub.w	r2, r2, #1
  403450:	d1ed      	bne.n	40342e <__addsf3+0x92>
  403452:	fab0 fc80 	clz	ip, r0
  403456:	f1ac 0c08 	sub.w	ip, ip, #8
  40345a:	ebb2 020c 	subs.w	r2, r2, ip
  40345e:	fa00 f00c 	lsl.w	r0, r0, ip
  403462:	bfaa      	itet	ge
  403464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  403468:	4252      	neglt	r2, r2
  40346a:	4318      	orrge	r0, r3
  40346c:	bfbc      	itt	lt
  40346e:	40d0      	lsrlt	r0, r2
  403470:	4318      	orrlt	r0, r3
  403472:	4770      	bx	lr
  403474:	f092 0f00 	teq	r2, #0
  403478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40347c:	bf06      	itte	eq
  40347e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  403482:	3201      	addeq	r2, #1
  403484:	3b01      	subne	r3, #1
  403486:	e7b5      	b.n	4033f4 <__addsf3+0x58>
  403488:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40348c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  403490:	bf18      	it	ne
  403492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  403496:	d021      	beq.n	4034dc <__addsf3+0x140>
  403498:	ea92 0f03 	teq	r2, r3
  40349c:	d004      	beq.n	4034a8 <__addsf3+0x10c>
  40349e:	f092 0f00 	teq	r2, #0
  4034a2:	bf08      	it	eq
  4034a4:	4608      	moveq	r0, r1
  4034a6:	4770      	bx	lr
  4034a8:	ea90 0f01 	teq	r0, r1
  4034ac:	bf1c      	itt	ne
  4034ae:	2000      	movne	r0, #0
  4034b0:	4770      	bxne	lr
  4034b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4034b6:	d104      	bne.n	4034c2 <__addsf3+0x126>
  4034b8:	0040      	lsls	r0, r0, #1
  4034ba:	bf28      	it	cs
  4034bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4034c0:	4770      	bx	lr
  4034c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  4034c6:	bf3c      	itt	cc
  4034c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4034cc:	4770      	bxcc	lr
  4034ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4034d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  4034d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4034da:	4770      	bx	lr
  4034dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
  4034e0:	bf16      	itet	ne
  4034e2:	4608      	movne	r0, r1
  4034e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  4034e8:	4601      	movne	r1, r0
  4034ea:	0242      	lsls	r2, r0, #9
  4034ec:	bf06      	itte	eq
  4034ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4034f2:	ea90 0f01 	teqeq	r0, r1
  4034f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4034fa:	4770      	bx	lr

004034fc <__aeabi_ui2f>:
  4034fc:	f04f 0300 	mov.w	r3, #0
  403500:	e004      	b.n	40350c <__aeabi_i2f+0x8>
  403502:	bf00      	nop

00403504 <__aeabi_i2f>:
  403504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  403508:	bf48      	it	mi
  40350a:	4240      	negmi	r0, r0
  40350c:	ea5f 0c00 	movs.w	ip, r0
  403510:	bf08      	it	eq
  403512:	4770      	bxeq	lr
  403514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  403518:	4601      	mov	r1, r0
  40351a:	f04f 0000 	mov.w	r0, #0
  40351e:	e01c      	b.n	40355a <__aeabi_l2f+0x2a>

00403520 <__aeabi_ul2f>:
  403520:	ea50 0201 	orrs.w	r2, r0, r1
  403524:	bf08      	it	eq
  403526:	4770      	bxeq	lr
  403528:	f04f 0300 	mov.w	r3, #0
  40352c:	e00a      	b.n	403544 <__aeabi_l2f+0x14>
  40352e:	bf00      	nop

00403530 <__aeabi_l2f>:
  403530:	ea50 0201 	orrs.w	r2, r0, r1
  403534:	bf08      	it	eq
  403536:	4770      	bxeq	lr
  403538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40353c:	d502      	bpl.n	403544 <__aeabi_l2f+0x14>
  40353e:	4240      	negs	r0, r0
  403540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403544:	ea5f 0c01 	movs.w	ip, r1
  403548:	bf02      	ittt	eq
  40354a:	4684      	moveq	ip, r0
  40354c:	4601      	moveq	r1, r0
  40354e:	2000      	moveq	r0, #0
  403550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  403554:	bf08      	it	eq
  403556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40355a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40355e:	fabc f28c 	clz	r2, ip
  403562:	3a08      	subs	r2, #8
  403564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  403568:	db10      	blt.n	40358c <__aeabi_l2f+0x5c>
  40356a:	fa01 fc02 	lsl.w	ip, r1, r2
  40356e:	4463      	add	r3, ip
  403570:	fa00 fc02 	lsl.w	ip, r0, r2
  403574:	f1c2 0220 	rsb	r2, r2, #32
  403578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40357c:	fa20 f202 	lsr.w	r2, r0, r2
  403580:	eb43 0002 	adc.w	r0, r3, r2
  403584:	bf08      	it	eq
  403586:	f020 0001 	biceq.w	r0, r0, #1
  40358a:	4770      	bx	lr
  40358c:	f102 0220 	add.w	r2, r2, #32
  403590:	fa01 fc02 	lsl.w	ip, r1, r2
  403594:	f1c2 0220 	rsb	r2, r2, #32
  403598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40359c:	fa21 f202 	lsr.w	r2, r1, r2
  4035a0:	eb43 0002 	adc.w	r0, r3, r2
  4035a4:	bf08      	it	eq
  4035a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4035aa:	4770      	bx	lr

004035ac <__aeabi_fmul>:
  4035ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4035b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4035b4:	bf1e      	ittt	ne
  4035b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4035ba:	ea92 0f0c 	teqne	r2, ip
  4035be:	ea93 0f0c 	teqne	r3, ip
  4035c2:	d06f      	beq.n	4036a4 <__aeabi_fmul+0xf8>
  4035c4:	441a      	add	r2, r3
  4035c6:	ea80 0c01 	eor.w	ip, r0, r1
  4035ca:	0240      	lsls	r0, r0, #9
  4035cc:	bf18      	it	ne
  4035ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4035d2:	d01e      	beq.n	403612 <__aeabi_fmul+0x66>
  4035d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  4035d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  4035dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4035e0:	fba0 3101 	umull	r3, r1, r0, r1
  4035e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4035e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4035ec:	bf3e      	ittt	cc
  4035ee:	0049      	lslcc	r1, r1, #1
  4035f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4035f4:	005b      	lslcc	r3, r3, #1
  4035f6:	ea40 0001 	orr.w	r0, r0, r1
  4035fa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4035fe:	2afd      	cmp	r2, #253	; 0xfd
  403600:	d81d      	bhi.n	40363e <__aeabi_fmul+0x92>
  403602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  403606:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40360a:	bf08      	it	eq
  40360c:	f020 0001 	biceq.w	r0, r0, #1
  403610:	4770      	bx	lr
  403612:	f090 0f00 	teq	r0, #0
  403616:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40361a:	bf08      	it	eq
  40361c:	0249      	lsleq	r1, r1, #9
  40361e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  403622:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  403626:	3a7f      	subs	r2, #127	; 0x7f
  403628:	bfc2      	ittt	gt
  40362a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40362e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  403632:	4770      	bxgt	lr
  403634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403638:	f04f 0300 	mov.w	r3, #0
  40363c:	3a01      	subs	r2, #1
  40363e:	dc5d      	bgt.n	4036fc <__aeabi_fmul+0x150>
  403640:	f112 0f19 	cmn.w	r2, #25
  403644:	bfdc      	itt	le
  403646:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40364a:	4770      	bxle	lr
  40364c:	f1c2 0200 	rsb	r2, r2, #0
  403650:	0041      	lsls	r1, r0, #1
  403652:	fa21 f102 	lsr.w	r1, r1, r2
  403656:	f1c2 0220 	rsb	r2, r2, #32
  40365a:	fa00 fc02 	lsl.w	ip, r0, r2
  40365e:	ea5f 0031 	movs.w	r0, r1, rrx
  403662:	f140 0000 	adc.w	r0, r0, #0
  403666:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40366a:	bf08      	it	eq
  40366c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  403670:	4770      	bx	lr
  403672:	f092 0f00 	teq	r2, #0
  403676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40367a:	bf02      	ittt	eq
  40367c:	0040      	lsleq	r0, r0, #1
  40367e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  403682:	3a01      	subeq	r2, #1
  403684:	d0f9      	beq.n	40367a <__aeabi_fmul+0xce>
  403686:	ea40 000c 	orr.w	r0, r0, ip
  40368a:	f093 0f00 	teq	r3, #0
  40368e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403692:	bf02      	ittt	eq
  403694:	0049      	lsleq	r1, r1, #1
  403696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40369a:	3b01      	subeq	r3, #1
  40369c:	d0f9      	beq.n	403692 <__aeabi_fmul+0xe6>
  40369e:	ea41 010c 	orr.w	r1, r1, ip
  4036a2:	e78f      	b.n	4035c4 <__aeabi_fmul+0x18>
  4036a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4036a8:	ea92 0f0c 	teq	r2, ip
  4036ac:	bf18      	it	ne
  4036ae:	ea93 0f0c 	teqne	r3, ip
  4036b2:	d00a      	beq.n	4036ca <__aeabi_fmul+0x11e>
  4036b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4036b8:	bf18      	it	ne
  4036ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4036be:	d1d8      	bne.n	403672 <__aeabi_fmul+0xc6>
  4036c0:	ea80 0001 	eor.w	r0, r0, r1
  4036c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4036c8:	4770      	bx	lr
  4036ca:	f090 0f00 	teq	r0, #0
  4036ce:	bf17      	itett	ne
  4036d0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  4036d4:	4608      	moveq	r0, r1
  4036d6:	f091 0f00 	teqne	r1, #0
  4036da:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  4036de:	d014      	beq.n	40370a <__aeabi_fmul+0x15e>
  4036e0:	ea92 0f0c 	teq	r2, ip
  4036e4:	d101      	bne.n	4036ea <__aeabi_fmul+0x13e>
  4036e6:	0242      	lsls	r2, r0, #9
  4036e8:	d10f      	bne.n	40370a <__aeabi_fmul+0x15e>
  4036ea:	ea93 0f0c 	teq	r3, ip
  4036ee:	d103      	bne.n	4036f8 <__aeabi_fmul+0x14c>
  4036f0:	024b      	lsls	r3, r1, #9
  4036f2:	bf18      	it	ne
  4036f4:	4608      	movne	r0, r1
  4036f6:	d108      	bne.n	40370a <__aeabi_fmul+0x15e>
  4036f8:	ea80 0001 	eor.w	r0, r0, r1
  4036fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  403700:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403704:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403708:	4770      	bx	lr
  40370a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40370e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  403712:	4770      	bx	lr

00403714 <__aeabi_fdiv>:
  403714:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403718:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40371c:	bf1e      	ittt	ne
  40371e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  403722:	ea92 0f0c 	teqne	r2, ip
  403726:	ea93 0f0c 	teqne	r3, ip
  40372a:	d069      	beq.n	403800 <__aeabi_fdiv+0xec>
  40372c:	eba2 0203 	sub.w	r2, r2, r3
  403730:	ea80 0c01 	eor.w	ip, r0, r1
  403734:	0249      	lsls	r1, r1, #9
  403736:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40373a:	d037      	beq.n	4037ac <__aeabi_fdiv+0x98>
  40373c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403740:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  403744:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  403748:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40374c:	428b      	cmp	r3, r1
  40374e:	bf38      	it	cc
  403750:	005b      	lslcc	r3, r3, #1
  403752:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  403756:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40375a:	428b      	cmp	r3, r1
  40375c:	bf24      	itt	cs
  40375e:	1a5b      	subcs	r3, r3, r1
  403760:	ea40 000c 	orrcs.w	r0, r0, ip
  403764:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  403768:	bf24      	itt	cs
  40376a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40376e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403772:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  403776:	bf24      	itt	cs
  403778:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40377c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403780:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  403784:	bf24      	itt	cs
  403786:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40378a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40378e:	011b      	lsls	r3, r3, #4
  403790:	bf18      	it	ne
  403792:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  403796:	d1e0      	bne.n	40375a <__aeabi_fdiv+0x46>
  403798:	2afd      	cmp	r2, #253	; 0xfd
  40379a:	f63f af50 	bhi.w	40363e <__aeabi_fmul+0x92>
  40379e:	428b      	cmp	r3, r1
  4037a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4037a4:	bf08      	it	eq
  4037a6:	f020 0001 	biceq.w	r0, r0, #1
  4037aa:	4770      	bx	lr
  4037ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4037b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4037b4:	327f      	adds	r2, #127	; 0x7f
  4037b6:	bfc2      	ittt	gt
  4037b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4037bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4037c0:	4770      	bxgt	lr
  4037c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4037c6:	f04f 0300 	mov.w	r3, #0
  4037ca:	3a01      	subs	r2, #1
  4037cc:	e737      	b.n	40363e <__aeabi_fmul+0x92>
  4037ce:	f092 0f00 	teq	r2, #0
  4037d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4037d6:	bf02      	ittt	eq
  4037d8:	0040      	lsleq	r0, r0, #1
  4037da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4037de:	3a01      	subeq	r2, #1
  4037e0:	d0f9      	beq.n	4037d6 <__aeabi_fdiv+0xc2>
  4037e2:	ea40 000c 	orr.w	r0, r0, ip
  4037e6:	f093 0f00 	teq	r3, #0
  4037ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4037ee:	bf02      	ittt	eq
  4037f0:	0049      	lsleq	r1, r1, #1
  4037f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4037f6:	3b01      	subeq	r3, #1
  4037f8:	d0f9      	beq.n	4037ee <__aeabi_fdiv+0xda>
  4037fa:	ea41 010c 	orr.w	r1, r1, ip
  4037fe:	e795      	b.n	40372c <__aeabi_fdiv+0x18>
  403800:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  403804:	ea92 0f0c 	teq	r2, ip
  403808:	d108      	bne.n	40381c <__aeabi_fdiv+0x108>
  40380a:	0242      	lsls	r2, r0, #9
  40380c:	f47f af7d 	bne.w	40370a <__aeabi_fmul+0x15e>
  403810:	ea93 0f0c 	teq	r3, ip
  403814:	f47f af70 	bne.w	4036f8 <__aeabi_fmul+0x14c>
  403818:	4608      	mov	r0, r1
  40381a:	e776      	b.n	40370a <__aeabi_fmul+0x15e>
  40381c:	ea93 0f0c 	teq	r3, ip
  403820:	d104      	bne.n	40382c <__aeabi_fdiv+0x118>
  403822:	024b      	lsls	r3, r1, #9
  403824:	f43f af4c 	beq.w	4036c0 <__aeabi_fmul+0x114>
  403828:	4608      	mov	r0, r1
  40382a:	e76e      	b.n	40370a <__aeabi_fmul+0x15e>
  40382c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  403830:	bf18      	it	ne
  403832:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  403836:	d1ca      	bne.n	4037ce <__aeabi_fdiv+0xba>
  403838:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40383c:	f47f af5c 	bne.w	4036f8 <__aeabi_fmul+0x14c>
  403840:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  403844:	f47f af3c 	bne.w	4036c0 <__aeabi_fmul+0x114>
  403848:	e75f      	b.n	40370a <__aeabi_fmul+0x15e>
  40384a:	bf00      	nop

0040384c <__gesf2>:
  40384c:	f04f 3cff 	mov.w	ip, #4294967295
  403850:	e006      	b.n	403860 <__cmpsf2+0x4>
  403852:	bf00      	nop

00403854 <__lesf2>:
  403854:	f04f 0c01 	mov.w	ip, #1
  403858:	e002      	b.n	403860 <__cmpsf2+0x4>
  40385a:	bf00      	nop

0040385c <__cmpsf2>:
  40385c:	f04f 0c01 	mov.w	ip, #1
  403860:	f84d cd04 	str.w	ip, [sp, #-4]!
  403864:	ea4f 0240 	mov.w	r2, r0, lsl #1
  403868:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40386c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  403870:	bf18      	it	ne
  403872:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  403876:	d011      	beq.n	40389c <__cmpsf2+0x40>
  403878:	b001      	add	sp, #4
  40387a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  40387e:	bf18      	it	ne
  403880:	ea90 0f01 	teqne	r0, r1
  403884:	bf58      	it	pl
  403886:	ebb2 0003 	subspl.w	r0, r2, r3
  40388a:	bf88      	it	hi
  40388c:	17c8      	asrhi	r0, r1, #31
  40388e:	bf38      	it	cc
  403890:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  403894:	bf18      	it	ne
  403896:	f040 0001 	orrne.w	r0, r0, #1
  40389a:	4770      	bx	lr
  40389c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4038a0:	d102      	bne.n	4038a8 <__cmpsf2+0x4c>
  4038a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4038a6:	d105      	bne.n	4038b4 <__cmpsf2+0x58>
  4038a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4038ac:	d1e4      	bne.n	403878 <__cmpsf2+0x1c>
  4038ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  4038b2:	d0e1      	beq.n	403878 <__cmpsf2+0x1c>
  4038b4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4038b8:	4770      	bx	lr
  4038ba:	bf00      	nop

004038bc <__aeabi_cfrcmple>:
  4038bc:	4684      	mov	ip, r0
  4038be:	4608      	mov	r0, r1
  4038c0:	4661      	mov	r1, ip
  4038c2:	e7ff      	b.n	4038c4 <__aeabi_cfcmpeq>

004038c4 <__aeabi_cfcmpeq>:
  4038c4:	b50f      	push	{r0, r1, r2, r3, lr}
  4038c6:	f7ff ffc9 	bl	40385c <__cmpsf2>
  4038ca:	2800      	cmp	r0, #0
  4038cc:	bf48      	it	mi
  4038ce:	f110 0f00 	cmnmi.w	r0, #0
  4038d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

004038d4 <__aeabi_fcmpeq>:
  4038d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4038d8:	f7ff fff4 	bl	4038c4 <__aeabi_cfcmpeq>
  4038dc:	bf0c      	ite	eq
  4038de:	2001      	moveq	r0, #1
  4038e0:	2000      	movne	r0, #0
  4038e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4038e6:	bf00      	nop

004038e8 <__aeabi_fcmplt>:
  4038e8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4038ec:	f7ff ffea 	bl	4038c4 <__aeabi_cfcmpeq>
  4038f0:	bf34      	ite	cc
  4038f2:	2001      	movcc	r0, #1
  4038f4:	2000      	movcs	r0, #0
  4038f6:	f85d fb08 	ldr.w	pc, [sp], #8
  4038fa:	bf00      	nop

004038fc <__aeabi_fcmple>:
  4038fc:	f84d ed08 	str.w	lr, [sp, #-8]!
  403900:	f7ff ffe0 	bl	4038c4 <__aeabi_cfcmpeq>
  403904:	bf94      	ite	ls
  403906:	2001      	movls	r0, #1
  403908:	2000      	movhi	r0, #0
  40390a:	f85d fb08 	ldr.w	pc, [sp], #8
  40390e:	bf00      	nop

00403910 <__aeabi_fcmpge>:
  403910:	f84d ed08 	str.w	lr, [sp, #-8]!
  403914:	f7ff ffd2 	bl	4038bc <__aeabi_cfrcmple>
  403918:	bf94      	ite	ls
  40391a:	2001      	movls	r0, #1
  40391c:	2000      	movhi	r0, #0
  40391e:	f85d fb08 	ldr.w	pc, [sp], #8
  403922:	bf00      	nop

00403924 <__aeabi_fcmpgt>:
  403924:	f84d ed08 	str.w	lr, [sp, #-8]!
  403928:	f7ff ffc8 	bl	4038bc <__aeabi_cfrcmple>
  40392c:	bf34      	ite	cc
  40392e:	2001      	movcc	r0, #1
  403930:	2000      	movcs	r0, #0
  403932:	f85d fb08 	ldr.w	pc, [sp], #8
  403936:	bf00      	nop

00403938 <__libc_init_array>:
  403938:	b570      	push	{r4, r5, r6, lr}
  40393a:	4e0f      	ldr	r6, [pc, #60]	; (403978 <__libc_init_array+0x40>)
  40393c:	4d0f      	ldr	r5, [pc, #60]	; (40397c <__libc_init_array+0x44>)
  40393e:	1b76      	subs	r6, r6, r5
  403940:	10b6      	asrs	r6, r6, #2
  403942:	bf18      	it	ne
  403944:	2400      	movne	r4, #0
  403946:	d005      	beq.n	403954 <__libc_init_array+0x1c>
  403948:	3401      	adds	r4, #1
  40394a:	f855 3b04 	ldr.w	r3, [r5], #4
  40394e:	4798      	blx	r3
  403950:	42a6      	cmp	r6, r4
  403952:	d1f9      	bne.n	403948 <__libc_init_array+0x10>
  403954:	4e0a      	ldr	r6, [pc, #40]	; (403980 <__libc_init_array+0x48>)
  403956:	4d0b      	ldr	r5, [pc, #44]	; (403984 <__libc_init_array+0x4c>)
  403958:	1b76      	subs	r6, r6, r5
  40395a:	f005 f9d7 	bl	408d0c <_init>
  40395e:	10b6      	asrs	r6, r6, #2
  403960:	bf18      	it	ne
  403962:	2400      	movne	r4, #0
  403964:	d006      	beq.n	403974 <__libc_init_array+0x3c>
  403966:	3401      	adds	r4, #1
  403968:	f855 3b04 	ldr.w	r3, [r5], #4
  40396c:	4798      	blx	r3
  40396e:	42a6      	cmp	r6, r4
  403970:	d1f9      	bne.n	403966 <__libc_init_array+0x2e>
  403972:	bd70      	pop	{r4, r5, r6, pc}
  403974:	bd70      	pop	{r4, r5, r6, pc}
  403976:	bf00      	nop
  403978:	00408d18 	.word	0x00408d18
  40397c:	00408d18 	.word	0x00408d18
  403980:	00408d20 	.word	0x00408d20
  403984:	00408d18 	.word	0x00408d18

00403988 <memset>:
  403988:	b470      	push	{r4, r5, r6}
  40398a:	0784      	lsls	r4, r0, #30
  40398c:	d046      	beq.n	403a1c <memset+0x94>
  40398e:	1e54      	subs	r4, r2, #1
  403990:	2a00      	cmp	r2, #0
  403992:	d041      	beq.n	403a18 <memset+0x90>
  403994:	b2cd      	uxtb	r5, r1
  403996:	4603      	mov	r3, r0
  403998:	e002      	b.n	4039a0 <memset+0x18>
  40399a:	1e62      	subs	r2, r4, #1
  40399c:	b3e4      	cbz	r4, 403a18 <memset+0x90>
  40399e:	4614      	mov	r4, r2
  4039a0:	f803 5b01 	strb.w	r5, [r3], #1
  4039a4:	079a      	lsls	r2, r3, #30
  4039a6:	d1f8      	bne.n	40399a <memset+0x12>
  4039a8:	2c03      	cmp	r4, #3
  4039aa:	d92e      	bls.n	403a0a <memset+0x82>
  4039ac:	b2cd      	uxtb	r5, r1
  4039ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4039b2:	2c0f      	cmp	r4, #15
  4039b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4039b8:	d919      	bls.n	4039ee <memset+0x66>
  4039ba:	f103 0210 	add.w	r2, r3, #16
  4039be:	4626      	mov	r6, r4
  4039c0:	3e10      	subs	r6, #16
  4039c2:	2e0f      	cmp	r6, #15
  4039c4:	f842 5c10 	str.w	r5, [r2, #-16]
  4039c8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4039cc:	f842 5c08 	str.w	r5, [r2, #-8]
  4039d0:	f842 5c04 	str.w	r5, [r2, #-4]
  4039d4:	f102 0210 	add.w	r2, r2, #16
  4039d8:	d8f2      	bhi.n	4039c0 <memset+0x38>
  4039da:	f1a4 0210 	sub.w	r2, r4, #16
  4039de:	f022 020f 	bic.w	r2, r2, #15
  4039e2:	f004 040f 	and.w	r4, r4, #15
  4039e6:	3210      	adds	r2, #16
  4039e8:	2c03      	cmp	r4, #3
  4039ea:	4413      	add	r3, r2
  4039ec:	d90d      	bls.n	403a0a <memset+0x82>
  4039ee:	461e      	mov	r6, r3
  4039f0:	4622      	mov	r2, r4
  4039f2:	3a04      	subs	r2, #4
  4039f4:	2a03      	cmp	r2, #3
  4039f6:	f846 5b04 	str.w	r5, [r6], #4
  4039fa:	d8fa      	bhi.n	4039f2 <memset+0x6a>
  4039fc:	1f22      	subs	r2, r4, #4
  4039fe:	f022 0203 	bic.w	r2, r2, #3
  403a02:	3204      	adds	r2, #4
  403a04:	4413      	add	r3, r2
  403a06:	f004 0403 	and.w	r4, r4, #3
  403a0a:	b12c      	cbz	r4, 403a18 <memset+0x90>
  403a0c:	b2c9      	uxtb	r1, r1
  403a0e:	441c      	add	r4, r3
  403a10:	f803 1b01 	strb.w	r1, [r3], #1
  403a14:	42a3      	cmp	r3, r4
  403a16:	d1fb      	bne.n	403a10 <memset+0x88>
  403a18:	bc70      	pop	{r4, r5, r6}
  403a1a:	4770      	bx	lr
  403a1c:	4614      	mov	r4, r2
  403a1e:	4603      	mov	r3, r0
  403a20:	e7c2      	b.n	4039a8 <memset+0x20>
  403a22:	bf00      	nop

00403a24 <setbuf>:
  403a24:	2900      	cmp	r1, #0
  403a26:	bf0c      	ite	eq
  403a28:	2202      	moveq	r2, #2
  403a2a:	2200      	movne	r2, #0
  403a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403a30:	f000 b800 	b.w	403a34 <setvbuf>

00403a34 <setvbuf>:
  403a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403a38:	4c51      	ldr	r4, [pc, #324]	; (403b80 <setvbuf+0x14c>)
  403a3a:	6825      	ldr	r5, [r4, #0]
  403a3c:	b083      	sub	sp, #12
  403a3e:	4604      	mov	r4, r0
  403a40:	460f      	mov	r7, r1
  403a42:	4690      	mov	r8, r2
  403a44:	461e      	mov	r6, r3
  403a46:	b115      	cbz	r5, 403a4e <setvbuf+0x1a>
  403a48:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403a4a:	2b00      	cmp	r3, #0
  403a4c:	d079      	beq.n	403b42 <setvbuf+0x10e>
  403a4e:	f1b8 0f02 	cmp.w	r8, #2
  403a52:	d004      	beq.n	403a5e <setvbuf+0x2a>
  403a54:	f1b8 0f01 	cmp.w	r8, #1
  403a58:	d87f      	bhi.n	403b5a <setvbuf+0x126>
  403a5a:	2e00      	cmp	r6, #0
  403a5c:	db7d      	blt.n	403b5a <setvbuf+0x126>
  403a5e:	4621      	mov	r1, r4
  403a60:	4628      	mov	r0, r5
  403a62:	f002 fcfd 	bl	406460 <_fflush_r>
  403a66:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a68:	b141      	cbz	r1, 403a7c <setvbuf+0x48>
  403a6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a6e:	4299      	cmp	r1, r3
  403a70:	d002      	beq.n	403a78 <setvbuf+0x44>
  403a72:	4628      	mov	r0, r5
  403a74:	f002 fdf4 	bl	406660 <_free_r>
  403a78:	2300      	movs	r3, #0
  403a7a:	6323      	str	r3, [r4, #48]	; 0x30
  403a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a80:	2200      	movs	r2, #0
  403a82:	61a2      	str	r2, [r4, #24]
  403a84:	6062      	str	r2, [r4, #4]
  403a86:	061a      	lsls	r2, r3, #24
  403a88:	d454      	bmi.n	403b34 <setvbuf+0x100>
  403a8a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403a8e:	f023 0303 	bic.w	r3, r3, #3
  403a92:	f1b8 0f02 	cmp.w	r8, #2
  403a96:	81a3      	strh	r3, [r4, #12]
  403a98:	d039      	beq.n	403b0e <setvbuf+0xda>
  403a9a:	ab01      	add	r3, sp, #4
  403a9c:	466a      	mov	r2, sp
  403a9e:	4621      	mov	r1, r4
  403aa0:	4628      	mov	r0, r5
  403aa2:	f002 fef3 	bl	40688c <__swhatbuf_r>
  403aa6:	89a3      	ldrh	r3, [r4, #12]
  403aa8:	4318      	orrs	r0, r3
  403aaa:	81a0      	strh	r0, [r4, #12]
  403aac:	b326      	cbz	r6, 403af8 <setvbuf+0xc4>
  403aae:	b327      	cbz	r7, 403afa <setvbuf+0xc6>
  403ab0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403ab2:	2b00      	cmp	r3, #0
  403ab4:	d04d      	beq.n	403b52 <setvbuf+0x11e>
  403ab6:	9b00      	ldr	r3, [sp, #0]
  403ab8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  403abc:	6027      	str	r7, [r4, #0]
  403abe:	429e      	cmp	r6, r3
  403ac0:	bf1c      	itt	ne
  403ac2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  403ac6:	81a0      	strhne	r0, [r4, #12]
  403ac8:	f1b8 0f01 	cmp.w	r8, #1
  403acc:	bf08      	it	eq
  403ace:	f040 0001 	orreq.w	r0, r0, #1
  403ad2:	b283      	uxth	r3, r0
  403ad4:	bf08      	it	eq
  403ad6:	81a0      	strheq	r0, [r4, #12]
  403ad8:	f003 0008 	and.w	r0, r3, #8
  403adc:	b280      	uxth	r0, r0
  403ade:	6127      	str	r7, [r4, #16]
  403ae0:	6166      	str	r6, [r4, #20]
  403ae2:	b318      	cbz	r0, 403b2c <setvbuf+0xf8>
  403ae4:	f013 0001 	ands.w	r0, r3, #1
  403ae8:	d02f      	beq.n	403b4a <setvbuf+0x116>
  403aea:	2000      	movs	r0, #0
  403aec:	4276      	negs	r6, r6
  403aee:	61a6      	str	r6, [r4, #24]
  403af0:	60a0      	str	r0, [r4, #8]
  403af2:	b003      	add	sp, #12
  403af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403af8:	9e00      	ldr	r6, [sp, #0]
  403afa:	4630      	mov	r0, r6
  403afc:	f002 fef6 	bl	4068ec <malloc>
  403b00:	4607      	mov	r7, r0
  403b02:	b368      	cbz	r0, 403b60 <setvbuf+0x12c>
  403b04:	89a3      	ldrh	r3, [r4, #12]
  403b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403b0a:	81a3      	strh	r3, [r4, #12]
  403b0c:	e7d0      	b.n	403ab0 <setvbuf+0x7c>
  403b0e:	2000      	movs	r0, #0
  403b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403b14:	f043 0302 	orr.w	r3, r3, #2
  403b18:	2500      	movs	r5, #0
  403b1a:	2101      	movs	r1, #1
  403b1c:	81a3      	strh	r3, [r4, #12]
  403b1e:	60a5      	str	r5, [r4, #8]
  403b20:	6022      	str	r2, [r4, #0]
  403b22:	6122      	str	r2, [r4, #16]
  403b24:	6161      	str	r1, [r4, #20]
  403b26:	b003      	add	sp, #12
  403b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b2c:	60a0      	str	r0, [r4, #8]
  403b2e:	b003      	add	sp, #12
  403b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b34:	6921      	ldr	r1, [r4, #16]
  403b36:	4628      	mov	r0, r5
  403b38:	f002 fd92 	bl	406660 <_free_r>
  403b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b40:	e7a3      	b.n	403a8a <setvbuf+0x56>
  403b42:	4628      	mov	r0, r5
  403b44:	f002 fd20 	bl	406588 <__sinit>
  403b48:	e781      	b.n	403a4e <setvbuf+0x1a>
  403b4a:	60a6      	str	r6, [r4, #8]
  403b4c:	b003      	add	sp, #12
  403b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b52:	4628      	mov	r0, r5
  403b54:	f002 fd18 	bl	406588 <__sinit>
  403b58:	e7ad      	b.n	403ab6 <setvbuf+0x82>
  403b5a:	f04f 30ff 	mov.w	r0, #4294967295
  403b5e:	e7e2      	b.n	403b26 <setvbuf+0xf2>
  403b60:	f8dd 9000 	ldr.w	r9, [sp]
  403b64:	45b1      	cmp	r9, r6
  403b66:	d006      	beq.n	403b76 <setvbuf+0x142>
  403b68:	4648      	mov	r0, r9
  403b6a:	f002 febf 	bl	4068ec <malloc>
  403b6e:	4607      	mov	r7, r0
  403b70:	b108      	cbz	r0, 403b76 <setvbuf+0x142>
  403b72:	464e      	mov	r6, r9
  403b74:	e7c6      	b.n	403b04 <setvbuf+0xd0>
  403b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b7a:	f04f 30ff 	mov.w	r0, #4294967295
  403b7e:	e7c7      	b.n	403b10 <setvbuf+0xdc>
  403b80:	20000440 	.word	0x20000440

00403b84 <sprintf>:
  403b84:	b40e      	push	{r1, r2, r3}
  403b86:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b88:	b09c      	sub	sp, #112	; 0x70
  403b8a:	ab21      	add	r3, sp, #132	; 0x84
  403b8c:	490f      	ldr	r1, [pc, #60]	; (403bcc <sprintf+0x48>)
  403b8e:	f853 2b04 	ldr.w	r2, [r3], #4
  403b92:	9301      	str	r3, [sp, #4]
  403b94:	4605      	mov	r5, r0
  403b96:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403b9a:	6808      	ldr	r0, [r1, #0]
  403b9c:	9502      	str	r5, [sp, #8]
  403b9e:	f44f 7702 	mov.w	r7, #520	; 0x208
  403ba2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403ba6:	a902      	add	r1, sp, #8
  403ba8:	9506      	str	r5, [sp, #24]
  403baa:	f8ad 7014 	strh.w	r7, [sp, #20]
  403bae:	9404      	str	r4, [sp, #16]
  403bb0:	9407      	str	r4, [sp, #28]
  403bb2:	f8ad 6016 	strh.w	r6, [sp, #22]
  403bb6:	f000 f891 	bl	403cdc <_svfprintf_r>
  403bba:	9b02      	ldr	r3, [sp, #8]
  403bbc:	2200      	movs	r2, #0
  403bbe:	701a      	strb	r2, [r3, #0]
  403bc0:	b01c      	add	sp, #112	; 0x70
  403bc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403bc6:	b003      	add	sp, #12
  403bc8:	4770      	bx	lr
  403bca:	bf00      	nop
  403bcc:	20000440 	.word	0x20000440
	...

00403c00 <strlen>:
  403c00:	f890 f000 	pld	[r0]
  403c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403c08:	f020 0107 	bic.w	r1, r0, #7
  403c0c:	f06f 0c00 	mvn.w	ip, #0
  403c10:	f010 0407 	ands.w	r4, r0, #7
  403c14:	f891 f020 	pld	[r1, #32]
  403c18:	f040 8049 	bne.w	403cae <strlen+0xae>
  403c1c:	f04f 0400 	mov.w	r4, #0
  403c20:	f06f 0007 	mvn.w	r0, #7
  403c24:	e9d1 2300 	ldrd	r2, r3, [r1]
  403c28:	f891 f040 	pld	[r1, #64]	; 0x40
  403c2c:	f100 0008 	add.w	r0, r0, #8
  403c30:	fa82 f24c 	uadd8	r2, r2, ip
  403c34:	faa4 f28c 	sel	r2, r4, ip
  403c38:	fa83 f34c 	uadd8	r3, r3, ip
  403c3c:	faa2 f38c 	sel	r3, r2, ip
  403c40:	bb4b      	cbnz	r3, 403c96 <strlen+0x96>
  403c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403c46:	fa82 f24c 	uadd8	r2, r2, ip
  403c4a:	f100 0008 	add.w	r0, r0, #8
  403c4e:	faa4 f28c 	sel	r2, r4, ip
  403c52:	fa83 f34c 	uadd8	r3, r3, ip
  403c56:	faa2 f38c 	sel	r3, r2, ip
  403c5a:	b9e3      	cbnz	r3, 403c96 <strlen+0x96>
  403c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403c60:	fa82 f24c 	uadd8	r2, r2, ip
  403c64:	f100 0008 	add.w	r0, r0, #8
  403c68:	faa4 f28c 	sel	r2, r4, ip
  403c6c:	fa83 f34c 	uadd8	r3, r3, ip
  403c70:	faa2 f38c 	sel	r3, r2, ip
  403c74:	b97b      	cbnz	r3, 403c96 <strlen+0x96>
  403c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403c7a:	f101 0120 	add.w	r1, r1, #32
  403c7e:	fa82 f24c 	uadd8	r2, r2, ip
  403c82:	f100 0008 	add.w	r0, r0, #8
  403c86:	faa4 f28c 	sel	r2, r4, ip
  403c8a:	fa83 f34c 	uadd8	r3, r3, ip
  403c8e:	faa2 f38c 	sel	r3, r2, ip
  403c92:	2b00      	cmp	r3, #0
  403c94:	d0c6      	beq.n	403c24 <strlen+0x24>
  403c96:	2a00      	cmp	r2, #0
  403c98:	bf04      	itt	eq
  403c9a:	3004      	addeq	r0, #4
  403c9c:	461a      	moveq	r2, r3
  403c9e:	ba12      	rev	r2, r2
  403ca0:	fab2 f282 	clz	r2, r2
  403ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403cac:	4770      	bx	lr
  403cae:	e9d1 2300 	ldrd	r2, r3, [r1]
  403cb2:	f004 0503 	and.w	r5, r4, #3
  403cb6:	f1c4 0000 	rsb	r0, r4, #0
  403cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403cbe:	f014 0f04 	tst.w	r4, #4
  403cc2:	f891 f040 	pld	[r1, #64]	; 0x40
  403cc6:	fa0c f505 	lsl.w	r5, ip, r5
  403cca:	ea62 0205 	orn	r2, r2, r5
  403cce:	bf1c      	itt	ne
  403cd0:	ea63 0305 	ornne	r3, r3, r5
  403cd4:	4662      	movne	r2, ip
  403cd6:	f04f 0400 	mov.w	r4, #0
  403cda:	e7a9      	b.n	403c30 <strlen+0x30>

00403cdc <_svfprintf_r>:
  403cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ce0:	b0c1      	sub	sp, #260	; 0x104
  403ce2:	460c      	mov	r4, r1
  403ce4:	9109      	str	r1, [sp, #36]	; 0x24
  403ce6:	4615      	mov	r5, r2
  403ce8:	930e      	str	r3, [sp, #56]	; 0x38
  403cea:	900a      	str	r0, [sp, #40]	; 0x28
  403cec:	f002 fdca 	bl	406884 <_localeconv_r>
  403cf0:	6803      	ldr	r3, [r0, #0]
  403cf2:	9317      	str	r3, [sp, #92]	; 0x5c
  403cf4:	4618      	mov	r0, r3
  403cf6:	f7ff ff83 	bl	403c00 <strlen>
  403cfa:	89a3      	ldrh	r3, [r4, #12]
  403cfc:	9016      	str	r0, [sp, #88]	; 0x58
  403cfe:	061e      	lsls	r6, r3, #24
  403d00:	d503      	bpl.n	403d0a <_svfprintf_r+0x2e>
  403d02:	6923      	ldr	r3, [r4, #16]
  403d04:	2b00      	cmp	r3, #0
  403d06:	f001 8119 	beq.w	404f3c <_svfprintf_r+0x1260>
  403d0a:	2300      	movs	r3, #0
  403d0c:	461a      	mov	r2, r3
  403d0e:	9312      	str	r3, [sp, #72]	; 0x48
  403d10:	9325      	str	r3, [sp, #148]	; 0x94
  403d12:	9324      	str	r3, [sp, #144]	; 0x90
  403d14:	9319      	str	r3, [sp, #100]	; 0x64
  403d16:	930b      	str	r3, [sp, #44]	; 0x2c
  403d18:	f8df a464 	ldr.w	sl, [pc, #1124]	; 404180 <_svfprintf_r+0x4a4>
  403d1c:	9214      	str	r2, [sp, #80]	; 0x50
  403d1e:	ab30      	add	r3, sp, #192	; 0xc0
  403d20:	9323      	str	r3, [sp, #140]	; 0x8c
  403d22:	4699      	mov	r9, r3
  403d24:	9215      	str	r2, [sp, #84]	; 0x54
  403d26:	46a8      	mov	r8, r5
  403d28:	f898 3000 	ldrb.w	r3, [r8]
  403d2c:	4644      	mov	r4, r8
  403d2e:	b1eb      	cbz	r3, 403d6c <_svfprintf_r+0x90>
  403d30:	2b25      	cmp	r3, #37	; 0x25
  403d32:	d102      	bne.n	403d3a <_svfprintf_r+0x5e>
  403d34:	e01a      	b.n	403d6c <_svfprintf_r+0x90>
  403d36:	2b25      	cmp	r3, #37	; 0x25
  403d38:	d003      	beq.n	403d42 <_svfprintf_r+0x66>
  403d3a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403d3e:	2b00      	cmp	r3, #0
  403d40:	d1f9      	bne.n	403d36 <_svfprintf_r+0x5a>
  403d42:	ebc8 0504 	rsb	r5, r8, r4
  403d46:	b18d      	cbz	r5, 403d6c <_svfprintf_r+0x90>
  403d48:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403d4c:	f8c9 8000 	str.w	r8, [r9]
  403d50:	3301      	adds	r3, #1
  403d52:	442a      	add	r2, r5
  403d54:	2b07      	cmp	r3, #7
  403d56:	f8c9 5004 	str.w	r5, [r9, #4]
  403d5a:	9225      	str	r2, [sp, #148]	; 0x94
  403d5c:	9324      	str	r3, [sp, #144]	; 0x90
  403d5e:	f300 80a6 	bgt.w	403eae <_svfprintf_r+0x1d2>
  403d62:	f109 0908 	add.w	r9, r9, #8
  403d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403d68:	442b      	add	r3, r5
  403d6a:	930b      	str	r3, [sp, #44]	; 0x2c
  403d6c:	7823      	ldrb	r3, [r4, #0]
  403d6e:	2b00      	cmp	r3, #0
  403d70:	f000 80a6 	beq.w	403ec0 <_svfprintf_r+0x1e4>
  403d74:	2300      	movs	r3, #0
  403d76:	461a      	mov	r2, r3
  403d78:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403d7c:	4619      	mov	r1, r3
  403d7e:	930c      	str	r3, [sp, #48]	; 0x30
  403d80:	9307      	str	r3, [sp, #28]
  403d82:	f04f 3bff 	mov.w	fp, #4294967295
  403d86:	7863      	ldrb	r3, [r4, #1]
  403d88:	f104 0801 	add.w	r8, r4, #1
  403d8c:	465d      	mov	r5, fp
  403d8e:	f108 0801 	add.w	r8, r8, #1
  403d92:	f1a3 0020 	sub.w	r0, r3, #32
  403d96:	2858      	cmp	r0, #88	; 0x58
  403d98:	f200 8425 	bhi.w	4045e6 <_svfprintf_r+0x90a>
  403d9c:	e8df f010 	tbh	[pc, r0, lsl #1]
  403da0:	04230388 	.word	0x04230388
  403da4:	03900423 	.word	0x03900423
  403da8:	04230423 	.word	0x04230423
  403dac:	04230423 	.word	0x04230423
  403db0:	04230423 	.word	0x04230423
  403db4:	03a50397 	.word	0x03a50397
  403db8:	005d0423 	.word	0x005d0423
  403dbc:	042300e2 	.word	0x042300e2
  403dc0:	010500fe 	.word	0x010500fe
  403dc4:	01050105 	.word	0x01050105
  403dc8:	01050105 	.word	0x01050105
  403dcc:	01050105 	.word	0x01050105
  403dd0:	01050105 	.word	0x01050105
  403dd4:	04230423 	.word	0x04230423
  403dd8:	04230423 	.word	0x04230423
  403ddc:	04230423 	.word	0x04230423
  403de0:	04230423 	.word	0x04230423
  403de4:	04230423 	.word	0x04230423
  403de8:	02810115 	.word	0x02810115
  403dec:	02810423 	.word	0x02810423
  403df0:	04230423 	.word	0x04230423
  403df4:	04230423 	.word	0x04230423
  403df8:	042302c6 	.word	0x042302c6
  403dfc:	02cd0423 	.word	0x02cd0423
  403e00:	04230423 	.word	0x04230423
  403e04:	04230423 	.word	0x04230423
  403e08:	02f70423 	.word	0x02f70423
  403e0c:	04230423 	.word	0x04230423
  403e10:	04230325 	.word	0x04230325
  403e14:	04230423 	.word	0x04230423
  403e18:	04230423 	.word	0x04230423
  403e1c:	04230423 	.word	0x04230423
  403e20:	04230423 	.word	0x04230423
  403e24:	03660423 	.word	0x03660423
  403e28:	02810379 	.word	0x02810379
  403e2c:	02810281 	.word	0x02810281
  403e30:	03790381 	.word	0x03790381
  403e34:	04230423 	.word	0x04230423
  403e38:	042303d1 	.word	0x042303d1
  403e3c:	00a303db 	.word	0x00a303db
  403e40:	03ee0064 	.word	0x03ee0064
  403e44:	03f50423 	.word	0x03f50423
  403e48:	03aa0423 	.word	0x03aa0423
  403e4c:	04230423 	.word	0x04230423
  403e50:	03bc      	.short	0x03bc
  403e52:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e54:	930e      	str	r3, [sp, #56]	; 0x38
  403e56:	4240      	negs	r0, r0
  403e58:	900c      	str	r0, [sp, #48]	; 0x30
  403e5a:	9b07      	ldr	r3, [sp, #28]
  403e5c:	f043 0304 	orr.w	r3, r3, #4
  403e60:	9307      	str	r3, [sp, #28]
  403e62:	f898 3000 	ldrb.w	r3, [r8]
  403e66:	e792      	b.n	403d8e <_svfprintf_r+0xb2>
  403e68:	980e      	ldr	r0, [sp, #56]	; 0x38
  403e6a:	46ab      	mov	fp, r5
  403e6c:	2100      	movs	r1, #0
  403e6e:	6804      	ldr	r4, [r0, #0]
  403e70:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403e74:	1d07      	adds	r7, r0, #4
  403e76:	9807      	ldr	r0, [sp, #28]
  403e78:	2330      	movs	r3, #48	; 0x30
  403e7a:	2278      	movs	r2, #120	; 0x78
  403e7c:	458b      	cmp	fp, r1
  403e7e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  403e82:	f04f 0500 	mov.w	r5, #0
  403e86:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  403e8a:	f040 0302 	orr.w	r3, r0, #2
  403e8e:	f2c0 83c7 	blt.w	404620 <_svfprintf_r+0x944>
  403e92:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  403e96:	f043 0302 	orr.w	r3, r3, #2
  403e9a:	9307      	str	r3, [sp, #28]
  403e9c:	ea54 0305 	orrs.w	r3, r4, r5
  403ea0:	970e      	str	r7, [sp, #56]	; 0x38
  403ea2:	f000 8393 	beq.w	4045cc <_svfprintf_r+0x8f0>
  403ea6:	460f      	mov	r7, r1
  403ea8:	9211      	str	r2, [sp, #68]	; 0x44
  403eaa:	48b3      	ldr	r0, [pc, #716]	; (404178 <_svfprintf_r+0x49c>)
  403eac:	e2ce      	b.n	40444c <_svfprintf_r+0x770>
  403eae:	aa23      	add	r2, sp, #140	; 0x8c
  403eb0:	9909      	ldr	r1, [sp, #36]	; 0x24
  403eb2:	980a      	ldr	r0, [sp, #40]	; 0x28
  403eb4:	f003 fc2e 	bl	407714 <__ssprint_r>
  403eb8:	b948      	cbnz	r0, 403ece <_svfprintf_r+0x1f2>
  403eba:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403ebe:	e752      	b.n	403d66 <_svfprintf_r+0x8a>
  403ec0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403ec2:	b123      	cbz	r3, 403ece <_svfprintf_r+0x1f2>
  403ec4:	980a      	ldr	r0, [sp, #40]	; 0x28
  403ec6:	9909      	ldr	r1, [sp, #36]	; 0x24
  403ec8:	aa23      	add	r2, sp, #140	; 0x8c
  403eca:	f003 fc23 	bl	407714 <__ssprint_r>
  403ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ed0:	899b      	ldrh	r3, [r3, #12]
  403ed2:	f013 0f40 	tst.w	r3, #64	; 0x40
  403ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403ed8:	bf18      	it	ne
  403eda:	f04f 33ff 	movne.w	r3, #4294967295
  403ede:	4618      	mov	r0, r3
  403ee0:	b041      	add	sp, #260	; 0x104
  403ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ee6:	9311      	str	r3, [sp, #68]	; 0x44
  403ee8:	46ab      	mov	fp, r5
  403eea:	2a00      	cmp	r2, #0
  403eec:	f041 8223 	bne.w	405336 <_svfprintf_r+0x165a>
  403ef0:	9a07      	ldr	r2, [sp, #28]
  403ef2:	f012 0320 	ands.w	r3, r2, #32
  403ef6:	f000 822e 	beq.w	404356 <_svfprintf_r+0x67a>
  403efa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403efc:	3707      	adds	r7, #7
  403efe:	f027 0307 	bic.w	r3, r7, #7
  403f02:	2700      	movs	r7, #0
  403f04:	f103 0108 	add.w	r1, r3, #8
  403f08:	45bb      	cmp	fp, r7
  403f0a:	910e      	str	r1, [sp, #56]	; 0x38
  403f0c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f10:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403f14:	f2c0 8752 	blt.w	404dbc <_svfprintf_r+0x10e0>
  403f18:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  403f1c:	9307      	str	r3, [sp, #28]
  403f1e:	ea54 0305 	orrs.w	r3, r4, r5
  403f22:	f000 8375 	beq.w	404610 <_svfprintf_r+0x934>
  403f26:	ae30      	add	r6, sp, #192	; 0xc0
  403f28:	08e2      	lsrs	r2, r4, #3
  403f2a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403f2e:	08e9      	lsrs	r1, r5, #3
  403f30:	f004 0307 	and.w	r3, r4, #7
  403f34:	460d      	mov	r5, r1
  403f36:	4614      	mov	r4, r2
  403f38:	3330      	adds	r3, #48	; 0x30
  403f3a:	ea54 0205 	orrs.w	r2, r4, r5
  403f3e:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403f42:	d1f1      	bne.n	403f28 <_svfprintf_r+0x24c>
  403f44:	9a07      	ldr	r2, [sp, #28]
  403f46:	07d1      	lsls	r1, r2, #31
  403f48:	f140 8084 	bpl.w	404054 <_svfprintf_r+0x378>
  403f4c:	2b30      	cmp	r3, #48	; 0x30
  403f4e:	f000 8081 	beq.w	404054 <_svfprintf_r+0x378>
  403f52:	2230      	movs	r2, #48	; 0x30
  403f54:	1e73      	subs	r3, r6, #1
  403f56:	f806 2c01 	strb.w	r2, [r6, #-1]
  403f5a:	aa30      	add	r2, sp, #192	; 0xc0
  403f5c:	1ad2      	subs	r2, r2, r3
  403f5e:	920d      	str	r2, [sp, #52]	; 0x34
  403f60:	461e      	mov	r6, r3
  403f62:	e07a      	b.n	40405a <_svfprintf_r+0x37e>
  403f64:	f898 3000 	ldrb.w	r3, [r8]
  403f68:	2b2a      	cmp	r3, #42	; 0x2a
  403f6a:	f108 0401 	add.w	r4, r8, #1
  403f6e:	f001 81b1 	beq.w	4052d4 <_svfprintf_r+0x15f8>
  403f72:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403f76:	2809      	cmp	r0, #9
  403f78:	bf98      	it	ls
  403f7a:	2500      	movls	r5, #0
  403f7c:	f201 8164 	bhi.w	405248 <_svfprintf_r+0x156c>
  403f80:	f814 3b01 	ldrb.w	r3, [r4], #1
  403f84:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403f88:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  403f8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403f90:	2809      	cmp	r0, #9
  403f92:	d9f5      	bls.n	403f80 <_svfprintf_r+0x2a4>
  403f94:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  403f98:	46a0      	mov	r8, r4
  403f9a:	e6fa      	b.n	403d92 <_svfprintf_r+0xb6>
  403f9c:	9b07      	ldr	r3, [sp, #28]
  403f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403fa2:	9307      	str	r3, [sp, #28]
  403fa4:	f898 3000 	ldrb.w	r3, [r8]
  403fa8:	e6f1      	b.n	403d8e <_svfprintf_r+0xb2>
  403faa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403fae:	2300      	movs	r3, #0
  403fb0:	461c      	mov	r4, r3
  403fb2:	f818 3b01 	ldrb.w	r3, [r8], #1
  403fb6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403fba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403fbe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403fc2:	2809      	cmp	r0, #9
  403fc4:	d9f5      	bls.n	403fb2 <_svfprintf_r+0x2d6>
  403fc6:	940c      	str	r4, [sp, #48]	; 0x30
  403fc8:	e6e3      	b.n	403d92 <_svfprintf_r+0xb6>
  403fca:	9311      	str	r3, [sp, #68]	; 0x44
  403fcc:	46ab      	mov	fp, r5
  403fce:	2a00      	cmp	r2, #0
  403fd0:	f041 81c9 	bne.w	405366 <_svfprintf_r+0x168a>
  403fd4:	9b07      	ldr	r3, [sp, #28]
  403fd6:	f043 0310 	orr.w	r3, r3, #16
  403fda:	9307      	str	r3, [sp, #28]
  403fdc:	9b07      	ldr	r3, [sp, #28]
  403fde:	0698      	lsls	r0, r3, #26
  403fe0:	f140 8530 	bpl.w	404a44 <_svfprintf_r+0xd68>
  403fe4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403fe6:	3707      	adds	r7, #7
  403fe8:	f027 0707 	bic.w	r7, r7, #7
  403fec:	e9d7 2300 	ldrd	r2, r3, [r7]
  403ff0:	f107 0108 	add.w	r1, r7, #8
  403ff4:	910e      	str	r1, [sp, #56]	; 0x38
  403ff6:	4614      	mov	r4, r2
  403ff8:	461d      	mov	r5, r3
  403ffa:	2a00      	cmp	r2, #0
  403ffc:	f173 0300 	sbcs.w	r3, r3, #0
  404000:	f2c0 855b 	blt.w	404aba <_svfprintf_r+0xdde>
  404004:	f1bb 0f00 	cmp.w	fp, #0
  404008:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40400c:	f2c0 8538 	blt.w	404a80 <_svfprintf_r+0xda4>
  404010:	9b07      	ldr	r3, [sp, #28]
  404012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404016:	9307      	str	r3, [sp, #28]
  404018:	ea54 0305 	orrs.w	r3, r4, r5
  40401c:	f000 81db 	beq.w	4043d6 <_svfprintf_r+0x6fa>
  404020:	2d00      	cmp	r5, #0
  404022:	bf08      	it	eq
  404024:	2c0a      	cmpeq	r4, #10
  404026:	f0c0 81db 	bcc.w	4043e0 <_svfprintf_r+0x704>
  40402a:	ae30      	add	r6, sp, #192	; 0xc0
  40402c:	4620      	mov	r0, r4
  40402e:	4629      	mov	r1, r5
  404030:	220a      	movs	r2, #10
  404032:	2300      	movs	r3, #0
  404034:	f004 fbfe 	bl	408834 <__aeabi_uldivmod>
  404038:	3230      	adds	r2, #48	; 0x30
  40403a:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40403e:	4620      	mov	r0, r4
  404040:	4629      	mov	r1, r5
  404042:	2300      	movs	r3, #0
  404044:	220a      	movs	r2, #10
  404046:	f004 fbf5 	bl	408834 <__aeabi_uldivmod>
  40404a:	4604      	mov	r4, r0
  40404c:	460d      	mov	r5, r1
  40404e:	ea54 0305 	orrs.w	r3, r4, r5
  404052:	d1eb      	bne.n	40402c <_svfprintf_r+0x350>
  404054:	ab30      	add	r3, sp, #192	; 0xc0
  404056:	1b9b      	subs	r3, r3, r6
  404058:	930d      	str	r3, [sp, #52]	; 0x34
  40405a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40405c:	455b      	cmp	r3, fp
  40405e:	bfb8      	it	lt
  404060:	465b      	movlt	r3, fp
  404062:	9308      	str	r3, [sp, #32]
  404064:	2300      	movs	r3, #0
  404066:	9313      	str	r3, [sp, #76]	; 0x4c
  404068:	b117      	cbz	r7, 404070 <_svfprintf_r+0x394>
  40406a:	9b08      	ldr	r3, [sp, #32]
  40406c:	3301      	adds	r3, #1
  40406e:	9308      	str	r3, [sp, #32]
  404070:	9b07      	ldr	r3, [sp, #28]
  404072:	f013 0302 	ands.w	r3, r3, #2
  404076:	930f      	str	r3, [sp, #60]	; 0x3c
  404078:	d002      	beq.n	404080 <_svfprintf_r+0x3a4>
  40407a:	9b08      	ldr	r3, [sp, #32]
  40407c:	3302      	adds	r3, #2
  40407e:	9308      	str	r3, [sp, #32]
  404080:	9b07      	ldr	r3, [sp, #28]
  404082:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404086:	9310      	str	r3, [sp, #64]	; 0x40
  404088:	f040 82d7 	bne.w	40463a <_svfprintf_r+0x95e>
  40408c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40408e:	9a08      	ldr	r2, [sp, #32]
  404090:	1a9d      	subs	r5, r3, r2
  404092:	2d00      	cmp	r5, #0
  404094:	f340 82d1 	ble.w	40463a <_svfprintf_r+0x95e>
  404098:	2d10      	cmp	r5, #16
  40409a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40409c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40409e:	4f37      	ldr	r7, [pc, #220]	; (40417c <_svfprintf_r+0x4a0>)
  4040a0:	dd27      	ble.n	4040f2 <_svfprintf_r+0x416>
  4040a2:	9618      	str	r6, [sp, #96]	; 0x60
  4040a4:	4648      	mov	r0, r9
  4040a6:	2410      	movs	r4, #16
  4040a8:	46b9      	mov	r9, r7
  4040aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4040ac:	462f      	mov	r7, r5
  4040ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4040b0:	e004      	b.n	4040bc <_svfprintf_r+0x3e0>
  4040b2:	3f10      	subs	r7, #16
  4040b4:	2f10      	cmp	r7, #16
  4040b6:	f100 0008 	add.w	r0, r0, #8
  4040ba:	dd16      	ble.n	4040ea <_svfprintf_r+0x40e>
  4040bc:	3201      	adds	r2, #1
  4040be:	4b2f      	ldr	r3, [pc, #188]	; (40417c <_svfprintf_r+0x4a0>)
  4040c0:	9224      	str	r2, [sp, #144]	; 0x90
  4040c2:	3110      	adds	r1, #16
  4040c4:	2a07      	cmp	r2, #7
  4040c6:	9125      	str	r1, [sp, #148]	; 0x94
  4040c8:	e880 0018 	stmia.w	r0, {r3, r4}
  4040cc:	ddf1      	ble.n	4040b2 <_svfprintf_r+0x3d6>
  4040ce:	aa23      	add	r2, sp, #140	; 0x8c
  4040d0:	4631      	mov	r1, r6
  4040d2:	4628      	mov	r0, r5
  4040d4:	f003 fb1e 	bl	407714 <__ssprint_r>
  4040d8:	2800      	cmp	r0, #0
  4040da:	f47f aef8 	bne.w	403ece <_svfprintf_r+0x1f2>
  4040de:	3f10      	subs	r7, #16
  4040e0:	2f10      	cmp	r7, #16
  4040e2:	9925      	ldr	r1, [sp, #148]	; 0x94
  4040e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4040e6:	a830      	add	r0, sp, #192	; 0xc0
  4040e8:	dce8      	bgt.n	4040bc <_svfprintf_r+0x3e0>
  4040ea:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4040ec:	463d      	mov	r5, r7
  4040ee:	464f      	mov	r7, r9
  4040f0:	4681      	mov	r9, r0
  4040f2:	3201      	adds	r2, #1
  4040f4:	186c      	adds	r4, r5, r1
  4040f6:	2a07      	cmp	r2, #7
  4040f8:	9425      	str	r4, [sp, #148]	; 0x94
  4040fa:	9224      	str	r2, [sp, #144]	; 0x90
  4040fc:	f8c9 7000 	str.w	r7, [r9]
  404100:	f8c9 5004 	str.w	r5, [r9, #4]
  404104:	f300 8428 	bgt.w	404958 <_svfprintf_r+0xc7c>
  404108:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40410c:	f109 0908 	add.w	r9, r9, #8
  404110:	b177      	cbz	r7, 404130 <_svfprintf_r+0x454>
  404112:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404114:	3301      	adds	r3, #1
  404116:	3401      	adds	r4, #1
  404118:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40411c:	2201      	movs	r2, #1
  40411e:	2b07      	cmp	r3, #7
  404120:	9425      	str	r4, [sp, #148]	; 0x94
  404122:	9324      	str	r3, [sp, #144]	; 0x90
  404124:	e889 0006 	stmia.w	r9, {r1, r2}
  404128:	f300 83a0 	bgt.w	40486c <_svfprintf_r+0xb90>
  40412c:	f109 0908 	add.w	r9, r9, #8
  404130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404132:	b16b      	cbz	r3, 404150 <_svfprintf_r+0x474>
  404134:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404136:	3301      	adds	r3, #1
  404138:	3402      	adds	r4, #2
  40413a:	a91c      	add	r1, sp, #112	; 0x70
  40413c:	2202      	movs	r2, #2
  40413e:	2b07      	cmp	r3, #7
  404140:	9425      	str	r4, [sp, #148]	; 0x94
  404142:	9324      	str	r3, [sp, #144]	; 0x90
  404144:	e889 0006 	stmia.w	r9, {r1, r2}
  404148:	f300 839c 	bgt.w	404884 <_svfprintf_r+0xba8>
  40414c:	f109 0908 	add.w	r9, r9, #8
  404150:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404152:	2b80      	cmp	r3, #128	; 0x80
  404154:	f000 82d5 	beq.w	404702 <_svfprintf_r+0xa26>
  404158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40415a:	ebc3 070b 	rsb	r7, r3, fp
  40415e:	2f00      	cmp	r7, #0
  404160:	dd39      	ble.n	4041d6 <_svfprintf_r+0x4fa>
  404162:	4a07      	ldr	r2, [pc, #28]	; (404180 <_svfprintf_r+0x4a4>)
  404164:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404166:	920f      	str	r2, [sp, #60]	; 0x3c
  404168:	2f10      	cmp	r7, #16
  40416a:	dd28      	ble.n	4041be <_svfprintf_r+0x4e2>
  40416c:	4622      	mov	r2, r4
  40416e:	f04f 0b10 	mov.w	fp, #16
  404172:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404174:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404176:	e00a      	b.n	40418e <_svfprintf_r+0x4b2>
  404178:	00408bc4 	.word	0x00408bc4
  40417c:	00408be4 	.word	0x00408be4
  404180:	00408b90 	.word	0x00408b90
  404184:	3f10      	subs	r7, #16
  404186:	2f10      	cmp	r7, #16
  404188:	f109 0908 	add.w	r9, r9, #8
  40418c:	dd16      	ble.n	4041bc <_svfprintf_r+0x4e0>
  40418e:	3301      	adds	r3, #1
  404190:	3210      	adds	r2, #16
  404192:	2b07      	cmp	r3, #7
  404194:	9225      	str	r2, [sp, #148]	; 0x94
  404196:	9324      	str	r3, [sp, #144]	; 0x90
  404198:	e889 0c00 	stmia.w	r9, {sl, fp}
  40419c:	ddf2      	ble.n	404184 <_svfprintf_r+0x4a8>
  40419e:	aa23      	add	r2, sp, #140	; 0x8c
  4041a0:	4621      	mov	r1, r4
  4041a2:	4628      	mov	r0, r5
  4041a4:	f003 fab6 	bl	407714 <__ssprint_r>
  4041a8:	2800      	cmp	r0, #0
  4041aa:	f47f ae90 	bne.w	403ece <_svfprintf_r+0x1f2>
  4041ae:	3f10      	subs	r7, #16
  4041b0:	2f10      	cmp	r7, #16
  4041b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4041b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041b6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4041ba:	dce8      	bgt.n	40418e <_svfprintf_r+0x4b2>
  4041bc:	4614      	mov	r4, r2
  4041be:	3301      	adds	r3, #1
  4041c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4041c2:	9324      	str	r3, [sp, #144]	; 0x90
  4041c4:	443c      	add	r4, r7
  4041c6:	2b07      	cmp	r3, #7
  4041c8:	9425      	str	r4, [sp, #148]	; 0x94
  4041ca:	e889 0084 	stmia.w	r9, {r2, r7}
  4041ce:	f300 8341 	bgt.w	404854 <_svfprintf_r+0xb78>
  4041d2:	f109 0908 	add.w	r9, r9, #8
  4041d6:	9b07      	ldr	r3, [sp, #28]
  4041d8:	05da      	lsls	r2, r3, #23
  4041da:	f100 8230 	bmi.w	40463e <_svfprintf_r+0x962>
  4041de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041e0:	990d      	ldr	r1, [sp, #52]	; 0x34
  4041e2:	f8c9 6000 	str.w	r6, [r9]
  4041e6:	3301      	adds	r3, #1
  4041e8:	440c      	add	r4, r1
  4041ea:	2b07      	cmp	r3, #7
  4041ec:	9425      	str	r4, [sp, #148]	; 0x94
  4041ee:	f8c9 1004 	str.w	r1, [r9, #4]
  4041f2:	9324      	str	r3, [sp, #144]	; 0x90
  4041f4:	f300 8318 	bgt.w	404828 <_svfprintf_r+0xb4c>
  4041f8:	f109 0908 	add.w	r9, r9, #8
  4041fc:	9b07      	ldr	r3, [sp, #28]
  4041fe:	0759      	lsls	r1, r3, #29
  404200:	d53f      	bpl.n	404282 <_svfprintf_r+0x5a6>
  404202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404204:	9a08      	ldr	r2, [sp, #32]
  404206:	1a9d      	subs	r5, r3, r2
  404208:	2d00      	cmp	r5, #0
  40420a:	dd3a      	ble.n	404282 <_svfprintf_r+0x5a6>
  40420c:	2d10      	cmp	r5, #16
  40420e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404210:	4fbc      	ldr	r7, [pc, #752]	; (404504 <_svfprintf_r+0x828>)
  404212:	dd23      	ble.n	40425c <_svfprintf_r+0x580>
  404214:	4622      	mov	r2, r4
  404216:	2610      	movs	r6, #16
  404218:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40421c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40421e:	e004      	b.n	40422a <_svfprintf_r+0x54e>
  404220:	3d10      	subs	r5, #16
  404222:	2d10      	cmp	r5, #16
  404224:	f109 0908 	add.w	r9, r9, #8
  404228:	dd17      	ble.n	40425a <_svfprintf_r+0x57e>
  40422a:	3301      	adds	r3, #1
  40422c:	49b5      	ldr	r1, [pc, #724]	; (404504 <_svfprintf_r+0x828>)
  40422e:	9324      	str	r3, [sp, #144]	; 0x90
  404230:	3210      	adds	r2, #16
  404232:	2b07      	cmp	r3, #7
  404234:	9225      	str	r2, [sp, #148]	; 0x94
  404236:	e889 0042 	stmia.w	r9, {r1, r6}
  40423a:	ddf1      	ble.n	404220 <_svfprintf_r+0x544>
  40423c:	aa23      	add	r2, sp, #140	; 0x8c
  40423e:	4621      	mov	r1, r4
  404240:	4658      	mov	r0, fp
  404242:	f003 fa67 	bl	407714 <__ssprint_r>
  404246:	2800      	cmp	r0, #0
  404248:	f47f ae41 	bne.w	403ece <_svfprintf_r+0x1f2>
  40424c:	3d10      	subs	r5, #16
  40424e:	2d10      	cmp	r5, #16
  404250:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404252:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404254:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404258:	dce7      	bgt.n	40422a <_svfprintf_r+0x54e>
  40425a:	4614      	mov	r4, r2
  40425c:	3301      	adds	r3, #1
  40425e:	442c      	add	r4, r5
  404260:	2b07      	cmp	r3, #7
  404262:	9425      	str	r4, [sp, #148]	; 0x94
  404264:	9324      	str	r3, [sp, #144]	; 0x90
  404266:	f8c9 7000 	str.w	r7, [r9]
  40426a:	f8c9 5004 	str.w	r5, [r9, #4]
  40426e:	dd08      	ble.n	404282 <_svfprintf_r+0x5a6>
  404270:	aa23      	add	r2, sp, #140	; 0x8c
  404272:	9909      	ldr	r1, [sp, #36]	; 0x24
  404274:	980a      	ldr	r0, [sp, #40]	; 0x28
  404276:	f003 fa4d 	bl	407714 <__ssprint_r>
  40427a:	2800      	cmp	r0, #0
  40427c:	f47f ae27 	bne.w	403ece <_svfprintf_r+0x1f2>
  404280:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404286:	9908      	ldr	r1, [sp, #32]
  404288:	428a      	cmp	r2, r1
  40428a:	bfac      	ite	ge
  40428c:	189b      	addge	r3, r3, r2
  40428e:	185b      	addlt	r3, r3, r1
  404290:	930b      	str	r3, [sp, #44]	; 0x2c
  404292:	2c00      	cmp	r4, #0
  404294:	f040 82d4 	bne.w	404840 <_svfprintf_r+0xb64>
  404298:	2300      	movs	r3, #0
  40429a:	9324      	str	r3, [sp, #144]	; 0x90
  40429c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4042a0:	e542      	b.n	403d28 <_svfprintf_r+0x4c>
  4042a2:	9311      	str	r3, [sp, #68]	; 0x44
  4042a4:	46ab      	mov	fp, r5
  4042a6:	2a00      	cmp	r2, #0
  4042a8:	f041 8059 	bne.w	40535e <_svfprintf_r+0x1682>
  4042ac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4042ae:	3707      	adds	r7, #7
  4042b0:	f027 0307 	bic.w	r3, r7, #7
  4042b4:	f103 0208 	add.w	r2, r3, #8
  4042b8:	920e      	str	r2, [sp, #56]	; 0x38
  4042ba:	681a      	ldr	r2, [r3, #0]
  4042bc:	9214      	str	r2, [sp, #80]	; 0x50
  4042be:	685b      	ldr	r3, [r3, #4]
  4042c0:	9315      	str	r3, [sp, #84]	; 0x54
  4042c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4042c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4042c6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4042ca:	4628      	mov	r0, r5
  4042cc:	4621      	mov	r1, r4
  4042ce:	f04f 32ff 	mov.w	r2, #4294967295
  4042d2:	4b8d      	ldr	r3, [pc, #564]	; (404508 <_svfprintf_r+0x82c>)
  4042d4:	f004 fa70 	bl	4087b8 <__aeabi_dcmpun>
  4042d8:	2800      	cmp	r0, #0
  4042da:	f040 84c1 	bne.w	404c60 <_svfprintf_r+0xf84>
  4042de:	4628      	mov	r0, r5
  4042e0:	4621      	mov	r1, r4
  4042e2:	f04f 32ff 	mov.w	r2, #4294967295
  4042e6:	4b88      	ldr	r3, [pc, #544]	; (404508 <_svfprintf_r+0x82c>)
  4042e8:	f004 fa48 	bl	40877c <__aeabi_dcmple>
  4042ec:	2800      	cmp	r0, #0
  4042ee:	f040 84b7 	bne.w	404c60 <_svfprintf_r+0xf84>
  4042f2:	9814      	ldr	r0, [sp, #80]	; 0x50
  4042f4:	9915      	ldr	r1, [sp, #84]	; 0x54
  4042f6:	2200      	movs	r2, #0
  4042f8:	2300      	movs	r3, #0
  4042fa:	f004 fa35 	bl	408768 <__aeabi_dcmplt>
  4042fe:	2800      	cmp	r0, #0
  404300:	f040 874b 	bne.w	40519a <_svfprintf_r+0x14be>
  404304:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404308:	4e80      	ldr	r6, [pc, #512]	; (40450c <_svfprintf_r+0x830>)
  40430a:	4b81      	ldr	r3, [pc, #516]	; (404510 <_svfprintf_r+0x834>)
  40430c:	9907      	ldr	r1, [sp, #28]
  40430e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  404312:	9107      	str	r1, [sp, #28]
  404314:	9911      	ldr	r1, [sp, #68]	; 0x44
  404316:	2203      	movs	r2, #3
  404318:	f04f 0b00 	mov.w	fp, #0
  40431c:	9208      	str	r2, [sp, #32]
  40431e:	2947      	cmp	r1, #71	; 0x47
  404320:	bfd8      	it	le
  404322:	461e      	movle	r6, r3
  404324:	920d      	str	r2, [sp, #52]	; 0x34
  404326:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40432a:	e69d      	b.n	404068 <_svfprintf_r+0x38c>
  40432c:	9b07      	ldr	r3, [sp, #28]
  40432e:	f043 0308 	orr.w	r3, r3, #8
  404332:	9307      	str	r3, [sp, #28]
  404334:	f898 3000 	ldrb.w	r3, [r8]
  404338:	e529      	b.n	403d8e <_svfprintf_r+0xb2>
  40433a:	9311      	str	r3, [sp, #68]	; 0x44
  40433c:	46ab      	mov	fp, r5
  40433e:	2a00      	cmp	r2, #0
  404340:	f041 8009 	bne.w	405356 <_svfprintf_r+0x167a>
  404344:	9b07      	ldr	r3, [sp, #28]
  404346:	f043 0310 	orr.w	r3, r3, #16
  40434a:	9307      	str	r3, [sp, #28]
  40434c:	9a07      	ldr	r2, [sp, #28]
  40434e:	f012 0320 	ands.w	r3, r2, #32
  404352:	f47f add2 	bne.w	403efa <_svfprintf_r+0x21e>
  404356:	9907      	ldr	r1, [sp, #28]
  404358:	f011 0210 	ands.w	r2, r1, #16
  40435c:	f000 8507 	beq.w	404d6e <_svfprintf_r+0x1092>
  404360:	980e      	ldr	r0, [sp, #56]	; 0x38
  404362:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404366:	f1bb 0f00 	cmp.w	fp, #0
  40436a:	6804      	ldr	r4, [r0, #0]
  40436c:	f100 0704 	add.w	r7, r0, #4
  404370:	f04f 0500 	mov.w	r5, #0
  404374:	f2c0 8521 	blt.w	404dba <_svfprintf_r+0x10de>
  404378:	460a      	mov	r2, r1
  40437a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40437e:	9207      	str	r2, [sp, #28]
  404380:	ea54 0205 	orrs.w	r2, r4, r5
  404384:	970e      	str	r7, [sp, #56]	; 0x38
  404386:	f000 8143 	beq.w	404610 <_svfprintf_r+0x934>
  40438a:	461f      	mov	r7, r3
  40438c:	e5cb      	b.n	403f26 <_svfprintf_r+0x24a>
  40438e:	9311      	str	r3, [sp, #68]	; 0x44
  404390:	46ab      	mov	fp, r5
  404392:	2a00      	cmp	r2, #0
  404394:	f040 87d7 	bne.w	405346 <_svfprintf_r+0x166a>
  404398:	9b07      	ldr	r3, [sp, #28]
  40439a:	f043 0310 	orr.w	r3, r3, #16
  40439e:	9307      	str	r3, [sp, #28]
  4043a0:	9a07      	ldr	r2, [sp, #28]
  4043a2:	f012 0320 	ands.w	r3, r2, #32
  4043a6:	f000 8332 	beq.w	404a0e <_svfprintf_r+0xd32>
  4043aa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4043ac:	3707      	adds	r7, #7
  4043ae:	f027 0307 	bic.w	r3, r7, #7
  4043b2:	2700      	movs	r7, #0
  4043b4:	f103 0108 	add.w	r1, r3, #8
  4043b8:	45bb      	cmp	fp, r7
  4043ba:	910e      	str	r1, [sp, #56]	; 0x38
  4043bc:	e9d3 4500 	ldrd	r4, r5, [r3]
  4043c0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4043c4:	f2c0 835c 	blt.w	404a80 <_svfprintf_r+0xda4>
  4043c8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4043cc:	9307      	str	r3, [sp, #28]
  4043ce:	ea54 0305 	orrs.w	r3, r4, r5
  4043d2:	f47f ae25 	bne.w	404020 <_svfprintf_r+0x344>
  4043d6:	f1bb 0f00 	cmp.w	fp, #0
  4043da:	f000 80fe 	beq.w	4045da <_svfprintf_r+0x8fe>
  4043de:	2400      	movs	r4, #0
  4043e0:	ae40      	add	r6, sp, #256	; 0x100
  4043e2:	3430      	adds	r4, #48	; 0x30
  4043e4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4043e8:	e634      	b.n	404054 <_svfprintf_r+0x378>
  4043ea:	9311      	str	r3, [sp, #68]	; 0x44
  4043ec:	46ab      	mov	fp, r5
  4043ee:	2a00      	cmp	r2, #0
  4043f0:	f040 87a5 	bne.w	40533e <_svfprintf_r+0x1662>
  4043f4:	9b07      	ldr	r3, [sp, #28]
  4043f6:	4847      	ldr	r0, [pc, #284]	; (404514 <_svfprintf_r+0x838>)
  4043f8:	069d      	lsls	r5, r3, #26
  4043fa:	f140 8097 	bpl.w	40452c <_svfprintf_r+0x850>
  4043fe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404400:	3707      	adds	r7, #7
  404402:	f027 0307 	bic.w	r3, r7, #7
  404406:	e9d3 4500 	ldrd	r4, r5, [r3]
  40440a:	f103 0208 	add.w	r2, r3, #8
  40440e:	920e      	str	r2, [sp, #56]	; 0x38
  404410:	9a07      	ldr	r2, [sp, #28]
  404412:	f012 0701 	ands.w	r7, r2, #1
  404416:	f000 8241 	beq.w	40489c <_svfprintf_r+0xbc0>
  40441a:	ea54 0305 	orrs.w	r3, r4, r5
  40441e:	f000 84f5 	beq.w	404e0c <_svfprintf_r+0x1130>
  404422:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404426:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40442a:	2700      	movs	r7, #0
  40442c:	9a07      	ldr	r2, [sp, #28]
  40442e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404432:	2330      	movs	r3, #48	; 0x30
  404434:	45bb      	cmp	fp, r7
  404436:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40443a:	f042 0302 	orr.w	r3, r2, #2
  40443e:	f2c0 86a9 	blt.w	405194 <_svfprintf_r+0x14b8>
  404442:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404446:	f043 0302 	orr.w	r3, r3, #2
  40444a:	9307      	str	r3, [sp, #28]
  40444c:	ae30      	add	r6, sp, #192	; 0xc0
  40444e:	0923      	lsrs	r3, r4, #4
  404450:	f004 010f 	and.w	r1, r4, #15
  404454:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404458:	092a      	lsrs	r2, r5, #4
  40445a:	461c      	mov	r4, r3
  40445c:	4615      	mov	r5, r2
  40445e:	5c43      	ldrb	r3, [r0, r1]
  404460:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404464:	ea54 0305 	orrs.w	r3, r4, r5
  404468:	d1f1      	bne.n	40444e <_svfprintf_r+0x772>
  40446a:	e5f3      	b.n	404054 <_svfprintf_r+0x378>
  40446c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40446e:	9311      	str	r3, [sp, #68]	; 0x44
  404470:	680a      	ldr	r2, [r1, #0]
  404472:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404476:	2300      	movs	r3, #0
  404478:	460a      	mov	r2, r1
  40447a:	461f      	mov	r7, r3
  40447c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404480:	3204      	adds	r2, #4
  404482:	2301      	movs	r3, #1
  404484:	9308      	str	r3, [sp, #32]
  404486:	46bb      	mov	fp, r7
  404488:	9713      	str	r7, [sp, #76]	; 0x4c
  40448a:	920e      	str	r2, [sp, #56]	; 0x38
  40448c:	930d      	str	r3, [sp, #52]	; 0x34
  40448e:	ae26      	add	r6, sp, #152	; 0x98
  404490:	e5ee      	b.n	404070 <_svfprintf_r+0x394>
  404492:	9311      	str	r3, [sp, #68]	; 0x44
  404494:	46ab      	mov	fp, r5
  404496:	2a00      	cmp	r2, #0
  404498:	f43f ada0 	beq.w	403fdc <_svfprintf_r+0x300>
  40449c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4044a0:	e59c      	b.n	403fdc <_svfprintf_r+0x300>
  4044a2:	9b07      	ldr	r3, [sp, #28]
  4044a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4044a8:	9307      	str	r3, [sp, #28]
  4044aa:	f898 3000 	ldrb.w	r3, [r8]
  4044ae:	e46e      	b.n	403d8e <_svfprintf_r+0xb2>
  4044b0:	f898 3000 	ldrb.w	r3, [r8]
  4044b4:	2900      	cmp	r1, #0
  4044b6:	f47f ac6a 	bne.w	403d8e <_svfprintf_r+0xb2>
  4044ba:	2201      	movs	r2, #1
  4044bc:	2120      	movs	r1, #32
  4044be:	e466      	b.n	403d8e <_svfprintf_r+0xb2>
  4044c0:	9b07      	ldr	r3, [sp, #28]
  4044c2:	f043 0301 	orr.w	r3, r3, #1
  4044c6:	9307      	str	r3, [sp, #28]
  4044c8:	f898 3000 	ldrb.w	r3, [r8]
  4044cc:	e45f      	b.n	403d8e <_svfprintf_r+0xb2>
  4044ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4044d0:	6823      	ldr	r3, [r4, #0]
  4044d2:	930c      	str	r3, [sp, #48]	; 0x30
  4044d4:	4618      	mov	r0, r3
  4044d6:	2800      	cmp	r0, #0
  4044d8:	4623      	mov	r3, r4
  4044da:	f103 0304 	add.w	r3, r3, #4
  4044de:	f6ff acb8 	blt.w	403e52 <_svfprintf_r+0x176>
  4044e2:	930e      	str	r3, [sp, #56]	; 0x38
  4044e4:	f898 3000 	ldrb.w	r3, [r8]
  4044e8:	e451      	b.n	403d8e <_svfprintf_r+0xb2>
  4044ea:	f898 3000 	ldrb.w	r3, [r8]
  4044ee:	2201      	movs	r2, #1
  4044f0:	212b      	movs	r1, #43	; 0x2b
  4044f2:	e44c      	b.n	403d8e <_svfprintf_r+0xb2>
  4044f4:	9311      	str	r3, [sp, #68]	; 0x44
  4044f6:	46ab      	mov	fp, r5
  4044f8:	2a00      	cmp	r2, #0
  4044fa:	f43f af51 	beq.w	4043a0 <_svfprintf_r+0x6c4>
  4044fe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404502:	e74d      	b.n	4043a0 <_svfprintf_r+0x6c4>
  404504:	00408be4 	.word	0x00408be4
  404508:	7fefffff 	.word	0x7fefffff
  40450c:	00408ba4 	.word	0x00408ba4
  404510:	00408ba0 	.word	0x00408ba0
  404514:	00408bb0 	.word	0x00408bb0
  404518:	9311      	str	r3, [sp, #68]	; 0x44
  40451a:	46ab      	mov	fp, r5
  40451c:	2a00      	cmp	r2, #0
  40451e:	f040 8703 	bne.w	405328 <_svfprintf_r+0x164c>
  404522:	9b07      	ldr	r3, [sp, #28]
  404524:	4899      	ldr	r0, [pc, #612]	; (40478c <_svfprintf_r+0xab0>)
  404526:	069d      	lsls	r5, r3, #26
  404528:	f53f af69 	bmi.w	4043fe <_svfprintf_r+0x722>
  40452c:	9b07      	ldr	r3, [sp, #28]
  40452e:	06dc      	lsls	r4, r3, #27
  404530:	f140 845e 	bpl.w	404df0 <_svfprintf_r+0x1114>
  404534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404536:	4613      	mov	r3, r2
  404538:	3304      	adds	r3, #4
  40453a:	6814      	ldr	r4, [r2, #0]
  40453c:	930e      	str	r3, [sp, #56]	; 0x38
  40453e:	2500      	movs	r5, #0
  404540:	e766      	b.n	404410 <_svfprintf_r+0x734>
  404542:	f898 3000 	ldrb.w	r3, [r8]
  404546:	2b6c      	cmp	r3, #108	; 0x6c
  404548:	f000 84e1 	beq.w	404f0e <_svfprintf_r+0x1232>
  40454c:	9807      	ldr	r0, [sp, #28]
  40454e:	f040 0010 	orr.w	r0, r0, #16
  404552:	9007      	str	r0, [sp, #28]
  404554:	e41b      	b.n	403d8e <_svfprintf_r+0xb2>
  404556:	2a00      	cmp	r2, #0
  404558:	f040 86db 	bne.w	405312 <_svfprintf_r+0x1636>
  40455c:	9b07      	ldr	r3, [sp, #28]
  40455e:	069b      	lsls	r3, r3, #26
  404560:	f140 842f 	bpl.w	404dc2 <_svfprintf_r+0x10e6>
  404564:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404566:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404568:	6813      	ldr	r3, [r2, #0]
  40456a:	17cd      	asrs	r5, r1, #31
  40456c:	4608      	mov	r0, r1
  40456e:	3204      	adds	r2, #4
  404570:	4629      	mov	r1, r5
  404572:	920e      	str	r2, [sp, #56]	; 0x38
  404574:	e9c3 0100 	strd	r0, r1, [r3]
  404578:	f7ff bbd6 	b.w	403d28 <_svfprintf_r+0x4c>
  40457c:	9b07      	ldr	r3, [sp, #28]
  40457e:	f043 0320 	orr.w	r3, r3, #32
  404582:	9307      	str	r3, [sp, #28]
  404584:	f898 3000 	ldrb.w	r3, [r8]
  404588:	e401      	b.n	403d8e <_svfprintf_r+0xb2>
  40458a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40458c:	9311      	str	r3, [sp, #68]	; 0x44
  40458e:	6816      	ldr	r6, [r2, #0]
  404590:	2400      	movs	r4, #0
  404592:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  404596:	1d17      	adds	r7, r2, #4
  404598:	2e00      	cmp	r6, #0
  40459a:	f000 85bd 	beq.w	405118 <_svfprintf_r+0x143c>
  40459e:	2d00      	cmp	r5, #0
  4045a0:	f2c0 850f 	blt.w	404fc2 <_svfprintf_r+0x12e6>
  4045a4:	462a      	mov	r2, r5
  4045a6:	4621      	mov	r1, r4
  4045a8:	4630      	mov	r0, r6
  4045aa:	f002 fc61 	bl	406e70 <memchr>
  4045ae:	2800      	cmp	r0, #0
  4045b0:	f000 8604 	beq.w	4051bc <_svfprintf_r+0x14e0>
  4045b4:	1b83      	subs	r3, r0, r6
  4045b6:	930d      	str	r3, [sp, #52]	; 0x34
  4045b8:	46a3      	mov	fp, r4
  4045ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4045be:	970e      	str	r7, [sp, #56]	; 0x38
  4045c0:	9308      	str	r3, [sp, #32]
  4045c2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  4045c6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4045ca:	e54d      	b.n	404068 <_svfprintf_r+0x38c>
  4045cc:	486f      	ldr	r0, [pc, #444]	; (40478c <_svfprintf_r+0xab0>)
  4045ce:	9211      	str	r2, [sp, #68]	; 0x44
  4045d0:	f1bb 0f00 	cmp.w	fp, #0
  4045d4:	f040 8173 	bne.w	4048be <_svfprintf_r+0xbe2>
  4045d8:	465f      	mov	r7, fp
  4045da:	f04f 0b00 	mov.w	fp, #0
  4045de:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4045e2:	ae30      	add	r6, sp, #192	; 0xc0
  4045e4:	e539      	b.n	40405a <_svfprintf_r+0x37e>
  4045e6:	9311      	str	r3, [sp, #68]	; 0x44
  4045e8:	2a00      	cmp	r2, #0
  4045ea:	f040 86b0 	bne.w	40534e <_svfprintf_r+0x1672>
  4045ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045f0:	2a00      	cmp	r2, #0
  4045f2:	f43f ac65 	beq.w	403ec0 <_svfprintf_r+0x1e4>
  4045f6:	2300      	movs	r3, #0
  4045f8:	2101      	movs	r1, #1
  4045fa:	461f      	mov	r7, r3
  4045fc:	9108      	str	r1, [sp, #32]
  4045fe:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404602:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404606:	469b      	mov	fp, r3
  404608:	9313      	str	r3, [sp, #76]	; 0x4c
  40460a:	910d      	str	r1, [sp, #52]	; 0x34
  40460c:	ae26      	add	r6, sp, #152	; 0x98
  40460e:	e52f      	b.n	404070 <_svfprintf_r+0x394>
  404610:	f1bb 0f00 	cmp.w	fp, #0
  404614:	f000 85dd 	beq.w	4051d2 <_svfprintf_r+0x14f6>
  404618:	2700      	movs	r7, #0
  40461a:	2400      	movs	r4, #0
  40461c:	2500      	movs	r5, #0
  40461e:	e482      	b.n	403f26 <_svfprintf_r+0x24a>
  404620:	485a      	ldr	r0, [pc, #360]	; (40478c <_svfprintf_r+0xab0>)
  404622:	9307      	str	r3, [sp, #28]
  404624:	9211      	str	r2, [sp, #68]	; 0x44
  404626:	ea54 0305 	orrs.w	r3, r4, r5
  40462a:	970e      	str	r7, [sp, #56]	; 0x38
  40462c:	f04f 0700 	mov.w	r7, #0
  404630:	f47f af0c 	bne.w	40444c <_svfprintf_r+0x770>
  404634:	2400      	movs	r4, #0
  404636:	2500      	movs	r5, #0
  404638:	e708      	b.n	40444c <_svfprintf_r+0x770>
  40463a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40463c:	e568      	b.n	404110 <_svfprintf_r+0x434>
  40463e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404640:	2b65      	cmp	r3, #101	; 0x65
  404642:	f340 80a9 	ble.w	404798 <_svfprintf_r+0xabc>
  404646:	9814      	ldr	r0, [sp, #80]	; 0x50
  404648:	9915      	ldr	r1, [sp, #84]	; 0x54
  40464a:	2200      	movs	r2, #0
  40464c:	2300      	movs	r3, #0
  40464e:	f004 f881 	bl	408754 <__aeabi_dcmpeq>
  404652:	2800      	cmp	r0, #0
  404654:	f000 8135 	beq.w	4048c2 <_svfprintf_r+0xbe6>
  404658:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40465a:	4a4d      	ldr	r2, [pc, #308]	; (404790 <_svfprintf_r+0xab4>)
  40465c:	f8c9 2000 	str.w	r2, [r9]
  404660:	3301      	adds	r3, #1
  404662:	3401      	adds	r4, #1
  404664:	2201      	movs	r2, #1
  404666:	2b07      	cmp	r3, #7
  404668:	9425      	str	r4, [sp, #148]	; 0x94
  40466a:	9324      	str	r3, [sp, #144]	; 0x90
  40466c:	f8c9 2004 	str.w	r2, [r9, #4]
  404670:	f300 83e6 	bgt.w	404e40 <_svfprintf_r+0x1164>
  404674:	f109 0908 	add.w	r9, r9, #8
  404678:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40467a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40467c:	4293      	cmp	r3, r2
  40467e:	db03      	blt.n	404688 <_svfprintf_r+0x9ac>
  404680:	9b07      	ldr	r3, [sp, #28]
  404682:	07db      	lsls	r3, r3, #31
  404684:	f57f adba 	bpl.w	4041fc <_svfprintf_r+0x520>
  404688:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40468a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40468c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40468e:	f8c9 2000 	str.w	r2, [r9]
  404692:	3301      	adds	r3, #1
  404694:	440c      	add	r4, r1
  404696:	2b07      	cmp	r3, #7
  404698:	9425      	str	r4, [sp, #148]	; 0x94
  40469a:	f8c9 1004 	str.w	r1, [r9, #4]
  40469e:	9324      	str	r3, [sp, #144]	; 0x90
  4046a0:	f300 843f 	bgt.w	404f22 <_svfprintf_r+0x1246>
  4046a4:	f109 0908 	add.w	r9, r9, #8
  4046a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046aa:	1e5d      	subs	r5, r3, #1
  4046ac:	2d00      	cmp	r5, #0
  4046ae:	f77f ada5 	ble.w	4041fc <_svfprintf_r+0x520>
  4046b2:	4a38      	ldr	r2, [pc, #224]	; (404794 <_svfprintf_r+0xab8>)
  4046b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046b6:	920f      	str	r2, [sp, #60]	; 0x3c
  4046b8:	2d10      	cmp	r5, #16
  4046ba:	f340 81e6 	ble.w	404a8a <_svfprintf_r+0xdae>
  4046be:	2610      	movs	r6, #16
  4046c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4046c2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4046c6:	e005      	b.n	4046d4 <_svfprintf_r+0x9f8>
  4046c8:	f109 0908 	add.w	r9, r9, #8
  4046cc:	3d10      	subs	r5, #16
  4046ce:	2d10      	cmp	r5, #16
  4046d0:	f340 81db 	ble.w	404a8a <_svfprintf_r+0xdae>
  4046d4:	3301      	adds	r3, #1
  4046d6:	3410      	adds	r4, #16
  4046d8:	2b07      	cmp	r3, #7
  4046da:	9425      	str	r4, [sp, #148]	; 0x94
  4046dc:	9324      	str	r3, [sp, #144]	; 0x90
  4046de:	f8c9 a000 	str.w	sl, [r9]
  4046e2:	f8c9 6004 	str.w	r6, [r9, #4]
  4046e6:	ddef      	ble.n	4046c8 <_svfprintf_r+0x9ec>
  4046e8:	aa23      	add	r2, sp, #140	; 0x8c
  4046ea:	4659      	mov	r1, fp
  4046ec:	4638      	mov	r0, r7
  4046ee:	f003 f811 	bl	407714 <__ssprint_r>
  4046f2:	2800      	cmp	r0, #0
  4046f4:	f47f abeb 	bne.w	403ece <_svfprintf_r+0x1f2>
  4046f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4046fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046fc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404700:	e7e4      	b.n	4046cc <_svfprintf_r+0x9f0>
  404702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404704:	9a08      	ldr	r2, [sp, #32]
  404706:	1a9f      	subs	r7, r3, r2
  404708:	2f00      	cmp	r7, #0
  40470a:	f77f ad25 	ble.w	404158 <_svfprintf_r+0x47c>
  40470e:	4a21      	ldr	r2, [pc, #132]	; (404794 <_svfprintf_r+0xab8>)
  404710:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404712:	920f      	str	r2, [sp, #60]	; 0x3c
  404714:	2f10      	cmp	r7, #16
  404716:	dd2b      	ble.n	404770 <_svfprintf_r+0xa94>
  404718:	464a      	mov	r2, r9
  40471a:	4621      	mov	r1, r4
  40471c:	46b9      	mov	r9, r7
  40471e:	2510      	movs	r5, #16
  404720:	4637      	mov	r7, r6
  404722:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404724:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404726:	e006      	b.n	404736 <_svfprintf_r+0xa5a>
  404728:	f1a9 0910 	sub.w	r9, r9, #16
  40472c:	f1b9 0f10 	cmp.w	r9, #16
  404730:	f102 0208 	add.w	r2, r2, #8
  404734:	dd18      	ble.n	404768 <_svfprintf_r+0xa8c>
  404736:	3301      	adds	r3, #1
  404738:	3110      	adds	r1, #16
  40473a:	2b07      	cmp	r3, #7
  40473c:	9125      	str	r1, [sp, #148]	; 0x94
  40473e:	9324      	str	r3, [sp, #144]	; 0x90
  404740:	f8c2 a000 	str.w	sl, [r2]
  404744:	6055      	str	r5, [r2, #4]
  404746:	ddef      	ble.n	404728 <_svfprintf_r+0xa4c>
  404748:	aa23      	add	r2, sp, #140	; 0x8c
  40474a:	4631      	mov	r1, r6
  40474c:	4620      	mov	r0, r4
  40474e:	f002 ffe1 	bl	407714 <__ssprint_r>
  404752:	2800      	cmp	r0, #0
  404754:	f47f abbb 	bne.w	403ece <_svfprintf_r+0x1f2>
  404758:	f1a9 0910 	sub.w	r9, r9, #16
  40475c:	f1b9 0f10 	cmp.w	r9, #16
  404760:	9925      	ldr	r1, [sp, #148]	; 0x94
  404762:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404764:	aa30      	add	r2, sp, #192	; 0xc0
  404766:	dce6      	bgt.n	404736 <_svfprintf_r+0xa5a>
  404768:	463e      	mov	r6, r7
  40476a:	460c      	mov	r4, r1
  40476c:	464f      	mov	r7, r9
  40476e:	4691      	mov	r9, r2
  404770:	3301      	adds	r3, #1
  404772:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404774:	9324      	str	r3, [sp, #144]	; 0x90
  404776:	443c      	add	r4, r7
  404778:	2b07      	cmp	r3, #7
  40477a:	9425      	str	r4, [sp, #148]	; 0x94
  40477c:	e889 0084 	stmia.w	r9, {r2, r7}
  404780:	f300 8245 	bgt.w	404c0e <_svfprintf_r+0xf32>
  404784:	f109 0908 	add.w	r9, r9, #8
  404788:	e4e6      	b.n	404158 <_svfprintf_r+0x47c>
  40478a:	bf00      	nop
  40478c:	00408bc4 	.word	0x00408bc4
  404790:	00408be0 	.word	0x00408be0
  404794:	00408b90 	.word	0x00408b90
  404798:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40479a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40479c:	2b01      	cmp	r3, #1
  40479e:	f340 8208 	ble.w	404bb2 <_svfprintf_r+0xed6>
  4047a2:	3501      	adds	r5, #1
  4047a4:	3401      	adds	r4, #1
  4047a6:	2301      	movs	r3, #1
  4047a8:	2d07      	cmp	r5, #7
  4047aa:	9425      	str	r4, [sp, #148]	; 0x94
  4047ac:	9524      	str	r5, [sp, #144]	; 0x90
  4047ae:	f8c9 6000 	str.w	r6, [r9]
  4047b2:	f8c9 3004 	str.w	r3, [r9, #4]
  4047b6:	f300 820d 	bgt.w	404bd4 <_svfprintf_r+0xef8>
  4047ba:	f109 0908 	add.w	r9, r9, #8
  4047be:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4047c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4047c2:	f8c9 3000 	str.w	r3, [r9]
  4047c6:	3501      	adds	r5, #1
  4047c8:	4414      	add	r4, r2
  4047ca:	2d07      	cmp	r5, #7
  4047cc:	9425      	str	r4, [sp, #148]	; 0x94
  4047ce:	9524      	str	r5, [sp, #144]	; 0x90
  4047d0:	f8c9 2004 	str.w	r2, [r9, #4]
  4047d4:	f300 820e 	bgt.w	404bf4 <_svfprintf_r+0xf18>
  4047d8:	f109 0908 	add.w	r9, r9, #8
  4047dc:	2300      	movs	r3, #0
  4047de:	9814      	ldr	r0, [sp, #80]	; 0x50
  4047e0:	9915      	ldr	r1, [sp, #84]	; 0x54
  4047e2:	2200      	movs	r2, #0
  4047e4:	f003 ffb6 	bl	408754 <__aeabi_dcmpeq>
  4047e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047ea:	2800      	cmp	r0, #0
  4047ec:	f040 80c3 	bne.w	404976 <_svfprintf_r+0xc9a>
  4047f0:	3b01      	subs	r3, #1
  4047f2:	3501      	adds	r5, #1
  4047f4:	3601      	adds	r6, #1
  4047f6:	441c      	add	r4, r3
  4047f8:	2d07      	cmp	r5, #7
  4047fa:	9524      	str	r5, [sp, #144]	; 0x90
  4047fc:	9425      	str	r4, [sp, #148]	; 0x94
  4047fe:	f8c9 6000 	str.w	r6, [r9]
  404802:	f8c9 3004 	str.w	r3, [r9, #4]
  404806:	f300 80f5 	bgt.w	4049f4 <_svfprintf_r+0xd18>
  40480a:	f109 0908 	add.w	r9, r9, #8
  40480e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404810:	f8c9 2004 	str.w	r2, [r9, #4]
  404814:	3501      	adds	r5, #1
  404816:	4414      	add	r4, r2
  404818:	ab1f      	add	r3, sp, #124	; 0x7c
  40481a:	2d07      	cmp	r5, #7
  40481c:	9425      	str	r4, [sp, #148]	; 0x94
  40481e:	9524      	str	r5, [sp, #144]	; 0x90
  404820:	f8c9 3000 	str.w	r3, [r9]
  404824:	f77f ace8 	ble.w	4041f8 <_svfprintf_r+0x51c>
  404828:	aa23      	add	r2, sp, #140	; 0x8c
  40482a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40482c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40482e:	f002 ff71 	bl	407714 <__ssprint_r>
  404832:	2800      	cmp	r0, #0
  404834:	f47f ab4b 	bne.w	403ece <_svfprintf_r+0x1f2>
  404838:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40483a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40483e:	e4dd      	b.n	4041fc <_svfprintf_r+0x520>
  404840:	aa23      	add	r2, sp, #140	; 0x8c
  404842:	9909      	ldr	r1, [sp, #36]	; 0x24
  404844:	980a      	ldr	r0, [sp, #40]	; 0x28
  404846:	f002 ff65 	bl	407714 <__ssprint_r>
  40484a:	2800      	cmp	r0, #0
  40484c:	f43f ad24 	beq.w	404298 <_svfprintf_r+0x5bc>
  404850:	f7ff bb3d 	b.w	403ece <_svfprintf_r+0x1f2>
  404854:	aa23      	add	r2, sp, #140	; 0x8c
  404856:	9909      	ldr	r1, [sp, #36]	; 0x24
  404858:	980a      	ldr	r0, [sp, #40]	; 0x28
  40485a:	f002 ff5b 	bl	407714 <__ssprint_r>
  40485e:	2800      	cmp	r0, #0
  404860:	f47f ab35 	bne.w	403ece <_svfprintf_r+0x1f2>
  404864:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404866:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40486a:	e4b4      	b.n	4041d6 <_svfprintf_r+0x4fa>
  40486c:	aa23      	add	r2, sp, #140	; 0x8c
  40486e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404870:	980a      	ldr	r0, [sp, #40]	; 0x28
  404872:	f002 ff4f 	bl	407714 <__ssprint_r>
  404876:	2800      	cmp	r0, #0
  404878:	f47f ab29 	bne.w	403ece <_svfprintf_r+0x1f2>
  40487c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40487e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404882:	e455      	b.n	404130 <_svfprintf_r+0x454>
  404884:	aa23      	add	r2, sp, #140	; 0x8c
  404886:	9909      	ldr	r1, [sp, #36]	; 0x24
  404888:	980a      	ldr	r0, [sp, #40]	; 0x28
  40488a:	f002 ff43 	bl	407714 <__ssprint_r>
  40488e:	2800      	cmp	r0, #0
  404890:	f47f ab1d 	bne.w	403ece <_svfprintf_r+0x1f2>
  404894:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404896:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40489a:	e459      	b.n	404150 <_svfprintf_r+0x474>
  40489c:	f1bb 0f00 	cmp.w	fp, #0
  4048a0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4048a4:	f2c0 82d8 	blt.w	404e58 <_svfprintf_r+0x117c>
  4048a8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4048ac:	9307      	str	r3, [sp, #28]
  4048ae:	ea54 0305 	orrs.w	r3, r4, r5
  4048b2:	f47f adcb 	bne.w	40444c <_svfprintf_r+0x770>
  4048b6:	f1bb 0f00 	cmp.w	fp, #0
  4048ba:	f43f ae8d 	beq.w	4045d8 <_svfprintf_r+0x8fc>
  4048be:	2700      	movs	r7, #0
  4048c0:	e6b8      	b.n	404634 <_svfprintf_r+0x958>
  4048c2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4048c4:	2d00      	cmp	r5, #0
  4048c6:	f340 82ca 	ble.w	404e5e <_svfprintf_r+0x1182>
  4048ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4048ce:	4293      	cmp	r3, r2
  4048d0:	bfa8      	it	ge
  4048d2:	4613      	movge	r3, r2
  4048d4:	2b00      	cmp	r3, #0
  4048d6:	461d      	mov	r5, r3
  4048d8:	dd0d      	ble.n	4048f6 <_svfprintf_r+0xc1a>
  4048da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048dc:	f8c9 6000 	str.w	r6, [r9]
  4048e0:	3301      	adds	r3, #1
  4048e2:	442c      	add	r4, r5
  4048e4:	2b07      	cmp	r3, #7
  4048e6:	9425      	str	r4, [sp, #148]	; 0x94
  4048e8:	f8c9 5004 	str.w	r5, [r9, #4]
  4048ec:	9324      	str	r3, [sp, #144]	; 0x90
  4048ee:	f300 839c 	bgt.w	40502a <_svfprintf_r+0x134e>
  4048f2:	f109 0908 	add.w	r9, r9, #8
  4048f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048f8:	2d00      	cmp	r5, #0
  4048fa:	bfa8      	it	ge
  4048fc:	1b5b      	subge	r3, r3, r5
  4048fe:	2b00      	cmp	r3, #0
  404900:	461d      	mov	r5, r3
  404902:	f340 80f6 	ble.w	404af2 <_svfprintf_r+0xe16>
  404906:	4aba      	ldr	r2, [pc, #744]	; (404bf0 <_svfprintf_r+0xf14>)
  404908:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40490a:	920f      	str	r2, [sp, #60]	; 0x3c
  40490c:	2d10      	cmp	r5, #16
  40490e:	f340 828a 	ble.w	404e26 <_svfprintf_r+0x114a>
  404912:	4622      	mov	r2, r4
  404914:	2710      	movs	r7, #16
  404916:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40491a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40491c:	e005      	b.n	40492a <_svfprintf_r+0xc4e>
  40491e:	f109 0908 	add.w	r9, r9, #8
  404922:	3d10      	subs	r5, #16
  404924:	2d10      	cmp	r5, #16
  404926:	f340 827d 	ble.w	404e24 <_svfprintf_r+0x1148>
  40492a:	3301      	adds	r3, #1
  40492c:	3210      	adds	r2, #16
  40492e:	2b07      	cmp	r3, #7
  404930:	9225      	str	r2, [sp, #148]	; 0x94
  404932:	9324      	str	r3, [sp, #144]	; 0x90
  404934:	f8c9 a000 	str.w	sl, [r9]
  404938:	f8c9 7004 	str.w	r7, [r9, #4]
  40493c:	ddef      	ble.n	40491e <_svfprintf_r+0xc42>
  40493e:	aa23      	add	r2, sp, #140	; 0x8c
  404940:	4621      	mov	r1, r4
  404942:	4658      	mov	r0, fp
  404944:	f002 fee6 	bl	407714 <__ssprint_r>
  404948:	2800      	cmp	r0, #0
  40494a:	f47f aac0 	bne.w	403ece <_svfprintf_r+0x1f2>
  40494e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404950:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404952:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404956:	e7e4      	b.n	404922 <_svfprintf_r+0xc46>
  404958:	aa23      	add	r2, sp, #140	; 0x8c
  40495a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40495c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40495e:	f002 fed9 	bl	407714 <__ssprint_r>
  404962:	2800      	cmp	r0, #0
  404964:	f47f aab3 	bne.w	403ece <_svfprintf_r+0x1f2>
  404968:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40496c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40496e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404972:	f7ff bbcd 	b.w	404110 <_svfprintf_r+0x434>
  404976:	1e5e      	subs	r6, r3, #1
  404978:	2e00      	cmp	r6, #0
  40497a:	f77f af48 	ble.w	40480e <_svfprintf_r+0xb32>
  40497e:	4b9c      	ldr	r3, [pc, #624]	; (404bf0 <_svfprintf_r+0xf14>)
  404980:	930f      	str	r3, [sp, #60]	; 0x3c
  404982:	2e10      	cmp	r6, #16
  404984:	dd2c      	ble.n	4049e0 <_svfprintf_r+0xd04>
  404986:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40498a:	2710      	movs	r7, #16
  40498c:	46b0      	mov	r8, r6
  40498e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404992:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404994:	e006      	b.n	4049a4 <_svfprintf_r+0xcc8>
  404996:	f1a8 0810 	sub.w	r8, r8, #16
  40499a:	f1b8 0f10 	cmp.w	r8, #16
  40499e:	f109 0908 	add.w	r9, r9, #8
  4049a2:	dd1a      	ble.n	4049da <_svfprintf_r+0xcfe>
  4049a4:	3501      	adds	r5, #1
  4049a6:	3410      	adds	r4, #16
  4049a8:	2d07      	cmp	r5, #7
  4049aa:	9425      	str	r4, [sp, #148]	; 0x94
  4049ac:	9524      	str	r5, [sp, #144]	; 0x90
  4049ae:	f8c9 a000 	str.w	sl, [r9]
  4049b2:	f8c9 7004 	str.w	r7, [r9, #4]
  4049b6:	ddee      	ble.n	404996 <_svfprintf_r+0xcba>
  4049b8:	aa23      	add	r2, sp, #140	; 0x8c
  4049ba:	4631      	mov	r1, r6
  4049bc:	4658      	mov	r0, fp
  4049be:	f002 fea9 	bl	407714 <__ssprint_r>
  4049c2:	2800      	cmp	r0, #0
  4049c4:	f47f aa83 	bne.w	403ece <_svfprintf_r+0x1f2>
  4049c8:	f1a8 0810 	sub.w	r8, r8, #16
  4049cc:	f1b8 0f10 	cmp.w	r8, #16
  4049d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049d2:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4049d4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4049d8:	dce4      	bgt.n	4049a4 <_svfprintf_r+0xcc8>
  4049da:	4646      	mov	r6, r8
  4049dc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4049e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4049e2:	3501      	adds	r5, #1
  4049e4:	4434      	add	r4, r6
  4049e6:	2d07      	cmp	r5, #7
  4049e8:	9425      	str	r4, [sp, #148]	; 0x94
  4049ea:	9524      	str	r5, [sp, #144]	; 0x90
  4049ec:	e889 0048 	stmia.w	r9, {r3, r6}
  4049f0:	f77f af0b 	ble.w	40480a <_svfprintf_r+0xb2e>
  4049f4:	aa23      	add	r2, sp, #140	; 0x8c
  4049f6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4049f8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4049fa:	f002 fe8b 	bl	407714 <__ssprint_r>
  4049fe:	2800      	cmp	r0, #0
  404a00:	f47f aa65 	bne.w	403ece <_svfprintf_r+0x1f2>
  404a04:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404a06:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404a08:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404a0c:	e6ff      	b.n	40480e <_svfprintf_r+0xb32>
  404a0e:	9907      	ldr	r1, [sp, #28]
  404a10:	f011 0210 	ands.w	r2, r1, #16
  404a14:	f000 8108 	beq.w	404c28 <_svfprintf_r+0xf4c>
  404a18:	980e      	ldr	r0, [sp, #56]	; 0x38
  404a1a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404a1e:	f1bb 0f00 	cmp.w	fp, #0
  404a22:	6804      	ldr	r4, [r0, #0]
  404a24:	f100 0704 	add.w	r7, r0, #4
  404a28:	f04f 0500 	mov.w	r5, #0
  404a2c:	db26      	blt.n	404a7c <_svfprintf_r+0xda0>
  404a2e:	460a      	mov	r2, r1
  404a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404a34:	9207      	str	r2, [sp, #28]
  404a36:	ea54 0205 	orrs.w	r2, r4, r5
  404a3a:	970e      	str	r7, [sp, #56]	; 0x38
  404a3c:	461f      	mov	r7, r3
  404a3e:	f47f aaef 	bne.w	404020 <_svfprintf_r+0x344>
  404a42:	e4c8      	b.n	4043d6 <_svfprintf_r+0x6fa>
  404a44:	9b07      	ldr	r3, [sp, #28]
  404a46:	06d9      	lsls	r1, r3, #27
  404a48:	d42a      	bmi.n	404aa0 <_svfprintf_r+0xdc4>
  404a4a:	9b07      	ldr	r3, [sp, #28]
  404a4c:	065a      	lsls	r2, r3, #25
  404a4e:	d527      	bpl.n	404aa0 <_svfprintf_r+0xdc4>
  404a50:	990e      	ldr	r1, [sp, #56]	; 0x38
  404a52:	f9b1 4000 	ldrsh.w	r4, [r1]
  404a56:	3104      	adds	r1, #4
  404a58:	17e5      	asrs	r5, r4, #31
  404a5a:	4622      	mov	r2, r4
  404a5c:	462b      	mov	r3, r5
  404a5e:	910e      	str	r1, [sp, #56]	; 0x38
  404a60:	f7ff bacb 	b.w	403ffa <_svfprintf_r+0x31e>
  404a64:	990e      	ldr	r1, [sp, #56]	; 0x38
  404a66:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404a6a:	f1bb 0f00 	cmp.w	fp, #0
  404a6e:	680c      	ldr	r4, [r1, #0]
  404a70:	f101 0704 	add.w	r7, r1, #4
  404a74:	f04f 0500 	mov.w	r5, #0
  404a78:	f280 8247 	bge.w	404f0a <_svfprintf_r+0x122e>
  404a7c:	970e      	str	r7, [sp, #56]	; 0x38
  404a7e:	461f      	mov	r7, r3
  404a80:	ea54 0305 	orrs.w	r3, r4, r5
  404a84:	f47f aacc 	bne.w	404020 <_svfprintf_r+0x344>
  404a88:	e4aa      	b.n	4043e0 <_svfprintf_r+0x704>
  404a8a:	3301      	adds	r3, #1
  404a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a8e:	9324      	str	r3, [sp, #144]	; 0x90
  404a90:	442c      	add	r4, r5
  404a92:	2b07      	cmp	r3, #7
  404a94:	9425      	str	r4, [sp, #148]	; 0x94
  404a96:	e889 0024 	stmia.w	r9, {r2, r5}
  404a9a:	f77f abad 	ble.w	4041f8 <_svfprintf_r+0x51c>
  404a9e:	e6c3      	b.n	404828 <_svfprintf_r+0xb4c>
  404aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404aa2:	6814      	ldr	r4, [r2, #0]
  404aa4:	4613      	mov	r3, r2
  404aa6:	3304      	adds	r3, #4
  404aa8:	17e5      	asrs	r5, r4, #31
  404aaa:	4622      	mov	r2, r4
  404aac:	930e      	str	r3, [sp, #56]	; 0x38
  404aae:	2a00      	cmp	r2, #0
  404ab0:	462b      	mov	r3, r5
  404ab2:	f173 0300 	sbcs.w	r3, r3, #0
  404ab6:	f6bf aaa5 	bge.w	404004 <_svfprintf_r+0x328>
  404aba:	4264      	negs	r4, r4
  404abc:	f04f 072d 	mov.w	r7, #45	; 0x2d
  404ac0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404ac4:	f1bb 0f00 	cmp.w	fp, #0
  404ac8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404acc:	f6ff aaa8 	blt.w	404020 <_svfprintf_r+0x344>
  404ad0:	9b07      	ldr	r3, [sp, #28]
  404ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404ad6:	9307      	str	r3, [sp, #28]
  404ad8:	f7ff baa2 	b.w	404020 <_svfprintf_r+0x344>
  404adc:	aa23      	add	r2, sp, #140	; 0x8c
  404ade:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ae0:	980a      	ldr	r0, [sp, #40]	; 0x28
  404ae2:	f002 fe17 	bl	407714 <__ssprint_r>
  404ae6:	2800      	cmp	r0, #0
  404ae8:	f47f a9f1 	bne.w	403ece <_svfprintf_r+0x1f2>
  404aec:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404aee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404af2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404af6:	4432      	add	r2, r6
  404af8:	4617      	mov	r7, r2
  404afa:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404afc:	4293      	cmp	r3, r2
  404afe:	db47      	blt.n	404b90 <_svfprintf_r+0xeb4>
  404b00:	9a07      	ldr	r2, [sp, #28]
  404b02:	07d5      	lsls	r5, r2, #31
  404b04:	d444      	bmi.n	404b90 <_svfprintf_r+0xeb4>
  404b06:	9912      	ldr	r1, [sp, #72]	; 0x48
  404b08:	440e      	add	r6, r1
  404b0a:	1bf5      	subs	r5, r6, r7
  404b0c:	1acb      	subs	r3, r1, r3
  404b0e:	429d      	cmp	r5, r3
  404b10:	bfa8      	it	ge
  404b12:	461d      	movge	r5, r3
  404b14:	2d00      	cmp	r5, #0
  404b16:	462e      	mov	r6, r5
  404b18:	dd0d      	ble.n	404b36 <_svfprintf_r+0xe5a>
  404b1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404b1c:	f8c9 7000 	str.w	r7, [r9]
  404b20:	3201      	adds	r2, #1
  404b22:	442c      	add	r4, r5
  404b24:	2a07      	cmp	r2, #7
  404b26:	9425      	str	r4, [sp, #148]	; 0x94
  404b28:	f8c9 5004 	str.w	r5, [r9, #4]
  404b2c:	9224      	str	r2, [sp, #144]	; 0x90
  404b2e:	f300 830b 	bgt.w	405148 <_svfprintf_r+0x146c>
  404b32:	f109 0908 	add.w	r9, r9, #8
  404b36:	2e00      	cmp	r6, #0
  404b38:	bfac      	ite	ge
  404b3a:	1b9d      	subge	r5, r3, r6
  404b3c:	461d      	movlt	r5, r3
  404b3e:	2d00      	cmp	r5, #0
  404b40:	f77f ab5c 	ble.w	4041fc <_svfprintf_r+0x520>
  404b44:	4a2a      	ldr	r2, [pc, #168]	; (404bf0 <_svfprintf_r+0xf14>)
  404b46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b48:	920f      	str	r2, [sp, #60]	; 0x3c
  404b4a:	2d10      	cmp	r5, #16
  404b4c:	dd9d      	ble.n	404a8a <_svfprintf_r+0xdae>
  404b4e:	2610      	movs	r6, #16
  404b50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404b52:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404b56:	e004      	b.n	404b62 <_svfprintf_r+0xe86>
  404b58:	f109 0908 	add.w	r9, r9, #8
  404b5c:	3d10      	subs	r5, #16
  404b5e:	2d10      	cmp	r5, #16
  404b60:	dd93      	ble.n	404a8a <_svfprintf_r+0xdae>
  404b62:	3301      	adds	r3, #1
  404b64:	3410      	adds	r4, #16
  404b66:	2b07      	cmp	r3, #7
  404b68:	9425      	str	r4, [sp, #148]	; 0x94
  404b6a:	9324      	str	r3, [sp, #144]	; 0x90
  404b6c:	f8c9 a000 	str.w	sl, [r9]
  404b70:	f8c9 6004 	str.w	r6, [r9, #4]
  404b74:	ddf0      	ble.n	404b58 <_svfprintf_r+0xe7c>
  404b76:	aa23      	add	r2, sp, #140	; 0x8c
  404b78:	4659      	mov	r1, fp
  404b7a:	4638      	mov	r0, r7
  404b7c:	f002 fdca 	bl	407714 <__ssprint_r>
  404b80:	2800      	cmp	r0, #0
  404b82:	f47f a9a4 	bne.w	403ece <_svfprintf_r+0x1f2>
  404b86:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b8a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b8e:	e7e5      	b.n	404b5c <_svfprintf_r+0xe80>
  404b90:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404b92:	9816      	ldr	r0, [sp, #88]	; 0x58
  404b94:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404b96:	f8c9 1000 	str.w	r1, [r9]
  404b9a:	3201      	adds	r2, #1
  404b9c:	4404      	add	r4, r0
  404b9e:	2a07      	cmp	r2, #7
  404ba0:	9425      	str	r4, [sp, #148]	; 0x94
  404ba2:	f8c9 0004 	str.w	r0, [r9, #4]
  404ba6:	9224      	str	r2, [sp, #144]	; 0x90
  404ba8:	f300 82a9 	bgt.w	4050fe <_svfprintf_r+0x1422>
  404bac:	f109 0908 	add.w	r9, r9, #8
  404bb0:	e7a9      	b.n	404b06 <_svfprintf_r+0xe2a>
  404bb2:	9b07      	ldr	r3, [sp, #28]
  404bb4:	07d8      	lsls	r0, r3, #31
  404bb6:	f53f adf4 	bmi.w	4047a2 <_svfprintf_r+0xac6>
  404bba:	3501      	adds	r5, #1
  404bbc:	3401      	adds	r4, #1
  404bbe:	2301      	movs	r3, #1
  404bc0:	2d07      	cmp	r5, #7
  404bc2:	9425      	str	r4, [sp, #148]	; 0x94
  404bc4:	9524      	str	r5, [sp, #144]	; 0x90
  404bc6:	f8c9 6000 	str.w	r6, [r9]
  404bca:	f8c9 3004 	str.w	r3, [r9, #4]
  404bce:	f77f ae1c 	ble.w	40480a <_svfprintf_r+0xb2e>
  404bd2:	e70f      	b.n	4049f4 <_svfprintf_r+0xd18>
  404bd4:	aa23      	add	r2, sp, #140	; 0x8c
  404bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
  404bd8:	980a      	ldr	r0, [sp, #40]	; 0x28
  404bda:	f002 fd9b 	bl	407714 <__ssprint_r>
  404bde:	2800      	cmp	r0, #0
  404be0:	f47f a975 	bne.w	403ece <_svfprintf_r+0x1f2>
  404be4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404be6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404be8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404bec:	e5e7      	b.n	4047be <_svfprintf_r+0xae2>
  404bee:	bf00      	nop
  404bf0:	00408b90 	.word	0x00408b90
  404bf4:	aa23      	add	r2, sp, #140	; 0x8c
  404bf6:	9909      	ldr	r1, [sp, #36]	; 0x24
  404bf8:	980a      	ldr	r0, [sp, #40]	; 0x28
  404bfa:	f002 fd8b 	bl	407714 <__ssprint_r>
  404bfe:	2800      	cmp	r0, #0
  404c00:	f47f a965 	bne.w	403ece <_svfprintf_r+0x1f2>
  404c04:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c06:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404c08:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404c0c:	e5e6      	b.n	4047dc <_svfprintf_r+0xb00>
  404c0e:	aa23      	add	r2, sp, #140	; 0x8c
  404c10:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c12:	980a      	ldr	r0, [sp, #40]	; 0x28
  404c14:	f002 fd7e 	bl	407714 <__ssprint_r>
  404c18:	2800      	cmp	r0, #0
  404c1a:	f47f a958 	bne.w	403ece <_svfprintf_r+0x1f2>
  404c1e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c20:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404c24:	f7ff ba98 	b.w	404158 <_svfprintf_r+0x47c>
  404c28:	9907      	ldr	r1, [sp, #28]
  404c2a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  404c2e:	f43f af19 	beq.w	404a64 <_svfprintf_r+0xd88>
  404c32:	980e      	ldr	r0, [sp, #56]	; 0x38
  404c34:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404c38:	f1bb 0f00 	cmp.w	fp, #0
  404c3c:	8804      	ldrh	r4, [r0, #0]
  404c3e:	f100 0704 	add.w	r7, r0, #4
  404c42:	f04f 0500 	mov.w	r5, #0
  404c46:	f2c0 81b9 	blt.w	404fbc <_svfprintf_r+0x12e0>
  404c4a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  404c4e:	9307      	str	r3, [sp, #28]
  404c50:	ea54 0305 	orrs.w	r3, r4, r5
  404c54:	970e      	str	r7, [sp, #56]	; 0x38
  404c56:	4617      	mov	r7, r2
  404c58:	f47f a9e2 	bne.w	404020 <_svfprintf_r+0x344>
  404c5c:	f7ff bbbb 	b.w	4043d6 <_svfprintf_r+0x6fa>
  404c60:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404c62:	4622      	mov	r2, r4
  404c64:	4620      	mov	r0, r4
  404c66:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404c68:	4623      	mov	r3, r4
  404c6a:	4621      	mov	r1, r4
  404c6c:	f003 fda4 	bl	4087b8 <__aeabi_dcmpun>
  404c70:	2800      	cmp	r0, #0
  404c72:	f040 8317 	bne.w	4052a4 <_svfprintf_r+0x15c8>
  404c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c78:	f1bb 3fff 	cmp.w	fp, #4294967295
  404c7c:	f023 0320 	bic.w	r3, r3, #32
  404c80:	930d      	str	r3, [sp, #52]	; 0x34
  404c82:	f000 8270 	beq.w	405166 <_svfprintf_r+0x148a>
  404c86:	2b47      	cmp	r3, #71	; 0x47
  404c88:	f000 8192 	beq.w	404fb0 <_svfprintf_r+0x12d4>
  404c8c:	9b07      	ldr	r3, [sp, #28]
  404c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404c92:	9310      	str	r3, [sp, #64]	; 0x40
  404c94:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404c96:	1e1f      	subs	r7, r3, #0
  404c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404c9a:	9308      	str	r3, [sp, #32]
  404c9c:	bfbb      	ittet	lt
  404c9e:	463b      	movlt	r3, r7
  404ca0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404ca4:	2300      	movge	r3, #0
  404ca6:	232d      	movlt	r3, #45	; 0x2d
  404ca8:	930f      	str	r3, [sp, #60]	; 0x3c
  404caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404cac:	2b66      	cmp	r3, #102	; 0x66
  404cae:	f000 825d 	beq.w	40516c <_svfprintf_r+0x1490>
  404cb2:	2b46      	cmp	r3, #70	; 0x46
  404cb4:	f000 8151 	beq.w	404f5a <_svfprintf_r+0x127e>
  404cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404cba:	9a08      	ldr	r2, [sp, #32]
  404cbc:	2b45      	cmp	r3, #69	; 0x45
  404cbe:	a821      	add	r0, sp, #132	; 0x84
  404cc0:	a91e      	add	r1, sp, #120	; 0x78
  404cc2:	bf0c      	ite	eq
  404cc4:	f10b 0501 	addeq.w	r5, fp, #1
  404cc8:	465d      	movne	r5, fp
  404cca:	9004      	str	r0, [sp, #16]
  404ccc:	9103      	str	r1, [sp, #12]
  404cce:	a81d      	add	r0, sp, #116	; 0x74
  404cd0:	2102      	movs	r1, #2
  404cd2:	463b      	mov	r3, r7
  404cd4:	9002      	str	r0, [sp, #8]
  404cd6:	9501      	str	r5, [sp, #4]
  404cd8:	9100      	str	r1, [sp, #0]
  404cda:	980a      	ldr	r0, [sp, #40]	; 0x28
  404cdc:	f000 fbf0 	bl	4054c0 <_dtoa_r>
  404ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ce2:	2b67      	cmp	r3, #103	; 0x67
  404ce4:	4606      	mov	r6, r0
  404ce6:	f040 8290 	bne.w	40520a <_svfprintf_r+0x152e>
  404cea:	9b07      	ldr	r3, [sp, #28]
  404cec:	07da      	lsls	r2, r3, #31
  404cee:	f140 82af 	bpl.w	405250 <_svfprintf_r+0x1574>
  404cf2:	1974      	adds	r4, r6, r5
  404cf4:	9808      	ldr	r0, [sp, #32]
  404cf6:	4639      	mov	r1, r7
  404cf8:	2200      	movs	r2, #0
  404cfa:	2300      	movs	r3, #0
  404cfc:	f003 fd2a 	bl	408754 <__aeabi_dcmpeq>
  404d00:	2800      	cmp	r0, #0
  404d02:	f040 8190 	bne.w	405026 <_svfprintf_r+0x134a>
  404d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404d08:	429c      	cmp	r4, r3
  404d0a:	d906      	bls.n	404d1a <_svfprintf_r+0x103e>
  404d0c:	2130      	movs	r1, #48	; 0x30
  404d0e:	1c5a      	adds	r2, r3, #1
  404d10:	9221      	str	r2, [sp, #132]	; 0x84
  404d12:	7019      	strb	r1, [r3, #0]
  404d14:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404d16:	429c      	cmp	r4, r3
  404d18:	d8f9      	bhi.n	404d0e <_svfprintf_r+0x1032>
  404d1a:	1b9b      	subs	r3, r3, r6
  404d1c:	9312      	str	r3, [sp, #72]	; 0x48
  404d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404d20:	2b47      	cmp	r3, #71	; 0x47
  404d22:	f000 8179 	beq.w	405018 <_svfprintf_r+0x133c>
  404d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d28:	2b65      	cmp	r3, #101	; 0x65
  404d2a:	f340 827d 	ble.w	405228 <_svfprintf_r+0x154c>
  404d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d30:	2b66      	cmp	r3, #102	; 0x66
  404d32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404d34:	9313      	str	r3, [sp, #76]	; 0x4c
  404d36:	f000 825b 	beq.w	4051f0 <_svfprintf_r+0x1514>
  404d3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404d3c:	9912      	ldr	r1, [sp, #72]	; 0x48
  404d3e:	428a      	cmp	r2, r1
  404d40:	f2c0 8230 	blt.w	4051a4 <_svfprintf_r+0x14c8>
  404d44:	9b07      	ldr	r3, [sp, #28]
  404d46:	07d9      	lsls	r1, r3, #31
  404d48:	f100 8284 	bmi.w	405254 <_svfprintf_r+0x1578>
  404d4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404d50:	920d      	str	r2, [sp, #52]	; 0x34
  404d52:	2267      	movs	r2, #103	; 0x67
  404d54:	9211      	str	r2, [sp, #68]	; 0x44
  404d56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d58:	2a00      	cmp	r2, #0
  404d5a:	f040 8153 	bne.w	405004 <_svfprintf_r+0x1328>
  404d5e:	9308      	str	r3, [sp, #32]
  404d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404d62:	9307      	str	r3, [sp, #28]
  404d64:	4693      	mov	fp, r2
  404d66:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404d6a:	f7ff b97d 	b.w	404068 <_svfprintf_r+0x38c>
  404d6e:	9907      	ldr	r1, [sp, #28]
  404d70:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  404d74:	d015      	beq.n	404da2 <_svfprintf_r+0x10c6>
  404d76:	980e      	ldr	r0, [sp, #56]	; 0x38
  404d78:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404d7c:	f1bb 0f00 	cmp.w	fp, #0
  404d80:	8804      	ldrh	r4, [r0, #0]
  404d82:	f100 0704 	add.w	r7, r0, #4
  404d86:	f04f 0500 	mov.w	r5, #0
  404d8a:	db16      	blt.n	404dba <_svfprintf_r+0x10de>
  404d8c:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  404d90:	9307      	str	r3, [sp, #28]
  404d92:	ea54 0305 	orrs.w	r3, r4, r5
  404d96:	970e      	str	r7, [sp, #56]	; 0x38
  404d98:	f43f ac3a 	beq.w	404610 <_svfprintf_r+0x934>
  404d9c:	4617      	mov	r7, r2
  404d9e:	f7ff b8c2 	b.w	403f26 <_svfprintf_r+0x24a>
  404da2:	990e      	ldr	r1, [sp, #56]	; 0x38
  404da4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404da8:	f1bb 0f00 	cmp.w	fp, #0
  404dac:	680c      	ldr	r4, [r1, #0]
  404dae:	f101 0704 	add.w	r7, r1, #4
  404db2:	f04f 0500 	mov.w	r5, #0
  404db6:	f280 80a5 	bge.w	404f04 <_svfprintf_r+0x1228>
  404dba:	970e      	str	r7, [sp, #56]	; 0x38
  404dbc:	2700      	movs	r7, #0
  404dbe:	f7ff b8b2 	b.w	403f26 <_svfprintf_r+0x24a>
  404dc2:	9b07      	ldr	r3, [sp, #28]
  404dc4:	06df      	lsls	r7, r3, #27
  404dc6:	d40b      	bmi.n	404de0 <_svfprintf_r+0x1104>
  404dc8:	9b07      	ldr	r3, [sp, #28]
  404dca:	065e      	lsls	r6, r3, #25
  404dcc:	d508      	bpl.n	404de0 <_svfprintf_r+0x1104>
  404dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404dd0:	6813      	ldr	r3, [r2, #0]
  404dd2:	3204      	adds	r2, #4
  404dd4:	920e      	str	r2, [sp, #56]	; 0x38
  404dd6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  404dda:	801a      	strh	r2, [r3, #0]
  404ddc:	f7fe bfa4 	b.w	403d28 <_svfprintf_r+0x4c>
  404de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404de2:	6813      	ldr	r3, [r2, #0]
  404de4:	3204      	adds	r2, #4
  404de6:	920e      	str	r2, [sp, #56]	; 0x38
  404de8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404dea:	601a      	str	r2, [r3, #0]
  404dec:	f7fe bf9c 	b.w	403d28 <_svfprintf_r+0x4c>
  404df0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404df2:	9b07      	ldr	r3, [sp, #28]
  404df4:	f013 0f40 	tst.w	r3, #64	; 0x40
  404df8:	4613      	mov	r3, r2
  404dfa:	f103 0304 	add.w	r3, r3, #4
  404dfe:	bf0c      	ite	eq
  404e00:	6814      	ldreq	r4, [r2, #0]
  404e02:	8814      	ldrhne	r4, [r2, #0]
  404e04:	930e      	str	r3, [sp, #56]	; 0x38
  404e06:	2500      	movs	r5, #0
  404e08:	f7ff bb02 	b.w	404410 <_svfprintf_r+0x734>
  404e0c:	2700      	movs	r7, #0
  404e0e:	45bb      	cmp	fp, r7
  404e10:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404e14:	f6ff ac0e 	blt.w	404634 <_svfprintf_r+0x958>
  404e18:	9b07      	ldr	r3, [sp, #28]
  404e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404e1e:	9307      	str	r3, [sp, #28]
  404e20:	f7ff bbd6 	b.w	4045d0 <_svfprintf_r+0x8f4>
  404e24:	4614      	mov	r4, r2
  404e26:	3301      	adds	r3, #1
  404e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e2a:	9324      	str	r3, [sp, #144]	; 0x90
  404e2c:	442c      	add	r4, r5
  404e2e:	2b07      	cmp	r3, #7
  404e30:	9425      	str	r4, [sp, #148]	; 0x94
  404e32:	e889 0024 	stmia.w	r9, {r2, r5}
  404e36:	f73f ae51 	bgt.w	404adc <_svfprintf_r+0xe00>
  404e3a:	f109 0908 	add.w	r9, r9, #8
  404e3e:	e658      	b.n	404af2 <_svfprintf_r+0xe16>
  404e40:	aa23      	add	r2, sp, #140	; 0x8c
  404e42:	9909      	ldr	r1, [sp, #36]	; 0x24
  404e44:	980a      	ldr	r0, [sp, #40]	; 0x28
  404e46:	f002 fc65 	bl	407714 <__ssprint_r>
  404e4a:	2800      	cmp	r0, #0
  404e4c:	f47f a83f 	bne.w	403ece <_svfprintf_r+0x1f2>
  404e50:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404e52:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404e56:	e40f      	b.n	404678 <_svfprintf_r+0x99c>
  404e58:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404e5a:	f7ff bbe4 	b.w	404626 <_svfprintf_r+0x94a>
  404e5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e60:	4ab5      	ldr	r2, [pc, #724]	; (405138 <_svfprintf_r+0x145c>)
  404e62:	f8c9 2000 	str.w	r2, [r9]
  404e66:	3301      	adds	r3, #1
  404e68:	3401      	adds	r4, #1
  404e6a:	2201      	movs	r2, #1
  404e6c:	2b07      	cmp	r3, #7
  404e6e:	9425      	str	r4, [sp, #148]	; 0x94
  404e70:	9324      	str	r3, [sp, #144]	; 0x90
  404e72:	f8c9 2004 	str.w	r2, [r9, #4]
  404e76:	f300 808e 	bgt.w	404f96 <_svfprintf_r+0x12ba>
  404e7a:	f109 0908 	add.w	r9, r9, #8
  404e7e:	b92d      	cbnz	r5, 404e8c <_svfprintf_r+0x11b0>
  404e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e82:	b91b      	cbnz	r3, 404e8c <_svfprintf_r+0x11b0>
  404e84:	9b07      	ldr	r3, [sp, #28]
  404e86:	07df      	lsls	r7, r3, #31
  404e88:	f57f a9b8 	bpl.w	4041fc <_svfprintf_r+0x520>
  404e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e8e:	9916      	ldr	r1, [sp, #88]	; 0x58
  404e90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  404e92:	f8c9 2000 	str.w	r2, [r9]
  404e96:	3301      	adds	r3, #1
  404e98:	440c      	add	r4, r1
  404e9a:	2b07      	cmp	r3, #7
  404e9c:	9425      	str	r4, [sp, #148]	; 0x94
  404e9e:	f8c9 1004 	str.w	r1, [r9, #4]
  404ea2:	9324      	str	r3, [sp, #144]	; 0x90
  404ea4:	f300 81c2 	bgt.w	40522c <_svfprintf_r+0x1550>
  404ea8:	f109 0908 	add.w	r9, r9, #8
  404eac:	426d      	negs	r5, r5
  404eae:	2d00      	cmp	r5, #0
  404eb0:	f340 809b 	ble.w	404fea <_svfprintf_r+0x130e>
  404eb4:	4aa1      	ldr	r2, [pc, #644]	; (40513c <_svfprintf_r+0x1460>)
  404eb6:	920f      	str	r2, [sp, #60]	; 0x3c
  404eb8:	2d10      	cmp	r5, #16
  404eba:	f340 80c3 	ble.w	405044 <_svfprintf_r+0x1368>
  404ebe:	4622      	mov	r2, r4
  404ec0:	2710      	movs	r7, #16
  404ec2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404ec6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404ec8:	e005      	b.n	404ed6 <_svfprintf_r+0x11fa>
  404eca:	f109 0908 	add.w	r9, r9, #8
  404ece:	3d10      	subs	r5, #16
  404ed0:	2d10      	cmp	r5, #16
  404ed2:	f340 80b6 	ble.w	405042 <_svfprintf_r+0x1366>
  404ed6:	3301      	adds	r3, #1
  404ed8:	3210      	adds	r2, #16
  404eda:	2b07      	cmp	r3, #7
  404edc:	9225      	str	r2, [sp, #148]	; 0x94
  404ede:	9324      	str	r3, [sp, #144]	; 0x90
  404ee0:	f8c9 a000 	str.w	sl, [r9]
  404ee4:	f8c9 7004 	str.w	r7, [r9, #4]
  404ee8:	ddef      	ble.n	404eca <_svfprintf_r+0x11ee>
  404eea:	aa23      	add	r2, sp, #140	; 0x8c
  404eec:	4621      	mov	r1, r4
  404eee:	4658      	mov	r0, fp
  404ef0:	f002 fc10 	bl	407714 <__ssprint_r>
  404ef4:	2800      	cmp	r0, #0
  404ef6:	f47e afea 	bne.w	403ece <_svfprintf_r+0x1f2>
  404efa:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404efc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404efe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f02:	e7e4      	b.n	404ece <_svfprintf_r+0x11f2>
  404f04:	9a07      	ldr	r2, [sp, #28]
  404f06:	f7ff ba38 	b.w	40437a <_svfprintf_r+0x69e>
  404f0a:	9a07      	ldr	r2, [sp, #28]
  404f0c:	e590      	b.n	404a30 <_svfprintf_r+0xd54>
  404f0e:	9b07      	ldr	r3, [sp, #28]
  404f10:	f043 0320 	orr.w	r3, r3, #32
  404f14:	9307      	str	r3, [sp, #28]
  404f16:	f108 0801 	add.w	r8, r8, #1
  404f1a:	f898 3000 	ldrb.w	r3, [r8]
  404f1e:	f7fe bf36 	b.w	403d8e <_svfprintf_r+0xb2>
  404f22:	aa23      	add	r2, sp, #140	; 0x8c
  404f24:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f26:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f28:	f002 fbf4 	bl	407714 <__ssprint_r>
  404f2c:	2800      	cmp	r0, #0
  404f2e:	f47e afce 	bne.w	403ece <_svfprintf_r+0x1f2>
  404f32:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f34:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f38:	f7ff bbb6 	b.w	4046a8 <_svfprintf_r+0x9cc>
  404f3c:	2140      	movs	r1, #64	; 0x40
  404f3e:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f40:	f001 fcdc 	bl	4068fc <_malloc_r>
  404f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404f46:	6010      	str	r0, [r2, #0]
  404f48:	6110      	str	r0, [r2, #16]
  404f4a:	2800      	cmp	r0, #0
  404f4c:	f000 81e5 	beq.w	40531a <_svfprintf_r+0x163e>
  404f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404f52:	2340      	movs	r3, #64	; 0x40
  404f54:	6153      	str	r3, [r2, #20]
  404f56:	f7fe bed8 	b.w	403d0a <_svfprintf_r+0x2e>
  404f5a:	a821      	add	r0, sp, #132	; 0x84
  404f5c:	a91e      	add	r1, sp, #120	; 0x78
  404f5e:	9004      	str	r0, [sp, #16]
  404f60:	9103      	str	r1, [sp, #12]
  404f62:	a81d      	add	r0, sp, #116	; 0x74
  404f64:	2103      	movs	r1, #3
  404f66:	9002      	str	r0, [sp, #8]
  404f68:	9a08      	ldr	r2, [sp, #32]
  404f6a:	f8cd b004 	str.w	fp, [sp, #4]
  404f6e:	463b      	mov	r3, r7
  404f70:	9100      	str	r1, [sp, #0]
  404f72:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f74:	f000 faa4 	bl	4054c0 <_dtoa_r>
  404f78:	465d      	mov	r5, fp
  404f7a:	4606      	mov	r6, r0
  404f7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f7e:	2b46      	cmp	r3, #70	; 0x46
  404f80:	eb06 0405 	add.w	r4, r6, r5
  404f84:	f47f aeb6 	bne.w	404cf4 <_svfprintf_r+0x1018>
  404f88:	7833      	ldrb	r3, [r6, #0]
  404f8a:	2b30      	cmp	r3, #48	; 0x30
  404f8c:	f000 817c 	beq.w	405288 <_svfprintf_r+0x15ac>
  404f90:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404f92:	442c      	add	r4, r5
  404f94:	e6ae      	b.n	404cf4 <_svfprintf_r+0x1018>
  404f96:	aa23      	add	r2, sp, #140	; 0x8c
  404f98:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f9a:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f9c:	f002 fbba 	bl	407714 <__ssprint_r>
  404fa0:	2800      	cmp	r0, #0
  404fa2:	f47e af94 	bne.w	403ece <_svfprintf_r+0x1f2>
  404fa6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404fa8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404faa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404fae:	e766      	b.n	404e7e <_svfprintf_r+0x11a2>
  404fb0:	f1bb 0f00 	cmp.w	fp, #0
  404fb4:	bf08      	it	eq
  404fb6:	f04f 0b01 	moveq.w	fp, #1
  404fba:	e667      	b.n	404c8c <_svfprintf_r+0xfb0>
  404fbc:	970e      	str	r7, [sp, #56]	; 0x38
  404fbe:	4617      	mov	r7, r2
  404fc0:	e55e      	b.n	404a80 <_svfprintf_r+0xda4>
  404fc2:	4630      	mov	r0, r6
  404fc4:	f7fe fe1c 	bl	403c00 <strlen>
  404fc8:	46a3      	mov	fp, r4
  404fca:	4603      	mov	r3, r0
  404fcc:	900d      	str	r0, [sp, #52]	; 0x34
  404fce:	f7ff baf4 	b.w	4045ba <_svfprintf_r+0x8de>
  404fd2:	aa23      	add	r2, sp, #140	; 0x8c
  404fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
  404fd6:	980a      	ldr	r0, [sp, #40]	; 0x28
  404fd8:	f002 fb9c 	bl	407714 <__ssprint_r>
  404fdc:	2800      	cmp	r0, #0
  404fde:	f47e af76 	bne.w	403ece <_svfprintf_r+0x1f2>
  404fe2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404fe4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fe6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404fea:	9912      	ldr	r1, [sp, #72]	; 0x48
  404fec:	f8c9 6000 	str.w	r6, [r9]
  404ff0:	3301      	adds	r3, #1
  404ff2:	440c      	add	r4, r1
  404ff4:	2b07      	cmp	r3, #7
  404ff6:	9425      	str	r4, [sp, #148]	; 0x94
  404ff8:	9324      	str	r3, [sp, #144]	; 0x90
  404ffa:	f8c9 1004 	str.w	r1, [r9, #4]
  404ffe:	f77f a8fb 	ble.w	4041f8 <_svfprintf_r+0x51c>
  405002:	e411      	b.n	404828 <_svfprintf_r+0xb4c>
  405004:	272d      	movs	r7, #45	; 0x2d
  405006:	9308      	str	r3, [sp, #32]
  405008:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40500a:	9307      	str	r3, [sp, #28]
  40500c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405010:	f04f 0b00 	mov.w	fp, #0
  405014:	f7ff b829 	b.w	40406a <_svfprintf_r+0x38e>
  405018:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40501a:	1cdd      	adds	r5, r3, #3
  40501c:	db1e      	blt.n	40505c <_svfprintf_r+0x1380>
  40501e:	459b      	cmp	fp, r3
  405020:	db1c      	blt.n	40505c <_svfprintf_r+0x1380>
  405022:	9313      	str	r3, [sp, #76]	; 0x4c
  405024:	e689      	b.n	404d3a <_svfprintf_r+0x105e>
  405026:	4623      	mov	r3, r4
  405028:	e677      	b.n	404d1a <_svfprintf_r+0x103e>
  40502a:	aa23      	add	r2, sp, #140	; 0x8c
  40502c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40502e:	980a      	ldr	r0, [sp, #40]	; 0x28
  405030:	f002 fb70 	bl	407714 <__ssprint_r>
  405034:	2800      	cmp	r0, #0
  405036:	f47e af4a 	bne.w	403ece <_svfprintf_r+0x1f2>
  40503a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40503c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405040:	e459      	b.n	4048f6 <_svfprintf_r+0xc1a>
  405042:	4614      	mov	r4, r2
  405044:	3301      	adds	r3, #1
  405046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405048:	9324      	str	r3, [sp, #144]	; 0x90
  40504a:	442c      	add	r4, r5
  40504c:	2b07      	cmp	r3, #7
  40504e:	9425      	str	r4, [sp, #148]	; 0x94
  405050:	e889 0024 	stmia.w	r9, {r2, r5}
  405054:	dcbd      	bgt.n	404fd2 <_svfprintf_r+0x12f6>
  405056:	f109 0908 	add.w	r9, r9, #8
  40505a:	e7c6      	b.n	404fea <_svfprintf_r+0x130e>
  40505c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40505e:	3a02      	subs	r2, #2
  405060:	9211      	str	r2, [sp, #68]	; 0x44
  405062:	3b01      	subs	r3, #1
  405064:	2b00      	cmp	r3, #0
  405066:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40506a:	931d      	str	r3, [sp, #116]	; 0x74
  40506c:	bfb8      	it	lt
  40506e:	425b      	neglt	r3, r3
  405070:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  405074:	bfb4      	ite	lt
  405076:	222d      	movlt	r2, #45	; 0x2d
  405078:	222b      	movge	r2, #43	; 0x2b
  40507a:	2b09      	cmp	r3, #9
  40507c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405080:	f340 80f1 	ble.w	405266 <_svfprintf_r+0x158a>
  405084:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  405088:	4604      	mov	r4, r0
  40508a:	4a2d      	ldr	r2, [pc, #180]	; (405140 <_svfprintf_r+0x1464>)
  40508c:	fb82 2103 	smull	r2, r1, r2, r3
  405090:	17da      	asrs	r2, r3, #31
  405092:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  405096:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40509a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40509e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  4050a2:	2a09      	cmp	r2, #9
  4050a4:	4613      	mov	r3, r2
  4050a6:	f804 1d01 	strb.w	r1, [r4, #-1]!
  4050aa:	dcee      	bgt.n	40508a <_svfprintf_r+0x13ae>
  4050ac:	4621      	mov	r1, r4
  4050ae:	3330      	adds	r3, #48	; 0x30
  4050b0:	b2da      	uxtb	r2, r3
  4050b2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4050b6:	4288      	cmp	r0, r1
  4050b8:	f240 813a 	bls.w	405330 <_svfprintf_r+0x1654>
  4050bc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  4050c0:	4623      	mov	r3, r4
  4050c2:	e001      	b.n	4050c8 <_svfprintf_r+0x13ec>
  4050c4:	f813 2b01 	ldrb.w	r2, [r3], #1
  4050c8:	f801 2b01 	strb.w	r2, [r1], #1
  4050cc:	4298      	cmp	r0, r3
  4050ce:	d1f9      	bne.n	4050c4 <_svfprintf_r+0x13e8>
  4050d0:	1c43      	adds	r3, r0, #1
  4050d2:	1b1b      	subs	r3, r3, r4
  4050d4:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4050d8:	4413      	add	r3, r2
  4050da:	aa1f      	add	r2, sp, #124	; 0x7c
  4050dc:	1a9b      	subs	r3, r3, r2
  4050de:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4050e0:	9319      	str	r3, [sp, #100]	; 0x64
  4050e2:	2a01      	cmp	r2, #1
  4050e4:	4413      	add	r3, r2
  4050e6:	930d      	str	r3, [sp, #52]	; 0x34
  4050e8:	f340 80ea 	ble.w	4052c0 <_svfprintf_r+0x15e4>
  4050ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4050ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4050f0:	4413      	add	r3, r2
  4050f2:	2200      	movs	r2, #0
  4050f4:	930d      	str	r3, [sp, #52]	; 0x34
  4050f6:	9213      	str	r2, [sp, #76]	; 0x4c
  4050f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4050fc:	e62b      	b.n	404d56 <_svfprintf_r+0x107a>
  4050fe:	aa23      	add	r2, sp, #140	; 0x8c
  405100:	9909      	ldr	r1, [sp, #36]	; 0x24
  405102:	980a      	ldr	r0, [sp, #40]	; 0x28
  405104:	f002 fb06 	bl	407714 <__ssprint_r>
  405108:	2800      	cmp	r0, #0
  40510a:	f47e aee0 	bne.w	403ece <_svfprintf_r+0x1f2>
  40510e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405110:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405112:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405116:	e4f6      	b.n	404b06 <_svfprintf_r+0xe2a>
  405118:	2d06      	cmp	r5, #6
  40511a:	462b      	mov	r3, r5
  40511c:	bf28      	it	cs
  40511e:	2306      	movcs	r3, #6
  405120:	930d      	str	r3, [sp, #52]	; 0x34
  405122:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405126:	46b3      	mov	fp, r6
  405128:	970e      	str	r7, [sp, #56]	; 0x38
  40512a:	9613      	str	r6, [sp, #76]	; 0x4c
  40512c:	4637      	mov	r7, r6
  40512e:	9308      	str	r3, [sp, #32]
  405130:	4e04      	ldr	r6, [pc, #16]	; (405144 <_svfprintf_r+0x1468>)
  405132:	f7fe bf99 	b.w	404068 <_svfprintf_r+0x38c>
  405136:	bf00      	nop
  405138:	00408be0 	.word	0x00408be0
  40513c:	00408b90 	.word	0x00408b90
  405140:	66666667 	.word	0x66666667
  405144:	00408bd8 	.word	0x00408bd8
  405148:	aa23      	add	r2, sp, #140	; 0x8c
  40514a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40514c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40514e:	f002 fae1 	bl	407714 <__ssprint_r>
  405152:	2800      	cmp	r0, #0
  405154:	f47e aebb 	bne.w	403ece <_svfprintf_r+0x1f2>
  405158:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40515a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40515c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40515e:	1ad3      	subs	r3, r2, r3
  405160:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405164:	e4e7      	b.n	404b36 <_svfprintf_r+0xe5a>
  405166:	f04f 0b06 	mov.w	fp, #6
  40516a:	e58f      	b.n	404c8c <_svfprintf_r+0xfb0>
  40516c:	a821      	add	r0, sp, #132	; 0x84
  40516e:	a91e      	add	r1, sp, #120	; 0x78
  405170:	9004      	str	r0, [sp, #16]
  405172:	9103      	str	r1, [sp, #12]
  405174:	a81d      	add	r0, sp, #116	; 0x74
  405176:	2103      	movs	r1, #3
  405178:	9002      	str	r0, [sp, #8]
  40517a:	9a08      	ldr	r2, [sp, #32]
  40517c:	f8cd b004 	str.w	fp, [sp, #4]
  405180:	463b      	mov	r3, r7
  405182:	9100      	str	r1, [sp, #0]
  405184:	980a      	ldr	r0, [sp, #40]	; 0x28
  405186:	f000 f99b 	bl	4054c0 <_dtoa_r>
  40518a:	465d      	mov	r5, fp
  40518c:	4606      	mov	r6, r0
  40518e:	eb00 040b 	add.w	r4, r0, fp
  405192:	e6f9      	b.n	404f88 <_svfprintf_r+0x12ac>
  405194:	9307      	str	r3, [sp, #28]
  405196:	f7ff b959 	b.w	40444c <_svfprintf_r+0x770>
  40519a:	272d      	movs	r7, #45	; 0x2d
  40519c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4051a0:	f7ff b8b2 	b.w	404308 <_svfprintf_r+0x62c>
  4051a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4051a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4051a8:	4413      	add	r3, r2
  4051aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4051ac:	930d      	str	r3, [sp, #52]	; 0x34
  4051ae:	2a00      	cmp	r2, #0
  4051b0:	dd7e      	ble.n	4052b0 <_svfprintf_r+0x15d4>
  4051b2:	2267      	movs	r2, #103	; 0x67
  4051b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4051b8:	9211      	str	r2, [sp, #68]	; 0x44
  4051ba:	e5cc      	b.n	404d56 <_svfprintf_r+0x107a>
  4051bc:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  4051c0:	970e      	str	r7, [sp, #56]	; 0x38
  4051c2:	9308      	str	r3, [sp, #32]
  4051c4:	950d      	str	r5, [sp, #52]	; 0x34
  4051c6:	4683      	mov	fp, r0
  4051c8:	9013      	str	r0, [sp, #76]	; 0x4c
  4051ca:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4051ce:	f7fe bf4b 	b.w	404068 <_svfprintf_r+0x38c>
  4051d2:	9b07      	ldr	r3, [sp, #28]
  4051d4:	07db      	lsls	r3, r3, #31
  4051d6:	465f      	mov	r7, fp
  4051d8:	d505      	bpl.n	4051e6 <_svfprintf_r+0x150a>
  4051da:	ae40      	add	r6, sp, #256	; 0x100
  4051dc:	2330      	movs	r3, #48	; 0x30
  4051de:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4051e2:	f7fe bf37 	b.w	404054 <_svfprintf_r+0x378>
  4051e6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4051ea:	ae30      	add	r6, sp, #192	; 0xc0
  4051ec:	f7fe bf35 	b.w	40405a <_svfprintf_r+0x37e>
  4051f0:	2b00      	cmp	r3, #0
  4051f2:	dd7d      	ble.n	4052f0 <_svfprintf_r+0x1614>
  4051f4:	f1bb 0f00 	cmp.w	fp, #0
  4051f8:	d13d      	bne.n	405276 <_svfprintf_r+0x159a>
  4051fa:	9a07      	ldr	r2, [sp, #28]
  4051fc:	07d4      	lsls	r4, r2, #31
  4051fe:	d43a      	bmi.n	405276 <_svfprintf_r+0x159a>
  405200:	461a      	mov	r2, r3
  405202:	920d      	str	r2, [sp, #52]	; 0x34
  405204:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405208:	e5a5      	b.n	404d56 <_svfprintf_r+0x107a>
  40520a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40520c:	2b47      	cmp	r3, #71	; 0x47
  40520e:	f47f ad70 	bne.w	404cf2 <_svfprintf_r+0x1016>
  405212:	9b07      	ldr	r3, [sp, #28]
  405214:	07db      	lsls	r3, r3, #31
  405216:	f53f aeb1 	bmi.w	404f7c <_svfprintf_r+0x12a0>
  40521a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40521c:	1b9b      	subs	r3, r3, r6
  40521e:	9312      	str	r3, [sp, #72]	; 0x48
  405220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405222:	2b47      	cmp	r3, #71	; 0x47
  405224:	f43f aef8 	beq.w	405018 <_svfprintf_r+0x133c>
  405228:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40522a:	e71a      	b.n	405062 <_svfprintf_r+0x1386>
  40522c:	aa23      	add	r2, sp, #140	; 0x8c
  40522e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405230:	980a      	ldr	r0, [sp, #40]	; 0x28
  405232:	f002 fa6f 	bl	407714 <__ssprint_r>
  405236:	2800      	cmp	r0, #0
  405238:	f47e ae49 	bne.w	403ece <_svfprintf_r+0x1f2>
  40523c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40523e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405240:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405242:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405246:	e631      	b.n	404eac <_svfprintf_r+0x11d0>
  405248:	46a0      	mov	r8, r4
  40524a:	2500      	movs	r5, #0
  40524c:	f7fe bda1 	b.w	403d92 <_svfprintf_r+0xb6>
  405250:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405252:	e562      	b.n	404d1a <_svfprintf_r+0x103e>
  405254:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405256:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405258:	4413      	add	r3, r2
  40525a:	2267      	movs	r2, #103	; 0x67
  40525c:	930d      	str	r3, [sp, #52]	; 0x34
  40525e:	9211      	str	r2, [sp, #68]	; 0x44
  405260:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405264:	e577      	b.n	404d56 <_svfprintf_r+0x107a>
  405266:	3330      	adds	r3, #48	; 0x30
  405268:	2230      	movs	r2, #48	; 0x30
  40526a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40526e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405272:	ab20      	add	r3, sp, #128	; 0x80
  405274:	e731      	b.n	4050da <_svfprintf_r+0x13fe>
  405276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405278:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40527a:	189d      	adds	r5, r3, r2
  40527c:	eb05 030b 	add.w	r3, r5, fp
  405280:	930d      	str	r3, [sp, #52]	; 0x34
  405282:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405286:	e566      	b.n	404d56 <_svfprintf_r+0x107a>
  405288:	9808      	ldr	r0, [sp, #32]
  40528a:	4639      	mov	r1, r7
  40528c:	2200      	movs	r2, #0
  40528e:	2300      	movs	r3, #0
  405290:	f003 fa60 	bl	408754 <__aeabi_dcmpeq>
  405294:	2800      	cmp	r0, #0
  405296:	f47f ae7b 	bne.w	404f90 <_svfprintf_r+0x12b4>
  40529a:	f1c5 0501 	rsb	r5, r5, #1
  40529e:	951d      	str	r5, [sp, #116]	; 0x74
  4052a0:	442c      	add	r4, r5
  4052a2:	e527      	b.n	404cf4 <_svfprintf_r+0x1018>
  4052a4:	4e32      	ldr	r6, [pc, #200]	; (405370 <_svfprintf_r+0x1694>)
  4052a6:	4b33      	ldr	r3, [pc, #204]	; (405374 <_svfprintf_r+0x1698>)
  4052a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4052ac:	f7ff b82e 	b.w	40430c <_svfprintf_r+0x630>
  4052b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4052b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4052b4:	f1c3 0301 	rsb	r3, r3, #1
  4052b8:	441a      	add	r2, r3
  4052ba:	4613      	mov	r3, r2
  4052bc:	920d      	str	r2, [sp, #52]	; 0x34
  4052be:	e778      	b.n	4051b2 <_svfprintf_r+0x14d6>
  4052c0:	9b07      	ldr	r3, [sp, #28]
  4052c2:	f013 0301 	ands.w	r3, r3, #1
  4052c6:	f47f af11 	bne.w	4050ec <_svfprintf_r+0x1410>
  4052ca:	9313      	str	r3, [sp, #76]	; 0x4c
  4052cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4052ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4052d2:	e540      	b.n	404d56 <_svfprintf_r+0x107a>
  4052d4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4052d6:	f898 3001 	ldrb.w	r3, [r8, #1]
  4052da:	6805      	ldr	r5, [r0, #0]
  4052dc:	3004      	adds	r0, #4
  4052de:	2d00      	cmp	r5, #0
  4052e0:	900e      	str	r0, [sp, #56]	; 0x38
  4052e2:	46a0      	mov	r8, r4
  4052e4:	f6be ad53 	bge.w	403d8e <_svfprintf_r+0xb2>
  4052e8:	f04f 35ff 	mov.w	r5, #4294967295
  4052ec:	f7fe bd4f 	b.w	403d8e <_svfprintf_r+0xb2>
  4052f0:	f1bb 0f00 	cmp.w	fp, #0
  4052f4:	d102      	bne.n	4052fc <_svfprintf_r+0x1620>
  4052f6:	9b07      	ldr	r3, [sp, #28]
  4052f8:	07d8      	lsls	r0, r3, #31
  4052fa:	d507      	bpl.n	40530c <_svfprintf_r+0x1630>
  4052fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4052fe:	1c5d      	adds	r5, r3, #1
  405300:	eb05 030b 	add.w	r3, r5, fp
  405304:	930d      	str	r3, [sp, #52]	; 0x34
  405306:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40530a:	e524      	b.n	404d56 <_svfprintf_r+0x107a>
  40530c:	2301      	movs	r3, #1
  40530e:	930d      	str	r3, [sp, #52]	; 0x34
  405310:	e521      	b.n	404d56 <_svfprintf_r+0x107a>
  405312:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405316:	f7ff b921 	b.w	40455c <_svfprintf_r+0x880>
  40531a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40531c:	230c      	movs	r3, #12
  40531e:	6013      	str	r3, [r2, #0]
  405320:	f04f 30ff 	mov.w	r0, #4294967295
  405324:	f7fe bddc 	b.w	403ee0 <_svfprintf_r+0x204>
  405328:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40532c:	f7ff b8f9 	b.w	404522 <_svfprintf_r+0x846>
  405330:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405334:	e6d1      	b.n	4050da <_svfprintf_r+0x13fe>
  405336:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40533a:	f7fe bdd9 	b.w	403ef0 <_svfprintf_r+0x214>
  40533e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405342:	f7ff b857 	b.w	4043f4 <_svfprintf_r+0x718>
  405346:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40534a:	f7ff b825 	b.w	404398 <_svfprintf_r+0x6bc>
  40534e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405352:	f7ff b94c 	b.w	4045ee <_svfprintf_r+0x912>
  405356:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40535a:	f7fe bff3 	b.w	404344 <_svfprintf_r+0x668>
  40535e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405362:	f7fe bfa3 	b.w	4042ac <_svfprintf_r+0x5d0>
  405366:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40536a:	f7fe be33 	b.w	403fd4 <_svfprintf_r+0x2f8>
  40536e:	bf00      	nop
  405370:	00408bac 	.word	0x00408bac
  405374:	00408ba8 	.word	0x00408ba8

00405378 <register_fini>:
  405378:	4b02      	ldr	r3, [pc, #8]	; (405384 <register_fini+0xc>)
  40537a:	b113      	cbz	r3, 405382 <register_fini+0xa>
  40537c:	4802      	ldr	r0, [pc, #8]	; (405388 <register_fini+0x10>)
  40537e:	f000 b805 	b.w	40538c <atexit>
  405382:	4770      	bx	lr
  405384:	00000000 	.word	0x00000000
  405388:	0040659d 	.word	0x0040659d

0040538c <atexit>:
  40538c:	2300      	movs	r3, #0
  40538e:	4601      	mov	r1, r0
  405390:	461a      	mov	r2, r3
  405392:	4618      	mov	r0, r3
  405394:	f002 ba54 	b.w	407840 <__register_exitproc>

00405398 <quorem>:
  405398:	6902      	ldr	r2, [r0, #16]
  40539a:	690b      	ldr	r3, [r1, #16]
  40539c:	4293      	cmp	r3, r2
  40539e:	f300 808d 	bgt.w	4054bc <quorem+0x124>
  4053a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053a6:	f103 38ff 	add.w	r8, r3, #4294967295
  4053aa:	f101 0714 	add.w	r7, r1, #20
  4053ae:	f100 0b14 	add.w	fp, r0, #20
  4053b2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4053b6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4053ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4053be:	b083      	sub	sp, #12
  4053c0:	3201      	adds	r2, #1
  4053c2:	fbb3 f9f2 	udiv	r9, r3, r2
  4053c6:	eb0b 0304 	add.w	r3, fp, r4
  4053ca:	9400      	str	r4, [sp, #0]
  4053cc:	eb07 0a04 	add.w	sl, r7, r4
  4053d0:	9301      	str	r3, [sp, #4]
  4053d2:	f1b9 0f00 	cmp.w	r9, #0
  4053d6:	d039      	beq.n	40544c <quorem+0xb4>
  4053d8:	2500      	movs	r5, #0
  4053da:	46bc      	mov	ip, r7
  4053dc:	46de      	mov	lr, fp
  4053de:	462b      	mov	r3, r5
  4053e0:	f85c 6b04 	ldr.w	r6, [ip], #4
  4053e4:	f8de 2000 	ldr.w	r2, [lr]
  4053e8:	b2b4      	uxth	r4, r6
  4053ea:	fb09 5504 	mla	r5, r9, r4, r5
  4053ee:	0c36      	lsrs	r6, r6, #16
  4053f0:	0c2c      	lsrs	r4, r5, #16
  4053f2:	fb09 4406 	mla	r4, r9, r6, r4
  4053f6:	b2ad      	uxth	r5, r5
  4053f8:	1b5b      	subs	r3, r3, r5
  4053fa:	b2a6      	uxth	r6, r4
  4053fc:	fa13 f382 	uxtah	r3, r3, r2
  405400:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  405404:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405408:	b29b      	uxth	r3, r3
  40540a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40540e:	45e2      	cmp	sl, ip
  405410:	f84e 3b04 	str.w	r3, [lr], #4
  405414:	ea4f 4514 	mov.w	r5, r4, lsr #16
  405418:	ea4f 4326 	mov.w	r3, r6, asr #16
  40541c:	d2e0      	bcs.n	4053e0 <quorem+0x48>
  40541e:	9b00      	ldr	r3, [sp, #0]
  405420:	f85b 3003 	ldr.w	r3, [fp, r3]
  405424:	b993      	cbnz	r3, 40544c <quorem+0xb4>
  405426:	9c01      	ldr	r4, [sp, #4]
  405428:	1f23      	subs	r3, r4, #4
  40542a:	459b      	cmp	fp, r3
  40542c:	d20c      	bcs.n	405448 <quorem+0xb0>
  40542e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405432:	b94b      	cbnz	r3, 405448 <quorem+0xb0>
  405434:	f1a4 0308 	sub.w	r3, r4, #8
  405438:	e002      	b.n	405440 <quorem+0xa8>
  40543a:	681a      	ldr	r2, [r3, #0]
  40543c:	3b04      	subs	r3, #4
  40543e:	b91a      	cbnz	r2, 405448 <quorem+0xb0>
  405440:	459b      	cmp	fp, r3
  405442:	f108 38ff 	add.w	r8, r8, #4294967295
  405446:	d3f8      	bcc.n	40543a <quorem+0xa2>
  405448:	f8c0 8010 	str.w	r8, [r0, #16]
  40544c:	4604      	mov	r4, r0
  40544e:	f002 f805 	bl	40745c <__mcmp>
  405452:	2800      	cmp	r0, #0
  405454:	db2e      	blt.n	4054b4 <quorem+0x11c>
  405456:	f109 0901 	add.w	r9, r9, #1
  40545a:	465d      	mov	r5, fp
  40545c:	2300      	movs	r3, #0
  40545e:	f857 1b04 	ldr.w	r1, [r7], #4
  405462:	6828      	ldr	r0, [r5, #0]
  405464:	b28a      	uxth	r2, r1
  405466:	1a9a      	subs	r2, r3, r2
  405468:	0c09      	lsrs	r1, r1, #16
  40546a:	fa12 f280 	uxtah	r2, r2, r0
  40546e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  405472:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405476:	b291      	uxth	r1, r2
  405478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40547c:	45ba      	cmp	sl, r7
  40547e:	f845 1b04 	str.w	r1, [r5], #4
  405482:	ea4f 4323 	mov.w	r3, r3, asr #16
  405486:	d2ea      	bcs.n	40545e <quorem+0xc6>
  405488:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40548c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405490:	b982      	cbnz	r2, 4054b4 <quorem+0x11c>
  405492:	1f1a      	subs	r2, r3, #4
  405494:	4593      	cmp	fp, r2
  405496:	d20b      	bcs.n	4054b0 <quorem+0x118>
  405498:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40549c:	b942      	cbnz	r2, 4054b0 <quorem+0x118>
  40549e:	3b08      	subs	r3, #8
  4054a0:	e002      	b.n	4054a8 <quorem+0x110>
  4054a2:	681a      	ldr	r2, [r3, #0]
  4054a4:	3b04      	subs	r3, #4
  4054a6:	b91a      	cbnz	r2, 4054b0 <quorem+0x118>
  4054a8:	459b      	cmp	fp, r3
  4054aa:	f108 38ff 	add.w	r8, r8, #4294967295
  4054ae:	d3f8      	bcc.n	4054a2 <quorem+0x10a>
  4054b0:	f8c4 8010 	str.w	r8, [r4, #16]
  4054b4:	4648      	mov	r0, r9
  4054b6:	b003      	add	sp, #12
  4054b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054bc:	2000      	movs	r0, #0
  4054be:	4770      	bx	lr

004054c0 <_dtoa_r>:
  4054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4054c6:	b097      	sub	sp, #92	; 0x5c
  4054c8:	4681      	mov	r9, r0
  4054ca:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  4054cc:	4692      	mov	sl, r2
  4054ce:	469b      	mov	fp, r3
  4054d0:	b149      	cbz	r1, 4054e6 <_dtoa_r+0x26>
  4054d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4054d4:	604a      	str	r2, [r1, #4]
  4054d6:	2301      	movs	r3, #1
  4054d8:	4093      	lsls	r3, r2
  4054da:	608b      	str	r3, [r1, #8]
  4054dc:	f001 fddc 	bl	407098 <_Bfree>
  4054e0:	2300      	movs	r3, #0
  4054e2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  4054e6:	f1bb 0f00 	cmp.w	fp, #0
  4054ea:	46d8      	mov	r8, fp
  4054ec:	db33      	blt.n	405556 <_dtoa_r+0x96>
  4054ee:	2300      	movs	r3, #0
  4054f0:	6023      	str	r3, [r4, #0]
  4054f2:	4ba5      	ldr	r3, [pc, #660]	; (405788 <_dtoa_r+0x2c8>)
  4054f4:	461a      	mov	r2, r3
  4054f6:	ea08 0303 	and.w	r3, r8, r3
  4054fa:	4293      	cmp	r3, r2
  4054fc:	d014      	beq.n	405528 <_dtoa_r+0x68>
  4054fe:	4650      	mov	r0, sl
  405500:	4659      	mov	r1, fp
  405502:	2200      	movs	r2, #0
  405504:	2300      	movs	r3, #0
  405506:	f003 f925 	bl	408754 <__aeabi_dcmpeq>
  40550a:	4605      	mov	r5, r0
  40550c:	b348      	cbz	r0, 405562 <_dtoa_r+0xa2>
  40550e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405510:	2301      	movs	r3, #1
  405512:	6013      	str	r3, [r2, #0]
  405514:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405516:	2b00      	cmp	r3, #0
  405518:	f000 80c5 	beq.w	4056a6 <_dtoa_r+0x1e6>
  40551c:	489b      	ldr	r0, [pc, #620]	; (40578c <_dtoa_r+0x2cc>)
  40551e:	6018      	str	r0, [r3, #0]
  405520:	3801      	subs	r0, #1
  405522:	b017      	add	sp, #92	; 0x5c
  405524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405528:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40552a:	f242 730f 	movw	r3, #9999	; 0x270f
  40552e:	6013      	str	r3, [r2, #0]
  405530:	f1ba 0f00 	cmp.w	sl, #0
  405534:	f000 80a2 	beq.w	40567c <_dtoa_r+0x1bc>
  405538:	4895      	ldr	r0, [pc, #596]	; (405790 <_dtoa_r+0x2d0>)
  40553a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40553c:	2b00      	cmp	r3, #0
  40553e:	d0f0      	beq.n	405522 <_dtoa_r+0x62>
  405540:	78c3      	ldrb	r3, [r0, #3]
  405542:	2b00      	cmp	r3, #0
  405544:	f000 80b1 	beq.w	4056aa <_dtoa_r+0x1ea>
  405548:	f100 0308 	add.w	r3, r0, #8
  40554c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40554e:	6013      	str	r3, [r2, #0]
  405550:	b017      	add	sp, #92	; 0x5c
  405552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405556:	2301      	movs	r3, #1
  405558:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40555c:	6023      	str	r3, [r4, #0]
  40555e:	46c3      	mov	fp, r8
  405560:	e7c7      	b.n	4054f2 <_dtoa_r+0x32>
  405562:	aa14      	add	r2, sp, #80	; 0x50
  405564:	ab15      	add	r3, sp, #84	; 0x54
  405566:	9201      	str	r2, [sp, #4]
  405568:	9300      	str	r3, [sp, #0]
  40556a:	4652      	mov	r2, sl
  40556c:	465b      	mov	r3, fp
  40556e:	4648      	mov	r0, r9
  405570:	f002 f81e 	bl	4075b0 <__d2b>
  405574:	ea5f 5418 	movs.w	r4, r8, lsr #20
  405578:	9008      	str	r0, [sp, #32]
  40557a:	f040 8088 	bne.w	40568e <_dtoa_r+0x1ce>
  40557e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405580:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405582:	442c      	add	r4, r5
  405584:	f204 4332 	addw	r3, r4, #1074	; 0x432
  405588:	2b20      	cmp	r3, #32
  40558a:	f340 8291 	ble.w	405ab0 <_dtoa_r+0x5f0>
  40558e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405592:	f204 4012 	addw	r0, r4, #1042	; 0x412
  405596:	fa08 f803 	lsl.w	r8, r8, r3
  40559a:	fa2a f000 	lsr.w	r0, sl, r0
  40559e:	ea40 0008 	orr.w	r0, r0, r8
  4055a2:	f002 fdf9 	bl	408198 <__aeabi_ui2d>
  4055a6:	2301      	movs	r3, #1
  4055a8:	3c01      	subs	r4, #1
  4055aa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4055ae:	9310      	str	r3, [sp, #64]	; 0x40
  4055b0:	2200      	movs	r2, #0
  4055b2:	4b78      	ldr	r3, [pc, #480]	; (405794 <_dtoa_r+0x2d4>)
  4055b4:	f002 fcb2 	bl	407f1c <__aeabi_dsub>
  4055b8:	a36d      	add	r3, pc, #436	; (adr r3, 405770 <_dtoa_r+0x2b0>)
  4055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055be:	f002 fe61 	bl	408284 <__aeabi_dmul>
  4055c2:	a36d      	add	r3, pc, #436	; (adr r3, 405778 <_dtoa_r+0x2b8>)
  4055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055c8:	f002 fcaa 	bl	407f20 <__adddf3>
  4055cc:	4606      	mov	r6, r0
  4055ce:	4620      	mov	r0, r4
  4055d0:	460f      	mov	r7, r1
  4055d2:	f002 fdf1 	bl	4081b8 <__aeabi_i2d>
  4055d6:	a36a      	add	r3, pc, #424	; (adr r3, 405780 <_dtoa_r+0x2c0>)
  4055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055dc:	f002 fe52 	bl	408284 <__aeabi_dmul>
  4055e0:	4602      	mov	r2, r0
  4055e2:	460b      	mov	r3, r1
  4055e4:	4630      	mov	r0, r6
  4055e6:	4639      	mov	r1, r7
  4055e8:	f002 fc9a 	bl	407f20 <__adddf3>
  4055ec:	4606      	mov	r6, r0
  4055ee:	460f      	mov	r7, r1
  4055f0:	f003 f8f8 	bl	4087e4 <__aeabi_d2iz>
  4055f4:	2200      	movs	r2, #0
  4055f6:	9004      	str	r0, [sp, #16]
  4055f8:	2300      	movs	r3, #0
  4055fa:	4630      	mov	r0, r6
  4055fc:	4639      	mov	r1, r7
  4055fe:	f003 f8b3 	bl	408768 <__aeabi_dcmplt>
  405602:	2800      	cmp	r0, #0
  405604:	f040 8230 	bne.w	405a68 <_dtoa_r+0x5a8>
  405608:	9e04      	ldr	r6, [sp, #16]
  40560a:	2e16      	cmp	r6, #22
  40560c:	f200 8229 	bhi.w	405a62 <_dtoa_r+0x5a2>
  405610:	4b61      	ldr	r3, [pc, #388]	; (405798 <_dtoa_r+0x2d8>)
  405612:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  405616:	e9d3 0100 	ldrd	r0, r1, [r3]
  40561a:	4652      	mov	r2, sl
  40561c:	465b      	mov	r3, fp
  40561e:	f003 f8c1 	bl	4087a4 <__aeabi_dcmpgt>
  405622:	2800      	cmp	r0, #0
  405624:	f000 8249 	beq.w	405aba <_dtoa_r+0x5fa>
  405628:	1e73      	subs	r3, r6, #1
  40562a:	9304      	str	r3, [sp, #16]
  40562c:	2300      	movs	r3, #0
  40562e:	930c      	str	r3, [sp, #48]	; 0x30
  405630:	1b2c      	subs	r4, r5, r4
  405632:	1e63      	subs	r3, r4, #1
  405634:	9302      	str	r3, [sp, #8]
  405636:	f100 8232 	bmi.w	405a9e <_dtoa_r+0x5de>
  40563a:	2300      	movs	r3, #0
  40563c:	9305      	str	r3, [sp, #20]
  40563e:	9b04      	ldr	r3, [sp, #16]
  405640:	2b00      	cmp	r3, #0
  405642:	f2c0 8223 	blt.w	405a8c <_dtoa_r+0x5cc>
  405646:	9a02      	ldr	r2, [sp, #8]
  405648:	930b      	str	r3, [sp, #44]	; 0x2c
  40564a:	4611      	mov	r1, r2
  40564c:	4419      	add	r1, r3
  40564e:	2300      	movs	r3, #0
  405650:	9102      	str	r1, [sp, #8]
  405652:	930a      	str	r3, [sp, #40]	; 0x28
  405654:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405656:	2b09      	cmp	r3, #9
  405658:	d829      	bhi.n	4056ae <_dtoa_r+0x1ee>
  40565a:	2b05      	cmp	r3, #5
  40565c:	f340 8658 	ble.w	406310 <_dtoa_r+0xe50>
  405660:	3b04      	subs	r3, #4
  405662:	9320      	str	r3, [sp, #128]	; 0x80
  405664:	2500      	movs	r5, #0
  405666:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405668:	3b02      	subs	r3, #2
  40566a:	2b03      	cmp	r3, #3
  40566c:	f200 8635 	bhi.w	4062da <_dtoa_r+0xe1a>
  405670:	e8df f013 	tbh	[pc, r3, lsl #1]
  405674:	0228032c 	.word	0x0228032c
  405678:	04590337 	.word	0x04590337
  40567c:	4b44      	ldr	r3, [pc, #272]	; (405790 <_dtoa_r+0x2d0>)
  40567e:	4a47      	ldr	r2, [pc, #284]	; (40579c <_dtoa_r+0x2dc>)
  405680:	f3c8 0013 	ubfx	r0, r8, #0, #20
  405684:	2800      	cmp	r0, #0
  405686:	bf14      	ite	ne
  405688:	4618      	movne	r0, r3
  40568a:	4610      	moveq	r0, r2
  40568c:	e755      	b.n	40553a <_dtoa_r+0x7a>
  40568e:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405692:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  405696:	9510      	str	r5, [sp, #64]	; 0x40
  405698:	4650      	mov	r0, sl
  40569a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40569e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4056a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4056a4:	e784      	b.n	4055b0 <_dtoa_r+0xf0>
  4056a6:	483e      	ldr	r0, [pc, #248]	; (4057a0 <_dtoa_r+0x2e0>)
  4056a8:	e73b      	b.n	405522 <_dtoa_r+0x62>
  4056aa:	1cc3      	adds	r3, r0, #3
  4056ac:	e74e      	b.n	40554c <_dtoa_r+0x8c>
  4056ae:	2100      	movs	r1, #0
  4056b0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4056b4:	4648      	mov	r0, r9
  4056b6:	9120      	str	r1, [sp, #128]	; 0x80
  4056b8:	f001 fcc8 	bl	40704c <_Balloc>
  4056bc:	f04f 33ff 	mov.w	r3, #4294967295
  4056c0:	9306      	str	r3, [sp, #24]
  4056c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4056c4:	930d      	str	r3, [sp, #52]	; 0x34
  4056c6:	2301      	movs	r3, #1
  4056c8:	9007      	str	r0, [sp, #28]
  4056ca:	9221      	str	r2, [sp, #132]	; 0x84
  4056cc:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4056d0:	9309      	str	r3, [sp, #36]	; 0x24
  4056d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4056d4:	2b00      	cmp	r3, #0
  4056d6:	f2c0 80d1 	blt.w	40587c <_dtoa_r+0x3bc>
  4056da:	9a04      	ldr	r2, [sp, #16]
  4056dc:	2a0e      	cmp	r2, #14
  4056de:	f300 80cd 	bgt.w	40587c <_dtoa_r+0x3bc>
  4056e2:	4b2d      	ldr	r3, [pc, #180]	; (405798 <_dtoa_r+0x2d8>)
  4056e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4056e8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4056ec:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4056f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4056f2:	2b00      	cmp	r3, #0
  4056f4:	f2c0 8300 	blt.w	405cf8 <_dtoa_r+0x838>
  4056f8:	4656      	mov	r6, sl
  4056fa:	465f      	mov	r7, fp
  4056fc:	4650      	mov	r0, sl
  4056fe:	4659      	mov	r1, fp
  405700:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  405704:	4652      	mov	r2, sl
  405706:	465b      	mov	r3, fp
  405708:	f002 fee6 	bl	4084d8 <__aeabi_ddiv>
  40570c:	f003 f86a 	bl	4087e4 <__aeabi_d2iz>
  405710:	4604      	mov	r4, r0
  405712:	f002 fd51 	bl	4081b8 <__aeabi_i2d>
  405716:	4652      	mov	r2, sl
  405718:	465b      	mov	r3, fp
  40571a:	f002 fdb3 	bl	408284 <__aeabi_dmul>
  40571e:	460b      	mov	r3, r1
  405720:	4602      	mov	r2, r0
  405722:	4639      	mov	r1, r7
  405724:	4630      	mov	r0, r6
  405726:	f002 fbf9 	bl	407f1c <__aeabi_dsub>
  40572a:	9d07      	ldr	r5, [sp, #28]
  40572c:	f104 0330 	add.w	r3, r4, #48	; 0x30
  405730:	702b      	strb	r3, [r5, #0]
  405732:	9b06      	ldr	r3, [sp, #24]
  405734:	2b01      	cmp	r3, #1
  405736:	4606      	mov	r6, r0
  405738:	460f      	mov	r7, r1
  40573a:	f105 0501 	add.w	r5, r5, #1
  40573e:	d062      	beq.n	405806 <_dtoa_r+0x346>
  405740:	2200      	movs	r2, #0
  405742:	4b18      	ldr	r3, [pc, #96]	; (4057a4 <_dtoa_r+0x2e4>)
  405744:	f002 fd9e 	bl	408284 <__aeabi_dmul>
  405748:	2200      	movs	r2, #0
  40574a:	2300      	movs	r3, #0
  40574c:	4606      	mov	r6, r0
  40574e:	460f      	mov	r7, r1
  405750:	f003 f800 	bl	408754 <__aeabi_dcmpeq>
  405754:	2800      	cmp	r0, #0
  405756:	d17e      	bne.n	405856 <_dtoa_r+0x396>
  405758:	f8cd 9014 	str.w	r9, [sp, #20]
  40575c:	f8dd a018 	ldr.w	sl, [sp, #24]
  405760:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405764:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  405768:	e029      	b.n	4057be <_dtoa_r+0x2fe>
  40576a:	bf00      	nop
  40576c:	f3af 8000 	nop.w
  405770:	636f4361 	.word	0x636f4361
  405774:	3fd287a7 	.word	0x3fd287a7
  405778:	8b60c8b3 	.word	0x8b60c8b3
  40577c:	3fc68a28 	.word	0x3fc68a28
  405780:	509f79fb 	.word	0x509f79fb
  405784:	3fd34413 	.word	0x3fd34413
  405788:	7ff00000 	.word	0x7ff00000
  40578c:	00408be1 	.word	0x00408be1
  405790:	00408c00 	.word	0x00408c00
  405794:	3ff80000 	.word	0x3ff80000
  405798:	00408c10 	.word	0x00408c10
  40579c:	00408bf4 	.word	0x00408bf4
  4057a0:	00408be0 	.word	0x00408be0
  4057a4:	40240000 	.word	0x40240000
  4057a8:	f002 fd6c 	bl	408284 <__aeabi_dmul>
  4057ac:	2200      	movs	r2, #0
  4057ae:	2300      	movs	r3, #0
  4057b0:	4606      	mov	r6, r0
  4057b2:	460f      	mov	r7, r1
  4057b4:	f002 ffce 	bl	408754 <__aeabi_dcmpeq>
  4057b8:	2800      	cmp	r0, #0
  4057ba:	f040 83b7 	bne.w	405f2c <_dtoa_r+0xa6c>
  4057be:	4642      	mov	r2, r8
  4057c0:	464b      	mov	r3, r9
  4057c2:	4630      	mov	r0, r6
  4057c4:	4639      	mov	r1, r7
  4057c6:	f002 fe87 	bl	4084d8 <__aeabi_ddiv>
  4057ca:	f003 f80b 	bl	4087e4 <__aeabi_d2iz>
  4057ce:	4604      	mov	r4, r0
  4057d0:	f002 fcf2 	bl	4081b8 <__aeabi_i2d>
  4057d4:	4642      	mov	r2, r8
  4057d6:	464b      	mov	r3, r9
  4057d8:	f002 fd54 	bl	408284 <__aeabi_dmul>
  4057dc:	4602      	mov	r2, r0
  4057de:	460b      	mov	r3, r1
  4057e0:	4630      	mov	r0, r6
  4057e2:	4639      	mov	r1, r7
  4057e4:	f002 fb9a 	bl	407f1c <__aeabi_dsub>
  4057e8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4057ec:	f805 eb01 	strb.w	lr, [r5], #1
  4057f0:	ebcb 0e05 	rsb	lr, fp, r5
  4057f4:	45d6      	cmp	lr, sl
  4057f6:	4606      	mov	r6, r0
  4057f8:	460f      	mov	r7, r1
  4057fa:	f04f 0200 	mov.w	r2, #0
  4057fe:	4bb0      	ldr	r3, [pc, #704]	; (405ac0 <_dtoa_r+0x600>)
  405800:	d1d2      	bne.n	4057a8 <_dtoa_r+0x2e8>
  405802:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405806:	4632      	mov	r2, r6
  405808:	463b      	mov	r3, r7
  40580a:	4630      	mov	r0, r6
  40580c:	4639      	mov	r1, r7
  40580e:	f002 fb87 	bl	407f20 <__adddf3>
  405812:	4606      	mov	r6, r0
  405814:	460f      	mov	r7, r1
  405816:	4602      	mov	r2, r0
  405818:	460b      	mov	r3, r1
  40581a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40581e:	f002 ffa3 	bl	408768 <__aeabi_dcmplt>
  405822:	b940      	cbnz	r0, 405836 <_dtoa_r+0x376>
  405824:	4632      	mov	r2, r6
  405826:	463b      	mov	r3, r7
  405828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40582c:	f002 ff92 	bl	408754 <__aeabi_dcmpeq>
  405830:	b188      	cbz	r0, 405856 <_dtoa_r+0x396>
  405832:	07e3      	lsls	r3, r4, #31
  405834:	d50f      	bpl.n	405856 <_dtoa_r+0x396>
  405836:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40583a:	9a07      	ldr	r2, [sp, #28]
  40583c:	1e6b      	subs	r3, r5, #1
  40583e:	e004      	b.n	40584a <_dtoa_r+0x38a>
  405840:	429a      	cmp	r2, r3
  405842:	f000 842c 	beq.w	40609e <_dtoa_r+0xbde>
  405846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40584a:	2c39      	cmp	r4, #57	; 0x39
  40584c:	f103 0501 	add.w	r5, r3, #1
  405850:	d0f6      	beq.n	405840 <_dtoa_r+0x380>
  405852:	3401      	adds	r4, #1
  405854:	701c      	strb	r4, [r3, #0]
  405856:	9908      	ldr	r1, [sp, #32]
  405858:	4648      	mov	r0, r9
  40585a:	f001 fc1d 	bl	407098 <_Bfree>
  40585e:	2200      	movs	r2, #0
  405860:	9b04      	ldr	r3, [sp, #16]
  405862:	702a      	strb	r2, [r5, #0]
  405864:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405866:	3301      	adds	r3, #1
  405868:	6013      	str	r3, [r2, #0]
  40586a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40586c:	2b00      	cmp	r3, #0
  40586e:	f000 83a7 	beq.w	405fc0 <_dtoa_r+0xb00>
  405872:	9807      	ldr	r0, [sp, #28]
  405874:	601d      	str	r5, [r3, #0]
  405876:	b017      	add	sp, #92	; 0x5c
  405878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40587c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40587e:	2a00      	cmp	r2, #0
  405880:	f000 8112 	beq.w	405aa8 <_dtoa_r+0x5e8>
  405884:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405886:	2a01      	cmp	r2, #1
  405888:	f340 8258 	ble.w	405d3c <_dtoa_r+0x87c>
  40588c:	9b06      	ldr	r3, [sp, #24]
  40588e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405890:	1e5f      	subs	r7, r3, #1
  405892:	42ba      	cmp	r2, r7
  405894:	f2c0 8397 	blt.w	405fc6 <_dtoa_r+0xb06>
  405898:	1bd7      	subs	r7, r2, r7
  40589a:	9b06      	ldr	r3, [sp, #24]
  40589c:	2b00      	cmp	r3, #0
  40589e:	f2c0 848a 	blt.w	4061b6 <_dtoa_r+0xcf6>
  4058a2:	9d05      	ldr	r5, [sp, #20]
  4058a4:	9b06      	ldr	r3, [sp, #24]
  4058a6:	9a05      	ldr	r2, [sp, #20]
  4058a8:	441a      	add	r2, r3
  4058aa:	9205      	str	r2, [sp, #20]
  4058ac:	9a02      	ldr	r2, [sp, #8]
  4058ae:	2101      	movs	r1, #1
  4058b0:	441a      	add	r2, r3
  4058b2:	4648      	mov	r0, r9
  4058b4:	9202      	str	r2, [sp, #8]
  4058b6:	f001 fc87 	bl	4071c8 <__i2b>
  4058ba:	4606      	mov	r6, r0
  4058bc:	b165      	cbz	r5, 4058d8 <_dtoa_r+0x418>
  4058be:	9902      	ldr	r1, [sp, #8]
  4058c0:	2900      	cmp	r1, #0
  4058c2:	460b      	mov	r3, r1
  4058c4:	dd08      	ble.n	4058d8 <_dtoa_r+0x418>
  4058c6:	42a9      	cmp	r1, r5
  4058c8:	9a05      	ldr	r2, [sp, #20]
  4058ca:	bfa8      	it	ge
  4058cc:	462b      	movge	r3, r5
  4058ce:	1ad2      	subs	r2, r2, r3
  4058d0:	1aed      	subs	r5, r5, r3
  4058d2:	1acb      	subs	r3, r1, r3
  4058d4:	9205      	str	r2, [sp, #20]
  4058d6:	9302      	str	r3, [sp, #8]
  4058d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058da:	2b00      	cmp	r3, #0
  4058dc:	f340 82fc 	ble.w	405ed8 <_dtoa_r+0xa18>
  4058e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4058e2:	2a00      	cmp	r2, #0
  4058e4:	f000 8201 	beq.w	405cea <_dtoa_r+0x82a>
  4058e8:	2f00      	cmp	r7, #0
  4058ea:	f000 81fe 	beq.w	405cea <_dtoa_r+0x82a>
  4058ee:	4631      	mov	r1, r6
  4058f0:	463a      	mov	r2, r7
  4058f2:	4648      	mov	r0, r9
  4058f4:	f001 fd0a 	bl	40730c <__pow5mult>
  4058f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4058fc:	4601      	mov	r1, r0
  4058fe:	4642      	mov	r2, r8
  405900:	4606      	mov	r6, r0
  405902:	4648      	mov	r0, r9
  405904:	f001 fc6a 	bl	4071dc <__multiply>
  405908:	4641      	mov	r1, r8
  40590a:	4604      	mov	r4, r0
  40590c:	4648      	mov	r0, r9
  40590e:	f001 fbc3 	bl	407098 <_Bfree>
  405912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405914:	1bdb      	subs	r3, r3, r7
  405916:	930a      	str	r3, [sp, #40]	; 0x28
  405918:	f040 81e6 	bne.w	405ce8 <_dtoa_r+0x828>
  40591c:	2101      	movs	r1, #1
  40591e:	4648      	mov	r0, r9
  405920:	f001 fc52 	bl	4071c8 <__i2b>
  405924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405926:	4680      	mov	r8, r0
  405928:	2b00      	cmp	r3, #0
  40592a:	f000 8219 	beq.w	405d60 <_dtoa_r+0x8a0>
  40592e:	4601      	mov	r1, r0
  405930:	461a      	mov	r2, r3
  405932:	4648      	mov	r0, r9
  405934:	f001 fcea 	bl	40730c <__pow5mult>
  405938:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40593a:	2b01      	cmp	r3, #1
  40593c:	4680      	mov	r8, r0
  40593e:	f340 82f8 	ble.w	405f32 <_dtoa_r+0xa72>
  405942:	2700      	movs	r7, #0
  405944:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405948:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40594c:	6918      	ldr	r0, [r3, #16]
  40594e:	f001 fbed 	bl	40712c <__hi0bits>
  405952:	f1c0 0020 	rsb	r0, r0, #32
  405956:	9a02      	ldr	r2, [sp, #8]
  405958:	4410      	add	r0, r2
  40595a:	f010 001f 	ands.w	r0, r0, #31
  40595e:	f000 81f6 	beq.w	405d4e <_dtoa_r+0x88e>
  405962:	f1c0 0320 	rsb	r3, r0, #32
  405966:	2b04      	cmp	r3, #4
  405968:	f340 84ca 	ble.w	406300 <_dtoa_r+0xe40>
  40596c:	9b05      	ldr	r3, [sp, #20]
  40596e:	f1c0 001c 	rsb	r0, r0, #28
  405972:	4403      	add	r3, r0
  405974:	9305      	str	r3, [sp, #20]
  405976:	4613      	mov	r3, r2
  405978:	4403      	add	r3, r0
  40597a:	4405      	add	r5, r0
  40597c:	9302      	str	r3, [sp, #8]
  40597e:	9b05      	ldr	r3, [sp, #20]
  405980:	2b00      	cmp	r3, #0
  405982:	dd05      	ble.n	405990 <_dtoa_r+0x4d0>
  405984:	4621      	mov	r1, r4
  405986:	461a      	mov	r2, r3
  405988:	4648      	mov	r0, r9
  40598a:	f001 fd0f 	bl	4073ac <__lshift>
  40598e:	4604      	mov	r4, r0
  405990:	9b02      	ldr	r3, [sp, #8]
  405992:	2b00      	cmp	r3, #0
  405994:	dd05      	ble.n	4059a2 <_dtoa_r+0x4e2>
  405996:	4641      	mov	r1, r8
  405998:	461a      	mov	r2, r3
  40599a:	4648      	mov	r0, r9
  40599c:	f001 fd06 	bl	4073ac <__lshift>
  4059a0:	4680      	mov	r8, r0
  4059a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4059a4:	2b00      	cmp	r3, #0
  4059a6:	f040 827c 	bne.w	405ea2 <_dtoa_r+0x9e2>
  4059aa:	9b06      	ldr	r3, [sp, #24]
  4059ac:	2b00      	cmp	r3, #0
  4059ae:	f340 8295 	ble.w	405edc <_dtoa_r+0xa1c>
  4059b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4059b4:	2b00      	cmp	r3, #0
  4059b6:	f040 81f5 	bne.w	405da4 <_dtoa_r+0x8e4>
  4059ba:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4059be:	9f06      	ldr	r7, [sp, #24]
  4059c0:	465d      	mov	r5, fp
  4059c2:	e002      	b.n	4059ca <_dtoa_r+0x50a>
  4059c4:	f001 fb72 	bl	4070ac <__multadd>
  4059c8:	4604      	mov	r4, r0
  4059ca:	4641      	mov	r1, r8
  4059cc:	4620      	mov	r0, r4
  4059ce:	f7ff fce3 	bl	405398 <quorem>
  4059d2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4059d6:	f805 ab01 	strb.w	sl, [r5], #1
  4059da:	ebcb 0305 	rsb	r3, fp, r5
  4059de:	42bb      	cmp	r3, r7
  4059e0:	f04f 020a 	mov.w	r2, #10
  4059e4:	f04f 0300 	mov.w	r3, #0
  4059e8:	4621      	mov	r1, r4
  4059ea:	4648      	mov	r0, r9
  4059ec:	dbea      	blt.n	4059c4 <_dtoa_r+0x504>
  4059ee:	9b07      	ldr	r3, [sp, #28]
  4059f0:	9a06      	ldr	r2, [sp, #24]
  4059f2:	2a01      	cmp	r2, #1
  4059f4:	bfac      	ite	ge
  4059f6:	189b      	addge	r3, r3, r2
  4059f8:	3301      	addlt	r3, #1
  4059fa:	461d      	mov	r5, r3
  4059fc:	f04f 0b00 	mov.w	fp, #0
  405a00:	4621      	mov	r1, r4
  405a02:	2201      	movs	r2, #1
  405a04:	4648      	mov	r0, r9
  405a06:	f001 fcd1 	bl	4073ac <__lshift>
  405a0a:	4641      	mov	r1, r8
  405a0c:	9008      	str	r0, [sp, #32]
  405a0e:	f001 fd25 	bl	40745c <__mcmp>
  405a12:	2800      	cmp	r0, #0
  405a14:	f340 830d 	ble.w	406032 <_dtoa_r+0xb72>
  405a18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405a1c:	9907      	ldr	r1, [sp, #28]
  405a1e:	1e6b      	subs	r3, r5, #1
  405a20:	e004      	b.n	405a2c <_dtoa_r+0x56c>
  405a22:	428b      	cmp	r3, r1
  405a24:	f000 8278 	beq.w	405f18 <_dtoa_r+0xa58>
  405a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405a2c:	2a39      	cmp	r2, #57	; 0x39
  405a2e:	f103 0501 	add.w	r5, r3, #1
  405a32:	d0f6      	beq.n	405a22 <_dtoa_r+0x562>
  405a34:	3201      	adds	r2, #1
  405a36:	701a      	strb	r2, [r3, #0]
  405a38:	4641      	mov	r1, r8
  405a3a:	4648      	mov	r0, r9
  405a3c:	f001 fb2c 	bl	407098 <_Bfree>
  405a40:	2e00      	cmp	r6, #0
  405a42:	f43f af08 	beq.w	405856 <_dtoa_r+0x396>
  405a46:	f1bb 0f00 	cmp.w	fp, #0
  405a4a:	d005      	beq.n	405a58 <_dtoa_r+0x598>
  405a4c:	45b3      	cmp	fp, r6
  405a4e:	d003      	beq.n	405a58 <_dtoa_r+0x598>
  405a50:	4659      	mov	r1, fp
  405a52:	4648      	mov	r0, r9
  405a54:	f001 fb20 	bl	407098 <_Bfree>
  405a58:	4631      	mov	r1, r6
  405a5a:	4648      	mov	r0, r9
  405a5c:	f001 fb1c 	bl	407098 <_Bfree>
  405a60:	e6f9      	b.n	405856 <_dtoa_r+0x396>
  405a62:	2301      	movs	r3, #1
  405a64:	930c      	str	r3, [sp, #48]	; 0x30
  405a66:	e5e3      	b.n	405630 <_dtoa_r+0x170>
  405a68:	f8dd 8010 	ldr.w	r8, [sp, #16]
  405a6c:	4640      	mov	r0, r8
  405a6e:	f002 fba3 	bl	4081b8 <__aeabi_i2d>
  405a72:	4602      	mov	r2, r0
  405a74:	460b      	mov	r3, r1
  405a76:	4630      	mov	r0, r6
  405a78:	4639      	mov	r1, r7
  405a7a:	f002 fe6b 	bl	408754 <__aeabi_dcmpeq>
  405a7e:	2800      	cmp	r0, #0
  405a80:	f47f adc2 	bne.w	405608 <_dtoa_r+0x148>
  405a84:	f108 33ff 	add.w	r3, r8, #4294967295
  405a88:	9304      	str	r3, [sp, #16]
  405a8a:	e5bd      	b.n	405608 <_dtoa_r+0x148>
  405a8c:	9a05      	ldr	r2, [sp, #20]
  405a8e:	9b04      	ldr	r3, [sp, #16]
  405a90:	1ad2      	subs	r2, r2, r3
  405a92:	425b      	negs	r3, r3
  405a94:	930a      	str	r3, [sp, #40]	; 0x28
  405a96:	2300      	movs	r3, #0
  405a98:	9205      	str	r2, [sp, #20]
  405a9a:	930b      	str	r3, [sp, #44]	; 0x2c
  405a9c:	e5da      	b.n	405654 <_dtoa_r+0x194>
  405a9e:	425b      	negs	r3, r3
  405aa0:	9305      	str	r3, [sp, #20]
  405aa2:	2300      	movs	r3, #0
  405aa4:	9302      	str	r3, [sp, #8]
  405aa6:	e5ca      	b.n	40563e <_dtoa_r+0x17e>
  405aa8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405aaa:	9d05      	ldr	r5, [sp, #20]
  405aac:	9e09      	ldr	r6, [sp, #36]	; 0x24
  405aae:	e705      	b.n	4058bc <_dtoa_r+0x3fc>
  405ab0:	f1c3 0820 	rsb	r8, r3, #32
  405ab4:	fa0a f008 	lsl.w	r0, sl, r8
  405ab8:	e573      	b.n	4055a2 <_dtoa_r+0xe2>
  405aba:	900c      	str	r0, [sp, #48]	; 0x30
  405abc:	e5b8      	b.n	405630 <_dtoa_r+0x170>
  405abe:	bf00      	nop
  405ac0:	40240000 	.word	0x40240000
  405ac4:	2300      	movs	r3, #0
  405ac6:	9309      	str	r3, [sp, #36]	; 0x24
  405ac8:	9b04      	ldr	r3, [sp, #16]
  405aca:	9a21      	ldr	r2, [sp, #132]	; 0x84
  405acc:	4413      	add	r3, r2
  405ace:	930d      	str	r3, [sp, #52]	; 0x34
  405ad0:	3301      	adds	r3, #1
  405ad2:	2b00      	cmp	r3, #0
  405ad4:	9306      	str	r3, [sp, #24]
  405ad6:	f340 8283 	ble.w	405fe0 <_dtoa_r+0xb20>
  405ada:	9c06      	ldr	r4, [sp, #24]
  405adc:	4626      	mov	r6, r4
  405ade:	2100      	movs	r1, #0
  405ae0:	2e17      	cmp	r6, #23
  405ae2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  405ae6:	d90b      	bls.n	405b00 <_dtoa_r+0x640>
  405ae8:	2201      	movs	r2, #1
  405aea:	2304      	movs	r3, #4
  405aec:	005b      	lsls	r3, r3, #1
  405aee:	f103 0014 	add.w	r0, r3, #20
  405af2:	42b0      	cmp	r0, r6
  405af4:	4611      	mov	r1, r2
  405af6:	f102 0201 	add.w	r2, r2, #1
  405afa:	d9f7      	bls.n	405aec <_dtoa_r+0x62c>
  405afc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  405b00:	4648      	mov	r0, r9
  405b02:	f001 faa3 	bl	40704c <_Balloc>
  405b06:	2c0e      	cmp	r4, #14
  405b08:	9007      	str	r0, [sp, #28]
  405b0a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  405b0e:	f63f ade0 	bhi.w	4056d2 <_dtoa_r+0x212>
  405b12:	2d00      	cmp	r5, #0
  405b14:	f43f addd 	beq.w	4056d2 <_dtoa_r+0x212>
  405b18:	9904      	ldr	r1, [sp, #16]
  405b1a:	4657      	mov	r7, sl
  405b1c:	46d8      	mov	r8, fp
  405b1e:	2900      	cmp	r1, #0
  405b20:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  405b24:	f340 8292 	ble.w	40604c <_dtoa_r+0xb8c>
  405b28:	4b91      	ldr	r3, [pc, #580]	; (405d70 <_dtoa_r+0x8b0>)
  405b2a:	f001 020f 	and.w	r2, r1, #15
  405b2e:	110e      	asrs	r6, r1, #4
  405b30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405b34:	06f0      	lsls	r0, r6, #27
  405b36:	e9d3 4500 	ldrd	r4, r5, [r3]
  405b3a:	f140 824c 	bpl.w	405fd6 <_dtoa_r+0xb16>
  405b3e:	4b8d      	ldr	r3, [pc, #564]	; (405d74 <_dtoa_r+0x8b4>)
  405b40:	4650      	mov	r0, sl
  405b42:	4659      	mov	r1, fp
  405b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405b48:	f002 fcc6 	bl	4084d8 <__aeabi_ddiv>
  405b4c:	f006 060f 	and.w	r6, r6, #15
  405b50:	4682      	mov	sl, r0
  405b52:	468b      	mov	fp, r1
  405b54:	f04f 0803 	mov.w	r8, #3
  405b58:	b186      	cbz	r6, 405b7c <_dtoa_r+0x6bc>
  405b5a:	4f86      	ldr	r7, [pc, #536]	; (405d74 <_dtoa_r+0x8b4>)
  405b5c:	07f1      	lsls	r1, r6, #31
  405b5e:	d509      	bpl.n	405b74 <_dtoa_r+0x6b4>
  405b60:	4620      	mov	r0, r4
  405b62:	4629      	mov	r1, r5
  405b64:	e9d7 2300 	ldrd	r2, r3, [r7]
  405b68:	f002 fb8c 	bl	408284 <__aeabi_dmul>
  405b6c:	f108 0801 	add.w	r8, r8, #1
  405b70:	4604      	mov	r4, r0
  405b72:	460d      	mov	r5, r1
  405b74:	1076      	asrs	r6, r6, #1
  405b76:	f107 0708 	add.w	r7, r7, #8
  405b7a:	d1ef      	bne.n	405b5c <_dtoa_r+0x69c>
  405b7c:	4622      	mov	r2, r4
  405b7e:	462b      	mov	r3, r5
  405b80:	4650      	mov	r0, sl
  405b82:	4659      	mov	r1, fp
  405b84:	f002 fca8 	bl	4084d8 <__aeabi_ddiv>
  405b88:	4606      	mov	r6, r0
  405b8a:	460f      	mov	r7, r1
  405b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405b8e:	b143      	cbz	r3, 405ba2 <_dtoa_r+0x6e2>
  405b90:	2200      	movs	r2, #0
  405b92:	4b79      	ldr	r3, [pc, #484]	; (405d78 <_dtoa_r+0x8b8>)
  405b94:	4630      	mov	r0, r6
  405b96:	4639      	mov	r1, r7
  405b98:	f002 fde6 	bl	408768 <__aeabi_dcmplt>
  405b9c:	2800      	cmp	r0, #0
  405b9e:	f040 8320 	bne.w	4061e2 <_dtoa_r+0xd22>
  405ba2:	4640      	mov	r0, r8
  405ba4:	f002 fb08 	bl	4081b8 <__aeabi_i2d>
  405ba8:	4632      	mov	r2, r6
  405baa:	463b      	mov	r3, r7
  405bac:	f002 fb6a 	bl	408284 <__aeabi_dmul>
  405bb0:	4b72      	ldr	r3, [pc, #456]	; (405d7c <_dtoa_r+0x8bc>)
  405bb2:	2200      	movs	r2, #0
  405bb4:	f002 f9b4 	bl	407f20 <__adddf3>
  405bb8:	9b06      	ldr	r3, [sp, #24]
  405bba:	4604      	mov	r4, r0
  405bbc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  405bc0:	2b00      	cmp	r3, #0
  405bc2:	f000 81df 	beq.w	405f84 <_dtoa_r+0xac4>
  405bc6:	9b04      	ldr	r3, [sp, #16]
  405bc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  405bcc:	9311      	str	r3, [sp, #68]	; 0x44
  405bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405bd0:	2b00      	cmp	r3, #0
  405bd2:	f000 8297 	beq.w	406104 <_dtoa_r+0xc44>
  405bd6:	4b66      	ldr	r3, [pc, #408]	; (405d70 <_dtoa_r+0x8b0>)
  405bd8:	4969      	ldr	r1, [pc, #420]	; (405d80 <_dtoa_r+0x8c0>)
  405bda:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  405bde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405be2:	2000      	movs	r0, #0
  405be4:	f002 fc78 	bl	4084d8 <__aeabi_ddiv>
  405be8:	4622      	mov	r2, r4
  405bea:	462b      	mov	r3, r5
  405bec:	f002 f996 	bl	407f1c <__aeabi_dsub>
  405bf0:	4682      	mov	sl, r0
  405bf2:	468b      	mov	fp, r1
  405bf4:	4630      	mov	r0, r6
  405bf6:	4639      	mov	r1, r7
  405bf8:	f002 fdf4 	bl	4087e4 <__aeabi_d2iz>
  405bfc:	4604      	mov	r4, r0
  405bfe:	f002 fadb 	bl	4081b8 <__aeabi_i2d>
  405c02:	4602      	mov	r2, r0
  405c04:	460b      	mov	r3, r1
  405c06:	4630      	mov	r0, r6
  405c08:	4639      	mov	r1, r7
  405c0a:	f002 f987 	bl	407f1c <__aeabi_dsub>
  405c0e:	3430      	adds	r4, #48	; 0x30
  405c10:	9d07      	ldr	r5, [sp, #28]
  405c12:	b2e4      	uxtb	r4, r4
  405c14:	4606      	mov	r6, r0
  405c16:	460f      	mov	r7, r1
  405c18:	702c      	strb	r4, [r5, #0]
  405c1a:	4602      	mov	r2, r0
  405c1c:	460b      	mov	r3, r1
  405c1e:	4650      	mov	r0, sl
  405c20:	4659      	mov	r1, fp
  405c22:	3501      	adds	r5, #1
  405c24:	f002 fdbe 	bl	4087a4 <__aeabi_dcmpgt>
  405c28:	2800      	cmp	r0, #0
  405c2a:	d14c      	bne.n	405cc6 <_dtoa_r+0x806>
  405c2c:	4632      	mov	r2, r6
  405c2e:	463b      	mov	r3, r7
  405c30:	2000      	movs	r0, #0
  405c32:	4951      	ldr	r1, [pc, #324]	; (405d78 <_dtoa_r+0x8b8>)
  405c34:	f002 f972 	bl	407f1c <__aeabi_dsub>
  405c38:	4602      	mov	r2, r0
  405c3a:	460b      	mov	r3, r1
  405c3c:	4650      	mov	r0, sl
  405c3e:	4659      	mov	r1, fp
  405c40:	f002 fdb0 	bl	4087a4 <__aeabi_dcmpgt>
  405c44:	2800      	cmp	r0, #0
  405c46:	f040 830d 	bne.w	406264 <_dtoa_r+0xda4>
  405c4a:	f1b8 0f01 	cmp.w	r8, #1
  405c4e:	f340 81b3 	ble.w	405fb8 <_dtoa_r+0xaf8>
  405c52:	9b07      	ldr	r3, [sp, #28]
  405c54:	4498      	add	r8, r3
  405c56:	e00d      	b.n	405c74 <_dtoa_r+0x7b4>
  405c58:	2000      	movs	r0, #0
  405c5a:	4947      	ldr	r1, [pc, #284]	; (405d78 <_dtoa_r+0x8b8>)
  405c5c:	f002 f95e 	bl	407f1c <__aeabi_dsub>
  405c60:	4652      	mov	r2, sl
  405c62:	465b      	mov	r3, fp
  405c64:	f002 fd80 	bl	408768 <__aeabi_dcmplt>
  405c68:	2800      	cmp	r0, #0
  405c6a:	f040 82fb 	bne.w	406264 <_dtoa_r+0xda4>
  405c6e:	4545      	cmp	r5, r8
  405c70:	f000 81a2 	beq.w	405fb8 <_dtoa_r+0xaf8>
  405c74:	4650      	mov	r0, sl
  405c76:	4659      	mov	r1, fp
  405c78:	2200      	movs	r2, #0
  405c7a:	4b42      	ldr	r3, [pc, #264]	; (405d84 <_dtoa_r+0x8c4>)
  405c7c:	f002 fb02 	bl	408284 <__aeabi_dmul>
  405c80:	2200      	movs	r2, #0
  405c82:	4b40      	ldr	r3, [pc, #256]	; (405d84 <_dtoa_r+0x8c4>)
  405c84:	4682      	mov	sl, r0
  405c86:	468b      	mov	fp, r1
  405c88:	4630      	mov	r0, r6
  405c8a:	4639      	mov	r1, r7
  405c8c:	f002 fafa 	bl	408284 <__aeabi_dmul>
  405c90:	460f      	mov	r7, r1
  405c92:	4606      	mov	r6, r0
  405c94:	f002 fda6 	bl	4087e4 <__aeabi_d2iz>
  405c98:	4604      	mov	r4, r0
  405c9a:	f002 fa8d 	bl	4081b8 <__aeabi_i2d>
  405c9e:	4602      	mov	r2, r0
  405ca0:	460b      	mov	r3, r1
  405ca2:	4630      	mov	r0, r6
  405ca4:	4639      	mov	r1, r7
  405ca6:	f002 f939 	bl	407f1c <__aeabi_dsub>
  405caa:	3430      	adds	r4, #48	; 0x30
  405cac:	b2e4      	uxtb	r4, r4
  405cae:	4652      	mov	r2, sl
  405cb0:	465b      	mov	r3, fp
  405cb2:	f805 4b01 	strb.w	r4, [r5], #1
  405cb6:	4606      	mov	r6, r0
  405cb8:	460f      	mov	r7, r1
  405cba:	f002 fd55 	bl	408768 <__aeabi_dcmplt>
  405cbe:	4632      	mov	r2, r6
  405cc0:	463b      	mov	r3, r7
  405cc2:	2800      	cmp	r0, #0
  405cc4:	d0c8      	beq.n	405c58 <_dtoa_r+0x798>
  405cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405cc8:	9304      	str	r3, [sp, #16]
  405cca:	e5c4      	b.n	405856 <_dtoa_r+0x396>
  405ccc:	2300      	movs	r3, #0
  405cce:	9309      	str	r3, [sp, #36]	; 0x24
  405cd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405cd2:	2b00      	cmp	r3, #0
  405cd4:	f340 8189 	ble.w	405fea <_dtoa_r+0xb2a>
  405cd8:	461e      	mov	r6, r3
  405cda:	461c      	mov	r4, r3
  405cdc:	930d      	str	r3, [sp, #52]	; 0x34
  405cde:	9306      	str	r3, [sp, #24]
  405ce0:	e6fd      	b.n	405ade <_dtoa_r+0x61e>
  405ce2:	2301      	movs	r3, #1
  405ce4:	9309      	str	r3, [sp, #36]	; 0x24
  405ce6:	e7f3      	b.n	405cd0 <_dtoa_r+0x810>
  405ce8:	9408      	str	r4, [sp, #32]
  405cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405cec:	9908      	ldr	r1, [sp, #32]
  405cee:	4648      	mov	r0, r9
  405cf0:	f001 fb0c 	bl	40730c <__pow5mult>
  405cf4:	4604      	mov	r4, r0
  405cf6:	e611      	b.n	40591c <_dtoa_r+0x45c>
  405cf8:	9b06      	ldr	r3, [sp, #24]
  405cfa:	2b00      	cmp	r3, #0
  405cfc:	f73f acfc 	bgt.w	4056f8 <_dtoa_r+0x238>
  405d00:	f040 82da 	bne.w	4062b8 <_dtoa_r+0xdf8>
  405d04:	2200      	movs	r2, #0
  405d06:	4b20      	ldr	r3, [pc, #128]	; (405d88 <_dtoa_r+0x8c8>)
  405d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405d0c:	f002 faba 	bl	408284 <__aeabi_dmul>
  405d10:	4652      	mov	r2, sl
  405d12:	465b      	mov	r3, fp
  405d14:	f002 fd3c 	bl	408790 <__aeabi_dcmpge>
  405d18:	f8dd 8018 	ldr.w	r8, [sp, #24]
  405d1c:	4646      	mov	r6, r8
  405d1e:	2800      	cmp	r0, #0
  405d20:	f000 80f2 	beq.w	405f08 <_dtoa_r+0xa48>
  405d24:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405d26:	9d07      	ldr	r5, [sp, #28]
  405d28:	43db      	mvns	r3, r3
  405d2a:	9304      	str	r3, [sp, #16]
  405d2c:	4641      	mov	r1, r8
  405d2e:	4648      	mov	r0, r9
  405d30:	f001 f9b2 	bl	407098 <_Bfree>
  405d34:	2e00      	cmp	r6, #0
  405d36:	f43f ad8e 	beq.w	405856 <_dtoa_r+0x396>
  405d3a:	e68d      	b.n	405a58 <_dtoa_r+0x598>
  405d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405d3e:	2a00      	cmp	r2, #0
  405d40:	f000 8241 	beq.w	4061c6 <_dtoa_r+0xd06>
  405d44:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405d48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405d4a:	9d05      	ldr	r5, [sp, #20]
  405d4c:	e5ab      	b.n	4058a6 <_dtoa_r+0x3e6>
  405d4e:	201c      	movs	r0, #28
  405d50:	9b05      	ldr	r3, [sp, #20]
  405d52:	4403      	add	r3, r0
  405d54:	9305      	str	r3, [sp, #20]
  405d56:	9b02      	ldr	r3, [sp, #8]
  405d58:	4403      	add	r3, r0
  405d5a:	4405      	add	r5, r0
  405d5c:	9302      	str	r3, [sp, #8]
  405d5e:	e60e      	b.n	40597e <_dtoa_r+0x4be>
  405d60:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405d62:	2b01      	cmp	r3, #1
  405d64:	f340 8282 	ble.w	40626c <_dtoa_r+0xdac>
  405d68:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  405d6a:	2001      	movs	r0, #1
  405d6c:	e5f3      	b.n	405956 <_dtoa_r+0x496>
  405d6e:	bf00      	nop
  405d70:	00408c10 	.word	0x00408c10
  405d74:	00408cd8 	.word	0x00408cd8
  405d78:	3ff00000 	.word	0x3ff00000
  405d7c:	401c0000 	.word	0x401c0000
  405d80:	3fe00000 	.word	0x3fe00000
  405d84:	40240000 	.word	0x40240000
  405d88:	40140000 	.word	0x40140000
  405d8c:	4631      	mov	r1, r6
  405d8e:	2300      	movs	r3, #0
  405d90:	220a      	movs	r2, #10
  405d92:	4648      	mov	r0, r9
  405d94:	f001 f98a 	bl	4070ac <__multadd>
  405d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405d9a:	2b00      	cmp	r3, #0
  405d9c:	4606      	mov	r6, r0
  405d9e:	f340 8297 	ble.w	4062d0 <_dtoa_r+0xe10>
  405da2:	9306      	str	r3, [sp, #24]
  405da4:	2d00      	cmp	r5, #0
  405da6:	dd05      	ble.n	405db4 <_dtoa_r+0x8f4>
  405da8:	4631      	mov	r1, r6
  405daa:	462a      	mov	r2, r5
  405dac:	4648      	mov	r0, r9
  405dae:	f001 fafd 	bl	4073ac <__lshift>
  405db2:	4606      	mov	r6, r0
  405db4:	2f00      	cmp	r7, #0
  405db6:	f040 817c 	bne.w	4060b2 <_dtoa_r+0xbf2>
  405dba:	9605      	str	r6, [sp, #20]
  405dbc:	9b06      	ldr	r3, [sp, #24]
  405dbe:	9a07      	ldr	r2, [sp, #28]
  405dc0:	f8dd b014 	ldr.w	fp, [sp, #20]
  405dc4:	3b01      	subs	r3, #1
  405dc6:	18d3      	adds	r3, r2, r3
  405dc8:	9308      	str	r3, [sp, #32]
  405dca:	f00a 0301 	and.w	r3, sl, #1
  405dce:	9309      	str	r3, [sp, #36]	; 0x24
  405dd0:	4617      	mov	r7, r2
  405dd2:	46c2      	mov	sl, r8
  405dd4:	4651      	mov	r1, sl
  405dd6:	4620      	mov	r0, r4
  405dd8:	f7ff fade 	bl	405398 <quorem>
  405ddc:	4631      	mov	r1, r6
  405dde:	4605      	mov	r5, r0
  405de0:	4620      	mov	r0, r4
  405de2:	f001 fb3b 	bl	40745c <__mcmp>
  405de6:	465a      	mov	r2, fp
  405de8:	9002      	str	r0, [sp, #8]
  405dea:	4651      	mov	r1, sl
  405dec:	4648      	mov	r0, r9
  405dee:	f001 fb55 	bl	40749c <__mdiff>
  405df2:	68c2      	ldr	r2, [r0, #12]
  405df4:	4680      	mov	r8, r0
  405df6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405dfa:	2a00      	cmp	r2, #0
  405dfc:	d149      	bne.n	405e92 <_dtoa_r+0x9d2>
  405dfe:	4601      	mov	r1, r0
  405e00:	4620      	mov	r0, r4
  405e02:	9306      	str	r3, [sp, #24]
  405e04:	f001 fb2a 	bl	40745c <__mcmp>
  405e08:	4641      	mov	r1, r8
  405e0a:	9005      	str	r0, [sp, #20]
  405e0c:	4648      	mov	r0, r9
  405e0e:	f001 f943 	bl	407098 <_Bfree>
  405e12:	9a05      	ldr	r2, [sp, #20]
  405e14:	9b06      	ldr	r3, [sp, #24]
  405e16:	b92a      	cbnz	r2, 405e24 <_dtoa_r+0x964>
  405e18:	9920      	ldr	r1, [sp, #128]	; 0x80
  405e1a:	b919      	cbnz	r1, 405e24 <_dtoa_r+0x964>
  405e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
  405e1e:	2900      	cmp	r1, #0
  405e20:	f000 8236 	beq.w	406290 <_dtoa_r+0xdd0>
  405e24:	9902      	ldr	r1, [sp, #8]
  405e26:	2900      	cmp	r1, #0
  405e28:	f2c0 80e4 	blt.w	405ff4 <_dtoa_r+0xb34>
  405e2c:	d105      	bne.n	405e3a <_dtoa_r+0x97a>
  405e2e:	9920      	ldr	r1, [sp, #128]	; 0x80
  405e30:	b919      	cbnz	r1, 405e3a <_dtoa_r+0x97a>
  405e32:	9909      	ldr	r1, [sp, #36]	; 0x24
  405e34:	2900      	cmp	r1, #0
  405e36:	f000 80dd 	beq.w	405ff4 <_dtoa_r+0xb34>
  405e3a:	2a00      	cmp	r2, #0
  405e3c:	f300 814d 	bgt.w	4060da <_dtoa_r+0xc1a>
  405e40:	9a08      	ldr	r2, [sp, #32]
  405e42:	703b      	strb	r3, [r7, #0]
  405e44:	f107 0801 	add.w	r8, r7, #1
  405e48:	4297      	cmp	r7, r2
  405e4a:	4645      	mov	r5, r8
  405e4c:	f000 8154 	beq.w	4060f8 <_dtoa_r+0xc38>
  405e50:	4621      	mov	r1, r4
  405e52:	2300      	movs	r3, #0
  405e54:	220a      	movs	r2, #10
  405e56:	4648      	mov	r0, r9
  405e58:	f001 f928 	bl	4070ac <__multadd>
  405e5c:	455e      	cmp	r6, fp
  405e5e:	4604      	mov	r4, r0
  405e60:	4631      	mov	r1, r6
  405e62:	f04f 0300 	mov.w	r3, #0
  405e66:	f04f 020a 	mov.w	r2, #10
  405e6a:	4648      	mov	r0, r9
  405e6c:	d00b      	beq.n	405e86 <_dtoa_r+0x9c6>
  405e6e:	f001 f91d 	bl	4070ac <__multadd>
  405e72:	4659      	mov	r1, fp
  405e74:	4606      	mov	r6, r0
  405e76:	2300      	movs	r3, #0
  405e78:	220a      	movs	r2, #10
  405e7a:	4648      	mov	r0, r9
  405e7c:	f001 f916 	bl	4070ac <__multadd>
  405e80:	4647      	mov	r7, r8
  405e82:	4683      	mov	fp, r0
  405e84:	e7a6      	b.n	405dd4 <_dtoa_r+0x914>
  405e86:	f001 f911 	bl	4070ac <__multadd>
  405e8a:	4647      	mov	r7, r8
  405e8c:	4606      	mov	r6, r0
  405e8e:	4683      	mov	fp, r0
  405e90:	e7a0      	b.n	405dd4 <_dtoa_r+0x914>
  405e92:	4601      	mov	r1, r0
  405e94:	4648      	mov	r0, r9
  405e96:	9305      	str	r3, [sp, #20]
  405e98:	f001 f8fe 	bl	407098 <_Bfree>
  405e9c:	2201      	movs	r2, #1
  405e9e:	9b05      	ldr	r3, [sp, #20]
  405ea0:	e7c0      	b.n	405e24 <_dtoa_r+0x964>
  405ea2:	4641      	mov	r1, r8
  405ea4:	4620      	mov	r0, r4
  405ea6:	f001 fad9 	bl	40745c <__mcmp>
  405eaa:	2800      	cmp	r0, #0
  405eac:	f6bf ad7d 	bge.w	4059aa <_dtoa_r+0x4ea>
  405eb0:	4621      	mov	r1, r4
  405eb2:	9c04      	ldr	r4, [sp, #16]
  405eb4:	2300      	movs	r3, #0
  405eb6:	3c01      	subs	r4, #1
  405eb8:	220a      	movs	r2, #10
  405eba:	4648      	mov	r0, r9
  405ebc:	9404      	str	r4, [sp, #16]
  405ebe:	f001 f8f5 	bl	4070ac <__multadd>
  405ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405ec4:	4604      	mov	r4, r0
  405ec6:	2b00      	cmp	r3, #0
  405ec8:	f47f af60 	bne.w	405d8c <_dtoa_r+0x8cc>
  405ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405ece:	2b00      	cmp	r3, #0
  405ed0:	f340 81f6 	ble.w	4062c0 <_dtoa_r+0xe00>
  405ed4:	9306      	str	r3, [sp, #24]
  405ed6:	e570      	b.n	4059ba <_dtoa_r+0x4fa>
  405ed8:	9c08      	ldr	r4, [sp, #32]
  405eda:	e51f      	b.n	40591c <_dtoa_r+0x45c>
  405edc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405ede:	2b02      	cmp	r3, #2
  405ee0:	f77f ad67 	ble.w	4059b2 <_dtoa_r+0x4f2>
  405ee4:	9b06      	ldr	r3, [sp, #24]
  405ee6:	2b00      	cmp	r3, #0
  405ee8:	f040 8179 	bne.w	4061de <_dtoa_r+0xd1e>
  405eec:	4641      	mov	r1, r8
  405eee:	2205      	movs	r2, #5
  405ef0:	4648      	mov	r0, r9
  405ef2:	f001 f8db 	bl	4070ac <__multadd>
  405ef6:	4601      	mov	r1, r0
  405ef8:	4680      	mov	r8, r0
  405efa:	4620      	mov	r0, r4
  405efc:	f001 faae 	bl	40745c <__mcmp>
  405f00:	2800      	cmp	r0, #0
  405f02:	9408      	str	r4, [sp, #32]
  405f04:	f77f af0e 	ble.w	405d24 <_dtoa_r+0x864>
  405f08:	9a04      	ldr	r2, [sp, #16]
  405f0a:	9907      	ldr	r1, [sp, #28]
  405f0c:	2331      	movs	r3, #49	; 0x31
  405f0e:	3201      	adds	r2, #1
  405f10:	9204      	str	r2, [sp, #16]
  405f12:	700b      	strb	r3, [r1, #0]
  405f14:	1c4d      	adds	r5, r1, #1
  405f16:	e709      	b.n	405d2c <_dtoa_r+0x86c>
  405f18:	9a04      	ldr	r2, [sp, #16]
  405f1a:	3201      	adds	r2, #1
  405f1c:	9204      	str	r2, [sp, #16]
  405f1e:	9a07      	ldr	r2, [sp, #28]
  405f20:	2331      	movs	r3, #49	; 0x31
  405f22:	7013      	strb	r3, [r2, #0]
  405f24:	e588      	b.n	405a38 <_dtoa_r+0x578>
  405f26:	2301      	movs	r3, #1
  405f28:	9309      	str	r3, [sp, #36]	; 0x24
  405f2a:	e5cd      	b.n	405ac8 <_dtoa_r+0x608>
  405f2c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405f30:	e491      	b.n	405856 <_dtoa_r+0x396>
  405f32:	f1ba 0f00 	cmp.w	sl, #0
  405f36:	f47f ad04 	bne.w	405942 <_dtoa_r+0x482>
  405f3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405f3e:	2b00      	cmp	r3, #0
  405f40:	f040 813f 	bne.w	4061c2 <_dtoa_r+0xd02>
  405f44:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405f48:	0d3f      	lsrs	r7, r7, #20
  405f4a:	053f      	lsls	r7, r7, #20
  405f4c:	b137      	cbz	r7, 405f5c <_dtoa_r+0xa9c>
  405f4e:	9b05      	ldr	r3, [sp, #20]
  405f50:	3301      	adds	r3, #1
  405f52:	9305      	str	r3, [sp, #20]
  405f54:	9b02      	ldr	r3, [sp, #8]
  405f56:	3301      	adds	r3, #1
  405f58:	9302      	str	r3, [sp, #8]
  405f5a:	2701      	movs	r7, #1
  405f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405f5e:	2001      	movs	r0, #1
  405f60:	2b00      	cmp	r3, #0
  405f62:	f43f acf8 	beq.w	405956 <_dtoa_r+0x496>
  405f66:	e4ed      	b.n	405944 <_dtoa_r+0x484>
  405f68:	4640      	mov	r0, r8
  405f6a:	f002 f925 	bl	4081b8 <__aeabi_i2d>
  405f6e:	4632      	mov	r2, r6
  405f70:	463b      	mov	r3, r7
  405f72:	f002 f987 	bl	408284 <__aeabi_dmul>
  405f76:	2200      	movs	r2, #0
  405f78:	4bbf      	ldr	r3, [pc, #764]	; (406278 <_dtoa_r+0xdb8>)
  405f7a:	f001 ffd1 	bl	407f20 <__adddf3>
  405f7e:	4604      	mov	r4, r0
  405f80:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  405f84:	4630      	mov	r0, r6
  405f86:	4639      	mov	r1, r7
  405f88:	2200      	movs	r2, #0
  405f8a:	4bbc      	ldr	r3, [pc, #752]	; (40627c <_dtoa_r+0xdbc>)
  405f8c:	f001 ffc6 	bl	407f1c <__aeabi_dsub>
  405f90:	4622      	mov	r2, r4
  405f92:	462b      	mov	r3, r5
  405f94:	4606      	mov	r6, r0
  405f96:	460f      	mov	r7, r1
  405f98:	f002 fc04 	bl	4087a4 <__aeabi_dcmpgt>
  405f9c:	4680      	mov	r8, r0
  405f9e:	2800      	cmp	r0, #0
  405fa0:	f040 8105 	bne.w	4061ae <_dtoa_r+0xcee>
  405fa4:	4622      	mov	r2, r4
  405fa6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  405faa:	4630      	mov	r0, r6
  405fac:	4639      	mov	r1, r7
  405fae:	f002 fbdb 	bl	408768 <__aeabi_dcmplt>
  405fb2:	b108      	cbz	r0, 405fb8 <_dtoa_r+0xaf8>
  405fb4:	4646      	mov	r6, r8
  405fb6:	e6b5      	b.n	405d24 <_dtoa_r+0x864>
  405fb8:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  405fbc:	f7ff bb89 	b.w	4056d2 <_dtoa_r+0x212>
  405fc0:	9807      	ldr	r0, [sp, #28]
  405fc2:	f7ff baae 	b.w	405522 <_dtoa_r+0x62>
  405fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405fc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405fca:	970a      	str	r7, [sp, #40]	; 0x28
  405fcc:	1afb      	subs	r3, r7, r3
  405fce:	441a      	add	r2, r3
  405fd0:	920b      	str	r2, [sp, #44]	; 0x2c
  405fd2:	2700      	movs	r7, #0
  405fd4:	e461      	b.n	40589a <_dtoa_r+0x3da>
  405fd6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  405fda:	f04f 0802 	mov.w	r8, #2
  405fde:	e5bb      	b.n	405b58 <_dtoa_r+0x698>
  405fe0:	461c      	mov	r4, r3
  405fe2:	2100      	movs	r1, #0
  405fe4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  405fe8:	e58a      	b.n	405b00 <_dtoa_r+0x640>
  405fea:	2401      	movs	r4, #1
  405fec:	9421      	str	r4, [sp, #132]	; 0x84
  405fee:	940d      	str	r4, [sp, #52]	; 0x34
  405ff0:	9406      	str	r4, [sp, #24]
  405ff2:	e7f6      	b.n	405fe2 <_dtoa_r+0xb22>
  405ff4:	2a00      	cmp	r2, #0
  405ff6:	46d0      	mov	r8, sl
  405ff8:	f8cd b014 	str.w	fp, [sp, #20]
  405ffc:	469a      	mov	sl, r3
  405ffe:	dd11      	ble.n	406024 <_dtoa_r+0xb64>
  406000:	4621      	mov	r1, r4
  406002:	2201      	movs	r2, #1
  406004:	4648      	mov	r0, r9
  406006:	f001 f9d1 	bl	4073ac <__lshift>
  40600a:	4641      	mov	r1, r8
  40600c:	4604      	mov	r4, r0
  40600e:	f001 fa25 	bl	40745c <__mcmp>
  406012:	2800      	cmp	r0, #0
  406014:	f340 8149 	ble.w	4062aa <_dtoa_r+0xdea>
  406018:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40601c:	f000 8106 	beq.w	40622c <_dtoa_r+0xd6c>
  406020:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406024:	46b3      	mov	fp, r6
  406026:	f887 a000 	strb.w	sl, [r7]
  40602a:	1c7d      	adds	r5, r7, #1
  40602c:	9e05      	ldr	r6, [sp, #20]
  40602e:	9408      	str	r4, [sp, #32]
  406030:	e502      	b.n	405a38 <_dtoa_r+0x578>
  406032:	d104      	bne.n	40603e <_dtoa_r+0xb7e>
  406034:	f01a 0f01 	tst.w	sl, #1
  406038:	d001      	beq.n	40603e <_dtoa_r+0xb7e>
  40603a:	e4ed      	b.n	405a18 <_dtoa_r+0x558>
  40603c:	4615      	mov	r5, r2
  40603e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406042:	2b30      	cmp	r3, #48	; 0x30
  406044:	f105 32ff 	add.w	r2, r5, #4294967295
  406048:	d0f8      	beq.n	40603c <_dtoa_r+0xb7c>
  40604a:	e4f5      	b.n	405a38 <_dtoa_r+0x578>
  40604c:	9b04      	ldr	r3, [sp, #16]
  40604e:	425c      	negs	r4, r3
  406050:	2c00      	cmp	r4, #0
  406052:	f000 80bf 	beq.w	4061d4 <_dtoa_r+0xd14>
  406056:	4b8a      	ldr	r3, [pc, #552]	; (406280 <_dtoa_r+0xdc0>)
  406058:	f004 020f 	and.w	r2, r4, #15
  40605c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406060:	e9d3 2300 	ldrd	r2, r3, [r3]
  406064:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  406068:	f002 f90c 	bl	408284 <__aeabi_dmul>
  40606c:	1124      	asrs	r4, r4, #4
  40606e:	4606      	mov	r6, r0
  406070:	460f      	mov	r7, r1
  406072:	f000 812a 	beq.w	4062ca <_dtoa_r+0xe0a>
  406076:	4d83      	ldr	r5, [pc, #524]	; (406284 <_dtoa_r+0xdc4>)
  406078:	f04f 0802 	mov.w	r8, #2
  40607c:	07e2      	lsls	r2, r4, #31
  40607e:	d509      	bpl.n	406094 <_dtoa_r+0xbd4>
  406080:	4630      	mov	r0, r6
  406082:	4639      	mov	r1, r7
  406084:	e9d5 2300 	ldrd	r2, r3, [r5]
  406088:	f002 f8fc 	bl	408284 <__aeabi_dmul>
  40608c:	f108 0801 	add.w	r8, r8, #1
  406090:	4606      	mov	r6, r0
  406092:	460f      	mov	r7, r1
  406094:	1064      	asrs	r4, r4, #1
  406096:	f105 0508 	add.w	r5, r5, #8
  40609a:	d1ef      	bne.n	40607c <_dtoa_r+0xbbc>
  40609c:	e576      	b.n	405b8c <_dtoa_r+0x6cc>
  40609e:	9907      	ldr	r1, [sp, #28]
  4060a0:	2230      	movs	r2, #48	; 0x30
  4060a2:	700a      	strb	r2, [r1, #0]
  4060a4:	9a04      	ldr	r2, [sp, #16]
  4060a6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4060aa:	3201      	adds	r2, #1
  4060ac:	9204      	str	r2, [sp, #16]
  4060ae:	f7ff bbd0 	b.w	405852 <_dtoa_r+0x392>
  4060b2:	6871      	ldr	r1, [r6, #4]
  4060b4:	4648      	mov	r0, r9
  4060b6:	f000 ffc9 	bl	40704c <_Balloc>
  4060ba:	6933      	ldr	r3, [r6, #16]
  4060bc:	1c9a      	adds	r2, r3, #2
  4060be:	4605      	mov	r5, r0
  4060c0:	0092      	lsls	r2, r2, #2
  4060c2:	f106 010c 	add.w	r1, r6, #12
  4060c6:	300c      	adds	r0, #12
  4060c8:	f000 ff22 	bl	406f10 <memcpy>
  4060cc:	4629      	mov	r1, r5
  4060ce:	2201      	movs	r2, #1
  4060d0:	4648      	mov	r0, r9
  4060d2:	f001 f96b 	bl	4073ac <__lshift>
  4060d6:	9005      	str	r0, [sp, #20]
  4060d8:	e670      	b.n	405dbc <_dtoa_r+0x8fc>
  4060da:	2b39      	cmp	r3, #57	; 0x39
  4060dc:	f8cd b014 	str.w	fp, [sp, #20]
  4060e0:	46d0      	mov	r8, sl
  4060e2:	f000 80a3 	beq.w	40622c <_dtoa_r+0xd6c>
  4060e6:	f103 0a01 	add.w	sl, r3, #1
  4060ea:	46b3      	mov	fp, r6
  4060ec:	f887 a000 	strb.w	sl, [r7]
  4060f0:	1c7d      	adds	r5, r7, #1
  4060f2:	9e05      	ldr	r6, [sp, #20]
  4060f4:	9408      	str	r4, [sp, #32]
  4060f6:	e49f      	b.n	405a38 <_dtoa_r+0x578>
  4060f8:	465a      	mov	r2, fp
  4060fa:	46d0      	mov	r8, sl
  4060fc:	46b3      	mov	fp, r6
  4060fe:	469a      	mov	sl, r3
  406100:	4616      	mov	r6, r2
  406102:	e47d      	b.n	405a00 <_dtoa_r+0x540>
  406104:	495e      	ldr	r1, [pc, #376]	; (406280 <_dtoa_r+0xdc0>)
  406106:	f108 3aff 	add.w	sl, r8, #4294967295
  40610a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40610e:	4622      	mov	r2, r4
  406110:	462b      	mov	r3, r5
  406112:	e9d1 0100 	ldrd	r0, r1, [r1]
  406116:	f002 f8b5 	bl	408284 <__aeabi_dmul>
  40611a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40611e:	4639      	mov	r1, r7
  406120:	4630      	mov	r0, r6
  406122:	f002 fb5f 	bl	4087e4 <__aeabi_d2iz>
  406126:	4604      	mov	r4, r0
  406128:	f002 f846 	bl	4081b8 <__aeabi_i2d>
  40612c:	4602      	mov	r2, r0
  40612e:	460b      	mov	r3, r1
  406130:	4630      	mov	r0, r6
  406132:	4639      	mov	r1, r7
  406134:	f001 fef2 	bl	407f1c <__aeabi_dsub>
  406138:	9a07      	ldr	r2, [sp, #28]
  40613a:	3430      	adds	r4, #48	; 0x30
  40613c:	f1b8 0f01 	cmp.w	r8, #1
  406140:	4606      	mov	r6, r0
  406142:	460f      	mov	r7, r1
  406144:	7014      	strb	r4, [r2, #0]
  406146:	f102 0501 	add.w	r5, r2, #1
  40614a:	d01e      	beq.n	40618a <_dtoa_r+0xcca>
  40614c:	9b07      	ldr	r3, [sp, #28]
  40614e:	eb03 0b08 	add.w	fp, r3, r8
  406152:	46a8      	mov	r8, r5
  406154:	2200      	movs	r2, #0
  406156:	4b4c      	ldr	r3, [pc, #304]	; (406288 <_dtoa_r+0xdc8>)
  406158:	4630      	mov	r0, r6
  40615a:	4639      	mov	r1, r7
  40615c:	f002 f892 	bl	408284 <__aeabi_dmul>
  406160:	460f      	mov	r7, r1
  406162:	4606      	mov	r6, r0
  406164:	f002 fb3e 	bl	4087e4 <__aeabi_d2iz>
  406168:	4604      	mov	r4, r0
  40616a:	f002 f825 	bl	4081b8 <__aeabi_i2d>
  40616e:	3430      	adds	r4, #48	; 0x30
  406170:	4602      	mov	r2, r0
  406172:	460b      	mov	r3, r1
  406174:	4630      	mov	r0, r6
  406176:	4639      	mov	r1, r7
  406178:	f001 fed0 	bl	407f1c <__aeabi_dsub>
  40617c:	f808 4b01 	strb.w	r4, [r8], #1
  406180:	45c3      	cmp	fp, r8
  406182:	4606      	mov	r6, r0
  406184:	460f      	mov	r7, r1
  406186:	d1e5      	bne.n	406154 <_dtoa_r+0xc94>
  406188:	4455      	add	r5, sl
  40618a:	2200      	movs	r2, #0
  40618c:	4b3f      	ldr	r3, [pc, #252]	; (40628c <_dtoa_r+0xdcc>)
  40618e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406192:	f001 fec5 	bl	407f20 <__adddf3>
  406196:	4632      	mov	r2, r6
  406198:	463b      	mov	r3, r7
  40619a:	f002 fae5 	bl	408768 <__aeabi_dcmplt>
  40619e:	2800      	cmp	r0, #0
  4061a0:	d04c      	beq.n	40623c <_dtoa_r+0xd7c>
  4061a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4061a4:	9304      	str	r3, [sp, #16]
  4061a6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4061aa:	f7ff bb46 	b.w	40583a <_dtoa_r+0x37a>
  4061ae:	f04f 0800 	mov.w	r8, #0
  4061b2:	4646      	mov	r6, r8
  4061b4:	e6a8      	b.n	405f08 <_dtoa_r+0xa48>
  4061b6:	9b05      	ldr	r3, [sp, #20]
  4061b8:	9a06      	ldr	r2, [sp, #24]
  4061ba:	1a9d      	subs	r5, r3, r2
  4061bc:	2300      	movs	r3, #0
  4061be:	f7ff bb72 	b.w	4058a6 <_dtoa_r+0x3e6>
  4061c2:	2700      	movs	r7, #0
  4061c4:	e6ca      	b.n	405f5c <_dtoa_r+0xa9c>
  4061c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4061c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4061ca:	9d05      	ldr	r5, [sp, #20]
  4061cc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4061d0:	f7ff bb69 	b.w	4058a6 <_dtoa_r+0x3e6>
  4061d4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  4061d8:	f04f 0802 	mov.w	r8, #2
  4061dc:	e4d6      	b.n	405b8c <_dtoa_r+0x6cc>
  4061de:	9408      	str	r4, [sp, #32]
  4061e0:	e5a0      	b.n	405d24 <_dtoa_r+0x864>
  4061e2:	9b06      	ldr	r3, [sp, #24]
  4061e4:	2b00      	cmp	r3, #0
  4061e6:	f43f aebf 	beq.w	405f68 <_dtoa_r+0xaa8>
  4061ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4061ec:	2b00      	cmp	r3, #0
  4061ee:	f77f aee3 	ble.w	405fb8 <_dtoa_r+0xaf8>
  4061f2:	2200      	movs	r2, #0
  4061f4:	4b24      	ldr	r3, [pc, #144]	; (406288 <_dtoa_r+0xdc8>)
  4061f6:	4630      	mov	r0, r6
  4061f8:	4639      	mov	r1, r7
  4061fa:	f002 f843 	bl	408284 <__aeabi_dmul>
  4061fe:	4606      	mov	r6, r0
  406200:	460f      	mov	r7, r1
  406202:	f108 0001 	add.w	r0, r8, #1
  406206:	f001 ffd7 	bl	4081b8 <__aeabi_i2d>
  40620a:	4632      	mov	r2, r6
  40620c:	463b      	mov	r3, r7
  40620e:	f002 f839 	bl	408284 <__aeabi_dmul>
  406212:	2200      	movs	r2, #0
  406214:	4b18      	ldr	r3, [pc, #96]	; (406278 <_dtoa_r+0xdb8>)
  406216:	f001 fe83 	bl	407f20 <__adddf3>
  40621a:	9a04      	ldr	r2, [sp, #16]
  40621c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  406220:	3a01      	subs	r2, #1
  406222:	4604      	mov	r4, r0
  406224:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406228:	9211      	str	r2, [sp, #68]	; 0x44
  40622a:	e4d0      	b.n	405bce <_dtoa_r+0x70e>
  40622c:	2239      	movs	r2, #57	; 0x39
  40622e:	46b3      	mov	fp, r6
  406230:	9408      	str	r4, [sp, #32]
  406232:	9e05      	ldr	r6, [sp, #20]
  406234:	703a      	strb	r2, [r7, #0]
  406236:	1c7d      	adds	r5, r7, #1
  406238:	f7ff bbf0 	b.w	405a1c <_dtoa_r+0x55c>
  40623c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  406240:	2000      	movs	r0, #0
  406242:	4912      	ldr	r1, [pc, #72]	; (40628c <_dtoa_r+0xdcc>)
  406244:	f001 fe6a 	bl	407f1c <__aeabi_dsub>
  406248:	4632      	mov	r2, r6
  40624a:	463b      	mov	r3, r7
  40624c:	f002 faaa 	bl	4087a4 <__aeabi_dcmpgt>
  406250:	b908      	cbnz	r0, 406256 <_dtoa_r+0xd96>
  406252:	e6b1      	b.n	405fb8 <_dtoa_r+0xaf8>
  406254:	4615      	mov	r5, r2
  406256:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40625a:	2b30      	cmp	r3, #48	; 0x30
  40625c:	f105 32ff 	add.w	r2, r5, #4294967295
  406260:	d0f8      	beq.n	406254 <_dtoa_r+0xd94>
  406262:	e530      	b.n	405cc6 <_dtoa_r+0x806>
  406264:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406266:	9304      	str	r3, [sp, #16]
  406268:	f7ff bae7 	b.w	40583a <_dtoa_r+0x37a>
  40626c:	f1ba 0f00 	cmp.w	sl, #0
  406270:	f47f ad7a 	bne.w	405d68 <_dtoa_r+0x8a8>
  406274:	e661      	b.n	405f3a <_dtoa_r+0xa7a>
  406276:	bf00      	nop
  406278:	401c0000 	.word	0x401c0000
  40627c:	40140000 	.word	0x40140000
  406280:	00408c10 	.word	0x00408c10
  406284:	00408cd8 	.word	0x00408cd8
  406288:	40240000 	.word	0x40240000
  40628c:	3fe00000 	.word	0x3fe00000
  406290:	2b39      	cmp	r3, #57	; 0x39
  406292:	f8cd b014 	str.w	fp, [sp, #20]
  406296:	46d0      	mov	r8, sl
  406298:	f8dd b008 	ldr.w	fp, [sp, #8]
  40629c:	469a      	mov	sl, r3
  40629e:	d0c5      	beq.n	40622c <_dtoa_r+0xd6c>
  4062a0:	f1bb 0f00 	cmp.w	fp, #0
  4062a4:	f73f aebc 	bgt.w	406020 <_dtoa_r+0xb60>
  4062a8:	e6bc      	b.n	406024 <_dtoa_r+0xb64>
  4062aa:	f47f aebb 	bne.w	406024 <_dtoa_r+0xb64>
  4062ae:	f01a 0f01 	tst.w	sl, #1
  4062b2:	f43f aeb7 	beq.w	406024 <_dtoa_r+0xb64>
  4062b6:	e6af      	b.n	406018 <_dtoa_r+0xb58>
  4062b8:	f04f 0800 	mov.w	r8, #0
  4062bc:	4646      	mov	r6, r8
  4062be:	e531      	b.n	405d24 <_dtoa_r+0x864>
  4062c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4062c2:	2b02      	cmp	r3, #2
  4062c4:	dc21      	bgt.n	40630a <_dtoa_r+0xe4a>
  4062c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4062c8:	e604      	b.n	405ed4 <_dtoa_r+0xa14>
  4062ca:	f04f 0802 	mov.w	r8, #2
  4062ce:	e45d      	b.n	405b8c <_dtoa_r+0x6cc>
  4062d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4062d2:	2b02      	cmp	r3, #2
  4062d4:	dc19      	bgt.n	40630a <_dtoa_r+0xe4a>
  4062d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4062d8:	e563      	b.n	405da2 <_dtoa_r+0x8e2>
  4062da:	2400      	movs	r4, #0
  4062dc:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  4062e0:	4621      	mov	r1, r4
  4062e2:	4648      	mov	r0, r9
  4062e4:	f000 feb2 	bl	40704c <_Balloc>
  4062e8:	f04f 33ff 	mov.w	r3, #4294967295
  4062ec:	9306      	str	r3, [sp, #24]
  4062ee:	930d      	str	r3, [sp, #52]	; 0x34
  4062f0:	2301      	movs	r3, #1
  4062f2:	9007      	str	r0, [sp, #28]
  4062f4:	9421      	str	r4, [sp, #132]	; 0x84
  4062f6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4062fa:	9309      	str	r3, [sp, #36]	; 0x24
  4062fc:	f7ff b9e9 	b.w	4056d2 <_dtoa_r+0x212>
  406300:	f43f ab3d 	beq.w	40597e <_dtoa_r+0x4be>
  406304:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406308:	e522      	b.n	405d50 <_dtoa_r+0x890>
  40630a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40630c:	9306      	str	r3, [sp, #24]
  40630e:	e5e9      	b.n	405ee4 <_dtoa_r+0xa24>
  406310:	2501      	movs	r5, #1
  406312:	f7ff b9a8 	b.w	405666 <_dtoa_r+0x1a6>
  406316:	bf00      	nop

00406318 <__sflush_r>:
  406318:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40631c:	b29a      	uxth	r2, r3
  40631e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406322:	460d      	mov	r5, r1
  406324:	0711      	lsls	r1, r2, #28
  406326:	4680      	mov	r8, r0
  406328:	d43c      	bmi.n	4063a4 <__sflush_r+0x8c>
  40632a:	686a      	ldr	r2, [r5, #4]
  40632c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406330:	2a00      	cmp	r2, #0
  406332:	81ab      	strh	r3, [r5, #12]
  406334:	dd73      	ble.n	40641e <__sflush_r+0x106>
  406336:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406338:	2c00      	cmp	r4, #0
  40633a:	d04b      	beq.n	4063d4 <__sflush_r+0xbc>
  40633c:	b29b      	uxth	r3, r3
  40633e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  406342:	2100      	movs	r1, #0
  406344:	b292      	uxth	r2, r2
  406346:	f8d8 6000 	ldr.w	r6, [r8]
  40634a:	f8c8 1000 	str.w	r1, [r8]
  40634e:	2a00      	cmp	r2, #0
  406350:	d069      	beq.n	406426 <__sflush_r+0x10e>
  406352:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406354:	075f      	lsls	r7, r3, #29
  406356:	d505      	bpl.n	406364 <__sflush_r+0x4c>
  406358:	6869      	ldr	r1, [r5, #4]
  40635a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40635c:	1a52      	subs	r2, r2, r1
  40635e:	b10b      	cbz	r3, 406364 <__sflush_r+0x4c>
  406360:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406362:	1ad2      	subs	r2, r2, r3
  406364:	2300      	movs	r3, #0
  406366:	69e9      	ldr	r1, [r5, #28]
  406368:	4640      	mov	r0, r8
  40636a:	47a0      	blx	r4
  40636c:	1c44      	adds	r4, r0, #1
  40636e:	d03c      	beq.n	4063ea <__sflush_r+0xd2>
  406370:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406374:	692a      	ldr	r2, [r5, #16]
  406376:	602a      	str	r2, [r5, #0]
  406378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40637c:	2200      	movs	r2, #0
  40637e:	81ab      	strh	r3, [r5, #12]
  406380:	04db      	lsls	r3, r3, #19
  406382:	606a      	str	r2, [r5, #4]
  406384:	d449      	bmi.n	40641a <__sflush_r+0x102>
  406386:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406388:	f8c8 6000 	str.w	r6, [r8]
  40638c:	b311      	cbz	r1, 4063d4 <__sflush_r+0xbc>
  40638e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406392:	4299      	cmp	r1, r3
  406394:	d002      	beq.n	40639c <__sflush_r+0x84>
  406396:	4640      	mov	r0, r8
  406398:	f000 f962 	bl	406660 <_free_r>
  40639c:	2000      	movs	r0, #0
  40639e:	6328      	str	r0, [r5, #48]	; 0x30
  4063a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063a4:	692e      	ldr	r6, [r5, #16]
  4063a6:	b1ae      	cbz	r6, 4063d4 <__sflush_r+0xbc>
  4063a8:	682c      	ldr	r4, [r5, #0]
  4063aa:	602e      	str	r6, [r5, #0]
  4063ac:	0790      	lsls	r0, r2, #30
  4063ae:	bf0c      	ite	eq
  4063b0:	696b      	ldreq	r3, [r5, #20]
  4063b2:	2300      	movne	r3, #0
  4063b4:	1ba4      	subs	r4, r4, r6
  4063b6:	60ab      	str	r3, [r5, #8]
  4063b8:	e00a      	b.n	4063d0 <__sflush_r+0xb8>
  4063ba:	4623      	mov	r3, r4
  4063bc:	4632      	mov	r2, r6
  4063be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4063c0:	69e9      	ldr	r1, [r5, #28]
  4063c2:	4640      	mov	r0, r8
  4063c4:	47b8      	blx	r7
  4063c6:	2800      	cmp	r0, #0
  4063c8:	eba4 0400 	sub.w	r4, r4, r0
  4063cc:	4406      	add	r6, r0
  4063ce:	dd04      	ble.n	4063da <__sflush_r+0xc2>
  4063d0:	2c00      	cmp	r4, #0
  4063d2:	dcf2      	bgt.n	4063ba <__sflush_r+0xa2>
  4063d4:	2000      	movs	r0, #0
  4063d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063da:	89ab      	ldrh	r3, [r5, #12]
  4063dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4063e0:	81ab      	strh	r3, [r5, #12]
  4063e2:	f04f 30ff 	mov.w	r0, #4294967295
  4063e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063ea:	f8d8 2000 	ldr.w	r2, [r8]
  4063ee:	2a1d      	cmp	r2, #29
  4063f0:	d8f3      	bhi.n	4063da <__sflush_r+0xc2>
  4063f2:	4b1a      	ldr	r3, [pc, #104]	; (40645c <__sflush_r+0x144>)
  4063f4:	40d3      	lsrs	r3, r2
  4063f6:	f003 0301 	and.w	r3, r3, #1
  4063fa:	f083 0401 	eor.w	r4, r3, #1
  4063fe:	2b00      	cmp	r3, #0
  406400:	d0eb      	beq.n	4063da <__sflush_r+0xc2>
  406402:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406406:	6929      	ldr	r1, [r5, #16]
  406408:	6029      	str	r1, [r5, #0]
  40640a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40640e:	04d9      	lsls	r1, r3, #19
  406410:	606c      	str	r4, [r5, #4]
  406412:	81ab      	strh	r3, [r5, #12]
  406414:	d5b7      	bpl.n	406386 <__sflush_r+0x6e>
  406416:	2a00      	cmp	r2, #0
  406418:	d1b5      	bne.n	406386 <__sflush_r+0x6e>
  40641a:	6528      	str	r0, [r5, #80]	; 0x50
  40641c:	e7b3      	b.n	406386 <__sflush_r+0x6e>
  40641e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406420:	2a00      	cmp	r2, #0
  406422:	dc88      	bgt.n	406336 <__sflush_r+0x1e>
  406424:	e7d6      	b.n	4063d4 <__sflush_r+0xbc>
  406426:	2301      	movs	r3, #1
  406428:	69e9      	ldr	r1, [r5, #28]
  40642a:	4640      	mov	r0, r8
  40642c:	47a0      	blx	r4
  40642e:	1c43      	adds	r3, r0, #1
  406430:	4602      	mov	r2, r0
  406432:	d002      	beq.n	40643a <__sflush_r+0x122>
  406434:	89ab      	ldrh	r3, [r5, #12]
  406436:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406438:	e78c      	b.n	406354 <__sflush_r+0x3c>
  40643a:	f8d8 3000 	ldr.w	r3, [r8]
  40643e:	2b00      	cmp	r3, #0
  406440:	d0f8      	beq.n	406434 <__sflush_r+0x11c>
  406442:	2b1d      	cmp	r3, #29
  406444:	d001      	beq.n	40644a <__sflush_r+0x132>
  406446:	2b16      	cmp	r3, #22
  406448:	d102      	bne.n	406450 <__sflush_r+0x138>
  40644a:	f8c8 6000 	str.w	r6, [r8]
  40644e:	e7c1      	b.n	4063d4 <__sflush_r+0xbc>
  406450:	89ab      	ldrh	r3, [r5, #12]
  406452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406456:	81ab      	strh	r3, [r5, #12]
  406458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40645c:	20400001 	.word	0x20400001

00406460 <_fflush_r>:
  406460:	b510      	push	{r4, lr}
  406462:	4604      	mov	r4, r0
  406464:	b082      	sub	sp, #8
  406466:	b108      	cbz	r0, 40646c <_fflush_r+0xc>
  406468:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40646a:	b153      	cbz	r3, 406482 <_fflush_r+0x22>
  40646c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  406470:	b908      	cbnz	r0, 406476 <_fflush_r+0x16>
  406472:	b002      	add	sp, #8
  406474:	bd10      	pop	{r4, pc}
  406476:	4620      	mov	r0, r4
  406478:	b002      	add	sp, #8
  40647a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40647e:	f7ff bf4b 	b.w	406318 <__sflush_r>
  406482:	9101      	str	r1, [sp, #4]
  406484:	f000 f880 	bl	406588 <__sinit>
  406488:	9901      	ldr	r1, [sp, #4]
  40648a:	e7ef      	b.n	40646c <_fflush_r+0xc>

0040648c <_cleanup_r>:
  40648c:	4901      	ldr	r1, [pc, #4]	; (406494 <_cleanup_r+0x8>)
  40648e:	f000 b9cf 	b.w	406830 <_fwalk_reent>
  406492:	bf00      	nop
  406494:	00407969 	.word	0x00407969

00406498 <__sinit.part.1>:
  406498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40649c:	4b35      	ldr	r3, [pc, #212]	; (406574 <__sinit.part.1+0xdc>)
  40649e:	6845      	ldr	r5, [r0, #4]
  4064a0:	63c3      	str	r3, [r0, #60]	; 0x3c
  4064a2:	2400      	movs	r4, #0
  4064a4:	4607      	mov	r7, r0
  4064a6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4064aa:	2304      	movs	r3, #4
  4064ac:	2103      	movs	r1, #3
  4064ae:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4064b2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4064b6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4064ba:	b083      	sub	sp, #12
  4064bc:	602c      	str	r4, [r5, #0]
  4064be:	606c      	str	r4, [r5, #4]
  4064c0:	60ac      	str	r4, [r5, #8]
  4064c2:	666c      	str	r4, [r5, #100]	; 0x64
  4064c4:	81ec      	strh	r4, [r5, #14]
  4064c6:	612c      	str	r4, [r5, #16]
  4064c8:	616c      	str	r4, [r5, #20]
  4064ca:	61ac      	str	r4, [r5, #24]
  4064cc:	81ab      	strh	r3, [r5, #12]
  4064ce:	4621      	mov	r1, r4
  4064d0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4064d4:	2208      	movs	r2, #8
  4064d6:	f7fd fa57 	bl	403988 <memset>
  4064da:	68be      	ldr	r6, [r7, #8]
  4064dc:	f8df b098 	ldr.w	fp, [pc, #152]	; 406578 <__sinit.part.1+0xe0>
  4064e0:	f8df a098 	ldr.w	sl, [pc, #152]	; 40657c <__sinit.part.1+0xe4>
  4064e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 406580 <__sinit.part.1+0xe8>
  4064e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 406584 <__sinit.part.1+0xec>
  4064ec:	f8c5 b020 	str.w	fp, [r5, #32]
  4064f0:	2301      	movs	r3, #1
  4064f2:	2209      	movs	r2, #9
  4064f4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4064f8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4064fc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  406500:	61ed      	str	r5, [r5, #28]
  406502:	4621      	mov	r1, r4
  406504:	81f3      	strh	r3, [r6, #14]
  406506:	81b2      	strh	r2, [r6, #12]
  406508:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40650c:	6034      	str	r4, [r6, #0]
  40650e:	6074      	str	r4, [r6, #4]
  406510:	60b4      	str	r4, [r6, #8]
  406512:	6674      	str	r4, [r6, #100]	; 0x64
  406514:	6134      	str	r4, [r6, #16]
  406516:	6174      	str	r4, [r6, #20]
  406518:	61b4      	str	r4, [r6, #24]
  40651a:	2208      	movs	r2, #8
  40651c:	9301      	str	r3, [sp, #4]
  40651e:	f7fd fa33 	bl	403988 <memset>
  406522:	68fd      	ldr	r5, [r7, #12]
  406524:	61f6      	str	r6, [r6, #28]
  406526:	2012      	movs	r0, #18
  406528:	2202      	movs	r2, #2
  40652a:	f8c6 b020 	str.w	fp, [r6, #32]
  40652e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  406532:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  406536:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40653a:	4621      	mov	r1, r4
  40653c:	81a8      	strh	r0, [r5, #12]
  40653e:	81ea      	strh	r2, [r5, #14]
  406540:	602c      	str	r4, [r5, #0]
  406542:	606c      	str	r4, [r5, #4]
  406544:	60ac      	str	r4, [r5, #8]
  406546:	666c      	str	r4, [r5, #100]	; 0x64
  406548:	612c      	str	r4, [r5, #16]
  40654a:	616c      	str	r4, [r5, #20]
  40654c:	61ac      	str	r4, [r5, #24]
  40654e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406552:	2208      	movs	r2, #8
  406554:	f7fd fa18 	bl	403988 <memset>
  406558:	9b01      	ldr	r3, [sp, #4]
  40655a:	61ed      	str	r5, [r5, #28]
  40655c:	f8c5 b020 	str.w	fp, [r5, #32]
  406560:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406564:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406568:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40656c:	63bb      	str	r3, [r7, #56]	; 0x38
  40656e:	b003      	add	sp, #12
  406570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406574:	0040648d 	.word	0x0040648d
  406578:	0040768d 	.word	0x0040768d
  40657c:	004076b1 	.word	0x004076b1
  406580:	004076ed 	.word	0x004076ed
  406584:	0040770d 	.word	0x0040770d

00406588 <__sinit>:
  406588:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40658a:	b103      	cbz	r3, 40658e <__sinit+0x6>
  40658c:	4770      	bx	lr
  40658e:	f7ff bf83 	b.w	406498 <__sinit.part.1>
  406592:	bf00      	nop

00406594 <__sfp_lock_acquire>:
  406594:	4770      	bx	lr
  406596:	bf00      	nop

00406598 <__sfp_lock_release>:
  406598:	4770      	bx	lr
  40659a:	bf00      	nop

0040659c <__libc_fini_array>:
  40659c:	b538      	push	{r3, r4, r5, lr}
  40659e:	4d07      	ldr	r5, [pc, #28]	; (4065bc <__libc_fini_array+0x20>)
  4065a0:	4c07      	ldr	r4, [pc, #28]	; (4065c0 <__libc_fini_array+0x24>)
  4065a2:	1b2c      	subs	r4, r5, r4
  4065a4:	10a4      	asrs	r4, r4, #2
  4065a6:	d005      	beq.n	4065b4 <__libc_fini_array+0x18>
  4065a8:	3c01      	subs	r4, #1
  4065aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4065ae:	4798      	blx	r3
  4065b0:	2c00      	cmp	r4, #0
  4065b2:	d1f9      	bne.n	4065a8 <__libc_fini_array+0xc>
  4065b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4065b8:	f002 bbb2 	b.w	408d20 <_fini>
  4065bc:	00408d30 	.word	0x00408d30
  4065c0:	00408d2c 	.word	0x00408d2c

004065c4 <_malloc_trim_r>:
  4065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065c6:	4f23      	ldr	r7, [pc, #140]	; (406654 <_malloc_trim_r+0x90>)
  4065c8:	460c      	mov	r4, r1
  4065ca:	4606      	mov	r6, r0
  4065cc:	f000 fd3a 	bl	407044 <__malloc_lock>
  4065d0:	68bb      	ldr	r3, [r7, #8]
  4065d2:	685d      	ldr	r5, [r3, #4]
  4065d4:	f025 0503 	bic.w	r5, r5, #3
  4065d8:	1b29      	subs	r1, r5, r4
  4065da:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4065de:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4065e2:	f021 010f 	bic.w	r1, r1, #15
  4065e6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4065ea:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4065ee:	db07      	blt.n	406600 <_malloc_trim_r+0x3c>
  4065f0:	2100      	movs	r1, #0
  4065f2:	4630      	mov	r0, r6
  4065f4:	f001 f838 	bl	407668 <_sbrk_r>
  4065f8:	68bb      	ldr	r3, [r7, #8]
  4065fa:	442b      	add	r3, r5
  4065fc:	4298      	cmp	r0, r3
  4065fe:	d004      	beq.n	40660a <_malloc_trim_r+0x46>
  406600:	4630      	mov	r0, r6
  406602:	f000 fd21 	bl	407048 <__malloc_unlock>
  406606:	2000      	movs	r0, #0
  406608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40660a:	4261      	negs	r1, r4
  40660c:	4630      	mov	r0, r6
  40660e:	f001 f82b 	bl	407668 <_sbrk_r>
  406612:	3001      	adds	r0, #1
  406614:	d00d      	beq.n	406632 <_malloc_trim_r+0x6e>
  406616:	4b10      	ldr	r3, [pc, #64]	; (406658 <_malloc_trim_r+0x94>)
  406618:	68ba      	ldr	r2, [r7, #8]
  40661a:	6819      	ldr	r1, [r3, #0]
  40661c:	1b2d      	subs	r5, r5, r4
  40661e:	f045 0501 	orr.w	r5, r5, #1
  406622:	4630      	mov	r0, r6
  406624:	1b09      	subs	r1, r1, r4
  406626:	6055      	str	r5, [r2, #4]
  406628:	6019      	str	r1, [r3, #0]
  40662a:	f000 fd0d 	bl	407048 <__malloc_unlock>
  40662e:	2001      	movs	r0, #1
  406630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406632:	2100      	movs	r1, #0
  406634:	4630      	mov	r0, r6
  406636:	f001 f817 	bl	407668 <_sbrk_r>
  40663a:	68ba      	ldr	r2, [r7, #8]
  40663c:	1a83      	subs	r3, r0, r2
  40663e:	2b0f      	cmp	r3, #15
  406640:	ddde      	ble.n	406600 <_malloc_trim_r+0x3c>
  406642:	4c06      	ldr	r4, [pc, #24]	; (40665c <_malloc_trim_r+0x98>)
  406644:	4904      	ldr	r1, [pc, #16]	; (406658 <_malloc_trim_r+0x94>)
  406646:	6824      	ldr	r4, [r4, #0]
  406648:	f043 0301 	orr.w	r3, r3, #1
  40664c:	1b00      	subs	r0, r0, r4
  40664e:	6053      	str	r3, [r2, #4]
  406650:	6008      	str	r0, [r1, #0]
  406652:	e7d5      	b.n	406600 <_malloc_trim_r+0x3c>
  406654:	2000047c 	.word	0x2000047c
  406658:	20000afc 	.word	0x20000afc
  40665c:	20000888 	.word	0x20000888

00406660 <_free_r>:
  406660:	2900      	cmp	r1, #0
  406662:	d045      	beq.n	4066f0 <_free_r+0x90>
  406664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406668:	460d      	mov	r5, r1
  40666a:	4680      	mov	r8, r0
  40666c:	f000 fcea 	bl	407044 <__malloc_lock>
  406670:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406674:	496a      	ldr	r1, [pc, #424]	; (406820 <_free_r+0x1c0>)
  406676:	f027 0301 	bic.w	r3, r7, #1
  40667a:	f1a5 0408 	sub.w	r4, r5, #8
  40667e:	18e2      	adds	r2, r4, r3
  406680:	688e      	ldr	r6, [r1, #8]
  406682:	6850      	ldr	r0, [r2, #4]
  406684:	42b2      	cmp	r2, r6
  406686:	f020 0003 	bic.w	r0, r0, #3
  40668a:	d062      	beq.n	406752 <_free_r+0xf2>
  40668c:	07fe      	lsls	r6, r7, #31
  40668e:	6050      	str	r0, [r2, #4]
  406690:	d40b      	bmi.n	4066aa <_free_r+0x4a>
  406692:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406696:	1be4      	subs	r4, r4, r7
  406698:	f101 0e08 	add.w	lr, r1, #8
  40669c:	68a5      	ldr	r5, [r4, #8]
  40669e:	4575      	cmp	r5, lr
  4066a0:	443b      	add	r3, r7
  4066a2:	d06f      	beq.n	406784 <_free_r+0x124>
  4066a4:	68e7      	ldr	r7, [r4, #12]
  4066a6:	60ef      	str	r7, [r5, #12]
  4066a8:	60bd      	str	r5, [r7, #8]
  4066aa:	1815      	adds	r5, r2, r0
  4066ac:	686d      	ldr	r5, [r5, #4]
  4066ae:	07ed      	lsls	r5, r5, #31
  4066b0:	d542      	bpl.n	406738 <_free_r+0xd8>
  4066b2:	f043 0201 	orr.w	r2, r3, #1
  4066b6:	6062      	str	r2, [r4, #4]
  4066b8:	50e3      	str	r3, [r4, r3]
  4066ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4066be:	d218      	bcs.n	4066f2 <_free_r+0x92>
  4066c0:	08db      	lsrs	r3, r3, #3
  4066c2:	1c5a      	adds	r2, r3, #1
  4066c4:	684d      	ldr	r5, [r1, #4]
  4066c6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  4066ca:	60a7      	str	r7, [r4, #8]
  4066cc:	2001      	movs	r0, #1
  4066ce:	109b      	asrs	r3, r3, #2
  4066d0:	fa00 f303 	lsl.w	r3, r0, r3
  4066d4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4066d8:	431d      	orrs	r5, r3
  4066da:	3808      	subs	r0, #8
  4066dc:	60e0      	str	r0, [r4, #12]
  4066de:	604d      	str	r5, [r1, #4]
  4066e0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4066e4:	60fc      	str	r4, [r7, #12]
  4066e6:	4640      	mov	r0, r8
  4066e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4066ec:	f000 bcac 	b.w	407048 <__malloc_unlock>
  4066f0:	4770      	bx	lr
  4066f2:	0a5a      	lsrs	r2, r3, #9
  4066f4:	2a04      	cmp	r2, #4
  4066f6:	d853      	bhi.n	4067a0 <_free_r+0x140>
  4066f8:	099a      	lsrs	r2, r3, #6
  4066fa:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4066fe:	007f      	lsls	r7, r7, #1
  406700:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406704:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  406708:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40670c:	4944      	ldr	r1, [pc, #272]	; (406820 <_free_r+0x1c0>)
  40670e:	3808      	subs	r0, #8
  406710:	4290      	cmp	r0, r2
  406712:	d04d      	beq.n	4067b0 <_free_r+0x150>
  406714:	6851      	ldr	r1, [r2, #4]
  406716:	f021 0103 	bic.w	r1, r1, #3
  40671a:	428b      	cmp	r3, r1
  40671c:	d202      	bcs.n	406724 <_free_r+0xc4>
  40671e:	6892      	ldr	r2, [r2, #8]
  406720:	4290      	cmp	r0, r2
  406722:	d1f7      	bne.n	406714 <_free_r+0xb4>
  406724:	68d0      	ldr	r0, [r2, #12]
  406726:	60e0      	str	r0, [r4, #12]
  406728:	60a2      	str	r2, [r4, #8]
  40672a:	6084      	str	r4, [r0, #8]
  40672c:	60d4      	str	r4, [r2, #12]
  40672e:	4640      	mov	r0, r8
  406730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406734:	f000 bc88 	b.w	407048 <__malloc_unlock>
  406738:	6895      	ldr	r5, [r2, #8]
  40673a:	4f3a      	ldr	r7, [pc, #232]	; (406824 <_free_r+0x1c4>)
  40673c:	42bd      	cmp	r5, r7
  40673e:	4403      	add	r3, r0
  406740:	d03f      	beq.n	4067c2 <_free_r+0x162>
  406742:	68d0      	ldr	r0, [r2, #12]
  406744:	60e8      	str	r0, [r5, #12]
  406746:	f043 0201 	orr.w	r2, r3, #1
  40674a:	6085      	str	r5, [r0, #8]
  40674c:	6062      	str	r2, [r4, #4]
  40674e:	50e3      	str	r3, [r4, r3]
  406750:	e7b3      	b.n	4066ba <_free_r+0x5a>
  406752:	07ff      	lsls	r7, r7, #31
  406754:	4403      	add	r3, r0
  406756:	d407      	bmi.n	406768 <_free_r+0x108>
  406758:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40675c:	1aa4      	subs	r4, r4, r2
  40675e:	4413      	add	r3, r2
  406760:	68a0      	ldr	r0, [r4, #8]
  406762:	68e2      	ldr	r2, [r4, #12]
  406764:	60c2      	str	r2, [r0, #12]
  406766:	6090      	str	r0, [r2, #8]
  406768:	4a2f      	ldr	r2, [pc, #188]	; (406828 <_free_r+0x1c8>)
  40676a:	6812      	ldr	r2, [r2, #0]
  40676c:	f043 0001 	orr.w	r0, r3, #1
  406770:	4293      	cmp	r3, r2
  406772:	6060      	str	r0, [r4, #4]
  406774:	608c      	str	r4, [r1, #8]
  406776:	d3b6      	bcc.n	4066e6 <_free_r+0x86>
  406778:	4b2c      	ldr	r3, [pc, #176]	; (40682c <_free_r+0x1cc>)
  40677a:	4640      	mov	r0, r8
  40677c:	6819      	ldr	r1, [r3, #0]
  40677e:	f7ff ff21 	bl	4065c4 <_malloc_trim_r>
  406782:	e7b0      	b.n	4066e6 <_free_r+0x86>
  406784:	1811      	adds	r1, r2, r0
  406786:	6849      	ldr	r1, [r1, #4]
  406788:	07c9      	lsls	r1, r1, #31
  40678a:	d444      	bmi.n	406816 <_free_r+0x1b6>
  40678c:	6891      	ldr	r1, [r2, #8]
  40678e:	68d2      	ldr	r2, [r2, #12]
  406790:	60ca      	str	r2, [r1, #12]
  406792:	4403      	add	r3, r0
  406794:	f043 0001 	orr.w	r0, r3, #1
  406798:	6091      	str	r1, [r2, #8]
  40679a:	6060      	str	r0, [r4, #4]
  40679c:	50e3      	str	r3, [r4, r3]
  40679e:	e7a2      	b.n	4066e6 <_free_r+0x86>
  4067a0:	2a14      	cmp	r2, #20
  4067a2:	d817      	bhi.n	4067d4 <_free_r+0x174>
  4067a4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4067a8:	007f      	lsls	r7, r7, #1
  4067aa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4067ae:	e7a9      	b.n	406704 <_free_r+0xa4>
  4067b0:	10aa      	asrs	r2, r5, #2
  4067b2:	684b      	ldr	r3, [r1, #4]
  4067b4:	2501      	movs	r5, #1
  4067b6:	fa05 f202 	lsl.w	r2, r5, r2
  4067ba:	4313      	orrs	r3, r2
  4067bc:	604b      	str	r3, [r1, #4]
  4067be:	4602      	mov	r2, r0
  4067c0:	e7b1      	b.n	406726 <_free_r+0xc6>
  4067c2:	f043 0201 	orr.w	r2, r3, #1
  4067c6:	614c      	str	r4, [r1, #20]
  4067c8:	610c      	str	r4, [r1, #16]
  4067ca:	60e5      	str	r5, [r4, #12]
  4067cc:	60a5      	str	r5, [r4, #8]
  4067ce:	6062      	str	r2, [r4, #4]
  4067d0:	50e3      	str	r3, [r4, r3]
  4067d2:	e788      	b.n	4066e6 <_free_r+0x86>
  4067d4:	2a54      	cmp	r2, #84	; 0x54
  4067d6:	d806      	bhi.n	4067e6 <_free_r+0x186>
  4067d8:	0b1a      	lsrs	r2, r3, #12
  4067da:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4067de:	007f      	lsls	r7, r7, #1
  4067e0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4067e4:	e78e      	b.n	406704 <_free_r+0xa4>
  4067e6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4067ea:	d806      	bhi.n	4067fa <_free_r+0x19a>
  4067ec:	0bda      	lsrs	r2, r3, #15
  4067ee:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4067f2:	007f      	lsls	r7, r7, #1
  4067f4:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4067f8:	e784      	b.n	406704 <_free_r+0xa4>
  4067fa:	f240 5054 	movw	r0, #1364	; 0x554
  4067fe:	4282      	cmp	r2, r0
  406800:	d806      	bhi.n	406810 <_free_r+0x1b0>
  406802:	0c9a      	lsrs	r2, r3, #18
  406804:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406808:	007f      	lsls	r7, r7, #1
  40680a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40680e:	e779      	b.n	406704 <_free_r+0xa4>
  406810:	27fe      	movs	r7, #254	; 0xfe
  406812:	257e      	movs	r5, #126	; 0x7e
  406814:	e776      	b.n	406704 <_free_r+0xa4>
  406816:	f043 0201 	orr.w	r2, r3, #1
  40681a:	6062      	str	r2, [r4, #4]
  40681c:	50e3      	str	r3, [r4, r3]
  40681e:	e762      	b.n	4066e6 <_free_r+0x86>
  406820:	2000047c 	.word	0x2000047c
  406824:	20000484 	.word	0x20000484
  406828:	20000884 	.word	0x20000884
  40682c:	20000af8 	.word	0x20000af8

00406830 <_fwalk_reent>:
  406830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406834:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406838:	d01f      	beq.n	40687a <_fwalk_reent+0x4a>
  40683a:	4688      	mov	r8, r1
  40683c:	4606      	mov	r6, r0
  40683e:	f04f 0900 	mov.w	r9, #0
  406842:	687d      	ldr	r5, [r7, #4]
  406844:	68bc      	ldr	r4, [r7, #8]
  406846:	3d01      	subs	r5, #1
  406848:	d411      	bmi.n	40686e <_fwalk_reent+0x3e>
  40684a:	89a3      	ldrh	r3, [r4, #12]
  40684c:	2b01      	cmp	r3, #1
  40684e:	f105 35ff 	add.w	r5, r5, #4294967295
  406852:	d908      	bls.n	406866 <_fwalk_reent+0x36>
  406854:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406858:	3301      	adds	r3, #1
  40685a:	4621      	mov	r1, r4
  40685c:	4630      	mov	r0, r6
  40685e:	d002      	beq.n	406866 <_fwalk_reent+0x36>
  406860:	47c0      	blx	r8
  406862:	ea49 0900 	orr.w	r9, r9, r0
  406866:	1c6b      	adds	r3, r5, #1
  406868:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40686c:	d1ed      	bne.n	40684a <_fwalk_reent+0x1a>
  40686e:	683f      	ldr	r7, [r7, #0]
  406870:	2f00      	cmp	r7, #0
  406872:	d1e6      	bne.n	406842 <_fwalk_reent+0x12>
  406874:	4648      	mov	r0, r9
  406876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40687a:	46b9      	mov	r9, r7
  40687c:	4648      	mov	r0, r9
  40687e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406882:	bf00      	nop

00406884 <_localeconv_r>:
  406884:	4800      	ldr	r0, [pc, #0]	; (406888 <_localeconv_r+0x4>)
  406886:	4770      	bx	lr
  406888:	20000444 	.word	0x20000444

0040688c <__swhatbuf_r>:
  40688c:	b570      	push	{r4, r5, r6, lr}
  40688e:	460d      	mov	r5, r1
  406890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406894:	2900      	cmp	r1, #0
  406896:	b090      	sub	sp, #64	; 0x40
  406898:	4614      	mov	r4, r2
  40689a:	461e      	mov	r6, r3
  40689c:	db14      	blt.n	4068c8 <__swhatbuf_r+0x3c>
  40689e:	aa01      	add	r2, sp, #4
  4068a0:	f001 f8a4 	bl	4079ec <_fstat_r>
  4068a4:	2800      	cmp	r0, #0
  4068a6:	db0f      	blt.n	4068c8 <__swhatbuf_r+0x3c>
  4068a8:	9a02      	ldr	r2, [sp, #8]
  4068aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4068ae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4068b2:	fab2 f282 	clz	r2, r2
  4068b6:	0952      	lsrs	r2, r2, #5
  4068b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4068bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4068c0:	6032      	str	r2, [r6, #0]
  4068c2:	6023      	str	r3, [r4, #0]
  4068c4:	b010      	add	sp, #64	; 0x40
  4068c6:	bd70      	pop	{r4, r5, r6, pc}
  4068c8:	89a8      	ldrh	r0, [r5, #12]
  4068ca:	f000 0080 	and.w	r0, r0, #128	; 0x80
  4068ce:	b282      	uxth	r2, r0
  4068d0:	2000      	movs	r0, #0
  4068d2:	6030      	str	r0, [r6, #0]
  4068d4:	b11a      	cbz	r2, 4068de <__swhatbuf_r+0x52>
  4068d6:	2340      	movs	r3, #64	; 0x40
  4068d8:	6023      	str	r3, [r4, #0]
  4068da:	b010      	add	sp, #64	; 0x40
  4068dc:	bd70      	pop	{r4, r5, r6, pc}
  4068de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4068e2:	4610      	mov	r0, r2
  4068e4:	6023      	str	r3, [r4, #0]
  4068e6:	b010      	add	sp, #64	; 0x40
  4068e8:	bd70      	pop	{r4, r5, r6, pc}
  4068ea:	bf00      	nop

004068ec <malloc>:
  4068ec:	4b02      	ldr	r3, [pc, #8]	; (4068f8 <malloc+0xc>)
  4068ee:	4601      	mov	r1, r0
  4068f0:	6818      	ldr	r0, [r3, #0]
  4068f2:	f000 b803 	b.w	4068fc <_malloc_r>
  4068f6:	bf00      	nop
  4068f8:	20000440 	.word	0x20000440

004068fc <_malloc_r>:
  4068fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406900:	f101 050b 	add.w	r5, r1, #11
  406904:	2d16      	cmp	r5, #22
  406906:	b083      	sub	sp, #12
  406908:	4606      	mov	r6, r0
  40690a:	f240 809f 	bls.w	406a4c <_malloc_r+0x150>
  40690e:	f035 0507 	bics.w	r5, r5, #7
  406912:	f100 80bf 	bmi.w	406a94 <_malloc_r+0x198>
  406916:	42a9      	cmp	r1, r5
  406918:	f200 80bc 	bhi.w	406a94 <_malloc_r+0x198>
  40691c:	f000 fb92 	bl	407044 <__malloc_lock>
  406920:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  406924:	f0c0 829c 	bcc.w	406e60 <_malloc_r+0x564>
  406928:	0a6b      	lsrs	r3, r5, #9
  40692a:	f000 80ba 	beq.w	406aa2 <_malloc_r+0x1a6>
  40692e:	2b04      	cmp	r3, #4
  406930:	f200 8183 	bhi.w	406c3a <_malloc_r+0x33e>
  406934:	09a8      	lsrs	r0, r5, #6
  406936:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40693a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40693e:	3038      	adds	r0, #56	; 0x38
  406940:	4fc4      	ldr	r7, [pc, #784]	; (406c54 <_malloc_r+0x358>)
  406942:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406946:	f1a3 0108 	sub.w	r1, r3, #8
  40694a:	685c      	ldr	r4, [r3, #4]
  40694c:	42a1      	cmp	r1, r4
  40694e:	d107      	bne.n	406960 <_malloc_r+0x64>
  406950:	e0ac      	b.n	406aac <_malloc_r+0x1b0>
  406952:	2a00      	cmp	r2, #0
  406954:	f280 80ac 	bge.w	406ab0 <_malloc_r+0x1b4>
  406958:	68e4      	ldr	r4, [r4, #12]
  40695a:	42a1      	cmp	r1, r4
  40695c:	f000 80a6 	beq.w	406aac <_malloc_r+0x1b0>
  406960:	6863      	ldr	r3, [r4, #4]
  406962:	f023 0303 	bic.w	r3, r3, #3
  406966:	1b5a      	subs	r2, r3, r5
  406968:	2a0f      	cmp	r2, #15
  40696a:	ddf2      	ble.n	406952 <_malloc_r+0x56>
  40696c:	49b9      	ldr	r1, [pc, #740]	; (406c54 <_malloc_r+0x358>)
  40696e:	693c      	ldr	r4, [r7, #16]
  406970:	f101 0e08 	add.w	lr, r1, #8
  406974:	4574      	cmp	r4, lr
  406976:	f000 81b3 	beq.w	406ce0 <_malloc_r+0x3e4>
  40697a:	6863      	ldr	r3, [r4, #4]
  40697c:	f023 0303 	bic.w	r3, r3, #3
  406980:	1b5a      	subs	r2, r3, r5
  406982:	2a0f      	cmp	r2, #15
  406984:	f300 8199 	bgt.w	406cba <_malloc_r+0x3be>
  406988:	2a00      	cmp	r2, #0
  40698a:	f8c1 e014 	str.w	lr, [r1, #20]
  40698e:	f8c1 e010 	str.w	lr, [r1, #16]
  406992:	f280 809e 	bge.w	406ad2 <_malloc_r+0x1d6>
  406996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40699a:	f080 8167 	bcs.w	406c6c <_malloc_r+0x370>
  40699e:	08db      	lsrs	r3, r3, #3
  4069a0:	f103 0c01 	add.w	ip, r3, #1
  4069a4:	2201      	movs	r2, #1
  4069a6:	109b      	asrs	r3, r3, #2
  4069a8:	fa02 f303 	lsl.w	r3, r2, r3
  4069ac:	684a      	ldr	r2, [r1, #4]
  4069ae:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4069b2:	f8c4 8008 	str.w	r8, [r4, #8]
  4069b6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4069ba:	431a      	orrs	r2, r3
  4069bc:	f1a9 0308 	sub.w	r3, r9, #8
  4069c0:	60e3      	str	r3, [r4, #12]
  4069c2:	604a      	str	r2, [r1, #4]
  4069c4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4069c8:	f8c8 400c 	str.w	r4, [r8, #12]
  4069cc:	1083      	asrs	r3, r0, #2
  4069ce:	2401      	movs	r4, #1
  4069d0:	409c      	lsls	r4, r3
  4069d2:	4294      	cmp	r4, r2
  4069d4:	f200 808a 	bhi.w	406aec <_malloc_r+0x1f0>
  4069d8:	4214      	tst	r4, r2
  4069da:	d106      	bne.n	4069ea <_malloc_r+0xee>
  4069dc:	f020 0003 	bic.w	r0, r0, #3
  4069e0:	0064      	lsls	r4, r4, #1
  4069e2:	4214      	tst	r4, r2
  4069e4:	f100 0004 	add.w	r0, r0, #4
  4069e8:	d0fa      	beq.n	4069e0 <_malloc_r+0xe4>
  4069ea:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4069ee:	46cc      	mov	ip, r9
  4069f0:	4680      	mov	r8, r0
  4069f2:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4069f6:	458c      	cmp	ip, r1
  4069f8:	d107      	bne.n	406a0a <_malloc_r+0x10e>
  4069fa:	e173      	b.n	406ce4 <_malloc_r+0x3e8>
  4069fc:	2a00      	cmp	r2, #0
  4069fe:	f280 8181 	bge.w	406d04 <_malloc_r+0x408>
  406a02:	68c9      	ldr	r1, [r1, #12]
  406a04:	458c      	cmp	ip, r1
  406a06:	f000 816d 	beq.w	406ce4 <_malloc_r+0x3e8>
  406a0a:	684b      	ldr	r3, [r1, #4]
  406a0c:	f023 0303 	bic.w	r3, r3, #3
  406a10:	1b5a      	subs	r2, r3, r5
  406a12:	2a0f      	cmp	r2, #15
  406a14:	ddf2      	ble.n	4069fc <_malloc_r+0x100>
  406a16:	460c      	mov	r4, r1
  406a18:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  406a1c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  406a20:	194b      	adds	r3, r1, r5
  406a22:	f045 0501 	orr.w	r5, r5, #1
  406a26:	604d      	str	r5, [r1, #4]
  406a28:	f042 0101 	orr.w	r1, r2, #1
  406a2c:	f8c8 c00c 	str.w	ip, [r8, #12]
  406a30:	4630      	mov	r0, r6
  406a32:	f8cc 8008 	str.w	r8, [ip, #8]
  406a36:	617b      	str	r3, [r7, #20]
  406a38:	613b      	str	r3, [r7, #16]
  406a3a:	f8c3 e00c 	str.w	lr, [r3, #12]
  406a3e:	f8c3 e008 	str.w	lr, [r3, #8]
  406a42:	6059      	str	r1, [r3, #4]
  406a44:	509a      	str	r2, [r3, r2]
  406a46:	f000 faff 	bl	407048 <__malloc_unlock>
  406a4a:	e01f      	b.n	406a8c <_malloc_r+0x190>
  406a4c:	2910      	cmp	r1, #16
  406a4e:	d821      	bhi.n	406a94 <_malloc_r+0x198>
  406a50:	f000 faf8 	bl	407044 <__malloc_lock>
  406a54:	2510      	movs	r5, #16
  406a56:	2306      	movs	r3, #6
  406a58:	2002      	movs	r0, #2
  406a5a:	4f7e      	ldr	r7, [pc, #504]	; (406c54 <_malloc_r+0x358>)
  406a5c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406a60:	f1a3 0208 	sub.w	r2, r3, #8
  406a64:	685c      	ldr	r4, [r3, #4]
  406a66:	4294      	cmp	r4, r2
  406a68:	f000 8145 	beq.w	406cf6 <_malloc_r+0x3fa>
  406a6c:	6863      	ldr	r3, [r4, #4]
  406a6e:	68e1      	ldr	r1, [r4, #12]
  406a70:	68a5      	ldr	r5, [r4, #8]
  406a72:	f023 0303 	bic.w	r3, r3, #3
  406a76:	4423      	add	r3, r4
  406a78:	4630      	mov	r0, r6
  406a7a:	685a      	ldr	r2, [r3, #4]
  406a7c:	60e9      	str	r1, [r5, #12]
  406a7e:	f042 0201 	orr.w	r2, r2, #1
  406a82:	608d      	str	r5, [r1, #8]
  406a84:	605a      	str	r2, [r3, #4]
  406a86:	f000 fadf 	bl	407048 <__malloc_unlock>
  406a8a:	3408      	adds	r4, #8
  406a8c:	4620      	mov	r0, r4
  406a8e:	b003      	add	sp, #12
  406a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a94:	2400      	movs	r4, #0
  406a96:	230c      	movs	r3, #12
  406a98:	4620      	mov	r0, r4
  406a9a:	6033      	str	r3, [r6, #0]
  406a9c:	b003      	add	sp, #12
  406a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406aa2:	2380      	movs	r3, #128	; 0x80
  406aa4:	f04f 0e40 	mov.w	lr, #64	; 0x40
  406aa8:	203f      	movs	r0, #63	; 0x3f
  406aaa:	e749      	b.n	406940 <_malloc_r+0x44>
  406aac:	4670      	mov	r0, lr
  406aae:	e75d      	b.n	40696c <_malloc_r+0x70>
  406ab0:	4423      	add	r3, r4
  406ab2:	68e1      	ldr	r1, [r4, #12]
  406ab4:	685a      	ldr	r2, [r3, #4]
  406ab6:	68a5      	ldr	r5, [r4, #8]
  406ab8:	f042 0201 	orr.w	r2, r2, #1
  406abc:	60e9      	str	r1, [r5, #12]
  406abe:	4630      	mov	r0, r6
  406ac0:	608d      	str	r5, [r1, #8]
  406ac2:	605a      	str	r2, [r3, #4]
  406ac4:	f000 fac0 	bl	407048 <__malloc_unlock>
  406ac8:	3408      	adds	r4, #8
  406aca:	4620      	mov	r0, r4
  406acc:	b003      	add	sp, #12
  406ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ad2:	4423      	add	r3, r4
  406ad4:	4630      	mov	r0, r6
  406ad6:	685a      	ldr	r2, [r3, #4]
  406ad8:	f042 0201 	orr.w	r2, r2, #1
  406adc:	605a      	str	r2, [r3, #4]
  406ade:	f000 fab3 	bl	407048 <__malloc_unlock>
  406ae2:	3408      	adds	r4, #8
  406ae4:	4620      	mov	r0, r4
  406ae6:	b003      	add	sp, #12
  406ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406aec:	68bc      	ldr	r4, [r7, #8]
  406aee:	6863      	ldr	r3, [r4, #4]
  406af0:	f023 0803 	bic.w	r8, r3, #3
  406af4:	45a8      	cmp	r8, r5
  406af6:	d304      	bcc.n	406b02 <_malloc_r+0x206>
  406af8:	ebc5 0308 	rsb	r3, r5, r8
  406afc:	2b0f      	cmp	r3, #15
  406afe:	f300 808c 	bgt.w	406c1a <_malloc_r+0x31e>
  406b02:	4b55      	ldr	r3, [pc, #340]	; (406c58 <_malloc_r+0x35c>)
  406b04:	f8df 9160 	ldr.w	r9, [pc, #352]	; 406c68 <_malloc_r+0x36c>
  406b08:	681a      	ldr	r2, [r3, #0]
  406b0a:	f8d9 3000 	ldr.w	r3, [r9]
  406b0e:	3301      	adds	r3, #1
  406b10:	442a      	add	r2, r5
  406b12:	eb04 0a08 	add.w	sl, r4, r8
  406b16:	f000 8160 	beq.w	406dda <_malloc_r+0x4de>
  406b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  406b1e:	320f      	adds	r2, #15
  406b20:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  406b24:	f022 020f 	bic.w	r2, r2, #15
  406b28:	4611      	mov	r1, r2
  406b2a:	4630      	mov	r0, r6
  406b2c:	9201      	str	r2, [sp, #4]
  406b2e:	f000 fd9b 	bl	407668 <_sbrk_r>
  406b32:	f1b0 3fff 	cmp.w	r0, #4294967295
  406b36:	4683      	mov	fp, r0
  406b38:	9a01      	ldr	r2, [sp, #4]
  406b3a:	f000 8158 	beq.w	406dee <_malloc_r+0x4f2>
  406b3e:	4582      	cmp	sl, r0
  406b40:	f200 80fc 	bhi.w	406d3c <_malloc_r+0x440>
  406b44:	4b45      	ldr	r3, [pc, #276]	; (406c5c <_malloc_r+0x360>)
  406b46:	6819      	ldr	r1, [r3, #0]
  406b48:	45da      	cmp	sl, fp
  406b4a:	4411      	add	r1, r2
  406b4c:	6019      	str	r1, [r3, #0]
  406b4e:	f000 8153 	beq.w	406df8 <_malloc_r+0x4fc>
  406b52:	f8d9 0000 	ldr.w	r0, [r9]
  406b56:	f8df e110 	ldr.w	lr, [pc, #272]	; 406c68 <_malloc_r+0x36c>
  406b5a:	3001      	adds	r0, #1
  406b5c:	bf1b      	ittet	ne
  406b5e:	ebca 0a0b 	rsbne	sl, sl, fp
  406b62:	4451      	addne	r1, sl
  406b64:	f8ce b000 	streq.w	fp, [lr]
  406b68:	6019      	strne	r1, [r3, #0]
  406b6a:	f01b 0107 	ands.w	r1, fp, #7
  406b6e:	f000 8117 	beq.w	406da0 <_malloc_r+0x4a4>
  406b72:	f1c1 0008 	rsb	r0, r1, #8
  406b76:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406b7a:	4483      	add	fp, r0
  406b7c:	3108      	adds	r1, #8
  406b7e:	445a      	add	r2, fp
  406b80:	f3c2 020b 	ubfx	r2, r2, #0, #12
  406b84:	ebc2 0901 	rsb	r9, r2, r1
  406b88:	4649      	mov	r1, r9
  406b8a:	4630      	mov	r0, r6
  406b8c:	9301      	str	r3, [sp, #4]
  406b8e:	f000 fd6b 	bl	407668 <_sbrk_r>
  406b92:	1c43      	adds	r3, r0, #1
  406b94:	9b01      	ldr	r3, [sp, #4]
  406b96:	f000 813f 	beq.w	406e18 <_malloc_r+0x51c>
  406b9a:	ebcb 0200 	rsb	r2, fp, r0
  406b9e:	444a      	add	r2, r9
  406ba0:	f042 0201 	orr.w	r2, r2, #1
  406ba4:	6819      	ldr	r1, [r3, #0]
  406ba6:	f8c7 b008 	str.w	fp, [r7, #8]
  406baa:	4449      	add	r1, r9
  406bac:	42bc      	cmp	r4, r7
  406bae:	f8cb 2004 	str.w	r2, [fp, #4]
  406bb2:	6019      	str	r1, [r3, #0]
  406bb4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 406c5c <_malloc_r+0x360>
  406bb8:	d016      	beq.n	406be8 <_malloc_r+0x2ec>
  406bba:	f1b8 0f0f 	cmp.w	r8, #15
  406bbe:	f240 80fd 	bls.w	406dbc <_malloc_r+0x4c0>
  406bc2:	6862      	ldr	r2, [r4, #4]
  406bc4:	f1a8 030c 	sub.w	r3, r8, #12
  406bc8:	f023 0307 	bic.w	r3, r3, #7
  406bcc:	18e0      	adds	r0, r4, r3
  406bce:	f002 0201 	and.w	r2, r2, #1
  406bd2:	f04f 0e05 	mov.w	lr, #5
  406bd6:	431a      	orrs	r2, r3
  406bd8:	2b0f      	cmp	r3, #15
  406bda:	6062      	str	r2, [r4, #4]
  406bdc:	f8c0 e004 	str.w	lr, [r0, #4]
  406be0:	f8c0 e008 	str.w	lr, [r0, #8]
  406be4:	f200 811c 	bhi.w	406e20 <_malloc_r+0x524>
  406be8:	4b1d      	ldr	r3, [pc, #116]	; (406c60 <_malloc_r+0x364>)
  406bea:	68bc      	ldr	r4, [r7, #8]
  406bec:	681a      	ldr	r2, [r3, #0]
  406bee:	4291      	cmp	r1, r2
  406bf0:	bf88      	it	hi
  406bf2:	6019      	strhi	r1, [r3, #0]
  406bf4:	4b1b      	ldr	r3, [pc, #108]	; (406c64 <_malloc_r+0x368>)
  406bf6:	681a      	ldr	r2, [r3, #0]
  406bf8:	4291      	cmp	r1, r2
  406bfa:	6862      	ldr	r2, [r4, #4]
  406bfc:	bf88      	it	hi
  406bfe:	6019      	strhi	r1, [r3, #0]
  406c00:	f022 0203 	bic.w	r2, r2, #3
  406c04:	4295      	cmp	r5, r2
  406c06:	eba2 0305 	sub.w	r3, r2, r5
  406c0a:	d801      	bhi.n	406c10 <_malloc_r+0x314>
  406c0c:	2b0f      	cmp	r3, #15
  406c0e:	dc04      	bgt.n	406c1a <_malloc_r+0x31e>
  406c10:	4630      	mov	r0, r6
  406c12:	f000 fa19 	bl	407048 <__malloc_unlock>
  406c16:	2400      	movs	r4, #0
  406c18:	e738      	b.n	406a8c <_malloc_r+0x190>
  406c1a:	1962      	adds	r2, r4, r5
  406c1c:	f043 0301 	orr.w	r3, r3, #1
  406c20:	f045 0501 	orr.w	r5, r5, #1
  406c24:	6065      	str	r5, [r4, #4]
  406c26:	4630      	mov	r0, r6
  406c28:	60ba      	str	r2, [r7, #8]
  406c2a:	6053      	str	r3, [r2, #4]
  406c2c:	f000 fa0c 	bl	407048 <__malloc_unlock>
  406c30:	3408      	adds	r4, #8
  406c32:	4620      	mov	r0, r4
  406c34:	b003      	add	sp, #12
  406c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c3a:	2b14      	cmp	r3, #20
  406c3c:	d971      	bls.n	406d22 <_malloc_r+0x426>
  406c3e:	2b54      	cmp	r3, #84	; 0x54
  406c40:	f200 80a4 	bhi.w	406d8c <_malloc_r+0x490>
  406c44:	0b28      	lsrs	r0, r5, #12
  406c46:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  406c4a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406c4e:	306e      	adds	r0, #110	; 0x6e
  406c50:	e676      	b.n	406940 <_malloc_r+0x44>
  406c52:	bf00      	nop
  406c54:	2000047c 	.word	0x2000047c
  406c58:	20000af8 	.word	0x20000af8
  406c5c:	20000afc 	.word	0x20000afc
  406c60:	20000af4 	.word	0x20000af4
  406c64:	20000af0 	.word	0x20000af0
  406c68:	20000888 	.word	0x20000888
  406c6c:	0a5a      	lsrs	r2, r3, #9
  406c6e:	2a04      	cmp	r2, #4
  406c70:	d95e      	bls.n	406d30 <_malloc_r+0x434>
  406c72:	2a14      	cmp	r2, #20
  406c74:	f200 80b3 	bhi.w	406dde <_malloc_r+0x4e2>
  406c78:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406c7c:	0049      	lsls	r1, r1, #1
  406c7e:	325b      	adds	r2, #91	; 0x5b
  406c80:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  406c84:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  406c88:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 406e68 <_malloc_r+0x56c>
  406c8c:	f1ac 0c08 	sub.w	ip, ip, #8
  406c90:	458c      	cmp	ip, r1
  406c92:	f000 8088 	beq.w	406da6 <_malloc_r+0x4aa>
  406c96:	684a      	ldr	r2, [r1, #4]
  406c98:	f022 0203 	bic.w	r2, r2, #3
  406c9c:	4293      	cmp	r3, r2
  406c9e:	d202      	bcs.n	406ca6 <_malloc_r+0x3aa>
  406ca0:	6889      	ldr	r1, [r1, #8]
  406ca2:	458c      	cmp	ip, r1
  406ca4:	d1f7      	bne.n	406c96 <_malloc_r+0x39a>
  406ca6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  406caa:	687a      	ldr	r2, [r7, #4]
  406cac:	f8c4 c00c 	str.w	ip, [r4, #12]
  406cb0:	60a1      	str	r1, [r4, #8]
  406cb2:	f8cc 4008 	str.w	r4, [ip, #8]
  406cb6:	60cc      	str	r4, [r1, #12]
  406cb8:	e688      	b.n	4069cc <_malloc_r+0xd0>
  406cba:	1963      	adds	r3, r4, r5
  406cbc:	f042 0701 	orr.w	r7, r2, #1
  406cc0:	f045 0501 	orr.w	r5, r5, #1
  406cc4:	6065      	str	r5, [r4, #4]
  406cc6:	4630      	mov	r0, r6
  406cc8:	614b      	str	r3, [r1, #20]
  406cca:	610b      	str	r3, [r1, #16]
  406ccc:	f8c3 e00c 	str.w	lr, [r3, #12]
  406cd0:	f8c3 e008 	str.w	lr, [r3, #8]
  406cd4:	605f      	str	r7, [r3, #4]
  406cd6:	509a      	str	r2, [r3, r2]
  406cd8:	3408      	adds	r4, #8
  406cda:	f000 f9b5 	bl	407048 <__malloc_unlock>
  406cde:	e6d5      	b.n	406a8c <_malloc_r+0x190>
  406ce0:	684a      	ldr	r2, [r1, #4]
  406ce2:	e673      	b.n	4069cc <_malloc_r+0xd0>
  406ce4:	f108 0801 	add.w	r8, r8, #1
  406ce8:	f018 0f03 	tst.w	r8, #3
  406cec:	f10c 0c08 	add.w	ip, ip, #8
  406cf0:	f47f ae7f 	bne.w	4069f2 <_malloc_r+0xf6>
  406cf4:	e030      	b.n	406d58 <_malloc_r+0x45c>
  406cf6:	68dc      	ldr	r4, [r3, #12]
  406cf8:	42a3      	cmp	r3, r4
  406cfa:	bf08      	it	eq
  406cfc:	3002      	addeq	r0, #2
  406cfe:	f43f ae35 	beq.w	40696c <_malloc_r+0x70>
  406d02:	e6b3      	b.n	406a6c <_malloc_r+0x170>
  406d04:	440b      	add	r3, r1
  406d06:	460c      	mov	r4, r1
  406d08:	685a      	ldr	r2, [r3, #4]
  406d0a:	68c9      	ldr	r1, [r1, #12]
  406d0c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  406d10:	f042 0201 	orr.w	r2, r2, #1
  406d14:	605a      	str	r2, [r3, #4]
  406d16:	4630      	mov	r0, r6
  406d18:	60e9      	str	r1, [r5, #12]
  406d1a:	608d      	str	r5, [r1, #8]
  406d1c:	f000 f994 	bl	407048 <__malloc_unlock>
  406d20:	e6b4      	b.n	406a8c <_malloc_r+0x190>
  406d22:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  406d26:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  406d2a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406d2e:	e607      	b.n	406940 <_malloc_r+0x44>
  406d30:	099a      	lsrs	r2, r3, #6
  406d32:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406d36:	0049      	lsls	r1, r1, #1
  406d38:	3238      	adds	r2, #56	; 0x38
  406d3a:	e7a1      	b.n	406c80 <_malloc_r+0x384>
  406d3c:	42bc      	cmp	r4, r7
  406d3e:	4b4a      	ldr	r3, [pc, #296]	; (406e68 <_malloc_r+0x56c>)
  406d40:	f43f af00 	beq.w	406b44 <_malloc_r+0x248>
  406d44:	689c      	ldr	r4, [r3, #8]
  406d46:	6862      	ldr	r2, [r4, #4]
  406d48:	f022 0203 	bic.w	r2, r2, #3
  406d4c:	e75a      	b.n	406c04 <_malloc_r+0x308>
  406d4e:	f859 3908 	ldr.w	r3, [r9], #-8
  406d52:	4599      	cmp	r9, r3
  406d54:	f040 8082 	bne.w	406e5c <_malloc_r+0x560>
  406d58:	f010 0f03 	tst.w	r0, #3
  406d5c:	f100 30ff 	add.w	r0, r0, #4294967295
  406d60:	d1f5      	bne.n	406d4e <_malloc_r+0x452>
  406d62:	687b      	ldr	r3, [r7, #4]
  406d64:	ea23 0304 	bic.w	r3, r3, r4
  406d68:	607b      	str	r3, [r7, #4]
  406d6a:	0064      	lsls	r4, r4, #1
  406d6c:	429c      	cmp	r4, r3
  406d6e:	f63f aebd 	bhi.w	406aec <_malloc_r+0x1f0>
  406d72:	2c00      	cmp	r4, #0
  406d74:	f43f aeba 	beq.w	406aec <_malloc_r+0x1f0>
  406d78:	421c      	tst	r4, r3
  406d7a:	4640      	mov	r0, r8
  406d7c:	f47f ae35 	bne.w	4069ea <_malloc_r+0xee>
  406d80:	0064      	lsls	r4, r4, #1
  406d82:	421c      	tst	r4, r3
  406d84:	f100 0004 	add.w	r0, r0, #4
  406d88:	d0fa      	beq.n	406d80 <_malloc_r+0x484>
  406d8a:	e62e      	b.n	4069ea <_malloc_r+0xee>
  406d8c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406d90:	d818      	bhi.n	406dc4 <_malloc_r+0x4c8>
  406d92:	0be8      	lsrs	r0, r5, #15
  406d94:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  406d98:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406d9c:	3077      	adds	r0, #119	; 0x77
  406d9e:	e5cf      	b.n	406940 <_malloc_r+0x44>
  406da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406da4:	e6eb      	b.n	406b7e <_malloc_r+0x282>
  406da6:	2101      	movs	r1, #1
  406da8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406dac:	1092      	asrs	r2, r2, #2
  406dae:	fa01 f202 	lsl.w	r2, r1, r2
  406db2:	431a      	orrs	r2, r3
  406db4:	f8c8 2004 	str.w	r2, [r8, #4]
  406db8:	4661      	mov	r1, ip
  406dba:	e777      	b.n	406cac <_malloc_r+0x3b0>
  406dbc:	2301      	movs	r3, #1
  406dbe:	f8cb 3004 	str.w	r3, [fp, #4]
  406dc2:	e725      	b.n	406c10 <_malloc_r+0x314>
  406dc4:	f240 5254 	movw	r2, #1364	; 0x554
  406dc8:	4293      	cmp	r3, r2
  406dca:	d820      	bhi.n	406e0e <_malloc_r+0x512>
  406dcc:	0ca8      	lsrs	r0, r5, #18
  406dce:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  406dd2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406dd6:	307c      	adds	r0, #124	; 0x7c
  406dd8:	e5b2      	b.n	406940 <_malloc_r+0x44>
  406dda:	3210      	adds	r2, #16
  406ddc:	e6a4      	b.n	406b28 <_malloc_r+0x22c>
  406dde:	2a54      	cmp	r2, #84	; 0x54
  406de0:	d826      	bhi.n	406e30 <_malloc_r+0x534>
  406de2:	0b1a      	lsrs	r2, r3, #12
  406de4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406de8:	0049      	lsls	r1, r1, #1
  406dea:	326e      	adds	r2, #110	; 0x6e
  406dec:	e748      	b.n	406c80 <_malloc_r+0x384>
  406dee:	68bc      	ldr	r4, [r7, #8]
  406df0:	6862      	ldr	r2, [r4, #4]
  406df2:	f022 0203 	bic.w	r2, r2, #3
  406df6:	e705      	b.n	406c04 <_malloc_r+0x308>
  406df8:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406dfc:	2800      	cmp	r0, #0
  406dfe:	f47f aea8 	bne.w	406b52 <_malloc_r+0x256>
  406e02:	4442      	add	r2, r8
  406e04:	68bb      	ldr	r3, [r7, #8]
  406e06:	f042 0201 	orr.w	r2, r2, #1
  406e0a:	605a      	str	r2, [r3, #4]
  406e0c:	e6ec      	b.n	406be8 <_malloc_r+0x2ec>
  406e0e:	23fe      	movs	r3, #254	; 0xfe
  406e10:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  406e14:	207e      	movs	r0, #126	; 0x7e
  406e16:	e593      	b.n	406940 <_malloc_r+0x44>
  406e18:	2201      	movs	r2, #1
  406e1a:	f04f 0900 	mov.w	r9, #0
  406e1e:	e6c1      	b.n	406ba4 <_malloc_r+0x2a8>
  406e20:	f104 0108 	add.w	r1, r4, #8
  406e24:	4630      	mov	r0, r6
  406e26:	f7ff fc1b 	bl	406660 <_free_r>
  406e2a:	f8d9 1000 	ldr.w	r1, [r9]
  406e2e:	e6db      	b.n	406be8 <_malloc_r+0x2ec>
  406e30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406e34:	d805      	bhi.n	406e42 <_malloc_r+0x546>
  406e36:	0bda      	lsrs	r2, r3, #15
  406e38:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406e3c:	0049      	lsls	r1, r1, #1
  406e3e:	3277      	adds	r2, #119	; 0x77
  406e40:	e71e      	b.n	406c80 <_malloc_r+0x384>
  406e42:	f240 5154 	movw	r1, #1364	; 0x554
  406e46:	428a      	cmp	r2, r1
  406e48:	d805      	bhi.n	406e56 <_malloc_r+0x55a>
  406e4a:	0c9a      	lsrs	r2, r3, #18
  406e4c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406e50:	0049      	lsls	r1, r1, #1
  406e52:	327c      	adds	r2, #124	; 0x7c
  406e54:	e714      	b.n	406c80 <_malloc_r+0x384>
  406e56:	21fe      	movs	r1, #254	; 0xfe
  406e58:	227e      	movs	r2, #126	; 0x7e
  406e5a:	e711      	b.n	406c80 <_malloc_r+0x384>
  406e5c:	687b      	ldr	r3, [r7, #4]
  406e5e:	e784      	b.n	406d6a <_malloc_r+0x46e>
  406e60:	08e8      	lsrs	r0, r5, #3
  406e62:	1c43      	adds	r3, r0, #1
  406e64:	005b      	lsls	r3, r3, #1
  406e66:	e5f8      	b.n	406a5a <_malloc_r+0x15e>
  406e68:	2000047c 	.word	0x2000047c
  406e6c:	00000000 	.word	0x00000000

00406e70 <memchr>:
  406e70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406e74:	2a10      	cmp	r2, #16
  406e76:	db2b      	blt.n	406ed0 <memchr+0x60>
  406e78:	f010 0f07 	tst.w	r0, #7
  406e7c:	d008      	beq.n	406e90 <memchr+0x20>
  406e7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406e82:	3a01      	subs	r2, #1
  406e84:	428b      	cmp	r3, r1
  406e86:	d02d      	beq.n	406ee4 <memchr+0x74>
  406e88:	f010 0f07 	tst.w	r0, #7
  406e8c:	b342      	cbz	r2, 406ee0 <memchr+0x70>
  406e8e:	d1f6      	bne.n	406e7e <memchr+0xe>
  406e90:	b4f0      	push	{r4, r5, r6, r7}
  406e92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406e96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406e9a:	f022 0407 	bic.w	r4, r2, #7
  406e9e:	f07f 0700 	mvns.w	r7, #0
  406ea2:	2300      	movs	r3, #0
  406ea4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406ea8:	3c08      	subs	r4, #8
  406eaa:	ea85 0501 	eor.w	r5, r5, r1
  406eae:	ea86 0601 	eor.w	r6, r6, r1
  406eb2:	fa85 f547 	uadd8	r5, r5, r7
  406eb6:	faa3 f587 	sel	r5, r3, r7
  406eba:	fa86 f647 	uadd8	r6, r6, r7
  406ebe:	faa5 f687 	sel	r6, r5, r7
  406ec2:	b98e      	cbnz	r6, 406ee8 <memchr+0x78>
  406ec4:	d1ee      	bne.n	406ea4 <memchr+0x34>
  406ec6:	bcf0      	pop	{r4, r5, r6, r7}
  406ec8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406ecc:	f002 0207 	and.w	r2, r2, #7
  406ed0:	b132      	cbz	r2, 406ee0 <memchr+0x70>
  406ed2:	f810 3b01 	ldrb.w	r3, [r0], #1
  406ed6:	3a01      	subs	r2, #1
  406ed8:	ea83 0301 	eor.w	r3, r3, r1
  406edc:	b113      	cbz	r3, 406ee4 <memchr+0x74>
  406ede:	d1f8      	bne.n	406ed2 <memchr+0x62>
  406ee0:	2000      	movs	r0, #0
  406ee2:	4770      	bx	lr
  406ee4:	3801      	subs	r0, #1
  406ee6:	4770      	bx	lr
  406ee8:	2d00      	cmp	r5, #0
  406eea:	bf06      	itte	eq
  406eec:	4635      	moveq	r5, r6
  406eee:	3803      	subeq	r0, #3
  406ef0:	3807      	subne	r0, #7
  406ef2:	f015 0f01 	tst.w	r5, #1
  406ef6:	d107      	bne.n	406f08 <memchr+0x98>
  406ef8:	3001      	adds	r0, #1
  406efa:	f415 7f80 	tst.w	r5, #256	; 0x100
  406efe:	bf02      	ittt	eq
  406f00:	3001      	addeq	r0, #1
  406f02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406f06:	3001      	addeq	r0, #1
  406f08:	bcf0      	pop	{r4, r5, r6, r7}
  406f0a:	3801      	subs	r0, #1
  406f0c:	4770      	bx	lr
  406f0e:	bf00      	nop

00406f10 <memcpy>:
  406f10:	4684      	mov	ip, r0
  406f12:	ea41 0300 	orr.w	r3, r1, r0
  406f16:	f013 0303 	ands.w	r3, r3, #3
  406f1a:	d16d      	bne.n	406ff8 <memcpy+0xe8>
  406f1c:	3a40      	subs	r2, #64	; 0x40
  406f1e:	d341      	bcc.n	406fa4 <memcpy+0x94>
  406f20:	f851 3b04 	ldr.w	r3, [r1], #4
  406f24:	f840 3b04 	str.w	r3, [r0], #4
  406f28:	f851 3b04 	ldr.w	r3, [r1], #4
  406f2c:	f840 3b04 	str.w	r3, [r0], #4
  406f30:	f851 3b04 	ldr.w	r3, [r1], #4
  406f34:	f840 3b04 	str.w	r3, [r0], #4
  406f38:	f851 3b04 	ldr.w	r3, [r1], #4
  406f3c:	f840 3b04 	str.w	r3, [r0], #4
  406f40:	f851 3b04 	ldr.w	r3, [r1], #4
  406f44:	f840 3b04 	str.w	r3, [r0], #4
  406f48:	f851 3b04 	ldr.w	r3, [r1], #4
  406f4c:	f840 3b04 	str.w	r3, [r0], #4
  406f50:	f851 3b04 	ldr.w	r3, [r1], #4
  406f54:	f840 3b04 	str.w	r3, [r0], #4
  406f58:	f851 3b04 	ldr.w	r3, [r1], #4
  406f5c:	f840 3b04 	str.w	r3, [r0], #4
  406f60:	f851 3b04 	ldr.w	r3, [r1], #4
  406f64:	f840 3b04 	str.w	r3, [r0], #4
  406f68:	f851 3b04 	ldr.w	r3, [r1], #4
  406f6c:	f840 3b04 	str.w	r3, [r0], #4
  406f70:	f851 3b04 	ldr.w	r3, [r1], #4
  406f74:	f840 3b04 	str.w	r3, [r0], #4
  406f78:	f851 3b04 	ldr.w	r3, [r1], #4
  406f7c:	f840 3b04 	str.w	r3, [r0], #4
  406f80:	f851 3b04 	ldr.w	r3, [r1], #4
  406f84:	f840 3b04 	str.w	r3, [r0], #4
  406f88:	f851 3b04 	ldr.w	r3, [r1], #4
  406f8c:	f840 3b04 	str.w	r3, [r0], #4
  406f90:	f851 3b04 	ldr.w	r3, [r1], #4
  406f94:	f840 3b04 	str.w	r3, [r0], #4
  406f98:	f851 3b04 	ldr.w	r3, [r1], #4
  406f9c:	f840 3b04 	str.w	r3, [r0], #4
  406fa0:	3a40      	subs	r2, #64	; 0x40
  406fa2:	d2bd      	bcs.n	406f20 <memcpy+0x10>
  406fa4:	3230      	adds	r2, #48	; 0x30
  406fa6:	d311      	bcc.n	406fcc <memcpy+0xbc>
  406fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fac:	f840 3b04 	str.w	r3, [r0], #4
  406fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fb4:	f840 3b04 	str.w	r3, [r0], #4
  406fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fbc:	f840 3b04 	str.w	r3, [r0], #4
  406fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fc4:	f840 3b04 	str.w	r3, [r0], #4
  406fc8:	3a10      	subs	r2, #16
  406fca:	d2ed      	bcs.n	406fa8 <memcpy+0x98>
  406fcc:	320c      	adds	r2, #12
  406fce:	d305      	bcc.n	406fdc <memcpy+0xcc>
  406fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fd4:	f840 3b04 	str.w	r3, [r0], #4
  406fd8:	3a04      	subs	r2, #4
  406fda:	d2f9      	bcs.n	406fd0 <memcpy+0xc0>
  406fdc:	3204      	adds	r2, #4
  406fde:	d008      	beq.n	406ff2 <memcpy+0xe2>
  406fe0:	07d2      	lsls	r2, r2, #31
  406fe2:	bf1c      	itt	ne
  406fe4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406fe8:	f800 3b01 	strbne.w	r3, [r0], #1
  406fec:	d301      	bcc.n	406ff2 <memcpy+0xe2>
  406fee:	880b      	ldrh	r3, [r1, #0]
  406ff0:	8003      	strh	r3, [r0, #0]
  406ff2:	4660      	mov	r0, ip
  406ff4:	4770      	bx	lr
  406ff6:	bf00      	nop
  406ff8:	2a08      	cmp	r2, #8
  406ffa:	d313      	bcc.n	407024 <memcpy+0x114>
  406ffc:	078b      	lsls	r3, r1, #30
  406ffe:	d08d      	beq.n	406f1c <memcpy+0xc>
  407000:	f010 0303 	ands.w	r3, r0, #3
  407004:	d08a      	beq.n	406f1c <memcpy+0xc>
  407006:	f1c3 0304 	rsb	r3, r3, #4
  40700a:	1ad2      	subs	r2, r2, r3
  40700c:	07db      	lsls	r3, r3, #31
  40700e:	bf1c      	itt	ne
  407010:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407014:	f800 3b01 	strbne.w	r3, [r0], #1
  407018:	d380      	bcc.n	406f1c <memcpy+0xc>
  40701a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40701e:	f820 3b02 	strh.w	r3, [r0], #2
  407022:	e77b      	b.n	406f1c <memcpy+0xc>
  407024:	3a04      	subs	r2, #4
  407026:	d3d9      	bcc.n	406fdc <memcpy+0xcc>
  407028:	3a01      	subs	r2, #1
  40702a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40702e:	f800 3b01 	strb.w	r3, [r0], #1
  407032:	d2f9      	bcs.n	407028 <memcpy+0x118>
  407034:	780b      	ldrb	r3, [r1, #0]
  407036:	7003      	strb	r3, [r0, #0]
  407038:	784b      	ldrb	r3, [r1, #1]
  40703a:	7043      	strb	r3, [r0, #1]
  40703c:	788b      	ldrb	r3, [r1, #2]
  40703e:	7083      	strb	r3, [r0, #2]
  407040:	4660      	mov	r0, ip
  407042:	4770      	bx	lr

00407044 <__malloc_lock>:
  407044:	4770      	bx	lr
  407046:	bf00      	nop

00407048 <__malloc_unlock>:
  407048:	4770      	bx	lr
  40704a:	bf00      	nop

0040704c <_Balloc>:
  40704c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40704e:	b570      	push	{r4, r5, r6, lr}
  407050:	4605      	mov	r5, r0
  407052:	460c      	mov	r4, r1
  407054:	b14b      	cbz	r3, 40706a <_Balloc+0x1e>
  407056:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40705a:	b180      	cbz	r0, 40707e <_Balloc+0x32>
  40705c:	6802      	ldr	r2, [r0, #0]
  40705e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  407062:	2300      	movs	r3, #0
  407064:	6103      	str	r3, [r0, #16]
  407066:	60c3      	str	r3, [r0, #12]
  407068:	bd70      	pop	{r4, r5, r6, pc}
  40706a:	2221      	movs	r2, #33	; 0x21
  40706c:	2104      	movs	r1, #4
  40706e:	f000 fc39 	bl	4078e4 <_calloc_r>
  407072:	64e8      	str	r0, [r5, #76]	; 0x4c
  407074:	4603      	mov	r3, r0
  407076:	2800      	cmp	r0, #0
  407078:	d1ed      	bne.n	407056 <_Balloc+0xa>
  40707a:	2000      	movs	r0, #0
  40707c:	bd70      	pop	{r4, r5, r6, pc}
  40707e:	2101      	movs	r1, #1
  407080:	fa01 f604 	lsl.w	r6, r1, r4
  407084:	1d72      	adds	r2, r6, #5
  407086:	4628      	mov	r0, r5
  407088:	0092      	lsls	r2, r2, #2
  40708a:	f000 fc2b 	bl	4078e4 <_calloc_r>
  40708e:	2800      	cmp	r0, #0
  407090:	d0f3      	beq.n	40707a <_Balloc+0x2e>
  407092:	6044      	str	r4, [r0, #4]
  407094:	6086      	str	r6, [r0, #8]
  407096:	e7e4      	b.n	407062 <_Balloc+0x16>

00407098 <_Bfree>:
  407098:	b131      	cbz	r1, 4070a8 <_Bfree+0x10>
  40709a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40709c:	684a      	ldr	r2, [r1, #4]
  40709e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4070a2:	6008      	str	r0, [r1, #0]
  4070a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4070a8:	4770      	bx	lr
  4070aa:	bf00      	nop

004070ac <__multadd>:
  4070ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4070ae:	690c      	ldr	r4, [r1, #16]
  4070b0:	b083      	sub	sp, #12
  4070b2:	460d      	mov	r5, r1
  4070b4:	4606      	mov	r6, r0
  4070b6:	f101 0e14 	add.w	lr, r1, #20
  4070ba:	2700      	movs	r7, #0
  4070bc:	f8de 0000 	ldr.w	r0, [lr]
  4070c0:	b281      	uxth	r1, r0
  4070c2:	fb02 3101 	mla	r1, r2, r1, r3
  4070c6:	0c0b      	lsrs	r3, r1, #16
  4070c8:	0c00      	lsrs	r0, r0, #16
  4070ca:	fb02 3300 	mla	r3, r2, r0, r3
  4070ce:	b289      	uxth	r1, r1
  4070d0:	3701      	adds	r7, #1
  4070d2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  4070d6:	42bc      	cmp	r4, r7
  4070d8:	f84e 1b04 	str.w	r1, [lr], #4
  4070dc:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4070e0:	dcec      	bgt.n	4070bc <__multadd+0x10>
  4070e2:	b13b      	cbz	r3, 4070f4 <__multadd+0x48>
  4070e4:	68aa      	ldr	r2, [r5, #8]
  4070e6:	4294      	cmp	r4, r2
  4070e8:	da07      	bge.n	4070fa <__multadd+0x4e>
  4070ea:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4070ee:	3401      	adds	r4, #1
  4070f0:	6153      	str	r3, [r2, #20]
  4070f2:	612c      	str	r4, [r5, #16]
  4070f4:	4628      	mov	r0, r5
  4070f6:	b003      	add	sp, #12
  4070f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4070fa:	6869      	ldr	r1, [r5, #4]
  4070fc:	9301      	str	r3, [sp, #4]
  4070fe:	3101      	adds	r1, #1
  407100:	4630      	mov	r0, r6
  407102:	f7ff ffa3 	bl	40704c <_Balloc>
  407106:	692a      	ldr	r2, [r5, #16]
  407108:	3202      	adds	r2, #2
  40710a:	f105 010c 	add.w	r1, r5, #12
  40710e:	4607      	mov	r7, r0
  407110:	0092      	lsls	r2, r2, #2
  407112:	300c      	adds	r0, #12
  407114:	f7ff fefc 	bl	406f10 <memcpy>
  407118:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40711a:	6869      	ldr	r1, [r5, #4]
  40711c:	9b01      	ldr	r3, [sp, #4]
  40711e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407122:	6028      	str	r0, [r5, #0]
  407124:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407128:	463d      	mov	r5, r7
  40712a:	e7de      	b.n	4070ea <__multadd+0x3e>

0040712c <__hi0bits>:
  40712c:	0c03      	lsrs	r3, r0, #16
  40712e:	041b      	lsls	r3, r3, #16
  407130:	b9b3      	cbnz	r3, 407160 <__hi0bits+0x34>
  407132:	0400      	lsls	r0, r0, #16
  407134:	2310      	movs	r3, #16
  407136:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40713a:	bf04      	itt	eq
  40713c:	0200      	lsleq	r0, r0, #8
  40713e:	3308      	addeq	r3, #8
  407140:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  407144:	bf04      	itt	eq
  407146:	0100      	lsleq	r0, r0, #4
  407148:	3304      	addeq	r3, #4
  40714a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40714e:	bf04      	itt	eq
  407150:	0080      	lsleq	r0, r0, #2
  407152:	3302      	addeq	r3, #2
  407154:	2800      	cmp	r0, #0
  407156:	db07      	blt.n	407168 <__hi0bits+0x3c>
  407158:	0042      	lsls	r2, r0, #1
  40715a:	d403      	bmi.n	407164 <__hi0bits+0x38>
  40715c:	2020      	movs	r0, #32
  40715e:	4770      	bx	lr
  407160:	2300      	movs	r3, #0
  407162:	e7e8      	b.n	407136 <__hi0bits+0xa>
  407164:	1c58      	adds	r0, r3, #1
  407166:	4770      	bx	lr
  407168:	4618      	mov	r0, r3
  40716a:	4770      	bx	lr

0040716c <__lo0bits>:
  40716c:	6803      	ldr	r3, [r0, #0]
  40716e:	f013 0207 	ands.w	r2, r3, #7
  407172:	d007      	beq.n	407184 <__lo0bits+0x18>
  407174:	07d9      	lsls	r1, r3, #31
  407176:	d420      	bmi.n	4071ba <__lo0bits+0x4e>
  407178:	079a      	lsls	r2, r3, #30
  40717a:	d420      	bmi.n	4071be <__lo0bits+0x52>
  40717c:	089b      	lsrs	r3, r3, #2
  40717e:	6003      	str	r3, [r0, #0]
  407180:	2002      	movs	r0, #2
  407182:	4770      	bx	lr
  407184:	b299      	uxth	r1, r3
  407186:	b909      	cbnz	r1, 40718c <__lo0bits+0x20>
  407188:	0c1b      	lsrs	r3, r3, #16
  40718a:	2210      	movs	r2, #16
  40718c:	f013 0fff 	tst.w	r3, #255	; 0xff
  407190:	bf04      	itt	eq
  407192:	0a1b      	lsreq	r3, r3, #8
  407194:	3208      	addeq	r2, #8
  407196:	0719      	lsls	r1, r3, #28
  407198:	bf04      	itt	eq
  40719a:	091b      	lsreq	r3, r3, #4
  40719c:	3204      	addeq	r2, #4
  40719e:	0799      	lsls	r1, r3, #30
  4071a0:	bf04      	itt	eq
  4071a2:	089b      	lsreq	r3, r3, #2
  4071a4:	3202      	addeq	r2, #2
  4071a6:	07d9      	lsls	r1, r3, #31
  4071a8:	d404      	bmi.n	4071b4 <__lo0bits+0x48>
  4071aa:	085b      	lsrs	r3, r3, #1
  4071ac:	d101      	bne.n	4071b2 <__lo0bits+0x46>
  4071ae:	2020      	movs	r0, #32
  4071b0:	4770      	bx	lr
  4071b2:	3201      	adds	r2, #1
  4071b4:	6003      	str	r3, [r0, #0]
  4071b6:	4610      	mov	r0, r2
  4071b8:	4770      	bx	lr
  4071ba:	2000      	movs	r0, #0
  4071bc:	4770      	bx	lr
  4071be:	085b      	lsrs	r3, r3, #1
  4071c0:	6003      	str	r3, [r0, #0]
  4071c2:	2001      	movs	r0, #1
  4071c4:	4770      	bx	lr
  4071c6:	bf00      	nop

004071c8 <__i2b>:
  4071c8:	b510      	push	{r4, lr}
  4071ca:	460c      	mov	r4, r1
  4071cc:	2101      	movs	r1, #1
  4071ce:	f7ff ff3d 	bl	40704c <_Balloc>
  4071d2:	2201      	movs	r2, #1
  4071d4:	6144      	str	r4, [r0, #20]
  4071d6:	6102      	str	r2, [r0, #16]
  4071d8:	bd10      	pop	{r4, pc}
  4071da:	bf00      	nop

004071dc <__multiply>:
  4071dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4071e0:	690d      	ldr	r5, [r1, #16]
  4071e2:	6917      	ldr	r7, [r2, #16]
  4071e4:	42bd      	cmp	r5, r7
  4071e6:	b083      	sub	sp, #12
  4071e8:	460c      	mov	r4, r1
  4071ea:	4616      	mov	r6, r2
  4071ec:	da04      	bge.n	4071f8 <__multiply+0x1c>
  4071ee:	462a      	mov	r2, r5
  4071f0:	4634      	mov	r4, r6
  4071f2:	463d      	mov	r5, r7
  4071f4:	460e      	mov	r6, r1
  4071f6:	4617      	mov	r7, r2
  4071f8:	68a3      	ldr	r3, [r4, #8]
  4071fa:	6861      	ldr	r1, [r4, #4]
  4071fc:	eb05 0807 	add.w	r8, r5, r7
  407200:	4598      	cmp	r8, r3
  407202:	bfc8      	it	gt
  407204:	3101      	addgt	r1, #1
  407206:	f7ff ff21 	bl	40704c <_Balloc>
  40720a:	f100 0c14 	add.w	ip, r0, #20
  40720e:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  407212:	45cc      	cmp	ip, r9
  407214:	9000      	str	r0, [sp, #0]
  407216:	d205      	bcs.n	407224 <__multiply+0x48>
  407218:	4663      	mov	r3, ip
  40721a:	2100      	movs	r1, #0
  40721c:	f843 1b04 	str.w	r1, [r3], #4
  407220:	4599      	cmp	r9, r3
  407222:	d8fb      	bhi.n	40721c <__multiply+0x40>
  407224:	f106 0214 	add.w	r2, r6, #20
  407228:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40722c:	f104 0314 	add.w	r3, r4, #20
  407230:	4552      	cmp	r2, sl
  407232:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  407236:	d254      	bcs.n	4072e2 <__multiply+0x106>
  407238:	f8cd 9004 	str.w	r9, [sp, #4]
  40723c:	4699      	mov	r9, r3
  40723e:	f852 3b04 	ldr.w	r3, [r2], #4
  407242:	fa1f fb83 	uxth.w	fp, r3
  407246:	f1bb 0f00 	cmp.w	fp, #0
  40724a:	d020      	beq.n	40728e <__multiply+0xb2>
  40724c:	2000      	movs	r0, #0
  40724e:	464f      	mov	r7, r9
  407250:	4666      	mov	r6, ip
  407252:	4605      	mov	r5, r0
  407254:	e000      	b.n	407258 <__multiply+0x7c>
  407256:	461e      	mov	r6, r3
  407258:	f857 4b04 	ldr.w	r4, [r7], #4
  40725c:	6830      	ldr	r0, [r6, #0]
  40725e:	b2a1      	uxth	r1, r4
  407260:	b283      	uxth	r3, r0
  407262:	fb0b 3101 	mla	r1, fp, r1, r3
  407266:	0c24      	lsrs	r4, r4, #16
  407268:	0c00      	lsrs	r0, r0, #16
  40726a:	194b      	adds	r3, r1, r5
  40726c:	fb0b 0004 	mla	r0, fp, r4, r0
  407270:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  407274:	b299      	uxth	r1, r3
  407276:	4633      	mov	r3, r6
  407278:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40727c:	45be      	cmp	lr, r7
  40727e:	ea4f 4510 	mov.w	r5, r0, lsr #16
  407282:	f843 1b04 	str.w	r1, [r3], #4
  407286:	d8e6      	bhi.n	407256 <__multiply+0x7a>
  407288:	6075      	str	r5, [r6, #4]
  40728a:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40728e:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  407292:	d020      	beq.n	4072d6 <__multiply+0xfa>
  407294:	f8dc 3000 	ldr.w	r3, [ip]
  407298:	4667      	mov	r7, ip
  40729a:	4618      	mov	r0, r3
  40729c:	464d      	mov	r5, r9
  40729e:	2100      	movs	r1, #0
  4072a0:	e000      	b.n	4072a4 <__multiply+0xc8>
  4072a2:	4637      	mov	r7, r6
  4072a4:	882c      	ldrh	r4, [r5, #0]
  4072a6:	0c00      	lsrs	r0, r0, #16
  4072a8:	fb0b 0004 	mla	r0, fp, r4, r0
  4072ac:	4401      	add	r1, r0
  4072ae:	b29c      	uxth	r4, r3
  4072b0:	463e      	mov	r6, r7
  4072b2:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  4072b6:	f846 3b04 	str.w	r3, [r6], #4
  4072ba:	6878      	ldr	r0, [r7, #4]
  4072bc:	f855 4b04 	ldr.w	r4, [r5], #4
  4072c0:	b283      	uxth	r3, r0
  4072c2:	0c24      	lsrs	r4, r4, #16
  4072c4:	fb0b 3404 	mla	r4, fp, r4, r3
  4072c8:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  4072cc:	45ae      	cmp	lr, r5
  4072ce:	ea4f 4113 	mov.w	r1, r3, lsr #16
  4072d2:	d8e6      	bhi.n	4072a2 <__multiply+0xc6>
  4072d4:	607b      	str	r3, [r7, #4]
  4072d6:	4592      	cmp	sl, r2
  4072d8:	f10c 0c04 	add.w	ip, ip, #4
  4072dc:	d8af      	bhi.n	40723e <__multiply+0x62>
  4072de:	f8dd 9004 	ldr.w	r9, [sp, #4]
  4072e2:	f1b8 0f00 	cmp.w	r8, #0
  4072e6:	dd0b      	ble.n	407300 <__multiply+0x124>
  4072e8:	f859 3c04 	ldr.w	r3, [r9, #-4]
  4072ec:	f1a9 0904 	sub.w	r9, r9, #4
  4072f0:	b11b      	cbz	r3, 4072fa <__multiply+0x11e>
  4072f2:	e005      	b.n	407300 <__multiply+0x124>
  4072f4:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  4072f8:	b913      	cbnz	r3, 407300 <__multiply+0x124>
  4072fa:	f1b8 0801 	subs.w	r8, r8, #1
  4072fe:	d1f9      	bne.n	4072f4 <__multiply+0x118>
  407300:	9800      	ldr	r0, [sp, #0]
  407302:	f8c0 8010 	str.w	r8, [r0, #16]
  407306:	b003      	add	sp, #12
  407308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040730c <__pow5mult>:
  40730c:	f012 0303 	ands.w	r3, r2, #3
  407310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407314:	4614      	mov	r4, r2
  407316:	4607      	mov	r7, r0
  407318:	d12e      	bne.n	407378 <__pow5mult+0x6c>
  40731a:	460e      	mov	r6, r1
  40731c:	10a4      	asrs	r4, r4, #2
  40731e:	d01c      	beq.n	40735a <__pow5mult+0x4e>
  407320:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  407322:	b395      	cbz	r5, 40738a <__pow5mult+0x7e>
  407324:	07e3      	lsls	r3, r4, #31
  407326:	f04f 0800 	mov.w	r8, #0
  40732a:	d406      	bmi.n	40733a <__pow5mult+0x2e>
  40732c:	1064      	asrs	r4, r4, #1
  40732e:	d014      	beq.n	40735a <__pow5mult+0x4e>
  407330:	6828      	ldr	r0, [r5, #0]
  407332:	b1a8      	cbz	r0, 407360 <__pow5mult+0x54>
  407334:	4605      	mov	r5, r0
  407336:	07e3      	lsls	r3, r4, #31
  407338:	d5f8      	bpl.n	40732c <__pow5mult+0x20>
  40733a:	462a      	mov	r2, r5
  40733c:	4631      	mov	r1, r6
  40733e:	4638      	mov	r0, r7
  407340:	f7ff ff4c 	bl	4071dc <__multiply>
  407344:	b1b6      	cbz	r6, 407374 <__pow5mult+0x68>
  407346:	6872      	ldr	r2, [r6, #4]
  407348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40734a:	1064      	asrs	r4, r4, #1
  40734c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407350:	6031      	str	r1, [r6, #0]
  407352:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407356:	4606      	mov	r6, r0
  407358:	d1ea      	bne.n	407330 <__pow5mult+0x24>
  40735a:	4630      	mov	r0, r6
  40735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407360:	462a      	mov	r2, r5
  407362:	4629      	mov	r1, r5
  407364:	4638      	mov	r0, r7
  407366:	f7ff ff39 	bl	4071dc <__multiply>
  40736a:	6028      	str	r0, [r5, #0]
  40736c:	f8c0 8000 	str.w	r8, [r0]
  407370:	4605      	mov	r5, r0
  407372:	e7e0      	b.n	407336 <__pow5mult+0x2a>
  407374:	4606      	mov	r6, r0
  407376:	e7d9      	b.n	40732c <__pow5mult+0x20>
  407378:	1e5a      	subs	r2, r3, #1
  40737a:	4d0b      	ldr	r5, [pc, #44]	; (4073a8 <__pow5mult+0x9c>)
  40737c:	2300      	movs	r3, #0
  40737e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407382:	f7ff fe93 	bl	4070ac <__multadd>
  407386:	4606      	mov	r6, r0
  407388:	e7c8      	b.n	40731c <__pow5mult+0x10>
  40738a:	2101      	movs	r1, #1
  40738c:	4638      	mov	r0, r7
  40738e:	f7ff fe5d 	bl	40704c <_Balloc>
  407392:	f240 2171 	movw	r1, #625	; 0x271
  407396:	2201      	movs	r2, #1
  407398:	2300      	movs	r3, #0
  40739a:	6141      	str	r1, [r0, #20]
  40739c:	6102      	str	r2, [r0, #16]
  40739e:	4605      	mov	r5, r0
  4073a0:	64b8      	str	r0, [r7, #72]	; 0x48
  4073a2:	6003      	str	r3, [r0, #0]
  4073a4:	e7be      	b.n	407324 <__pow5mult+0x18>
  4073a6:	bf00      	nop
  4073a8:	00408d00 	.word	0x00408d00

004073ac <__lshift>:
  4073ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4073b0:	4691      	mov	r9, r2
  4073b2:	690a      	ldr	r2, [r1, #16]
  4073b4:	688b      	ldr	r3, [r1, #8]
  4073b6:	ea4f 1469 	mov.w	r4, r9, asr #5
  4073ba:	eb04 0802 	add.w	r8, r4, r2
  4073be:	f108 0501 	add.w	r5, r8, #1
  4073c2:	429d      	cmp	r5, r3
  4073c4:	460e      	mov	r6, r1
  4073c6:	4682      	mov	sl, r0
  4073c8:	6849      	ldr	r1, [r1, #4]
  4073ca:	dd04      	ble.n	4073d6 <__lshift+0x2a>
  4073cc:	005b      	lsls	r3, r3, #1
  4073ce:	429d      	cmp	r5, r3
  4073d0:	f101 0101 	add.w	r1, r1, #1
  4073d4:	dcfa      	bgt.n	4073cc <__lshift+0x20>
  4073d6:	4650      	mov	r0, sl
  4073d8:	f7ff fe38 	bl	40704c <_Balloc>
  4073dc:	2c00      	cmp	r4, #0
  4073de:	f100 0214 	add.w	r2, r0, #20
  4073e2:	dd38      	ble.n	407456 <__lshift+0xaa>
  4073e4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  4073e8:	2100      	movs	r1, #0
  4073ea:	f842 1b04 	str.w	r1, [r2], #4
  4073ee:	4293      	cmp	r3, r2
  4073f0:	d1fb      	bne.n	4073ea <__lshift+0x3e>
  4073f2:	6934      	ldr	r4, [r6, #16]
  4073f4:	f106 0114 	add.w	r1, r6, #20
  4073f8:	f019 091f 	ands.w	r9, r9, #31
  4073fc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407400:	d021      	beq.n	407446 <__lshift+0x9a>
  407402:	f1c9 0220 	rsb	r2, r9, #32
  407406:	2400      	movs	r4, #0
  407408:	680f      	ldr	r7, [r1, #0]
  40740a:	fa07 fc09 	lsl.w	ip, r7, r9
  40740e:	ea4c 0404 	orr.w	r4, ip, r4
  407412:	469c      	mov	ip, r3
  407414:	f843 4b04 	str.w	r4, [r3], #4
  407418:	f851 4b04 	ldr.w	r4, [r1], #4
  40741c:	458e      	cmp	lr, r1
  40741e:	fa24 f402 	lsr.w	r4, r4, r2
  407422:	d8f1      	bhi.n	407408 <__lshift+0x5c>
  407424:	f8cc 4004 	str.w	r4, [ip, #4]
  407428:	b10c      	cbz	r4, 40742e <__lshift+0x82>
  40742a:	f108 0502 	add.w	r5, r8, #2
  40742e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  407432:	6872      	ldr	r2, [r6, #4]
  407434:	3d01      	subs	r5, #1
  407436:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40743a:	6105      	str	r5, [r0, #16]
  40743c:	6031      	str	r1, [r6, #0]
  40743e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407446:	3b04      	subs	r3, #4
  407448:	f851 2b04 	ldr.w	r2, [r1], #4
  40744c:	f843 2f04 	str.w	r2, [r3, #4]!
  407450:	458e      	cmp	lr, r1
  407452:	d8f9      	bhi.n	407448 <__lshift+0x9c>
  407454:	e7eb      	b.n	40742e <__lshift+0x82>
  407456:	4613      	mov	r3, r2
  407458:	e7cb      	b.n	4073f2 <__lshift+0x46>
  40745a:	bf00      	nop

0040745c <__mcmp>:
  40745c:	6902      	ldr	r2, [r0, #16]
  40745e:	690b      	ldr	r3, [r1, #16]
  407460:	1ad2      	subs	r2, r2, r3
  407462:	d112      	bne.n	40748a <__mcmp+0x2e>
  407464:	009b      	lsls	r3, r3, #2
  407466:	3014      	adds	r0, #20
  407468:	3114      	adds	r1, #20
  40746a:	4419      	add	r1, r3
  40746c:	b410      	push	{r4}
  40746e:	4403      	add	r3, r0
  407470:	e001      	b.n	407476 <__mcmp+0x1a>
  407472:	4298      	cmp	r0, r3
  407474:	d20b      	bcs.n	40748e <__mcmp+0x32>
  407476:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40747a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40747e:	4294      	cmp	r4, r2
  407480:	d0f7      	beq.n	407472 <__mcmp+0x16>
  407482:	d307      	bcc.n	407494 <__mcmp+0x38>
  407484:	2001      	movs	r0, #1
  407486:	bc10      	pop	{r4}
  407488:	4770      	bx	lr
  40748a:	4610      	mov	r0, r2
  40748c:	4770      	bx	lr
  40748e:	2000      	movs	r0, #0
  407490:	bc10      	pop	{r4}
  407492:	4770      	bx	lr
  407494:	f04f 30ff 	mov.w	r0, #4294967295
  407498:	e7f5      	b.n	407486 <__mcmp+0x2a>
  40749a:	bf00      	nop

0040749c <__mdiff>:
  40749c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4074a0:	690b      	ldr	r3, [r1, #16]
  4074a2:	460f      	mov	r7, r1
  4074a4:	6911      	ldr	r1, [r2, #16]
  4074a6:	1a5b      	subs	r3, r3, r1
  4074a8:	2b00      	cmp	r3, #0
  4074aa:	4690      	mov	r8, r2
  4074ac:	d117      	bne.n	4074de <__mdiff+0x42>
  4074ae:	0089      	lsls	r1, r1, #2
  4074b0:	f107 0214 	add.w	r2, r7, #20
  4074b4:	f108 0514 	add.w	r5, r8, #20
  4074b8:	1853      	adds	r3, r2, r1
  4074ba:	4429      	add	r1, r5
  4074bc:	e001      	b.n	4074c2 <__mdiff+0x26>
  4074be:	429a      	cmp	r2, r3
  4074c0:	d25e      	bcs.n	407580 <__mdiff+0xe4>
  4074c2:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  4074c6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4074ca:	42a6      	cmp	r6, r4
  4074cc:	d0f7      	beq.n	4074be <__mdiff+0x22>
  4074ce:	d260      	bcs.n	407592 <__mdiff+0xf6>
  4074d0:	463b      	mov	r3, r7
  4074d2:	4614      	mov	r4, r2
  4074d4:	4647      	mov	r7, r8
  4074d6:	f04f 0901 	mov.w	r9, #1
  4074da:	4698      	mov	r8, r3
  4074dc:	e006      	b.n	4074ec <__mdiff+0x50>
  4074de:	db5d      	blt.n	40759c <__mdiff+0x100>
  4074e0:	f107 0514 	add.w	r5, r7, #20
  4074e4:	f102 0414 	add.w	r4, r2, #20
  4074e8:	f04f 0900 	mov.w	r9, #0
  4074ec:	6879      	ldr	r1, [r7, #4]
  4074ee:	f7ff fdad 	bl	40704c <_Balloc>
  4074f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4074f6:	693e      	ldr	r6, [r7, #16]
  4074f8:	f8c0 900c 	str.w	r9, [r0, #12]
  4074fc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407500:	46a6      	mov	lr, r4
  407502:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407506:	f100 0414 	add.w	r4, r0, #20
  40750a:	2300      	movs	r3, #0
  40750c:	f85e 1b04 	ldr.w	r1, [lr], #4
  407510:	f855 8b04 	ldr.w	r8, [r5], #4
  407514:	b28a      	uxth	r2, r1
  407516:	fa13 f388 	uxtah	r3, r3, r8
  40751a:	0c09      	lsrs	r1, r1, #16
  40751c:	1a9a      	subs	r2, r3, r2
  40751e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407522:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407526:	b292      	uxth	r2, r2
  407528:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40752c:	45f4      	cmp	ip, lr
  40752e:	f844 2b04 	str.w	r2, [r4], #4
  407532:	ea4f 4323 	mov.w	r3, r3, asr #16
  407536:	d8e9      	bhi.n	40750c <__mdiff+0x70>
  407538:	42af      	cmp	r7, r5
  40753a:	d917      	bls.n	40756c <__mdiff+0xd0>
  40753c:	46a4      	mov	ip, r4
  40753e:	4629      	mov	r1, r5
  407540:	f851 eb04 	ldr.w	lr, [r1], #4
  407544:	fa13 f28e 	uxtah	r2, r3, lr
  407548:	1413      	asrs	r3, r2, #16
  40754a:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40754e:	b292      	uxth	r2, r2
  407550:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407554:	428f      	cmp	r7, r1
  407556:	f84c 2b04 	str.w	r2, [ip], #4
  40755a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40755e:	d8ef      	bhi.n	407540 <__mdiff+0xa4>
  407560:	43ed      	mvns	r5, r5
  407562:	443d      	add	r5, r7
  407564:	f025 0503 	bic.w	r5, r5, #3
  407568:	3504      	adds	r5, #4
  40756a:	442c      	add	r4, r5
  40756c:	3c04      	subs	r4, #4
  40756e:	b922      	cbnz	r2, 40757a <__mdiff+0xde>
  407570:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407574:	3e01      	subs	r6, #1
  407576:	2b00      	cmp	r3, #0
  407578:	d0fa      	beq.n	407570 <__mdiff+0xd4>
  40757a:	6106      	str	r6, [r0, #16]
  40757c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407580:	2100      	movs	r1, #0
  407582:	f7ff fd63 	bl	40704c <_Balloc>
  407586:	2201      	movs	r2, #1
  407588:	2300      	movs	r3, #0
  40758a:	6102      	str	r2, [r0, #16]
  40758c:	6143      	str	r3, [r0, #20]
  40758e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407592:	462c      	mov	r4, r5
  407594:	f04f 0900 	mov.w	r9, #0
  407598:	4615      	mov	r5, r2
  40759a:	e7a7      	b.n	4074ec <__mdiff+0x50>
  40759c:	463b      	mov	r3, r7
  40759e:	f107 0414 	add.w	r4, r7, #20
  4075a2:	f108 0514 	add.w	r5, r8, #20
  4075a6:	4647      	mov	r7, r8
  4075a8:	f04f 0901 	mov.w	r9, #1
  4075ac:	4698      	mov	r8, r3
  4075ae:	e79d      	b.n	4074ec <__mdiff+0x50>

004075b0 <__d2b>:
  4075b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4075b4:	b082      	sub	sp, #8
  4075b6:	2101      	movs	r1, #1
  4075b8:	461c      	mov	r4, r3
  4075ba:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4075be:	4615      	mov	r5, r2
  4075c0:	9e08      	ldr	r6, [sp, #32]
  4075c2:	f7ff fd43 	bl	40704c <_Balloc>
  4075c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4075ca:	4680      	mov	r8, r0
  4075cc:	b10f      	cbz	r7, 4075d2 <__d2b+0x22>
  4075ce:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4075d2:	9401      	str	r4, [sp, #4]
  4075d4:	b31d      	cbz	r5, 40761e <__d2b+0x6e>
  4075d6:	a802      	add	r0, sp, #8
  4075d8:	f840 5d08 	str.w	r5, [r0, #-8]!
  4075dc:	f7ff fdc6 	bl	40716c <__lo0bits>
  4075e0:	2800      	cmp	r0, #0
  4075e2:	d134      	bne.n	40764e <__d2b+0x9e>
  4075e4:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4075e8:	f8c8 2014 	str.w	r2, [r8, #20]
  4075ec:	2b00      	cmp	r3, #0
  4075ee:	bf0c      	ite	eq
  4075f0:	2101      	moveq	r1, #1
  4075f2:	2102      	movne	r1, #2
  4075f4:	f8c8 3018 	str.w	r3, [r8, #24]
  4075f8:	f8c8 1010 	str.w	r1, [r8, #16]
  4075fc:	b9df      	cbnz	r7, 407636 <__d2b+0x86>
  4075fe:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407602:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407606:	6030      	str	r0, [r6, #0]
  407608:	6918      	ldr	r0, [r3, #16]
  40760a:	f7ff fd8f 	bl	40712c <__hi0bits>
  40760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407610:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407614:	6018      	str	r0, [r3, #0]
  407616:	4640      	mov	r0, r8
  407618:	b002      	add	sp, #8
  40761a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40761e:	a801      	add	r0, sp, #4
  407620:	f7ff fda4 	bl	40716c <__lo0bits>
  407624:	9b01      	ldr	r3, [sp, #4]
  407626:	f8c8 3014 	str.w	r3, [r8, #20]
  40762a:	2101      	movs	r1, #1
  40762c:	3020      	adds	r0, #32
  40762e:	f8c8 1010 	str.w	r1, [r8, #16]
  407632:	2f00      	cmp	r7, #0
  407634:	d0e3      	beq.n	4075fe <__d2b+0x4e>
  407636:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407638:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40763c:	4407      	add	r7, r0
  40763e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407642:	6037      	str	r7, [r6, #0]
  407644:	6018      	str	r0, [r3, #0]
  407646:	4640      	mov	r0, r8
  407648:	b002      	add	sp, #8
  40764a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40764e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407652:	f1c0 0120 	rsb	r1, r0, #32
  407656:	fa03 f101 	lsl.w	r1, r3, r1
  40765a:	430a      	orrs	r2, r1
  40765c:	40c3      	lsrs	r3, r0
  40765e:	9301      	str	r3, [sp, #4]
  407660:	f8c8 2014 	str.w	r2, [r8, #20]
  407664:	e7c2      	b.n	4075ec <__d2b+0x3c>
  407666:	bf00      	nop

00407668 <_sbrk_r>:
  407668:	b538      	push	{r3, r4, r5, lr}
  40766a:	4c07      	ldr	r4, [pc, #28]	; (407688 <_sbrk_r+0x20>)
  40766c:	2300      	movs	r3, #0
  40766e:	4605      	mov	r5, r0
  407670:	4608      	mov	r0, r1
  407672:	6023      	str	r3, [r4, #0]
  407674:	f7fa ffa8 	bl	4025c8 <_sbrk>
  407678:	1c43      	adds	r3, r0, #1
  40767a:	d000      	beq.n	40767e <_sbrk_r+0x16>
  40767c:	bd38      	pop	{r3, r4, r5, pc}
  40767e:	6823      	ldr	r3, [r4, #0]
  407680:	2b00      	cmp	r3, #0
  407682:	d0fb      	beq.n	40767c <_sbrk_r+0x14>
  407684:	602b      	str	r3, [r5, #0]
  407686:	bd38      	pop	{r3, r4, r5, pc}
  407688:	20000d38 	.word	0x20000d38

0040768c <__sread>:
  40768c:	b510      	push	{r4, lr}
  40768e:	460c      	mov	r4, r1
  407690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407694:	f000 fa38 	bl	407b08 <_read_r>
  407698:	2800      	cmp	r0, #0
  40769a:	db03      	blt.n	4076a4 <__sread+0x18>
  40769c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40769e:	4403      	add	r3, r0
  4076a0:	6523      	str	r3, [r4, #80]	; 0x50
  4076a2:	bd10      	pop	{r4, pc}
  4076a4:	89a3      	ldrh	r3, [r4, #12]
  4076a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4076aa:	81a3      	strh	r3, [r4, #12]
  4076ac:	bd10      	pop	{r4, pc}
  4076ae:	bf00      	nop

004076b0 <__swrite>:
  4076b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4076b4:	4616      	mov	r6, r2
  4076b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4076ba:	461f      	mov	r7, r3
  4076bc:	05d3      	lsls	r3, r2, #23
  4076be:	460c      	mov	r4, r1
  4076c0:	4605      	mov	r5, r0
  4076c2:	d507      	bpl.n	4076d4 <__swrite+0x24>
  4076c4:	2200      	movs	r2, #0
  4076c6:	2302      	movs	r3, #2
  4076c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4076cc:	f000 f9a2 	bl	407a14 <_lseek_r>
  4076d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4076d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4076d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4076dc:	81a2      	strh	r2, [r4, #12]
  4076de:	463b      	mov	r3, r7
  4076e0:	4632      	mov	r2, r6
  4076e2:	4628      	mov	r0, r5
  4076e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4076e8:	f000 b894 	b.w	407814 <_write_r>

004076ec <__sseek>:
  4076ec:	b510      	push	{r4, lr}
  4076ee:	460c      	mov	r4, r1
  4076f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4076f4:	f000 f98e 	bl	407a14 <_lseek_r>
  4076f8:	89a3      	ldrh	r3, [r4, #12]
  4076fa:	1c42      	adds	r2, r0, #1
  4076fc:	bf0e      	itee	eq
  4076fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407706:	6520      	strne	r0, [r4, #80]	; 0x50
  407708:	81a3      	strh	r3, [r4, #12]
  40770a:	bd10      	pop	{r4, pc}

0040770c <__sclose>:
  40770c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407710:	f000 b918 	b.w	407944 <_close_r>

00407714 <__ssprint_r>:
  407714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407718:	6893      	ldr	r3, [r2, #8]
  40771a:	b083      	sub	sp, #12
  40771c:	4690      	mov	r8, r2
  40771e:	2b00      	cmp	r3, #0
  407720:	d072      	beq.n	407808 <__ssprint_r+0xf4>
  407722:	4683      	mov	fp, r0
  407724:	f04f 0900 	mov.w	r9, #0
  407728:	6816      	ldr	r6, [r2, #0]
  40772a:	6808      	ldr	r0, [r1, #0]
  40772c:	688b      	ldr	r3, [r1, #8]
  40772e:	460d      	mov	r5, r1
  407730:	464c      	mov	r4, r9
  407732:	2c00      	cmp	r4, #0
  407734:	d045      	beq.n	4077c2 <__ssprint_r+0xae>
  407736:	429c      	cmp	r4, r3
  407738:	461f      	mov	r7, r3
  40773a:	469a      	mov	sl, r3
  40773c:	d346      	bcc.n	4077cc <__ssprint_r+0xb8>
  40773e:	89ab      	ldrh	r3, [r5, #12]
  407740:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407744:	d02d      	beq.n	4077a2 <__ssprint_r+0x8e>
  407746:	696f      	ldr	r7, [r5, #20]
  407748:	6929      	ldr	r1, [r5, #16]
  40774a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40774e:	ebc1 0a00 	rsb	sl, r1, r0
  407752:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  407756:	1c60      	adds	r0, r4, #1
  407758:	107f      	asrs	r7, r7, #1
  40775a:	4450      	add	r0, sl
  40775c:	42b8      	cmp	r0, r7
  40775e:	463a      	mov	r2, r7
  407760:	bf84      	itt	hi
  407762:	4607      	movhi	r7, r0
  407764:	463a      	movhi	r2, r7
  407766:	055b      	lsls	r3, r3, #21
  407768:	d533      	bpl.n	4077d2 <__ssprint_r+0xbe>
  40776a:	4611      	mov	r1, r2
  40776c:	4658      	mov	r0, fp
  40776e:	f7ff f8c5 	bl	4068fc <_malloc_r>
  407772:	2800      	cmp	r0, #0
  407774:	d037      	beq.n	4077e6 <__ssprint_r+0xd2>
  407776:	4652      	mov	r2, sl
  407778:	6929      	ldr	r1, [r5, #16]
  40777a:	9001      	str	r0, [sp, #4]
  40777c:	f7ff fbc8 	bl	406f10 <memcpy>
  407780:	89aa      	ldrh	r2, [r5, #12]
  407782:	9b01      	ldr	r3, [sp, #4]
  407784:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40778c:	81aa      	strh	r2, [r5, #12]
  40778e:	ebca 0207 	rsb	r2, sl, r7
  407792:	eb03 000a 	add.w	r0, r3, sl
  407796:	616f      	str	r7, [r5, #20]
  407798:	612b      	str	r3, [r5, #16]
  40779a:	6028      	str	r0, [r5, #0]
  40779c:	60aa      	str	r2, [r5, #8]
  40779e:	4627      	mov	r7, r4
  4077a0:	46a2      	mov	sl, r4
  4077a2:	4652      	mov	r2, sl
  4077a4:	4649      	mov	r1, r9
  4077a6:	f000 f94b 	bl	407a40 <memmove>
  4077aa:	f8d8 2008 	ldr.w	r2, [r8, #8]
  4077ae:	68ab      	ldr	r3, [r5, #8]
  4077b0:	6828      	ldr	r0, [r5, #0]
  4077b2:	1bdb      	subs	r3, r3, r7
  4077b4:	4450      	add	r0, sl
  4077b6:	1b14      	subs	r4, r2, r4
  4077b8:	60ab      	str	r3, [r5, #8]
  4077ba:	6028      	str	r0, [r5, #0]
  4077bc:	f8c8 4008 	str.w	r4, [r8, #8]
  4077c0:	b314      	cbz	r4, 407808 <__ssprint_r+0xf4>
  4077c2:	f8d6 9000 	ldr.w	r9, [r6]
  4077c6:	6874      	ldr	r4, [r6, #4]
  4077c8:	3608      	adds	r6, #8
  4077ca:	e7b2      	b.n	407732 <__ssprint_r+0x1e>
  4077cc:	4627      	mov	r7, r4
  4077ce:	46a2      	mov	sl, r4
  4077d0:	e7e7      	b.n	4077a2 <__ssprint_r+0x8e>
  4077d2:	4658      	mov	r0, fp
  4077d4:	f000 f9ae 	bl	407b34 <_realloc_r>
  4077d8:	4603      	mov	r3, r0
  4077da:	2800      	cmp	r0, #0
  4077dc:	d1d7      	bne.n	40778e <__ssprint_r+0x7a>
  4077de:	6929      	ldr	r1, [r5, #16]
  4077e0:	4658      	mov	r0, fp
  4077e2:	f7fe ff3d 	bl	406660 <_free_r>
  4077e6:	230c      	movs	r3, #12
  4077e8:	f8cb 3000 	str.w	r3, [fp]
  4077ec:	89ab      	ldrh	r3, [r5, #12]
  4077ee:	2200      	movs	r2, #0
  4077f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4077f4:	f04f 30ff 	mov.w	r0, #4294967295
  4077f8:	81ab      	strh	r3, [r5, #12]
  4077fa:	f8c8 2008 	str.w	r2, [r8, #8]
  4077fe:	f8c8 2004 	str.w	r2, [r8, #4]
  407802:	b003      	add	sp, #12
  407804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407808:	2000      	movs	r0, #0
  40780a:	f8c8 0004 	str.w	r0, [r8, #4]
  40780e:	b003      	add	sp, #12
  407810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407814 <_write_r>:
  407814:	b570      	push	{r4, r5, r6, lr}
  407816:	460d      	mov	r5, r1
  407818:	4c08      	ldr	r4, [pc, #32]	; (40783c <_write_r+0x28>)
  40781a:	4611      	mov	r1, r2
  40781c:	4606      	mov	r6, r0
  40781e:	461a      	mov	r2, r3
  407820:	4628      	mov	r0, r5
  407822:	2300      	movs	r3, #0
  407824:	6023      	str	r3, [r4, #0]
  407826:	f7f9 f835 	bl	400894 <_write>
  40782a:	1c43      	adds	r3, r0, #1
  40782c:	d000      	beq.n	407830 <_write_r+0x1c>
  40782e:	bd70      	pop	{r4, r5, r6, pc}
  407830:	6823      	ldr	r3, [r4, #0]
  407832:	2b00      	cmp	r3, #0
  407834:	d0fb      	beq.n	40782e <_write_r+0x1a>
  407836:	6033      	str	r3, [r6, #0]
  407838:	bd70      	pop	{r4, r5, r6, pc}
  40783a:	bf00      	nop
  40783c:	20000d38 	.word	0x20000d38

00407840 <__register_exitproc>:
  407840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407844:	4c25      	ldr	r4, [pc, #148]	; (4078dc <__register_exitproc+0x9c>)
  407846:	6825      	ldr	r5, [r4, #0]
  407848:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40784c:	4606      	mov	r6, r0
  40784e:	4688      	mov	r8, r1
  407850:	4692      	mov	sl, r2
  407852:	4699      	mov	r9, r3
  407854:	b3c4      	cbz	r4, 4078c8 <__register_exitproc+0x88>
  407856:	6860      	ldr	r0, [r4, #4]
  407858:	281f      	cmp	r0, #31
  40785a:	dc17      	bgt.n	40788c <__register_exitproc+0x4c>
  40785c:	1c43      	adds	r3, r0, #1
  40785e:	b176      	cbz	r6, 40787e <__register_exitproc+0x3e>
  407860:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  407864:	2201      	movs	r2, #1
  407866:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40786a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40786e:	4082      	lsls	r2, r0
  407870:	4311      	orrs	r1, r2
  407872:	2e02      	cmp	r6, #2
  407874:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407878:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40787c:	d01e      	beq.n	4078bc <__register_exitproc+0x7c>
  40787e:	3002      	adds	r0, #2
  407880:	6063      	str	r3, [r4, #4]
  407882:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  407886:	2000      	movs	r0, #0
  407888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40788c:	4b14      	ldr	r3, [pc, #80]	; (4078e0 <__register_exitproc+0xa0>)
  40788e:	b303      	cbz	r3, 4078d2 <__register_exitproc+0x92>
  407890:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407894:	f7ff f82a 	bl	4068ec <malloc>
  407898:	4604      	mov	r4, r0
  40789a:	b1d0      	cbz	r0, 4078d2 <__register_exitproc+0x92>
  40789c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4078a0:	2700      	movs	r7, #0
  4078a2:	e880 0088 	stmia.w	r0, {r3, r7}
  4078a6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4078aa:	4638      	mov	r0, r7
  4078ac:	2301      	movs	r3, #1
  4078ae:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4078b2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4078b6:	2e00      	cmp	r6, #0
  4078b8:	d0e1      	beq.n	40787e <__register_exitproc+0x3e>
  4078ba:	e7d1      	b.n	407860 <__register_exitproc+0x20>
  4078bc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4078c0:	430a      	orrs	r2, r1
  4078c2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4078c6:	e7da      	b.n	40787e <__register_exitproc+0x3e>
  4078c8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4078cc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4078d0:	e7c1      	b.n	407856 <__register_exitproc+0x16>
  4078d2:	f04f 30ff 	mov.w	r0, #4294967295
  4078d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4078da:	bf00      	nop
  4078dc:	00408b8c 	.word	0x00408b8c
  4078e0:	004068ed 	.word	0x004068ed

004078e4 <_calloc_r>:
  4078e4:	b510      	push	{r4, lr}
  4078e6:	fb02 f101 	mul.w	r1, r2, r1
  4078ea:	f7ff f807 	bl	4068fc <_malloc_r>
  4078ee:	4604      	mov	r4, r0
  4078f0:	b1d8      	cbz	r0, 40792a <_calloc_r+0x46>
  4078f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4078f6:	f022 0203 	bic.w	r2, r2, #3
  4078fa:	3a04      	subs	r2, #4
  4078fc:	2a24      	cmp	r2, #36	; 0x24
  4078fe:	d818      	bhi.n	407932 <_calloc_r+0x4e>
  407900:	2a13      	cmp	r2, #19
  407902:	d914      	bls.n	40792e <_calloc_r+0x4a>
  407904:	2300      	movs	r3, #0
  407906:	2a1b      	cmp	r2, #27
  407908:	6003      	str	r3, [r0, #0]
  40790a:	6043      	str	r3, [r0, #4]
  40790c:	d916      	bls.n	40793c <_calloc_r+0x58>
  40790e:	2a24      	cmp	r2, #36	; 0x24
  407910:	6083      	str	r3, [r0, #8]
  407912:	60c3      	str	r3, [r0, #12]
  407914:	bf11      	iteee	ne
  407916:	f100 0210 	addne.w	r2, r0, #16
  40791a:	6103      	streq	r3, [r0, #16]
  40791c:	6143      	streq	r3, [r0, #20]
  40791e:	f100 0218 	addeq.w	r2, r0, #24
  407922:	2300      	movs	r3, #0
  407924:	6013      	str	r3, [r2, #0]
  407926:	6053      	str	r3, [r2, #4]
  407928:	6093      	str	r3, [r2, #8]
  40792a:	4620      	mov	r0, r4
  40792c:	bd10      	pop	{r4, pc}
  40792e:	4602      	mov	r2, r0
  407930:	e7f7      	b.n	407922 <_calloc_r+0x3e>
  407932:	2100      	movs	r1, #0
  407934:	f7fc f828 	bl	403988 <memset>
  407938:	4620      	mov	r0, r4
  40793a:	bd10      	pop	{r4, pc}
  40793c:	f100 0208 	add.w	r2, r0, #8
  407940:	e7ef      	b.n	407922 <_calloc_r+0x3e>
  407942:	bf00      	nop

00407944 <_close_r>:
  407944:	b538      	push	{r3, r4, r5, lr}
  407946:	4c07      	ldr	r4, [pc, #28]	; (407964 <_close_r+0x20>)
  407948:	2300      	movs	r3, #0
  40794a:	4605      	mov	r5, r0
  40794c:	4608      	mov	r0, r1
  40794e:	6023      	str	r3, [r4, #0]
  407950:	f7fa fe66 	bl	402620 <_close>
  407954:	1c43      	adds	r3, r0, #1
  407956:	d000      	beq.n	40795a <_close_r+0x16>
  407958:	bd38      	pop	{r3, r4, r5, pc}
  40795a:	6823      	ldr	r3, [r4, #0]
  40795c:	2b00      	cmp	r3, #0
  40795e:	d0fb      	beq.n	407958 <_close_r+0x14>
  407960:	602b      	str	r3, [r5, #0]
  407962:	bd38      	pop	{r3, r4, r5, pc}
  407964:	20000d38 	.word	0x20000d38

00407968 <_fclose_r>:
  407968:	2900      	cmp	r1, #0
  40796a:	d03d      	beq.n	4079e8 <_fclose_r+0x80>
  40796c:	b570      	push	{r4, r5, r6, lr}
  40796e:	4605      	mov	r5, r0
  407970:	460c      	mov	r4, r1
  407972:	b108      	cbz	r0, 407978 <_fclose_r+0x10>
  407974:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407976:	b37b      	cbz	r3, 4079d8 <_fclose_r+0x70>
  407978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40797c:	b90b      	cbnz	r3, 407982 <_fclose_r+0x1a>
  40797e:	2000      	movs	r0, #0
  407980:	bd70      	pop	{r4, r5, r6, pc}
  407982:	4621      	mov	r1, r4
  407984:	4628      	mov	r0, r5
  407986:	f7fe fcc7 	bl	406318 <__sflush_r>
  40798a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40798c:	4606      	mov	r6, r0
  40798e:	b133      	cbz	r3, 40799e <_fclose_r+0x36>
  407990:	69e1      	ldr	r1, [r4, #28]
  407992:	4628      	mov	r0, r5
  407994:	4798      	blx	r3
  407996:	2800      	cmp	r0, #0
  407998:	bfb8      	it	lt
  40799a:	f04f 36ff 	movlt.w	r6, #4294967295
  40799e:	89a3      	ldrh	r3, [r4, #12]
  4079a0:	061b      	lsls	r3, r3, #24
  4079a2:	d41c      	bmi.n	4079de <_fclose_r+0x76>
  4079a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4079a6:	b141      	cbz	r1, 4079ba <_fclose_r+0x52>
  4079a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4079ac:	4299      	cmp	r1, r3
  4079ae:	d002      	beq.n	4079b6 <_fclose_r+0x4e>
  4079b0:	4628      	mov	r0, r5
  4079b2:	f7fe fe55 	bl	406660 <_free_r>
  4079b6:	2300      	movs	r3, #0
  4079b8:	6323      	str	r3, [r4, #48]	; 0x30
  4079ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4079bc:	b121      	cbz	r1, 4079c8 <_fclose_r+0x60>
  4079be:	4628      	mov	r0, r5
  4079c0:	f7fe fe4e 	bl	406660 <_free_r>
  4079c4:	2300      	movs	r3, #0
  4079c6:	6463      	str	r3, [r4, #68]	; 0x44
  4079c8:	f7fe fde4 	bl	406594 <__sfp_lock_acquire>
  4079cc:	2300      	movs	r3, #0
  4079ce:	81a3      	strh	r3, [r4, #12]
  4079d0:	f7fe fde2 	bl	406598 <__sfp_lock_release>
  4079d4:	4630      	mov	r0, r6
  4079d6:	bd70      	pop	{r4, r5, r6, pc}
  4079d8:	f7fe fdd6 	bl	406588 <__sinit>
  4079dc:	e7cc      	b.n	407978 <_fclose_r+0x10>
  4079de:	6921      	ldr	r1, [r4, #16]
  4079e0:	4628      	mov	r0, r5
  4079e2:	f7fe fe3d 	bl	406660 <_free_r>
  4079e6:	e7dd      	b.n	4079a4 <_fclose_r+0x3c>
  4079e8:	2000      	movs	r0, #0
  4079ea:	4770      	bx	lr

004079ec <_fstat_r>:
  4079ec:	b538      	push	{r3, r4, r5, lr}
  4079ee:	460b      	mov	r3, r1
  4079f0:	4c07      	ldr	r4, [pc, #28]	; (407a10 <_fstat_r+0x24>)
  4079f2:	4605      	mov	r5, r0
  4079f4:	4611      	mov	r1, r2
  4079f6:	4618      	mov	r0, r3
  4079f8:	2300      	movs	r3, #0
  4079fa:	6023      	str	r3, [r4, #0]
  4079fc:	f7fa fe1c 	bl	402638 <_fstat>
  407a00:	1c43      	adds	r3, r0, #1
  407a02:	d000      	beq.n	407a06 <_fstat_r+0x1a>
  407a04:	bd38      	pop	{r3, r4, r5, pc}
  407a06:	6823      	ldr	r3, [r4, #0]
  407a08:	2b00      	cmp	r3, #0
  407a0a:	d0fb      	beq.n	407a04 <_fstat_r+0x18>
  407a0c:	602b      	str	r3, [r5, #0]
  407a0e:	bd38      	pop	{r3, r4, r5, pc}
  407a10:	20000d38 	.word	0x20000d38

00407a14 <_lseek_r>:
  407a14:	b570      	push	{r4, r5, r6, lr}
  407a16:	460d      	mov	r5, r1
  407a18:	4c08      	ldr	r4, [pc, #32]	; (407a3c <_lseek_r+0x28>)
  407a1a:	4611      	mov	r1, r2
  407a1c:	4606      	mov	r6, r0
  407a1e:	461a      	mov	r2, r3
  407a20:	4628      	mov	r0, r5
  407a22:	2300      	movs	r3, #0
  407a24:	6023      	str	r3, [r4, #0]
  407a26:	f7fa fe17 	bl	402658 <_lseek>
  407a2a:	1c43      	adds	r3, r0, #1
  407a2c:	d000      	beq.n	407a30 <_lseek_r+0x1c>
  407a2e:	bd70      	pop	{r4, r5, r6, pc}
  407a30:	6823      	ldr	r3, [r4, #0]
  407a32:	2b00      	cmp	r3, #0
  407a34:	d0fb      	beq.n	407a2e <_lseek_r+0x1a>
  407a36:	6033      	str	r3, [r6, #0]
  407a38:	bd70      	pop	{r4, r5, r6, pc}
  407a3a:	bf00      	nop
  407a3c:	20000d38 	.word	0x20000d38

00407a40 <memmove>:
  407a40:	4288      	cmp	r0, r1
  407a42:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a44:	d90d      	bls.n	407a62 <memmove+0x22>
  407a46:	188b      	adds	r3, r1, r2
  407a48:	4298      	cmp	r0, r3
  407a4a:	d20a      	bcs.n	407a62 <memmove+0x22>
  407a4c:	1881      	adds	r1, r0, r2
  407a4e:	2a00      	cmp	r2, #0
  407a50:	d051      	beq.n	407af6 <memmove+0xb6>
  407a52:	1a9a      	subs	r2, r3, r2
  407a54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407a58:	f801 4d01 	strb.w	r4, [r1, #-1]!
  407a5c:	4293      	cmp	r3, r2
  407a5e:	d1f9      	bne.n	407a54 <memmove+0x14>
  407a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a62:	2a0f      	cmp	r2, #15
  407a64:	d948      	bls.n	407af8 <memmove+0xb8>
  407a66:	ea41 0300 	orr.w	r3, r1, r0
  407a6a:	079b      	lsls	r3, r3, #30
  407a6c:	d146      	bne.n	407afc <memmove+0xbc>
  407a6e:	f100 0410 	add.w	r4, r0, #16
  407a72:	f101 0310 	add.w	r3, r1, #16
  407a76:	4615      	mov	r5, r2
  407a78:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407a7c:	f844 6c10 	str.w	r6, [r4, #-16]
  407a80:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407a84:	f844 6c0c 	str.w	r6, [r4, #-12]
  407a88:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407a8c:	f844 6c08 	str.w	r6, [r4, #-8]
  407a90:	3d10      	subs	r5, #16
  407a92:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407a96:	f844 6c04 	str.w	r6, [r4, #-4]
  407a9a:	2d0f      	cmp	r5, #15
  407a9c:	f103 0310 	add.w	r3, r3, #16
  407aa0:	f104 0410 	add.w	r4, r4, #16
  407aa4:	d8e8      	bhi.n	407a78 <memmove+0x38>
  407aa6:	f1a2 0310 	sub.w	r3, r2, #16
  407aaa:	f023 030f 	bic.w	r3, r3, #15
  407aae:	f002 0e0f 	and.w	lr, r2, #15
  407ab2:	3310      	adds	r3, #16
  407ab4:	f1be 0f03 	cmp.w	lr, #3
  407ab8:	4419      	add	r1, r3
  407aba:	4403      	add	r3, r0
  407abc:	d921      	bls.n	407b02 <memmove+0xc2>
  407abe:	1f1e      	subs	r6, r3, #4
  407ac0:	460d      	mov	r5, r1
  407ac2:	4674      	mov	r4, lr
  407ac4:	3c04      	subs	r4, #4
  407ac6:	f855 7b04 	ldr.w	r7, [r5], #4
  407aca:	f846 7f04 	str.w	r7, [r6, #4]!
  407ace:	2c03      	cmp	r4, #3
  407ad0:	d8f8      	bhi.n	407ac4 <memmove+0x84>
  407ad2:	f1ae 0404 	sub.w	r4, lr, #4
  407ad6:	f024 0403 	bic.w	r4, r4, #3
  407ada:	3404      	adds	r4, #4
  407adc:	4423      	add	r3, r4
  407ade:	4421      	add	r1, r4
  407ae0:	f002 0203 	and.w	r2, r2, #3
  407ae4:	b162      	cbz	r2, 407b00 <memmove+0xc0>
  407ae6:	3b01      	subs	r3, #1
  407ae8:	440a      	add	r2, r1
  407aea:	f811 4b01 	ldrb.w	r4, [r1], #1
  407aee:	f803 4f01 	strb.w	r4, [r3, #1]!
  407af2:	428a      	cmp	r2, r1
  407af4:	d1f9      	bne.n	407aea <memmove+0xaa>
  407af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407af8:	4603      	mov	r3, r0
  407afa:	e7f3      	b.n	407ae4 <memmove+0xa4>
  407afc:	4603      	mov	r3, r0
  407afe:	e7f2      	b.n	407ae6 <memmove+0xa6>
  407b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407b02:	4672      	mov	r2, lr
  407b04:	e7ee      	b.n	407ae4 <memmove+0xa4>
  407b06:	bf00      	nop

00407b08 <_read_r>:
  407b08:	b570      	push	{r4, r5, r6, lr}
  407b0a:	460d      	mov	r5, r1
  407b0c:	4c08      	ldr	r4, [pc, #32]	; (407b30 <_read_r+0x28>)
  407b0e:	4611      	mov	r1, r2
  407b10:	4606      	mov	r6, r0
  407b12:	461a      	mov	r2, r3
  407b14:	4628      	mov	r0, r5
  407b16:	2300      	movs	r3, #0
  407b18:	6023      	str	r3, [r4, #0]
  407b1a:	f7f8 fe91 	bl	400840 <_read>
  407b1e:	1c43      	adds	r3, r0, #1
  407b20:	d000      	beq.n	407b24 <_read_r+0x1c>
  407b22:	bd70      	pop	{r4, r5, r6, pc}
  407b24:	6823      	ldr	r3, [r4, #0]
  407b26:	2b00      	cmp	r3, #0
  407b28:	d0fb      	beq.n	407b22 <_read_r+0x1a>
  407b2a:	6033      	str	r3, [r6, #0]
  407b2c:	bd70      	pop	{r4, r5, r6, pc}
  407b2e:	bf00      	nop
  407b30:	20000d38 	.word	0x20000d38

00407b34 <_realloc_r>:
  407b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b38:	4617      	mov	r7, r2
  407b3a:	b083      	sub	sp, #12
  407b3c:	2900      	cmp	r1, #0
  407b3e:	f000 80c1 	beq.w	407cc4 <_realloc_r+0x190>
  407b42:	460e      	mov	r6, r1
  407b44:	4681      	mov	r9, r0
  407b46:	f107 050b 	add.w	r5, r7, #11
  407b4a:	f7ff fa7b 	bl	407044 <__malloc_lock>
  407b4e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  407b52:	2d16      	cmp	r5, #22
  407b54:	f02e 0403 	bic.w	r4, lr, #3
  407b58:	f1a6 0808 	sub.w	r8, r6, #8
  407b5c:	d840      	bhi.n	407be0 <_realloc_r+0xac>
  407b5e:	2210      	movs	r2, #16
  407b60:	4615      	mov	r5, r2
  407b62:	42af      	cmp	r7, r5
  407b64:	d841      	bhi.n	407bea <_realloc_r+0xb6>
  407b66:	4294      	cmp	r4, r2
  407b68:	da75      	bge.n	407c56 <_realloc_r+0x122>
  407b6a:	4bc9      	ldr	r3, [pc, #804]	; (407e90 <_realloc_r+0x35c>)
  407b6c:	6899      	ldr	r1, [r3, #8]
  407b6e:	eb08 0004 	add.w	r0, r8, r4
  407b72:	4288      	cmp	r0, r1
  407b74:	6841      	ldr	r1, [r0, #4]
  407b76:	f000 80d9 	beq.w	407d2c <_realloc_r+0x1f8>
  407b7a:	f021 0301 	bic.w	r3, r1, #1
  407b7e:	4403      	add	r3, r0
  407b80:	685b      	ldr	r3, [r3, #4]
  407b82:	07db      	lsls	r3, r3, #31
  407b84:	d57d      	bpl.n	407c82 <_realloc_r+0x14e>
  407b86:	f01e 0f01 	tst.w	lr, #1
  407b8a:	d035      	beq.n	407bf8 <_realloc_r+0xc4>
  407b8c:	4639      	mov	r1, r7
  407b8e:	4648      	mov	r0, r9
  407b90:	f7fe feb4 	bl	4068fc <_malloc_r>
  407b94:	4607      	mov	r7, r0
  407b96:	b1e0      	cbz	r0, 407bd2 <_realloc_r+0x9e>
  407b98:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407b9c:	f023 0301 	bic.w	r3, r3, #1
  407ba0:	4443      	add	r3, r8
  407ba2:	f1a0 0208 	sub.w	r2, r0, #8
  407ba6:	429a      	cmp	r2, r3
  407ba8:	f000 8144 	beq.w	407e34 <_realloc_r+0x300>
  407bac:	1f22      	subs	r2, r4, #4
  407bae:	2a24      	cmp	r2, #36	; 0x24
  407bb0:	f200 8131 	bhi.w	407e16 <_realloc_r+0x2e2>
  407bb4:	2a13      	cmp	r2, #19
  407bb6:	f200 8104 	bhi.w	407dc2 <_realloc_r+0x28e>
  407bba:	4603      	mov	r3, r0
  407bbc:	4632      	mov	r2, r6
  407bbe:	6811      	ldr	r1, [r2, #0]
  407bc0:	6019      	str	r1, [r3, #0]
  407bc2:	6851      	ldr	r1, [r2, #4]
  407bc4:	6059      	str	r1, [r3, #4]
  407bc6:	6892      	ldr	r2, [r2, #8]
  407bc8:	609a      	str	r2, [r3, #8]
  407bca:	4631      	mov	r1, r6
  407bcc:	4648      	mov	r0, r9
  407bce:	f7fe fd47 	bl	406660 <_free_r>
  407bd2:	4648      	mov	r0, r9
  407bd4:	f7ff fa38 	bl	407048 <__malloc_unlock>
  407bd8:	4638      	mov	r0, r7
  407bda:	b003      	add	sp, #12
  407bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407be0:	f025 0507 	bic.w	r5, r5, #7
  407be4:	2d00      	cmp	r5, #0
  407be6:	462a      	mov	r2, r5
  407be8:	dabb      	bge.n	407b62 <_realloc_r+0x2e>
  407bea:	230c      	movs	r3, #12
  407bec:	2000      	movs	r0, #0
  407bee:	f8c9 3000 	str.w	r3, [r9]
  407bf2:	b003      	add	sp, #12
  407bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bf8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407bfc:	ebc3 0a08 	rsb	sl, r3, r8
  407c00:	f8da 3004 	ldr.w	r3, [sl, #4]
  407c04:	f023 0c03 	bic.w	ip, r3, #3
  407c08:	eb04 030c 	add.w	r3, r4, ip
  407c0c:	4293      	cmp	r3, r2
  407c0e:	dbbd      	blt.n	407b8c <_realloc_r+0x58>
  407c10:	4657      	mov	r7, sl
  407c12:	f8da 100c 	ldr.w	r1, [sl, #12]
  407c16:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407c1a:	1f22      	subs	r2, r4, #4
  407c1c:	2a24      	cmp	r2, #36	; 0x24
  407c1e:	60c1      	str	r1, [r0, #12]
  407c20:	6088      	str	r0, [r1, #8]
  407c22:	f200 8117 	bhi.w	407e54 <_realloc_r+0x320>
  407c26:	2a13      	cmp	r2, #19
  407c28:	f240 8112 	bls.w	407e50 <_realloc_r+0x31c>
  407c2c:	6831      	ldr	r1, [r6, #0]
  407c2e:	f8ca 1008 	str.w	r1, [sl, #8]
  407c32:	6871      	ldr	r1, [r6, #4]
  407c34:	f8ca 100c 	str.w	r1, [sl, #12]
  407c38:	2a1b      	cmp	r2, #27
  407c3a:	f200 812b 	bhi.w	407e94 <_realloc_r+0x360>
  407c3e:	3608      	adds	r6, #8
  407c40:	f10a 0210 	add.w	r2, sl, #16
  407c44:	6831      	ldr	r1, [r6, #0]
  407c46:	6011      	str	r1, [r2, #0]
  407c48:	6871      	ldr	r1, [r6, #4]
  407c4a:	6051      	str	r1, [r2, #4]
  407c4c:	68b1      	ldr	r1, [r6, #8]
  407c4e:	6091      	str	r1, [r2, #8]
  407c50:	463e      	mov	r6, r7
  407c52:	461c      	mov	r4, r3
  407c54:	46d0      	mov	r8, sl
  407c56:	1b63      	subs	r3, r4, r5
  407c58:	2b0f      	cmp	r3, #15
  407c5a:	d81d      	bhi.n	407c98 <_realloc_r+0x164>
  407c5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  407c60:	f003 0301 	and.w	r3, r3, #1
  407c64:	4323      	orrs	r3, r4
  407c66:	4444      	add	r4, r8
  407c68:	f8c8 3004 	str.w	r3, [r8, #4]
  407c6c:	6863      	ldr	r3, [r4, #4]
  407c6e:	f043 0301 	orr.w	r3, r3, #1
  407c72:	6063      	str	r3, [r4, #4]
  407c74:	4648      	mov	r0, r9
  407c76:	f7ff f9e7 	bl	407048 <__malloc_unlock>
  407c7a:	4630      	mov	r0, r6
  407c7c:	b003      	add	sp, #12
  407c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c82:	f021 0103 	bic.w	r1, r1, #3
  407c86:	4421      	add	r1, r4
  407c88:	4291      	cmp	r1, r2
  407c8a:	db21      	blt.n	407cd0 <_realloc_r+0x19c>
  407c8c:	68c3      	ldr	r3, [r0, #12]
  407c8e:	6882      	ldr	r2, [r0, #8]
  407c90:	460c      	mov	r4, r1
  407c92:	60d3      	str	r3, [r2, #12]
  407c94:	609a      	str	r2, [r3, #8]
  407c96:	e7de      	b.n	407c56 <_realloc_r+0x122>
  407c98:	f8d8 2004 	ldr.w	r2, [r8, #4]
  407c9c:	eb08 0105 	add.w	r1, r8, r5
  407ca0:	f002 0201 	and.w	r2, r2, #1
  407ca4:	4315      	orrs	r5, r2
  407ca6:	f043 0201 	orr.w	r2, r3, #1
  407caa:	440b      	add	r3, r1
  407cac:	f8c8 5004 	str.w	r5, [r8, #4]
  407cb0:	604a      	str	r2, [r1, #4]
  407cb2:	685a      	ldr	r2, [r3, #4]
  407cb4:	f042 0201 	orr.w	r2, r2, #1
  407cb8:	3108      	adds	r1, #8
  407cba:	605a      	str	r2, [r3, #4]
  407cbc:	4648      	mov	r0, r9
  407cbe:	f7fe fccf 	bl	406660 <_free_r>
  407cc2:	e7d7      	b.n	407c74 <_realloc_r+0x140>
  407cc4:	4611      	mov	r1, r2
  407cc6:	b003      	add	sp, #12
  407cc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ccc:	f7fe be16 	b.w	4068fc <_malloc_r>
  407cd0:	f01e 0f01 	tst.w	lr, #1
  407cd4:	f47f af5a 	bne.w	407b8c <_realloc_r+0x58>
  407cd8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407cdc:	ebc3 0a08 	rsb	sl, r3, r8
  407ce0:	f8da 3004 	ldr.w	r3, [sl, #4]
  407ce4:	f023 0c03 	bic.w	ip, r3, #3
  407ce8:	eb01 0e0c 	add.w	lr, r1, ip
  407cec:	4596      	cmp	lr, r2
  407cee:	db8b      	blt.n	407c08 <_realloc_r+0xd4>
  407cf0:	68c3      	ldr	r3, [r0, #12]
  407cf2:	6882      	ldr	r2, [r0, #8]
  407cf4:	4657      	mov	r7, sl
  407cf6:	60d3      	str	r3, [r2, #12]
  407cf8:	609a      	str	r2, [r3, #8]
  407cfa:	f857 1f08 	ldr.w	r1, [r7, #8]!
  407cfe:	f8da 300c 	ldr.w	r3, [sl, #12]
  407d02:	60cb      	str	r3, [r1, #12]
  407d04:	1f22      	subs	r2, r4, #4
  407d06:	2a24      	cmp	r2, #36	; 0x24
  407d08:	6099      	str	r1, [r3, #8]
  407d0a:	f200 8099 	bhi.w	407e40 <_realloc_r+0x30c>
  407d0e:	2a13      	cmp	r2, #19
  407d10:	d962      	bls.n	407dd8 <_realloc_r+0x2a4>
  407d12:	6833      	ldr	r3, [r6, #0]
  407d14:	f8ca 3008 	str.w	r3, [sl, #8]
  407d18:	6873      	ldr	r3, [r6, #4]
  407d1a:	f8ca 300c 	str.w	r3, [sl, #12]
  407d1e:	2a1b      	cmp	r2, #27
  407d20:	f200 80a0 	bhi.w	407e64 <_realloc_r+0x330>
  407d24:	3608      	adds	r6, #8
  407d26:	f10a 0310 	add.w	r3, sl, #16
  407d2a:	e056      	b.n	407dda <_realloc_r+0x2a6>
  407d2c:	f021 0b03 	bic.w	fp, r1, #3
  407d30:	44a3      	add	fp, r4
  407d32:	f105 0010 	add.w	r0, r5, #16
  407d36:	4583      	cmp	fp, r0
  407d38:	da59      	bge.n	407dee <_realloc_r+0x2ba>
  407d3a:	f01e 0f01 	tst.w	lr, #1
  407d3e:	f47f af25 	bne.w	407b8c <_realloc_r+0x58>
  407d42:	f856 1c08 	ldr.w	r1, [r6, #-8]
  407d46:	ebc1 0a08 	rsb	sl, r1, r8
  407d4a:	f8da 1004 	ldr.w	r1, [sl, #4]
  407d4e:	f021 0c03 	bic.w	ip, r1, #3
  407d52:	44e3      	add	fp, ip
  407d54:	4558      	cmp	r0, fp
  407d56:	f73f af57 	bgt.w	407c08 <_realloc_r+0xd4>
  407d5a:	4657      	mov	r7, sl
  407d5c:	f8da 100c 	ldr.w	r1, [sl, #12]
  407d60:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407d64:	1f22      	subs	r2, r4, #4
  407d66:	2a24      	cmp	r2, #36	; 0x24
  407d68:	60c1      	str	r1, [r0, #12]
  407d6a:	6088      	str	r0, [r1, #8]
  407d6c:	f200 80b4 	bhi.w	407ed8 <_realloc_r+0x3a4>
  407d70:	2a13      	cmp	r2, #19
  407d72:	f240 80a5 	bls.w	407ec0 <_realloc_r+0x38c>
  407d76:	6831      	ldr	r1, [r6, #0]
  407d78:	f8ca 1008 	str.w	r1, [sl, #8]
  407d7c:	6871      	ldr	r1, [r6, #4]
  407d7e:	f8ca 100c 	str.w	r1, [sl, #12]
  407d82:	2a1b      	cmp	r2, #27
  407d84:	f200 80af 	bhi.w	407ee6 <_realloc_r+0x3b2>
  407d88:	3608      	adds	r6, #8
  407d8a:	f10a 0210 	add.w	r2, sl, #16
  407d8e:	6831      	ldr	r1, [r6, #0]
  407d90:	6011      	str	r1, [r2, #0]
  407d92:	6871      	ldr	r1, [r6, #4]
  407d94:	6051      	str	r1, [r2, #4]
  407d96:	68b1      	ldr	r1, [r6, #8]
  407d98:	6091      	str	r1, [r2, #8]
  407d9a:	eb0a 0105 	add.w	r1, sl, r5
  407d9e:	ebc5 020b 	rsb	r2, r5, fp
  407da2:	f042 0201 	orr.w	r2, r2, #1
  407da6:	6099      	str	r1, [r3, #8]
  407da8:	604a      	str	r2, [r1, #4]
  407daa:	f8da 3004 	ldr.w	r3, [sl, #4]
  407dae:	f003 0301 	and.w	r3, r3, #1
  407db2:	431d      	orrs	r5, r3
  407db4:	4648      	mov	r0, r9
  407db6:	f8ca 5004 	str.w	r5, [sl, #4]
  407dba:	f7ff f945 	bl	407048 <__malloc_unlock>
  407dbe:	4638      	mov	r0, r7
  407dc0:	e75c      	b.n	407c7c <_realloc_r+0x148>
  407dc2:	6833      	ldr	r3, [r6, #0]
  407dc4:	6003      	str	r3, [r0, #0]
  407dc6:	6873      	ldr	r3, [r6, #4]
  407dc8:	6043      	str	r3, [r0, #4]
  407dca:	2a1b      	cmp	r2, #27
  407dcc:	d827      	bhi.n	407e1e <_realloc_r+0x2ea>
  407dce:	f100 0308 	add.w	r3, r0, #8
  407dd2:	f106 0208 	add.w	r2, r6, #8
  407dd6:	e6f2      	b.n	407bbe <_realloc_r+0x8a>
  407dd8:	463b      	mov	r3, r7
  407dda:	6832      	ldr	r2, [r6, #0]
  407ddc:	601a      	str	r2, [r3, #0]
  407dde:	6872      	ldr	r2, [r6, #4]
  407de0:	605a      	str	r2, [r3, #4]
  407de2:	68b2      	ldr	r2, [r6, #8]
  407de4:	609a      	str	r2, [r3, #8]
  407de6:	463e      	mov	r6, r7
  407de8:	4674      	mov	r4, lr
  407dea:	46d0      	mov	r8, sl
  407dec:	e733      	b.n	407c56 <_realloc_r+0x122>
  407dee:	eb08 0105 	add.w	r1, r8, r5
  407df2:	ebc5 0b0b 	rsb	fp, r5, fp
  407df6:	f04b 0201 	orr.w	r2, fp, #1
  407dfa:	6099      	str	r1, [r3, #8]
  407dfc:	604a      	str	r2, [r1, #4]
  407dfe:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407e02:	f003 0301 	and.w	r3, r3, #1
  407e06:	431d      	orrs	r5, r3
  407e08:	4648      	mov	r0, r9
  407e0a:	f846 5c04 	str.w	r5, [r6, #-4]
  407e0e:	f7ff f91b 	bl	407048 <__malloc_unlock>
  407e12:	4630      	mov	r0, r6
  407e14:	e732      	b.n	407c7c <_realloc_r+0x148>
  407e16:	4631      	mov	r1, r6
  407e18:	f7ff fe12 	bl	407a40 <memmove>
  407e1c:	e6d5      	b.n	407bca <_realloc_r+0x96>
  407e1e:	68b3      	ldr	r3, [r6, #8]
  407e20:	6083      	str	r3, [r0, #8]
  407e22:	68f3      	ldr	r3, [r6, #12]
  407e24:	60c3      	str	r3, [r0, #12]
  407e26:	2a24      	cmp	r2, #36	; 0x24
  407e28:	d028      	beq.n	407e7c <_realloc_r+0x348>
  407e2a:	f100 0310 	add.w	r3, r0, #16
  407e2e:	f106 0210 	add.w	r2, r6, #16
  407e32:	e6c4      	b.n	407bbe <_realloc_r+0x8a>
  407e34:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407e38:	f023 0303 	bic.w	r3, r3, #3
  407e3c:	441c      	add	r4, r3
  407e3e:	e70a      	b.n	407c56 <_realloc_r+0x122>
  407e40:	4631      	mov	r1, r6
  407e42:	4638      	mov	r0, r7
  407e44:	4674      	mov	r4, lr
  407e46:	46d0      	mov	r8, sl
  407e48:	f7ff fdfa 	bl	407a40 <memmove>
  407e4c:	463e      	mov	r6, r7
  407e4e:	e702      	b.n	407c56 <_realloc_r+0x122>
  407e50:	463a      	mov	r2, r7
  407e52:	e6f7      	b.n	407c44 <_realloc_r+0x110>
  407e54:	4631      	mov	r1, r6
  407e56:	4638      	mov	r0, r7
  407e58:	461c      	mov	r4, r3
  407e5a:	46d0      	mov	r8, sl
  407e5c:	f7ff fdf0 	bl	407a40 <memmove>
  407e60:	463e      	mov	r6, r7
  407e62:	e6f8      	b.n	407c56 <_realloc_r+0x122>
  407e64:	68b3      	ldr	r3, [r6, #8]
  407e66:	f8ca 3010 	str.w	r3, [sl, #16]
  407e6a:	68f3      	ldr	r3, [r6, #12]
  407e6c:	f8ca 3014 	str.w	r3, [sl, #20]
  407e70:	2a24      	cmp	r2, #36	; 0x24
  407e72:	d01b      	beq.n	407eac <_realloc_r+0x378>
  407e74:	3610      	adds	r6, #16
  407e76:	f10a 0318 	add.w	r3, sl, #24
  407e7a:	e7ae      	b.n	407dda <_realloc_r+0x2a6>
  407e7c:	6933      	ldr	r3, [r6, #16]
  407e7e:	6103      	str	r3, [r0, #16]
  407e80:	6973      	ldr	r3, [r6, #20]
  407e82:	6143      	str	r3, [r0, #20]
  407e84:	f106 0218 	add.w	r2, r6, #24
  407e88:	f100 0318 	add.w	r3, r0, #24
  407e8c:	e697      	b.n	407bbe <_realloc_r+0x8a>
  407e8e:	bf00      	nop
  407e90:	2000047c 	.word	0x2000047c
  407e94:	68b1      	ldr	r1, [r6, #8]
  407e96:	f8ca 1010 	str.w	r1, [sl, #16]
  407e9a:	68f1      	ldr	r1, [r6, #12]
  407e9c:	f8ca 1014 	str.w	r1, [sl, #20]
  407ea0:	2a24      	cmp	r2, #36	; 0x24
  407ea2:	d00f      	beq.n	407ec4 <_realloc_r+0x390>
  407ea4:	3610      	adds	r6, #16
  407ea6:	f10a 0218 	add.w	r2, sl, #24
  407eaa:	e6cb      	b.n	407c44 <_realloc_r+0x110>
  407eac:	6933      	ldr	r3, [r6, #16]
  407eae:	f8ca 3018 	str.w	r3, [sl, #24]
  407eb2:	6973      	ldr	r3, [r6, #20]
  407eb4:	f8ca 301c 	str.w	r3, [sl, #28]
  407eb8:	3618      	adds	r6, #24
  407eba:	f10a 0320 	add.w	r3, sl, #32
  407ebe:	e78c      	b.n	407dda <_realloc_r+0x2a6>
  407ec0:	463a      	mov	r2, r7
  407ec2:	e764      	b.n	407d8e <_realloc_r+0x25a>
  407ec4:	6932      	ldr	r2, [r6, #16]
  407ec6:	f8ca 2018 	str.w	r2, [sl, #24]
  407eca:	6972      	ldr	r2, [r6, #20]
  407ecc:	f8ca 201c 	str.w	r2, [sl, #28]
  407ed0:	3618      	adds	r6, #24
  407ed2:	f10a 0220 	add.w	r2, sl, #32
  407ed6:	e6b5      	b.n	407c44 <_realloc_r+0x110>
  407ed8:	4631      	mov	r1, r6
  407eda:	4638      	mov	r0, r7
  407edc:	9301      	str	r3, [sp, #4]
  407ede:	f7ff fdaf 	bl	407a40 <memmove>
  407ee2:	9b01      	ldr	r3, [sp, #4]
  407ee4:	e759      	b.n	407d9a <_realloc_r+0x266>
  407ee6:	68b1      	ldr	r1, [r6, #8]
  407ee8:	f8ca 1010 	str.w	r1, [sl, #16]
  407eec:	68f1      	ldr	r1, [r6, #12]
  407eee:	f8ca 1014 	str.w	r1, [sl, #20]
  407ef2:	2a24      	cmp	r2, #36	; 0x24
  407ef4:	d003      	beq.n	407efe <_realloc_r+0x3ca>
  407ef6:	3610      	adds	r6, #16
  407ef8:	f10a 0218 	add.w	r2, sl, #24
  407efc:	e747      	b.n	407d8e <_realloc_r+0x25a>
  407efe:	6932      	ldr	r2, [r6, #16]
  407f00:	f8ca 2018 	str.w	r2, [sl, #24]
  407f04:	6972      	ldr	r2, [r6, #20]
  407f06:	f8ca 201c 	str.w	r2, [sl, #28]
  407f0a:	3618      	adds	r6, #24
  407f0c:	f10a 0220 	add.w	r2, sl, #32
  407f10:	e73d      	b.n	407d8e <_realloc_r+0x25a>
  407f12:	bf00      	nop

00407f14 <__aeabi_drsub>:
  407f14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407f18:	e002      	b.n	407f20 <__adddf3>
  407f1a:	bf00      	nop

00407f1c <__aeabi_dsub>:
  407f1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407f20 <__adddf3>:
  407f20:	b530      	push	{r4, r5, lr}
  407f22:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407f26:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407f2a:	ea94 0f05 	teq	r4, r5
  407f2e:	bf08      	it	eq
  407f30:	ea90 0f02 	teqeq	r0, r2
  407f34:	bf1f      	itttt	ne
  407f36:	ea54 0c00 	orrsne.w	ip, r4, r0
  407f3a:	ea55 0c02 	orrsne.w	ip, r5, r2
  407f3e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407f42:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407f46:	f000 80e2 	beq.w	40810e <__adddf3+0x1ee>
  407f4a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407f4e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407f52:	bfb8      	it	lt
  407f54:	426d      	neglt	r5, r5
  407f56:	dd0c      	ble.n	407f72 <__adddf3+0x52>
  407f58:	442c      	add	r4, r5
  407f5a:	ea80 0202 	eor.w	r2, r0, r2
  407f5e:	ea81 0303 	eor.w	r3, r1, r3
  407f62:	ea82 0000 	eor.w	r0, r2, r0
  407f66:	ea83 0101 	eor.w	r1, r3, r1
  407f6a:	ea80 0202 	eor.w	r2, r0, r2
  407f6e:	ea81 0303 	eor.w	r3, r1, r3
  407f72:	2d36      	cmp	r5, #54	; 0x36
  407f74:	bf88      	it	hi
  407f76:	bd30      	pophi	{r4, r5, pc}
  407f78:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407f7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407f80:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407f84:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407f88:	d002      	beq.n	407f90 <__adddf3+0x70>
  407f8a:	4240      	negs	r0, r0
  407f8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407f90:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407f94:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407f98:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407f9c:	d002      	beq.n	407fa4 <__adddf3+0x84>
  407f9e:	4252      	negs	r2, r2
  407fa0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407fa4:	ea94 0f05 	teq	r4, r5
  407fa8:	f000 80a7 	beq.w	4080fa <__adddf3+0x1da>
  407fac:	f1a4 0401 	sub.w	r4, r4, #1
  407fb0:	f1d5 0e20 	rsbs	lr, r5, #32
  407fb4:	db0d      	blt.n	407fd2 <__adddf3+0xb2>
  407fb6:	fa02 fc0e 	lsl.w	ip, r2, lr
  407fba:	fa22 f205 	lsr.w	r2, r2, r5
  407fbe:	1880      	adds	r0, r0, r2
  407fc0:	f141 0100 	adc.w	r1, r1, #0
  407fc4:	fa03 f20e 	lsl.w	r2, r3, lr
  407fc8:	1880      	adds	r0, r0, r2
  407fca:	fa43 f305 	asr.w	r3, r3, r5
  407fce:	4159      	adcs	r1, r3
  407fd0:	e00e      	b.n	407ff0 <__adddf3+0xd0>
  407fd2:	f1a5 0520 	sub.w	r5, r5, #32
  407fd6:	f10e 0e20 	add.w	lr, lr, #32
  407fda:	2a01      	cmp	r2, #1
  407fdc:	fa03 fc0e 	lsl.w	ip, r3, lr
  407fe0:	bf28      	it	cs
  407fe2:	f04c 0c02 	orrcs.w	ip, ip, #2
  407fe6:	fa43 f305 	asr.w	r3, r3, r5
  407fea:	18c0      	adds	r0, r0, r3
  407fec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407ff0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407ff4:	d507      	bpl.n	408006 <__adddf3+0xe6>
  407ff6:	f04f 0e00 	mov.w	lr, #0
  407ffa:	f1dc 0c00 	rsbs	ip, ip, #0
  407ffe:	eb7e 0000 	sbcs.w	r0, lr, r0
  408002:	eb6e 0101 	sbc.w	r1, lr, r1
  408006:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40800a:	d31b      	bcc.n	408044 <__adddf3+0x124>
  40800c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408010:	d30c      	bcc.n	40802c <__adddf3+0x10c>
  408012:	0849      	lsrs	r1, r1, #1
  408014:	ea5f 0030 	movs.w	r0, r0, rrx
  408018:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40801c:	f104 0401 	add.w	r4, r4, #1
  408020:	ea4f 5244 	mov.w	r2, r4, lsl #21
  408024:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408028:	f080 809a 	bcs.w	408160 <__adddf3+0x240>
  40802c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408030:	bf08      	it	eq
  408032:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408036:	f150 0000 	adcs.w	r0, r0, #0
  40803a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40803e:	ea41 0105 	orr.w	r1, r1, r5
  408042:	bd30      	pop	{r4, r5, pc}
  408044:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408048:	4140      	adcs	r0, r0
  40804a:	eb41 0101 	adc.w	r1, r1, r1
  40804e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408052:	f1a4 0401 	sub.w	r4, r4, #1
  408056:	d1e9      	bne.n	40802c <__adddf3+0x10c>
  408058:	f091 0f00 	teq	r1, #0
  40805c:	bf04      	itt	eq
  40805e:	4601      	moveq	r1, r0
  408060:	2000      	moveq	r0, #0
  408062:	fab1 f381 	clz	r3, r1
  408066:	bf08      	it	eq
  408068:	3320      	addeq	r3, #32
  40806a:	f1a3 030b 	sub.w	r3, r3, #11
  40806e:	f1b3 0220 	subs.w	r2, r3, #32
  408072:	da0c      	bge.n	40808e <__adddf3+0x16e>
  408074:	320c      	adds	r2, #12
  408076:	dd08      	ble.n	40808a <__adddf3+0x16a>
  408078:	f102 0c14 	add.w	ip, r2, #20
  40807c:	f1c2 020c 	rsb	r2, r2, #12
  408080:	fa01 f00c 	lsl.w	r0, r1, ip
  408084:	fa21 f102 	lsr.w	r1, r1, r2
  408088:	e00c      	b.n	4080a4 <__adddf3+0x184>
  40808a:	f102 0214 	add.w	r2, r2, #20
  40808e:	bfd8      	it	le
  408090:	f1c2 0c20 	rsble	ip, r2, #32
  408094:	fa01 f102 	lsl.w	r1, r1, r2
  408098:	fa20 fc0c 	lsr.w	ip, r0, ip
  40809c:	bfdc      	itt	le
  40809e:	ea41 010c 	orrle.w	r1, r1, ip
  4080a2:	4090      	lslle	r0, r2
  4080a4:	1ae4      	subs	r4, r4, r3
  4080a6:	bfa2      	ittt	ge
  4080a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4080ac:	4329      	orrge	r1, r5
  4080ae:	bd30      	popge	{r4, r5, pc}
  4080b0:	ea6f 0404 	mvn.w	r4, r4
  4080b4:	3c1f      	subs	r4, #31
  4080b6:	da1c      	bge.n	4080f2 <__adddf3+0x1d2>
  4080b8:	340c      	adds	r4, #12
  4080ba:	dc0e      	bgt.n	4080da <__adddf3+0x1ba>
  4080bc:	f104 0414 	add.w	r4, r4, #20
  4080c0:	f1c4 0220 	rsb	r2, r4, #32
  4080c4:	fa20 f004 	lsr.w	r0, r0, r4
  4080c8:	fa01 f302 	lsl.w	r3, r1, r2
  4080cc:	ea40 0003 	orr.w	r0, r0, r3
  4080d0:	fa21 f304 	lsr.w	r3, r1, r4
  4080d4:	ea45 0103 	orr.w	r1, r5, r3
  4080d8:	bd30      	pop	{r4, r5, pc}
  4080da:	f1c4 040c 	rsb	r4, r4, #12
  4080de:	f1c4 0220 	rsb	r2, r4, #32
  4080e2:	fa20 f002 	lsr.w	r0, r0, r2
  4080e6:	fa01 f304 	lsl.w	r3, r1, r4
  4080ea:	ea40 0003 	orr.w	r0, r0, r3
  4080ee:	4629      	mov	r1, r5
  4080f0:	bd30      	pop	{r4, r5, pc}
  4080f2:	fa21 f004 	lsr.w	r0, r1, r4
  4080f6:	4629      	mov	r1, r5
  4080f8:	bd30      	pop	{r4, r5, pc}
  4080fa:	f094 0f00 	teq	r4, #0
  4080fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  408102:	bf06      	itte	eq
  408104:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408108:	3401      	addeq	r4, #1
  40810a:	3d01      	subne	r5, #1
  40810c:	e74e      	b.n	407fac <__adddf3+0x8c>
  40810e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408112:	bf18      	it	ne
  408114:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408118:	d029      	beq.n	40816e <__adddf3+0x24e>
  40811a:	ea94 0f05 	teq	r4, r5
  40811e:	bf08      	it	eq
  408120:	ea90 0f02 	teqeq	r0, r2
  408124:	d005      	beq.n	408132 <__adddf3+0x212>
  408126:	ea54 0c00 	orrs.w	ip, r4, r0
  40812a:	bf04      	itt	eq
  40812c:	4619      	moveq	r1, r3
  40812e:	4610      	moveq	r0, r2
  408130:	bd30      	pop	{r4, r5, pc}
  408132:	ea91 0f03 	teq	r1, r3
  408136:	bf1e      	ittt	ne
  408138:	2100      	movne	r1, #0
  40813a:	2000      	movne	r0, #0
  40813c:	bd30      	popne	{r4, r5, pc}
  40813e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  408142:	d105      	bne.n	408150 <__adddf3+0x230>
  408144:	0040      	lsls	r0, r0, #1
  408146:	4149      	adcs	r1, r1
  408148:	bf28      	it	cs
  40814a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40814e:	bd30      	pop	{r4, r5, pc}
  408150:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408154:	bf3c      	itt	cc
  408156:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40815a:	bd30      	popcc	{r4, r5, pc}
  40815c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408160:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408164:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408168:	f04f 0000 	mov.w	r0, #0
  40816c:	bd30      	pop	{r4, r5, pc}
  40816e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408172:	bf1a      	itte	ne
  408174:	4619      	movne	r1, r3
  408176:	4610      	movne	r0, r2
  408178:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40817c:	bf1c      	itt	ne
  40817e:	460b      	movne	r3, r1
  408180:	4602      	movne	r2, r0
  408182:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408186:	bf06      	itte	eq
  408188:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40818c:	ea91 0f03 	teqeq	r1, r3
  408190:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  408194:	bd30      	pop	{r4, r5, pc}
  408196:	bf00      	nop

00408198 <__aeabi_ui2d>:
  408198:	f090 0f00 	teq	r0, #0
  40819c:	bf04      	itt	eq
  40819e:	2100      	moveq	r1, #0
  4081a0:	4770      	bxeq	lr
  4081a2:	b530      	push	{r4, r5, lr}
  4081a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4081a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4081ac:	f04f 0500 	mov.w	r5, #0
  4081b0:	f04f 0100 	mov.w	r1, #0
  4081b4:	e750      	b.n	408058 <__adddf3+0x138>
  4081b6:	bf00      	nop

004081b8 <__aeabi_i2d>:
  4081b8:	f090 0f00 	teq	r0, #0
  4081bc:	bf04      	itt	eq
  4081be:	2100      	moveq	r1, #0
  4081c0:	4770      	bxeq	lr
  4081c2:	b530      	push	{r4, r5, lr}
  4081c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4081c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4081cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4081d0:	bf48      	it	mi
  4081d2:	4240      	negmi	r0, r0
  4081d4:	f04f 0100 	mov.w	r1, #0
  4081d8:	e73e      	b.n	408058 <__adddf3+0x138>
  4081da:	bf00      	nop

004081dc <__aeabi_f2d>:
  4081dc:	0042      	lsls	r2, r0, #1
  4081de:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4081e2:	ea4f 0131 	mov.w	r1, r1, rrx
  4081e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4081ea:	bf1f      	itttt	ne
  4081ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4081f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4081f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4081f8:	4770      	bxne	lr
  4081fa:	f092 0f00 	teq	r2, #0
  4081fe:	bf14      	ite	ne
  408200:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408204:	4770      	bxeq	lr
  408206:	b530      	push	{r4, r5, lr}
  408208:	f44f 7460 	mov.w	r4, #896	; 0x380
  40820c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408214:	e720      	b.n	408058 <__adddf3+0x138>
  408216:	bf00      	nop

00408218 <__aeabi_ul2d>:
  408218:	ea50 0201 	orrs.w	r2, r0, r1
  40821c:	bf08      	it	eq
  40821e:	4770      	bxeq	lr
  408220:	b530      	push	{r4, r5, lr}
  408222:	f04f 0500 	mov.w	r5, #0
  408226:	e00a      	b.n	40823e <__aeabi_l2d+0x16>

00408228 <__aeabi_l2d>:
  408228:	ea50 0201 	orrs.w	r2, r0, r1
  40822c:	bf08      	it	eq
  40822e:	4770      	bxeq	lr
  408230:	b530      	push	{r4, r5, lr}
  408232:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408236:	d502      	bpl.n	40823e <__aeabi_l2d+0x16>
  408238:	4240      	negs	r0, r0
  40823a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40823e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408242:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408246:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40824a:	f43f aedc 	beq.w	408006 <__adddf3+0xe6>
  40824e:	f04f 0203 	mov.w	r2, #3
  408252:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408256:	bf18      	it	ne
  408258:	3203      	addne	r2, #3
  40825a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40825e:	bf18      	it	ne
  408260:	3203      	addne	r2, #3
  408262:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  408266:	f1c2 0320 	rsb	r3, r2, #32
  40826a:	fa00 fc03 	lsl.w	ip, r0, r3
  40826e:	fa20 f002 	lsr.w	r0, r0, r2
  408272:	fa01 fe03 	lsl.w	lr, r1, r3
  408276:	ea40 000e 	orr.w	r0, r0, lr
  40827a:	fa21 f102 	lsr.w	r1, r1, r2
  40827e:	4414      	add	r4, r2
  408280:	e6c1      	b.n	408006 <__adddf3+0xe6>
  408282:	bf00      	nop

00408284 <__aeabi_dmul>:
  408284:	b570      	push	{r4, r5, r6, lr}
  408286:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40828a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40828e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408292:	bf1d      	ittte	ne
  408294:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408298:	ea94 0f0c 	teqne	r4, ip
  40829c:	ea95 0f0c 	teqne	r5, ip
  4082a0:	f000 f8de 	bleq	408460 <__aeabi_dmul+0x1dc>
  4082a4:	442c      	add	r4, r5
  4082a6:	ea81 0603 	eor.w	r6, r1, r3
  4082aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4082ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4082b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4082b6:	bf18      	it	ne
  4082b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4082bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4082c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4082c4:	d038      	beq.n	408338 <__aeabi_dmul+0xb4>
  4082c6:	fba0 ce02 	umull	ip, lr, r0, r2
  4082ca:	f04f 0500 	mov.w	r5, #0
  4082ce:	fbe1 e502 	umlal	lr, r5, r1, r2
  4082d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4082d6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4082da:	f04f 0600 	mov.w	r6, #0
  4082de:	fbe1 5603 	umlal	r5, r6, r1, r3
  4082e2:	f09c 0f00 	teq	ip, #0
  4082e6:	bf18      	it	ne
  4082e8:	f04e 0e01 	orrne.w	lr, lr, #1
  4082ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4082f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4082f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4082f8:	d204      	bcs.n	408304 <__aeabi_dmul+0x80>
  4082fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4082fe:	416d      	adcs	r5, r5
  408300:	eb46 0606 	adc.w	r6, r6, r6
  408304:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408308:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40830c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408310:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408314:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408318:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40831c:	bf88      	it	hi
  40831e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408322:	d81e      	bhi.n	408362 <__aeabi_dmul+0xde>
  408324:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408328:	bf08      	it	eq
  40832a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40832e:	f150 0000 	adcs.w	r0, r0, #0
  408332:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408336:	bd70      	pop	{r4, r5, r6, pc}
  408338:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40833c:	ea46 0101 	orr.w	r1, r6, r1
  408340:	ea40 0002 	orr.w	r0, r0, r2
  408344:	ea81 0103 	eor.w	r1, r1, r3
  408348:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40834c:	bfc2      	ittt	gt
  40834e:	ebd4 050c 	rsbsgt	r5, r4, ip
  408352:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408356:	bd70      	popgt	{r4, r5, r6, pc}
  408358:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40835c:	f04f 0e00 	mov.w	lr, #0
  408360:	3c01      	subs	r4, #1
  408362:	f300 80ab 	bgt.w	4084bc <__aeabi_dmul+0x238>
  408366:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40836a:	bfde      	ittt	le
  40836c:	2000      	movle	r0, #0
  40836e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408372:	bd70      	pople	{r4, r5, r6, pc}
  408374:	f1c4 0400 	rsb	r4, r4, #0
  408378:	3c20      	subs	r4, #32
  40837a:	da35      	bge.n	4083e8 <__aeabi_dmul+0x164>
  40837c:	340c      	adds	r4, #12
  40837e:	dc1b      	bgt.n	4083b8 <__aeabi_dmul+0x134>
  408380:	f104 0414 	add.w	r4, r4, #20
  408384:	f1c4 0520 	rsb	r5, r4, #32
  408388:	fa00 f305 	lsl.w	r3, r0, r5
  40838c:	fa20 f004 	lsr.w	r0, r0, r4
  408390:	fa01 f205 	lsl.w	r2, r1, r5
  408394:	ea40 0002 	orr.w	r0, r0, r2
  408398:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40839c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4083a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4083a4:	fa21 f604 	lsr.w	r6, r1, r4
  4083a8:	eb42 0106 	adc.w	r1, r2, r6
  4083ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4083b0:	bf08      	it	eq
  4083b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4083b6:	bd70      	pop	{r4, r5, r6, pc}
  4083b8:	f1c4 040c 	rsb	r4, r4, #12
  4083bc:	f1c4 0520 	rsb	r5, r4, #32
  4083c0:	fa00 f304 	lsl.w	r3, r0, r4
  4083c4:	fa20 f005 	lsr.w	r0, r0, r5
  4083c8:	fa01 f204 	lsl.w	r2, r1, r4
  4083cc:	ea40 0002 	orr.w	r0, r0, r2
  4083d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4083d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4083d8:	f141 0100 	adc.w	r1, r1, #0
  4083dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4083e0:	bf08      	it	eq
  4083e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4083e6:	bd70      	pop	{r4, r5, r6, pc}
  4083e8:	f1c4 0520 	rsb	r5, r4, #32
  4083ec:	fa00 f205 	lsl.w	r2, r0, r5
  4083f0:	ea4e 0e02 	orr.w	lr, lr, r2
  4083f4:	fa20 f304 	lsr.w	r3, r0, r4
  4083f8:	fa01 f205 	lsl.w	r2, r1, r5
  4083fc:	ea43 0302 	orr.w	r3, r3, r2
  408400:	fa21 f004 	lsr.w	r0, r1, r4
  408404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408408:	fa21 f204 	lsr.w	r2, r1, r4
  40840c:	ea20 0002 	bic.w	r0, r0, r2
  408410:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408414:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408418:	bf08      	it	eq
  40841a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40841e:	bd70      	pop	{r4, r5, r6, pc}
  408420:	f094 0f00 	teq	r4, #0
  408424:	d10f      	bne.n	408446 <__aeabi_dmul+0x1c2>
  408426:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40842a:	0040      	lsls	r0, r0, #1
  40842c:	eb41 0101 	adc.w	r1, r1, r1
  408430:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408434:	bf08      	it	eq
  408436:	3c01      	subeq	r4, #1
  408438:	d0f7      	beq.n	40842a <__aeabi_dmul+0x1a6>
  40843a:	ea41 0106 	orr.w	r1, r1, r6
  40843e:	f095 0f00 	teq	r5, #0
  408442:	bf18      	it	ne
  408444:	4770      	bxne	lr
  408446:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40844a:	0052      	lsls	r2, r2, #1
  40844c:	eb43 0303 	adc.w	r3, r3, r3
  408450:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408454:	bf08      	it	eq
  408456:	3d01      	subeq	r5, #1
  408458:	d0f7      	beq.n	40844a <__aeabi_dmul+0x1c6>
  40845a:	ea43 0306 	orr.w	r3, r3, r6
  40845e:	4770      	bx	lr
  408460:	ea94 0f0c 	teq	r4, ip
  408464:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408468:	bf18      	it	ne
  40846a:	ea95 0f0c 	teqne	r5, ip
  40846e:	d00c      	beq.n	40848a <__aeabi_dmul+0x206>
  408470:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408474:	bf18      	it	ne
  408476:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40847a:	d1d1      	bne.n	408420 <__aeabi_dmul+0x19c>
  40847c:	ea81 0103 	eor.w	r1, r1, r3
  408480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408484:	f04f 0000 	mov.w	r0, #0
  408488:	bd70      	pop	{r4, r5, r6, pc}
  40848a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40848e:	bf06      	itte	eq
  408490:	4610      	moveq	r0, r2
  408492:	4619      	moveq	r1, r3
  408494:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408498:	d019      	beq.n	4084ce <__aeabi_dmul+0x24a>
  40849a:	ea94 0f0c 	teq	r4, ip
  40849e:	d102      	bne.n	4084a6 <__aeabi_dmul+0x222>
  4084a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4084a4:	d113      	bne.n	4084ce <__aeabi_dmul+0x24a>
  4084a6:	ea95 0f0c 	teq	r5, ip
  4084aa:	d105      	bne.n	4084b8 <__aeabi_dmul+0x234>
  4084ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4084b0:	bf1c      	itt	ne
  4084b2:	4610      	movne	r0, r2
  4084b4:	4619      	movne	r1, r3
  4084b6:	d10a      	bne.n	4084ce <__aeabi_dmul+0x24a>
  4084b8:	ea81 0103 	eor.w	r1, r1, r3
  4084bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4084c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4084c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4084c8:	f04f 0000 	mov.w	r0, #0
  4084cc:	bd70      	pop	{r4, r5, r6, pc}
  4084ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4084d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4084d6:	bd70      	pop	{r4, r5, r6, pc}

004084d8 <__aeabi_ddiv>:
  4084d8:	b570      	push	{r4, r5, r6, lr}
  4084da:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4084de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4084e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4084e6:	bf1d      	ittte	ne
  4084e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4084ec:	ea94 0f0c 	teqne	r4, ip
  4084f0:	ea95 0f0c 	teqne	r5, ip
  4084f4:	f000 f8a7 	bleq	408646 <__aeabi_ddiv+0x16e>
  4084f8:	eba4 0405 	sub.w	r4, r4, r5
  4084fc:	ea81 0e03 	eor.w	lr, r1, r3
  408500:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408504:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408508:	f000 8088 	beq.w	40861c <__aeabi_ddiv+0x144>
  40850c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408510:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408514:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408518:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40851c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408520:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408524:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408528:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40852c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408530:	429d      	cmp	r5, r3
  408532:	bf08      	it	eq
  408534:	4296      	cmpeq	r6, r2
  408536:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40853a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40853e:	d202      	bcs.n	408546 <__aeabi_ddiv+0x6e>
  408540:	085b      	lsrs	r3, r3, #1
  408542:	ea4f 0232 	mov.w	r2, r2, rrx
  408546:	1ab6      	subs	r6, r6, r2
  408548:	eb65 0503 	sbc.w	r5, r5, r3
  40854c:	085b      	lsrs	r3, r3, #1
  40854e:	ea4f 0232 	mov.w	r2, r2, rrx
  408552:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408556:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40855a:	ebb6 0e02 	subs.w	lr, r6, r2
  40855e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408562:	bf22      	ittt	cs
  408564:	1ab6      	subcs	r6, r6, r2
  408566:	4675      	movcs	r5, lr
  408568:	ea40 000c 	orrcs.w	r0, r0, ip
  40856c:	085b      	lsrs	r3, r3, #1
  40856e:	ea4f 0232 	mov.w	r2, r2, rrx
  408572:	ebb6 0e02 	subs.w	lr, r6, r2
  408576:	eb75 0e03 	sbcs.w	lr, r5, r3
  40857a:	bf22      	ittt	cs
  40857c:	1ab6      	subcs	r6, r6, r2
  40857e:	4675      	movcs	r5, lr
  408580:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408584:	085b      	lsrs	r3, r3, #1
  408586:	ea4f 0232 	mov.w	r2, r2, rrx
  40858a:	ebb6 0e02 	subs.w	lr, r6, r2
  40858e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408592:	bf22      	ittt	cs
  408594:	1ab6      	subcs	r6, r6, r2
  408596:	4675      	movcs	r5, lr
  408598:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40859c:	085b      	lsrs	r3, r3, #1
  40859e:	ea4f 0232 	mov.w	r2, r2, rrx
  4085a2:	ebb6 0e02 	subs.w	lr, r6, r2
  4085a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4085aa:	bf22      	ittt	cs
  4085ac:	1ab6      	subcs	r6, r6, r2
  4085ae:	4675      	movcs	r5, lr
  4085b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4085b4:	ea55 0e06 	orrs.w	lr, r5, r6
  4085b8:	d018      	beq.n	4085ec <__aeabi_ddiv+0x114>
  4085ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4085be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4085c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4085c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4085ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4085ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4085d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4085d6:	d1c0      	bne.n	40855a <__aeabi_ddiv+0x82>
  4085d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4085dc:	d10b      	bne.n	4085f6 <__aeabi_ddiv+0x11e>
  4085de:	ea41 0100 	orr.w	r1, r1, r0
  4085e2:	f04f 0000 	mov.w	r0, #0
  4085e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4085ea:	e7b6      	b.n	40855a <__aeabi_ddiv+0x82>
  4085ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4085f0:	bf04      	itt	eq
  4085f2:	4301      	orreq	r1, r0
  4085f4:	2000      	moveq	r0, #0
  4085f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4085fa:	bf88      	it	hi
  4085fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408600:	f63f aeaf 	bhi.w	408362 <__aeabi_dmul+0xde>
  408604:	ebb5 0c03 	subs.w	ip, r5, r3
  408608:	bf04      	itt	eq
  40860a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40860e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408612:	f150 0000 	adcs.w	r0, r0, #0
  408616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40861a:	bd70      	pop	{r4, r5, r6, pc}
  40861c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408620:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408624:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408628:	bfc2      	ittt	gt
  40862a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40862e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408632:	bd70      	popgt	{r4, r5, r6, pc}
  408634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408638:	f04f 0e00 	mov.w	lr, #0
  40863c:	3c01      	subs	r4, #1
  40863e:	e690      	b.n	408362 <__aeabi_dmul+0xde>
  408640:	ea45 0e06 	orr.w	lr, r5, r6
  408644:	e68d      	b.n	408362 <__aeabi_dmul+0xde>
  408646:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40864a:	ea94 0f0c 	teq	r4, ip
  40864e:	bf08      	it	eq
  408650:	ea95 0f0c 	teqeq	r5, ip
  408654:	f43f af3b 	beq.w	4084ce <__aeabi_dmul+0x24a>
  408658:	ea94 0f0c 	teq	r4, ip
  40865c:	d10a      	bne.n	408674 <__aeabi_ddiv+0x19c>
  40865e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408662:	f47f af34 	bne.w	4084ce <__aeabi_dmul+0x24a>
  408666:	ea95 0f0c 	teq	r5, ip
  40866a:	f47f af25 	bne.w	4084b8 <__aeabi_dmul+0x234>
  40866e:	4610      	mov	r0, r2
  408670:	4619      	mov	r1, r3
  408672:	e72c      	b.n	4084ce <__aeabi_dmul+0x24a>
  408674:	ea95 0f0c 	teq	r5, ip
  408678:	d106      	bne.n	408688 <__aeabi_ddiv+0x1b0>
  40867a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40867e:	f43f aefd 	beq.w	40847c <__aeabi_dmul+0x1f8>
  408682:	4610      	mov	r0, r2
  408684:	4619      	mov	r1, r3
  408686:	e722      	b.n	4084ce <__aeabi_dmul+0x24a>
  408688:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40868c:	bf18      	it	ne
  40868e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408692:	f47f aec5 	bne.w	408420 <__aeabi_dmul+0x19c>
  408696:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40869a:	f47f af0d 	bne.w	4084b8 <__aeabi_dmul+0x234>
  40869e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4086a2:	f47f aeeb 	bne.w	40847c <__aeabi_dmul+0x1f8>
  4086a6:	e712      	b.n	4084ce <__aeabi_dmul+0x24a>

004086a8 <__gedf2>:
  4086a8:	f04f 3cff 	mov.w	ip, #4294967295
  4086ac:	e006      	b.n	4086bc <__cmpdf2+0x4>
  4086ae:	bf00      	nop

004086b0 <__ledf2>:
  4086b0:	f04f 0c01 	mov.w	ip, #1
  4086b4:	e002      	b.n	4086bc <__cmpdf2+0x4>
  4086b6:	bf00      	nop

004086b8 <__cmpdf2>:
  4086b8:	f04f 0c01 	mov.w	ip, #1
  4086bc:	f84d cd04 	str.w	ip, [sp, #-4]!
  4086c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4086c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4086c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4086cc:	bf18      	it	ne
  4086ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4086d2:	d01b      	beq.n	40870c <__cmpdf2+0x54>
  4086d4:	b001      	add	sp, #4
  4086d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4086da:	bf0c      	ite	eq
  4086dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4086e0:	ea91 0f03 	teqne	r1, r3
  4086e4:	bf02      	ittt	eq
  4086e6:	ea90 0f02 	teqeq	r0, r2
  4086ea:	2000      	moveq	r0, #0
  4086ec:	4770      	bxeq	lr
  4086ee:	f110 0f00 	cmn.w	r0, #0
  4086f2:	ea91 0f03 	teq	r1, r3
  4086f6:	bf58      	it	pl
  4086f8:	4299      	cmppl	r1, r3
  4086fa:	bf08      	it	eq
  4086fc:	4290      	cmpeq	r0, r2
  4086fe:	bf2c      	ite	cs
  408700:	17d8      	asrcs	r0, r3, #31
  408702:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408706:	f040 0001 	orr.w	r0, r0, #1
  40870a:	4770      	bx	lr
  40870c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408710:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408714:	d102      	bne.n	40871c <__cmpdf2+0x64>
  408716:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40871a:	d107      	bne.n	40872c <__cmpdf2+0x74>
  40871c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408724:	d1d6      	bne.n	4086d4 <__cmpdf2+0x1c>
  408726:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40872a:	d0d3      	beq.n	4086d4 <__cmpdf2+0x1c>
  40872c:	f85d 0b04 	ldr.w	r0, [sp], #4
  408730:	4770      	bx	lr
  408732:	bf00      	nop

00408734 <__aeabi_cdrcmple>:
  408734:	4684      	mov	ip, r0
  408736:	4610      	mov	r0, r2
  408738:	4662      	mov	r2, ip
  40873a:	468c      	mov	ip, r1
  40873c:	4619      	mov	r1, r3
  40873e:	4663      	mov	r3, ip
  408740:	e000      	b.n	408744 <__aeabi_cdcmpeq>
  408742:	bf00      	nop

00408744 <__aeabi_cdcmpeq>:
  408744:	b501      	push	{r0, lr}
  408746:	f7ff ffb7 	bl	4086b8 <__cmpdf2>
  40874a:	2800      	cmp	r0, #0
  40874c:	bf48      	it	mi
  40874e:	f110 0f00 	cmnmi.w	r0, #0
  408752:	bd01      	pop	{r0, pc}

00408754 <__aeabi_dcmpeq>:
  408754:	f84d ed08 	str.w	lr, [sp, #-8]!
  408758:	f7ff fff4 	bl	408744 <__aeabi_cdcmpeq>
  40875c:	bf0c      	ite	eq
  40875e:	2001      	moveq	r0, #1
  408760:	2000      	movne	r0, #0
  408762:	f85d fb08 	ldr.w	pc, [sp], #8
  408766:	bf00      	nop

00408768 <__aeabi_dcmplt>:
  408768:	f84d ed08 	str.w	lr, [sp, #-8]!
  40876c:	f7ff ffea 	bl	408744 <__aeabi_cdcmpeq>
  408770:	bf34      	ite	cc
  408772:	2001      	movcc	r0, #1
  408774:	2000      	movcs	r0, #0
  408776:	f85d fb08 	ldr.w	pc, [sp], #8
  40877a:	bf00      	nop

0040877c <__aeabi_dcmple>:
  40877c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408780:	f7ff ffe0 	bl	408744 <__aeabi_cdcmpeq>
  408784:	bf94      	ite	ls
  408786:	2001      	movls	r0, #1
  408788:	2000      	movhi	r0, #0
  40878a:	f85d fb08 	ldr.w	pc, [sp], #8
  40878e:	bf00      	nop

00408790 <__aeabi_dcmpge>:
  408790:	f84d ed08 	str.w	lr, [sp, #-8]!
  408794:	f7ff ffce 	bl	408734 <__aeabi_cdrcmple>
  408798:	bf94      	ite	ls
  40879a:	2001      	movls	r0, #1
  40879c:	2000      	movhi	r0, #0
  40879e:	f85d fb08 	ldr.w	pc, [sp], #8
  4087a2:	bf00      	nop

004087a4 <__aeabi_dcmpgt>:
  4087a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4087a8:	f7ff ffc4 	bl	408734 <__aeabi_cdrcmple>
  4087ac:	bf34      	ite	cc
  4087ae:	2001      	movcc	r0, #1
  4087b0:	2000      	movcs	r0, #0
  4087b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4087b6:	bf00      	nop

004087b8 <__aeabi_dcmpun>:
  4087b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4087bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4087c0:	d102      	bne.n	4087c8 <__aeabi_dcmpun+0x10>
  4087c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4087c6:	d10a      	bne.n	4087de <__aeabi_dcmpun+0x26>
  4087c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4087cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4087d0:	d102      	bne.n	4087d8 <__aeabi_dcmpun+0x20>
  4087d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4087d6:	d102      	bne.n	4087de <__aeabi_dcmpun+0x26>
  4087d8:	f04f 0000 	mov.w	r0, #0
  4087dc:	4770      	bx	lr
  4087de:	f04f 0001 	mov.w	r0, #1
  4087e2:	4770      	bx	lr

004087e4 <__aeabi_d2iz>:
  4087e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4087e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4087ec:	d215      	bcs.n	40881a <__aeabi_d2iz+0x36>
  4087ee:	d511      	bpl.n	408814 <__aeabi_d2iz+0x30>
  4087f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4087f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4087f8:	d912      	bls.n	408820 <__aeabi_d2iz+0x3c>
  4087fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4087fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40880a:	fa23 f002 	lsr.w	r0, r3, r2
  40880e:	bf18      	it	ne
  408810:	4240      	negne	r0, r0
  408812:	4770      	bx	lr
  408814:	f04f 0000 	mov.w	r0, #0
  408818:	4770      	bx	lr
  40881a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40881e:	d105      	bne.n	40882c <__aeabi_d2iz+0x48>
  408820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408824:	bf08      	it	eq
  408826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40882a:	4770      	bx	lr
  40882c:	f04f 0000 	mov.w	r0, #0
  408830:	4770      	bx	lr
  408832:	bf00      	nop

00408834 <__aeabi_uldivmod>:
  408834:	b953      	cbnz	r3, 40884c <__aeabi_uldivmod+0x18>
  408836:	b94a      	cbnz	r2, 40884c <__aeabi_uldivmod+0x18>
  408838:	2900      	cmp	r1, #0
  40883a:	bf08      	it	eq
  40883c:	2800      	cmpeq	r0, #0
  40883e:	bf1c      	itt	ne
  408840:	f04f 31ff 	movne.w	r1, #4294967295
  408844:	f04f 30ff 	movne.w	r0, #4294967295
  408848:	f000 b97e 	b.w	408b48 <__aeabi_idiv0>
  40884c:	f1ad 0c08 	sub.w	ip, sp, #8
  408850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408854:	f000 f806 	bl	408864 <__udivmoddi4>
  408858:	f8dd e004 	ldr.w	lr, [sp, #4]
  40885c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408860:	b004      	add	sp, #16
  408862:	4770      	bx	lr

00408864 <__udivmoddi4>:
  408864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408868:	468c      	mov	ip, r1
  40886a:	460e      	mov	r6, r1
  40886c:	4604      	mov	r4, r0
  40886e:	9d08      	ldr	r5, [sp, #32]
  408870:	2b00      	cmp	r3, #0
  408872:	d150      	bne.n	408916 <__udivmoddi4+0xb2>
  408874:	428a      	cmp	r2, r1
  408876:	4617      	mov	r7, r2
  408878:	d96c      	bls.n	408954 <__udivmoddi4+0xf0>
  40887a:	fab2 fe82 	clz	lr, r2
  40887e:	f1be 0f00 	cmp.w	lr, #0
  408882:	d00b      	beq.n	40889c <__udivmoddi4+0x38>
  408884:	f1ce 0420 	rsb	r4, lr, #32
  408888:	fa20 f404 	lsr.w	r4, r0, r4
  40888c:	fa01 f60e 	lsl.w	r6, r1, lr
  408890:	ea44 0c06 	orr.w	ip, r4, r6
  408894:	fa02 f70e 	lsl.w	r7, r2, lr
  408898:	fa00 f40e 	lsl.w	r4, r0, lr
  40889c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4088a0:	0c22      	lsrs	r2, r4, #16
  4088a2:	fbbc f0f9 	udiv	r0, ip, r9
  4088a6:	fa1f f887 	uxth.w	r8, r7
  4088aa:	fb09 c610 	mls	r6, r9, r0, ip
  4088ae:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4088b2:	fb00 f308 	mul.w	r3, r0, r8
  4088b6:	42b3      	cmp	r3, r6
  4088b8:	d909      	bls.n	4088ce <__udivmoddi4+0x6a>
  4088ba:	19f6      	adds	r6, r6, r7
  4088bc:	f100 32ff 	add.w	r2, r0, #4294967295
  4088c0:	f080 8122 	bcs.w	408b08 <__udivmoddi4+0x2a4>
  4088c4:	42b3      	cmp	r3, r6
  4088c6:	f240 811f 	bls.w	408b08 <__udivmoddi4+0x2a4>
  4088ca:	3802      	subs	r0, #2
  4088cc:	443e      	add	r6, r7
  4088ce:	1af6      	subs	r6, r6, r3
  4088d0:	b2a2      	uxth	r2, r4
  4088d2:	fbb6 f3f9 	udiv	r3, r6, r9
  4088d6:	fb09 6613 	mls	r6, r9, r3, r6
  4088da:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4088de:	fb03 f808 	mul.w	r8, r3, r8
  4088e2:	45a0      	cmp	r8, r4
  4088e4:	d909      	bls.n	4088fa <__udivmoddi4+0x96>
  4088e6:	19e4      	adds	r4, r4, r7
  4088e8:	f103 32ff 	add.w	r2, r3, #4294967295
  4088ec:	f080 810a 	bcs.w	408b04 <__udivmoddi4+0x2a0>
  4088f0:	45a0      	cmp	r8, r4
  4088f2:	f240 8107 	bls.w	408b04 <__udivmoddi4+0x2a0>
  4088f6:	3b02      	subs	r3, #2
  4088f8:	443c      	add	r4, r7
  4088fa:	ebc8 0404 	rsb	r4, r8, r4
  4088fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  408902:	2100      	movs	r1, #0
  408904:	2d00      	cmp	r5, #0
  408906:	d062      	beq.n	4089ce <__udivmoddi4+0x16a>
  408908:	fa24 f40e 	lsr.w	r4, r4, lr
  40890c:	2300      	movs	r3, #0
  40890e:	602c      	str	r4, [r5, #0]
  408910:	606b      	str	r3, [r5, #4]
  408912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408916:	428b      	cmp	r3, r1
  408918:	d907      	bls.n	40892a <__udivmoddi4+0xc6>
  40891a:	2d00      	cmp	r5, #0
  40891c:	d055      	beq.n	4089ca <__udivmoddi4+0x166>
  40891e:	2100      	movs	r1, #0
  408920:	e885 0041 	stmia.w	r5, {r0, r6}
  408924:	4608      	mov	r0, r1
  408926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40892a:	fab3 f183 	clz	r1, r3
  40892e:	2900      	cmp	r1, #0
  408930:	f040 8090 	bne.w	408a54 <__udivmoddi4+0x1f0>
  408934:	42b3      	cmp	r3, r6
  408936:	d302      	bcc.n	40893e <__udivmoddi4+0xda>
  408938:	4282      	cmp	r2, r0
  40893a:	f200 80f8 	bhi.w	408b2e <__udivmoddi4+0x2ca>
  40893e:	1a84      	subs	r4, r0, r2
  408940:	eb66 0603 	sbc.w	r6, r6, r3
  408944:	2001      	movs	r0, #1
  408946:	46b4      	mov	ip, r6
  408948:	2d00      	cmp	r5, #0
  40894a:	d040      	beq.n	4089ce <__udivmoddi4+0x16a>
  40894c:	e885 1010 	stmia.w	r5, {r4, ip}
  408950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408954:	b912      	cbnz	r2, 40895c <__udivmoddi4+0xf8>
  408956:	2701      	movs	r7, #1
  408958:	fbb7 f7f2 	udiv	r7, r7, r2
  40895c:	fab7 fe87 	clz	lr, r7
  408960:	f1be 0f00 	cmp.w	lr, #0
  408964:	d135      	bne.n	4089d2 <__udivmoddi4+0x16e>
  408966:	1bf3      	subs	r3, r6, r7
  408968:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40896c:	fa1f fc87 	uxth.w	ip, r7
  408970:	2101      	movs	r1, #1
  408972:	fbb3 f0f8 	udiv	r0, r3, r8
  408976:	0c22      	lsrs	r2, r4, #16
  408978:	fb08 3610 	mls	r6, r8, r0, r3
  40897c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  408980:	fb0c f300 	mul.w	r3, ip, r0
  408984:	42b3      	cmp	r3, r6
  408986:	d907      	bls.n	408998 <__udivmoddi4+0x134>
  408988:	19f6      	adds	r6, r6, r7
  40898a:	f100 32ff 	add.w	r2, r0, #4294967295
  40898e:	d202      	bcs.n	408996 <__udivmoddi4+0x132>
  408990:	42b3      	cmp	r3, r6
  408992:	f200 80ce 	bhi.w	408b32 <__udivmoddi4+0x2ce>
  408996:	4610      	mov	r0, r2
  408998:	1af6      	subs	r6, r6, r3
  40899a:	b2a2      	uxth	r2, r4
  40899c:	fbb6 f3f8 	udiv	r3, r6, r8
  4089a0:	fb08 6613 	mls	r6, r8, r3, r6
  4089a4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4089a8:	fb0c fc03 	mul.w	ip, ip, r3
  4089ac:	45a4      	cmp	ip, r4
  4089ae:	d907      	bls.n	4089c0 <__udivmoddi4+0x15c>
  4089b0:	19e4      	adds	r4, r4, r7
  4089b2:	f103 32ff 	add.w	r2, r3, #4294967295
  4089b6:	d202      	bcs.n	4089be <__udivmoddi4+0x15a>
  4089b8:	45a4      	cmp	ip, r4
  4089ba:	f200 80b5 	bhi.w	408b28 <__udivmoddi4+0x2c4>
  4089be:	4613      	mov	r3, r2
  4089c0:	ebcc 0404 	rsb	r4, ip, r4
  4089c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4089c8:	e79c      	b.n	408904 <__udivmoddi4+0xa0>
  4089ca:	4629      	mov	r1, r5
  4089cc:	4628      	mov	r0, r5
  4089ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4089d2:	f1ce 0120 	rsb	r1, lr, #32
  4089d6:	fa06 f30e 	lsl.w	r3, r6, lr
  4089da:	fa07 f70e 	lsl.w	r7, r7, lr
  4089de:	fa20 f901 	lsr.w	r9, r0, r1
  4089e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4089e6:	40ce      	lsrs	r6, r1
  4089e8:	ea49 0903 	orr.w	r9, r9, r3
  4089ec:	fbb6 faf8 	udiv	sl, r6, r8
  4089f0:	ea4f 4419 	mov.w	r4, r9, lsr #16
  4089f4:	fb08 661a 	mls	r6, r8, sl, r6
  4089f8:	fa1f fc87 	uxth.w	ip, r7
  4089fc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  408a00:	fb0a f20c 	mul.w	r2, sl, ip
  408a04:	429a      	cmp	r2, r3
  408a06:	fa00 f40e 	lsl.w	r4, r0, lr
  408a0a:	d90a      	bls.n	408a22 <__udivmoddi4+0x1be>
  408a0c:	19db      	adds	r3, r3, r7
  408a0e:	f10a 31ff 	add.w	r1, sl, #4294967295
  408a12:	f080 8087 	bcs.w	408b24 <__udivmoddi4+0x2c0>
  408a16:	429a      	cmp	r2, r3
  408a18:	f240 8084 	bls.w	408b24 <__udivmoddi4+0x2c0>
  408a1c:	f1aa 0a02 	sub.w	sl, sl, #2
  408a20:	443b      	add	r3, r7
  408a22:	1a9b      	subs	r3, r3, r2
  408a24:	fa1f f989 	uxth.w	r9, r9
  408a28:	fbb3 f1f8 	udiv	r1, r3, r8
  408a2c:	fb08 3311 	mls	r3, r8, r1, r3
  408a30:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  408a34:	fb01 f60c 	mul.w	r6, r1, ip
  408a38:	429e      	cmp	r6, r3
  408a3a:	d907      	bls.n	408a4c <__udivmoddi4+0x1e8>
  408a3c:	19db      	adds	r3, r3, r7
  408a3e:	f101 32ff 	add.w	r2, r1, #4294967295
  408a42:	d26b      	bcs.n	408b1c <__udivmoddi4+0x2b8>
  408a44:	429e      	cmp	r6, r3
  408a46:	d969      	bls.n	408b1c <__udivmoddi4+0x2b8>
  408a48:	3902      	subs	r1, #2
  408a4a:	443b      	add	r3, r7
  408a4c:	1b9b      	subs	r3, r3, r6
  408a4e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  408a52:	e78e      	b.n	408972 <__udivmoddi4+0x10e>
  408a54:	f1c1 0e20 	rsb	lr, r1, #32
  408a58:	fa22 f40e 	lsr.w	r4, r2, lr
  408a5c:	408b      	lsls	r3, r1
  408a5e:	4323      	orrs	r3, r4
  408a60:	fa20 f70e 	lsr.w	r7, r0, lr
  408a64:	fa06 f401 	lsl.w	r4, r6, r1
  408a68:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408a6c:	fa26 f60e 	lsr.w	r6, r6, lr
  408a70:	433c      	orrs	r4, r7
  408a72:	fbb6 f9fc 	udiv	r9, r6, ip
  408a76:	0c27      	lsrs	r7, r4, #16
  408a78:	fb0c 6619 	mls	r6, ip, r9, r6
  408a7c:	fa1f f883 	uxth.w	r8, r3
  408a80:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  408a84:	fb09 f708 	mul.w	r7, r9, r8
  408a88:	42b7      	cmp	r7, r6
  408a8a:	fa02 f201 	lsl.w	r2, r2, r1
  408a8e:	fa00 fa01 	lsl.w	sl, r0, r1
  408a92:	d908      	bls.n	408aa6 <__udivmoddi4+0x242>
  408a94:	18f6      	adds	r6, r6, r3
  408a96:	f109 30ff 	add.w	r0, r9, #4294967295
  408a9a:	d241      	bcs.n	408b20 <__udivmoddi4+0x2bc>
  408a9c:	42b7      	cmp	r7, r6
  408a9e:	d93f      	bls.n	408b20 <__udivmoddi4+0x2bc>
  408aa0:	f1a9 0902 	sub.w	r9, r9, #2
  408aa4:	441e      	add	r6, r3
  408aa6:	1bf6      	subs	r6, r6, r7
  408aa8:	b2a0      	uxth	r0, r4
  408aaa:	fbb6 f4fc 	udiv	r4, r6, ip
  408aae:	fb0c 6614 	mls	r6, ip, r4, r6
  408ab2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  408ab6:	fb04 f808 	mul.w	r8, r4, r8
  408aba:	45b8      	cmp	r8, r7
  408abc:	d907      	bls.n	408ace <__udivmoddi4+0x26a>
  408abe:	18ff      	adds	r7, r7, r3
  408ac0:	f104 30ff 	add.w	r0, r4, #4294967295
  408ac4:	d228      	bcs.n	408b18 <__udivmoddi4+0x2b4>
  408ac6:	45b8      	cmp	r8, r7
  408ac8:	d926      	bls.n	408b18 <__udivmoddi4+0x2b4>
  408aca:	3c02      	subs	r4, #2
  408acc:	441f      	add	r7, r3
  408ace:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  408ad2:	ebc8 0707 	rsb	r7, r8, r7
  408ad6:	fba0 8902 	umull	r8, r9, r0, r2
  408ada:	454f      	cmp	r7, r9
  408adc:	4644      	mov	r4, r8
  408ade:	464e      	mov	r6, r9
  408ae0:	d314      	bcc.n	408b0c <__udivmoddi4+0x2a8>
  408ae2:	d029      	beq.n	408b38 <__udivmoddi4+0x2d4>
  408ae4:	b365      	cbz	r5, 408b40 <__udivmoddi4+0x2dc>
  408ae6:	ebba 0304 	subs.w	r3, sl, r4
  408aea:	eb67 0706 	sbc.w	r7, r7, r6
  408aee:	fa07 fe0e 	lsl.w	lr, r7, lr
  408af2:	40cb      	lsrs	r3, r1
  408af4:	40cf      	lsrs	r7, r1
  408af6:	ea4e 0303 	orr.w	r3, lr, r3
  408afa:	e885 0088 	stmia.w	r5, {r3, r7}
  408afe:	2100      	movs	r1, #0
  408b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b04:	4613      	mov	r3, r2
  408b06:	e6f8      	b.n	4088fa <__udivmoddi4+0x96>
  408b08:	4610      	mov	r0, r2
  408b0a:	e6e0      	b.n	4088ce <__udivmoddi4+0x6a>
  408b0c:	ebb8 0402 	subs.w	r4, r8, r2
  408b10:	eb69 0603 	sbc.w	r6, r9, r3
  408b14:	3801      	subs	r0, #1
  408b16:	e7e5      	b.n	408ae4 <__udivmoddi4+0x280>
  408b18:	4604      	mov	r4, r0
  408b1a:	e7d8      	b.n	408ace <__udivmoddi4+0x26a>
  408b1c:	4611      	mov	r1, r2
  408b1e:	e795      	b.n	408a4c <__udivmoddi4+0x1e8>
  408b20:	4681      	mov	r9, r0
  408b22:	e7c0      	b.n	408aa6 <__udivmoddi4+0x242>
  408b24:	468a      	mov	sl, r1
  408b26:	e77c      	b.n	408a22 <__udivmoddi4+0x1be>
  408b28:	3b02      	subs	r3, #2
  408b2a:	443c      	add	r4, r7
  408b2c:	e748      	b.n	4089c0 <__udivmoddi4+0x15c>
  408b2e:	4608      	mov	r0, r1
  408b30:	e70a      	b.n	408948 <__udivmoddi4+0xe4>
  408b32:	3802      	subs	r0, #2
  408b34:	443e      	add	r6, r7
  408b36:	e72f      	b.n	408998 <__udivmoddi4+0x134>
  408b38:	45c2      	cmp	sl, r8
  408b3a:	d3e7      	bcc.n	408b0c <__udivmoddi4+0x2a8>
  408b3c:	463e      	mov	r6, r7
  408b3e:	e7d1      	b.n	408ae4 <__udivmoddi4+0x280>
  408b40:	4629      	mov	r1, r5
  408b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b46:	bf00      	nop

00408b48 <__aeabi_idiv0>:
  408b48:	4770      	bx	lr
  408b4a:	bf00      	nop
  408b4c:	00002580 	.word	0x00002580
  408b50:	000000c0 	.word	0x000000c0
  408b54:	00000800 	.word	0x00000800
	...
  408b64:	000e1000 	.word	0x000e1000
  408b68:	000000c0 	.word	0x000000c0
  408b6c:	00000800 	.word	0x00000800
	...
  408b7c:	20677641 	.word	0x20677641
  408b80:	6c25203d 	.word	0x6c25203d
  408b84:	000a0d75 	.word	0x000a0d75
  408b88:	00000043 	.word	0x00000043

00408b8c <_global_impure_ptr>:
  408b8c:	20000018                                ... 

00408b90 <zeroes.7035>:
  408b90:	30303030 30303030 30303030 30303030     0000000000000000
  408ba0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  408bb0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  408bc0:	00000000 33323130 37363534 62613938     ....0123456789ab
  408bd0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  408be0:	00000030                                0...

00408be4 <blanks.7034>:
  408be4:	20202020 20202020 20202020 20202020                     
  408bf4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  408c04:	49534f50 00000058 0000002e              POSIX.......

00408c10 <__mprec_tens>:
  408c10:	00000000 3ff00000 00000000 40240000     .......?......$@
  408c20:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408c30:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408c40:	00000000 412e8480 00000000 416312d0     .......A......cA
  408c50:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408c60:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408c70:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408c80:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408c90:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408ca0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408cb0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408cc0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408cd0:	79d99db4 44ea7843                       ...yCx.D

00408cd8 <__mprec_bigtens>:
  408cd8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408ce8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408cf8:	7f73bf3c 75154fdd                       <.s..O.u

00408d00 <p05.5373>:
  408d00:	00000005 00000019 0000007d              ........}...

00408d0c <_init>:
  408d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408d0e:	bf00      	nop
  408d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408d12:	bc08      	pop	{r3}
  408d14:	469e      	mov	lr, r3
  408d16:	4770      	bx	lr

00408d18 <__init_array_start>:
  408d18:	00405379 	.word	0x00405379

00408d1c <__frame_dummy_init_array_entry>:
  408d1c:	004000f1                                ..@.

00408d20 <_fini>:
  408d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408d22:	bf00      	nop
  408d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408d26:	bc08      	pop	{r3}
  408d28:	469e      	mov	lr, r3
  408d2a:	4770      	bx	lr

00408d2c <__fini_array_start>:
  408d2c:	004000cd 	.word	0x004000cd
