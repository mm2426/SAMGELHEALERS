
SAMGELHEALERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005220  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405220  00405220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20000000  00405228  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000290  2000086c  00405a94  0002086c  2**2
                  ALLOC
  4 .stack        00003004  20000afc  00405d24  0002086c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020896  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000a12b  00000000  00000000  000208ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000197c  00000000  00000000  0002aa1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005f74  00000000  00000000  0002c396  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a60  00000000  00000000  0003230a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000970  00000000  00000000  00032d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000135a7  00000000  00000000  000336da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b827  00000000  00000000  00046c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f631  00000000  00000000  000524a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000037d8  00000000  00000000  000a1adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003b00 	.word	0x20003b00
  400004:	0040170d 	.word	0x0040170d
  400008:	004017d5 	.word	0x004017d5
  40000c:	004017d5 	.word	0x004017d5
  400010:	004017d5 	.word	0x004017d5
  400014:	004017d5 	.word	0x004017d5
  400018:	004017d5 	.word	0x004017d5
	...
  40002c:	004017d5 	.word	0x004017d5
  400030:	004017d5 	.word	0x004017d5
  400034:	00000000 	.word	0x00000000
  400038:	004017d5 	.word	0x004017d5
  40003c:	004017d5 	.word	0x004017d5
  400040:	004017d5 	.word	0x004017d5
  400044:	004017d5 	.word	0x004017d5
  400048:	004017d5 	.word	0x004017d5
  40004c:	004017d5 	.word	0x004017d5
  400050:	004017d5 	.word	0x004017d5
  400054:	004017d5 	.word	0x004017d5
  400058:	004017d5 	.word	0x004017d5
  40005c:	004017d5 	.word	0x004017d5
  400060:	004017d5 	.word	0x004017d5
  400064:	004017d5 	.word	0x004017d5
  400068:	00000000 	.word	0x00000000
  40006c:	0040065d 	.word	0x0040065d
  400070:	00400675 	.word	0x00400675
  400074:	0040068d 	.word	0x0040068d
  400078:	004017d5 	.word	0x004017d5
  40007c:	004017d5 	.word	0x004017d5
	...
  400088:	004017d5 	.word	0x004017d5
  40008c:	004017d5 	.word	0x004017d5
  400090:	004017d5 	.word	0x004017d5
  400094:	004017d5 	.word	0x004017d5
  400098:	004017d5 	.word	0x004017d5
  40009c:	004017d5 	.word	0x004017d5
  4000a0:	004017d5 	.word	0x004017d5
  4000a4:	004017d5 	.word	0x004017d5
  4000a8:	004017d5 	.word	0x004017d5
  4000ac:	004017d5 	.word	0x004017d5
  4000b0:	004017d5 	.word	0x004017d5
  4000b4:	004017d5 	.word	0x004017d5
  4000b8:	004017d5 	.word	0x004017d5
  4000bc:	004017d5 	.word	0x004017d5
  4000c0:	004017d5 	.word	0x004017d5
  4000c4:	004017d5 	.word	0x004017d5
  4000c8:	004017d5 	.word	0x004017d5

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000086c 	.word	0x2000086c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00405228 	.word	0x00405228

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000870 	.word	0x20000870
  40011c:	00405228 	.word	0x00405228
  400120:	00405228 	.word	0x00405228
  400124:	00000000 	.word	0x00000000

00400128 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400128:	b480      	push	{r7}
  40012a:	b083      	sub	sp, #12
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	2b07      	cmp	r3, #7
  400134:	d825      	bhi.n	400182 <osc_get_rate+0x5a>
  400136:	a201      	add	r2, pc, #4	; (adr r2, 40013c <osc_get_rate+0x14>)
  400138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40013c:	0040015d 	.word	0x0040015d
  400140:	00400163 	.word	0x00400163
  400144:	00400169 	.word	0x00400169
  400148:	0040016f 	.word	0x0040016f
  40014c:	00400173 	.word	0x00400173
  400150:	00400177 	.word	0x00400177
  400154:	0040017b 	.word	0x0040017b
  400158:	0040017f 	.word	0x0040017f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40015c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400160:	e010      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400166:	e00d      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40016c:	e00a      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40016e:	4b08      	ldr	r3, [pc, #32]	; (400190 <osc_get_rate+0x68>)
  400170:	e008      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400172:	4b08      	ldr	r3, [pc, #32]	; (400194 <osc_get_rate+0x6c>)
  400174:	e006      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400176:	4b08      	ldr	r3, [pc, #32]	; (400198 <osc_get_rate+0x70>)
  400178:	e004      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <osc_get_rate+0x70>)
  40017c:	e002      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40017e:	4b06      	ldr	r3, [pc, #24]	; (400198 <osc_get_rate+0x70>)
  400180:	e000      	b.n	400184 <osc_get_rate+0x5c>
	}

	return 0;
  400182:	2300      	movs	r3, #0
}
  400184:	4618      	mov	r0, r3
  400186:	370c      	adds	r7, #12
  400188:	46bd      	mov	sp, r7
  40018a:	bc80      	pop	{r7}
  40018c:	4770      	bx	lr
  40018e:	bf00      	nop
  400190:	003d0900 	.word	0x003d0900
  400194:	007a1200 	.word	0x007a1200
  400198:	00b71b00 	.word	0x00b71b00

0040019c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001a0:	2006      	movs	r0, #6
  4001a2:	4b04      	ldr	r3, [pc, #16]	; (4001b4 <sysclk_get_main_hz+0x18>)
  4001a4:	4798      	blx	r3
  4001a6:	4602      	mov	r2, r0
  4001a8:	4613      	mov	r3, r2
  4001aa:	009b      	lsls	r3, r3, #2
  4001ac:	4413      	add	r3, r2
  4001ae:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001b0:	4618      	mov	r0, r3
  4001b2:	bd80      	pop	{r7, pc}
  4001b4:	00400129 	.word	0x00400129

004001b8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4001b8:	b580      	push	{r7, lr}
  4001ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4001bc:	4b02      	ldr	r3, [pc, #8]	; (4001c8 <sysclk_get_peripheral_hz+0x10>)
  4001be:	4798      	blx	r3
  4001c0:	4603      	mov	r3, r0
  4001c2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4001c4:	4618      	mov	r0, r3
  4001c6:	bd80      	pop	{r7, pc}
  4001c8:	0040019d 	.word	0x0040019d

004001cc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4001cc:	b580      	push	{r7, lr}
  4001ce:	b082      	sub	sp, #8
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4001d4:	6878      	ldr	r0, [r7, #4]
  4001d6:	4b03      	ldr	r3, [pc, #12]	; (4001e4 <sysclk_enable_peripheral_clock+0x18>)
  4001d8:	4798      	blx	r3
}
  4001da:	bf00      	nop
  4001dc:	3708      	adds	r7, #8
  4001de:	46bd      	mov	sp, r7
  4001e0:	bd80      	pop	{r7, pc}
  4001e2:	bf00      	nop
  4001e4:	0040160d 	.word	0x0040160d

004001e8 <SenInitUsart>:
 pdc_packet_t pdcPkt;// pdcPkt2;
 /* Pointer to PDC register base. */
 Pdc *sen1PdcBase, *sen2PdcBase;

 void SenInitUsart(void)
 {
  4001e8:	b5b0      	push	{r4, r5, r7, lr}
  4001ea:	b086      	sub	sp, #24
  4001ec:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  4001ee:	4b30      	ldr	r3, [pc, #192]	; (4002b0 <SenInitUsart+0xc8>)
  4001f0:	463c      	mov	r4, r7
  4001f2:	461d      	mov	r5, r3
  4001f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4001f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4001f8:	e895 0003 	ldmia.w	r5, {r0, r1}
  4001fc:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(SEN1_USART_ID);
  400200:	200f      	movs	r0, #15
  400202:	4b2c      	ldr	r3, [pc, #176]	; (4002b4 <SenInitUsart+0xcc>)
  400204:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs232(SEN1_USART, &usart_console_settings,
  400206:	4b2c      	ldr	r3, [pc, #176]	; (4002b8 <SenInitUsart+0xd0>)
  400208:	4798      	blx	r3
  40020a:	4602      	mov	r2, r0
  40020c:	463b      	mov	r3, r7
  40020e:	4619      	mov	r1, r3
  400210:	482a      	ldr	r0, [pc, #168]	; (4002bc <SenInitUsart+0xd4>)
  400212:	4b2b      	ldr	r3, [pc, #172]	; (4002c0 <SenInitUsart+0xd8>)
  400214:	4798      	blx	r3
	 sysclk_get_peripheral_hz());

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(SEN2_USART_ID);
  400216:	200e      	movs	r0, #14
  400218:	4b26      	ldr	r3, [pc, #152]	; (4002b4 <SenInitUsart+0xcc>)
  40021a:	4798      	blx	r3
	/* Configure USART in RS485 mode. */
	usart_init_rs232(SEN2_USART, &usart_console_settings,
  40021c:	4b26      	ldr	r3, [pc, #152]	; (4002b8 <SenInitUsart+0xd0>)
  40021e:	4798      	blx	r3
  400220:	4602      	mov	r2, r0
  400222:	463b      	mov	r3, r7
  400224:	4619      	mov	r1, r3
  400226:	4827      	ldr	r0, [pc, #156]	; (4002c4 <SenInitUsart+0xdc>)
  400228:	4b25      	ldr	r3, [pc, #148]	; (4002c0 <SenInitUsart+0xd8>)
  40022a:	4798      	blx	r3
		sysclk_get_peripheral_hz());

	 /* Enable RX function. */
	 usart_disable_tx(SEN1_USART);
  40022c:	4823      	ldr	r0, [pc, #140]	; (4002bc <SenInitUsart+0xd4>)
  40022e:	4b26      	ldr	r3, [pc, #152]	; (4002c8 <SenInitUsart+0xe0>)
  400230:	4798      	blx	r3
	 usart_enable_rx(SEN1_USART);
  400232:	4822      	ldr	r0, [pc, #136]	; (4002bc <SenInitUsart+0xd4>)
  400234:	4b25      	ldr	r3, [pc, #148]	; (4002cc <SenInitUsart+0xe4>)
  400236:	4798      	blx	r3
	 usart_disable_tx(SEN2_USART);
  400238:	4822      	ldr	r0, [pc, #136]	; (4002c4 <SenInitUsart+0xdc>)
  40023a:	4b23      	ldr	r3, [pc, #140]	; (4002c8 <SenInitUsart+0xe0>)
  40023c:	4798      	blx	r3
	 usart_enable_rx(SEN2_USART);
  40023e:	4821      	ldr	r0, [pc, #132]	; (4002c4 <SenInitUsart+0xdc>)
  400240:	4b22      	ldr	r3, [pc, #136]	; (4002cc <SenInitUsart+0xe4>)
  400242:	4798      	blx	r3

	/* Get board USART PDC base address and enable receiver and transmitter. */
	sen1PdcBase = usart_get_pdc_base(SEN1_USART);
  400244:	481d      	ldr	r0, [pc, #116]	; (4002bc <SenInitUsart+0xd4>)
  400246:	4b22      	ldr	r3, [pc, #136]	; (4002d0 <SenInitUsart+0xe8>)
  400248:	4798      	blx	r3
  40024a:	4602      	mov	r2, r0
  40024c:	4b21      	ldr	r3, [pc, #132]	; (4002d4 <SenInitUsart+0xec>)
  40024e:	601a      	str	r2, [r3, #0]
	pdc_enable_transfer(sen1PdcBase, PERIPH_PTCR_RXTEN);
  400250:	4b20      	ldr	r3, [pc, #128]	; (4002d4 <SenInitUsart+0xec>)
  400252:	681b      	ldr	r3, [r3, #0]
  400254:	2101      	movs	r1, #1
  400256:	4618      	mov	r0, r3
  400258:	4b1f      	ldr	r3, [pc, #124]	; (4002d8 <SenInitUsart+0xf0>)
  40025a:	4798      	blx	r3

	sen2PdcBase = usart_get_pdc_base(SEN2_USART);
  40025c:	4819      	ldr	r0, [pc, #100]	; (4002c4 <SenInitUsart+0xdc>)
  40025e:	4b1c      	ldr	r3, [pc, #112]	; (4002d0 <SenInitUsart+0xe8>)
  400260:	4798      	blx	r3
  400262:	4602      	mov	r2, r0
  400264:	4b1d      	ldr	r3, [pc, #116]	; (4002dc <SenInitUsart+0xf4>)
  400266:	601a      	str	r2, [r3, #0]
	pdc_enable_transfer(sen2PdcBase, PERIPH_PTCR_RXTEN);
  400268:	4b1c      	ldr	r3, [pc, #112]	; (4002dc <SenInitUsart+0xf4>)
  40026a:	681b      	ldr	r3, [r3, #0]
  40026c:	2101      	movs	r1, #1
  40026e:	4618      	mov	r0, r3
  400270:	4b19      	ldr	r3, [pc, #100]	; (4002d8 <SenInitUsart+0xf0>)
  400272:	4798      	blx	r3
	
	pdcPkt.ul_addr = (uint32_t) sen1Buff;
  400274:	4a1a      	ldr	r2, [pc, #104]	; (4002e0 <SenInitUsart+0xf8>)
  400276:	4b1b      	ldr	r3, [pc, #108]	; (4002e4 <SenInitUsart+0xfc>)
  400278:	601a      	str	r2, [r3, #0]
	pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  40027a:	4b1a      	ldr	r3, [pc, #104]	; (4002e4 <SenInitUsart+0xfc>)
  40027c:	22c8      	movs	r2, #200	; 0xc8
  40027e:	605a      	str	r2, [r3, #4]
	//For circular buffer operation
	pdc_rx_init(sen1PdcBase, &pdcPkt, &pdcPkt);
  400280:	4b14      	ldr	r3, [pc, #80]	; (4002d4 <SenInitUsart+0xec>)
  400282:	681b      	ldr	r3, [r3, #0]
  400284:	4a17      	ldr	r2, [pc, #92]	; (4002e4 <SenInitUsart+0xfc>)
  400286:	4917      	ldr	r1, [pc, #92]	; (4002e4 <SenInitUsart+0xfc>)
  400288:	4618      	mov	r0, r3
  40028a:	4b17      	ldr	r3, [pc, #92]	; (4002e8 <SenInitUsart+0x100>)
  40028c:	4798      	blx	r3

	pdcPkt.ul_addr = (uint32_t) sen2Buff;
  40028e:	4a17      	ldr	r2, [pc, #92]	; (4002ec <SenInitUsart+0x104>)
  400290:	4b14      	ldr	r3, [pc, #80]	; (4002e4 <SenInitUsart+0xfc>)
  400292:	601a      	str	r2, [r3, #0]
	pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  400294:	4b13      	ldr	r3, [pc, #76]	; (4002e4 <SenInitUsart+0xfc>)
  400296:	22c8      	movs	r2, #200	; 0xc8
  400298:	605a      	str	r2, [r3, #4]
	//For circular buffer operation
	pdc_rx_init(sen2PdcBase, &pdcPkt, &pdcPkt);
  40029a:	4b10      	ldr	r3, [pc, #64]	; (4002dc <SenInitUsart+0xf4>)
  40029c:	681b      	ldr	r3, [r3, #0]
  40029e:	4a11      	ldr	r2, [pc, #68]	; (4002e4 <SenInitUsart+0xfc>)
  4002a0:	4910      	ldr	r1, [pc, #64]	; (4002e4 <SenInitUsart+0xfc>)
  4002a2:	4618      	mov	r0, r3
  4002a4:	4b10      	ldr	r3, [pc, #64]	; (4002e8 <SenInitUsart+0x100>)
  4002a6:	4798      	blx	r3

 }
  4002a8:	bf00      	nop
  4002aa:	3718      	adds	r7, #24
  4002ac:	46bd      	mov	sp, r7
  4002ae:	bdb0      	pop	{r4, r5, r7, pc}
  4002b0:	0040516c 	.word	0x0040516c
  4002b4:	004001cd 	.word	0x004001cd
  4002b8:	004001b9 	.word	0x004001b9
  4002bc:	40028000 	.word	0x40028000
  4002c0:	0040084d 	.word	0x0040084d
  4002c4:	40024000 	.word	0x40024000
  4002c8:	004008e9 	.word	0x004008e9
  4002cc:	00400919 	.word	0x00400919
  4002d0:	00400a01 	.word	0x00400a01
  4002d4:	20000ae0 	.word	0x20000ae0
  4002d8:	00400e05 	.word	0x00400e05
  4002dc:	20000adc 	.word	0x20000adc
  4002e0:	20000888 	.word	0x20000888
  4002e4:	20000ad4 	.word	0x20000ad4
  4002e8:	00400dc1 	.word	0x00400dc1
  4002ec:	20000950 	.word	0x20000950

004002f0 <SenPdcManageBuff>:

 void SenPdcManageBuff(void)
 {
  4002f0:	b580      	push	{r7, lr}
  4002f2:	af00      	add	r7, sp, #0
	/* If PDC receive next pointer is 0 */
	if(pdc_read_rx_next_counter(sen1PdcBase)==0)
  4002f4:	4b22      	ldr	r3, [pc, #136]	; (400380 <SenPdcManageBuff+0x90>)
  4002f6:	681b      	ldr	r3, [r3, #0]
  4002f8:	4618      	mov	r0, r3
  4002fa:	4b22      	ldr	r3, [pc, #136]	; (400384 <SenPdcManageBuff+0x94>)
  4002fc:	4798      	blx	r3
  4002fe:	4603      	mov	r3, r0
  400300:	2b00      	cmp	r3, #0
  400302:	d10c      	bne.n	40031e <SenPdcManageBuff+0x2e>
	{
		/* If code reaches here it means current buffer is full and 
		next buffer ptr is assigned to current buffer ptr by PDC. */
		pdcPkt.ul_addr = (uint32_t) sen1Buff;
  400304:	4a20      	ldr	r2, [pc, #128]	; (400388 <SenPdcManageBuff+0x98>)
  400306:	4b21      	ldr	r3, [pc, #132]	; (40038c <SenPdcManageBuff+0x9c>)
  400308:	601a      	str	r2, [r3, #0]
		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  40030a:	4b20      	ldr	r3, [pc, #128]	; (40038c <SenPdcManageBuff+0x9c>)
  40030c:	22c8      	movs	r2, #200	; 0xc8
  40030e:	605a      	str	r2, [r3, #4]
		//For circular buffer operation infinitely
		pdc_rx_init(sen1PdcBase, NULL, &pdcPkt);
  400310:	4b1b      	ldr	r3, [pc, #108]	; (400380 <SenPdcManageBuff+0x90>)
  400312:	681b      	ldr	r3, [r3, #0]
  400314:	4a1d      	ldr	r2, [pc, #116]	; (40038c <SenPdcManageBuff+0x9c>)
  400316:	2100      	movs	r1, #0
  400318:	4618      	mov	r0, r3
  40031a:	4b1d      	ldr	r3, [pc, #116]	; (400390 <SenPdcManageBuff+0xa0>)
  40031c:	4798      	blx	r3
	}
	sen1Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen1PdcBase);
  40031e:	4b18      	ldr	r3, [pc, #96]	; (400380 <SenPdcManageBuff+0x90>)
  400320:	681b      	ldr	r3, [r3, #0]
  400322:	4618      	mov	r0, r3
  400324:	4b1b      	ldr	r3, [pc, #108]	; (400394 <SenPdcManageBuff+0xa4>)
  400326:	4798      	blx	r3
  400328:	4603      	mov	r3, r0
  40032a:	b2da      	uxtb	r2, r3
  40032c:	f06f 0337 	mvn.w	r3, #55	; 0x37
  400330:	1a9b      	subs	r3, r3, r2
  400332:	b2da      	uxtb	r2, r3
  400334:	4b18      	ldr	r3, [pc, #96]	; (400398 <SenPdcManageBuff+0xa8>)
  400336:	701a      	strb	r2, [r3, #0]

	/* If PDC receive next pointer is 0 */
	if(pdc_read_rx_next_counter(sen2PdcBase)==0)
  400338:	4b18      	ldr	r3, [pc, #96]	; (40039c <SenPdcManageBuff+0xac>)
  40033a:	681b      	ldr	r3, [r3, #0]
  40033c:	4618      	mov	r0, r3
  40033e:	4b11      	ldr	r3, [pc, #68]	; (400384 <SenPdcManageBuff+0x94>)
  400340:	4798      	blx	r3
  400342:	4603      	mov	r3, r0
  400344:	2b00      	cmp	r3, #0
  400346:	d10c      	bne.n	400362 <SenPdcManageBuff+0x72>
	{
		/* If code reaches here it means current buffer is full and 
		next buffer ptr is assigned to current buffer ptr by PDC. */
		pdcPkt.ul_addr = (uint32_t) sen2Buff;
  400348:	4a15      	ldr	r2, [pc, #84]	; (4003a0 <SenPdcManageBuff+0xb0>)
  40034a:	4b10      	ldr	r3, [pc, #64]	; (40038c <SenPdcManageBuff+0x9c>)
  40034c:	601a      	str	r2, [r3, #0]
		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  40034e:	4b0f      	ldr	r3, [pc, #60]	; (40038c <SenPdcManageBuff+0x9c>)
  400350:	22c8      	movs	r2, #200	; 0xc8
  400352:	605a      	str	r2, [r3, #4]
		//For circular buffer operation infinitely
		pdc_rx_init(sen2PdcBase, NULL, &pdcPkt);
  400354:	4b11      	ldr	r3, [pc, #68]	; (40039c <SenPdcManageBuff+0xac>)
  400356:	681b      	ldr	r3, [r3, #0]
  400358:	4a0c      	ldr	r2, [pc, #48]	; (40038c <SenPdcManageBuff+0x9c>)
  40035a:	2100      	movs	r1, #0
  40035c:	4618      	mov	r0, r3
  40035e:	4b0c      	ldr	r3, [pc, #48]	; (400390 <SenPdcManageBuff+0xa0>)
  400360:	4798      	blx	r3
	}
	sen2Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen2PdcBase);
  400362:	4b0e      	ldr	r3, [pc, #56]	; (40039c <SenPdcManageBuff+0xac>)
  400364:	681b      	ldr	r3, [r3, #0]
  400366:	4618      	mov	r0, r3
  400368:	4b0a      	ldr	r3, [pc, #40]	; (400394 <SenPdcManageBuff+0xa4>)
  40036a:	4798      	blx	r3
  40036c:	4603      	mov	r3, r0
  40036e:	b2da      	uxtb	r2, r3
  400370:	f06f 0337 	mvn.w	r3, #55	; 0x37
  400374:	1a9b      	subs	r3, r3, r2
  400376:	b2da      	uxtb	r2, r3
  400378:	4b0a      	ldr	r3, [pc, #40]	; (4003a4 <SenPdcManageBuff+0xb4>)
  40037a:	701a      	strb	r2, [r3, #0]
 }
  40037c:	bf00      	nop
  40037e:	bd80      	pop	{r7, pc}
  400380:	20000ae0 	.word	0x20000ae0
  400384:	00400e3d 	.word	0x00400e3d
  400388:	20000888 	.word	0x20000888
  40038c:	20000ad4 	.word	0x20000ad4
  400390:	00400dc1 	.word	0x00400dc1
  400394:	00400e25 	.word	0x00400e25
  400398:	20000a1a 	.word	0x20000a1a
  40039c:	20000adc 	.word	0x20000adc
  4003a0:	20000950 	.word	0x20000950
  4003a4:	20000a1b 	.word	0x20000a1b

004003a8 <SenGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t SenGetRxBytes(uint8_t senNo)
 {
  4003a8:	b480      	push	{r7}
  4003aa:	b085      	sub	sp, #20
  4003ac:	af00      	add	r7, sp, #0
  4003ae:	4603      	mov	r3, r0
  4003b0:	71fb      	strb	r3, [r7, #7]
	uint32_t recvdBytes;
	if(senNo == 1)
  4003b2:	79fb      	ldrb	r3, [r7, #7]
  4003b4:	2b01      	cmp	r3, #1
  4003b6:	d11f      	bne.n	4003f8 <SenGetRxBytes+0x50>
	{
		if(sen1Wptr>sen1Rptr)
  4003b8:	4b22      	ldr	r3, [pc, #136]	; (400444 <SenGetRxBytes+0x9c>)
  4003ba:	781a      	ldrb	r2, [r3, #0]
  4003bc:	4b22      	ldr	r3, [pc, #136]	; (400448 <SenGetRxBytes+0xa0>)
  4003be:	781b      	ldrb	r3, [r3, #0]
  4003c0:	429a      	cmp	r2, r3
  4003c2:	d907      	bls.n	4003d4 <SenGetRxBytes+0x2c>
		{
			recvdBytes = (sen1Wptr-sen1Rptr);
  4003c4:	4b1f      	ldr	r3, [pc, #124]	; (400444 <SenGetRxBytes+0x9c>)
  4003c6:	781b      	ldrb	r3, [r3, #0]
  4003c8:	461a      	mov	r2, r3
  4003ca:	4b1f      	ldr	r3, [pc, #124]	; (400448 <SenGetRxBytes+0xa0>)
  4003cc:	781b      	ldrb	r3, [r3, #0]
  4003ce:	1ad3      	subs	r3, r2, r3
  4003d0:	60fb      	str	r3, [r7, #12]
  4003d2:	e030      	b.n	400436 <SenGetRxBytes+0x8e>
		}
		else if(sen1Wptr<sen1Rptr)
  4003d4:	4b1b      	ldr	r3, [pc, #108]	; (400444 <SenGetRxBytes+0x9c>)
  4003d6:	781a      	ldrb	r2, [r3, #0]
  4003d8:	4b1b      	ldr	r3, [pc, #108]	; (400448 <SenGetRxBytes+0xa0>)
  4003da:	781b      	ldrb	r3, [r3, #0]
  4003dc:	429a      	cmp	r2, r3
  4003de:	d208      	bcs.n	4003f2 <SenGetRxBytes+0x4a>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen1Rptr) + sen1Wptr;
  4003e0:	4b19      	ldr	r3, [pc, #100]	; (400448 <SenGetRxBytes+0xa0>)
  4003e2:	781b      	ldrb	r3, [r3, #0]
  4003e4:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  4003e8:	4a16      	ldr	r2, [pc, #88]	; (400444 <SenGetRxBytes+0x9c>)
  4003ea:	7812      	ldrb	r2, [r2, #0]
  4003ec:	4413      	add	r3, r2
  4003ee:	60fb      	str	r3, [r7, #12]
  4003f0:	e021      	b.n	400436 <SenGetRxBytes+0x8e>
		}
		else
		{
			recvdBytes = 0;
  4003f2:	2300      	movs	r3, #0
  4003f4:	60fb      	str	r3, [r7, #12]
  4003f6:	e01e      	b.n	400436 <SenGetRxBytes+0x8e>
		}
	}
	else
	{
		if(sen2Wptr>sen2Rptr)
  4003f8:	4b14      	ldr	r3, [pc, #80]	; (40044c <SenGetRxBytes+0xa4>)
  4003fa:	781a      	ldrb	r2, [r3, #0]
  4003fc:	4b14      	ldr	r3, [pc, #80]	; (400450 <SenGetRxBytes+0xa8>)
  4003fe:	781b      	ldrb	r3, [r3, #0]
  400400:	429a      	cmp	r2, r3
  400402:	d907      	bls.n	400414 <SenGetRxBytes+0x6c>
		{
			recvdBytes = (sen2Wptr-sen2Rptr);
  400404:	4b11      	ldr	r3, [pc, #68]	; (40044c <SenGetRxBytes+0xa4>)
  400406:	781b      	ldrb	r3, [r3, #0]
  400408:	461a      	mov	r2, r3
  40040a:	4b11      	ldr	r3, [pc, #68]	; (400450 <SenGetRxBytes+0xa8>)
  40040c:	781b      	ldrb	r3, [r3, #0]
  40040e:	1ad3      	subs	r3, r2, r3
  400410:	60fb      	str	r3, [r7, #12]
  400412:	e010      	b.n	400436 <SenGetRxBytes+0x8e>
		}
		else if(sen2Wptr<sen2Rptr)
  400414:	4b0d      	ldr	r3, [pc, #52]	; (40044c <SenGetRxBytes+0xa4>)
  400416:	781a      	ldrb	r2, [r3, #0]
  400418:	4b0d      	ldr	r3, [pc, #52]	; (400450 <SenGetRxBytes+0xa8>)
  40041a:	781b      	ldrb	r3, [r3, #0]
  40041c:	429a      	cmp	r2, r3
  40041e:	d208      	bcs.n	400432 <SenGetRxBytes+0x8a>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen2Rptr) + sen2Wptr;
  400420:	4b0b      	ldr	r3, [pc, #44]	; (400450 <SenGetRxBytes+0xa8>)
  400422:	781b      	ldrb	r3, [r3, #0]
  400424:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400428:	4a08      	ldr	r2, [pc, #32]	; (40044c <SenGetRxBytes+0xa4>)
  40042a:	7812      	ldrb	r2, [r2, #0]
  40042c:	4413      	add	r3, r2
  40042e:	60fb      	str	r3, [r7, #12]
  400430:	e001      	b.n	400436 <SenGetRxBytes+0x8e>
		}
		else
		{
			recvdBytes = 0;
  400432:	2300      	movs	r3, #0
  400434:	60fb      	str	r3, [r7, #12]
		}
	}
	
	return recvdBytes;
  400436:	68fb      	ldr	r3, [r7, #12]
 }
  400438:	4618      	mov	r0, r3
  40043a:	3714      	adds	r7, #20
  40043c:	46bd      	mov	sp, r7
  40043e:	bc80      	pop	{r7}
  400440:	4770      	bx	lr
  400442:	bf00      	nop
  400444:	20000a1a 	.word	0x20000a1a
  400448:	20000a18 	.word	0x20000a18
  40044c:	20000a1b 	.word	0x20000a1b
  400450:	20000a19 	.word	0x20000a19

00400454 <SenGetByte>:

 uint8_t SenGetByte(uint8_t senNo)
 {
  400454:	b480      	push	{r7}
  400456:	b085      	sub	sp, #20
  400458:	af00      	add	r7, sp, #0
  40045a:	4603      	mov	r3, r0
  40045c:	71fb      	strb	r3, [r7, #7]
	uint8_t dataByte;
	if(senNo==1)
  40045e:	79fb      	ldrb	r3, [r7, #7]
  400460:	2b01      	cmp	r3, #1
  400462:	d111      	bne.n	400488 <SenGetByte+0x34>
	{
		dataByte = sen1Buff[sen1Rptr++];
  400464:	4b14      	ldr	r3, [pc, #80]	; (4004b8 <SenGetByte+0x64>)
  400466:	781b      	ldrb	r3, [r3, #0]
  400468:	1c5a      	adds	r2, r3, #1
  40046a:	b2d1      	uxtb	r1, r2
  40046c:	4a12      	ldr	r2, [pc, #72]	; (4004b8 <SenGetByte+0x64>)
  40046e:	7011      	strb	r1, [r2, #0]
  400470:	461a      	mov	r2, r3
  400472:	4b12      	ldr	r3, [pc, #72]	; (4004bc <SenGetByte+0x68>)
  400474:	5c9b      	ldrb	r3, [r3, r2]
  400476:	73fb      	strb	r3, [r7, #15]
		if(sen1Rptr>=SEN_USART_BUFF_SIZE)
  400478:	4b0f      	ldr	r3, [pc, #60]	; (4004b8 <SenGetByte+0x64>)
  40047a:	781b      	ldrb	r3, [r3, #0]
  40047c:	2bc7      	cmp	r3, #199	; 0xc7
  40047e:	d914      	bls.n	4004aa <SenGetByte+0x56>
			sen1Rptr = 0;
  400480:	4b0d      	ldr	r3, [pc, #52]	; (4004b8 <SenGetByte+0x64>)
  400482:	2200      	movs	r2, #0
  400484:	701a      	strb	r2, [r3, #0]
  400486:	e010      	b.n	4004aa <SenGetByte+0x56>
	}
	else
	{
		dataByte = sen2Buff[sen2Rptr++];
  400488:	4b0d      	ldr	r3, [pc, #52]	; (4004c0 <SenGetByte+0x6c>)
  40048a:	781b      	ldrb	r3, [r3, #0]
  40048c:	1c5a      	adds	r2, r3, #1
  40048e:	b2d1      	uxtb	r1, r2
  400490:	4a0b      	ldr	r2, [pc, #44]	; (4004c0 <SenGetByte+0x6c>)
  400492:	7011      	strb	r1, [r2, #0]
  400494:	461a      	mov	r2, r3
  400496:	4b0b      	ldr	r3, [pc, #44]	; (4004c4 <SenGetByte+0x70>)
  400498:	5c9b      	ldrb	r3, [r3, r2]
  40049a:	73fb      	strb	r3, [r7, #15]
		if(sen2Rptr>=SEN_USART_BUFF_SIZE)
  40049c:	4b08      	ldr	r3, [pc, #32]	; (4004c0 <SenGetByte+0x6c>)
  40049e:	781b      	ldrb	r3, [r3, #0]
  4004a0:	2bc7      	cmp	r3, #199	; 0xc7
  4004a2:	d902      	bls.n	4004aa <SenGetByte+0x56>
			sen2Rptr = 0;
  4004a4:	4b06      	ldr	r3, [pc, #24]	; (4004c0 <SenGetByte+0x6c>)
  4004a6:	2200      	movs	r2, #0
  4004a8:	701a      	strb	r2, [r3, #0]
	}
	return dataByte;
  4004aa:	7bfb      	ldrb	r3, [r7, #15]
  4004ac:	4618      	mov	r0, r3
  4004ae:	3714      	adds	r7, #20
  4004b0:	46bd      	mov	sp, r7
  4004b2:	bc80      	pop	{r7}
  4004b4:	4770      	bx	lr
  4004b6:	bf00      	nop
  4004b8:	20000a18 	.word	0x20000a18
  4004bc:	20000888 	.word	0x20000888
  4004c0:	20000a19 	.word	0x20000a19
  4004c4:	20000950 	.word	0x20000950

004004c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4004c8:	b580      	push	{r7, lr}
  4004ca:	b086      	sub	sp, #24
  4004cc:	af00      	add	r7, sp, #0
  4004ce:	60f8      	str	r0, [r7, #12]
  4004d0:	60b9      	str	r1, [r7, #8]
  4004d2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4004d4:	2300      	movs	r3, #0
  4004d6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4004d8:	68fb      	ldr	r3, [r7, #12]
  4004da:	2b00      	cmp	r3, #0
  4004dc:	d012      	beq.n	400504 <_read+0x3c>
		return -1;
  4004de:	f04f 33ff 	mov.w	r3, #4294967295
  4004e2:	e013      	b.n	40050c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4004e4:	4b0b      	ldr	r3, [pc, #44]	; (400514 <_read+0x4c>)
  4004e6:	681b      	ldr	r3, [r3, #0]
  4004e8:	4a0b      	ldr	r2, [pc, #44]	; (400518 <_read+0x50>)
  4004ea:	6812      	ldr	r2, [r2, #0]
  4004ec:	68b9      	ldr	r1, [r7, #8]
  4004ee:	4610      	mov	r0, r2
  4004f0:	4798      	blx	r3
		ptr++;
  4004f2:	68bb      	ldr	r3, [r7, #8]
  4004f4:	3301      	adds	r3, #1
  4004f6:	60bb      	str	r3, [r7, #8]
		nChars++;
  4004f8:	697b      	ldr	r3, [r7, #20]
  4004fa:	3301      	adds	r3, #1
  4004fc:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4004fe:	687b      	ldr	r3, [r7, #4]
  400500:	3b01      	subs	r3, #1
  400502:	607b      	str	r3, [r7, #4]
  400504:	687b      	ldr	r3, [r7, #4]
  400506:	2b00      	cmp	r3, #0
  400508:	dcec      	bgt.n	4004e4 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40050a:	697b      	ldr	r3, [r7, #20]
}
  40050c:	4618      	mov	r0, r3
  40050e:	3718      	adds	r7, #24
  400510:	46bd      	mov	sp, r7
  400512:	bd80      	pop	{r7, pc}
  400514:	20000ae4 	.word	0x20000ae4
  400518:	20000aec 	.word	0x20000aec

0040051c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40051c:	b580      	push	{r7, lr}
  40051e:	b086      	sub	sp, #24
  400520:	af00      	add	r7, sp, #0
  400522:	60f8      	str	r0, [r7, #12]
  400524:	60b9      	str	r1, [r7, #8]
  400526:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400528:	2300      	movs	r3, #0
  40052a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40052c:	68fb      	ldr	r3, [r7, #12]
  40052e:	2b01      	cmp	r3, #1
  400530:	d01e      	beq.n	400570 <_write+0x54>
  400532:	68fb      	ldr	r3, [r7, #12]
  400534:	2b02      	cmp	r3, #2
  400536:	d01b      	beq.n	400570 <_write+0x54>
  400538:	68fb      	ldr	r3, [r7, #12]
  40053a:	2b03      	cmp	r3, #3
  40053c:	d018      	beq.n	400570 <_write+0x54>
		return -1;
  40053e:	f04f 33ff 	mov.w	r3, #4294967295
  400542:	e019      	b.n	400578 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400544:	4b0e      	ldr	r3, [pc, #56]	; (400580 <_write+0x64>)
  400546:	681a      	ldr	r2, [r3, #0]
  400548:	4b0e      	ldr	r3, [pc, #56]	; (400584 <_write+0x68>)
  40054a:	6818      	ldr	r0, [r3, #0]
  40054c:	68bb      	ldr	r3, [r7, #8]
  40054e:	1c59      	adds	r1, r3, #1
  400550:	60b9      	str	r1, [r7, #8]
  400552:	781b      	ldrb	r3, [r3, #0]
  400554:	4619      	mov	r1, r3
  400556:	4790      	blx	r2
  400558:	4603      	mov	r3, r0
  40055a:	2b00      	cmp	r3, #0
  40055c:	da02      	bge.n	400564 <_write+0x48>
			return -1;
  40055e:	f04f 33ff 	mov.w	r3, #4294967295
  400562:	e009      	b.n	400578 <_write+0x5c>
		}
		++nChars;
  400564:	697b      	ldr	r3, [r7, #20]
  400566:	3301      	adds	r3, #1
  400568:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40056a:	687b      	ldr	r3, [r7, #4]
  40056c:	3b01      	subs	r3, #1
  40056e:	607b      	str	r3, [r7, #4]
  400570:	687b      	ldr	r3, [r7, #4]
  400572:	2b00      	cmp	r3, #0
  400574:	d1e6      	bne.n	400544 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  400576:	697b      	ldr	r3, [r7, #20]
}
  400578:	4618      	mov	r0, r3
  40057a:	3718      	adds	r7, #24
  40057c:	46bd      	mov	sp, r7
  40057e:	bd80      	pop	{r7, pc}
  400580:	20000ae8 	.word	0x20000ae8
  400584:	20000aec 	.word	0x20000aec

00400588 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400588:	b580      	push	{r7, lr}
  40058a:	b084      	sub	sp, #16
  40058c:	af00      	add	r7, sp, #0
  40058e:	6078      	str	r0, [r7, #4]
  400590:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400592:	6878      	ldr	r0, [r7, #4]
  400594:	4b2c      	ldr	r3, [pc, #176]	; (400648 <pio_handler_process+0xc0>)
  400596:	4798      	blx	r3
  400598:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40059a:	6878      	ldr	r0, [r7, #4]
  40059c:	4b2b      	ldr	r3, [pc, #172]	; (40064c <pio_handler_process+0xc4>)
  40059e:	4798      	blx	r3
  4005a0:	4602      	mov	r2, r0
  4005a2:	68fb      	ldr	r3, [r7, #12]
  4005a4:	4013      	ands	r3, r2
  4005a6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4005a8:	68fb      	ldr	r3, [r7, #12]
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	d03c      	beq.n	400628 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4005ae:	2300      	movs	r3, #0
  4005b0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4005b2:	e034      	b.n	40061e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4005b4:	4a26      	ldr	r2, [pc, #152]	; (400650 <pio_handler_process+0xc8>)
  4005b6:	68bb      	ldr	r3, [r7, #8]
  4005b8:	011b      	lsls	r3, r3, #4
  4005ba:	4413      	add	r3, r2
  4005bc:	681a      	ldr	r2, [r3, #0]
  4005be:	683b      	ldr	r3, [r7, #0]
  4005c0:	429a      	cmp	r2, r3
  4005c2:	d126      	bne.n	400612 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4005c4:	4a22      	ldr	r2, [pc, #136]	; (400650 <pio_handler_process+0xc8>)
  4005c6:	68bb      	ldr	r3, [r7, #8]
  4005c8:	011b      	lsls	r3, r3, #4
  4005ca:	4413      	add	r3, r2
  4005cc:	3304      	adds	r3, #4
  4005ce:	681a      	ldr	r2, [r3, #0]
  4005d0:	68fb      	ldr	r3, [r7, #12]
  4005d2:	4013      	ands	r3, r2
  4005d4:	2b00      	cmp	r3, #0
  4005d6:	d01c      	beq.n	400612 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4005d8:	4a1d      	ldr	r2, [pc, #116]	; (400650 <pio_handler_process+0xc8>)
  4005da:	68bb      	ldr	r3, [r7, #8]
  4005dc:	011b      	lsls	r3, r3, #4
  4005de:	4413      	add	r3, r2
  4005e0:	330c      	adds	r3, #12
  4005e2:	681b      	ldr	r3, [r3, #0]
  4005e4:	491a      	ldr	r1, [pc, #104]	; (400650 <pio_handler_process+0xc8>)
  4005e6:	68ba      	ldr	r2, [r7, #8]
  4005e8:	0112      	lsls	r2, r2, #4
  4005ea:	440a      	add	r2, r1
  4005ec:	6810      	ldr	r0, [r2, #0]
  4005ee:	4918      	ldr	r1, [pc, #96]	; (400650 <pio_handler_process+0xc8>)
  4005f0:	68ba      	ldr	r2, [r7, #8]
  4005f2:	0112      	lsls	r2, r2, #4
  4005f4:	440a      	add	r2, r1
  4005f6:	3204      	adds	r2, #4
  4005f8:	6812      	ldr	r2, [r2, #0]
  4005fa:	4611      	mov	r1, r2
  4005fc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4005fe:	4a14      	ldr	r2, [pc, #80]	; (400650 <pio_handler_process+0xc8>)
  400600:	68bb      	ldr	r3, [r7, #8]
  400602:	011b      	lsls	r3, r3, #4
  400604:	4413      	add	r3, r2
  400606:	3304      	adds	r3, #4
  400608:	681b      	ldr	r3, [r3, #0]
  40060a:	43db      	mvns	r3, r3
  40060c:	68fa      	ldr	r2, [r7, #12]
  40060e:	4013      	ands	r3, r2
  400610:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400612:	68bb      	ldr	r3, [r7, #8]
  400614:	3301      	adds	r3, #1
  400616:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400618:	68bb      	ldr	r3, [r7, #8]
  40061a:	2b06      	cmp	r3, #6
  40061c:	d803      	bhi.n	400626 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40061e:	68fb      	ldr	r3, [r7, #12]
  400620:	2b00      	cmp	r3, #0
  400622:	d1c7      	bne.n	4005b4 <pio_handler_process+0x2c>
  400624:	e000      	b.n	400628 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400626:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400628:	4b0a      	ldr	r3, [pc, #40]	; (400654 <pio_handler_process+0xcc>)
  40062a:	681b      	ldr	r3, [r3, #0]
  40062c:	2b00      	cmp	r3, #0
  40062e:	d007      	beq.n	400640 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400630:	4b09      	ldr	r3, [pc, #36]	; (400658 <pio_handler_process+0xd0>)
  400632:	681b      	ldr	r3, [r3, #0]
  400634:	2b00      	cmp	r3, #0
  400636:	d003      	beq.n	400640 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400638:	4b07      	ldr	r3, [pc, #28]	; (400658 <pio_handler_process+0xd0>)
  40063a:	681b      	ldr	r3, [r3, #0]
  40063c:	6878      	ldr	r0, [r7, #4]
  40063e:	4798      	blx	r3
		}
	}
#endif
}
  400640:	bf00      	nop
  400642:	3710      	adds	r7, #16
  400644:	46bd      	mov	sp, r7
  400646:	bd80      	pop	{r7, pc}
  400648:	00401091 	.word	0x00401091
  40064c:	004010a9 	.word	0x004010a9
  400650:	20000a1c 	.word	0x20000a1c
  400654:	20000af0 	.word	0x20000af0
  400658:	20000a8c 	.word	0x20000a8c

0040065c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40065c:	b580      	push	{r7, lr}
  40065e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400660:	210b      	movs	r1, #11
  400662:	4802      	ldr	r0, [pc, #8]	; (40066c <PIOA_Handler+0x10>)
  400664:	4b02      	ldr	r3, [pc, #8]	; (400670 <PIOA_Handler+0x14>)
  400666:	4798      	blx	r3
}
  400668:	bf00      	nop
  40066a:	bd80      	pop	{r7, pc}
  40066c:	400e0e00 	.word	0x400e0e00
  400670:	00400589 	.word	0x00400589

00400674 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400674:	b580      	push	{r7, lr}
  400676:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400678:	210c      	movs	r1, #12
  40067a:	4802      	ldr	r0, [pc, #8]	; (400684 <PIOB_Handler+0x10>)
  40067c:	4b02      	ldr	r3, [pc, #8]	; (400688 <PIOB_Handler+0x14>)
  40067e:	4798      	blx	r3
}
  400680:	bf00      	nop
  400682:	bd80      	pop	{r7, pc}
  400684:	400e1000 	.word	0x400e1000
  400688:	00400589 	.word	0x00400589

0040068c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40068c:	b580      	push	{r7, lr}
  40068e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400690:	210d      	movs	r1, #13
  400692:	4802      	ldr	r0, [pc, #8]	; (40069c <PIOC_Handler+0x10>)
  400694:	4b02      	ldr	r3, [pc, #8]	; (4006a0 <PIOC_Handler+0x14>)
  400696:	4798      	blx	r3
}
  400698:	bf00      	nop
  40069a:	bd80      	pop	{r7, pc}
  40069c:	400e1200 	.word	0x400e1200
  4006a0:	00400589 	.word	0x00400589

004006a4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4006a4:	b480      	push	{r7}
  4006a6:	b085      	sub	sp, #20
  4006a8:	af00      	add	r7, sp, #0
  4006aa:	6078      	str	r0, [r7, #4]
  4006ac:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4006ae:	2300      	movs	r3, #0
  4006b0:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4006b2:	687b      	ldr	r3, [r7, #4]
  4006b4:	22ac      	movs	r2, #172	; 0xac
  4006b6:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4006b8:	683b      	ldr	r3, [r7, #0]
  4006ba:	681a      	ldr	r2, [r3, #0]
  4006bc:	683b      	ldr	r3, [r7, #0]
  4006be:	685b      	ldr	r3, [r3, #4]
  4006c0:	fbb2 f3f3 	udiv	r3, r2, r3
  4006c4:	091b      	lsrs	r3, r3, #4
  4006c6:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4006c8:	68fb      	ldr	r3, [r7, #12]
  4006ca:	2b00      	cmp	r3, #0
  4006cc:	d003      	beq.n	4006d6 <uart_init+0x32>
  4006ce:	68fb      	ldr	r3, [r7, #12]
  4006d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4006d4:	d301      	bcc.n	4006da <uart_init+0x36>
		return 1;
  4006d6:	2301      	movs	r3, #1
  4006d8:	e00f      	b.n	4006fa <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  4006da:	687b      	ldr	r3, [r7, #4]
  4006dc:	68fa      	ldr	r2, [r7, #12]
  4006de:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4006e0:	683b      	ldr	r3, [r7, #0]
  4006e2:	689a      	ldr	r2, [r3, #8]
  4006e4:	687b      	ldr	r3, [r7, #4]
  4006e6:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4006e8:	687b      	ldr	r3, [r7, #4]
  4006ea:	f240 2202 	movw	r2, #514	; 0x202
  4006ee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4006f2:	687b      	ldr	r3, [r7, #4]
  4006f4:	2250      	movs	r2, #80	; 0x50
  4006f6:	601a      	str	r2, [r3, #0]

	return 0;
  4006f8:	2300      	movs	r3, #0
}
  4006fa:	4618      	mov	r0, r3
  4006fc:	3714      	adds	r7, #20
  4006fe:	46bd      	mov	sp, r7
  400700:	bc80      	pop	{r7}
  400702:	4770      	bx	lr

00400704 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  400704:	b480      	push	{r7}
  400706:	b083      	sub	sp, #12
  400708:	af00      	add	r7, sp, #0
  40070a:	6078      	str	r0, [r7, #4]
  40070c:	460b      	mov	r3, r1
  40070e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400710:	687b      	ldr	r3, [r7, #4]
  400712:	695b      	ldr	r3, [r3, #20]
  400714:	f003 0302 	and.w	r3, r3, #2
  400718:	2b00      	cmp	r3, #0
  40071a:	d101      	bne.n	400720 <uart_write+0x1c>
		return 1;
  40071c:	2301      	movs	r3, #1
  40071e:	e003      	b.n	400728 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  400720:	78fa      	ldrb	r2, [r7, #3]
  400722:	687b      	ldr	r3, [r7, #4]
  400724:	61da      	str	r2, [r3, #28]
	return 0;
  400726:	2300      	movs	r3, #0
}
  400728:	4618      	mov	r0, r3
  40072a:	370c      	adds	r7, #12
  40072c:	46bd      	mov	sp, r7
  40072e:	bc80      	pop	{r7}
  400730:	4770      	bx	lr
  400732:	bf00      	nop

00400734 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  400734:	b480      	push	{r7}
  400736:	b083      	sub	sp, #12
  400738:	af00      	add	r7, sp, #0
  40073a:	6078      	str	r0, [r7, #4]
  40073c:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40073e:	687b      	ldr	r3, [r7, #4]
  400740:	695b      	ldr	r3, [r3, #20]
  400742:	f003 0301 	and.w	r3, r3, #1
  400746:	2b00      	cmp	r3, #0
  400748:	d101      	bne.n	40074e <uart_read+0x1a>
		return 1;
  40074a:	2301      	movs	r3, #1
  40074c:	e005      	b.n	40075a <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40074e:	687b      	ldr	r3, [r7, #4]
  400750:	699b      	ldr	r3, [r3, #24]
  400752:	b2da      	uxtb	r2, r3
  400754:	683b      	ldr	r3, [r7, #0]
  400756:	701a      	strb	r2, [r3, #0]
	return 0;
  400758:	2300      	movs	r3, #0
}
  40075a:	4618      	mov	r0, r3
  40075c:	370c      	adds	r7, #12
  40075e:	46bd      	mov	sp, r7
  400760:	bc80      	pop	{r7}
  400762:	4770      	bx	lr

00400764 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400764:	b480      	push	{r7}
  400766:	b089      	sub	sp, #36	; 0x24
  400768:	af00      	add	r7, sp, #0
  40076a:	60f8      	str	r0, [r7, #12]
  40076c:	60b9      	str	r1, [r7, #8]
  40076e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400770:	68bb      	ldr	r3, [r7, #8]
  400772:	011a      	lsls	r2, r3, #4
  400774:	687b      	ldr	r3, [r7, #4]
  400776:	429a      	cmp	r2, r3
  400778:	d802      	bhi.n	400780 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40077a:	2310      	movs	r3, #16
  40077c:	61fb      	str	r3, [r7, #28]
  40077e:	e001      	b.n	400784 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400780:	2308      	movs	r3, #8
  400782:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400784:	687b      	ldr	r3, [r7, #4]
  400786:	00da      	lsls	r2, r3, #3
  400788:	69fb      	ldr	r3, [r7, #28]
  40078a:	68b9      	ldr	r1, [r7, #8]
  40078c:	fb01 f303 	mul.w	r3, r1, r3
  400790:	085b      	lsrs	r3, r3, #1
  400792:	441a      	add	r2, r3
  400794:	69fb      	ldr	r3, [r7, #28]
  400796:	68b9      	ldr	r1, [r7, #8]
  400798:	fb01 f303 	mul.w	r3, r1, r3
  40079c:	fbb2 f3f3 	udiv	r3, r2, r3
  4007a0:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4007a2:	69bb      	ldr	r3, [r7, #24]
  4007a4:	08db      	lsrs	r3, r3, #3
  4007a6:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4007a8:	69bb      	ldr	r3, [r7, #24]
  4007aa:	f003 0307 	and.w	r3, r3, #7
  4007ae:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4007b0:	697b      	ldr	r3, [r7, #20]
  4007b2:	2b00      	cmp	r3, #0
  4007b4:	d003      	beq.n	4007be <usart_set_async_baudrate+0x5a>
  4007b6:	697b      	ldr	r3, [r7, #20]
  4007b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4007bc:	d301      	bcc.n	4007c2 <usart_set_async_baudrate+0x5e>
		return 1;
  4007be:	2301      	movs	r3, #1
  4007c0:	e00f      	b.n	4007e2 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	2b08      	cmp	r3, #8
  4007c6:	d105      	bne.n	4007d4 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4007c8:	68fb      	ldr	r3, [r7, #12]
  4007ca:	685b      	ldr	r3, [r3, #4]
  4007cc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4007d0:	68fb      	ldr	r3, [r7, #12]
  4007d2:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4007d4:	693b      	ldr	r3, [r7, #16]
  4007d6:	041a      	lsls	r2, r3, #16
  4007d8:	697b      	ldr	r3, [r7, #20]
  4007da:	431a      	orrs	r2, r3
  4007dc:	68fb      	ldr	r3, [r7, #12]
  4007de:	621a      	str	r2, [r3, #32]

	return 0;
  4007e0:	2300      	movs	r3, #0
}
  4007e2:	4618      	mov	r0, r3
  4007e4:	3724      	adds	r7, #36	; 0x24
  4007e6:	46bd      	mov	sp, r7
  4007e8:	bc80      	pop	{r7}
  4007ea:	4770      	bx	lr

004007ec <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4007ec:	b580      	push	{r7, lr}
  4007ee:	b082      	sub	sp, #8
  4007f0:	af00      	add	r7, sp, #0
  4007f2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4007f4:	6878      	ldr	r0, [r7, #4]
  4007f6:	4b0f      	ldr	r3, [pc, #60]	; (400834 <usart_reset+0x48>)
  4007f8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4007fa:	687b      	ldr	r3, [r7, #4]
  4007fc:	2200      	movs	r2, #0
  4007fe:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400800:	687b      	ldr	r3, [r7, #4]
  400802:	2200      	movs	r2, #0
  400804:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400806:	687b      	ldr	r3, [r7, #4]
  400808:	2200      	movs	r2, #0
  40080a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40080c:	6878      	ldr	r0, [r7, #4]
  40080e:	4b0a      	ldr	r3, [pc, #40]	; (400838 <usart_reset+0x4c>)
  400810:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400812:	6878      	ldr	r0, [r7, #4]
  400814:	4b09      	ldr	r3, [pc, #36]	; (40083c <usart_reset+0x50>)
  400816:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400818:	6878      	ldr	r0, [r7, #4]
  40081a:	4b09      	ldr	r3, [pc, #36]	; (400840 <usart_reset+0x54>)
  40081c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40081e:	6878      	ldr	r0, [r7, #4]
  400820:	4b08      	ldr	r3, [pc, #32]	; (400844 <usart_reset+0x58>)
  400822:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400824:	6878      	ldr	r0, [r7, #4]
  400826:	4b08      	ldr	r3, [pc, #32]	; (400848 <usart_reset+0x5c>)
  400828:	4798      	blx	r3
#endif
}
  40082a:	bf00      	nop
  40082c:	3708      	adds	r7, #8
  40082e:	46bd      	mov	sp, r7
  400830:	bd80      	pop	{r7, pc}
  400832:	bf00      	nop
  400834:	00400a49 	.word	0x00400a49
  400838:	00400901 	.word	0x00400901
  40083c:	00400931 	.word	0x00400931
  400840:	00400949 	.word	0x00400949
  400844:	00400981 	.word	0x00400981
  400848:	00400965 	.word	0x00400965

0040084c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40084c:	b580      	push	{r7, lr}
  40084e:	b084      	sub	sp, #16
  400850:	af00      	add	r7, sp, #0
  400852:	60f8      	str	r0, [r7, #12]
  400854:	60b9      	str	r1, [r7, #8]
  400856:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400858:	68f8      	ldr	r0, [r7, #12]
  40085a:	4b1a      	ldr	r3, [pc, #104]	; (4008c4 <usart_init_rs232+0x78>)
  40085c:	4798      	blx	r3

	ul_reg_val = 0;
  40085e:	4b1a      	ldr	r3, [pc, #104]	; (4008c8 <usart_init_rs232+0x7c>)
  400860:	2200      	movs	r2, #0
  400862:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400864:	68bb      	ldr	r3, [r7, #8]
  400866:	2b00      	cmp	r3, #0
  400868:	d009      	beq.n	40087e <usart_init_rs232+0x32>
  40086a:	68bb      	ldr	r3, [r7, #8]
  40086c:	681b      	ldr	r3, [r3, #0]
  40086e:	687a      	ldr	r2, [r7, #4]
  400870:	4619      	mov	r1, r3
  400872:	68f8      	ldr	r0, [r7, #12]
  400874:	4b15      	ldr	r3, [pc, #84]	; (4008cc <usart_init_rs232+0x80>)
  400876:	4798      	blx	r3
  400878:	4603      	mov	r3, r0
  40087a:	2b00      	cmp	r3, #0
  40087c:	d001      	beq.n	400882 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40087e:	2301      	movs	r3, #1
  400880:	e01b      	b.n	4008ba <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400882:	68bb      	ldr	r3, [r7, #8]
  400884:	685a      	ldr	r2, [r3, #4]
  400886:	68bb      	ldr	r3, [r7, #8]
  400888:	689b      	ldr	r3, [r3, #8]
  40088a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40088c:	68bb      	ldr	r3, [r7, #8]
  40088e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400890:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400892:	68bb      	ldr	r3, [r7, #8]
  400894:	68db      	ldr	r3, [r3, #12]
  400896:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400898:	4b0b      	ldr	r3, [pc, #44]	; (4008c8 <usart_init_rs232+0x7c>)
  40089a:	681b      	ldr	r3, [r3, #0]
  40089c:	4313      	orrs	r3, r2
  40089e:	4a0a      	ldr	r2, [pc, #40]	; (4008c8 <usart_init_rs232+0x7c>)
  4008a0:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4008a2:	4b09      	ldr	r3, [pc, #36]	; (4008c8 <usart_init_rs232+0x7c>)
  4008a4:	681b      	ldr	r3, [r3, #0]
  4008a6:	4a08      	ldr	r2, [pc, #32]	; (4008c8 <usart_init_rs232+0x7c>)
  4008a8:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4008aa:	68fb      	ldr	r3, [r7, #12]
  4008ac:	685a      	ldr	r2, [r3, #4]
  4008ae:	4b06      	ldr	r3, [pc, #24]	; (4008c8 <usart_init_rs232+0x7c>)
  4008b0:	681b      	ldr	r3, [r3, #0]
  4008b2:	431a      	orrs	r2, r3
  4008b4:	68fb      	ldr	r3, [r7, #12]
  4008b6:	605a      	str	r2, [r3, #4]

	return 0;
  4008b8:	2300      	movs	r3, #0
}
  4008ba:	4618      	mov	r0, r3
  4008bc:	3710      	adds	r7, #16
  4008be:	46bd      	mov	sp, r7
  4008c0:	bd80      	pop	{r7, pc}
  4008c2:	bf00      	nop
  4008c4:	004007ed 	.word	0x004007ed
  4008c8:	20000a90 	.word	0x20000a90
  4008cc:	00400765 	.word	0x00400765

004008d0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4008d0:	b480      	push	{r7}
  4008d2:	b083      	sub	sp, #12
  4008d4:	af00      	add	r7, sp, #0
  4008d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4008d8:	687b      	ldr	r3, [r7, #4]
  4008da:	2240      	movs	r2, #64	; 0x40
  4008dc:	601a      	str	r2, [r3, #0]
}
  4008de:	bf00      	nop
  4008e0:	370c      	adds	r7, #12
  4008e2:	46bd      	mov	sp, r7
  4008e4:	bc80      	pop	{r7}
  4008e6:	4770      	bx	lr

004008e8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  4008e8:	b480      	push	{r7}
  4008ea:	b083      	sub	sp, #12
  4008ec:	af00      	add	r7, sp, #0
  4008ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  4008f0:	687b      	ldr	r3, [r7, #4]
  4008f2:	2280      	movs	r2, #128	; 0x80
  4008f4:	601a      	str	r2, [r3, #0]
}
  4008f6:	bf00      	nop
  4008f8:	370c      	adds	r7, #12
  4008fa:	46bd      	mov	sp, r7
  4008fc:	bc80      	pop	{r7}
  4008fe:	4770      	bx	lr

00400900 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400900:	b480      	push	{r7}
  400902:	b083      	sub	sp, #12
  400904:	af00      	add	r7, sp, #0
  400906:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400908:	687b      	ldr	r3, [r7, #4]
  40090a:	2288      	movs	r2, #136	; 0x88
  40090c:	601a      	str	r2, [r3, #0]
}
  40090e:	bf00      	nop
  400910:	370c      	adds	r7, #12
  400912:	46bd      	mov	sp, r7
  400914:	bc80      	pop	{r7}
  400916:	4770      	bx	lr

00400918 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400918:	b480      	push	{r7}
  40091a:	b083      	sub	sp, #12
  40091c:	af00      	add	r7, sp, #0
  40091e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400920:	687b      	ldr	r3, [r7, #4]
  400922:	2210      	movs	r2, #16
  400924:	601a      	str	r2, [r3, #0]
}
  400926:	bf00      	nop
  400928:	370c      	adds	r7, #12
  40092a:	46bd      	mov	sp, r7
  40092c:	bc80      	pop	{r7}
  40092e:	4770      	bx	lr

00400930 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400930:	b480      	push	{r7}
  400932:	b083      	sub	sp, #12
  400934:	af00      	add	r7, sp, #0
  400936:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400938:	687b      	ldr	r3, [r7, #4]
  40093a:	2224      	movs	r2, #36	; 0x24
  40093c:	601a      	str	r2, [r3, #0]
}
  40093e:	bf00      	nop
  400940:	370c      	adds	r7, #12
  400942:	46bd      	mov	sp, r7
  400944:	bc80      	pop	{r7}
  400946:	4770      	bx	lr

00400948 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400948:	b480      	push	{r7}
  40094a:	b083      	sub	sp, #12
  40094c:	af00      	add	r7, sp, #0
  40094e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400950:	687b      	ldr	r3, [r7, #4]
  400952:	f44f 7280 	mov.w	r2, #256	; 0x100
  400956:	601a      	str	r2, [r3, #0]
}
  400958:	bf00      	nop
  40095a:	370c      	adds	r7, #12
  40095c:	46bd      	mov	sp, r7
  40095e:	bc80      	pop	{r7}
  400960:	4770      	bx	lr
  400962:	bf00      	nop

00400964 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400964:	b480      	push	{r7}
  400966:	b083      	sub	sp, #12
  400968:	af00      	add	r7, sp, #0
  40096a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  40096c:	687b      	ldr	r3, [r7, #4]
  40096e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400972:	601a      	str	r2, [r3, #0]
}
  400974:	bf00      	nop
  400976:	370c      	adds	r7, #12
  400978:	46bd      	mov	sp, r7
  40097a:	bc80      	pop	{r7}
  40097c:	4770      	bx	lr
  40097e:	bf00      	nop

00400980 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400980:	b480      	push	{r7}
  400982:	b083      	sub	sp, #12
  400984:	af00      	add	r7, sp, #0
  400986:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400988:	687b      	ldr	r3, [r7, #4]
  40098a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40098e:	601a      	str	r2, [r3, #0]
}
  400990:	bf00      	nop
  400992:	370c      	adds	r7, #12
  400994:	46bd      	mov	sp, r7
  400996:	bc80      	pop	{r7}
  400998:	4770      	bx	lr
  40099a:	bf00      	nop

0040099c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  40099c:	b480      	push	{r7}
  40099e:	b083      	sub	sp, #12
  4009a0:	af00      	add	r7, sp, #0
  4009a2:	6078      	str	r0, [r7, #4]
  4009a4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4009a6:	687b      	ldr	r3, [r7, #4]
  4009a8:	695b      	ldr	r3, [r3, #20]
  4009aa:	f003 0302 	and.w	r3, r3, #2
  4009ae:	2b00      	cmp	r3, #0
  4009b0:	d101      	bne.n	4009b6 <usart_write+0x1a>
		return 1;
  4009b2:	2301      	movs	r3, #1
  4009b4:	e005      	b.n	4009c2 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4009b6:	683b      	ldr	r3, [r7, #0]
  4009b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4009bc:	687b      	ldr	r3, [r7, #4]
  4009be:	61da      	str	r2, [r3, #28]
	return 0;
  4009c0:	2300      	movs	r3, #0
}
  4009c2:	4618      	mov	r0, r3
  4009c4:	370c      	adds	r7, #12
  4009c6:	46bd      	mov	sp, r7
  4009c8:	bc80      	pop	{r7}
  4009ca:	4770      	bx	lr

004009cc <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4009cc:	b480      	push	{r7}
  4009ce:	b083      	sub	sp, #12
  4009d0:	af00      	add	r7, sp, #0
  4009d2:	6078      	str	r0, [r7, #4]
  4009d4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4009d6:	687b      	ldr	r3, [r7, #4]
  4009d8:	695b      	ldr	r3, [r3, #20]
  4009da:	f003 0301 	and.w	r3, r3, #1
  4009de:	2b00      	cmp	r3, #0
  4009e0:	d101      	bne.n	4009e6 <usart_read+0x1a>
		return 1;
  4009e2:	2301      	movs	r3, #1
  4009e4:	e006      	b.n	4009f4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4009e6:	687b      	ldr	r3, [r7, #4]
  4009e8:	699b      	ldr	r3, [r3, #24]
  4009ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4009ee:	683b      	ldr	r3, [r7, #0]
  4009f0:	601a      	str	r2, [r3, #0]

	return 0;
  4009f2:	2300      	movs	r3, #0
}
  4009f4:	4618      	mov	r0, r3
  4009f6:	370c      	adds	r7, #12
  4009f8:	46bd      	mov	sp, r7
  4009fa:	bc80      	pop	{r7}
  4009fc:	4770      	bx	lr
  4009fe:	bf00      	nop

00400a00 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  400a00:	b480      	push	{r7}
  400a02:	b085      	sub	sp, #20
  400a04:	af00      	add	r7, sp, #0
  400a06:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  400a08:	2300      	movs	r3, #0
  400a0a:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  400a0c:	687b      	ldr	r3, [r7, #4]
  400a0e:	4a0a      	ldr	r2, [pc, #40]	; (400a38 <usart_get_pdc_base+0x38>)
  400a10:	4293      	cmp	r3, r2
  400a12:	d103      	bne.n	400a1c <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  400a14:	4b09      	ldr	r3, [pc, #36]	; (400a3c <usart_get_pdc_base+0x3c>)
  400a16:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400a18:	68fb      	ldr	r3, [r7, #12]
  400a1a:	e008      	b.n	400a2e <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  400a1c:	687b      	ldr	r3, [r7, #4]
  400a1e:	4a08      	ldr	r2, [pc, #32]	; (400a40 <usart_get_pdc_base+0x40>)
  400a20:	4293      	cmp	r3, r2
  400a22:	d103      	bne.n	400a2c <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  400a24:	4b07      	ldr	r3, [pc, #28]	; (400a44 <usart_get_pdc_base+0x44>)
  400a26:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	e000      	b.n	400a2e <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  400a2c:	68fb      	ldr	r3, [r7, #12]
}
  400a2e:	4618      	mov	r0, r3
  400a30:	3714      	adds	r7, #20
  400a32:	46bd      	mov	sp, r7
  400a34:	bc80      	pop	{r7}
  400a36:	4770      	bx	lr
  400a38:	40024000 	.word	0x40024000
  400a3c:	40024100 	.word	0x40024100
  400a40:	40028000 	.word	0x40028000
  400a44:	40028100 	.word	0x40028100

00400a48 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400a48:	b480      	push	{r7}
  400a4a:	b083      	sub	sp, #12
  400a4c:	af00      	add	r7, sp, #0
  400a4e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400a50:	687b      	ldr	r3, [r7, #4]
  400a52:	4a04      	ldr	r2, [pc, #16]	; (400a64 <usart_disable_writeprotect+0x1c>)
  400a54:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400a58:	bf00      	nop
  400a5a:	370c      	adds	r7, #12
  400a5c:	46bd      	mov	sp, r7
  400a5e:	bc80      	pop	{r7}
  400a60:	4770      	bx	lr
  400a62:	bf00      	nop
  400a64:	55534100 	.word	0x55534100

00400a68 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400a68:	b580      	push	{r7, lr}
  400a6a:	b082      	sub	sp, #8
  400a6c:	af00      	add	r7, sp, #0
  400a6e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a70:	687b      	ldr	r3, [r7, #4]
  400a72:	2b07      	cmp	r3, #7
  400a74:	d831      	bhi.n	400ada <osc_enable+0x72>
  400a76:	a201      	add	r2, pc, #4	; (adr r2, 400a7c <osc_enable+0x14>)
  400a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a7c:	00400ad9 	.word	0x00400ad9
  400a80:	00400a9d 	.word	0x00400a9d
  400a84:	00400aa5 	.word	0x00400aa5
  400a88:	00400aad 	.word	0x00400aad
  400a8c:	00400ab5 	.word	0x00400ab5
  400a90:	00400abd 	.word	0x00400abd
  400a94:	00400ac5 	.word	0x00400ac5
  400a98:	00400acf 	.word	0x00400acf
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400a9c:	2000      	movs	r0, #0
  400a9e:	4b11      	ldr	r3, [pc, #68]	; (400ae4 <osc_enable+0x7c>)
  400aa0:	4798      	blx	r3
		break;
  400aa2:	e01a      	b.n	400ada <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400aa4:	2001      	movs	r0, #1
  400aa6:	4b0f      	ldr	r3, [pc, #60]	; (400ae4 <osc_enable+0x7c>)
  400aa8:	4798      	blx	r3
		break;
  400aaa:	e016      	b.n	400ada <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400aac:	2000      	movs	r0, #0
  400aae:	4b0e      	ldr	r3, [pc, #56]	; (400ae8 <osc_enable+0x80>)
  400ab0:	4798      	blx	r3
		break;
  400ab2:	e012      	b.n	400ada <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400ab4:	2010      	movs	r0, #16
  400ab6:	4b0c      	ldr	r3, [pc, #48]	; (400ae8 <osc_enable+0x80>)
  400ab8:	4798      	blx	r3
		break;
  400aba:	e00e      	b.n	400ada <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400abc:	2020      	movs	r0, #32
  400abe:	4b0a      	ldr	r3, [pc, #40]	; (400ae8 <osc_enable+0x80>)
  400ac0:	4798      	blx	r3
		break;
  400ac2:	e00a      	b.n	400ada <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400ac4:	213e      	movs	r1, #62	; 0x3e
  400ac6:	2000      	movs	r0, #0
  400ac8:	4b08      	ldr	r3, [pc, #32]	; (400aec <osc_enable+0x84>)
  400aca:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400acc:	e005      	b.n	400ada <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400ace:	213e      	movs	r1, #62	; 0x3e
  400ad0:	2001      	movs	r0, #1
  400ad2:	4b06      	ldr	r3, [pc, #24]	; (400aec <osc_enable+0x84>)
  400ad4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400ad6:	e000      	b.n	400ada <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  400ad8:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  400ada:	bf00      	nop
  400adc:	3708      	adds	r7, #8
  400ade:	46bd      	mov	sp, r7
  400ae0:	bd80      	pop	{r7, pc}
  400ae2:	bf00      	nop
  400ae4:	00401441 	.word	0x00401441
  400ae8:	004014ad 	.word	0x004014ad
  400aec:	0040151d 	.word	0x0040151d

00400af0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400af0:	b580      	push	{r7, lr}
  400af2:	b082      	sub	sp, #8
  400af4:	af00      	add	r7, sp, #0
  400af6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400af8:	687b      	ldr	r3, [r7, #4]
  400afa:	2b07      	cmp	r3, #7
  400afc:	d826      	bhi.n	400b4c <osc_is_ready+0x5c>
  400afe:	a201      	add	r2, pc, #4	; (adr r2, 400b04 <osc_is_ready+0x14>)
  400b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b04:	00400b25 	.word	0x00400b25
  400b08:	00400b29 	.word	0x00400b29
  400b0c:	00400b29 	.word	0x00400b29
  400b10:	00400b3b 	.word	0x00400b3b
  400b14:	00400b3b 	.word	0x00400b3b
  400b18:	00400b3b 	.word	0x00400b3b
  400b1c:	00400b3b 	.word	0x00400b3b
  400b20:	00400b3b 	.word	0x00400b3b
	case OSC_SLCK_32K_RC:
		return 1;
  400b24:	2301      	movs	r3, #1
  400b26:	e012      	b.n	400b4e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400b28:	4b0b      	ldr	r3, [pc, #44]	; (400b58 <osc_is_ready+0x68>)
  400b2a:	4798      	blx	r3
  400b2c:	4603      	mov	r3, r0
  400b2e:	2b00      	cmp	r3, #0
  400b30:	bf14      	ite	ne
  400b32:	2301      	movne	r3, #1
  400b34:	2300      	moveq	r3, #0
  400b36:	b2db      	uxtb	r3, r3
  400b38:	e009      	b.n	400b4e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400b3a:	4b08      	ldr	r3, [pc, #32]	; (400b5c <osc_is_ready+0x6c>)
  400b3c:	4798      	blx	r3
  400b3e:	4603      	mov	r3, r0
  400b40:	2b00      	cmp	r3, #0
  400b42:	bf14      	ite	ne
  400b44:	2301      	movne	r3, #1
  400b46:	2300      	moveq	r3, #0
  400b48:	b2db      	uxtb	r3, r3
  400b4a:	e000      	b.n	400b4e <osc_is_ready+0x5e>
	}

	return 0;
  400b4c:	2300      	movs	r3, #0
}
  400b4e:	4618      	mov	r0, r3
  400b50:	3708      	adds	r7, #8
  400b52:	46bd      	mov	sp, r7
  400b54:	bd80      	pop	{r7, pc}
  400b56:	bf00      	nop
  400b58:	00401479 	.word	0x00401479
  400b5c:	00401595 	.word	0x00401595

00400b60 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400b60:	b480      	push	{r7}
  400b62:	b083      	sub	sp, #12
  400b64:	af00      	add	r7, sp, #0
  400b66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400b68:	687b      	ldr	r3, [r7, #4]
  400b6a:	2b07      	cmp	r3, #7
  400b6c:	d825      	bhi.n	400bba <osc_get_rate+0x5a>
  400b6e:	a201      	add	r2, pc, #4	; (adr r2, 400b74 <osc_get_rate+0x14>)
  400b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b74:	00400b95 	.word	0x00400b95
  400b78:	00400b9b 	.word	0x00400b9b
  400b7c:	00400ba1 	.word	0x00400ba1
  400b80:	00400ba7 	.word	0x00400ba7
  400b84:	00400bab 	.word	0x00400bab
  400b88:	00400baf 	.word	0x00400baf
  400b8c:	00400bb3 	.word	0x00400bb3
  400b90:	00400bb7 	.word	0x00400bb7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400b94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400b98:	e010      	b.n	400bbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b9e:	e00d      	b.n	400bbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ba4:	e00a      	b.n	400bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400ba6:	4b08      	ldr	r3, [pc, #32]	; (400bc8 <osc_get_rate+0x68>)
  400ba8:	e008      	b.n	400bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400baa:	4b08      	ldr	r3, [pc, #32]	; (400bcc <osc_get_rate+0x6c>)
  400bac:	e006      	b.n	400bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400bae:	4b08      	ldr	r3, [pc, #32]	; (400bd0 <osc_get_rate+0x70>)
  400bb0:	e004      	b.n	400bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400bb2:	4b07      	ldr	r3, [pc, #28]	; (400bd0 <osc_get_rate+0x70>)
  400bb4:	e002      	b.n	400bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400bb6:	4b06      	ldr	r3, [pc, #24]	; (400bd0 <osc_get_rate+0x70>)
  400bb8:	e000      	b.n	400bbc <osc_get_rate+0x5c>
	}

	return 0;
  400bba:	2300      	movs	r3, #0
}
  400bbc:	4618      	mov	r0, r3
  400bbe:	370c      	adds	r7, #12
  400bc0:	46bd      	mov	sp, r7
  400bc2:	bc80      	pop	{r7}
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	003d0900 	.word	0x003d0900
  400bcc:	007a1200 	.word	0x007a1200
  400bd0:	00b71b00 	.word	0x00b71b00

00400bd4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400bd4:	b580      	push	{r7, lr}
  400bd6:	b082      	sub	sp, #8
  400bd8:	af00      	add	r7, sp, #0
  400bda:	4603      	mov	r3, r0
  400bdc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400bde:	bf00      	nop
  400be0:	79fb      	ldrb	r3, [r7, #7]
  400be2:	4618      	mov	r0, r3
  400be4:	4b05      	ldr	r3, [pc, #20]	; (400bfc <osc_wait_ready+0x28>)
  400be6:	4798      	blx	r3
  400be8:	4603      	mov	r3, r0
  400bea:	f083 0301 	eor.w	r3, r3, #1
  400bee:	b2db      	uxtb	r3, r3
  400bf0:	2b00      	cmp	r3, #0
  400bf2:	d1f5      	bne.n	400be0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400bf4:	bf00      	nop
  400bf6:	3708      	adds	r7, #8
  400bf8:	46bd      	mov	sp, r7
  400bfa:	bd80      	pop	{r7, pc}
  400bfc:	00400af1 	.word	0x00400af1

00400c00 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400c00:	b580      	push	{r7, lr}
  400c02:	b086      	sub	sp, #24
  400c04:	af00      	add	r7, sp, #0
  400c06:	60f8      	str	r0, [r7, #12]
  400c08:	607a      	str	r2, [r7, #4]
  400c0a:	603b      	str	r3, [r7, #0]
  400c0c:	460b      	mov	r3, r1
  400c0e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400c10:	7afb      	ldrb	r3, [r7, #11]
  400c12:	4618      	mov	r0, r3
  400c14:	4b0d      	ldr	r3, [pc, #52]	; (400c4c <pll_config_init+0x4c>)
  400c16:	4798      	blx	r3
  400c18:	4602      	mov	r2, r0
  400c1a:	687b      	ldr	r3, [r7, #4]
  400c1c:	fbb2 f3f3 	udiv	r3, r2, r3
  400c20:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400c22:	697b      	ldr	r3, [r7, #20]
  400c24:	683a      	ldr	r2, [r7, #0]
  400c26:	fb02 f303 	mul.w	r3, r2, r3
  400c2a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400c2c:	683b      	ldr	r3, [r7, #0]
  400c2e:	3b01      	subs	r3, #1
  400c30:	041a      	lsls	r2, r3, #16
  400c32:	4b07      	ldr	r3, [pc, #28]	; (400c50 <pll_config_init+0x50>)
  400c34:	4013      	ands	r3, r2
  400c36:	687a      	ldr	r2, [r7, #4]
  400c38:	b2d2      	uxtb	r2, r2
  400c3a:	4313      	orrs	r3, r2
  400c3c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400c40:	68fb      	ldr	r3, [r7, #12]
  400c42:	601a      	str	r2, [r3, #0]
}
  400c44:	bf00      	nop
  400c46:	3718      	adds	r7, #24
  400c48:	46bd      	mov	sp, r7
  400c4a:	bd80      	pop	{r7, pc}
  400c4c:	00400b61 	.word	0x00400b61
  400c50:	07ff0000 	.word	0x07ff0000

00400c54 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400c54:	b580      	push	{r7, lr}
  400c56:	b082      	sub	sp, #8
  400c58:	af00      	add	r7, sp, #0
  400c5a:	6078      	str	r0, [r7, #4]
  400c5c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400c5e:	683b      	ldr	r3, [r7, #0]
  400c60:	2b00      	cmp	r3, #0
  400c62:	d108      	bne.n	400c76 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400c64:	4b09      	ldr	r3, [pc, #36]	; (400c8c <pll_enable+0x38>)
  400c66:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400c68:	4a09      	ldr	r2, [pc, #36]	; (400c90 <pll_enable+0x3c>)
  400c6a:	687b      	ldr	r3, [r7, #4]
  400c6c:	681b      	ldr	r3, [r3, #0]
  400c6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400c72:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400c74:	e005      	b.n	400c82 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400c76:	4b07      	ldr	r3, [pc, #28]	; (400c94 <pll_enable+0x40>)
  400c78:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400c7a:	4a05      	ldr	r2, [pc, #20]	; (400c90 <pll_enable+0x3c>)
  400c7c:	687b      	ldr	r3, [r7, #4]
  400c7e:	681b      	ldr	r3, [r3, #0]
  400c80:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  400c82:	bf00      	nop
  400c84:	3708      	adds	r7, #8
  400c86:	46bd      	mov	sp, r7
  400c88:	bd80      	pop	{r7, pc}
  400c8a:	bf00      	nop
  400c8c:	004015ad 	.word	0x004015ad
  400c90:	400e0400 	.word	0x400e0400
  400c94:	004015dd 	.word	0x004015dd

00400c98 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400c98:	b580      	push	{r7, lr}
  400c9a:	b082      	sub	sp, #8
  400c9c:	af00      	add	r7, sp, #0
  400c9e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400ca0:	687b      	ldr	r3, [r7, #4]
  400ca2:	2b00      	cmp	r3, #0
  400ca4:	d103      	bne.n	400cae <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400ca6:	4b05      	ldr	r3, [pc, #20]	; (400cbc <pll_is_locked+0x24>)
  400ca8:	4798      	blx	r3
  400caa:	4603      	mov	r3, r0
  400cac:	e002      	b.n	400cb4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400cae:	4b04      	ldr	r3, [pc, #16]	; (400cc0 <pll_is_locked+0x28>)
  400cb0:	4798      	blx	r3
  400cb2:	4603      	mov	r3, r0
	}
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	3708      	adds	r7, #8
  400cb8:	46bd      	mov	sp, r7
  400cba:	bd80      	pop	{r7, pc}
  400cbc:	004015c5 	.word	0x004015c5
  400cc0:	004015f5 	.word	0x004015f5

00400cc4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400cc4:	b580      	push	{r7, lr}
  400cc6:	b082      	sub	sp, #8
  400cc8:	af00      	add	r7, sp, #0
  400cca:	4603      	mov	r3, r0
  400ccc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400cce:	79fb      	ldrb	r3, [r7, #7]
  400cd0:	3b03      	subs	r3, #3
  400cd2:	2b04      	cmp	r3, #4
  400cd4:	d808      	bhi.n	400ce8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400cd6:	79fb      	ldrb	r3, [r7, #7]
  400cd8:	4618      	mov	r0, r3
  400cda:	4b06      	ldr	r3, [pc, #24]	; (400cf4 <pll_enable_source+0x30>)
  400cdc:	4798      	blx	r3
		osc_wait_ready(e_src);
  400cde:	79fb      	ldrb	r3, [r7, #7]
  400ce0:	4618      	mov	r0, r3
  400ce2:	4b05      	ldr	r3, [pc, #20]	; (400cf8 <pll_enable_source+0x34>)
  400ce4:	4798      	blx	r3
		break;
  400ce6:	e000      	b.n	400cea <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400ce8:	bf00      	nop
	}
}
  400cea:	bf00      	nop
  400cec:	3708      	adds	r7, #8
  400cee:	46bd      	mov	sp, r7
  400cf0:	bd80      	pop	{r7, pc}
  400cf2:	bf00      	nop
  400cf4:	00400a69 	.word	0x00400a69
  400cf8:	00400bd5 	.word	0x00400bd5

00400cfc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400cfc:	b580      	push	{r7, lr}
  400cfe:	b082      	sub	sp, #8
  400d00:	af00      	add	r7, sp, #0
  400d02:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400d04:	bf00      	nop
  400d06:	6878      	ldr	r0, [r7, #4]
  400d08:	4b04      	ldr	r3, [pc, #16]	; (400d1c <pll_wait_for_lock+0x20>)
  400d0a:	4798      	blx	r3
  400d0c:	4603      	mov	r3, r0
  400d0e:	2b00      	cmp	r3, #0
  400d10:	d0f9      	beq.n	400d06 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400d12:	2300      	movs	r3, #0
}
  400d14:	4618      	mov	r0, r3
  400d16:	3708      	adds	r7, #8
  400d18:	46bd      	mov	sp, r7
  400d1a:	bd80      	pop	{r7, pc}
  400d1c:	00400c99 	.word	0x00400c99

00400d20 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400d20:	b580      	push	{r7, lr}
  400d22:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400d24:	2006      	movs	r0, #6
  400d26:	4b04      	ldr	r3, [pc, #16]	; (400d38 <sysclk_get_main_hz+0x18>)
  400d28:	4798      	blx	r3
  400d2a:	4602      	mov	r2, r0
  400d2c:	4613      	mov	r3, r2
  400d2e:	009b      	lsls	r3, r3, #2
  400d30:	4413      	add	r3, r2
  400d32:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400d34:	4618      	mov	r0, r3
  400d36:	bd80      	pop	{r7, pc}
  400d38:	00400b61 	.word	0x00400b61

00400d3c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400d3c:	b580      	push	{r7, lr}
  400d3e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400d40:	4b02      	ldr	r3, [pc, #8]	; (400d4c <sysclk_get_cpu_hz+0x10>)
  400d42:	4798      	blx	r3
  400d44:	4603      	mov	r3, r0
  400d46:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400d48:	4618      	mov	r0, r3
  400d4a:	bd80      	pop	{r7, pc}
  400d4c:	00400d21 	.word	0x00400d21

00400d50 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400d50:	b590      	push	{r4, r7, lr}
  400d52:	b083      	sub	sp, #12
  400d54:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400d56:	4811      	ldr	r0, [pc, #68]	; (400d9c <sysclk_init+0x4c>)
  400d58:	4b11      	ldr	r3, [pc, #68]	; (400da0 <sysclk_init+0x50>)
  400d5a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400d5c:	2006      	movs	r0, #6
  400d5e:	4b11      	ldr	r3, [pc, #68]	; (400da4 <sysclk_init+0x54>)
  400d60:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400d62:	1d38      	adds	r0, r7, #4
  400d64:	2314      	movs	r3, #20
  400d66:	2201      	movs	r2, #1
  400d68:	2106      	movs	r1, #6
  400d6a:	4c0f      	ldr	r4, [pc, #60]	; (400da8 <sysclk_init+0x58>)
  400d6c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400d6e:	1d3b      	adds	r3, r7, #4
  400d70:	2100      	movs	r1, #0
  400d72:	4618      	mov	r0, r3
  400d74:	4b0d      	ldr	r3, [pc, #52]	; (400dac <sysclk_init+0x5c>)
  400d76:	4798      	blx	r3
		pll_wait_for_lock(0);
  400d78:	2000      	movs	r0, #0
  400d7a:	4b0d      	ldr	r3, [pc, #52]	; (400db0 <sysclk_init+0x60>)
  400d7c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400d7e:	2010      	movs	r0, #16
  400d80:	4b0c      	ldr	r3, [pc, #48]	; (400db4 <sysclk_init+0x64>)
  400d82:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400d84:	4b0c      	ldr	r3, [pc, #48]	; (400db8 <sysclk_init+0x68>)
  400d86:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400d88:	4b0c      	ldr	r3, [pc, #48]	; (400dbc <sysclk_init+0x6c>)
  400d8a:	4798      	blx	r3
  400d8c:	4603      	mov	r3, r0
  400d8e:	4618      	mov	r0, r3
  400d90:	4b03      	ldr	r3, [pc, #12]	; (400da0 <sysclk_init+0x50>)
  400d92:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400d94:	bf00      	nop
  400d96:	370c      	adds	r7, #12
  400d98:	46bd      	mov	sp, r7
  400d9a:	bd90      	pop	{r4, r7, pc}
  400d9c:	07270e00 	.word	0x07270e00
  400da0:	00401979 	.word	0x00401979
  400da4:	00400cc5 	.word	0x00400cc5
  400da8:	00400c01 	.word	0x00400c01
  400dac:	00400c55 	.word	0x00400c55
  400db0:	00400cfd 	.word	0x00400cfd
  400db4:	004013c1 	.word	0x004013c1
  400db8:	004017dd 	.word	0x004017dd
  400dbc:	00400d3d 	.word	0x00400d3d

00400dc0 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  400dc0:	b480      	push	{r7}
  400dc2:	b085      	sub	sp, #20
  400dc4:	af00      	add	r7, sp, #0
  400dc6:	60f8      	str	r0, [r7, #12]
  400dc8:	60b9      	str	r1, [r7, #8]
  400dca:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400dcc:	68bb      	ldr	r3, [r7, #8]
  400dce:	2b00      	cmp	r3, #0
  400dd0:	d007      	beq.n	400de2 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  400dd2:	68bb      	ldr	r3, [r7, #8]
  400dd4:	681a      	ldr	r2, [r3, #0]
  400dd6:	68fb      	ldr	r3, [r7, #12]
  400dd8:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  400dda:	68bb      	ldr	r3, [r7, #8]
  400ddc:	685a      	ldr	r2, [r3, #4]
  400dde:	68fb      	ldr	r3, [r7, #12]
  400de0:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  400de2:	687b      	ldr	r3, [r7, #4]
  400de4:	2b00      	cmp	r3, #0
  400de6:	d007      	beq.n	400df8 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  400de8:	687b      	ldr	r3, [r7, #4]
  400dea:	681a      	ldr	r2, [r3, #0]
  400dec:	68fb      	ldr	r3, [r7, #12]
  400dee:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400df0:	687b      	ldr	r3, [r7, #4]
  400df2:	685a      	ldr	r2, [r3, #4]
  400df4:	68fb      	ldr	r3, [r7, #12]
  400df6:	615a      	str	r2, [r3, #20]
	}
}
  400df8:	bf00      	nop
  400dfa:	3714      	adds	r7, #20
  400dfc:	46bd      	mov	sp, r7
  400dfe:	bc80      	pop	{r7}
  400e00:	4770      	bx	lr
  400e02:	bf00      	nop

00400e04 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  400e04:	b480      	push	{r7}
  400e06:	b083      	sub	sp, #12
  400e08:	af00      	add	r7, sp, #0
  400e0a:	6078      	str	r0, [r7, #4]
  400e0c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400e0e:	683a      	ldr	r2, [r7, #0]
  400e10:	f240 1301 	movw	r3, #257	; 0x101
  400e14:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400e16:	687a      	ldr	r2, [r7, #4]
  400e18:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  400e1a:	bf00      	nop
  400e1c:	370c      	adds	r7, #12
  400e1e:	46bd      	mov	sp, r7
  400e20:	bc80      	pop	{r7}
  400e22:	4770      	bx	lr

00400e24 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  400e24:	b480      	push	{r7}
  400e26:	b083      	sub	sp, #12
  400e28:	af00      	add	r7, sp, #0
  400e2a:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  400e2c:	687b      	ldr	r3, [r7, #4]
  400e2e:	685b      	ldr	r3, [r3, #4]
}
  400e30:	4618      	mov	r0, r3
  400e32:	370c      	adds	r7, #12
  400e34:	46bd      	mov	sp, r7
  400e36:	bc80      	pop	{r7}
  400e38:	4770      	bx	lr
  400e3a:	bf00      	nop

00400e3c <pdc_read_rx_next_counter>:
 *
 * \return Receive Next Counter Register value.
 */
uint32_t pdc_read_rx_next_counter(
		Pdc *p_pdc)
{
  400e3c:	b480      	push	{r7}
  400e3e:	b083      	sub	sp, #12
  400e40:	af00      	add	r7, sp, #0
  400e42:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RNCR;
  400e44:	687b      	ldr	r3, [r7, #4]
  400e46:	695b      	ldr	r3, [r3, #20]
}
  400e48:	4618      	mov	r0, r3
  400e4a:	370c      	adds	r7, #12
  400e4c:	46bd      	mov	sp, r7
  400e4e:	bc80      	pop	{r7}
  400e50:	4770      	bx	lr
  400e52:	bf00      	nop

00400e54 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400e54:	b480      	push	{r7}
  400e56:	b085      	sub	sp, #20
  400e58:	af00      	add	r7, sp, #0
  400e5a:	60f8      	str	r0, [r7, #12]
  400e5c:	60b9      	str	r1, [r7, #8]
  400e5e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e60:	687b      	ldr	r3, [r7, #4]
  400e62:	2b00      	cmp	r3, #0
  400e64:	d003      	beq.n	400e6e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400e66:	68fb      	ldr	r3, [r7, #12]
  400e68:	68ba      	ldr	r2, [r7, #8]
  400e6a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400e6c:	e002      	b.n	400e74 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400e6e:	68fb      	ldr	r3, [r7, #12]
  400e70:	68ba      	ldr	r2, [r7, #8]
  400e72:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  400e74:	bf00      	nop
  400e76:	3714      	adds	r7, #20
  400e78:	46bd      	mov	sp, r7
  400e7a:	bc80      	pop	{r7}
  400e7c:	4770      	bx	lr
  400e7e:	bf00      	nop

00400e80 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400e80:	b480      	push	{r7}
  400e82:	b087      	sub	sp, #28
  400e84:	af00      	add	r7, sp, #0
  400e86:	60f8      	str	r0, [r7, #12]
  400e88:	60b9      	str	r1, [r7, #8]
  400e8a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400e8c:	68fb      	ldr	r3, [r7, #12]
  400e8e:	687a      	ldr	r2, [r7, #4]
  400e90:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400e92:	68bb      	ldr	r3, [r7, #8]
  400e94:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e98:	d04a      	beq.n	400f30 <pio_set_peripheral+0xb0>
  400e9a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e9e:	d808      	bhi.n	400eb2 <pio_set_peripheral+0x32>
  400ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400ea4:	d016      	beq.n	400ed4 <pio_set_peripheral+0x54>
  400ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400eaa:	d02c      	beq.n	400f06 <pio_set_peripheral+0x86>
  400eac:	2b00      	cmp	r3, #0
  400eae:	d069      	beq.n	400f84 <pio_set_peripheral+0x104>
  400eb0:	e064      	b.n	400f7c <pio_set_peripheral+0xfc>
  400eb2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400eb6:	d065      	beq.n	400f84 <pio_set_peripheral+0x104>
  400eb8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400ebc:	d803      	bhi.n	400ec6 <pio_set_peripheral+0x46>
  400ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400ec2:	d04a      	beq.n	400f5a <pio_set_peripheral+0xda>
  400ec4:	e05a      	b.n	400f7c <pio_set_peripheral+0xfc>
  400ec6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400eca:	d05b      	beq.n	400f84 <pio_set_peripheral+0x104>
  400ecc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400ed0:	d058      	beq.n	400f84 <pio_set_peripheral+0x104>
  400ed2:	e053      	b.n	400f7c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ed4:	68fb      	ldr	r3, [r7, #12]
  400ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400ed8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400eda:	68fb      	ldr	r3, [r7, #12]
  400edc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400ede:	687b      	ldr	r3, [r7, #4]
  400ee0:	43d9      	mvns	r1, r3
  400ee2:	697b      	ldr	r3, [r7, #20]
  400ee4:	400b      	ands	r3, r1
  400ee6:	401a      	ands	r2, r3
  400ee8:	68fb      	ldr	r3, [r7, #12]
  400eea:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400eec:	68fb      	ldr	r3, [r7, #12]
  400eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400ef0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ef2:	68fb      	ldr	r3, [r7, #12]
  400ef4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ef6:	687b      	ldr	r3, [r7, #4]
  400ef8:	43d9      	mvns	r1, r3
  400efa:	697b      	ldr	r3, [r7, #20]
  400efc:	400b      	ands	r3, r1
  400efe:	401a      	ands	r2, r3
  400f00:	68fb      	ldr	r3, [r7, #12]
  400f02:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f04:	e03a      	b.n	400f7c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f06:	68fb      	ldr	r3, [r7, #12]
  400f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400f0a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f0c:	687a      	ldr	r2, [r7, #4]
  400f0e:	697b      	ldr	r3, [r7, #20]
  400f10:	431a      	orrs	r2, r3
  400f12:	68fb      	ldr	r3, [r7, #12]
  400f14:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f16:	68fb      	ldr	r3, [r7, #12]
  400f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400f1a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f1c:	68fb      	ldr	r3, [r7, #12]
  400f1e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f20:	687b      	ldr	r3, [r7, #4]
  400f22:	43d9      	mvns	r1, r3
  400f24:	697b      	ldr	r3, [r7, #20]
  400f26:	400b      	ands	r3, r1
  400f28:	401a      	ands	r2, r3
  400f2a:	68fb      	ldr	r3, [r7, #12]
  400f2c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f2e:	e025      	b.n	400f7c <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f30:	68fb      	ldr	r3, [r7, #12]
  400f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400f34:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f36:	68fb      	ldr	r3, [r7, #12]
  400f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f3a:	687b      	ldr	r3, [r7, #4]
  400f3c:	43d9      	mvns	r1, r3
  400f3e:	697b      	ldr	r3, [r7, #20]
  400f40:	400b      	ands	r3, r1
  400f42:	401a      	ands	r2, r3
  400f44:	68fb      	ldr	r3, [r7, #12]
  400f46:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f48:	68fb      	ldr	r3, [r7, #12]
  400f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400f4c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f4e:	687a      	ldr	r2, [r7, #4]
  400f50:	697b      	ldr	r3, [r7, #20]
  400f52:	431a      	orrs	r2, r3
  400f54:	68fb      	ldr	r3, [r7, #12]
  400f56:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f58:	e010      	b.n	400f7c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f5a:	68fb      	ldr	r3, [r7, #12]
  400f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400f5e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f60:	687a      	ldr	r2, [r7, #4]
  400f62:	697b      	ldr	r3, [r7, #20]
  400f64:	431a      	orrs	r2, r3
  400f66:	68fb      	ldr	r3, [r7, #12]
  400f68:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f6a:	68fb      	ldr	r3, [r7, #12]
  400f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400f6e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f70:	687a      	ldr	r2, [r7, #4]
  400f72:	697b      	ldr	r3, [r7, #20]
  400f74:	431a      	orrs	r2, r3
  400f76:	68fb      	ldr	r3, [r7, #12]
  400f78:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400f7a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400f7c:	68fb      	ldr	r3, [r7, #12]
  400f7e:	687a      	ldr	r2, [r7, #4]
  400f80:	605a      	str	r2, [r3, #4]
  400f82:	e000      	b.n	400f86 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  400f84:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  400f86:	371c      	adds	r7, #28
  400f88:	46bd      	mov	sp, r7
  400f8a:	bc80      	pop	{r7}
  400f8c:	4770      	bx	lr
  400f8e:	bf00      	nop

00400f90 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400f90:	b580      	push	{r7, lr}
  400f92:	b084      	sub	sp, #16
  400f94:	af00      	add	r7, sp, #0
  400f96:	60f8      	str	r0, [r7, #12]
  400f98:	60b9      	str	r1, [r7, #8]
  400f9a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400f9c:	68b9      	ldr	r1, [r7, #8]
  400f9e:	68f8      	ldr	r0, [r7, #12]
  400fa0:	4b19      	ldr	r3, [pc, #100]	; (401008 <pio_set_input+0x78>)
  400fa2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	f003 0301 	and.w	r3, r3, #1
  400faa:	461a      	mov	r2, r3
  400fac:	68b9      	ldr	r1, [r7, #8]
  400fae:	68f8      	ldr	r0, [r7, #12]
  400fb0:	4b16      	ldr	r3, [pc, #88]	; (40100c <pio_set_input+0x7c>)
  400fb2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400fb4:	687b      	ldr	r3, [r7, #4]
  400fb6:	f003 030a 	and.w	r3, r3, #10
  400fba:	2b00      	cmp	r3, #0
  400fbc:	d003      	beq.n	400fc6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400fbe:	68fb      	ldr	r3, [r7, #12]
  400fc0:	68ba      	ldr	r2, [r7, #8]
  400fc2:	621a      	str	r2, [r3, #32]
  400fc4:	e002      	b.n	400fcc <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400fc6:	68fb      	ldr	r3, [r7, #12]
  400fc8:	68ba      	ldr	r2, [r7, #8]
  400fca:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400fcc:	687b      	ldr	r3, [r7, #4]
  400fce:	f003 0302 	and.w	r3, r3, #2
  400fd2:	2b00      	cmp	r3, #0
  400fd4:	d004      	beq.n	400fe0 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400fd6:	68fb      	ldr	r3, [r7, #12]
  400fd8:	68ba      	ldr	r2, [r7, #8]
  400fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400fde:	e008      	b.n	400ff2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400fe0:	687b      	ldr	r3, [r7, #4]
  400fe2:	f003 0308 	and.w	r3, r3, #8
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d003      	beq.n	400ff2 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400fea:	68fb      	ldr	r3, [r7, #12]
  400fec:	68ba      	ldr	r2, [r7, #8]
  400fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400ff2:	68fb      	ldr	r3, [r7, #12]
  400ff4:	68ba      	ldr	r2, [r7, #8]
  400ff6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400ff8:	68fb      	ldr	r3, [r7, #12]
  400ffa:	68ba      	ldr	r2, [r7, #8]
  400ffc:	601a      	str	r2, [r3, #0]
}
  400ffe:	bf00      	nop
  401000:	3710      	adds	r7, #16
  401002:	46bd      	mov	sp, r7
  401004:	bd80      	pop	{r7, pc}
  401006:	bf00      	nop
  401008:	00401075 	.word	0x00401075
  40100c:	00400e55 	.word	0x00400e55

00401010 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401010:	b580      	push	{r7, lr}
  401012:	b084      	sub	sp, #16
  401014:	af00      	add	r7, sp, #0
  401016:	60f8      	str	r0, [r7, #12]
  401018:	60b9      	str	r1, [r7, #8]
  40101a:	607a      	str	r2, [r7, #4]
  40101c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40101e:	68b9      	ldr	r1, [r7, #8]
  401020:	68f8      	ldr	r0, [r7, #12]
  401022:	4b12      	ldr	r3, [pc, #72]	; (40106c <pio_set_output+0x5c>)
  401024:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401026:	69ba      	ldr	r2, [r7, #24]
  401028:	68b9      	ldr	r1, [r7, #8]
  40102a:	68f8      	ldr	r0, [r7, #12]
  40102c:	4b10      	ldr	r3, [pc, #64]	; (401070 <pio_set_output+0x60>)
  40102e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401030:	683b      	ldr	r3, [r7, #0]
  401032:	2b00      	cmp	r3, #0
  401034:	d003      	beq.n	40103e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401036:	68fb      	ldr	r3, [r7, #12]
  401038:	68ba      	ldr	r2, [r7, #8]
  40103a:	651a      	str	r2, [r3, #80]	; 0x50
  40103c:	e002      	b.n	401044 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40103e:	68fb      	ldr	r3, [r7, #12]
  401040:	68ba      	ldr	r2, [r7, #8]
  401042:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401044:	687b      	ldr	r3, [r7, #4]
  401046:	2b00      	cmp	r3, #0
  401048:	d003      	beq.n	401052 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40104a:	68fb      	ldr	r3, [r7, #12]
  40104c:	68ba      	ldr	r2, [r7, #8]
  40104e:	631a      	str	r2, [r3, #48]	; 0x30
  401050:	e002      	b.n	401058 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401052:	68fb      	ldr	r3, [r7, #12]
  401054:	68ba      	ldr	r2, [r7, #8]
  401056:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401058:	68fb      	ldr	r3, [r7, #12]
  40105a:	68ba      	ldr	r2, [r7, #8]
  40105c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40105e:	68fb      	ldr	r3, [r7, #12]
  401060:	68ba      	ldr	r2, [r7, #8]
  401062:	601a      	str	r2, [r3, #0]
}
  401064:	bf00      	nop
  401066:	3710      	adds	r7, #16
  401068:	46bd      	mov	sp, r7
  40106a:	bd80      	pop	{r7, pc}
  40106c:	00401075 	.word	0x00401075
  401070:	00400e55 	.word	0x00400e55

00401074 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401074:	b480      	push	{r7}
  401076:	b083      	sub	sp, #12
  401078:	af00      	add	r7, sp, #0
  40107a:	6078      	str	r0, [r7, #4]
  40107c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40107e:	687b      	ldr	r3, [r7, #4]
  401080:	683a      	ldr	r2, [r7, #0]
  401082:	645a      	str	r2, [r3, #68]	; 0x44
}
  401084:	bf00      	nop
  401086:	370c      	adds	r7, #12
  401088:	46bd      	mov	sp, r7
  40108a:	bc80      	pop	{r7}
  40108c:	4770      	bx	lr
  40108e:	bf00      	nop

00401090 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401090:	b480      	push	{r7}
  401092:	b083      	sub	sp, #12
  401094:	af00      	add	r7, sp, #0
  401096:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401098:	687b      	ldr	r3, [r7, #4]
  40109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40109c:	4618      	mov	r0, r3
  40109e:	370c      	adds	r7, #12
  4010a0:	46bd      	mov	sp, r7
  4010a2:	bc80      	pop	{r7}
  4010a4:	4770      	bx	lr
  4010a6:	bf00      	nop

004010a8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4010a8:	b480      	push	{r7}
  4010aa:	b083      	sub	sp, #12
  4010ac:	af00      	add	r7, sp, #0
  4010ae:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4010b0:	687b      	ldr	r3, [r7, #4]
  4010b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4010b4:	4618      	mov	r0, r3
  4010b6:	370c      	adds	r7, #12
  4010b8:	46bd      	mov	sp, r7
  4010ba:	bc80      	pop	{r7}
  4010bc:	4770      	bx	lr
  4010be:	bf00      	nop

004010c0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4010c0:	b590      	push	{r4, r7, lr}
  4010c2:	b087      	sub	sp, #28
  4010c4:	af02      	add	r7, sp, #8
  4010c6:	6078      	str	r0, [r7, #4]
  4010c8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4010ca:	6878      	ldr	r0, [r7, #4]
  4010cc:	4b63      	ldr	r3, [pc, #396]	; (40125c <pio_configure_pin+0x19c>)
  4010ce:	4798      	blx	r3
  4010d0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4010d2:	683b      	ldr	r3, [r7, #0]
  4010d4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4010d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4010dc:	d067      	beq.n	4011ae <pio_configure_pin+0xee>
  4010de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4010e2:	d809      	bhi.n	4010f8 <pio_configure_pin+0x38>
  4010e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4010e8:	d02b      	beq.n	401142 <pio_configure_pin+0x82>
  4010ea:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4010ee:	d043      	beq.n	401178 <pio_configure_pin+0xb8>
  4010f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4010f4:	d00a      	beq.n	40110c <pio_configure_pin+0x4c>
  4010f6:	e0a9      	b.n	40124c <pio_configure_pin+0x18c>
  4010f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4010fc:	d07e      	beq.n	4011fc <pio_configure_pin+0x13c>
  4010fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401102:	d07b      	beq.n	4011fc <pio_configure_pin+0x13c>
  401104:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401108:	d06c      	beq.n	4011e4 <pio_configure_pin+0x124>
  40110a:	e09f      	b.n	40124c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40110c:	687b      	ldr	r3, [r7, #4]
  40110e:	f003 031f 	and.w	r3, r3, #31
  401112:	2201      	movs	r2, #1
  401114:	fa02 f303 	lsl.w	r3, r2, r3
  401118:	461a      	mov	r2, r3
  40111a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40111e:	68f8      	ldr	r0, [r7, #12]
  401120:	4b4f      	ldr	r3, [pc, #316]	; (401260 <pio_configure_pin+0x1a0>)
  401122:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401124:	687b      	ldr	r3, [r7, #4]
  401126:	f003 031f 	and.w	r3, r3, #31
  40112a:	2201      	movs	r2, #1
  40112c:	fa02 f303 	lsl.w	r3, r2, r3
  401130:	4619      	mov	r1, r3
  401132:	683b      	ldr	r3, [r7, #0]
  401134:	f003 0301 	and.w	r3, r3, #1
  401138:	461a      	mov	r2, r3
  40113a:	68f8      	ldr	r0, [r7, #12]
  40113c:	4b49      	ldr	r3, [pc, #292]	; (401264 <pio_configure_pin+0x1a4>)
  40113e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401140:	e086      	b.n	401250 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401142:	687b      	ldr	r3, [r7, #4]
  401144:	f003 031f 	and.w	r3, r3, #31
  401148:	2201      	movs	r2, #1
  40114a:	fa02 f303 	lsl.w	r3, r2, r3
  40114e:	461a      	mov	r2, r3
  401150:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401154:	68f8      	ldr	r0, [r7, #12]
  401156:	4b42      	ldr	r3, [pc, #264]	; (401260 <pio_configure_pin+0x1a0>)
  401158:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40115a:	687b      	ldr	r3, [r7, #4]
  40115c:	f003 031f 	and.w	r3, r3, #31
  401160:	2201      	movs	r2, #1
  401162:	fa02 f303 	lsl.w	r3, r2, r3
  401166:	4619      	mov	r1, r3
  401168:	683b      	ldr	r3, [r7, #0]
  40116a:	f003 0301 	and.w	r3, r3, #1
  40116e:	461a      	mov	r2, r3
  401170:	68f8      	ldr	r0, [r7, #12]
  401172:	4b3c      	ldr	r3, [pc, #240]	; (401264 <pio_configure_pin+0x1a4>)
  401174:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401176:	e06b      	b.n	401250 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401178:	687b      	ldr	r3, [r7, #4]
  40117a:	f003 031f 	and.w	r3, r3, #31
  40117e:	2201      	movs	r2, #1
  401180:	fa02 f303 	lsl.w	r3, r2, r3
  401184:	461a      	mov	r2, r3
  401186:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40118a:	68f8      	ldr	r0, [r7, #12]
  40118c:	4b34      	ldr	r3, [pc, #208]	; (401260 <pio_configure_pin+0x1a0>)
  40118e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401190:	687b      	ldr	r3, [r7, #4]
  401192:	f003 031f 	and.w	r3, r3, #31
  401196:	2201      	movs	r2, #1
  401198:	fa02 f303 	lsl.w	r3, r2, r3
  40119c:	4619      	mov	r1, r3
  40119e:	683b      	ldr	r3, [r7, #0]
  4011a0:	f003 0301 	and.w	r3, r3, #1
  4011a4:	461a      	mov	r2, r3
  4011a6:	68f8      	ldr	r0, [r7, #12]
  4011a8:	4b2e      	ldr	r3, [pc, #184]	; (401264 <pio_configure_pin+0x1a4>)
  4011aa:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4011ac:	e050      	b.n	401250 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4011ae:	687b      	ldr	r3, [r7, #4]
  4011b0:	f003 031f 	and.w	r3, r3, #31
  4011b4:	2201      	movs	r2, #1
  4011b6:	fa02 f303 	lsl.w	r3, r2, r3
  4011ba:	461a      	mov	r2, r3
  4011bc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4011c0:	68f8      	ldr	r0, [r7, #12]
  4011c2:	4b27      	ldr	r3, [pc, #156]	; (401260 <pio_configure_pin+0x1a0>)
  4011c4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4011c6:	687b      	ldr	r3, [r7, #4]
  4011c8:	f003 031f 	and.w	r3, r3, #31
  4011cc:	2201      	movs	r2, #1
  4011ce:	fa02 f303 	lsl.w	r3, r2, r3
  4011d2:	4619      	mov	r1, r3
  4011d4:	683b      	ldr	r3, [r7, #0]
  4011d6:	f003 0301 	and.w	r3, r3, #1
  4011da:	461a      	mov	r2, r3
  4011dc:	68f8      	ldr	r0, [r7, #12]
  4011de:	4b21      	ldr	r3, [pc, #132]	; (401264 <pio_configure_pin+0x1a4>)
  4011e0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4011e2:	e035      	b.n	401250 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4011e4:	687b      	ldr	r3, [r7, #4]
  4011e6:	f003 031f 	and.w	r3, r3, #31
  4011ea:	2201      	movs	r2, #1
  4011ec:	fa02 f303 	lsl.w	r3, r2, r3
  4011f0:	683a      	ldr	r2, [r7, #0]
  4011f2:	4619      	mov	r1, r3
  4011f4:	68f8      	ldr	r0, [r7, #12]
  4011f6:	4b1c      	ldr	r3, [pc, #112]	; (401268 <pio_configure_pin+0x1a8>)
  4011f8:	4798      	blx	r3
		break;
  4011fa:	e029      	b.n	401250 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4011fc:	687b      	ldr	r3, [r7, #4]
  4011fe:	f003 031f 	and.w	r3, r3, #31
  401202:	2201      	movs	r2, #1
  401204:	fa02 f303 	lsl.w	r3, r2, r3
  401208:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40120a:	683b      	ldr	r3, [r7, #0]
  40120c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401210:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401214:	bf0c      	ite	eq
  401216:	2301      	moveq	r3, #1
  401218:	2300      	movne	r3, #0
  40121a:	b2db      	uxtb	r3, r3
  40121c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40121e:	683b      	ldr	r3, [r7, #0]
  401220:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401224:	2b00      	cmp	r3, #0
  401226:	bf14      	ite	ne
  401228:	2301      	movne	r3, #1
  40122a:	2300      	moveq	r3, #0
  40122c:	b2db      	uxtb	r3, r3
  40122e:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401230:	683b      	ldr	r3, [r7, #0]
  401232:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401236:	2b00      	cmp	r3, #0
  401238:	bf14      	ite	ne
  40123a:	2301      	movne	r3, #1
  40123c:	2300      	moveq	r3, #0
  40123e:	b2db      	uxtb	r3, r3
  401240:	9300      	str	r3, [sp, #0]
  401242:	4603      	mov	r3, r0
  401244:	68f8      	ldr	r0, [r7, #12]
  401246:	4c09      	ldr	r4, [pc, #36]	; (40126c <pio_configure_pin+0x1ac>)
  401248:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40124a:	e001      	b.n	401250 <pio_configure_pin+0x190>

	default:
		return 0;
  40124c:	2300      	movs	r3, #0
  40124e:	e000      	b.n	401252 <pio_configure_pin+0x192>
	}

	return 1;
  401250:	2301      	movs	r3, #1
}
  401252:	4618      	mov	r0, r3
  401254:	3714      	adds	r7, #20
  401256:	46bd      	mov	sp, r7
  401258:	bd90      	pop	{r4, r7, pc}
  40125a:	bf00      	nop
  40125c:	0040139d 	.word	0x0040139d
  401260:	00400e81 	.word	0x00400e81
  401264:	00400e55 	.word	0x00400e55
  401268:	00400f91 	.word	0x00400f91
  40126c:	00401011 	.word	0x00401011

00401270 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401270:	b590      	push	{r4, r7, lr}
  401272:	b087      	sub	sp, #28
  401274:	af02      	add	r7, sp, #8
  401276:	60f8      	str	r0, [r7, #12]
  401278:	60b9      	str	r1, [r7, #8]
  40127a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40127c:	687b      	ldr	r3, [r7, #4]
  40127e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401286:	d043      	beq.n	401310 <pio_configure_pin_group+0xa0>
  401288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40128c:	d809      	bhi.n	4012a2 <pio_configure_pin_group+0x32>
  40128e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401292:	d01f      	beq.n	4012d4 <pio_configure_pin_group+0x64>
  401294:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401298:	d02b      	beq.n	4012f2 <pio_configure_pin_group+0x82>
  40129a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40129e:	d00a      	beq.n	4012b6 <pio_configure_pin_group+0x46>
  4012a0:	e06d      	b.n	40137e <pio_configure_pin_group+0x10e>
  4012a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4012a6:	d048      	beq.n	40133a <pio_configure_pin_group+0xca>
  4012a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4012ac:	d045      	beq.n	40133a <pio_configure_pin_group+0xca>
  4012ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4012b2:	d03c      	beq.n	40132e <pio_configure_pin_group+0xbe>
  4012b4:	e063      	b.n	40137e <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4012b6:	68ba      	ldr	r2, [r7, #8]
  4012b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4012bc:	68f8      	ldr	r0, [r7, #12]
  4012be:	4b33      	ldr	r3, [pc, #204]	; (40138c <pio_configure_pin_group+0x11c>)
  4012c0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4012c2:	687b      	ldr	r3, [r7, #4]
  4012c4:	f003 0301 	and.w	r3, r3, #1
  4012c8:	461a      	mov	r2, r3
  4012ca:	68b9      	ldr	r1, [r7, #8]
  4012cc:	68f8      	ldr	r0, [r7, #12]
  4012ce:	4b30      	ldr	r3, [pc, #192]	; (401390 <pio_configure_pin_group+0x120>)
  4012d0:	4798      	blx	r3
		break;
  4012d2:	e056      	b.n	401382 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4012d4:	68ba      	ldr	r2, [r7, #8]
  4012d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012da:	68f8      	ldr	r0, [r7, #12]
  4012dc:	4b2b      	ldr	r3, [pc, #172]	; (40138c <pio_configure_pin_group+0x11c>)
  4012de:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	f003 0301 	and.w	r3, r3, #1
  4012e6:	461a      	mov	r2, r3
  4012e8:	68b9      	ldr	r1, [r7, #8]
  4012ea:	68f8      	ldr	r0, [r7, #12]
  4012ec:	4b28      	ldr	r3, [pc, #160]	; (401390 <pio_configure_pin_group+0x120>)
  4012ee:	4798      	blx	r3
		break;
  4012f0:	e047      	b.n	401382 <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4012f2:	68ba      	ldr	r2, [r7, #8]
  4012f4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4012f8:	68f8      	ldr	r0, [r7, #12]
  4012fa:	4b24      	ldr	r3, [pc, #144]	; (40138c <pio_configure_pin_group+0x11c>)
  4012fc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4012fe:	687b      	ldr	r3, [r7, #4]
  401300:	f003 0301 	and.w	r3, r3, #1
  401304:	461a      	mov	r2, r3
  401306:	68b9      	ldr	r1, [r7, #8]
  401308:	68f8      	ldr	r0, [r7, #12]
  40130a:	4b21      	ldr	r3, [pc, #132]	; (401390 <pio_configure_pin_group+0x120>)
  40130c:	4798      	blx	r3
		break;
  40130e:	e038      	b.n	401382 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401310:	68ba      	ldr	r2, [r7, #8]
  401312:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401316:	68f8      	ldr	r0, [r7, #12]
  401318:	4b1c      	ldr	r3, [pc, #112]	; (40138c <pio_configure_pin_group+0x11c>)
  40131a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40131c:	687b      	ldr	r3, [r7, #4]
  40131e:	f003 0301 	and.w	r3, r3, #1
  401322:	461a      	mov	r2, r3
  401324:	68b9      	ldr	r1, [r7, #8]
  401326:	68f8      	ldr	r0, [r7, #12]
  401328:	4b19      	ldr	r3, [pc, #100]	; (401390 <pio_configure_pin_group+0x120>)
  40132a:	4798      	blx	r3
		break;
  40132c:	e029      	b.n	401382 <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40132e:	687a      	ldr	r2, [r7, #4]
  401330:	68b9      	ldr	r1, [r7, #8]
  401332:	68f8      	ldr	r0, [r7, #12]
  401334:	4b17      	ldr	r3, [pc, #92]	; (401394 <pio_configure_pin_group+0x124>)
  401336:	4798      	blx	r3
		break;
  401338:	e023      	b.n	401382 <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40133a:	687b      	ldr	r3, [r7, #4]
  40133c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401340:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401344:	bf0c      	ite	eq
  401346:	2301      	moveq	r3, #1
  401348:	2300      	movne	r3, #0
  40134a:	b2db      	uxtb	r3, r3
  40134c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40134e:	687b      	ldr	r3, [r7, #4]
  401350:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401354:	2b00      	cmp	r3, #0
  401356:	bf14      	ite	ne
  401358:	2301      	movne	r3, #1
  40135a:	2300      	moveq	r3, #0
  40135c:	b2db      	uxtb	r3, r3
  40135e:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401360:	687b      	ldr	r3, [r7, #4]
  401362:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401366:	2b00      	cmp	r3, #0
  401368:	bf14      	ite	ne
  40136a:	2301      	movne	r3, #1
  40136c:	2300      	moveq	r3, #0
  40136e:	b2db      	uxtb	r3, r3
  401370:	9300      	str	r3, [sp, #0]
  401372:	460b      	mov	r3, r1
  401374:	68b9      	ldr	r1, [r7, #8]
  401376:	68f8      	ldr	r0, [r7, #12]
  401378:	4c07      	ldr	r4, [pc, #28]	; (401398 <pio_configure_pin_group+0x128>)
  40137a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40137c:	e001      	b.n	401382 <pio_configure_pin_group+0x112>

	default:
		return 0;
  40137e:	2300      	movs	r3, #0
  401380:	e000      	b.n	401384 <pio_configure_pin_group+0x114>
	}

	return 1;
  401382:	2301      	movs	r3, #1
}
  401384:	4618      	mov	r0, r3
  401386:	3714      	adds	r7, #20
  401388:	46bd      	mov	sp, r7
  40138a:	bd90      	pop	{r4, r7, pc}
  40138c:	00400e81 	.word	0x00400e81
  401390:	00400e55 	.word	0x00400e55
  401394:	00400f91 	.word	0x00400f91
  401398:	00401011 	.word	0x00401011

0040139c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40139c:	b480      	push	{r7}
  40139e:	b085      	sub	sp, #20
  4013a0:	af00      	add	r7, sp, #0
  4013a2:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013a4:	687b      	ldr	r3, [r7, #4]
  4013a6:	095b      	lsrs	r3, r3, #5
  4013a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4013ac:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4013b0:	025b      	lsls	r3, r3, #9
  4013b2:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4013b4:	68fb      	ldr	r3, [r7, #12]
}
  4013b6:	4618      	mov	r0, r3
  4013b8:	3714      	adds	r7, #20
  4013ba:	46bd      	mov	sp, r7
  4013bc:	bc80      	pop	{r7}
  4013be:	4770      	bx	lr

004013c0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4013c0:	b480      	push	{r7}
  4013c2:	b085      	sub	sp, #20
  4013c4:	af00      	add	r7, sp, #0
  4013c6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4013c8:	491c      	ldr	r1, [pc, #112]	; (40143c <pmc_switch_mck_to_pllack+0x7c>)
  4013ca:	4b1c      	ldr	r3, [pc, #112]	; (40143c <pmc_switch_mck_to_pllack+0x7c>)
  4013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4013d2:	687b      	ldr	r3, [r7, #4]
  4013d4:	4313      	orrs	r3, r2
  4013d6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4013dc:	60fb      	str	r3, [r7, #12]
  4013de:	e007      	b.n	4013f0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013e0:	68fb      	ldr	r3, [r7, #12]
  4013e2:	2b00      	cmp	r3, #0
  4013e4:	d101      	bne.n	4013ea <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4013e6:	2301      	movs	r3, #1
  4013e8:	e023      	b.n	401432 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4013ea:	68fb      	ldr	r3, [r7, #12]
  4013ec:	3b01      	subs	r3, #1
  4013ee:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013f0:	4b12      	ldr	r3, [pc, #72]	; (40143c <pmc_switch_mck_to_pllack+0x7c>)
  4013f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013f4:	f003 0308 	and.w	r3, r3, #8
  4013f8:	2b00      	cmp	r3, #0
  4013fa:	d0f1      	beq.n	4013e0 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4013fc:	4a0f      	ldr	r2, [pc, #60]	; (40143c <pmc_switch_mck_to_pllack+0x7c>)
  4013fe:	4b0f      	ldr	r3, [pc, #60]	; (40143c <pmc_switch_mck_to_pllack+0x7c>)
  401400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401402:	f023 0303 	bic.w	r3, r3, #3
  401406:	f043 0302 	orr.w	r3, r3, #2
  40140a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40140c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401410:	60fb      	str	r3, [r7, #12]
  401412:	e007      	b.n	401424 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401414:	68fb      	ldr	r3, [r7, #12]
  401416:	2b00      	cmp	r3, #0
  401418:	d101      	bne.n	40141e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40141a:	2301      	movs	r3, #1
  40141c:	e009      	b.n	401432 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40141e:	68fb      	ldr	r3, [r7, #12]
  401420:	3b01      	subs	r3, #1
  401422:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401424:	4b05      	ldr	r3, [pc, #20]	; (40143c <pmc_switch_mck_to_pllack+0x7c>)
  401426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401428:	f003 0308 	and.w	r3, r3, #8
  40142c:	2b00      	cmp	r3, #0
  40142e:	d0f1      	beq.n	401414 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401430:	2300      	movs	r3, #0
}
  401432:	4618      	mov	r0, r3
  401434:	3714      	adds	r7, #20
  401436:	46bd      	mov	sp, r7
  401438:	bc80      	pop	{r7}
  40143a:	4770      	bx	lr
  40143c:	400e0400 	.word	0x400e0400

00401440 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401440:	b480      	push	{r7}
  401442:	b083      	sub	sp, #12
  401444:	af00      	add	r7, sp, #0
  401446:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401448:	687b      	ldr	r3, [r7, #4]
  40144a:	2b01      	cmp	r3, #1
  40144c:	d107      	bne.n	40145e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40144e:	4a08      	ldr	r2, [pc, #32]	; (401470 <pmc_switch_sclk_to_32kxtal+0x30>)
  401450:	4b07      	ldr	r3, [pc, #28]	; (401470 <pmc_switch_sclk_to_32kxtal+0x30>)
  401452:	689b      	ldr	r3, [r3, #8]
  401454:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40145c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40145e:	4b04      	ldr	r3, [pc, #16]	; (401470 <pmc_switch_sclk_to_32kxtal+0x30>)
  401460:	4a04      	ldr	r2, [pc, #16]	; (401474 <pmc_switch_sclk_to_32kxtal+0x34>)
  401462:	601a      	str	r2, [r3, #0]
}
  401464:	bf00      	nop
  401466:	370c      	adds	r7, #12
  401468:	46bd      	mov	sp, r7
  40146a:	bc80      	pop	{r7}
  40146c:	4770      	bx	lr
  40146e:	bf00      	nop
  401470:	400e1410 	.word	0x400e1410
  401474:	a5000008 	.word	0xa5000008

00401478 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401478:	b480      	push	{r7}
  40147a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40147c:	4b09      	ldr	r3, [pc, #36]	; (4014a4 <pmc_osc_is_ready_32kxtal+0x2c>)
  40147e:	695b      	ldr	r3, [r3, #20]
  401480:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401484:	2b00      	cmp	r3, #0
  401486:	d007      	beq.n	401498 <pmc_osc_is_ready_32kxtal+0x20>
  401488:	4b07      	ldr	r3, [pc, #28]	; (4014a8 <pmc_osc_is_ready_32kxtal+0x30>)
  40148a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40148c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401490:	2b00      	cmp	r3, #0
  401492:	d001      	beq.n	401498 <pmc_osc_is_ready_32kxtal+0x20>
  401494:	2301      	movs	r3, #1
  401496:	e000      	b.n	40149a <pmc_osc_is_ready_32kxtal+0x22>
  401498:	2300      	movs	r3, #0
}
  40149a:	4618      	mov	r0, r3
  40149c:	46bd      	mov	sp, r7
  40149e:	bc80      	pop	{r7}
  4014a0:	4770      	bx	lr
  4014a2:	bf00      	nop
  4014a4:	400e1410 	.word	0x400e1410
  4014a8:	400e0400 	.word	0x400e0400

004014ac <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4014ac:	b480      	push	{r7}
  4014ae:	b083      	sub	sp, #12
  4014b0:	af00      	add	r7, sp, #0
  4014b2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4014b4:	4a18      	ldr	r2, [pc, #96]	; (401518 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014b6:	4b18      	ldr	r3, [pc, #96]	; (401518 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014b8:	6a1b      	ldr	r3, [r3, #32]
  4014ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4014be:	f043 0308 	orr.w	r3, r3, #8
  4014c2:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4014c4:	bf00      	nop
  4014c6:	4b14      	ldr	r3, [pc, #80]	; (401518 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4014ce:	2b00      	cmp	r3, #0
  4014d0:	d0f9      	beq.n	4014c6 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4014d2:	4911      	ldr	r1, [pc, #68]	; (401518 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014d4:	4b10      	ldr	r3, [pc, #64]	; (401518 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014d6:	6a1b      	ldr	r3, [r3, #32]
  4014d8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4014dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4014e0:	687a      	ldr	r2, [r7, #4]
  4014e2:	4313      	orrs	r3, r2
  4014e4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4014e8:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4014ea:	bf00      	nop
  4014ec:	4b0a      	ldr	r3, [pc, #40]	; (401518 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4014f4:	2b00      	cmp	r3, #0
  4014f6:	d0f9      	beq.n	4014ec <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4014f8:	4a07      	ldr	r2, [pc, #28]	; (401518 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014fa:	4b07      	ldr	r3, [pc, #28]	; (401518 <pmc_switch_mainck_to_fastrc+0x6c>)
  4014fc:	6a1b      	ldr	r3, [r3, #32]
  4014fe:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401506:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40150a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40150c:	bf00      	nop
  40150e:	370c      	adds	r7, #12
  401510:	46bd      	mov	sp, r7
  401512:	bc80      	pop	{r7}
  401514:	4770      	bx	lr
  401516:	bf00      	nop
  401518:	400e0400 	.word	0x400e0400

0040151c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40151c:	b480      	push	{r7}
  40151e:	b083      	sub	sp, #12
  401520:	af00      	add	r7, sp, #0
  401522:	6078      	str	r0, [r7, #4]
  401524:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401526:	687b      	ldr	r3, [r7, #4]
  401528:	2b00      	cmp	r3, #0
  40152a:	d008      	beq.n	40153e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40152c:	4916      	ldr	r1, [pc, #88]	; (401588 <pmc_switch_mainck_to_xtal+0x6c>)
  40152e:	4b16      	ldr	r3, [pc, #88]	; (401588 <pmc_switch_mainck_to_xtal+0x6c>)
  401530:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401532:	4a16      	ldr	r2, [pc, #88]	; (40158c <pmc_switch_mainck_to_xtal+0x70>)
  401534:	401a      	ands	r2, r3
  401536:	4b16      	ldr	r3, [pc, #88]	; (401590 <pmc_switch_mainck_to_xtal+0x74>)
  401538:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40153a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40153c:	e01e      	b.n	40157c <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40153e:	4912      	ldr	r1, [pc, #72]	; (401588 <pmc_switch_mainck_to_xtal+0x6c>)
  401540:	4b11      	ldr	r3, [pc, #68]	; (401588 <pmc_switch_mainck_to_xtal+0x6c>)
  401542:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401544:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401548:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40154c:	683a      	ldr	r2, [r7, #0]
  40154e:	0212      	lsls	r2, r2, #8
  401550:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401552:	4313      	orrs	r3, r2
  401554:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401558:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40155c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40155e:	bf00      	nop
  401560:	4b09      	ldr	r3, [pc, #36]	; (401588 <pmc_switch_mainck_to_xtal+0x6c>)
  401562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401564:	f003 0301 	and.w	r3, r3, #1
  401568:	2b00      	cmp	r3, #0
  40156a:	d0f9      	beq.n	401560 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40156c:	4a06      	ldr	r2, [pc, #24]	; (401588 <pmc_switch_mainck_to_xtal+0x6c>)
  40156e:	4b06      	ldr	r3, [pc, #24]	; (401588 <pmc_switch_mainck_to_xtal+0x6c>)
  401570:	6a1b      	ldr	r3, [r3, #32]
  401572:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40157a:	6213      	str	r3, [r2, #32]
	}
}
  40157c:	bf00      	nop
  40157e:	370c      	adds	r7, #12
  401580:	46bd      	mov	sp, r7
  401582:	bc80      	pop	{r7}
  401584:	4770      	bx	lr
  401586:	bf00      	nop
  401588:	400e0400 	.word	0x400e0400
  40158c:	fec8fffc 	.word	0xfec8fffc
  401590:	01370002 	.word	0x01370002

00401594 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401594:	b480      	push	{r7}
  401596:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401598:	4b03      	ldr	r3, [pc, #12]	; (4015a8 <pmc_osc_is_ready_mainck+0x14>)
  40159a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4015a0:	4618      	mov	r0, r3
  4015a2:	46bd      	mov	sp, r7
  4015a4:	bc80      	pop	{r7}
  4015a6:	4770      	bx	lr
  4015a8:	400e0400 	.word	0x400e0400

004015ac <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4015ac:	b480      	push	{r7}
  4015ae:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4015b0:	4b03      	ldr	r3, [pc, #12]	; (4015c0 <pmc_disable_pllack+0x14>)
  4015b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4015b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4015b8:	bf00      	nop
  4015ba:	46bd      	mov	sp, r7
  4015bc:	bc80      	pop	{r7}
  4015be:	4770      	bx	lr
  4015c0:	400e0400 	.word	0x400e0400

004015c4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4015c4:	b480      	push	{r7}
  4015c6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4015c8:	4b03      	ldr	r3, [pc, #12]	; (4015d8 <pmc_is_locked_pllack+0x14>)
  4015ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015cc:	f003 0302 	and.w	r3, r3, #2
}
  4015d0:	4618      	mov	r0, r3
  4015d2:	46bd      	mov	sp, r7
  4015d4:	bc80      	pop	{r7}
  4015d6:	4770      	bx	lr
  4015d8:	400e0400 	.word	0x400e0400

004015dc <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4015dc:	b480      	push	{r7}
  4015de:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4015e0:	4b03      	ldr	r3, [pc, #12]	; (4015f0 <pmc_disable_pllbck+0x14>)
  4015e2:	2200      	movs	r2, #0
  4015e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4015e6:	bf00      	nop
  4015e8:	46bd      	mov	sp, r7
  4015ea:	bc80      	pop	{r7}
  4015ec:	4770      	bx	lr
  4015ee:	bf00      	nop
  4015f0:	400e0400 	.word	0x400e0400

004015f4 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4015f4:	b480      	push	{r7}
  4015f6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4015f8:	4b03      	ldr	r3, [pc, #12]	; (401608 <pmc_is_locked_pllbck+0x14>)
  4015fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015fc:	f003 0304 	and.w	r3, r3, #4
}
  401600:	4618      	mov	r0, r3
  401602:	46bd      	mov	sp, r7
  401604:	bc80      	pop	{r7}
  401606:	4770      	bx	lr
  401608:	400e0400 	.word	0x400e0400

0040160c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40160c:	b480      	push	{r7}
  40160e:	b083      	sub	sp, #12
  401610:	af00      	add	r7, sp, #0
  401612:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401614:	687b      	ldr	r3, [r7, #4]
  401616:	2b22      	cmp	r3, #34	; 0x22
  401618:	d901      	bls.n	40161e <pmc_enable_periph_clk+0x12>
		return 1;
  40161a:	2301      	movs	r3, #1
  40161c:	e02f      	b.n	40167e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40161e:	687b      	ldr	r3, [r7, #4]
  401620:	2b1f      	cmp	r3, #31
  401622:	d813      	bhi.n	40164c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401624:	4b18      	ldr	r3, [pc, #96]	; (401688 <pmc_enable_periph_clk+0x7c>)
  401626:	699a      	ldr	r2, [r3, #24]
  401628:	2101      	movs	r1, #1
  40162a:	687b      	ldr	r3, [r7, #4]
  40162c:	fa01 f303 	lsl.w	r3, r1, r3
  401630:	401a      	ands	r2, r3
  401632:	2101      	movs	r1, #1
  401634:	687b      	ldr	r3, [r7, #4]
  401636:	fa01 f303 	lsl.w	r3, r1, r3
  40163a:	429a      	cmp	r2, r3
  40163c:	d01e      	beq.n	40167c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40163e:	4a12      	ldr	r2, [pc, #72]	; (401688 <pmc_enable_periph_clk+0x7c>)
  401640:	2101      	movs	r1, #1
  401642:	687b      	ldr	r3, [r7, #4]
  401644:	fa01 f303 	lsl.w	r3, r1, r3
  401648:	6113      	str	r3, [r2, #16]
  40164a:	e017      	b.n	40167c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40164c:	687b      	ldr	r3, [r7, #4]
  40164e:	3b20      	subs	r3, #32
  401650:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401652:	4b0d      	ldr	r3, [pc, #52]	; (401688 <pmc_enable_periph_clk+0x7c>)
  401654:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401658:	2101      	movs	r1, #1
  40165a:	687b      	ldr	r3, [r7, #4]
  40165c:	fa01 f303 	lsl.w	r3, r1, r3
  401660:	401a      	ands	r2, r3
  401662:	2101      	movs	r1, #1
  401664:	687b      	ldr	r3, [r7, #4]
  401666:	fa01 f303 	lsl.w	r3, r1, r3
  40166a:	429a      	cmp	r2, r3
  40166c:	d006      	beq.n	40167c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40166e:	4a06      	ldr	r2, [pc, #24]	; (401688 <pmc_enable_periph_clk+0x7c>)
  401670:	2101      	movs	r1, #1
  401672:	687b      	ldr	r3, [r7, #4]
  401674:	fa01 f303 	lsl.w	r3, r1, r3
  401678:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40167c:	2300      	movs	r3, #0
}
  40167e:	4618      	mov	r0, r3
  401680:	370c      	adds	r7, #12
  401682:	46bd      	mov	sp, r7
  401684:	bc80      	pop	{r7}
  401686:	4770      	bx	lr
  401688:	400e0400 	.word	0x400e0400

0040168c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40168c:	b580      	push	{r7, lr}
  40168e:	b082      	sub	sp, #8
  401690:	af00      	add	r7, sp, #0
  401692:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401694:	6878      	ldr	r0, [r7, #4]
  401696:	4b03      	ldr	r3, [pc, #12]	; (4016a4 <sysclk_enable_peripheral_clock+0x18>)
  401698:	4798      	blx	r3
}
  40169a:	bf00      	nop
  40169c:	3708      	adds	r7, #8
  40169e:	46bd      	mov	sp, r7
  4016a0:	bd80      	pop	{r7, pc}
  4016a2:	bf00      	nop
  4016a4:	0040160d 	.word	0x0040160d

004016a8 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4016a8:	b580      	push	{r7, lr}
  4016aa:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4016ac:	200b      	movs	r0, #11
  4016ae:	4b05      	ldr	r3, [pc, #20]	; (4016c4 <ioport_init+0x1c>)
  4016b0:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4016b2:	200c      	movs	r0, #12
  4016b4:	4b03      	ldr	r3, [pc, #12]	; (4016c4 <ioport_init+0x1c>)
  4016b6:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4016b8:	200d      	movs	r0, #13
  4016ba:	4b02      	ldr	r3, [pc, #8]	; (4016c4 <ioport_init+0x1c>)
  4016bc:	4798      	blx	r3
	arch_ioport_init();
}
  4016be:	bf00      	nop
  4016c0:	bd80      	pop	{r7, pc}
  4016c2:	bf00      	nop
  4016c4:	0040168d 	.word	0x0040168d

004016c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4016c8:	b580      	push	{r7, lr}
  4016ca:	af00      	add	r7, sp, #0
	/* Init IO Port service to enable configuring pins */
	ioport_init();
  4016cc:	4b0b      	ldr	r3, [pc, #44]	; (4016fc <board_init+0x34>)
  4016ce:	4798      	blx	r3

	/* Configure UART1 pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4016d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4016d4:	210c      	movs	r1, #12
  4016d6:	480a      	ldr	r0, [pc, #40]	; (401700 <board_init+0x38>)
  4016d8:	4b0a      	ldr	r3, [pc, #40]	; (401704 <board_init+0x3c>)
  4016da:	4798      	blx	r3

	/* Configure USART0 pins */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  4016dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4016e0:	2160      	movs	r1, #96	; 0x60
  4016e2:	4809      	ldr	r0, [pc, #36]	; (401708 <board_init+0x40>)
  4016e4:	4b07      	ldr	r3, [pc, #28]	; (401704 <board_init+0x3c>)
  4016e6:	4798      	blx	r3

	/* Configure USART1 pins */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  4016e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4016ec:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
  4016f0:	4805      	ldr	r0, [pc, #20]	; (401708 <board_init+0x40>)
  4016f2:	4b04      	ldr	r3, [pc, #16]	; (401704 <board_init+0x3c>)
  4016f4:	4798      	blx	r3
}
  4016f6:	bf00      	nop
  4016f8:	bd80      	pop	{r7, pc}
  4016fa:	bf00      	nop
  4016fc:	004016a9 	.word	0x004016a9
  401700:	400e1000 	.word	0x400e1000
  401704:	00401271 	.word	0x00401271
  401708:	400e0e00 	.word	0x400e0e00

0040170c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40170c:	b580      	push	{r7, lr}
  40170e:	b084      	sub	sp, #16
  401710:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401712:	4b27      	ldr	r3, [pc, #156]	; (4017b0 <Reset_Handler+0xa4>)
  401714:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401716:	4b27      	ldr	r3, [pc, #156]	; (4017b4 <Reset_Handler+0xa8>)
  401718:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40171a:	68fa      	ldr	r2, [r7, #12]
  40171c:	68bb      	ldr	r3, [r7, #8]
  40171e:	429a      	cmp	r2, r3
  401720:	d90d      	bls.n	40173e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401722:	e007      	b.n	401734 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401724:	68bb      	ldr	r3, [r7, #8]
  401726:	1d1a      	adds	r2, r3, #4
  401728:	60ba      	str	r2, [r7, #8]
  40172a:	68fa      	ldr	r2, [r7, #12]
  40172c:	1d11      	adds	r1, r2, #4
  40172e:	60f9      	str	r1, [r7, #12]
  401730:	6812      	ldr	r2, [r2, #0]
  401732:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401734:	68bb      	ldr	r3, [r7, #8]
  401736:	4a20      	ldr	r2, [pc, #128]	; (4017b8 <Reset_Handler+0xac>)
  401738:	4293      	cmp	r3, r2
  40173a:	d3f3      	bcc.n	401724 <Reset_Handler+0x18>
  40173c:	e020      	b.n	401780 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40173e:	68fa      	ldr	r2, [r7, #12]
  401740:	68bb      	ldr	r3, [r7, #8]
  401742:	429a      	cmp	r2, r3
  401744:	d21c      	bcs.n	401780 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401746:	4a1c      	ldr	r2, [pc, #112]	; (4017b8 <Reset_Handler+0xac>)
  401748:	4b1a      	ldr	r3, [pc, #104]	; (4017b4 <Reset_Handler+0xa8>)
  40174a:	1ad3      	subs	r3, r2, r3
  40174c:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40174e:	68fa      	ldr	r2, [r7, #12]
  401750:	687b      	ldr	r3, [r7, #4]
  401752:	4413      	add	r3, r2
  401754:	3b04      	subs	r3, #4
  401756:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401758:	68ba      	ldr	r2, [r7, #8]
  40175a:	687b      	ldr	r3, [r7, #4]
  40175c:	4413      	add	r3, r2
  40175e:	3b04      	subs	r3, #4
  401760:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401762:	e00a      	b.n	40177a <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401764:	68bb      	ldr	r3, [r7, #8]
  401766:	1f1a      	subs	r2, r3, #4
  401768:	60ba      	str	r2, [r7, #8]
  40176a:	68fa      	ldr	r2, [r7, #12]
  40176c:	1f11      	subs	r1, r2, #4
  40176e:	60f9      	str	r1, [r7, #12]
  401770:	6812      	ldr	r2, [r2, #0]
  401772:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401774:	687b      	ldr	r3, [r7, #4]
  401776:	3b04      	subs	r3, #4
  401778:	607b      	str	r3, [r7, #4]
  40177a:	687b      	ldr	r3, [r7, #4]
  40177c:	2b00      	cmp	r3, #0
  40177e:	d1f1      	bne.n	401764 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401780:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401782:	4b0e      	ldr	r3, [pc, #56]	; (4017bc <Reset_Handler+0xb0>)
  401784:	60bb      	str	r3, [r7, #8]
  401786:	e004      	b.n	401792 <Reset_Handler+0x86>
		*pDest++ = 0;
  401788:	68bb      	ldr	r3, [r7, #8]
  40178a:	1d1a      	adds	r2, r3, #4
  40178c:	60ba      	str	r2, [r7, #8]
  40178e:	2200      	movs	r2, #0
  401790:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401792:	68bb      	ldr	r3, [r7, #8]
  401794:	4a0a      	ldr	r2, [pc, #40]	; (4017c0 <Reset_Handler+0xb4>)
  401796:	4293      	cmp	r3, r2
  401798:	d3f6      	bcc.n	401788 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40179a:	4b0a      	ldr	r3, [pc, #40]	; (4017c4 <Reset_Handler+0xb8>)
  40179c:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40179e:	4a0a      	ldr	r2, [pc, #40]	; (4017c8 <Reset_Handler+0xbc>)
  4017a0:	68fb      	ldr	r3, [r7, #12]
  4017a2:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4017a4:	4b09      	ldr	r3, [pc, #36]	; (4017cc <Reset_Handler+0xc0>)
  4017a6:	4798      	blx	r3

	/* Branch to main function */
	main();
  4017a8:	4b09      	ldr	r3, [pc, #36]	; (4017d0 <Reset_Handler+0xc4>)
  4017aa:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4017ac:	e7fe      	b.n	4017ac <Reset_Handler+0xa0>
  4017ae:	bf00      	nop
  4017b0:	00405228 	.word	0x00405228
  4017b4:	20000000 	.word	0x20000000
  4017b8:	2000086c 	.word	0x2000086c
  4017bc:	2000086c 	.word	0x2000086c
  4017c0:	20000afc 	.word	0x20000afc
  4017c4:	00400000 	.word	0x00400000
  4017c8:	e000ed00 	.word	0xe000ed00
  4017cc:	00402101 	.word	0x00402101
  4017d0:	00401e65 	.word	0x00401e65

004017d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4017d4:	b480      	push	{r7}
  4017d6:	af00      	add	r7, sp, #0
	while (1) {
	}
  4017d8:	e7fe      	b.n	4017d8 <Dummy_Handler+0x4>
  4017da:	bf00      	nop

004017dc <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4017dc:	b480      	push	{r7}
  4017de:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4017e0:	4b5d      	ldr	r3, [pc, #372]	; (401958 <SystemCoreClockUpdate+0x17c>)
  4017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017e4:	f003 0303 	and.w	r3, r3, #3
  4017e8:	2b03      	cmp	r3, #3
  4017ea:	f200 8096 	bhi.w	40191a <SystemCoreClockUpdate+0x13e>
  4017ee:	a201      	add	r2, pc, #4	; (adr r2, 4017f4 <SystemCoreClockUpdate+0x18>)
  4017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017f4:	00401805 	.word	0x00401805
  4017f8:	00401825 	.word	0x00401825
  4017fc:	0040186f 	.word	0x0040186f
  401800:	0040186f 	.word	0x0040186f
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401804:	4b55      	ldr	r3, [pc, #340]	; (40195c <SystemCoreClockUpdate+0x180>)
  401806:	695b      	ldr	r3, [r3, #20]
  401808:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40180c:	2b00      	cmp	r3, #0
  40180e:	d004      	beq.n	40181a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401810:	4b53      	ldr	r3, [pc, #332]	; (401960 <SystemCoreClockUpdate+0x184>)
  401812:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401816:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401818:	e080      	b.n	40191c <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40181a:	4b51      	ldr	r3, [pc, #324]	; (401960 <SystemCoreClockUpdate+0x184>)
  40181c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401820:	601a      	str	r2, [r3, #0]
			}
		break;
  401822:	e07b      	b.n	40191c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401824:	4b4c      	ldr	r3, [pc, #304]	; (401958 <SystemCoreClockUpdate+0x17c>)
  401826:	6a1b      	ldr	r3, [r3, #32]
  401828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40182c:	2b00      	cmp	r3, #0
  40182e:	d003      	beq.n	401838 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401830:	4b4b      	ldr	r3, [pc, #300]	; (401960 <SystemCoreClockUpdate+0x184>)
  401832:	4a4c      	ldr	r2, [pc, #304]	; (401964 <SystemCoreClockUpdate+0x188>)
  401834:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401836:	e071      	b.n	40191c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401838:	4b49      	ldr	r3, [pc, #292]	; (401960 <SystemCoreClockUpdate+0x184>)
  40183a:	4a4b      	ldr	r2, [pc, #300]	; (401968 <SystemCoreClockUpdate+0x18c>)
  40183c:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40183e:	4b46      	ldr	r3, [pc, #280]	; (401958 <SystemCoreClockUpdate+0x17c>)
  401840:	6a1b      	ldr	r3, [r3, #32]
  401842:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401846:	2b10      	cmp	r3, #16
  401848:	d008      	beq.n	40185c <SystemCoreClockUpdate+0x80>
  40184a:	2b20      	cmp	r3, #32
  40184c:	d00a      	beq.n	401864 <SystemCoreClockUpdate+0x88>
  40184e:	2b00      	cmp	r3, #0
  401850:	d000      	beq.n	401854 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  401852:	e00b      	b.n	40186c <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401854:	4b42      	ldr	r3, [pc, #264]	; (401960 <SystemCoreClockUpdate+0x184>)
  401856:	4a44      	ldr	r2, [pc, #272]	; (401968 <SystemCoreClockUpdate+0x18c>)
  401858:	601a      	str	r2, [r3, #0]
			break;
  40185a:	e007      	b.n	40186c <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40185c:	4b40      	ldr	r3, [pc, #256]	; (401960 <SystemCoreClockUpdate+0x184>)
  40185e:	4a43      	ldr	r2, [pc, #268]	; (40196c <SystemCoreClockUpdate+0x190>)
  401860:	601a      	str	r2, [r3, #0]
			break;
  401862:	e003      	b.n	40186c <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401864:	4b3e      	ldr	r3, [pc, #248]	; (401960 <SystemCoreClockUpdate+0x184>)
  401866:	4a3f      	ldr	r2, [pc, #252]	; (401964 <SystemCoreClockUpdate+0x188>)
  401868:	601a      	str	r2, [r3, #0]
			break;
  40186a:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  40186c:	e056      	b.n	40191c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40186e:	4b3a      	ldr	r3, [pc, #232]	; (401958 <SystemCoreClockUpdate+0x17c>)
  401870:	6a1b      	ldr	r3, [r3, #32]
  401872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401876:	2b00      	cmp	r3, #0
  401878:	d003      	beq.n	401882 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40187a:	4b39      	ldr	r3, [pc, #228]	; (401960 <SystemCoreClockUpdate+0x184>)
  40187c:	4a39      	ldr	r2, [pc, #228]	; (401964 <SystemCoreClockUpdate+0x188>)
  40187e:	601a      	str	r2, [r3, #0]
  401880:	e019      	b.n	4018b6 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401882:	4b37      	ldr	r3, [pc, #220]	; (401960 <SystemCoreClockUpdate+0x184>)
  401884:	4a38      	ldr	r2, [pc, #224]	; (401968 <SystemCoreClockUpdate+0x18c>)
  401886:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401888:	4b33      	ldr	r3, [pc, #204]	; (401958 <SystemCoreClockUpdate+0x17c>)
  40188a:	6a1b      	ldr	r3, [r3, #32]
  40188c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401890:	2b10      	cmp	r3, #16
  401892:	d008      	beq.n	4018a6 <SystemCoreClockUpdate+0xca>
  401894:	2b20      	cmp	r3, #32
  401896:	d00a      	beq.n	4018ae <SystemCoreClockUpdate+0xd2>
  401898:	2b00      	cmp	r3, #0
  40189a:	d000      	beq.n	40189e <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40189c:	e00b      	b.n	4018b6 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40189e:	4b30      	ldr	r3, [pc, #192]	; (401960 <SystemCoreClockUpdate+0x184>)
  4018a0:	4a31      	ldr	r2, [pc, #196]	; (401968 <SystemCoreClockUpdate+0x18c>)
  4018a2:	601a      	str	r2, [r3, #0]
					break;
  4018a4:	e007      	b.n	4018b6 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4018a6:	4b2e      	ldr	r3, [pc, #184]	; (401960 <SystemCoreClockUpdate+0x184>)
  4018a8:	4a30      	ldr	r2, [pc, #192]	; (40196c <SystemCoreClockUpdate+0x190>)
  4018aa:	601a      	str	r2, [r3, #0]
					break;
  4018ac:	e003      	b.n	4018b6 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4018ae:	4b2c      	ldr	r3, [pc, #176]	; (401960 <SystemCoreClockUpdate+0x184>)
  4018b0:	4a2c      	ldr	r2, [pc, #176]	; (401964 <SystemCoreClockUpdate+0x188>)
  4018b2:	601a      	str	r2, [r3, #0]
					break;
  4018b4:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4018b6:	4b28      	ldr	r3, [pc, #160]	; (401958 <SystemCoreClockUpdate+0x17c>)
  4018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018ba:	f003 0303 	and.w	r3, r3, #3
  4018be:	2b02      	cmp	r3, #2
  4018c0:	d115      	bne.n	4018ee <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4018c2:	4b25      	ldr	r3, [pc, #148]	; (401958 <SystemCoreClockUpdate+0x17c>)
  4018c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4018c6:	4b2a      	ldr	r3, [pc, #168]	; (401970 <SystemCoreClockUpdate+0x194>)
  4018c8:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4018ca:	0c1b      	lsrs	r3, r3, #16
  4018cc:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4018ce:	4a24      	ldr	r2, [pc, #144]	; (401960 <SystemCoreClockUpdate+0x184>)
  4018d0:	6812      	ldr	r2, [r2, #0]
  4018d2:	fb02 f303 	mul.w	r3, r2, r3
  4018d6:	4a22      	ldr	r2, [pc, #136]	; (401960 <SystemCoreClockUpdate+0x184>)
  4018d8:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4018da:	4b1f      	ldr	r3, [pc, #124]	; (401958 <SystemCoreClockUpdate+0x17c>)
  4018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4018de:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4018e0:	4a1f      	ldr	r2, [pc, #124]	; (401960 <SystemCoreClockUpdate+0x184>)
  4018e2:	6812      	ldr	r2, [r2, #0]
  4018e4:	fbb2 f3f3 	udiv	r3, r2, r3
  4018e8:	4a1d      	ldr	r2, [pc, #116]	; (401960 <SystemCoreClockUpdate+0x184>)
  4018ea:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4018ec:	e016      	b.n	40191c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4018ee:	4b1a      	ldr	r3, [pc, #104]	; (401958 <SystemCoreClockUpdate+0x17c>)
  4018f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4018f2:	4b1f      	ldr	r3, [pc, #124]	; (401970 <SystemCoreClockUpdate+0x194>)
  4018f4:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4018f6:	0c1b      	lsrs	r3, r3, #16
  4018f8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4018fa:	4a19      	ldr	r2, [pc, #100]	; (401960 <SystemCoreClockUpdate+0x184>)
  4018fc:	6812      	ldr	r2, [r2, #0]
  4018fe:	fb02 f303 	mul.w	r3, r2, r3
  401902:	4a17      	ldr	r2, [pc, #92]	; (401960 <SystemCoreClockUpdate+0x184>)
  401904:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401906:	4b14      	ldr	r3, [pc, #80]	; (401958 <SystemCoreClockUpdate+0x17c>)
  401908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40190a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40190c:	4a14      	ldr	r2, [pc, #80]	; (401960 <SystemCoreClockUpdate+0x184>)
  40190e:	6812      	ldr	r2, [r2, #0]
  401910:	fbb2 f3f3 	udiv	r3, r2, r3
  401914:	4a12      	ldr	r2, [pc, #72]	; (401960 <SystemCoreClockUpdate+0x184>)
  401916:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401918:	e000      	b.n	40191c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40191a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40191c:	4b0e      	ldr	r3, [pc, #56]	; (401958 <SystemCoreClockUpdate+0x17c>)
  40191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401920:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401924:	2b70      	cmp	r3, #112	; 0x70
  401926:	d108      	bne.n	40193a <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401928:	4b0d      	ldr	r3, [pc, #52]	; (401960 <SystemCoreClockUpdate+0x184>)
  40192a:	681b      	ldr	r3, [r3, #0]
  40192c:	4a11      	ldr	r2, [pc, #68]	; (401974 <SystemCoreClockUpdate+0x198>)
  40192e:	fba2 2303 	umull	r2, r3, r2, r3
  401932:	085b      	lsrs	r3, r3, #1
  401934:	4a0a      	ldr	r2, [pc, #40]	; (401960 <SystemCoreClockUpdate+0x184>)
  401936:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401938:	e00a      	b.n	401950 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40193a:	4b07      	ldr	r3, [pc, #28]	; (401958 <SystemCoreClockUpdate+0x17c>)
  40193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40193e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401942:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401944:	4a06      	ldr	r2, [pc, #24]	; (401960 <SystemCoreClockUpdate+0x184>)
  401946:	6812      	ldr	r2, [r2, #0]
  401948:	fa22 f303 	lsr.w	r3, r2, r3
  40194c:	4a04      	ldr	r2, [pc, #16]	; (401960 <SystemCoreClockUpdate+0x184>)
  40194e:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401950:	bf00      	nop
  401952:	46bd      	mov	sp, r7
  401954:	bc80      	pop	{r7}
  401956:	4770      	bx	lr
  401958:	400e0400 	.word	0x400e0400
  40195c:	400e1410 	.word	0x400e1410
  401960:	20000000 	.word	0x20000000
  401964:	00b71b00 	.word	0x00b71b00
  401968:	003d0900 	.word	0x003d0900
  40196c:	007a1200 	.word	0x007a1200
  401970:	07ff0000 	.word	0x07ff0000
  401974:	aaaaaaab 	.word	0xaaaaaaab

00401978 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  401978:	b480      	push	{r7}
  40197a:	b083      	sub	sp, #12
  40197c:	af00      	add	r7, sp, #0
  40197e:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401980:	687b      	ldr	r3, [r7, #4]
  401982:	4a22      	ldr	r2, [pc, #136]	; (401a0c <system_init_flash+0x94>)
  401984:	4293      	cmp	r3, r2
  401986:	d808      	bhi.n	40199a <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401988:	4b21      	ldr	r3, [pc, #132]	; (401a10 <system_init_flash+0x98>)
  40198a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40198e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401990:	4b20      	ldr	r3, [pc, #128]	; (401a14 <system_init_flash+0x9c>)
  401992:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401996:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401998:	e033      	b.n	401a02 <system_init_flash+0x8a>
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40199a:	687b      	ldr	r3, [r7, #4]
  40199c:	4a1e      	ldr	r2, [pc, #120]	; (401a18 <system_init_flash+0xa0>)
  40199e:	4293      	cmp	r3, r2
  4019a0:	d806      	bhi.n	4019b0 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4019a2:	4b1b      	ldr	r3, [pc, #108]	; (401a10 <system_init_flash+0x98>)
  4019a4:	4a1d      	ldr	r2, [pc, #116]	; (401a1c <system_init_flash+0xa4>)
  4019a6:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4019a8:	4b1a      	ldr	r3, [pc, #104]	; (401a14 <system_init_flash+0x9c>)
  4019aa:	4a1c      	ldr	r2, [pc, #112]	; (401a1c <system_init_flash+0xa4>)
  4019ac:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4019ae:	e028      	b.n	401a02 <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4019b0:	687b      	ldr	r3, [r7, #4]
  4019b2:	4a1b      	ldr	r2, [pc, #108]	; (401a20 <system_init_flash+0xa8>)
  4019b4:	4293      	cmp	r3, r2
  4019b6:	d806      	bhi.n	4019c6 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4019b8:	4b15      	ldr	r3, [pc, #84]	; (401a10 <system_init_flash+0x98>)
  4019ba:	4a1a      	ldr	r2, [pc, #104]	; (401a24 <system_init_flash+0xac>)
  4019bc:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4019be:	4b15      	ldr	r3, [pc, #84]	; (401a14 <system_init_flash+0x9c>)
  4019c0:	4a18      	ldr	r2, [pc, #96]	; (401a24 <system_init_flash+0xac>)
  4019c2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4019c4:	e01d      	b.n	401a02 <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4019c6:	687b      	ldr	r3, [r7, #4]
  4019c8:	4a17      	ldr	r2, [pc, #92]	; (401a28 <system_init_flash+0xb0>)
  4019ca:	4293      	cmp	r3, r2
  4019cc:	d806      	bhi.n	4019dc <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4019ce:	4b10      	ldr	r3, [pc, #64]	; (401a10 <system_init_flash+0x98>)
  4019d0:	4a16      	ldr	r2, [pc, #88]	; (401a2c <system_init_flash+0xb4>)
  4019d2:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4019d4:	4b0f      	ldr	r3, [pc, #60]	; (401a14 <system_init_flash+0x9c>)
  4019d6:	4a15      	ldr	r2, [pc, #84]	; (401a2c <system_init_flash+0xb4>)
  4019d8:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4019da:	e012      	b.n	401a02 <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4019dc:	687b      	ldr	r3, [r7, #4]
  4019de:	4a14      	ldr	r2, [pc, #80]	; (401a30 <system_init_flash+0xb8>)
  4019e0:	4293      	cmp	r3, r2
  4019e2:	d808      	bhi.n	4019f6 <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4019e4:	4b0a      	ldr	r3, [pc, #40]	; (401a10 <system_init_flash+0x98>)
  4019e6:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4019ea:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4019ec:	4b09      	ldr	r3, [pc, #36]	; (401a14 <system_init_flash+0x9c>)
  4019ee:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4019f2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4019f4:	e005      	b.n	401a02 <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4019f6:	4b06      	ldr	r3, [pc, #24]	; (401a10 <system_init_flash+0x98>)
  4019f8:	4a0e      	ldr	r2, [pc, #56]	; (401a34 <system_init_flash+0xbc>)
  4019fa:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4019fc:	4b05      	ldr	r3, [pc, #20]	; (401a14 <system_init_flash+0x9c>)
  4019fe:	4a0d      	ldr	r2, [pc, #52]	; (401a34 <system_init_flash+0xbc>)
  401a00:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401a02:	bf00      	nop
  401a04:	370c      	adds	r7, #12
  401a06:	46bd      	mov	sp, r7
  401a08:	bc80      	pop	{r7}
  401a0a:	4770      	bx	lr
  401a0c:	01312cff 	.word	0x01312cff
  401a10:	400e0a00 	.word	0x400e0a00
  401a14:	400e0c00 	.word	0x400e0c00
  401a18:	026259ff 	.word	0x026259ff
  401a1c:	04000100 	.word	0x04000100
  401a20:	039386ff 	.word	0x039386ff
  401a24:	04000200 	.word	0x04000200
  401a28:	04c4b3ff 	.word	0x04c4b3ff
  401a2c:	04000300 	.word	0x04000300
  401a30:	05f5e0ff 	.word	0x05f5e0ff
  401a34:	04000500 	.word	0x04000500

00401a38 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401a38:	b480      	push	{r7}
  401a3a:	b085      	sub	sp, #20
  401a3c:	af00      	add	r7, sp, #0
  401a3e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401a40:	4b10      	ldr	r3, [pc, #64]	; (401a84 <_sbrk+0x4c>)
  401a42:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401a44:	4b10      	ldr	r3, [pc, #64]	; (401a88 <_sbrk+0x50>)
  401a46:	681b      	ldr	r3, [r3, #0]
  401a48:	2b00      	cmp	r3, #0
  401a4a:	d102      	bne.n	401a52 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401a4c:	4b0e      	ldr	r3, [pc, #56]	; (401a88 <_sbrk+0x50>)
  401a4e:	4a0f      	ldr	r2, [pc, #60]	; (401a8c <_sbrk+0x54>)
  401a50:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401a52:	4b0d      	ldr	r3, [pc, #52]	; (401a88 <_sbrk+0x50>)
  401a54:	681b      	ldr	r3, [r3, #0]
  401a56:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401a58:	68ba      	ldr	r2, [r7, #8]
  401a5a:	687b      	ldr	r3, [r7, #4]
  401a5c:	441a      	add	r2, r3
  401a5e:	68fb      	ldr	r3, [r7, #12]
  401a60:	429a      	cmp	r2, r3
  401a62:	dd02      	ble.n	401a6a <_sbrk+0x32>
		return (caddr_t) -1;	
  401a64:	f04f 33ff 	mov.w	r3, #4294967295
  401a68:	e006      	b.n	401a78 <_sbrk+0x40>
	}

	heap += incr;
  401a6a:	4b07      	ldr	r3, [pc, #28]	; (401a88 <_sbrk+0x50>)
  401a6c:	681a      	ldr	r2, [r3, #0]
  401a6e:	687b      	ldr	r3, [r7, #4]
  401a70:	4413      	add	r3, r2
  401a72:	4a05      	ldr	r2, [pc, #20]	; (401a88 <_sbrk+0x50>)
  401a74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401a76:	68bb      	ldr	r3, [r7, #8]
}
  401a78:	4618      	mov	r0, r3
  401a7a:	3714      	adds	r7, #20
  401a7c:	46bd      	mov	sp, r7
  401a7e:	bc80      	pop	{r7}
  401a80:	4770      	bx	lr
  401a82:	bf00      	nop
  401a84:	20027ffc 	.word	0x20027ffc
  401a88:	20000a94 	.word	0x20000a94
  401a8c:	20003b00 	.word	0x20003b00

00401a90 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401a90:	b480      	push	{r7}
  401a92:	b083      	sub	sp, #12
  401a94:	af00      	add	r7, sp, #0
  401a96:	6078      	str	r0, [r7, #4]
	return -1;
  401a98:	f04f 33ff 	mov.w	r3, #4294967295
}
  401a9c:	4618      	mov	r0, r3
  401a9e:	370c      	adds	r7, #12
  401aa0:	46bd      	mov	sp, r7
  401aa2:	bc80      	pop	{r7}
  401aa4:	4770      	bx	lr
  401aa6:	bf00      	nop

00401aa8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401aa8:	b480      	push	{r7}
  401aaa:	b083      	sub	sp, #12
  401aac:	af00      	add	r7, sp, #0
  401aae:	6078      	str	r0, [r7, #4]
  401ab0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401ab2:	683b      	ldr	r3, [r7, #0]
  401ab4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401ab8:	605a      	str	r2, [r3, #4]

	return 0;
  401aba:	2300      	movs	r3, #0
}
  401abc:	4618      	mov	r0, r3
  401abe:	370c      	adds	r7, #12
  401ac0:	46bd      	mov	sp, r7
  401ac2:	bc80      	pop	{r7}
  401ac4:	4770      	bx	lr
  401ac6:	bf00      	nop

00401ac8 <_isatty>:

extern int _isatty(int file)
{
  401ac8:	b480      	push	{r7}
  401aca:	b083      	sub	sp, #12
  401acc:	af00      	add	r7, sp, #0
  401ace:	6078      	str	r0, [r7, #4]
	return 1;
  401ad0:	2301      	movs	r3, #1
}
  401ad2:	4618      	mov	r0, r3
  401ad4:	370c      	adds	r7, #12
  401ad6:	46bd      	mov	sp, r7
  401ad8:	bc80      	pop	{r7}
  401ada:	4770      	bx	lr

00401adc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401adc:	b480      	push	{r7}
  401ade:	b085      	sub	sp, #20
  401ae0:	af00      	add	r7, sp, #0
  401ae2:	60f8      	str	r0, [r7, #12]
  401ae4:	60b9      	str	r1, [r7, #8]
  401ae6:	607a      	str	r2, [r7, #4]
	return 0;
  401ae8:	2300      	movs	r3, #0
}
  401aea:	4618      	mov	r0, r3
  401aec:	3714      	adds	r7, #20
  401aee:	46bd      	mov	sp, r7
  401af0:	bc80      	pop	{r7}
  401af2:	4770      	bx	lr

00401af4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401af4:	b480      	push	{r7}
  401af6:	b083      	sub	sp, #12
  401af8:	af00      	add	r7, sp, #0
  401afa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401afc:	687b      	ldr	r3, [r7, #4]
  401afe:	2b07      	cmp	r3, #7
  401b00:	d825      	bhi.n	401b4e <osc_get_rate+0x5a>
  401b02:	a201      	add	r2, pc, #4	; (adr r2, 401b08 <osc_get_rate+0x14>)
  401b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401b08:	00401b29 	.word	0x00401b29
  401b0c:	00401b2f 	.word	0x00401b2f
  401b10:	00401b35 	.word	0x00401b35
  401b14:	00401b3b 	.word	0x00401b3b
  401b18:	00401b3f 	.word	0x00401b3f
  401b1c:	00401b43 	.word	0x00401b43
  401b20:	00401b47 	.word	0x00401b47
  401b24:	00401b4b 	.word	0x00401b4b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401b28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401b2c:	e010      	b.n	401b50 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b32:	e00d      	b.n	401b50 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b38:	e00a      	b.n	401b50 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401b3a:	4b08      	ldr	r3, [pc, #32]	; (401b5c <osc_get_rate+0x68>)
  401b3c:	e008      	b.n	401b50 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401b3e:	4b08      	ldr	r3, [pc, #32]	; (401b60 <osc_get_rate+0x6c>)
  401b40:	e006      	b.n	401b50 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401b42:	4b08      	ldr	r3, [pc, #32]	; (401b64 <osc_get_rate+0x70>)
  401b44:	e004      	b.n	401b50 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401b46:	4b07      	ldr	r3, [pc, #28]	; (401b64 <osc_get_rate+0x70>)
  401b48:	e002      	b.n	401b50 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401b4a:	4b06      	ldr	r3, [pc, #24]	; (401b64 <osc_get_rate+0x70>)
  401b4c:	e000      	b.n	401b50 <osc_get_rate+0x5c>
	}

	return 0;
  401b4e:	2300      	movs	r3, #0
}
  401b50:	4618      	mov	r0, r3
  401b52:	370c      	adds	r7, #12
  401b54:	46bd      	mov	sp, r7
  401b56:	bc80      	pop	{r7}
  401b58:	4770      	bx	lr
  401b5a:	bf00      	nop
  401b5c:	003d0900 	.word	0x003d0900
  401b60:	007a1200 	.word	0x007a1200
  401b64:	00b71b00 	.word	0x00b71b00

00401b68 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401b68:	b580      	push	{r7, lr}
  401b6a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401b6c:	2006      	movs	r0, #6
  401b6e:	4b04      	ldr	r3, [pc, #16]	; (401b80 <sysclk_get_main_hz+0x18>)
  401b70:	4798      	blx	r3
  401b72:	4602      	mov	r2, r0
  401b74:	4613      	mov	r3, r2
  401b76:	009b      	lsls	r3, r3, #2
  401b78:	4413      	add	r3, r2
  401b7a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401b7c:	4618      	mov	r0, r3
  401b7e:	bd80      	pop	{r7, pc}
  401b80:	00401af5 	.word	0x00401af5

00401b84 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401b84:	b580      	push	{r7, lr}
  401b86:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401b88:	4b02      	ldr	r3, [pc, #8]	; (401b94 <sysclk_get_peripheral_hz+0x10>)
  401b8a:	4798      	blx	r3
  401b8c:	4603      	mov	r3, r0
  401b8e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401b90:	4618      	mov	r0, r3
  401b92:	bd80      	pop	{r7, pc}
  401b94:	00401b69 	.word	0x00401b69

00401b98 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401b98:	b580      	push	{r7, lr}
  401b9a:	b082      	sub	sp, #8
  401b9c:	af00      	add	r7, sp, #0
  401b9e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401ba0:	6878      	ldr	r0, [r7, #4]
  401ba2:	4b03      	ldr	r3, [pc, #12]	; (401bb0 <sysclk_enable_peripheral_clock+0x18>)
  401ba4:	4798      	blx	r3
}
  401ba6:	bf00      	nop
  401ba8:	3708      	adds	r7, #8
  401baa:	46bd      	mov	sp, r7
  401bac:	bd80      	pop	{r7, pc}
  401bae:	bf00      	nop
  401bb0:	0040160d 	.word	0x0040160d

00401bb4 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401bb4:	b580      	push	{r7, lr}
  401bb6:	b08c      	sub	sp, #48	; 0x30
  401bb8:	af00      	add	r7, sp, #0
  401bba:	6078      	str	r0, [r7, #4]
  401bbc:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401bbe:	4b31      	ldr	r3, [pc, #196]	; (401c84 <usart_serial_init+0xd0>)
  401bc0:	4798      	blx	r3
  401bc2:	4603      	mov	r3, r0
  401bc4:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401bc6:	683b      	ldr	r3, [r7, #0]
  401bc8:	681b      	ldr	r3, [r3, #0]
  401bca:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401bcc:	683b      	ldr	r3, [r7, #0]
  401bce:	689b      	ldr	r3, [r3, #8]
  401bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401bd2:	683b      	ldr	r3, [r7, #0]
  401bd4:	681b      	ldr	r3, [r3, #0]
  401bd6:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401bd8:	683b      	ldr	r3, [r7, #0]
  401bda:	685b      	ldr	r3, [r3, #4]
  401bdc:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401bde:	683b      	ldr	r3, [r7, #0]
  401be0:	689b      	ldr	r3, [r3, #8]
  401be2:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401be4:	683b      	ldr	r3, [r7, #0]
  401be6:	68db      	ldr	r3, [r3, #12]
  401be8:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401bea:	2300      	movs	r3, #0
  401bec:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401bee:	687b      	ldr	r3, [r7, #4]
  401bf0:	4a25      	ldr	r2, [pc, #148]	; (401c88 <usart_serial_init+0xd4>)
  401bf2:	4293      	cmp	r3, r2
  401bf4:	d108      	bne.n	401c08 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401bf6:	2008      	movs	r0, #8
  401bf8:	4b24      	ldr	r3, [pc, #144]	; (401c8c <usart_serial_init+0xd8>)
  401bfa:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c00:	4619      	mov	r1, r3
  401c02:	6878      	ldr	r0, [r7, #4]
  401c04:	4b22      	ldr	r3, [pc, #136]	; (401c90 <usart_serial_init+0xdc>)
  401c06:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c08:	687b      	ldr	r3, [r7, #4]
  401c0a:	4a22      	ldr	r2, [pc, #136]	; (401c94 <usart_serial_init+0xe0>)
  401c0c:	4293      	cmp	r3, r2
  401c0e:	d108      	bne.n	401c22 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401c10:	2009      	movs	r0, #9
  401c12:	4b1e      	ldr	r3, [pc, #120]	; (401c8c <usart_serial_init+0xd8>)
  401c14:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c1a:	4619      	mov	r1, r3
  401c1c:	6878      	ldr	r0, [r7, #4]
  401c1e:	4b1c      	ldr	r3, [pc, #112]	; (401c90 <usart_serial_init+0xdc>)
  401c20:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401c22:	687b      	ldr	r3, [r7, #4]
  401c24:	4a1c      	ldr	r2, [pc, #112]	; (401c98 <usart_serial_init+0xe4>)
  401c26:	4293      	cmp	r3, r2
  401c28:	d111      	bne.n	401c4e <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401c2a:	200e      	movs	r0, #14
  401c2c:	4b17      	ldr	r3, [pc, #92]	; (401c8c <usart_serial_init+0xd8>)
  401c2e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401c30:	4b14      	ldr	r3, [pc, #80]	; (401c84 <usart_serial_init+0xd0>)
  401c32:	4798      	blx	r3
  401c34:	4602      	mov	r2, r0
  401c36:	f107 030c 	add.w	r3, r7, #12
  401c3a:	4619      	mov	r1, r3
  401c3c:	6878      	ldr	r0, [r7, #4]
  401c3e:	4b17      	ldr	r3, [pc, #92]	; (401c9c <usart_serial_init+0xe8>)
  401c40:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401c42:	6878      	ldr	r0, [r7, #4]
  401c44:	4b16      	ldr	r3, [pc, #88]	; (401ca0 <usart_serial_init+0xec>)
  401c46:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401c48:	6878      	ldr	r0, [r7, #4]
  401c4a:	4b16      	ldr	r3, [pc, #88]	; (401ca4 <usart_serial_init+0xf0>)
  401c4c:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401c4e:	687b      	ldr	r3, [r7, #4]
  401c50:	4a15      	ldr	r2, [pc, #84]	; (401ca8 <usart_serial_init+0xf4>)
  401c52:	4293      	cmp	r3, r2
  401c54:	d111      	bne.n	401c7a <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401c56:	200f      	movs	r0, #15
  401c58:	4b0c      	ldr	r3, [pc, #48]	; (401c8c <usart_serial_init+0xd8>)
  401c5a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401c5c:	4b09      	ldr	r3, [pc, #36]	; (401c84 <usart_serial_init+0xd0>)
  401c5e:	4798      	blx	r3
  401c60:	4602      	mov	r2, r0
  401c62:	f107 030c 	add.w	r3, r7, #12
  401c66:	4619      	mov	r1, r3
  401c68:	6878      	ldr	r0, [r7, #4]
  401c6a:	4b0c      	ldr	r3, [pc, #48]	; (401c9c <usart_serial_init+0xe8>)
  401c6c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401c6e:	6878      	ldr	r0, [r7, #4]
  401c70:	4b0b      	ldr	r3, [pc, #44]	; (401ca0 <usart_serial_init+0xec>)
  401c72:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401c74:	6878      	ldr	r0, [r7, #4]
  401c76:	4b0b      	ldr	r3, [pc, #44]	; (401ca4 <usart_serial_init+0xf0>)
  401c78:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401c7a:	bf00      	nop
  401c7c:	3730      	adds	r7, #48	; 0x30
  401c7e:	46bd      	mov	sp, r7
  401c80:	bd80      	pop	{r7, pc}
  401c82:	bf00      	nop
  401c84:	00401b85 	.word	0x00401b85
  401c88:	400e0600 	.word	0x400e0600
  401c8c:	00401b99 	.word	0x00401b99
  401c90:	004006a5 	.word	0x004006a5
  401c94:	400e0800 	.word	0x400e0800
  401c98:	40024000 	.word	0x40024000
  401c9c:	0040084d 	.word	0x0040084d
  401ca0:	004008d1 	.word	0x004008d1
  401ca4:	00400919 	.word	0x00400919
  401ca8:	40028000 	.word	0x40028000

00401cac <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401cac:	b580      	push	{r7, lr}
  401cae:	b082      	sub	sp, #8
  401cb0:	af00      	add	r7, sp, #0
  401cb2:	6078      	str	r0, [r7, #4]
  401cb4:	460b      	mov	r3, r1
  401cb6:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401cb8:	687b      	ldr	r3, [r7, #4]
  401cba:	4a20      	ldr	r2, [pc, #128]	; (401d3c <usart_serial_putchar+0x90>)
  401cbc:	4293      	cmp	r3, r2
  401cbe:	d10a      	bne.n	401cd6 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401cc0:	bf00      	nop
  401cc2:	78fb      	ldrb	r3, [r7, #3]
  401cc4:	4619      	mov	r1, r3
  401cc6:	6878      	ldr	r0, [r7, #4]
  401cc8:	4b1d      	ldr	r3, [pc, #116]	; (401d40 <usart_serial_putchar+0x94>)
  401cca:	4798      	blx	r3
  401ccc:	4603      	mov	r3, r0
  401cce:	2b00      	cmp	r3, #0
  401cd0:	d1f7      	bne.n	401cc2 <usart_serial_putchar+0x16>
		return 1;
  401cd2:	2301      	movs	r3, #1
  401cd4:	e02d      	b.n	401d32 <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401cd6:	687b      	ldr	r3, [r7, #4]
  401cd8:	4a1a      	ldr	r2, [pc, #104]	; (401d44 <usart_serial_putchar+0x98>)
  401cda:	4293      	cmp	r3, r2
  401cdc:	d10a      	bne.n	401cf4 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401cde:	bf00      	nop
  401ce0:	78fb      	ldrb	r3, [r7, #3]
  401ce2:	4619      	mov	r1, r3
  401ce4:	6878      	ldr	r0, [r7, #4]
  401ce6:	4b16      	ldr	r3, [pc, #88]	; (401d40 <usart_serial_putchar+0x94>)
  401ce8:	4798      	blx	r3
  401cea:	4603      	mov	r3, r0
  401cec:	2b00      	cmp	r3, #0
  401cee:	d1f7      	bne.n	401ce0 <usart_serial_putchar+0x34>
		return 1;
  401cf0:	2301      	movs	r3, #1
  401cf2:	e01e      	b.n	401d32 <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401cf4:	687b      	ldr	r3, [r7, #4]
  401cf6:	4a14      	ldr	r2, [pc, #80]	; (401d48 <usart_serial_putchar+0x9c>)
  401cf8:	4293      	cmp	r3, r2
  401cfa:	d10a      	bne.n	401d12 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  401cfc:	bf00      	nop
  401cfe:	78fb      	ldrb	r3, [r7, #3]
  401d00:	4619      	mov	r1, r3
  401d02:	6878      	ldr	r0, [r7, #4]
  401d04:	4b11      	ldr	r3, [pc, #68]	; (401d4c <usart_serial_putchar+0xa0>)
  401d06:	4798      	blx	r3
  401d08:	4603      	mov	r3, r0
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	d1f7      	bne.n	401cfe <usart_serial_putchar+0x52>
		return 1;
  401d0e:	2301      	movs	r3, #1
  401d10:	e00f      	b.n	401d32 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401d12:	687b      	ldr	r3, [r7, #4]
  401d14:	4a0e      	ldr	r2, [pc, #56]	; (401d50 <usart_serial_putchar+0xa4>)
  401d16:	4293      	cmp	r3, r2
  401d18:	d10a      	bne.n	401d30 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  401d1a:	bf00      	nop
  401d1c:	78fb      	ldrb	r3, [r7, #3]
  401d1e:	4619      	mov	r1, r3
  401d20:	6878      	ldr	r0, [r7, #4]
  401d22:	4b0a      	ldr	r3, [pc, #40]	; (401d4c <usart_serial_putchar+0xa0>)
  401d24:	4798      	blx	r3
  401d26:	4603      	mov	r3, r0
  401d28:	2b00      	cmp	r3, #0
  401d2a:	d1f7      	bne.n	401d1c <usart_serial_putchar+0x70>
		return 1;
  401d2c:	2301      	movs	r3, #1
  401d2e:	e000      	b.n	401d32 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401d30:	2300      	movs	r3, #0
}
  401d32:	4618      	mov	r0, r3
  401d34:	3708      	adds	r7, #8
  401d36:	46bd      	mov	sp, r7
  401d38:	bd80      	pop	{r7, pc}
  401d3a:	bf00      	nop
  401d3c:	400e0600 	.word	0x400e0600
  401d40:	00400705 	.word	0x00400705
  401d44:	400e0800 	.word	0x400e0800
  401d48:	40024000 	.word	0x40024000
  401d4c:	0040099d 	.word	0x0040099d
  401d50:	40028000 	.word	0x40028000

00401d54 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401d54:	b580      	push	{r7, lr}
  401d56:	b084      	sub	sp, #16
  401d58:	af00      	add	r7, sp, #0
  401d5a:	6078      	str	r0, [r7, #4]
  401d5c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401d5e:	2300      	movs	r3, #0
  401d60:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401d62:	687b      	ldr	r3, [r7, #4]
  401d64:	4a1f      	ldr	r2, [pc, #124]	; (401de4 <usart_serial_getchar+0x90>)
  401d66:	4293      	cmp	r3, r2
  401d68:	d107      	bne.n	401d7a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401d6a:	bf00      	nop
  401d6c:	6839      	ldr	r1, [r7, #0]
  401d6e:	6878      	ldr	r0, [r7, #4]
  401d70:	4b1d      	ldr	r3, [pc, #116]	; (401de8 <usart_serial_getchar+0x94>)
  401d72:	4798      	blx	r3
  401d74:	4603      	mov	r3, r0
  401d76:	2b00      	cmp	r3, #0
  401d78:	d1f8      	bne.n	401d6c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401d7a:	687b      	ldr	r3, [r7, #4]
  401d7c:	4a1b      	ldr	r2, [pc, #108]	; (401dec <usart_serial_getchar+0x98>)
  401d7e:	4293      	cmp	r3, r2
  401d80:	d107      	bne.n	401d92 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401d82:	bf00      	nop
  401d84:	6839      	ldr	r1, [r7, #0]
  401d86:	6878      	ldr	r0, [r7, #4]
  401d88:	4b17      	ldr	r3, [pc, #92]	; (401de8 <usart_serial_getchar+0x94>)
  401d8a:	4798      	blx	r3
  401d8c:	4603      	mov	r3, r0
  401d8e:	2b00      	cmp	r3, #0
  401d90:	d1f8      	bne.n	401d84 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401d92:	687b      	ldr	r3, [r7, #4]
  401d94:	4a16      	ldr	r2, [pc, #88]	; (401df0 <usart_serial_getchar+0x9c>)
  401d96:	4293      	cmp	r3, r2
  401d98:	d10d      	bne.n	401db6 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  401d9a:	bf00      	nop
  401d9c:	f107 030c 	add.w	r3, r7, #12
  401da0:	4619      	mov	r1, r3
  401da2:	6878      	ldr	r0, [r7, #4]
  401da4:	4b13      	ldr	r3, [pc, #76]	; (401df4 <usart_serial_getchar+0xa0>)
  401da6:	4798      	blx	r3
  401da8:	4603      	mov	r3, r0
  401daa:	2b00      	cmp	r3, #0
  401dac:	d1f6      	bne.n	401d9c <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  401dae:	68fb      	ldr	r3, [r7, #12]
  401db0:	b2da      	uxtb	r2, r3
  401db2:	683b      	ldr	r3, [r7, #0]
  401db4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401db6:	687b      	ldr	r3, [r7, #4]
  401db8:	4a0f      	ldr	r2, [pc, #60]	; (401df8 <usart_serial_getchar+0xa4>)
  401dba:	4293      	cmp	r3, r2
  401dbc:	d10d      	bne.n	401dda <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  401dbe:	bf00      	nop
  401dc0:	f107 030c 	add.w	r3, r7, #12
  401dc4:	4619      	mov	r1, r3
  401dc6:	6878      	ldr	r0, [r7, #4]
  401dc8:	4b0a      	ldr	r3, [pc, #40]	; (401df4 <usart_serial_getchar+0xa0>)
  401dca:	4798      	blx	r3
  401dcc:	4603      	mov	r3, r0
  401dce:	2b00      	cmp	r3, #0
  401dd0:	d1f6      	bne.n	401dc0 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  401dd2:	68fb      	ldr	r3, [r7, #12]
  401dd4:	b2da      	uxtb	r2, r3
  401dd6:	683b      	ldr	r3, [r7, #0]
  401dd8:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401dda:	bf00      	nop
  401ddc:	3710      	adds	r7, #16
  401dde:	46bd      	mov	sp, r7
  401de0:	bd80      	pop	{r7, pc}
  401de2:	bf00      	nop
  401de4:	400e0600 	.word	0x400e0600
  401de8:	00400735 	.word	0x00400735
  401dec:	400e0800 	.word	0x400e0800
  401df0:	40024000 	.word	0x40024000
  401df4:	004009cd 	.word	0x004009cd
  401df8:	40028000 	.word	0x40028000

00401dfc <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401dfc:	b580      	push	{r7, lr}
  401dfe:	b082      	sub	sp, #8
  401e00:	af00      	add	r7, sp, #0
  401e02:	6078      	str	r0, [r7, #4]
  401e04:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401e06:	4a0f      	ldr	r2, [pc, #60]	; (401e44 <stdio_serial_init+0x48>)
  401e08:	687b      	ldr	r3, [r7, #4]
  401e0a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401e0c:	4b0e      	ldr	r3, [pc, #56]	; (401e48 <stdio_serial_init+0x4c>)
  401e0e:	4a0f      	ldr	r2, [pc, #60]	; (401e4c <stdio_serial_init+0x50>)
  401e10:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401e12:	4b0f      	ldr	r3, [pc, #60]	; (401e50 <stdio_serial_init+0x54>)
  401e14:	4a0f      	ldr	r2, [pc, #60]	; (401e54 <stdio_serial_init+0x58>)
  401e16:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401e18:	6839      	ldr	r1, [r7, #0]
  401e1a:	6878      	ldr	r0, [r7, #4]
  401e1c:	4b0e      	ldr	r3, [pc, #56]	; (401e58 <stdio_serial_init+0x5c>)
  401e1e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401e20:	4b0e      	ldr	r3, [pc, #56]	; (401e5c <stdio_serial_init+0x60>)
  401e22:	681b      	ldr	r3, [r3, #0]
  401e24:	689b      	ldr	r3, [r3, #8]
  401e26:	2100      	movs	r1, #0
  401e28:	4618      	mov	r0, r3
  401e2a:	4b0d      	ldr	r3, [pc, #52]	; (401e60 <stdio_serial_init+0x64>)
  401e2c:	4798      	blx	r3
	setbuf(stdin, NULL);
  401e2e:	4b0b      	ldr	r3, [pc, #44]	; (401e5c <stdio_serial_init+0x60>)
  401e30:	681b      	ldr	r3, [r3, #0]
  401e32:	685b      	ldr	r3, [r3, #4]
  401e34:	2100      	movs	r1, #0
  401e36:	4618      	mov	r0, r3
  401e38:	4b09      	ldr	r3, [pc, #36]	; (401e60 <stdio_serial_init+0x64>)
  401e3a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401e3c:	bf00      	nop
  401e3e:	3708      	adds	r7, #8
  401e40:	46bd      	mov	sp, r7
  401e42:	bd80      	pop	{r7, pc}
  401e44:	20000aec 	.word	0x20000aec
  401e48:	20000ae8 	.word	0x20000ae8
  401e4c:	00401cad 	.word	0x00401cad
  401e50:	20000ae4 	.word	0x20000ae4
  401e54:	00401d55 	.word	0x00401d55
  401e58:	00401bb5 	.word	0x00401bb5
  401e5c:	20000430 	.word	0x20000430
  401e60:	00402215 	.word	0x00402215

00401e64 <main>:
uint8_t sen1Ctr = 0, sen2Ctr = 0;
uint16_t hrtRate = 0;
uint8_t disp = 0, spo2;

int main (void)
{
  401e64:	b580      	push	{r7, lr}
  401e66:	af00      	add	r7, sp, #0
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  401e68:	4b1b      	ldr	r3, [pc, #108]	; (401ed8 <main+0x74>)
  401e6a:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  401e6c:	4b1b      	ldr	r3, [pc, #108]	; (401edc <main+0x78>)
  401e6e:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	//LED PIN
	gpio_configure_pin(PIO_PC23_IDX, (PIO_OUTPUT_1 | PIO_DEFAULT));
  401e70:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401e74:	2057      	movs	r0, #87	; 0x57
  401e76:	4b1a      	ldr	r3, [pc, #104]	; (401ee0 <main+0x7c>)
  401e78:	4798      	blx	r3

// 	gpio_set_pin_low(PIO_PC23_IDX);
// 	delay_ms(300);
// 	gpio_set_pin_high(PIO_PC23_IDX);

	InitConUart();
  401e7a:	4b1a      	ldr	r3, [pc, #104]	; (401ee4 <main+0x80>)
  401e7c:	4798      	blx	r3
	SenInitUsart();
  401e7e:	4b1a      	ldr	r3, [pc, #104]	; (401ee8 <main+0x84>)
  401e80:	4798      	blx	r3

	printf("RST\r\n");
  401e82:	481a      	ldr	r0, [pc, #104]	; (401eec <main+0x88>)
  401e84:	4b1a      	ldr	r3, [pc, #104]	; (401ef0 <main+0x8c>)
  401e86:	4798      	blx	r3

	while (1)
	{
		//Call frequently to update next pointer in PDC
		SenPdcManageBuff();
  401e88:	4b1a      	ldr	r3, [pc, #104]	; (401ef4 <main+0x90>)
  401e8a:	4798      	blx	r3

		if(SenGetRxBytes(1)>5)
  401e8c:	2001      	movs	r0, #1
  401e8e:	4b1a      	ldr	r3, [pc, #104]	; (401ef8 <main+0x94>)
  401e90:	4798      	blx	r3
  401e92:	4603      	mov	r3, r0
  401e94:	2b05      	cmp	r3, #5
  401e96:	d902      	bls.n	401e9e <main+0x3a>
		{
			//Run trigger calculation algorithm
			SenProcessData(1);
  401e98:	2001      	movs	r0, #1
  401e9a:	4b18      	ldr	r3, [pc, #96]	; (401efc <main+0x98>)
  401e9c:	4798      	blx	r3
		}

		if(SenGetRxBytes(2))
  401e9e:	2002      	movs	r0, #2
  401ea0:	4b15      	ldr	r3, [pc, #84]	; (401ef8 <main+0x94>)
  401ea2:	4798      	blx	r3
  401ea4:	4603      	mov	r3, r0
  401ea6:	2b00      	cmp	r3, #0
  401ea8:	d002      	beq.n	401eb0 <main+0x4c>
		{
			//Pass sen2 data to display
			SenProcessData(2);
  401eaa:	2002      	movs	r0, #2
  401eac:	4b13      	ldr	r3, [pc, #76]	; (401efc <main+0x98>)
  401eae:	4798      	blx	r3
		}

		if(disp)
  401eb0:	4b13      	ldr	r3, [pc, #76]	; (401f00 <main+0x9c>)
  401eb2:	781b      	ldrb	r3, [r3, #0]
  401eb4:	2b00      	cmp	r3, #0
  401eb6:	d0e7      	beq.n	401e88 <main+0x24>
		{
			//Send data on console UART
			printf("Hrt = %d\r\n", hrtRate);
  401eb8:	4b12      	ldr	r3, [pc, #72]	; (401f04 <main+0xa0>)
  401eba:	881b      	ldrh	r3, [r3, #0]
  401ebc:	4619      	mov	r1, r3
  401ebe:	4812      	ldr	r0, [pc, #72]	; (401f08 <main+0xa4>)
  401ec0:	4b0b      	ldr	r3, [pc, #44]	; (401ef0 <main+0x8c>)
  401ec2:	4798      	blx	r3
			printf("Sp02 = %d\r\n", spo2);
  401ec4:	4b11      	ldr	r3, [pc, #68]	; (401f0c <main+0xa8>)
  401ec6:	781b      	ldrb	r3, [r3, #0]
  401ec8:	4619      	mov	r1, r3
  401eca:	4811      	ldr	r0, [pc, #68]	; (401f10 <main+0xac>)
  401ecc:	4b08      	ldr	r3, [pc, #32]	; (401ef0 <main+0x8c>)
  401ece:	4798      	blx	r3
			disp = 0;
  401ed0:	4b0b      	ldr	r3, [pc, #44]	; (401f00 <main+0x9c>)
  401ed2:	2200      	movs	r2, #0
  401ed4:	701a      	strb	r2, [r3, #0]
		}

		//delay_ms(100);
	}
  401ed6:	e7d7      	b.n	401e88 <main+0x24>
  401ed8:	00400d51 	.word	0x00400d51
  401edc:	004016c9 	.word	0x004016c9
  401ee0:	004010c1 	.word	0x004010c1
  401ee4:	00401f15 	.word	0x00401f15
  401ee8:	004001e9 	.word	0x004001e9
  401eec:	00405184 	.word	0x00405184
  401ef0:	00402151 	.word	0x00402151
  401ef4:	004002f1 	.word	0x004002f1
  401ef8:	004003a9 	.word	0x004003a9
  401efc:	00401f59 	.word	0x00401f59
  401f00:	20000a9e 	.word	0x20000a9e
  401f04:	20000a9c 	.word	0x20000a9c
  401f08:	0040518c 	.word	0x0040518c
  401f0c:	20000af4 	.word	0x20000af4
  401f10:	00405198 	.word	0x00405198

00401f14 <InitConUart>:

/**
 *  Configure UART for debug message output.
 */
void InitConUart(void)
{
  401f14:	b580      	push	{r7, lr}
  401f16:	b084      	sub	sp, #16
  401f18:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  401f1a:	463b      	mov	r3, r7
  401f1c:	2200      	movs	r2, #0
  401f1e:	601a      	str	r2, [r3, #0]
  401f20:	605a      	str	r2, [r3, #4]
  401f22:	609a      	str	r2, [r3, #8]
  401f24:	60da      	str	r2, [r3, #12]
  401f26:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
  401f2a:	603b      	str	r3, [r7, #0]
  401f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f30:	60bb      	str	r3, [r7, #8]
		.baudrate = CONSOLE_UART_BAUDRATE,
		.paritytype = UART_MR_PAR_NO
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  401f32:	2009      	movs	r0, #9
  401f34:	4b05      	ldr	r3, [pc, #20]	; (401f4c <InitConUart+0x38>)
  401f36:	4798      	blx	r3
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
  401f38:	463b      	mov	r3, r7
  401f3a:	4619      	mov	r1, r3
  401f3c:	4804      	ldr	r0, [pc, #16]	; (401f50 <InitConUart+0x3c>)
  401f3e:	4b05      	ldr	r3, [pc, #20]	; (401f54 <InitConUart+0x40>)
  401f40:	4798      	blx	r3
}
  401f42:	bf00      	nop
  401f44:	3710      	adds	r7, #16
  401f46:	46bd      	mov	sp, r7
  401f48:	bd80      	pop	{r7, pc}
  401f4a:	bf00      	nop
  401f4c:	00401b99 	.word	0x00401b99
  401f50:	400e0800 	.word	0x400e0800
  401f54:	00401dfd 	.word	0x00401dfd

00401f58 <SenProcessData>:

void SenProcessData(uint8_t senNo)
{
  401f58:	b580      	push	{r7, lr}
  401f5a:	b082      	sub	sp, #8
  401f5c:	af00      	add	r7, sp, #0
  401f5e:	4603      	mov	r3, r0
  401f60:	71fb      	strb	r3, [r7, #7]
	while(SenGetRxBytes(senNo))
  401f62:	e00a      	b.n	401f7a <SenProcessData+0x22>
	{
		SenParseFrame(senNo, SenGetByte(senNo));
  401f64:	79fb      	ldrb	r3, [r7, #7]
  401f66:	4618      	mov	r0, r3
  401f68:	4b09      	ldr	r3, [pc, #36]	; (401f90 <SenProcessData+0x38>)
  401f6a:	4798      	blx	r3
  401f6c:	4603      	mov	r3, r0
  401f6e:	461a      	mov	r2, r3
  401f70:	79fb      	ldrb	r3, [r7, #7]
  401f72:	4611      	mov	r1, r2
  401f74:	4618      	mov	r0, r3
  401f76:	4b07      	ldr	r3, [pc, #28]	; (401f94 <SenProcessData+0x3c>)
  401f78:	4798      	blx	r3
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
}

void SenProcessData(uint8_t senNo)
{
	while(SenGetRxBytes(senNo))
  401f7a:	79fb      	ldrb	r3, [r7, #7]
  401f7c:	4618      	mov	r0, r3
  401f7e:	4b06      	ldr	r3, [pc, #24]	; (401f98 <SenProcessData+0x40>)
  401f80:	4798      	blx	r3
  401f82:	4603      	mov	r3, r0
  401f84:	2b00      	cmp	r3, #0
  401f86:	d1ed      	bne.n	401f64 <SenProcessData+0xc>
	{
		SenParseFrame(senNo, SenGetByte(senNo));
	}
}
  401f88:	bf00      	nop
  401f8a:	3708      	adds	r7, #8
  401f8c:	46bd      	mov	sp, r7
  401f8e:	bd80      	pop	{r7, pc}
  401f90:	00400455 	.word	0x00400455
  401f94:	00401f9d 	.word	0x00401f9d
  401f98:	004003a9 	.word	0x004003a9

00401f9c <SenParseFrame>:

void SenParseFrame(uint8_t senNo, uint8_t data)
{
  401f9c:	b480      	push	{r7}
  401f9e:	b083      	sub	sp, #12
  401fa0:	af00      	add	r7, sp, #0
  401fa2:	4603      	mov	r3, r0
  401fa4:	460a      	mov	r2, r1
  401fa6:	71fb      	strb	r3, [r7, #7]
  401fa8:	4613      	mov	r3, r2
  401faa:	71bb      	strb	r3, [r7, #6]
	if(senNo == 1)
  401fac:	79fb      	ldrb	r3, [r7, #7]
  401fae:	2b01      	cmp	r3, #1
  401fb0:	f040 8095 	bne.w	4020de <SenParseFrame+0x142>
	{
		switch(sen1State)
  401fb4:	4b4c      	ldr	r3, [pc, #304]	; (4020e8 <SenParseFrame+0x14c>)
  401fb6:	781b      	ldrb	r3, [r3, #0]
  401fb8:	2b05      	cmp	r3, #5
  401fba:	f200 8090 	bhi.w	4020de <SenParseFrame+0x142>
  401fbe:	a201      	add	r2, pc, #4	; (adr r2, 401fc4 <SenParseFrame+0x28>)
  401fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401fc4:	00401fdd 	.word	0x00401fdd
  401fc8:	00401ff1 	.word	0x00401ff1
  401fcc:	00402021 	.word	0x00402021
  401fd0:	00402037 	.word	0x00402037
  401fd4:	0040206b 	.word	0x0040206b
  401fd8:	0040208b 	.word	0x0040208b
		{
			case q0:
				if(data==0x01)
  401fdc:	79bb      	ldrb	r3, [r7, #6]
  401fde:	2b01      	cmp	r3, #1
  401fe0:	d17a      	bne.n	4020d8 <SenParseFrame+0x13c>
				{
					sen1State = q1;
  401fe2:	4b41      	ldr	r3, [pc, #260]	; (4020e8 <SenParseFrame+0x14c>)
  401fe4:	2201      	movs	r2, #1
  401fe6:	701a      	strb	r2, [r3, #0]
					sen1Sum = 0x01;
  401fe8:	4b40      	ldr	r3, [pc, #256]	; (4020ec <SenParseFrame+0x150>)
  401fea:	2201      	movs	r2, #1
  401fec:	701a      	strb	r2, [r3, #0]
				}
				break;
  401fee:	e073      	b.n	4020d8 <SenParseFrame+0x13c>
			case q1:
				if((data>127)&&BIT_IS_SET(data,0))
  401ff0:	f997 3006 	ldrsb.w	r3, [r7, #6]
  401ff4:	2b00      	cmp	r3, #0
  401ff6:	da0f      	bge.n	402018 <SenParseFrame+0x7c>
  401ff8:	79bb      	ldrb	r3, [r7, #6]
  401ffa:	f003 0301 	and.w	r3, r3, #1
  401ffe:	2b00      	cmp	r3, #0
  402000:	d00a      	beq.n	402018 <SenParseFrame+0x7c>
				{
					sen1State = q2;
  402002:	4b39      	ldr	r3, [pc, #228]	; (4020e8 <SenParseFrame+0x14c>)
  402004:	2202      	movs	r2, #2
  402006:	701a      	strb	r2, [r3, #0]
					sen1Sum += data;
  402008:	4b38      	ldr	r3, [pc, #224]	; (4020ec <SenParseFrame+0x150>)
  40200a:	781a      	ldrb	r2, [r3, #0]
  40200c:	79bb      	ldrb	r3, [r7, #6]
  40200e:	4413      	add	r3, r2
  402010:	b2da      	uxtb	r2, r3
  402012:	4b36      	ldr	r3, [pc, #216]	; (4020ec <SenParseFrame+0x150>)
  402014:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sen1State = q0;
				}
				break;
  402016:	e062      	b.n	4020de <SenParseFrame+0x142>
					sen1State = q2;
					sen1Sum += data;
				}
				else
				{
					sen1State = q0;
  402018:	4b33      	ldr	r3, [pc, #204]	; (4020e8 <SenParseFrame+0x14c>)
  40201a:	2200      	movs	r2, #0
  40201c:	701a      	strb	r2, [r3, #0]
				}
				break;
  40201e:	e05e      	b.n	4020de <SenParseFrame+0x142>
			case q2:
				//Pleath Reading
				sen1State = q3;
  402020:	4b31      	ldr	r3, [pc, #196]	; (4020e8 <SenParseFrame+0x14c>)
  402022:	2203      	movs	r2, #3
  402024:	701a      	strb	r2, [r3, #0]
				sen1Sum += data;
  402026:	4b31      	ldr	r3, [pc, #196]	; (4020ec <SenParseFrame+0x150>)
  402028:	781a      	ldrb	r2, [r3, #0]
  40202a:	79bb      	ldrb	r3, [r7, #6]
  40202c:	4413      	add	r3, r2
  40202e:	b2da      	uxtb	r2, r3
  402030:	4b2e      	ldr	r3, [pc, #184]	; (4020ec <SenParseFrame+0x150>)
  402032:	701a      	strb	r2, [r3, #0]
				break;
  402034:	e053      	b.n	4020de <SenParseFrame+0x142>
			case q3:
				if(data<127)
  402036:	79bb      	ldrb	r3, [r7, #6]
  402038:	2b7e      	cmp	r3, #126	; 0x7e
  40203a:	d812      	bhi.n	402062 <SenParseFrame+0xc6>
				{
					//HRMSB
					hrtRate = ((uint16_t)(data&0x03))<<8;
  40203c:	79bb      	ldrb	r3, [r7, #6]
  40203e:	021b      	lsls	r3, r3, #8
  402040:	b29b      	uxth	r3, r3
  402042:	f403 7340 	and.w	r3, r3, #768	; 0x300
  402046:	b29a      	uxth	r2, r3
  402048:	4b29      	ldr	r3, [pc, #164]	; (4020f0 <SenParseFrame+0x154>)
  40204a:	801a      	strh	r2, [r3, #0]
					sen1State = q4;
  40204c:	4b26      	ldr	r3, [pc, #152]	; (4020e8 <SenParseFrame+0x14c>)
  40204e:	2204      	movs	r2, #4
  402050:	701a      	strb	r2, [r3, #0]
					sen1Sum += data;
  402052:	4b26      	ldr	r3, [pc, #152]	; (4020ec <SenParseFrame+0x150>)
  402054:	781a      	ldrb	r2, [r3, #0]
  402056:	79bb      	ldrb	r3, [r7, #6]
  402058:	4413      	add	r3, r2
  40205a:	b2da      	uxtb	r2, r3
  40205c:	4b23      	ldr	r3, [pc, #140]	; (4020ec <SenParseFrame+0x150>)
  40205e:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sen1State = q0;
				}
				break;
  402060:	e03d      	b.n	4020de <SenParseFrame+0x142>
					sen1State = q4;
					sen1Sum += data;
				}
				else
				{
					sen1State = q0;
  402062:	4b21      	ldr	r3, [pc, #132]	; (4020e8 <SenParseFrame+0x14c>)
  402064:	2200      	movs	r2, #0
  402066:	701a      	strb	r2, [r3, #0]
				}
				break;
  402068:	e039      	b.n	4020de <SenParseFrame+0x142>
			case q4:
				if(data==sen1Sum)
  40206a:	4b20      	ldr	r3, [pc, #128]	; (4020ec <SenParseFrame+0x150>)
  40206c:	781b      	ldrb	r3, [r3, #0]
  40206e:	79ba      	ldrb	r2, [r7, #6]
  402070:	429a      	cmp	r2, r3
  402072:	d106      	bne.n	402082 <SenParseFrame+0xe6>
				{
					//Checksum matched
					sen1State = q5;
  402074:	4b1c      	ldr	r3, [pc, #112]	; (4020e8 <SenParseFrame+0x14c>)
  402076:	2205      	movs	r2, #5
  402078:	701a      	strb	r2, [r3, #0]
					sen1Ctr = 0;
  40207a:	4b1e      	ldr	r3, [pc, #120]	; (4020f4 <SenParseFrame+0x158>)
  40207c:	2200      	movs	r2, #0
  40207e:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sen1State = q0;
				}
				break;
  402080:	e02d      	b.n	4020de <SenParseFrame+0x142>
					sen1State = q5;
					sen1Ctr = 0;
				}
				else
				{
					sen1State = q0;
  402082:	4b19      	ldr	r3, [pc, #100]	; (4020e8 <SenParseFrame+0x14c>)
  402084:	2200      	movs	r2, #0
  402086:	701a      	strb	r2, [r3, #0]
				}
				break;
  402088:	e029      	b.n	4020de <SenParseFrame+0x142>
			case q5:
				sen1Ctr++;
  40208a:	4b1a      	ldr	r3, [pc, #104]	; (4020f4 <SenParseFrame+0x158>)
  40208c:	781b      	ldrb	r3, [r3, #0]
  40208e:	3301      	adds	r3, #1
  402090:	b2da      	uxtb	r2, r3
  402092:	4b18      	ldr	r3, [pc, #96]	; (4020f4 <SenParseFrame+0x158>)
  402094:	701a      	strb	r2, [r3, #0]
				if(sen1Ctr==4)
  402096:	4b17      	ldr	r3, [pc, #92]	; (4020f4 <SenParseFrame+0x158>)
  402098:	781b      	ldrb	r3, [r3, #0]
  40209a:	2b04      	cmp	r3, #4
  40209c:	d108      	bne.n	4020b0 <SenParseFrame+0x114>
				{
					hrtRate |= data;
  40209e:	79bb      	ldrb	r3, [r7, #6]
  4020a0:	b29a      	uxth	r2, r3
  4020a2:	4b13      	ldr	r3, [pc, #76]	; (4020f0 <SenParseFrame+0x154>)
  4020a4:	881b      	ldrh	r3, [r3, #0]
  4020a6:	4313      	orrs	r3, r2
  4020a8:	b29a      	uxth	r2, r3
  4020aa:	4b11      	ldr	r3, [pc, #68]	; (4020f0 <SenParseFrame+0x154>)
  4020ac:	801a      	strh	r2, [r3, #0]
				}
				else if(sen1Ctr==120)
				{
					sen1State = q0;					
				}
				break;
  4020ae:	e015      	b.n	4020dc <SenParseFrame+0x140>
				sen1Ctr++;
				if(sen1Ctr==4)
				{
					hrtRate |= data;
				}
				else if(sen1Ctr == 9)
  4020b0:	4b10      	ldr	r3, [pc, #64]	; (4020f4 <SenParseFrame+0x158>)
  4020b2:	781b      	ldrb	r3, [r3, #0]
  4020b4:	2b09      	cmp	r3, #9
  4020b6:	d106      	bne.n	4020c6 <SenParseFrame+0x12a>
				{
					spo2 = data;
  4020b8:	4a0f      	ldr	r2, [pc, #60]	; (4020f8 <SenParseFrame+0x15c>)
  4020ba:	79bb      	ldrb	r3, [r7, #6]
  4020bc:	7013      	strb	r3, [r2, #0]
					disp = 1;
  4020be:	4b0f      	ldr	r3, [pc, #60]	; (4020fc <SenParseFrame+0x160>)
  4020c0:	2201      	movs	r2, #1
  4020c2:	701a      	strb	r2, [r3, #0]
				}
				else if(sen1Ctr==120)
				{
					sen1State = q0;					
				}
				break;
  4020c4:	e00a      	b.n	4020dc <SenParseFrame+0x140>
				else if(sen1Ctr == 9)
				{
					spo2 = data;
					disp = 1;
				}
				else if(sen1Ctr==120)
  4020c6:	4b0b      	ldr	r3, [pc, #44]	; (4020f4 <SenParseFrame+0x158>)
  4020c8:	781b      	ldrb	r3, [r3, #0]
  4020ca:	2b78      	cmp	r3, #120	; 0x78
  4020cc:	d106      	bne.n	4020dc <SenParseFrame+0x140>
				{
					sen1State = q0;					
  4020ce:	4b06      	ldr	r3, [pc, #24]	; (4020e8 <SenParseFrame+0x14c>)
  4020d0:	2200      	movs	r2, #0
  4020d2:	701a      	strb	r2, [r3, #0]
				}
				break;
  4020d4:	bf00      	nop
  4020d6:	e001      	b.n	4020dc <SenParseFrame+0x140>
				if(data==0x01)
				{
					sen1State = q1;
					sen1Sum = 0x01;
				}
				break;
  4020d8:	bf00      	nop
  4020da:	e000      	b.n	4020de <SenParseFrame+0x142>
				}
				else if(sen1Ctr==120)
				{
					sen1State = q0;					
				}
				break;
  4020dc:	bf00      	nop
	}
	else
	{
		
	}
}
  4020de:	bf00      	nop
  4020e0:	370c      	adds	r7, #12
  4020e2:	46bd      	mov	sp, r7
  4020e4:	bc80      	pop	{r7}
  4020e6:	4770      	bx	lr
  4020e8:	20000a98 	.word	0x20000a98
  4020ec:	20000a99 	.word	0x20000a99
  4020f0:	20000a9c 	.word	0x20000a9c
  4020f4:	20000a9a 	.word	0x20000a9a
  4020f8:	20000af4 	.word	0x20000af4
  4020fc:	20000a9e 	.word	0x20000a9e

00402100 <__libc_init_array>:
  402100:	b570      	push	{r4, r5, r6, lr}
  402102:	4e0f      	ldr	r6, [pc, #60]	; (402140 <__libc_init_array+0x40>)
  402104:	4d0f      	ldr	r5, [pc, #60]	; (402144 <__libc_init_array+0x44>)
  402106:	1b76      	subs	r6, r6, r5
  402108:	10b6      	asrs	r6, r6, #2
  40210a:	bf18      	it	ne
  40210c:	2400      	movne	r4, #0
  40210e:	d005      	beq.n	40211c <__libc_init_array+0x1c>
  402110:	3401      	adds	r4, #1
  402112:	f855 3b04 	ldr.w	r3, [r5], #4
  402116:	4798      	blx	r3
  402118:	42a6      	cmp	r6, r4
  40211a:	d1f9      	bne.n	402110 <__libc_init_array+0x10>
  40211c:	4e0a      	ldr	r6, [pc, #40]	; (402148 <__libc_init_array+0x48>)
  40211e:	4d0b      	ldr	r5, [pc, #44]	; (40214c <__libc_init_array+0x4c>)
  402120:	1b76      	subs	r6, r6, r5
  402122:	f003 f86b 	bl	4051fc <_init>
  402126:	10b6      	asrs	r6, r6, #2
  402128:	bf18      	it	ne
  40212a:	2400      	movne	r4, #0
  40212c:	d006      	beq.n	40213c <__libc_init_array+0x3c>
  40212e:	3401      	adds	r4, #1
  402130:	f855 3b04 	ldr.w	r3, [r5], #4
  402134:	4798      	blx	r3
  402136:	42a6      	cmp	r6, r4
  402138:	d1f9      	bne.n	40212e <__libc_init_array+0x2e>
  40213a:	bd70      	pop	{r4, r5, r6, pc}
  40213c:	bd70      	pop	{r4, r5, r6, pc}
  40213e:	bf00      	nop
  402140:	00405208 	.word	0x00405208
  402144:	00405208 	.word	0x00405208
  402148:	00405210 	.word	0x00405210
  40214c:	00405208 	.word	0x00405208

00402150 <iprintf>:
  402150:	b40f      	push	{r0, r1, r2, r3}
  402152:	b500      	push	{lr}
  402154:	4907      	ldr	r1, [pc, #28]	; (402174 <iprintf+0x24>)
  402156:	b083      	sub	sp, #12
  402158:	ab04      	add	r3, sp, #16
  40215a:	6808      	ldr	r0, [r1, #0]
  40215c:	f853 2b04 	ldr.w	r2, [r3], #4
  402160:	6881      	ldr	r1, [r0, #8]
  402162:	9301      	str	r3, [sp, #4]
  402164:	f000 f942 	bl	4023ec <_vfiprintf_r>
  402168:	b003      	add	sp, #12
  40216a:	f85d eb04 	ldr.w	lr, [sp], #4
  40216e:	b004      	add	sp, #16
  402170:	4770      	bx	lr
  402172:	bf00      	nop
  402174:	20000430 	.word	0x20000430

00402178 <memset>:
  402178:	b470      	push	{r4, r5, r6}
  40217a:	0784      	lsls	r4, r0, #30
  40217c:	d046      	beq.n	40220c <memset+0x94>
  40217e:	1e54      	subs	r4, r2, #1
  402180:	2a00      	cmp	r2, #0
  402182:	d041      	beq.n	402208 <memset+0x90>
  402184:	b2cd      	uxtb	r5, r1
  402186:	4603      	mov	r3, r0
  402188:	e002      	b.n	402190 <memset+0x18>
  40218a:	1e62      	subs	r2, r4, #1
  40218c:	b3e4      	cbz	r4, 402208 <memset+0x90>
  40218e:	4614      	mov	r4, r2
  402190:	f803 5b01 	strb.w	r5, [r3], #1
  402194:	079a      	lsls	r2, r3, #30
  402196:	d1f8      	bne.n	40218a <memset+0x12>
  402198:	2c03      	cmp	r4, #3
  40219a:	d92e      	bls.n	4021fa <memset+0x82>
  40219c:	b2cd      	uxtb	r5, r1
  40219e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4021a2:	2c0f      	cmp	r4, #15
  4021a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4021a8:	d919      	bls.n	4021de <memset+0x66>
  4021aa:	f103 0210 	add.w	r2, r3, #16
  4021ae:	4626      	mov	r6, r4
  4021b0:	3e10      	subs	r6, #16
  4021b2:	2e0f      	cmp	r6, #15
  4021b4:	f842 5c10 	str.w	r5, [r2, #-16]
  4021b8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4021bc:	f842 5c08 	str.w	r5, [r2, #-8]
  4021c0:	f842 5c04 	str.w	r5, [r2, #-4]
  4021c4:	f102 0210 	add.w	r2, r2, #16
  4021c8:	d8f2      	bhi.n	4021b0 <memset+0x38>
  4021ca:	f1a4 0210 	sub.w	r2, r4, #16
  4021ce:	f022 020f 	bic.w	r2, r2, #15
  4021d2:	f004 040f 	and.w	r4, r4, #15
  4021d6:	3210      	adds	r2, #16
  4021d8:	2c03      	cmp	r4, #3
  4021da:	4413      	add	r3, r2
  4021dc:	d90d      	bls.n	4021fa <memset+0x82>
  4021de:	461e      	mov	r6, r3
  4021e0:	4622      	mov	r2, r4
  4021e2:	3a04      	subs	r2, #4
  4021e4:	2a03      	cmp	r2, #3
  4021e6:	f846 5b04 	str.w	r5, [r6], #4
  4021ea:	d8fa      	bhi.n	4021e2 <memset+0x6a>
  4021ec:	1f22      	subs	r2, r4, #4
  4021ee:	f022 0203 	bic.w	r2, r2, #3
  4021f2:	3204      	adds	r2, #4
  4021f4:	4413      	add	r3, r2
  4021f6:	f004 0403 	and.w	r4, r4, #3
  4021fa:	b12c      	cbz	r4, 402208 <memset+0x90>
  4021fc:	b2c9      	uxtb	r1, r1
  4021fe:	441c      	add	r4, r3
  402200:	f803 1b01 	strb.w	r1, [r3], #1
  402204:	42a3      	cmp	r3, r4
  402206:	d1fb      	bne.n	402200 <memset+0x88>
  402208:	bc70      	pop	{r4, r5, r6}
  40220a:	4770      	bx	lr
  40220c:	4614      	mov	r4, r2
  40220e:	4603      	mov	r3, r0
  402210:	e7c2      	b.n	402198 <memset+0x20>
  402212:	bf00      	nop

00402214 <setbuf>:
  402214:	2900      	cmp	r1, #0
  402216:	bf0c      	ite	eq
  402218:	2202      	moveq	r2, #2
  40221a:	2200      	movne	r2, #0
  40221c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402220:	f000 b800 	b.w	402224 <setvbuf>

00402224 <setvbuf>:
  402224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402228:	4c51      	ldr	r4, [pc, #324]	; (402370 <setvbuf+0x14c>)
  40222a:	6825      	ldr	r5, [r4, #0]
  40222c:	b083      	sub	sp, #12
  40222e:	4604      	mov	r4, r0
  402230:	460f      	mov	r7, r1
  402232:	4690      	mov	r8, r2
  402234:	461e      	mov	r6, r3
  402236:	b115      	cbz	r5, 40223e <setvbuf+0x1a>
  402238:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40223a:	2b00      	cmp	r3, #0
  40223c:	d079      	beq.n	402332 <setvbuf+0x10e>
  40223e:	f1b8 0f02 	cmp.w	r8, #2
  402242:	d004      	beq.n	40224e <setvbuf+0x2a>
  402244:	f1b8 0f01 	cmp.w	r8, #1
  402248:	d87f      	bhi.n	40234a <setvbuf+0x126>
  40224a:	2e00      	cmp	r6, #0
  40224c:	db7d      	blt.n	40234a <setvbuf+0x126>
  40224e:	4621      	mov	r1, r4
  402250:	4628      	mov	r0, r5
  402252:	f001 f917 	bl	403484 <_fflush_r>
  402256:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402258:	b141      	cbz	r1, 40226c <setvbuf+0x48>
  40225a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40225e:	4299      	cmp	r1, r3
  402260:	d002      	beq.n	402268 <setvbuf+0x44>
  402262:	4628      	mov	r0, r5
  402264:	f001 fa6c 	bl	403740 <_free_r>
  402268:	2300      	movs	r3, #0
  40226a:	6323      	str	r3, [r4, #48]	; 0x30
  40226c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402270:	2200      	movs	r2, #0
  402272:	61a2      	str	r2, [r4, #24]
  402274:	6062      	str	r2, [r4, #4]
  402276:	061a      	lsls	r2, r3, #24
  402278:	d454      	bmi.n	402324 <setvbuf+0x100>
  40227a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40227e:	f023 0303 	bic.w	r3, r3, #3
  402282:	f1b8 0f02 	cmp.w	r8, #2
  402286:	81a3      	strh	r3, [r4, #12]
  402288:	d039      	beq.n	4022fe <setvbuf+0xda>
  40228a:	ab01      	add	r3, sp, #4
  40228c:	466a      	mov	r2, sp
  40228e:	4621      	mov	r1, r4
  402290:	4628      	mov	r0, r5
  402292:	f001 fcf3 	bl	403c7c <__swhatbuf_r>
  402296:	89a3      	ldrh	r3, [r4, #12]
  402298:	4318      	orrs	r0, r3
  40229a:	81a0      	strh	r0, [r4, #12]
  40229c:	b326      	cbz	r6, 4022e8 <setvbuf+0xc4>
  40229e:	b327      	cbz	r7, 4022ea <setvbuf+0xc6>
  4022a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4022a2:	2b00      	cmp	r3, #0
  4022a4:	d04d      	beq.n	402342 <setvbuf+0x11e>
  4022a6:	9b00      	ldr	r3, [sp, #0]
  4022a8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4022ac:	6027      	str	r7, [r4, #0]
  4022ae:	429e      	cmp	r6, r3
  4022b0:	bf1c      	itt	ne
  4022b2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4022b6:	81a0      	strhne	r0, [r4, #12]
  4022b8:	f1b8 0f01 	cmp.w	r8, #1
  4022bc:	bf08      	it	eq
  4022be:	f040 0001 	orreq.w	r0, r0, #1
  4022c2:	b283      	uxth	r3, r0
  4022c4:	bf08      	it	eq
  4022c6:	81a0      	strheq	r0, [r4, #12]
  4022c8:	f003 0008 	and.w	r0, r3, #8
  4022cc:	b280      	uxth	r0, r0
  4022ce:	6127      	str	r7, [r4, #16]
  4022d0:	6166      	str	r6, [r4, #20]
  4022d2:	b318      	cbz	r0, 40231c <setvbuf+0xf8>
  4022d4:	f013 0001 	ands.w	r0, r3, #1
  4022d8:	d02f      	beq.n	40233a <setvbuf+0x116>
  4022da:	2000      	movs	r0, #0
  4022dc:	4276      	negs	r6, r6
  4022de:	61a6      	str	r6, [r4, #24]
  4022e0:	60a0      	str	r0, [r4, #8]
  4022e2:	b003      	add	sp, #12
  4022e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4022e8:	9e00      	ldr	r6, [sp, #0]
  4022ea:	4630      	mov	r0, r6
  4022ec:	f001 fd3a 	bl	403d64 <malloc>
  4022f0:	4607      	mov	r7, r0
  4022f2:	b368      	cbz	r0, 402350 <setvbuf+0x12c>
  4022f4:	89a3      	ldrh	r3, [r4, #12]
  4022f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4022fa:	81a3      	strh	r3, [r4, #12]
  4022fc:	e7d0      	b.n	4022a0 <setvbuf+0x7c>
  4022fe:	2000      	movs	r0, #0
  402300:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402304:	f043 0302 	orr.w	r3, r3, #2
  402308:	2500      	movs	r5, #0
  40230a:	2101      	movs	r1, #1
  40230c:	81a3      	strh	r3, [r4, #12]
  40230e:	60a5      	str	r5, [r4, #8]
  402310:	6022      	str	r2, [r4, #0]
  402312:	6122      	str	r2, [r4, #16]
  402314:	6161      	str	r1, [r4, #20]
  402316:	b003      	add	sp, #12
  402318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40231c:	60a0      	str	r0, [r4, #8]
  40231e:	b003      	add	sp, #12
  402320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402324:	6921      	ldr	r1, [r4, #16]
  402326:	4628      	mov	r0, r5
  402328:	f001 fa0a 	bl	403740 <_free_r>
  40232c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402330:	e7a3      	b.n	40227a <setvbuf+0x56>
  402332:	4628      	mov	r0, r5
  402334:	f001 f93a 	bl	4035ac <__sinit>
  402338:	e781      	b.n	40223e <setvbuf+0x1a>
  40233a:	60a6      	str	r6, [r4, #8]
  40233c:	b003      	add	sp, #12
  40233e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402342:	4628      	mov	r0, r5
  402344:	f001 f932 	bl	4035ac <__sinit>
  402348:	e7ad      	b.n	4022a6 <setvbuf+0x82>
  40234a:	f04f 30ff 	mov.w	r0, #4294967295
  40234e:	e7e2      	b.n	402316 <setvbuf+0xf2>
  402350:	f8dd 9000 	ldr.w	r9, [sp]
  402354:	45b1      	cmp	r9, r6
  402356:	d006      	beq.n	402366 <setvbuf+0x142>
  402358:	4648      	mov	r0, r9
  40235a:	f001 fd03 	bl	403d64 <malloc>
  40235e:	4607      	mov	r7, r0
  402360:	b108      	cbz	r0, 402366 <setvbuf+0x142>
  402362:	464e      	mov	r6, r9
  402364:	e7c6      	b.n	4022f4 <setvbuf+0xd0>
  402366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40236a:	f04f 30ff 	mov.w	r0, #4294967295
  40236e:	e7c7      	b.n	402300 <setvbuf+0xdc>
  402370:	20000430 	.word	0x20000430

00402374 <__sprint_r.part.0>:
  402374:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40237a:	049c      	lsls	r4, r3, #18
  40237c:	4692      	mov	sl, r2
  40237e:	d52c      	bpl.n	4023da <__sprint_r.part.0+0x66>
  402380:	6893      	ldr	r3, [r2, #8]
  402382:	6812      	ldr	r2, [r2, #0]
  402384:	b33b      	cbz	r3, 4023d6 <__sprint_r.part.0+0x62>
  402386:	460f      	mov	r7, r1
  402388:	4680      	mov	r8, r0
  40238a:	f102 0908 	add.w	r9, r2, #8
  40238e:	e919 0060 	ldmdb	r9, {r5, r6}
  402392:	08b6      	lsrs	r6, r6, #2
  402394:	d017      	beq.n	4023c6 <__sprint_r.part.0+0x52>
  402396:	3d04      	subs	r5, #4
  402398:	2400      	movs	r4, #0
  40239a:	e001      	b.n	4023a0 <__sprint_r.part.0+0x2c>
  40239c:	42a6      	cmp	r6, r4
  40239e:	d010      	beq.n	4023c2 <__sprint_r.part.0+0x4e>
  4023a0:	463a      	mov	r2, r7
  4023a2:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4023a6:	4640      	mov	r0, r8
  4023a8:	f001 f96a 	bl	403680 <_fputwc_r>
  4023ac:	1c43      	adds	r3, r0, #1
  4023ae:	f104 0401 	add.w	r4, r4, #1
  4023b2:	d1f3      	bne.n	40239c <__sprint_r.part.0+0x28>
  4023b4:	2300      	movs	r3, #0
  4023b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4023ba:	f8ca 3004 	str.w	r3, [sl, #4]
  4023be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023c2:	f8da 3008 	ldr.w	r3, [sl, #8]
  4023c6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4023ca:	f8ca 3008 	str.w	r3, [sl, #8]
  4023ce:	f109 0908 	add.w	r9, r9, #8
  4023d2:	2b00      	cmp	r3, #0
  4023d4:	d1db      	bne.n	40238e <__sprint_r.part.0+0x1a>
  4023d6:	2000      	movs	r0, #0
  4023d8:	e7ec      	b.n	4023b4 <__sprint_r.part.0+0x40>
  4023da:	f001 fa99 	bl	403910 <__sfvwrite_r>
  4023de:	2300      	movs	r3, #0
  4023e0:	f8ca 3008 	str.w	r3, [sl, #8]
  4023e4:	f8ca 3004 	str.w	r3, [sl, #4]
  4023e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004023ec <_vfiprintf_r>:
  4023ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023f0:	b0ab      	sub	sp, #172	; 0xac
  4023f2:	461c      	mov	r4, r3
  4023f4:	9100      	str	r1, [sp, #0]
  4023f6:	4690      	mov	r8, r2
  4023f8:	9304      	str	r3, [sp, #16]
  4023fa:	9005      	str	r0, [sp, #20]
  4023fc:	b118      	cbz	r0, 402406 <_vfiprintf_r+0x1a>
  4023fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402400:	2b00      	cmp	r3, #0
  402402:	f000 80de 	beq.w	4025c2 <_vfiprintf_r+0x1d6>
  402406:	9800      	ldr	r0, [sp, #0]
  402408:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  40240c:	b28a      	uxth	r2, r1
  40240e:	0495      	lsls	r5, r2, #18
  402410:	d407      	bmi.n	402422 <_vfiprintf_r+0x36>
  402412:	6e43      	ldr	r3, [r0, #100]	; 0x64
  402414:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  402418:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40241c:	8182      	strh	r2, [r0, #12]
  40241e:	6643      	str	r3, [r0, #100]	; 0x64
  402420:	b292      	uxth	r2, r2
  402422:	0711      	lsls	r1, r2, #28
  402424:	f140 80b1 	bpl.w	40258a <_vfiprintf_r+0x19e>
  402428:	9b00      	ldr	r3, [sp, #0]
  40242a:	691b      	ldr	r3, [r3, #16]
  40242c:	2b00      	cmp	r3, #0
  40242e:	f000 80ac 	beq.w	40258a <_vfiprintf_r+0x19e>
  402432:	f002 021a 	and.w	r2, r2, #26
  402436:	2a0a      	cmp	r2, #10
  402438:	f000 80b5 	beq.w	4025a6 <_vfiprintf_r+0x1ba>
  40243c:	2300      	movs	r3, #0
  40243e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  402442:	9302      	str	r3, [sp, #8]
  402444:	930f      	str	r3, [sp, #60]	; 0x3c
  402446:	930e      	str	r3, [sp, #56]	; 0x38
  402448:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40244c:	46da      	mov	sl, fp
  40244e:	f898 3000 	ldrb.w	r3, [r8]
  402452:	4644      	mov	r4, r8
  402454:	b1fb      	cbz	r3, 402496 <_vfiprintf_r+0xaa>
  402456:	2b25      	cmp	r3, #37	; 0x25
  402458:	d102      	bne.n	402460 <_vfiprintf_r+0x74>
  40245a:	e01c      	b.n	402496 <_vfiprintf_r+0xaa>
  40245c:	2b25      	cmp	r3, #37	; 0x25
  40245e:	d003      	beq.n	402468 <_vfiprintf_r+0x7c>
  402460:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402464:	2b00      	cmp	r3, #0
  402466:	d1f9      	bne.n	40245c <_vfiprintf_r+0x70>
  402468:	ebc8 0504 	rsb	r5, r8, r4
  40246c:	b19d      	cbz	r5, 402496 <_vfiprintf_r+0xaa>
  40246e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402472:	f8ca 8000 	str.w	r8, [sl]
  402476:	3301      	adds	r3, #1
  402478:	442a      	add	r2, r5
  40247a:	2b07      	cmp	r3, #7
  40247c:	f8ca 5004 	str.w	r5, [sl, #4]
  402480:	920f      	str	r2, [sp, #60]	; 0x3c
  402482:	930e      	str	r3, [sp, #56]	; 0x38
  402484:	dd7b      	ble.n	40257e <_vfiprintf_r+0x192>
  402486:	2a00      	cmp	r2, #0
  402488:	f040 8528 	bne.w	402edc <_vfiprintf_r+0xaf0>
  40248c:	9b02      	ldr	r3, [sp, #8]
  40248e:	920e      	str	r2, [sp, #56]	; 0x38
  402490:	442b      	add	r3, r5
  402492:	46da      	mov	sl, fp
  402494:	9302      	str	r3, [sp, #8]
  402496:	7823      	ldrb	r3, [r4, #0]
  402498:	2b00      	cmp	r3, #0
  40249a:	f000 843e 	beq.w	402d1a <_vfiprintf_r+0x92e>
  40249e:	2100      	movs	r1, #0
  4024a0:	f04f 0300 	mov.w	r3, #0
  4024a4:	f04f 32ff 	mov.w	r2, #4294967295
  4024a8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4024ac:	f104 0801 	add.w	r8, r4, #1
  4024b0:	7863      	ldrb	r3, [r4, #1]
  4024b2:	9201      	str	r2, [sp, #4]
  4024b4:	4608      	mov	r0, r1
  4024b6:	460e      	mov	r6, r1
  4024b8:	460c      	mov	r4, r1
  4024ba:	f108 0801 	add.w	r8, r8, #1
  4024be:	f1a3 0220 	sub.w	r2, r3, #32
  4024c2:	2a58      	cmp	r2, #88	; 0x58
  4024c4:	f200 8393 	bhi.w	402bee <_vfiprintf_r+0x802>
  4024c8:	e8df f012 	tbh	[pc, r2, lsl #1]
  4024cc:	03910346 	.word	0x03910346
  4024d0:	034e0391 	.word	0x034e0391
  4024d4:	03910391 	.word	0x03910391
  4024d8:	03910391 	.word	0x03910391
  4024dc:	03910391 	.word	0x03910391
  4024e0:	02670289 	.word	0x02670289
  4024e4:	00800391 	.word	0x00800391
  4024e8:	0391026c 	.word	0x0391026c
  4024ec:	025901c6 	.word	0x025901c6
  4024f0:	02590259 	.word	0x02590259
  4024f4:	02590259 	.word	0x02590259
  4024f8:	02590259 	.word	0x02590259
  4024fc:	02590259 	.word	0x02590259
  402500:	03910391 	.word	0x03910391
  402504:	03910391 	.word	0x03910391
  402508:	03910391 	.word	0x03910391
  40250c:	03910391 	.word	0x03910391
  402510:	03910391 	.word	0x03910391
  402514:	039101cb 	.word	0x039101cb
  402518:	03910391 	.word	0x03910391
  40251c:	03910391 	.word	0x03910391
  402520:	03910391 	.word	0x03910391
  402524:	03910391 	.word	0x03910391
  402528:	02140391 	.word	0x02140391
  40252c:	03910391 	.word	0x03910391
  402530:	03910391 	.word	0x03910391
  402534:	02ee0391 	.word	0x02ee0391
  402538:	03910391 	.word	0x03910391
  40253c:	03910311 	.word	0x03910311
  402540:	03910391 	.word	0x03910391
  402544:	03910391 	.word	0x03910391
  402548:	03910391 	.word	0x03910391
  40254c:	03910391 	.word	0x03910391
  402550:	03340391 	.word	0x03340391
  402554:	0391038a 	.word	0x0391038a
  402558:	03910391 	.word	0x03910391
  40255c:	038a0367 	.word	0x038a0367
  402560:	03910391 	.word	0x03910391
  402564:	0391036c 	.word	0x0391036c
  402568:	02950379 	.word	0x02950379
  40256c:	02e90085 	.word	0x02e90085
  402570:	029b0391 	.word	0x029b0391
  402574:	02ba0391 	.word	0x02ba0391
  402578:	03910391 	.word	0x03910391
  40257c:	0353      	.short	0x0353
  40257e:	f10a 0a08 	add.w	sl, sl, #8
  402582:	9b02      	ldr	r3, [sp, #8]
  402584:	442b      	add	r3, r5
  402586:	9302      	str	r3, [sp, #8]
  402588:	e785      	b.n	402496 <_vfiprintf_r+0xaa>
  40258a:	9900      	ldr	r1, [sp, #0]
  40258c:	9805      	ldr	r0, [sp, #20]
  40258e:	f000 fe61 	bl	403254 <__swsetup_r>
  402592:	2800      	cmp	r0, #0
  402594:	f040 8558 	bne.w	403048 <_vfiprintf_r+0xc5c>
  402598:	9b00      	ldr	r3, [sp, #0]
  40259a:	899a      	ldrh	r2, [r3, #12]
  40259c:	f002 021a 	and.w	r2, r2, #26
  4025a0:	2a0a      	cmp	r2, #10
  4025a2:	f47f af4b 	bne.w	40243c <_vfiprintf_r+0x50>
  4025a6:	9900      	ldr	r1, [sp, #0]
  4025a8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4025ac:	2b00      	cmp	r3, #0
  4025ae:	f6ff af45 	blt.w	40243c <_vfiprintf_r+0x50>
  4025b2:	4623      	mov	r3, r4
  4025b4:	4642      	mov	r2, r8
  4025b6:	9805      	ldr	r0, [sp, #20]
  4025b8:	f000 fe16 	bl	4031e8 <__sbprintf>
  4025bc:	b02b      	add	sp, #172	; 0xac
  4025be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025c2:	f000 fff3 	bl	4035ac <__sinit>
  4025c6:	e71e      	b.n	402406 <_vfiprintf_r+0x1a>
  4025c8:	4264      	negs	r4, r4
  4025ca:	9304      	str	r3, [sp, #16]
  4025cc:	f046 0604 	orr.w	r6, r6, #4
  4025d0:	f898 3000 	ldrb.w	r3, [r8]
  4025d4:	e771      	b.n	4024ba <_vfiprintf_r+0xce>
  4025d6:	2130      	movs	r1, #48	; 0x30
  4025d8:	9804      	ldr	r0, [sp, #16]
  4025da:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  4025de:	9901      	ldr	r1, [sp, #4]
  4025e0:	9406      	str	r4, [sp, #24]
  4025e2:	f04f 0300 	mov.w	r3, #0
  4025e6:	2278      	movs	r2, #120	; 0x78
  4025e8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4025ec:	2900      	cmp	r1, #0
  4025ee:	4603      	mov	r3, r0
  4025f0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  4025f4:	6804      	ldr	r4, [r0, #0]
  4025f6:	f103 0304 	add.w	r3, r3, #4
  4025fa:	f04f 0500 	mov.w	r5, #0
  4025fe:	f046 0202 	orr.w	r2, r6, #2
  402602:	f2c0 8525 	blt.w	403050 <_vfiprintf_r+0xc64>
  402606:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40260a:	ea54 0205 	orrs.w	r2, r4, r5
  40260e:	f046 0602 	orr.w	r6, r6, #2
  402612:	9304      	str	r3, [sp, #16]
  402614:	f040 84bf 	bne.w	402f96 <_vfiprintf_r+0xbaa>
  402618:	48b3      	ldr	r0, [pc, #716]	; (4028e8 <_vfiprintf_r+0x4fc>)
  40261a:	9b01      	ldr	r3, [sp, #4]
  40261c:	2b00      	cmp	r3, #0
  40261e:	f040 841c 	bne.w	402e5a <_vfiprintf_r+0xa6e>
  402622:	4699      	mov	r9, r3
  402624:	2300      	movs	r3, #0
  402626:	9301      	str	r3, [sp, #4]
  402628:	9303      	str	r3, [sp, #12]
  40262a:	465f      	mov	r7, fp
  40262c:	9b01      	ldr	r3, [sp, #4]
  40262e:	9a03      	ldr	r2, [sp, #12]
  402630:	4293      	cmp	r3, r2
  402632:	bfb8      	it	lt
  402634:	4613      	movlt	r3, r2
  402636:	461d      	mov	r5, r3
  402638:	f1b9 0f00 	cmp.w	r9, #0
  40263c:	d000      	beq.n	402640 <_vfiprintf_r+0x254>
  40263e:	3501      	adds	r5, #1
  402640:	f016 0302 	ands.w	r3, r6, #2
  402644:	9307      	str	r3, [sp, #28]
  402646:	bf18      	it	ne
  402648:	3502      	addne	r5, #2
  40264a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  40264e:	9308      	str	r3, [sp, #32]
  402650:	f040 82f1 	bne.w	402c36 <_vfiprintf_r+0x84a>
  402654:	9b06      	ldr	r3, [sp, #24]
  402656:	1b5c      	subs	r4, r3, r5
  402658:	2c00      	cmp	r4, #0
  40265a:	f340 82ec 	ble.w	402c36 <_vfiprintf_r+0x84a>
  40265e:	2c10      	cmp	r4, #16
  402660:	f340 8556 	ble.w	403110 <_vfiprintf_r+0xd24>
  402664:	f8df 9284 	ldr.w	r9, [pc, #644]	; 4028ec <_vfiprintf_r+0x500>
  402668:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  40266c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40266e:	46d4      	mov	ip, sl
  402670:	2310      	movs	r3, #16
  402672:	46c2      	mov	sl, r8
  402674:	4670      	mov	r0, lr
  402676:	46a8      	mov	r8, r5
  402678:	464d      	mov	r5, r9
  40267a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40267e:	e007      	b.n	402690 <_vfiprintf_r+0x2a4>
  402680:	f100 0e02 	add.w	lr, r0, #2
  402684:	f10c 0c08 	add.w	ip, ip, #8
  402688:	4608      	mov	r0, r1
  40268a:	3c10      	subs	r4, #16
  40268c:	2c10      	cmp	r4, #16
  40268e:	dd13      	ble.n	4026b8 <_vfiprintf_r+0x2cc>
  402690:	1c41      	adds	r1, r0, #1
  402692:	3210      	adds	r2, #16
  402694:	2907      	cmp	r1, #7
  402696:	920f      	str	r2, [sp, #60]	; 0x3c
  402698:	f8cc 5000 	str.w	r5, [ip]
  40269c:	f8cc 3004 	str.w	r3, [ip, #4]
  4026a0:	910e      	str	r1, [sp, #56]	; 0x38
  4026a2:	dded      	ble.n	402680 <_vfiprintf_r+0x294>
  4026a4:	2a00      	cmp	r2, #0
  4026a6:	f040 82b7 	bne.w	402c18 <_vfiprintf_r+0x82c>
  4026aa:	3c10      	subs	r4, #16
  4026ac:	2c10      	cmp	r4, #16
  4026ae:	4610      	mov	r0, r2
  4026b0:	f04f 0e01 	mov.w	lr, #1
  4026b4:	46dc      	mov	ip, fp
  4026b6:	dceb      	bgt.n	402690 <_vfiprintf_r+0x2a4>
  4026b8:	46a9      	mov	r9, r5
  4026ba:	4670      	mov	r0, lr
  4026bc:	4645      	mov	r5, r8
  4026be:	46d0      	mov	r8, sl
  4026c0:	46e2      	mov	sl, ip
  4026c2:	4422      	add	r2, r4
  4026c4:	2807      	cmp	r0, #7
  4026c6:	920f      	str	r2, [sp, #60]	; 0x3c
  4026c8:	f8ca 9000 	str.w	r9, [sl]
  4026cc:	f8ca 4004 	str.w	r4, [sl, #4]
  4026d0:	900e      	str	r0, [sp, #56]	; 0x38
  4026d2:	f300 8375 	bgt.w	402dc0 <_vfiprintf_r+0x9d4>
  4026d6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4026da:	f10a 0a08 	add.w	sl, sl, #8
  4026de:	f100 0e01 	add.w	lr, r0, #1
  4026e2:	2b00      	cmp	r3, #0
  4026e4:	f040 82b0 	bne.w	402c48 <_vfiprintf_r+0x85c>
  4026e8:	9b07      	ldr	r3, [sp, #28]
  4026ea:	2b00      	cmp	r3, #0
  4026ec:	f000 82c3 	beq.w	402c76 <_vfiprintf_r+0x88a>
  4026f0:	3202      	adds	r2, #2
  4026f2:	a90c      	add	r1, sp, #48	; 0x30
  4026f4:	2302      	movs	r3, #2
  4026f6:	f1be 0f07 	cmp.w	lr, #7
  4026fa:	920f      	str	r2, [sp, #60]	; 0x3c
  4026fc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402700:	e88a 000a 	stmia.w	sl, {r1, r3}
  402704:	f340 8378 	ble.w	402df8 <_vfiprintf_r+0xa0c>
  402708:	2a00      	cmp	r2, #0
  40270a:	f040 840a 	bne.w	402f22 <_vfiprintf_r+0xb36>
  40270e:	9b08      	ldr	r3, [sp, #32]
  402710:	2b80      	cmp	r3, #128	; 0x80
  402712:	f04f 0e01 	mov.w	lr, #1
  402716:	4610      	mov	r0, r2
  402718:	46da      	mov	sl, fp
  40271a:	f040 82b0 	bne.w	402c7e <_vfiprintf_r+0x892>
  40271e:	9b06      	ldr	r3, [sp, #24]
  402720:	1b5c      	subs	r4, r3, r5
  402722:	2c00      	cmp	r4, #0
  402724:	f340 82ab 	ble.w	402c7e <_vfiprintf_r+0x892>
  402728:	2c10      	cmp	r4, #16
  40272a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 4028f0 <_vfiprintf_r+0x504>
  40272e:	f340 850b 	ble.w	403148 <_vfiprintf_r+0xd5c>
  402732:	46d6      	mov	lr, sl
  402734:	2310      	movs	r3, #16
  402736:	46c2      	mov	sl, r8
  402738:	46a8      	mov	r8, r5
  40273a:	464d      	mov	r5, r9
  40273c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402740:	e007      	b.n	402752 <_vfiprintf_r+0x366>
  402742:	f100 0c02 	add.w	ip, r0, #2
  402746:	f10e 0e08 	add.w	lr, lr, #8
  40274a:	4608      	mov	r0, r1
  40274c:	3c10      	subs	r4, #16
  40274e:	2c10      	cmp	r4, #16
  402750:	dd13      	ble.n	40277a <_vfiprintf_r+0x38e>
  402752:	1c41      	adds	r1, r0, #1
  402754:	3210      	adds	r2, #16
  402756:	2907      	cmp	r1, #7
  402758:	920f      	str	r2, [sp, #60]	; 0x3c
  40275a:	f8ce 5000 	str.w	r5, [lr]
  40275e:	f8ce 3004 	str.w	r3, [lr, #4]
  402762:	910e      	str	r1, [sp, #56]	; 0x38
  402764:	dded      	ble.n	402742 <_vfiprintf_r+0x356>
  402766:	2a00      	cmp	r2, #0
  402768:	f040 8315 	bne.w	402d96 <_vfiprintf_r+0x9aa>
  40276c:	3c10      	subs	r4, #16
  40276e:	2c10      	cmp	r4, #16
  402770:	f04f 0c01 	mov.w	ip, #1
  402774:	4610      	mov	r0, r2
  402776:	46de      	mov	lr, fp
  402778:	dceb      	bgt.n	402752 <_vfiprintf_r+0x366>
  40277a:	46a9      	mov	r9, r5
  40277c:	4645      	mov	r5, r8
  40277e:	46d0      	mov	r8, sl
  402780:	46f2      	mov	sl, lr
  402782:	4422      	add	r2, r4
  402784:	f1bc 0f07 	cmp.w	ip, #7
  402788:	920f      	str	r2, [sp, #60]	; 0x3c
  40278a:	f8ca 9000 	str.w	r9, [sl]
  40278e:	f8ca 4004 	str.w	r4, [sl, #4]
  402792:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  402796:	f300 83d2 	bgt.w	402f3e <_vfiprintf_r+0xb52>
  40279a:	9b01      	ldr	r3, [sp, #4]
  40279c:	9903      	ldr	r1, [sp, #12]
  40279e:	1a5c      	subs	r4, r3, r1
  4027a0:	2c00      	cmp	r4, #0
  4027a2:	f10a 0a08 	add.w	sl, sl, #8
  4027a6:	f10c 0e01 	add.w	lr, ip, #1
  4027aa:	4660      	mov	r0, ip
  4027ac:	f300 826d 	bgt.w	402c8a <_vfiprintf_r+0x89e>
  4027b0:	9903      	ldr	r1, [sp, #12]
  4027b2:	f8ca 7000 	str.w	r7, [sl]
  4027b6:	440a      	add	r2, r1
  4027b8:	f1be 0f07 	cmp.w	lr, #7
  4027bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4027be:	f8ca 1004 	str.w	r1, [sl, #4]
  4027c2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4027c6:	f340 82ce 	ble.w	402d66 <_vfiprintf_r+0x97a>
  4027ca:	2a00      	cmp	r2, #0
  4027cc:	f040 833a 	bne.w	402e44 <_vfiprintf_r+0xa58>
  4027d0:	0770      	lsls	r0, r6, #29
  4027d2:	920e      	str	r2, [sp, #56]	; 0x38
  4027d4:	d538      	bpl.n	402848 <_vfiprintf_r+0x45c>
  4027d6:	9b06      	ldr	r3, [sp, #24]
  4027d8:	1b5c      	subs	r4, r3, r5
  4027da:	2c00      	cmp	r4, #0
  4027dc:	dd34      	ble.n	402848 <_vfiprintf_r+0x45c>
  4027de:	46da      	mov	sl, fp
  4027e0:	2c10      	cmp	r4, #16
  4027e2:	f340 84ab 	ble.w	40313c <_vfiprintf_r+0xd50>
  4027e6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 4028ec <_vfiprintf_r+0x500>
  4027ea:	990e      	ldr	r1, [sp, #56]	; 0x38
  4027ec:	464f      	mov	r7, r9
  4027ee:	2610      	movs	r6, #16
  4027f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4027f4:	e006      	b.n	402804 <_vfiprintf_r+0x418>
  4027f6:	1c88      	adds	r0, r1, #2
  4027f8:	f10a 0a08 	add.w	sl, sl, #8
  4027fc:	4619      	mov	r1, r3
  4027fe:	3c10      	subs	r4, #16
  402800:	2c10      	cmp	r4, #16
  402802:	dd13      	ble.n	40282c <_vfiprintf_r+0x440>
  402804:	1c4b      	adds	r3, r1, #1
  402806:	3210      	adds	r2, #16
  402808:	2b07      	cmp	r3, #7
  40280a:	920f      	str	r2, [sp, #60]	; 0x3c
  40280c:	f8ca 7000 	str.w	r7, [sl]
  402810:	f8ca 6004 	str.w	r6, [sl, #4]
  402814:	930e      	str	r3, [sp, #56]	; 0x38
  402816:	ddee      	ble.n	4027f6 <_vfiprintf_r+0x40a>
  402818:	2a00      	cmp	r2, #0
  40281a:	f040 828e 	bne.w	402d3a <_vfiprintf_r+0x94e>
  40281e:	3c10      	subs	r4, #16
  402820:	2c10      	cmp	r4, #16
  402822:	f04f 0001 	mov.w	r0, #1
  402826:	4611      	mov	r1, r2
  402828:	46da      	mov	sl, fp
  40282a:	dceb      	bgt.n	402804 <_vfiprintf_r+0x418>
  40282c:	46b9      	mov	r9, r7
  40282e:	4422      	add	r2, r4
  402830:	2807      	cmp	r0, #7
  402832:	920f      	str	r2, [sp, #60]	; 0x3c
  402834:	f8ca 9000 	str.w	r9, [sl]
  402838:	f8ca 4004 	str.w	r4, [sl, #4]
  40283c:	900e      	str	r0, [sp, #56]	; 0x38
  40283e:	f340 829b 	ble.w	402d78 <_vfiprintf_r+0x98c>
  402842:	2a00      	cmp	r2, #0
  402844:	f040 8425 	bne.w	403092 <_vfiprintf_r+0xca6>
  402848:	9b02      	ldr	r3, [sp, #8]
  40284a:	9a06      	ldr	r2, [sp, #24]
  40284c:	42aa      	cmp	r2, r5
  40284e:	bfac      	ite	ge
  402850:	189b      	addge	r3, r3, r2
  402852:	195b      	addlt	r3, r3, r5
  402854:	9302      	str	r3, [sp, #8]
  402856:	e299      	b.n	402d8c <_vfiprintf_r+0x9a0>
  402858:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40285c:	f898 3000 	ldrb.w	r3, [r8]
  402860:	e62b      	b.n	4024ba <_vfiprintf_r+0xce>
  402862:	9406      	str	r4, [sp, #24]
  402864:	2900      	cmp	r1, #0
  402866:	f040 84af 	bne.w	4031c8 <_vfiprintf_r+0xddc>
  40286a:	f046 0610 	orr.w	r6, r6, #16
  40286e:	06b3      	lsls	r3, r6, #26
  402870:	f140 8312 	bpl.w	402e98 <_vfiprintf_r+0xaac>
  402874:	9904      	ldr	r1, [sp, #16]
  402876:	3107      	adds	r1, #7
  402878:	f021 0107 	bic.w	r1, r1, #7
  40287c:	e9d1 2300 	ldrd	r2, r3, [r1]
  402880:	3108      	adds	r1, #8
  402882:	9104      	str	r1, [sp, #16]
  402884:	4614      	mov	r4, r2
  402886:	461d      	mov	r5, r3
  402888:	2a00      	cmp	r2, #0
  40288a:	f173 0300 	sbcs.w	r3, r3, #0
  40288e:	f2c0 8386 	blt.w	402f9e <_vfiprintf_r+0xbb2>
  402892:	9b01      	ldr	r3, [sp, #4]
  402894:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402898:	2b00      	cmp	r3, #0
  40289a:	f2c0 831a 	blt.w	402ed2 <_vfiprintf_r+0xae6>
  40289e:	ea54 0305 	orrs.w	r3, r4, r5
  4028a2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4028a6:	f000 80ed 	beq.w	402a84 <_vfiprintf_r+0x698>
  4028aa:	2d00      	cmp	r5, #0
  4028ac:	bf08      	it	eq
  4028ae:	2c0a      	cmpeq	r4, #10
  4028b0:	f0c0 80ed 	bcc.w	402a8e <_vfiprintf_r+0x6a2>
  4028b4:	465f      	mov	r7, fp
  4028b6:	4620      	mov	r0, r4
  4028b8:	4629      	mov	r1, r5
  4028ba:	220a      	movs	r2, #10
  4028bc:	2300      	movs	r3, #0
  4028be:	f002 fac9 	bl	404e54 <__aeabi_uldivmod>
  4028c2:	3230      	adds	r2, #48	; 0x30
  4028c4:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4028c8:	4620      	mov	r0, r4
  4028ca:	4629      	mov	r1, r5
  4028cc:	2300      	movs	r3, #0
  4028ce:	220a      	movs	r2, #10
  4028d0:	f002 fac0 	bl	404e54 <__aeabi_uldivmod>
  4028d4:	4604      	mov	r4, r0
  4028d6:	460d      	mov	r5, r1
  4028d8:	ea54 0305 	orrs.w	r3, r4, r5
  4028dc:	d1eb      	bne.n	4028b6 <_vfiprintf_r+0x4ca>
  4028de:	ebc7 030b 	rsb	r3, r7, fp
  4028e2:	9303      	str	r3, [sp, #12]
  4028e4:	e6a2      	b.n	40262c <_vfiprintf_r+0x240>
  4028e6:	bf00      	nop
  4028e8:	004051d0 	.word	0x004051d0
  4028ec:	004051ec 	.word	0x004051ec
  4028f0:	004051ac 	.word	0x004051ac
  4028f4:	9406      	str	r4, [sp, #24]
  4028f6:	2900      	cmp	r1, #0
  4028f8:	f040 8462 	bne.w	4031c0 <_vfiprintf_r+0xdd4>
  4028fc:	f046 0610 	orr.w	r6, r6, #16
  402900:	f016 0320 	ands.w	r3, r6, #32
  402904:	f000 82ae 	beq.w	402e64 <_vfiprintf_r+0xa78>
  402908:	9b04      	ldr	r3, [sp, #16]
  40290a:	3307      	adds	r3, #7
  40290c:	f023 0307 	bic.w	r3, r3, #7
  402910:	f04f 0200 	mov.w	r2, #0
  402914:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402918:	e9d3 4500 	ldrd	r4, r5, [r3]
  40291c:	f103 0208 	add.w	r2, r3, #8
  402920:	9b01      	ldr	r3, [sp, #4]
  402922:	9204      	str	r2, [sp, #16]
  402924:	2b00      	cmp	r3, #0
  402926:	f2c0 8174 	blt.w	402c12 <_vfiprintf_r+0x826>
  40292a:	ea54 0305 	orrs.w	r3, r4, r5
  40292e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402932:	f040 816e 	bne.w	402c12 <_vfiprintf_r+0x826>
  402936:	9b01      	ldr	r3, [sp, #4]
  402938:	2b00      	cmp	r3, #0
  40293a:	f000 8430 	beq.w	40319e <_vfiprintf_r+0xdb2>
  40293e:	f04f 0900 	mov.w	r9, #0
  402942:	2400      	movs	r4, #0
  402944:	2500      	movs	r5, #0
  402946:	465f      	mov	r7, fp
  402948:	08e2      	lsrs	r2, r4, #3
  40294a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40294e:	08e9      	lsrs	r1, r5, #3
  402950:	f004 0307 	and.w	r3, r4, #7
  402954:	460d      	mov	r5, r1
  402956:	4614      	mov	r4, r2
  402958:	3330      	adds	r3, #48	; 0x30
  40295a:	ea54 0205 	orrs.w	r2, r4, r5
  40295e:	f807 3d01 	strb.w	r3, [r7, #-1]!
  402962:	d1f1      	bne.n	402948 <_vfiprintf_r+0x55c>
  402964:	07f4      	lsls	r4, r6, #31
  402966:	d5ba      	bpl.n	4028de <_vfiprintf_r+0x4f2>
  402968:	2b30      	cmp	r3, #48	; 0x30
  40296a:	d0b8      	beq.n	4028de <_vfiprintf_r+0x4f2>
  40296c:	2230      	movs	r2, #48	; 0x30
  40296e:	1e7b      	subs	r3, r7, #1
  402970:	f807 2c01 	strb.w	r2, [r7, #-1]
  402974:	ebc3 020b 	rsb	r2, r3, fp
  402978:	9203      	str	r2, [sp, #12]
  40297a:	461f      	mov	r7, r3
  40297c:	e656      	b.n	40262c <_vfiprintf_r+0x240>
  40297e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402982:	2400      	movs	r4, #0
  402984:	f818 3b01 	ldrb.w	r3, [r8], #1
  402988:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40298c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  402990:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402994:	2a09      	cmp	r2, #9
  402996:	d9f5      	bls.n	402984 <_vfiprintf_r+0x598>
  402998:	e591      	b.n	4024be <_vfiprintf_r+0xd2>
  40299a:	f898 3000 	ldrb.w	r3, [r8]
  40299e:	2101      	movs	r1, #1
  4029a0:	202b      	movs	r0, #43	; 0x2b
  4029a2:	e58a      	b.n	4024ba <_vfiprintf_r+0xce>
  4029a4:	f898 3000 	ldrb.w	r3, [r8]
  4029a8:	2b2a      	cmp	r3, #42	; 0x2a
  4029aa:	f108 0501 	add.w	r5, r8, #1
  4029ae:	f000 83dd 	beq.w	40316c <_vfiprintf_r+0xd80>
  4029b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4029b6:	2a09      	cmp	r2, #9
  4029b8:	46a8      	mov	r8, r5
  4029ba:	bf98      	it	ls
  4029bc:	2500      	movls	r5, #0
  4029be:	f200 83ce 	bhi.w	40315e <_vfiprintf_r+0xd72>
  4029c2:	f818 3b01 	ldrb.w	r3, [r8], #1
  4029c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4029ca:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4029ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4029d2:	2a09      	cmp	r2, #9
  4029d4:	d9f5      	bls.n	4029c2 <_vfiprintf_r+0x5d6>
  4029d6:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  4029da:	9201      	str	r2, [sp, #4]
  4029dc:	e56f      	b.n	4024be <_vfiprintf_r+0xd2>
  4029de:	9a04      	ldr	r2, [sp, #16]
  4029e0:	6814      	ldr	r4, [r2, #0]
  4029e2:	4613      	mov	r3, r2
  4029e4:	2c00      	cmp	r4, #0
  4029e6:	f103 0304 	add.w	r3, r3, #4
  4029ea:	f6ff aded 	blt.w	4025c8 <_vfiprintf_r+0x1dc>
  4029ee:	9304      	str	r3, [sp, #16]
  4029f0:	f898 3000 	ldrb.w	r3, [r8]
  4029f4:	e561      	b.n	4024ba <_vfiprintf_r+0xce>
  4029f6:	9406      	str	r4, [sp, #24]
  4029f8:	2900      	cmp	r1, #0
  4029fa:	d081      	beq.n	402900 <_vfiprintf_r+0x514>
  4029fc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402a00:	e77e      	b.n	402900 <_vfiprintf_r+0x514>
  402a02:	9a04      	ldr	r2, [sp, #16]
  402a04:	9406      	str	r4, [sp, #24]
  402a06:	6817      	ldr	r7, [r2, #0]
  402a08:	f04f 0300 	mov.w	r3, #0
  402a0c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402a10:	1d14      	adds	r4, r2, #4
  402a12:	9b01      	ldr	r3, [sp, #4]
  402a14:	2f00      	cmp	r7, #0
  402a16:	f000 8386 	beq.w	403126 <_vfiprintf_r+0xd3a>
  402a1a:	2b00      	cmp	r3, #0
  402a1c:	f2c0 835f 	blt.w	4030de <_vfiprintf_r+0xcf2>
  402a20:	461a      	mov	r2, r3
  402a22:	2100      	movs	r1, #0
  402a24:	4638      	mov	r0, r7
  402a26:	f001 fc63 	bl	4042f0 <memchr>
  402a2a:	2800      	cmp	r0, #0
  402a2c:	f000 838f 	beq.w	40314e <_vfiprintf_r+0xd62>
  402a30:	1bc3      	subs	r3, r0, r7
  402a32:	9303      	str	r3, [sp, #12]
  402a34:	2300      	movs	r3, #0
  402a36:	9404      	str	r4, [sp, #16]
  402a38:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402a3c:	9301      	str	r3, [sp, #4]
  402a3e:	e5f5      	b.n	40262c <_vfiprintf_r+0x240>
  402a40:	9406      	str	r4, [sp, #24]
  402a42:	2900      	cmp	r1, #0
  402a44:	f040 83b9 	bne.w	4031ba <_vfiprintf_r+0xdce>
  402a48:	f016 0920 	ands.w	r9, r6, #32
  402a4c:	d135      	bne.n	402aba <_vfiprintf_r+0x6ce>
  402a4e:	f016 0310 	ands.w	r3, r6, #16
  402a52:	d103      	bne.n	402a5c <_vfiprintf_r+0x670>
  402a54:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402a58:	f040 832a 	bne.w	4030b0 <_vfiprintf_r+0xcc4>
  402a5c:	9a04      	ldr	r2, [sp, #16]
  402a5e:	4613      	mov	r3, r2
  402a60:	6814      	ldr	r4, [r2, #0]
  402a62:	9a01      	ldr	r2, [sp, #4]
  402a64:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402a68:	2a00      	cmp	r2, #0
  402a6a:	f103 0304 	add.w	r3, r3, #4
  402a6e:	f04f 0500 	mov.w	r5, #0
  402a72:	f2c0 8332 	blt.w	4030da <_vfiprintf_r+0xcee>
  402a76:	ea54 0205 	orrs.w	r2, r4, r5
  402a7a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402a7e:	9304      	str	r3, [sp, #16]
  402a80:	f47f af13 	bne.w	4028aa <_vfiprintf_r+0x4be>
  402a84:	9b01      	ldr	r3, [sp, #4]
  402a86:	2b00      	cmp	r3, #0
  402a88:	f43f adcc 	beq.w	402624 <_vfiprintf_r+0x238>
  402a8c:	2400      	movs	r4, #0
  402a8e:	af2a      	add	r7, sp, #168	; 0xa8
  402a90:	3430      	adds	r4, #48	; 0x30
  402a92:	f807 4d41 	strb.w	r4, [r7, #-65]!
  402a96:	ebc7 030b 	rsb	r3, r7, fp
  402a9a:	9303      	str	r3, [sp, #12]
  402a9c:	e5c6      	b.n	40262c <_vfiprintf_r+0x240>
  402a9e:	f046 0620 	orr.w	r6, r6, #32
  402aa2:	f898 3000 	ldrb.w	r3, [r8]
  402aa6:	e508      	b.n	4024ba <_vfiprintf_r+0xce>
  402aa8:	9406      	str	r4, [sp, #24]
  402aaa:	2900      	cmp	r1, #0
  402aac:	f040 836e 	bne.w	40318c <_vfiprintf_r+0xda0>
  402ab0:	f046 0610 	orr.w	r6, r6, #16
  402ab4:	f016 0920 	ands.w	r9, r6, #32
  402ab8:	d0c9      	beq.n	402a4e <_vfiprintf_r+0x662>
  402aba:	9b04      	ldr	r3, [sp, #16]
  402abc:	3307      	adds	r3, #7
  402abe:	f023 0307 	bic.w	r3, r3, #7
  402ac2:	f04f 0200 	mov.w	r2, #0
  402ac6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402aca:	e9d3 4500 	ldrd	r4, r5, [r3]
  402ace:	f103 0208 	add.w	r2, r3, #8
  402ad2:	9b01      	ldr	r3, [sp, #4]
  402ad4:	9204      	str	r2, [sp, #16]
  402ad6:	2b00      	cmp	r3, #0
  402ad8:	f2c0 81f9 	blt.w	402ece <_vfiprintf_r+0xae2>
  402adc:	ea54 0305 	orrs.w	r3, r4, r5
  402ae0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402ae4:	f04f 0900 	mov.w	r9, #0
  402ae8:	f47f aedf 	bne.w	4028aa <_vfiprintf_r+0x4be>
  402aec:	e7ca      	b.n	402a84 <_vfiprintf_r+0x698>
  402aee:	9406      	str	r4, [sp, #24]
  402af0:	2900      	cmp	r1, #0
  402af2:	f040 8351 	bne.w	403198 <_vfiprintf_r+0xdac>
  402af6:	06b2      	lsls	r2, r6, #26
  402af8:	48ae      	ldr	r0, [pc, #696]	; (402db4 <_vfiprintf_r+0x9c8>)
  402afa:	d541      	bpl.n	402b80 <_vfiprintf_r+0x794>
  402afc:	9a04      	ldr	r2, [sp, #16]
  402afe:	3207      	adds	r2, #7
  402b00:	f022 0207 	bic.w	r2, r2, #7
  402b04:	e9d2 4500 	ldrd	r4, r5, [r2]
  402b08:	f102 0108 	add.w	r1, r2, #8
  402b0c:	9104      	str	r1, [sp, #16]
  402b0e:	f016 0901 	ands.w	r9, r6, #1
  402b12:	f000 8177 	beq.w	402e04 <_vfiprintf_r+0xa18>
  402b16:	ea54 0205 	orrs.w	r2, r4, r5
  402b1a:	f040 8226 	bne.w	402f6a <_vfiprintf_r+0xb7e>
  402b1e:	f04f 0300 	mov.w	r3, #0
  402b22:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402b26:	9b01      	ldr	r3, [sp, #4]
  402b28:	2b00      	cmp	r3, #0
  402b2a:	f2c0 8196 	blt.w	402e5a <_vfiprintf_r+0xa6e>
  402b2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402b32:	e572      	b.n	40261a <_vfiprintf_r+0x22e>
  402b34:	9a04      	ldr	r2, [sp, #16]
  402b36:	9406      	str	r4, [sp, #24]
  402b38:	6813      	ldr	r3, [r2, #0]
  402b3a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  402b3e:	4613      	mov	r3, r2
  402b40:	f04f 0100 	mov.w	r1, #0
  402b44:	2501      	movs	r5, #1
  402b46:	3304      	adds	r3, #4
  402b48:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  402b4c:	9304      	str	r3, [sp, #16]
  402b4e:	9503      	str	r5, [sp, #12]
  402b50:	af10      	add	r7, sp, #64	; 0x40
  402b52:	2300      	movs	r3, #0
  402b54:	9301      	str	r3, [sp, #4]
  402b56:	e573      	b.n	402640 <_vfiprintf_r+0x254>
  402b58:	f898 3000 	ldrb.w	r3, [r8]
  402b5c:	2800      	cmp	r0, #0
  402b5e:	f47f acac 	bne.w	4024ba <_vfiprintf_r+0xce>
  402b62:	2101      	movs	r1, #1
  402b64:	2020      	movs	r0, #32
  402b66:	e4a8      	b.n	4024ba <_vfiprintf_r+0xce>
  402b68:	f046 0601 	orr.w	r6, r6, #1
  402b6c:	f898 3000 	ldrb.w	r3, [r8]
  402b70:	e4a3      	b.n	4024ba <_vfiprintf_r+0xce>
  402b72:	9406      	str	r4, [sp, #24]
  402b74:	2900      	cmp	r1, #0
  402b76:	f040 830c 	bne.w	403192 <_vfiprintf_r+0xda6>
  402b7a:	06b2      	lsls	r2, r6, #26
  402b7c:	488e      	ldr	r0, [pc, #568]	; (402db8 <_vfiprintf_r+0x9cc>)
  402b7e:	d4bd      	bmi.n	402afc <_vfiprintf_r+0x710>
  402b80:	9904      	ldr	r1, [sp, #16]
  402b82:	06f7      	lsls	r7, r6, #27
  402b84:	460a      	mov	r2, r1
  402b86:	f100 819d 	bmi.w	402ec4 <_vfiprintf_r+0xad8>
  402b8a:	0675      	lsls	r5, r6, #25
  402b8c:	f140 819a 	bpl.w	402ec4 <_vfiprintf_r+0xad8>
  402b90:	3204      	adds	r2, #4
  402b92:	880c      	ldrh	r4, [r1, #0]
  402b94:	9204      	str	r2, [sp, #16]
  402b96:	2500      	movs	r5, #0
  402b98:	e7b9      	b.n	402b0e <_vfiprintf_r+0x722>
  402b9a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402b9e:	f898 3000 	ldrb.w	r3, [r8]
  402ba2:	e48a      	b.n	4024ba <_vfiprintf_r+0xce>
  402ba4:	f898 3000 	ldrb.w	r3, [r8]
  402ba8:	2b6c      	cmp	r3, #108	; 0x6c
  402baa:	bf03      	ittte	eq
  402bac:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  402bb0:	f046 0620 	orreq.w	r6, r6, #32
  402bb4:	f108 0801 	addeq.w	r8, r8, #1
  402bb8:	f046 0610 	orrne.w	r6, r6, #16
  402bbc:	e47d      	b.n	4024ba <_vfiprintf_r+0xce>
  402bbe:	2900      	cmp	r1, #0
  402bc0:	f040 8309 	bne.w	4031d6 <_vfiprintf_r+0xdea>
  402bc4:	06b4      	lsls	r4, r6, #26
  402bc6:	f140 821c 	bpl.w	403002 <_vfiprintf_r+0xc16>
  402bca:	9a04      	ldr	r2, [sp, #16]
  402bcc:	9902      	ldr	r1, [sp, #8]
  402bce:	6813      	ldr	r3, [r2, #0]
  402bd0:	17cd      	asrs	r5, r1, #31
  402bd2:	4608      	mov	r0, r1
  402bd4:	3204      	adds	r2, #4
  402bd6:	4629      	mov	r1, r5
  402bd8:	9204      	str	r2, [sp, #16]
  402bda:	e9c3 0100 	strd	r0, r1, [r3]
  402bde:	e436      	b.n	40244e <_vfiprintf_r+0x62>
  402be0:	9406      	str	r4, [sp, #24]
  402be2:	2900      	cmp	r1, #0
  402be4:	f43f ae43 	beq.w	40286e <_vfiprintf_r+0x482>
  402be8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402bec:	e63f      	b.n	40286e <_vfiprintf_r+0x482>
  402bee:	9406      	str	r4, [sp, #24]
  402bf0:	2900      	cmp	r1, #0
  402bf2:	f040 82ed 	bne.w	4031d0 <_vfiprintf_r+0xde4>
  402bf6:	2b00      	cmp	r3, #0
  402bf8:	f000 808f 	beq.w	402d1a <_vfiprintf_r+0x92e>
  402bfc:	2501      	movs	r5, #1
  402bfe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  402c02:	f04f 0300 	mov.w	r3, #0
  402c06:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402c0a:	9503      	str	r5, [sp, #12]
  402c0c:	af10      	add	r7, sp, #64	; 0x40
  402c0e:	e7a0      	b.n	402b52 <_vfiprintf_r+0x766>
  402c10:	9304      	str	r3, [sp, #16]
  402c12:	f04f 0900 	mov.w	r9, #0
  402c16:	e696      	b.n	402946 <_vfiprintf_r+0x55a>
  402c18:	aa0d      	add	r2, sp, #52	; 0x34
  402c1a:	9900      	ldr	r1, [sp, #0]
  402c1c:	9309      	str	r3, [sp, #36]	; 0x24
  402c1e:	4648      	mov	r0, r9
  402c20:	f7ff fba8 	bl	402374 <__sprint_r.part.0>
  402c24:	2800      	cmp	r0, #0
  402c26:	d17f      	bne.n	402d28 <_vfiprintf_r+0x93c>
  402c28:	980e      	ldr	r0, [sp, #56]	; 0x38
  402c2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402c2e:	f100 0e01 	add.w	lr, r0, #1
  402c32:	46dc      	mov	ip, fp
  402c34:	e529      	b.n	40268a <_vfiprintf_r+0x29e>
  402c36:	980e      	ldr	r0, [sp, #56]	; 0x38
  402c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c3a:	f100 0e01 	add.w	lr, r0, #1
  402c3e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402c42:	2b00      	cmp	r3, #0
  402c44:	f43f ad50 	beq.w	4026e8 <_vfiprintf_r+0x2fc>
  402c48:	3201      	adds	r2, #1
  402c4a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  402c4e:	2301      	movs	r3, #1
  402c50:	f1be 0f07 	cmp.w	lr, #7
  402c54:	920f      	str	r2, [sp, #60]	; 0x3c
  402c56:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402c5a:	e88a 000a 	stmia.w	sl, {r1, r3}
  402c5e:	f340 80bf 	ble.w	402de0 <_vfiprintf_r+0x9f4>
  402c62:	2a00      	cmp	r2, #0
  402c64:	f040 814e 	bne.w	402f04 <_vfiprintf_r+0xb18>
  402c68:	9907      	ldr	r1, [sp, #28]
  402c6a:	2900      	cmp	r1, #0
  402c6c:	f040 80be 	bne.w	402dec <_vfiprintf_r+0xa00>
  402c70:	469e      	mov	lr, r3
  402c72:	4610      	mov	r0, r2
  402c74:	46da      	mov	sl, fp
  402c76:	9b08      	ldr	r3, [sp, #32]
  402c78:	2b80      	cmp	r3, #128	; 0x80
  402c7a:	f43f ad50 	beq.w	40271e <_vfiprintf_r+0x332>
  402c7e:	9b01      	ldr	r3, [sp, #4]
  402c80:	9903      	ldr	r1, [sp, #12]
  402c82:	1a5c      	subs	r4, r3, r1
  402c84:	2c00      	cmp	r4, #0
  402c86:	f77f ad93 	ble.w	4027b0 <_vfiprintf_r+0x3c4>
  402c8a:	2c10      	cmp	r4, #16
  402c8c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402dbc <_vfiprintf_r+0x9d0>
  402c90:	dd25      	ble.n	402cde <_vfiprintf_r+0x8f2>
  402c92:	46d4      	mov	ip, sl
  402c94:	2310      	movs	r3, #16
  402c96:	46c2      	mov	sl, r8
  402c98:	46a8      	mov	r8, r5
  402c9a:	464d      	mov	r5, r9
  402c9c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402ca0:	e007      	b.n	402cb2 <_vfiprintf_r+0x8c6>
  402ca2:	f100 0e02 	add.w	lr, r0, #2
  402ca6:	f10c 0c08 	add.w	ip, ip, #8
  402caa:	4608      	mov	r0, r1
  402cac:	3c10      	subs	r4, #16
  402cae:	2c10      	cmp	r4, #16
  402cb0:	dd11      	ble.n	402cd6 <_vfiprintf_r+0x8ea>
  402cb2:	1c41      	adds	r1, r0, #1
  402cb4:	3210      	adds	r2, #16
  402cb6:	2907      	cmp	r1, #7
  402cb8:	920f      	str	r2, [sp, #60]	; 0x3c
  402cba:	f8cc 5000 	str.w	r5, [ip]
  402cbe:	f8cc 3004 	str.w	r3, [ip, #4]
  402cc2:	910e      	str	r1, [sp, #56]	; 0x38
  402cc4:	dded      	ble.n	402ca2 <_vfiprintf_r+0x8b6>
  402cc6:	b9d2      	cbnz	r2, 402cfe <_vfiprintf_r+0x912>
  402cc8:	3c10      	subs	r4, #16
  402cca:	2c10      	cmp	r4, #16
  402ccc:	f04f 0e01 	mov.w	lr, #1
  402cd0:	4610      	mov	r0, r2
  402cd2:	46dc      	mov	ip, fp
  402cd4:	dced      	bgt.n	402cb2 <_vfiprintf_r+0x8c6>
  402cd6:	46a9      	mov	r9, r5
  402cd8:	4645      	mov	r5, r8
  402cda:	46d0      	mov	r8, sl
  402cdc:	46e2      	mov	sl, ip
  402cde:	4422      	add	r2, r4
  402ce0:	f1be 0f07 	cmp.w	lr, #7
  402ce4:	920f      	str	r2, [sp, #60]	; 0x3c
  402ce6:	f8ca 9000 	str.w	r9, [sl]
  402cea:	f8ca 4004 	str.w	r4, [sl, #4]
  402cee:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402cf2:	dc2e      	bgt.n	402d52 <_vfiprintf_r+0x966>
  402cf4:	f10a 0a08 	add.w	sl, sl, #8
  402cf8:	f10e 0e01 	add.w	lr, lr, #1
  402cfc:	e558      	b.n	4027b0 <_vfiprintf_r+0x3c4>
  402cfe:	aa0d      	add	r2, sp, #52	; 0x34
  402d00:	9900      	ldr	r1, [sp, #0]
  402d02:	9301      	str	r3, [sp, #4]
  402d04:	4648      	mov	r0, r9
  402d06:	f7ff fb35 	bl	402374 <__sprint_r.part.0>
  402d0a:	b968      	cbnz	r0, 402d28 <_vfiprintf_r+0x93c>
  402d0c:	980e      	ldr	r0, [sp, #56]	; 0x38
  402d0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402d10:	9b01      	ldr	r3, [sp, #4]
  402d12:	f100 0e01 	add.w	lr, r0, #1
  402d16:	46dc      	mov	ip, fp
  402d18:	e7c8      	b.n	402cac <_vfiprintf_r+0x8c0>
  402d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402d1c:	b123      	cbz	r3, 402d28 <_vfiprintf_r+0x93c>
  402d1e:	9805      	ldr	r0, [sp, #20]
  402d20:	9900      	ldr	r1, [sp, #0]
  402d22:	aa0d      	add	r2, sp, #52	; 0x34
  402d24:	f7ff fb26 	bl	402374 <__sprint_r.part.0>
  402d28:	9b00      	ldr	r3, [sp, #0]
  402d2a:	899b      	ldrh	r3, [r3, #12]
  402d2c:	065a      	lsls	r2, r3, #25
  402d2e:	f100 818b 	bmi.w	403048 <_vfiprintf_r+0xc5c>
  402d32:	9802      	ldr	r0, [sp, #8]
  402d34:	b02b      	add	sp, #172	; 0xac
  402d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d3a:	aa0d      	add	r2, sp, #52	; 0x34
  402d3c:	9900      	ldr	r1, [sp, #0]
  402d3e:	4648      	mov	r0, r9
  402d40:	f7ff fb18 	bl	402374 <__sprint_r.part.0>
  402d44:	2800      	cmp	r0, #0
  402d46:	d1ef      	bne.n	402d28 <_vfiprintf_r+0x93c>
  402d48:	990e      	ldr	r1, [sp, #56]	; 0x38
  402d4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402d4c:	1c48      	adds	r0, r1, #1
  402d4e:	46da      	mov	sl, fp
  402d50:	e555      	b.n	4027fe <_vfiprintf_r+0x412>
  402d52:	2a00      	cmp	r2, #0
  402d54:	f040 80fb 	bne.w	402f4e <_vfiprintf_r+0xb62>
  402d58:	9a03      	ldr	r2, [sp, #12]
  402d5a:	921b      	str	r2, [sp, #108]	; 0x6c
  402d5c:	2301      	movs	r3, #1
  402d5e:	920f      	str	r2, [sp, #60]	; 0x3c
  402d60:	971a      	str	r7, [sp, #104]	; 0x68
  402d62:	930e      	str	r3, [sp, #56]	; 0x38
  402d64:	46da      	mov	sl, fp
  402d66:	f10a 0a08 	add.w	sl, sl, #8
  402d6a:	0771      	lsls	r1, r6, #29
  402d6c:	d504      	bpl.n	402d78 <_vfiprintf_r+0x98c>
  402d6e:	9b06      	ldr	r3, [sp, #24]
  402d70:	1b5c      	subs	r4, r3, r5
  402d72:	2c00      	cmp	r4, #0
  402d74:	f73f ad34 	bgt.w	4027e0 <_vfiprintf_r+0x3f4>
  402d78:	9b02      	ldr	r3, [sp, #8]
  402d7a:	9906      	ldr	r1, [sp, #24]
  402d7c:	42a9      	cmp	r1, r5
  402d7e:	bfac      	ite	ge
  402d80:	185b      	addge	r3, r3, r1
  402d82:	195b      	addlt	r3, r3, r5
  402d84:	9302      	str	r3, [sp, #8]
  402d86:	2a00      	cmp	r2, #0
  402d88:	f040 80b3 	bne.w	402ef2 <_vfiprintf_r+0xb06>
  402d8c:	2300      	movs	r3, #0
  402d8e:	930e      	str	r3, [sp, #56]	; 0x38
  402d90:	46da      	mov	sl, fp
  402d92:	f7ff bb5c 	b.w	40244e <_vfiprintf_r+0x62>
  402d96:	aa0d      	add	r2, sp, #52	; 0x34
  402d98:	9900      	ldr	r1, [sp, #0]
  402d9a:	9307      	str	r3, [sp, #28]
  402d9c:	4648      	mov	r0, r9
  402d9e:	f7ff fae9 	bl	402374 <__sprint_r.part.0>
  402da2:	2800      	cmp	r0, #0
  402da4:	d1c0      	bne.n	402d28 <_vfiprintf_r+0x93c>
  402da6:	980e      	ldr	r0, [sp, #56]	; 0x38
  402da8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402daa:	9b07      	ldr	r3, [sp, #28]
  402dac:	f100 0c01 	add.w	ip, r0, #1
  402db0:	46de      	mov	lr, fp
  402db2:	e4cb      	b.n	40274c <_vfiprintf_r+0x360>
  402db4:	004051bc 	.word	0x004051bc
  402db8:	004051d0 	.word	0x004051d0
  402dbc:	004051ac 	.word	0x004051ac
  402dc0:	2a00      	cmp	r2, #0
  402dc2:	f040 8133 	bne.w	40302c <_vfiprintf_r+0xc40>
  402dc6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402dca:	2b00      	cmp	r3, #0
  402dcc:	f000 80f5 	beq.w	402fba <_vfiprintf_r+0xbce>
  402dd0:	2301      	movs	r3, #1
  402dd2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  402dd6:	461a      	mov	r2, r3
  402dd8:	931b      	str	r3, [sp, #108]	; 0x6c
  402dda:	469e      	mov	lr, r3
  402ddc:	911a      	str	r1, [sp, #104]	; 0x68
  402dde:	46da      	mov	sl, fp
  402de0:	4670      	mov	r0, lr
  402de2:	f10a 0a08 	add.w	sl, sl, #8
  402de6:	f10e 0e01 	add.w	lr, lr, #1
  402dea:	e47d      	b.n	4026e8 <_vfiprintf_r+0x2fc>
  402dec:	a90c      	add	r1, sp, #48	; 0x30
  402dee:	2202      	movs	r2, #2
  402df0:	469e      	mov	lr, r3
  402df2:	911a      	str	r1, [sp, #104]	; 0x68
  402df4:	921b      	str	r2, [sp, #108]	; 0x6c
  402df6:	46da      	mov	sl, fp
  402df8:	4670      	mov	r0, lr
  402dfa:	f10a 0a08 	add.w	sl, sl, #8
  402dfe:	f10e 0e01 	add.w	lr, lr, #1
  402e02:	e738      	b.n	402c76 <_vfiprintf_r+0x88a>
  402e04:	9b01      	ldr	r3, [sp, #4]
  402e06:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402e0a:	2b00      	cmp	r3, #0
  402e0c:	f2c0 812a 	blt.w	403064 <_vfiprintf_r+0xc78>
  402e10:	ea54 0305 	orrs.w	r3, r4, r5
  402e14:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402e18:	f43f abff 	beq.w	40261a <_vfiprintf_r+0x22e>
  402e1c:	465f      	mov	r7, fp
  402e1e:	0923      	lsrs	r3, r4, #4
  402e20:	f004 010f 	and.w	r1, r4, #15
  402e24:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402e28:	092a      	lsrs	r2, r5, #4
  402e2a:	461c      	mov	r4, r3
  402e2c:	4615      	mov	r5, r2
  402e2e:	5c43      	ldrb	r3, [r0, r1]
  402e30:	f807 3d01 	strb.w	r3, [r7, #-1]!
  402e34:	ea54 0305 	orrs.w	r3, r4, r5
  402e38:	d1f1      	bne.n	402e1e <_vfiprintf_r+0xa32>
  402e3a:	ebc7 030b 	rsb	r3, r7, fp
  402e3e:	9303      	str	r3, [sp, #12]
  402e40:	f7ff bbf4 	b.w	40262c <_vfiprintf_r+0x240>
  402e44:	aa0d      	add	r2, sp, #52	; 0x34
  402e46:	9900      	ldr	r1, [sp, #0]
  402e48:	9805      	ldr	r0, [sp, #20]
  402e4a:	f7ff fa93 	bl	402374 <__sprint_r.part.0>
  402e4e:	2800      	cmp	r0, #0
  402e50:	f47f af6a 	bne.w	402d28 <_vfiprintf_r+0x93c>
  402e54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402e56:	46da      	mov	sl, fp
  402e58:	e787      	b.n	402d6a <_vfiprintf_r+0x97e>
  402e5a:	f04f 0900 	mov.w	r9, #0
  402e5e:	2400      	movs	r4, #0
  402e60:	2500      	movs	r5, #0
  402e62:	e7db      	b.n	402e1c <_vfiprintf_r+0xa30>
  402e64:	f016 0210 	ands.w	r2, r6, #16
  402e68:	f000 80b2 	beq.w	402fd0 <_vfiprintf_r+0xbe4>
  402e6c:	9904      	ldr	r1, [sp, #16]
  402e6e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402e72:	460a      	mov	r2, r1
  402e74:	680c      	ldr	r4, [r1, #0]
  402e76:	9901      	ldr	r1, [sp, #4]
  402e78:	2900      	cmp	r1, #0
  402e7a:	f102 0204 	add.w	r2, r2, #4
  402e7e:	f04f 0500 	mov.w	r5, #0
  402e82:	f2c0 8159 	blt.w	403138 <_vfiprintf_r+0xd4c>
  402e86:	ea54 0105 	orrs.w	r1, r4, r5
  402e8a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402e8e:	9204      	str	r2, [sp, #16]
  402e90:	f43f ad51 	beq.w	402936 <_vfiprintf_r+0x54a>
  402e94:	4699      	mov	r9, r3
  402e96:	e556      	b.n	402946 <_vfiprintf_r+0x55a>
  402e98:	06f7      	lsls	r7, r6, #27
  402e9a:	d40a      	bmi.n	402eb2 <_vfiprintf_r+0xac6>
  402e9c:	0675      	lsls	r5, r6, #25
  402e9e:	d508      	bpl.n	402eb2 <_vfiprintf_r+0xac6>
  402ea0:	9904      	ldr	r1, [sp, #16]
  402ea2:	f9b1 4000 	ldrsh.w	r4, [r1]
  402ea6:	3104      	adds	r1, #4
  402ea8:	17e5      	asrs	r5, r4, #31
  402eaa:	4622      	mov	r2, r4
  402eac:	462b      	mov	r3, r5
  402eae:	9104      	str	r1, [sp, #16]
  402eb0:	e4ea      	b.n	402888 <_vfiprintf_r+0x49c>
  402eb2:	9a04      	ldr	r2, [sp, #16]
  402eb4:	6814      	ldr	r4, [r2, #0]
  402eb6:	4613      	mov	r3, r2
  402eb8:	3304      	adds	r3, #4
  402eba:	17e5      	asrs	r5, r4, #31
  402ebc:	9304      	str	r3, [sp, #16]
  402ebe:	4622      	mov	r2, r4
  402ec0:	462b      	mov	r3, r5
  402ec2:	e4e1      	b.n	402888 <_vfiprintf_r+0x49c>
  402ec4:	6814      	ldr	r4, [r2, #0]
  402ec6:	3204      	adds	r2, #4
  402ec8:	9204      	str	r2, [sp, #16]
  402eca:	2500      	movs	r5, #0
  402ecc:	e61f      	b.n	402b0e <_vfiprintf_r+0x722>
  402ece:	f04f 0900 	mov.w	r9, #0
  402ed2:	ea54 0305 	orrs.w	r3, r4, r5
  402ed6:	f47f ace8 	bne.w	4028aa <_vfiprintf_r+0x4be>
  402eda:	e5d8      	b.n	402a8e <_vfiprintf_r+0x6a2>
  402edc:	aa0d      	add	r2, sp, #52	; 0x34
  402ede:	9900      	ldr	r1, [sp, #0]
  402ee0:	9805      	ldr	r0, [sp, #20]
  402ee2:	f7ff fa47 	bl	402374 <__sprint_r.part.0>
  402ee6:	2800      	cmp	r0, #0
  402ee8:	f47f af1e 	bne.w	402d28 <_vfiprintf_r+0x93c>
  402eec:	46da      	mov	sl, fp
  402eee:	f7ff bb48 	b.w	402582 <_vfiprintf_r+0x196>
  402ef2:	aa0d      	add	r2, sp, #52	; 0x34
  402ef4:	9900      	ldr	r1, [sp, #0]
  402ef6:	9805      	ldr	r0, [sp, #20]
  402ef8:	f7ff fa3c 	bl	402374 <__sprint_r.part.0>
  402efc:	2800      	cmp	r0, #0
  402efe:	f43f af45 	beq.w	402d8c <_vfiprintf_r+0x9a0>
  402f02:	e711      	b.n	402d28 <_vfiprintf_r+0x93c>
  402f04:	aa0d      	add	r2, sp, #52	; 0x34
  402f06:	9900      	ldr	r1, [sp, #0]
  402f08:	9805      	ldr	r0, [sp, #20]
  402f0a:	f7ff fa33 	bl	402374 <__sprint_r.part.0>
  402f0e:	2800      	cmp	r0, #0
  402f10:	f47f af0a 	bne.w	402d28 <_vfiprintf_r+0x93c>
  402f14:	980e      	ldr	r0, [sp, #56]	; 0x38
  402f16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f18:	f100 0e01 	add.w	lr, r0, #1
  402f1c:	46da      	mov	sl, fp
  402f1e:	f7ff bbe3 	b.w	4026e8 <_vfiprintf_r+0x2fc>
  402f22:	aa0d      	add	r2, sp, #52	; 0x34
  402f24:	9900      	ldr	r1, [sp, #0]
  402f26:	9805      	ldr	r0, [sp, #20]
  402f28:	f7ff fa24 	bl	402374 <__sprint_r.part.0>
  402f2c:	2800      	cmp	r0, #0
  402f2e:	f47f aefb 	bne.w	402d28 <_vfiprintf_r+0x93c>
  402f32:	980e      	ldr	r0, [sp, #56]	; 0x38
  402f34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f36:	f100 0e01 	add.w	lr, r0, #1
  402f3a:	46da      	mov	sl, fp
  402f3c:	e69b      	b.n	402c76 <_vfiprintf_r+0x88a>
  402f3e:	2a00      	cmp	r2, #0
  402f40:	f040 80d8 	bne.w	4030f4 <_vfiprintf_r+0xd08>
  402f44:	f04f 0e01 	mov.w	lr, #1
  402f48:	4610      	mov	r0, r2
  402f4a:	46da      	mov	sl, fp
  402f4c:	e697      	b.n	402c7e <_vfiprintf_r+0x892>
  402f4e:	aa0d      	add	r2, sp, #52	; 0x34
  402f50:	9900      	ldr	r1, [sp, #0]
  402f52:	9805      	ldr	r0, [sp, #20]
  402f54:	f7ff fa0e 	bl	402374 <__sprint_r.part.0>
  402f58:	2800      	cmp	r0, #0
  402f5a:	f47f aee5 	bne.w	402d28 <_vfiprintf_r+0x93c>
  402f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402f60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f62:	f103 0e01 	add.w	lr, r3, #1
  402f66:	46da      	mov	sl, fp
  402f68:	e422      	b.n	4027b0 <_vfiprintf_r+0x3c4>
  402f6a:	2230      	movs	r2, #48	; 0x30
  402f6c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  402f70:	9a01      	ldr	r2, [sp, #4]
  402f72:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  402f76:	2a00      	cmp	r2, #0
  402f78:	f04f 0300 	mov.w	r3, #0
  402f7c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402f80:	f046 0302 	orr.w	r3, r6, #2
  402f84:	f2c0 80cb 	blt.w	40311e <_vfiprintf_r+0xd32>
  402f88:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402f8c:	f046 0602 	orr.w	r6, r6, #2
  402f90:	f04f 0900 	mov.w	r9, #0
  402f94:	e742      	b.n	402e1c <_vfiprintf_r+0xa30>
  402f96:	f04f 0900 	mov.w	r9, #0
  402f9a:	4890      	ldr	r0, [pc, #576]	; (4031dc <_vfiprintf_r+0xdf0>)
  402f9c:	e73e      	b.n	402e1c <_vfiprintf_r+0xa30>
  402f9e:	9b01      	ldr	r3, [sp, #4]
  402fa0:	4264      	negs	r4, r4
  402fa2:	f04f 092d 	mov.w	r9, #45	; 0x2d
  402fa6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402faa:	2b00      	cmp	r3, #0
  402fac:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402fb0:	f6ff ac7b 	blt.w	4028aa <_vfiprintf_r+0x4be>
  402fb4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402fb8:	e477      	b.n	4028aa <_vfiprintf_r+0x4be>
  402fba:	9b07      	ldr	r3, [sp, #28]
  402fbc:	2b00      	cmp	r3, #0
  402fbe:	d072      	beq.n	4030a6 <_vfiprintf_r+0xcba>
  402fc0:	ab0c      	add	r3, sp, #48	; 0x30
  402fc2:	2202      	movs	r2, #2
  402fc4:	931a      	str	r3, [sp, #104]	; 0x68
  402fc6:	921b      	str	r2, [sp, #108]	; 0x6c
  402fc8:	f04f 0e01 	mov.w	lr, #1
  402fcc:	46da      	mov	sl, fp
  402fce:	e713      	b.n	402df8 <_vfiprintf_r+0xa0c>
  402fd0:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402fd4:	d048      	beq.n	403068 <_vfiprintf_r+0xc7c>
  402fd6:	9904      	ldr	r1, [sp, #16]
  402fd8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402fdc:	460b      	mov	r3, r1
  402fde:	880c      	ldrh	r4, [r1, #0]
  402fe0:	9901      	ldr	r1, [sp, #4]
  402fe2:	2900      	cmp	r1, #0
  402fe4:	f103 0304 	add.w	r3, r3, #4
  402fe8:	f04f 0500 	mov.w	r5, #0
  402fec:	f6ff ae10 	blt.w	402c10 <_vfiprintf_r+0x824>
  402ff0:	ea54 0105 	orrs.w	r1, r4, r5
  402ff4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402ff8:	9304      	str	r3, [sp, #16]
  402ffa:	f43f ac9c 	beq.w	402936 <_vfiprintf_r+0x54a>
  402ffe:	4691      	mov	r9, r2
  403000:	e4a1      	b.n	402946 <_vfiprintf_r+0x55a>
  403002:	06f0      	lsls	r0, r6, #27
  403004:	d40a      	bmi.n	40301c <_vfiprintf_r+0xc30>
  403006:	0671      	lsls	r1, r6, #25
  403008:	d508      	bpl.n	40301c <_vfiprintf_r+0xc30>
  40300a:	9a04      	ldr	r2, [sp, #16]
  40300c:	6813      	ldr	r3, [r2, #0]
  40300e:	3204      	adds	r2, #4
  403010:	9204      	str	r2, [sp, #16]
  403012:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  403016:	801a      	strh	r2, [r3, #0]
  403018:	f7ff ba19 	b.w	40244e <_vfiprintf_r+0x62>
  40301c:	9a04      	ldr	r2, [sp, #16]
  40301e:	6813      	ldr	r3, [r2, #0]
  403020:	3204      	adds	r2, #4
  403022:	9204      	str	r2, [sp, #16]
  403024:	9a02      	ldr	r2, [sp, #8]
  403026:	601a      	str	r2, [r3, #0]
  403028:	f7ff ba11 	b.w	40244e <_vfiprintf_r+0x62>
  40302c:	aa0d      	add	r2, sp, #52	; 0x34
  40302e:	9900      	ldr	r1, [sp, #0]
  403030:	9805      	ldr	r0, [sp, #20]
  403032:	f7ff f99f 	bl	402374 <__sprint_r.part.0>
  403036:	2800      	cmp	r0, #0
  403038:	f47f ae76 	bne.w	402d28 <_vfiprintf_r+0x93c>
  40303c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40303e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403040:	f100 0e01 	add.w	lr, r0, #1
  403044:	46da      	mov	sl, fp
  403046:	e5fa      	b.n	402c3e <_vfiprintf_r+0x852>
  403048:	f04f 30ff 	mov.w	r0, #4294967295
  40304c:	f7ff bab6 	b.w	4025bc <_vfiprintf_r+0x1d0>
  403050:	4862      	ldr	r0, [pc, #392]	; (4031dc <_vfiprintf_r+0xdf0>)
  403052:	4616      	mov	r6, r2
  403054:	ea54 0205 	orrs.w	r2, r4, r5
  403058:	9304      	str	r3, [sp, #16]
  40305a:	f04f 0900 	mov.w	r9, #0
  40305e:	f47f aedd 	bne.w	402e1c <_vfiprintf_r+0xa30>
  403062:	e6fc      	b.n	402e5e <_vfiprintf_r+0xa72>
  403064:	9b04      	ldr	r3, [sp, #16]
  403066:	e7f5      	b.n	403054 <_vfiprintf_r+0xc68>
  403068:	9a04      	ldr	r2, [sp, #16]
  40306a:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40306e:	4613      	mov	r3, r2
  403070:	6814      	ldr	r4, [r2, #0]
  403072:	9a01      	ldr	r2, [sp, #4]
  403074:	2a00      	cmp	r2, #0
  403076:	f103 0304 	add.w	r3, r3, #4
  40307a:	f04f 0500 	mov.w	r5, #0
  40307e:	f6ff adc7 	blt.w	402c10 <_vfiprintf_r+0x824>
  403082:	ea54 0205 	orrs.w	r2, r4, r5
  403086:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40308a:	9304      	str	r3, [sp, #16]
  40308c:	f47f ac5b 	bne.w	402946 <_vfiprintf_r+0x55a>
  403090:	e451      	b.n	402936 <_vfiprintf_r+0x54a>
  403092:	aa0d      	add	r2, sp, #52	; 0x34
  403094:	9900      	ldr	r1, [sp, #0]
  403096:	9805      	ldr	r0, [sp, #20]
  403098:	f7ff f96c 	bl	402374 <__sprint_r.part.0>
  40309c:	2800      	cmp	r0, #0
  40309e:	f47f ae43 	bne.w	402d28 <_vfiprintf_r+0x93c>
  4030a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4030a4:	e668      	b.n	402d78 <_vfiprintf_r+0x98c>
  4030a6:	4610      	mov	r0, r2
  4030a8:	f04f 0e01 	mov.w	lr, #1
  4030ac:	46da      	mov	sl, fp
  4030ae:	e5e6      	b.n	402c7e <_vfiprintf_r+0x892>
  4030b0:	9904      	ldr	r1, [sp, #16]
  4030b2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4030b6:	460a      	mov	r2, r1
  4030b8:	880c      	ldrh	r4, [r1, #0]
  4030ba:	9901      	ldr	r1, [sp, #4]
  4030bc:	2900      	cmp	r1, #0
  4030be:	f102 0204 	add.w	r2, r2, #4
  4030c2:	f04f 0500 	mov.w	r5, #0
  4030c6:	db4e      	blt.n	403166 <_vfiprintf_r+0xd7a>
  4030c8:	ea54 0105 	orrs.w	r1, r4, r5
  4030cc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4030d0:	9204      	str	r2, [sp, #16]
  4030d2:	4699      	mov	r9, r3
  4030d4:	f47f abe9 	bne.w	4028aa <_vfiprintf_r+0x4be>
  4030d8:	e4d4      	b.n	402a84 <_vfiprintf_r+0x698>
  4030da:	9304      	str	r3, [sp, #16]
  4030dc:	e6f9      	b.n	402ed2 <_vfiprintf_r+0xae6>
  4030de:	4638      	mov	r0, r7
  4030e0:	9404      	str	r4, [sp, #16]
  4030e2:	f001 fcad 	bl	404a40 <strlen>
  4030e6:	2300      	movs	r3, #0
  4030e8:	9003      	str	r0, [sp, #12]
  4030ea:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4030ee:	9301      	str	r3, [sp, #4]
  4030f0:	f7ff ba9c 	b.w	40262c <_vfiprintf_r+0x240>
  4030f4:	aa0d      	add	r2, sp, #52	; 0x34
  4030f6:	9900      	ldr	r1, [sp, #0]
  4030f8:	9805      	ldr	r0, [sp, #20]
  4030fa:	f7ff f93b 	bl	402374 <__sprint_r.part.0>
  4030fe:	2800      	cmp	r0, #0
  403100:	f47f ae12 	bne.w	402d28 <_vfiprintf_r+0x93c>
  403104:	980e      	ldr	r0, [sp, #56]	; 0x38
  403106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403108:	f100 0e01 	add.w	lr, r0, #1
  40310c:	46da      	mov	sl, fp
  40310e:	e5b6      	b.n	402c7e <_vfiprintf_r+0x892>
  403110:	980e      	ldr	r0, [sp, #56]	; 0x38
  403112:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403114:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4031e4 <_vfiprintf_r+0xdf8>
  403118:	3001      	adds	r0, #1
  40311a:	f7ff bad2 	b.w	4026c2 <_vfiprintf_r+0x2d6>
  40311e:	461e      	mov	r6, r3
  403120:	f04f 0900 	mov.w	r9, #0
  403124:	e67a      	b.n	402e1c <_vfiprintf_r+0xa30>
  403126:	2b06      	cmp	r3, #6
  403128:	bf28      	it	cs
  40312a:	2306      	movcs	r3, #6
  40312c:	9303      	str	r3, [sp, #12]
  40312e:	9404      	str	r4, [sp, #16]
  403130:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  403134:	4f2a      	ldr	r7, [pc, #168]	; (4031e0 <_vfiprintf_r+0xdf4>)
  403136:	e50c      	b.n	402b52 <_vfiprintf_r+0x766>
  403138:	9204      	str	r2, [sp, #16]
  40313a:	e56a      	b.n	402c12 <_vfiprintf_r+0x826>
  40313c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40313e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4031e4 <_vfiprintf_r+0xdf8>
  403142:	3001      	adds	r0, #1
  403144:	f7ff bb73 	b.w	40282e <_vfiprintf_r+0x442>
  403148:	46f4      	mov	ip, lr
  40314a:	f7ff bb1a 	b.w	402782 <_vfiprintf_r+0x396>
  40314e:	9b01      	ldr	r3, [sp, #4]
  403150:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  403154:	9303      	str	r3, [sp, #12]
  403156:	9404      	str	r4, [sp, #16]
  403158:	9001      	str	r0, [sp, #4]
  40315a:	f7ff ba67 	b.w	40262c <_vfiprintf_r+0x240>
  40315e:	2200      	movs	r2, #0
  403160:	9201      	str	r2, [sp, #4]
  403162:	f7ff b9ac 	b.w	4024be <_vfiprintf_r+0xd2>
  403166:	9204      	str	r2, [sp, #16]
  403168:	4699      	mov	r9, r3
  40316a:	e6b2      	b.n	402ed2 <_vfiprintf_r+0xae6>
  40316c:	9a04      	ldr	r2, [sp, #16]
  40316e:	6813      	ldr	r3, [r2, #0]
  403170:	9301      	str	r3, [sp, #4]
  403172:	3204      	adds	r2, #4
  403174:	2b00      	cmp	r3, #0
  403176:	9204      	str	r2, [sp, #16]
  403178:	f898 3001 	ldrb.w	r3, [r8, #1]
  40317c:	46a8      	mov	r8, r5
  40317e:	f6bf a99c 	bge.w	4024ba <_vfiprintf_r+0xce>
  403182:	f04f 32ff 	mov.w	r2, #4294967295
  403186:	9201      	str	r2, [sp, #4]
  403188:	f7ff b997 	b.w	4024ba <_vfiprintf_r+0xce>
  40318c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403190:	e48e      	b.n	402ab0 <_vfiprintf_r+0x6c4>
  403192:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403196:	e4f0      	b.n	402b7a <_vfiprintf_r+0x78e>
  403198:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40319c:	e4ab      	b.n	402af6 <_vfiprintf_r+0x70a>
  40319e:	4699      	mov	r9, r3
  4031a0:	07f3      	lsls	r3, r6, #31
  4031a2:	d505      	bpl.n	4031b0 <_vfiprintf_r+0xdc4>
  4031a4:	af2a      	add	r7, sp, #168	; 0xa8
  4031a6:	2330      	movs	r3, #48	; 0x30
  4031a8:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4031ac:	f7ff bb97 	b.w	4028de <_vfiprintf_r+0x4f2>
  4031b0:	9b01      	ldr	r3, [sp, #4]
  4031b2:	9303      	str	r3, [sp, #12]
  4031b4:	465f      	mov	r7, fp
  4031b6:	f7ff ba39 	b.w	40262c <_vfiprintf_r+0x240>
  4031ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4031be:	e443      	b.n	402a48 <_vfiprintf_r+0x65c>
  4031c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4031c4:	f7ff bb9a 	b.w	4028fc <_vfiprintf_r+0x510>
  4031c8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4031cc:	f7ff bb4d 	b.w	40286a <_vfiprintf_r+0x47e>
  4031d0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4031d4:	e50f      	b.n	402bf6 <_vfiprintf_r+0x80a>
  4031d6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4031da:	e4f3      	b.n	402bc4 <_vfiprintf_r+0x7d8>
  4031dc:	004051d0 	.word	0x004051d0
  4031e0:	004051e4 	.word	0x004051e4
  4031e4:	004051ec 	.word	0x004051ec

004031e8 <__sbprintf>:
  4031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4031ea:	460c      	mov	r4, r1
  4031ec:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  4031f0:	8989      	ldrh	r1, [r1, #12]
  4031f2:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4031f4:	89e5      	ldrh	r5, [r4, #14]
  4031f6:	9619      	str	r6, [sp, #100]	; 0x64
  4031f8:	f021 0102 	bic.w	r1, r1, #2
  4031fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4031fe:	f8ad 500e 	strh.w	r5, [sp, #14]
  403202:	2500      	movs	r5, #0
  403204:	69e7      	ldr	r7, [r4, #28]
  403206:	f8ad 100c 	strh.w	r1, [sp, #12]
  40320a:	9609      	str	r6, [sp, #36]	; 0x24
  40320c:	9506      	str	r5, [sp, #24]
  40320e:	ae1a      	add	r6, sp, #104	; 0x68
  403210:	f44f 6580 	mov.w	r5, #1024	; 0x400
  403214:	4669      	mov	r1, sp
  403216:	9600      	str	r6, [sp, #0]
  403218:	9604      	str	r6, [sp, #16]
  40321a:	9502      	str	r5, [sp, #8]
  40321c:	9505      	str	r5, [sp, #20]
  40321e:	9707      	str	r7, [sp, #28]
  403220:	4606      	mov	r6, r0
  403222:	f7ff f8e3 	bl	4023ec <_vfiprintf_r>
  403226:	1e05      	subs	r5, r0, #0
  403228:	db07      	blt.n	40323a <__sbprintf+0x52>
  40322a:	4630      	mov	r0, r6
  40322c:	4669      	mov	r1, sp
  40322e:	f000 f929 	bl	403484 <_fflush_r>
  403232:	2800      	cmp	r0, #0
  403234:	bf18      	it	ne
  403236:	f04f 35ff 	movne.w	r5, #4294967295
  40323a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40323e:	065b      	lsls	r3, r3, #25
  403240:	d503      	bpl.n	40324a <__sbprintf+0x62>
  403242:	89a3      	ldrh	r3, [r4, #12]
  403244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403248:	81a3      	strh	r3, [r4, #12]
  40324a:	4628      	mov	r0, r5
  40324c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  403250:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403252:	bf00      	nop

00403254 <__swsetup_r>:
  403254:	b538      	push	{r3, r4, r5, lr}
  403256:	4b30      	ldr	r3, [pc, #192]	; (403318 <__swsetup_r+0xc4>)
  403258:	681b      	ldr	r3, [r3, #0]
  40325a:	4605      	mov	r5, r0
  40325c:	460c      	mov	r4, r1
  40325e:	b113      	cbz	r3, 403266 <__swsetup_r+0x12>
  403260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403262:	2a00      	cmp	r2, #0
  403264:	d038      	beq.n	4032d8 <__swsetup_r+0x84>
  403266:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40326a:	b293      	uxth	r3, r2
  40326c:	0718      	lsls	r0, r3, #28
  40326e:	d50c      	bpl.n	40328a <__swsetup_r+0x36>
  403270:	6920      	ldr	r0, [r4, #16]
  403272:	b1a8      	cbz	r0, 4032a0 <__swsetup_r+0x4c>
  403274:	f013 0201 	ands.w	r2, r3, #1
  403278:	d01e      	beq.n	4032b8 <__swsetup_r+0x64>
  40327a:	6963      	ldr	r3, [r4, #20]
  40327c:	2200      	movs	r2, #0
  40327e:	425b      	negs	r3, r3
  403280:	61a3      	str	r3, [r4, #24]
  403282:	60a2      	str	r2, [r4, #8]
  403284:	b1f0      	cbz	r0, 4032c4 <__swsetup_r+0x70>
  403286:	2000      	movs	r0, #0
  403288:	bd38      	pop	{r3, r4, r5, pc}
  40328a:	06d9      	lsls	r1, r3, #27
  40328c:	d53c      	bpl.n	403308 <__swsetup_r+0xb4>
  40328e:	0758      	lsls	r0, r3, #29
  403290:	d426      	bmi.n	4032e0 <__swsetup_r+0x8c>
  403292:	6920      	ldr	r0, [r4, #16]
  403294:	f042 0308 	orr.w	r3, r2, #8
  403298:	81a3      	strh	r3, [r4, #12]
  40329a:	b29b      	uxth	r3, r3
  40329c:	2800      	cmp	r0, #0
  40329e:	d1e9      	bne.n	403274 <__swsetup_r+0x20>
  4032a0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4032a4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4032a8:	d0e4      	beq.n	403274 <__swsetup_r+0x20>
  4032aa:	4628      	mov	r0, r5
  4032ac:	4621      	mov	r1, r4
  4032ae:	f000 fd15 	bl	403cdc <__smakebuf_r>
  4032b2:	89a3      	ldrh	r3, [r4, #12]
  4032b4:	6920      	ldr	r0, [r4, #16]
  4032b6:	e7dd      	b.n	403274 <__swsetup_r+0x20>
  4032b8:	0799      	lsls	r1, r3, #30
  4032ba:	bf58      	it	pl
  4032bc:	6962      	ldrpl	r2, [r4, #20]
  4032be:	60a2      	str	r2, [r4, #8]
  4032c0:	2800      	cmp	r0, #0
  4032c2:	d1e0      	bne.n	403286 <__swsetup_r+0x32>
  4032c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032c8:	061a      	lsls	r2, r3, #24
  4032ca:	d5dd      	bpl.n	403288 <__swsetup_r+0x34>
  4032cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4032d0:	81a3      	strh	r3, [r4, #12]
  4032d2:	f04f 30ff 	mov.w	r0, #4294967295
  4032d6:	bd38      	pop	{r3, r4, r5, pc}
  4032d8:	4618      	mov	r0, r3
  4032da:	f000 f967 	bl	4035ac <__sinit>
  4032de:	e7c2      	b.n	403266 <__swsetup_r+0x12>
  4032e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4032e2:	b151      	cbz	r1, 4032fa <__swsetup_r+0xa6>
  4032e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4032e8:	4299      	cmp	r1, r3
  4032ea:	d004      	beq.n	4032f6 <__swsetup_r+0xa2>
  4032ec:	4628      	mov	r0, r5
  4032ee:	f000 fa27 	bl	403740 <_free_r>
  4032f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4032f6:	2300      	movs	r3, #0
  4032f8:	6323      	str	r3, [r4, #48]	; 0x30
  4032fa:	2300      	movs	r3, #0
  4032fc:	6920      	ldr	r0, [r4, #16]
  4032fe:	6063      	str	r3, [r4, #4]
  403300:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403304:	6020      	str	r0, [r4, #0]
  403306:	e7c5      	b.n	403294 <__swsetup_r+0x40>
  403308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40330c:	2309      	movs	r3, #9
  40330e:	602b      	str	r3, [r5, #0]
  403310:	f04f 30ff 	mov.w	r0, #4294967295
  403314:	81a2      	strh	r2, [r4, #12]
  403316:	bd38      	pop	{r3, r4, r5, pc}
  403318:	20000430 	.word	0x20000430

0040331c <register_fini>:
  40331c:	4b02      	ldr	r3, [pc, #8]	; (403328 <register_fini+0xc>)
  40331e:	b113      	cbz	r3, 403326 <register_fini+0xa>
  403320:	4802      	ldr	r0, [pc, #8]	; (40332c <register_fini+0x10>)
  403322:	f000 b805 	b.w	403330 <atexit>
  403326:	4770      	bx	lr
  403328:	00000000 	.word	0x00000000
  40332c:	004035c1 	.word	0x004035c1

00403330 <atexit>:
  403330:	2300      	movs	r3, #0
  403332:	4601      	mov	r1, r0
  403334:	461a      	mov	r2, r3
  403336:	4618      	mov	r0, r3
  403338:	f001 bc94 	b.w	404c64 <__register_exitproc>

0040333c <__sflush_r>:
  40333c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403340:	b29a      	uxth	r2, r3
  403342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403346:	460d      	mov	r5, r1
  403348:	0711      	lsls	r1, r2, #28
  40334a:	4680      	mov	r8, r0
  40334c:	d43c      	bmi.n	4033c8 <__sflush_r+0x8c>
  40334e:	686a      	ldr	r2, [r5, #4]
  403350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403354:	2a00      	cmp	r2, #0
  403356:	81ab      	strh	r3, [r5, #12]
  403358:	dd73      	ble.n	403442 <__sflush_r+0x106>
  40335a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40335c:	2c00      	cmp	r4, #0
  40335e:	d04b      	beq.n	4033f8 <__sflush_r+0xbc>
  403360:	b29b      	uxth	r3, r3
  403362:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  403366:	2100      	movs	r1, #0
  403368:	b292      	uxth	r2, r2
  40336a:	f8d8 6000 	ldr.w	r6, [r8]
  40336e:	f8c8 1000 	str.w	r1, [r8]
  403372:	2a00      	cmp	r2, #0
  403374:	d069      	beq.n	40344a <__sflush_r+0x10e>
  403376:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403378:	075f      	lsls	r7, r3, #29
  40337a:	d505      	bpl.n	403388 <__sflush_r+0x4c>
  40337c:	6869      	ldr	r1, [r5, #4]
  40337e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403380:	1a52      	subs	r2, r2, r1
  403382:	b10b      	cbz	r3, 403388 <__sflush_r+0x4c>
  403384:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403386:	1ad2      	subs	r2, r2, r3
  403388:	2300      	movs	r3, #0
  40338a:	69e9      	ldr	r1, [r5, #28]
  40338c:	4640      	mov	r0, r8
  40338e:	47a0      	blx	r4
  403390:	1c44      	adds	r4, r0, #1
  403392:	d03c      	beq.n	40340e <__sflush_r+0xd2>
  403394:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403398:	692a      	ldr	r2, [r5, #16]
  40339a:	602a      	str	r2, [r5, #0]
  40339c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4033a0:	2200      	movs	r2, #0
  4033a2:	81ab      	strh	r3, [r5, #12]
  4033a4:	04db      	lsls	r3, r3, #19
  4033a6:	606a      	str	r2, [r5, #4]
  4033a8:	d449      	bmi.n	40343e <__sflush_r+0x102>
  4033aa:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4033ac:	f8c8 6000 	str.w	r6, [r8]
  4033b0:	b311      	cbz	r1, 4033f8 <__sflush_r+0xbc>
  4033b2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4033b6:	4299      	cmp	r1, r3
  4033b8:	d002      	beq.n	4033c0 <__sflush_r+0x84>
  4033ba:	4640      	mov	r0, r8
  4033bc:	f000 f9c0 	bl	403740 <_free_r>
  4033c0:	2000      	movs	r0, #0
  4033c2:	6328      	str	r0, [r5, #48]	; 0x30
  4033c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4033c8:	692e      	ldr	r6, [r5, #16]
  4033ca:	b1ae      	cbz	r6, 4033f8 <__sflush_r+0xbc>
  4033cc:	682c      	ldr	r4, [r5, #0]
  4033ce:	602e      	str	r6, [r5, #0]
  4033d0:	0790      	lsls	r0, r2, #30
  4033d2:	bf0c      	ite	eq
  4033d4:	696b      	ldreq	r3, [r5, #20]
  4033d6:	2300      	movne	r3, #0
  4033d8:	1ba4      	subs	r4, r4, r6
  4033da:	60ab      	str	r3, [r5, #8]
  4033dc:	e00a      	b.n	4033f4 <__sflush_r+0xb8>
  4033de:	4623      	mov	r3, r4
  4033e0:	4632      	mov	r2, r6
  4033e2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4033e4:	69e9      	ldr	r1, [r5, #28]
  4033e6:	4640      	mov	r0, r8
  4033e8:	47b8      	blx	r7
  4033ea:	2800      	cmp	r0, #0
  4033ec:	eba4 0400 	sub.w	r4, r4, r0
  4033f0:	4406      	add	r6, r0
  4033f2:	dd04      	ble.n	4033fe <__sflush_r+0xc2>
  4033f4:	2c00      	cmp	r4, #0
  4033f6:	dcf2      	bgt.n	4033de <__sflush_r+0xa2>
  4033f8:	2000      	movs	r0, #0
  4033fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4033fe:	89ab      	ldrh	r3, [r5, #12]
  403400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403404:	81ab      	strh	r3, [r5, #12]
  403406:	f04f 30ff 	mov.w	r0, #4294967295
  40340a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40340e:	f8d8 2000 	ldr.w	r2, [r8]
  403412:	2a1d      	cmp	r2, #29
  403414:	d8f3      	bhi.n	4033fe <__sflush_r+0xc2>
  403416:	4b1a      	ldr	r3, [pc, #104]	; (403480 <__sflush_r+0x144>)
  403418:	40d3      	lsrs	r3, r2
  40341a:	f003 0301 	and.w	r3, r3, #1
  40341e:	f083 0401 	eor.w	r4, r3, #1
  403422:	2b00      	cmp	r3, #0
  403424:	d0eb      	beq.n	4033fe <__sflush_r+0xc2>
  403426:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40342a:	6929      	ldr	r1, [r5, #16]
  40342c:	6029      	str	r1, [r5, #0]
  40342e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403432:	04d9      	lsls	r1, r3, #19
  403434:	606c      	str	r4, [r5, #4]
  403436:	81ab      	strh	r3, [r5, #12]
  403438:	d5b7      	bpl.n	4033aa <__sflush_r+0x6e>
  40343a:	2a00      	cmp	r2, #0
  40343c:	d1b5      	bne.n	4033aa <__sflush_r+0x6e>
  40343e:	6528      	str	r0, [r5, #80]	; 0x50
  403440:	e7b3      	b.n	4033aa <__sflush_r+0x6e>
  403442:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403444:	2a00      	cmp	r2, #0
  403446:	dc88      	bgt.n	40335a <__sflush_r+0x1e>
  403448:	e7d6      	b.n	4033f8 <__sflush_r+0xbc>
  40344a:	2301      	movs	r3, #1
  40344c:	69e9      	ldr	r1, [r5, #28]
  40344e:	4640      	mov	r0, r8
  403450:	47a0      	blx	r4
  403452:	1c43      	adds	r3, r0, #1
  403454:	4602      	mov	r2, r0
  403456:	d002      	beq.n	40345e <__sflush_r+0x122>
  403458:	89ab      	ldrh	r3, [r5, #12]
  40345a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40345c:	e78c      	b.n	403378 <__sflush_r+0x3c>
  40345e:	f8d8 3000 	ldr.w	r3, [r8]
  403462:	2b00      	cmp	r3, #0
  403464:	d0f8      	beq.n	403458 <__sflush_r+0x11c>
  403466:	2b1d      	cmp	r3, #29
  403468:	d001      	beq.n	40346e <__sflush_r+0x132>
  40346a:	2b16      	cmp	r3, #22
  40346c:	d102      	bne.n	403474 <__sflush_r+0x138>
  40346e:	f8c8 6000 	str.w	r6, [r8]
  403472:	e7c1      	b.n	4033f8 <__sflush_r+0xbc>
  403474:	89ab      	ldrh	r3, [r5, #12]
  403476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40347a:	81ab      	strh	r3, [r5, #12]
  40347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403480:	20400001 	.word	0x20400001

00403484 <_fflush_r>:
  403484:	b510      	push	{r4, lr}
  403486:	4604      	mov	r4, r0
  403488:	b082      	sub	sp, #8
  40348a:	b108      	cbz	r0, 403490 <_fflush_r+0xc>
  40348c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40348e:	b153      	cbz	r3, 4034a6 <_fflush_r+0x22>
  403490:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  403494:	b908      	cbnz	r0, 40349a <_fflush_r+0x16>
  403496:	b002      	add	sp, #8
  403498:	bd10      	pop	{r4, pc}
  40349a:	4620      	mov	r0, r4
  40349c:	b002      	add	sp, #8
  40349e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4034a2:	f7ff bf4b 	b.w	40333c <__sflush_r>
  4034a6:	9101      	str	r1, [sp, #4]
  4034a8:	f000 f880 	bl	4035ac <__sinit>
  4034ac:	9901      	ldr	r1, [sp, #4]
  4034ae:	e7ef      	b.n	403490 <_fflush_r+0xc>

004034b0 <_cleanup_r>:
  4034b0:	4901      	ldr	r1, [pc, #4]	; (4034b8 <_cleanup_r+0x8>)
  4034b2:	f000 bbaf 	b.w	403c14 <_fwalk_reent>
  4034b6:	bf00      	nop
  4034b8:	00404d2d 	.word	0x00404d2d

004034bc <__sinit.part.1>:
  4034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034c0:	4b35      	ldr	r3, [pc, #212]	; (403598 <__sinit.part.1+0xdc>)
  4034c2:	6845      	ldr	r5, [r0, #4]
  4034c4:	63c3      	str	r3, [r0, #60]	; 0x3c
  4034c6:	2400      	movs	r4, #0
  4034c8:	4607      	mov	r7, r0
  4034ca:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4034ce:	2304      	movs	r3, #4
  4034d0:	2103      	movs	r1, #3
  4034d2:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4034d6:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4034da:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4034de:	b083      	sub	sp, #12
  4034e0:	602c      	str	r4, [r5, #0]
  4034e2:	606c      	str	r4, [r5, #4]
  4034e4:	60ac      	str	r4, [r5, #8]
  4034e6:	666c      	str	r4, [r5, #100]	; 0x64
  4034e8:	81ec      	strh	r4, [r5, #14]
  4034ea:	612c      	str	r4, [r5, #16]
  4034ec:	616c      	str	r4, [r5, #20]
  4034ee:	61ac      	str	r4, [r5, #24]
  4034f0:	81ab      	strh	r3, [r5, #12]
  4034f2:	4621      	mov	r1, r4
  4034f4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4034f8:	2208      	movs	r2, #8
  4034fa:	f7fe fe3d 	bl	402178 <memset>
  4034fe:	68be      	ldr	r6, [r7, #8]
  403500:	f8df b098 	ldr.w	fp, [pc, #152]	; 40359c <__sinit.part.1+0xe0>
  403504:	f8df a098 	ldr.w	sl, [pc, #152]	; 4035a0 <__sinit.part.1+0xe4>
  403508:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4035a4 <__sinit.part.1+0xe8>
  40350c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4035a8 <__sinit.part.1+0xec>
  403510:	f8c5 b020 	str.w	fp, [r5, #32]
  403514:	2301      	movs	r3, #1
  403516:	2209      	movs	r2, #9
  403518:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40351c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403520:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403524:	61ed      	str	r5, [r5, #28]
  403526:	4621      	mov	r1, r4
  403528:	81f3      	strh	r3, [r6, #14]
  40352a:	81b2      	strh	r2, [r6, #12]
  40352c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  403530:	6034      	str	r4, [r6, #0]
  403532:	6074      	str	r4, [r6, #4]
  403534:	60b4      	str	r4, [r6, #8]
  403536:	6674      	str	r4, [r6, #100]	; 0x64
  403538:	6134      	str	r4, [r6, #16]
  40353a:	6174      	str	r4, [r6, #20]
  40353c:	61b4      	str	r4, [r6, #24]
  40353e:	2208      	movs	r2, #8
  403540:	9301      	str	r3, [sp, #4]
  403542:	f7fe fe19 	bl	402178 <memset>
  403546:	68fd      	ldr	r5, [r7, #12]
  403548:	61f6      	str	r6, [r6, #28]
  40354a:	2012      	movs	r0, #18
  40354c:	2202      	movs	r2, #2
  40354e:	f8c6 b020 	str.w	fp, [r6, #32]
  403552:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  403556:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40355a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40355e:	4621      	mov	r1, r4
  403560:	81a8      	strh	r0, [r5, #12]
  403562:	81ea      	strh	r2, [r5, #14]
  403564:	602c      	str	r4, [r5, #0]
  403566:	606c      	str	r4, [r5, #4]
  403568:	60ac      	str	r4, [r5, #8]
  40356a:	666c      	str	r4, [r5, #100]	; 0x64
  40356c:	612c      	str	r4, [r5, #16]
  40356e:	616c      	str	r4, [r5, #20]
  403570:	61ac      	str	r4, [r5, #24]
  403572:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403576:	2208      	movs	r2, #8
  403578:	f7fe fdfe 	bl	402178 <memset>
  40357c:	9b01      	ldr	r3, [sp, #4]
  40357e:	61ed      	str	r5, [r5, #28]
  403580:	f8c5 b020 	str.w	fp, [r5, #32]
  403584:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403588:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40358c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403590:	63bb      	str	r3, [r7, #56]	; 0x38
  403592:	b003      	add	sp, #12
  403594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403598:	004034b1 	.word	0x004034b1
  40359c:	00404999 	.word	0x00404999
  4035a0:	004049bd 	.word	0x004049bd
  4035a4:	004049f9 	.word	0x004049f9
  4035a8:	00404a19 	.word	0x00404a19

004035ac <__sinit>:
  4035ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4035ae:	b103      	cbz	r3, 4035b2 <__sinit+0x6>
  4035b0:	4770      	bx	lr
  4035b2:	f7ff bf83 	b.w	4034bc <__sinit.part.1>
  4035b6:	bf00      	nop

004035b8 <__sfp_lock_acquire>:
  4035b8:	4770      	bx	lr
  4035ba:	bf00      	nop

004035bc <__sfp_lock_release>:
  4035bc:	4770      	bx	lr
  4035be:	bf00      	nop

004035c0 <__libc_fini_array>:
  4035c0:	b538      	push	{r3, r4, r5, lr}
  4035c2:	4d07      	ldr	r5, [pc, #28]	; (4035e0 <__libc_fini_array+0x20>)
  4035c4:	4c07      	ldr	r4, [pc, #28]	; (4035e4 <__libc_fini_array+0x24>)
  4035c6:	1b2c      	subs	r4, r5, r4
  4035c8:	10a4      	asrs	r4, r4, #2
  4035ca:	d005      	beq.n	4035d8 <__libc_fini_array+0x18>
  4035cc:	3c01      	subs	r4, #1
  4035ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4035d2:	4798      	blx	r3
  4035d4:	2c00      	cmp	r4, #0
  4035d6:	d1f9      	bne.n	4035cc <__libc_fini_array+0xc>
  4035d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4035dc:	f001 be18 	b.w	405210 <_fini>
  4035e0:	00405220 	.word	0x00405220
  4035e4:	0040521c 	.word	0x0040521c

004035e8 <__fputwc>:
  4035e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4035ec:	b082      	sub	sp, #8
  4035ee:	4680      	mov	r8, r0
  4035f0:	4689      	mov	r9, r1
  4035f2:	4614      	mov	r4, r2
  4035f4:	f000 fb3c 	bl	403c70 <__locale_mb_cur_max>
  4035f8:	2801      	cmp	r0, #1
  4035fa:	d033      	beq.n	403664 <__fputwc+0x7c>
  4035fc:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403600:	464a      	mov	r2, r9
  403602:	a901      	add	r1, sp, #4
  403604:	4640      	mov	r0, r8
  403606:	f001 fadf 	bl	404bc8 <_wcrtomb_r>
  40360a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40360e:	4682      	mov	sl, r0
  403610:	d021      	beq.n	403656 <__fputwc+0x6e>
  403612:	b388      	cbz	r0, 403678 <__fputwc+0x90>
  403614:	f89d 6004 	ldrb.w	r6, [sp, #4]
  403618:	2500      	movs	r5, #0
  40361a:	e008      	b.n	40362e <__fputwc+0x46>
  40361c:	6823      	ldr	r3, [r4, #0]
  40361e:	1c5a      	adds	r2, r3, #1
  403620:	6022      	str	r2, [r4, #0]
  403622:	701e      	strb	r6, [r3, #0]
  403624:	3501      	adds	r5, #1
  403626:	4555      	cmp	r5, sl
  403628:	d226      	bcs.n	403678 <__fputwc+0x90>
  40362a:	ab01      	add	r3, sp, #4
  40362c:	5d5e      	ldrb	r6, [r3, r5]
  40362e:	68a3      	ldr	r3, [r4, #8]
  403630:	3b01      	subs	r3, #1
  403632:	2b00      	cmp	r3, #0
  403634:	60a3      	str	r3, [r4, #8]
  403636:	daf1      	bge.n	40361c <__fputwc+0x34>
  403638:	69a7      	ldr	r7, [r4, #24]
  40363a:	42bb      	cmp	r3, r7
  40363c:	4631      	mov	r1, r6
  40363e:	4622      	mov	r2, r4
  403640:	4640      	mov	r0, r8
  403642:	db01      	blt.n	403648 <__fputwc+0x60>
  403644:	2e0a      	cmp	r6, #10
  403646:	d1e9      	bne.n	40361c <__fputwc+0x34>
  403648:	f001 fa68 	bl	404b1c <__swbuf_r>
  40364c:	1c43      	adds	r3, r0, #1
  40364e:	d1e9      	bne.n	403624 <__fputwc+0x3c>
  403650:	b002      	add	sp, #8
  403652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403656:	89a3      	ldrh	r3, [r4, #12]
  403658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40365c:	81a3      	strh	r3, [r4, #12]
  40365e:	b002      	add	sp, #8
  403660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403664:	f109 33ff 	add.w	r3, r9, #4294967295
  403668:	2bfe      	cmp	r3, #254	; 0xfe
  40366a:	d8c7      	bhi.n	4035fc <__fputwc+0x14>
  40366c:	fa5f f689 	uxtb.w	r6, r9
  403670:	4682      	mov	sl, r0
  403672:	f88d 6004 	strb.w	r6, [sp, #4]
  403676:	e7cf      	b.n	403618 <__fputwc+0x30>
  403678:	4648      	mov	r0, r9
  40367a:	b002      	add	sp, #8
  40367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403680 <_fputwc_r>:
  403680:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403684:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403688:	d10a      	bne.n	4036a0 <_fputwc_r+0x20>
  40368a:	b410      	push	{r4}
  40368c:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40368e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403692:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  403696:	6654      	str	r4, [r2, #100]	; 0x64
  403698:	8193      	strh	r3, [r2, #12]
  40369a:	bc10      	pop	{r4}
  40369c:	f7ff bfa4 	b.w	4035e8 <__fputwc>
  4036a0:	f7ff bfa2 	b.w	4035e8 <__fputwc>

004036a4 <_malloc_trim_r>:
  4036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4036a6:	4f23      	ldr	r7, [pc, #140]	; (403734 <_malloc_trim_r+0x90>)
  4036a8:	460c      	mov	r4, r1
  4036aa:	4606      	mov	r6, r0
  4036ac:	f000 ff6e 	bl	40458c <__malloc_lock>
  4036b0:	68bb      	ldr	r3, [r7, #8]
  4036b2:	685d      	ldr	r5, [r3, #4]
  4036b4:	f025 0503 	bic.w	r5, r5, #3
  4036b8:	1b29      	subs	r1, r5, r4
  4036ba:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4036be:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4036c2:	f021 010f 	bic.w	r1, r1, #15
  4036c6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4036ca:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4036ce:	db07      	blt.n	4036e0 <_malloc_trim_r+0x3c>
  4036d0:	2100      	movs	r1, #0
  4036d2:	4630      	mov	r0, r6
  4036d4:	f001 f94e 	bl	404974 <_sbrk_r>
  4036d8:	68bb      	ldr	r3, [r7, #8]
  4036da:	442b      	add	r3, r5
  4036dc:	4298      	cmp	r0, r3
  4036de:	d004      	beq.n	4036ea <_malloc_trim_r+0x46>
  4036e0:	4630      	mov	r0, r6
  4036e2:	f000 ff55 	bl	404590 <__malloc_unlock>
  4036e6:	2000      	movs	r0, #0
  4036e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4036ea:	4261      	negs	r1, r4
  4036ec:	4630      	mov	r0, r6
  4036ee:	f001 f941 	bl	404974 <_sbrk_r>
  4036f2:	3001      	adds	r0, #1
  4036f4:	d00d      	beq.n	403712 <_malloc_trim_r+0x6e>
  4036f6:	4b10      	ldr	r3, [pc, #64]	; (403738 <_malloc_trim_r+0x94>)
  4036f8:	68ba      	ldr	r2, [r7, #8]
  4036fa:	6819      	ldr	r1, [r3, #0]
  4036fc:	1b2d      	subs	r5, r5, r4
  4036fe:	f045 0501 	orr.w	r5, r5, #1
  403702:	4630      	mov	r0, r6
  403704:	1b09      	subs	r1, r1, r4
  403706:	6055      	str	r5, [r2, #4]
  403708:	6019      	str	r1, [r3, #0]
  40370a:	f000 ff41 	bl	404590 <__malloc_unlock>
  40370e:	2001      	movs	r0, #1
  403710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403712:	2100      	movs	r1, #0
  403714:	4630      	mov	r0, r6
  403716:	f001 f92d 	bl	404974 <_sbrk_r>
  40371a:	68ba      	ldr	r2, [r7, #8]
  40371c:	1a83      	subs	r3, r0, r2
  40371e:	2b0f      	cmp	r3, #15
  403720:	ddde      	ble.n	4036e0 <_malloc_trim_r+0x3c>
  403722:	4c06      	ldr	r4, [pc, #24]	; (40373c <_malloc_trim_r+0x98>)
  403724:	4904      	ldr	r1, [pc, #16]	; (403738 <_malloc_trim_r+0x94>)
  403726:	6824      	ldr	r4, [r4, #0]
  403728:	f043 0301 	orr.w	r3, r3, #1
  40372c:	1b00      	subs	r0, r0, r4
  40372e:	6053      	str	r3, [r2, #4]
  403730:	6008      	str	r0, [r1, #0]
  403732:	e7d5      	b.n	4036e0 <_malloc_trim_r+0x3c>
  403734:	20000458 	.word	0x20000458
  403738:	20000aac 	.word	0x20000aac
  40373c:	20000864 	.word	0x20000864

00403740 <_free_r>:
  403740:	2900      	cmp	r1, #0
  403742:	d045      	beq.n	4037d0 <_free_r+0x90>
  403744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403748:	460d      	mov	r5, r1
  40374a:	4680      	mov	r8, r0
  40374c:	f000 ff1e 	bl	40458c <__malloc_lock>
  403750:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403754:	496a      	ldr	r1, [pc, #424]	; (403900 <_free_r+0x1c0>)
  403756:	f027 0301 	bic.w	r3, r7, #1
  40375a:	f1a5 0408 	sub.w	r4, r5, #8
  40375e:	18e2      	adds	r2, r4, r3
  403760:	688e      	ldr	r6, [r1, #8]
  403762:	6850      	ldr	r0, [r2, #4]
  403764:	42b2      	cmp	r2, r6
  403766:	f020 0003 	bic.w	r0, r0, #3
  40376a:	d062      	beq.n	403832 <_free_r+0xf2>
  40376c:	07fe      	lsls	r6, r7, #31
  40376e:	6050      	str	r0, [r2, #4]
  403770:	d40b      	bmi.n	40378a <_free_r+0x4a>
  403772:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403776:	1be4      	subs	r4, r4, r7
  403778:	f101 0e08 	add.w	lr, r1, #8
  40377c:	68a5      	ldr	r5, [r4, #8]
  40377e:	4575      	cmp	r5, lr
  403780:	443b      	add	r3, r7
  403782:	d06f      	beq.n	403864 <_free_r+0x124>
  403784:	68e7      	ldr	r7, [r4, #12]
  403786:	60ef      	str	r7, [r5, #12]
  403788:	60bd      	str	r5, [r7, #8]
  40378a:	1815      	adds	r5, r2, r0
  40378c:	686d      	ldr	r5, [r5, #4]
  40378e:	07ed      	lsls	r5, r5, #31
  403790:	d542      	bpl.n	403818 <_free_r+0xd8>
  403792:	f043 0201 	orr.w	r2, r3, #1
  403796:	6062      	str	r2, [r4, #4]
  403798:	50e3      	str	r3, [r4, r3]
  40379a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40379e:	d218      	bcs.n	4037d2 <_free_r+0x92>
  4037a0:	08db      	lsrs	r3, r3, #3
  4037a2:	1c5a      	adds	r2, r3, #1
  4037a4:	684d      	ldr	r5, [r1, #4]
  4037a6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  4037aa:	60a7      	str	r7, [r4, #8]
  4037ac:	2001      	movs	r0, #1
  4037ae:	109b      	asrs	r3, r3, #2
  4037b0:	fa00 f303 	lsl.w	r3, r0, r3
  4037b4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4037b8:	431d      	orrs	r5, r3
  4037ba:	3808      	subs	r0, #8
  4037bc:	60e0      	str	r0, [r4, #12]
  4037be:	604d      	str	r5, [r1, #4]
  4037c0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4037c4:	60fc      	str	r4, [r7, #12]
  4037c6:	4640      	mov	r0, r8
  4037c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4037cc:	f000 bee0 	b.w	404590 <__malloc_unlock>
  4037d0:	4770      	bx	lr
  4037d2:	0a5a      	lsrs	r2, r3, #9
  4037d4:	2a04      	cmp	r2, #4
  4037d6:	d853      	bhi.n	403880 <_free_r+0x140>
  4037d8:	099a      	lsrs	r2, r3, #6
  4037da:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4037de:	007f      	lsls	r7, r7, #1
  4037e0:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4037e4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4037e8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4037ec:	4944      	ldr	r1, [pc, #272]	; (403900 <_free_r+0x1c0>)
  4037ee:	3808      	subs	r0, #8
  4037f0:	4290      	cmp	r0, r2
  4037f2:	d04d      	beq.n	403890 <_free_r+0x150>
  4037f4:	6851      	ldr	r1, [r2, #4]
  4037f6:	f021 0103 	bic.w	r1, r1, #3
  4037fa:	428b      	cmp	r3, r1
  4037fc:	d202      	bcs.n	403804 <_free_r+0xc4>
  4037fe:	6892      	ldr	r2, [r2, #8]
  403800:	4290      	cmp	r0, r2
  403802:	d1f7      	bne.n	4037f4 <_free_r+0xb4>
  403804:	68d0      	ldr	r0, [r2, #12]
  403806:	60e0      	str	r0, [r4, #12]
  403808:	60a2      	str	r2, [r4, #8]
  40380a:	6084      	str	r4, [r0, #8]
  40380c:	60d4      	str	r4, [r2, #12]
  40380e:	4640      	mov	r0, r8
  403810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403814:	f000 bebc 	b.w	404590 <__malloc_unlock>
  403818:	6895      	ldr	r5, [r2, #8]
  40381a:	4f3a      	ldr	r7, [pc, #232]	; (403904 <_free_r+0x1c4>)
  40381c:	42bd      	cmp	r5, r7
  40381e:	4403      	add	r3, r0
  403820:	d03f      	beq.n	4038a2 <_free_r+0x162>
  403822:	68d0      	ldr	r0, [r2, #12]
  403824:	60e8      	str	r0, [r5, #12]
  403826:	f043 0201 	orr.w	r2, r3, #1
  40382a:	6085      	str	r5, [r0, #8]
  40382c:	6062      	str	r2, [r4, #4]
  40382e:	50e3      	str	r3, [r4, r3]
  403830:	e7b3      	b.n	40379a <_free_r+0x5a>
  403832:	07ff      	lsls	r7, r7, #31
  403834:	4403      	add	r3, r0
  403836:	d407      	bmi.n	403848 <_free_r+0x108>
  403838:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40383c:	1aa4      	subs	r4, r4, r2
  40383e:	4413      	add	r3, r2
  403840:	68a0      	ldr	r0, [r4, #8]
  403842:	68e2      	ldr	r2, [r4, #12]
  403844:	60c2      	str	r2, [r0, #12]
  403846:	6090      	str	r0, [r2, #8]
  403848:	4a2f      	ldr	r2, [pc, #188]	; (403908 <_free_r+0x1c8>)
  40384a:	6812      	ldr	r2, [r2, #0]
  40384c:	f043 0001 	orr.w	r0, r3, #1
  403850:	4293      	cmp	r3, r2
  403852:	6060      	str	r0, [r4, #4]
  403854:	608c      	str	r4, [r1, #8]
  403856:	d3b6      	bcc.n	4037c6 <_free_r+0x86>
  403858:	4b2c      	ldr	r3, [pc, #176]	; (40390c <_free_r+0x1cc>)
  40385a:	4640      	mov	r0, r8
  40385c:	6819      	ldr	r1, [r3, #0]
  40385e:	f7ff ff21 	bl	4036a4 <_malloc_trim_r>
  403862:	e7b0      	b.n	4037c6 <_free_r+0x86>
  403864:	1811      	adds	r1, r2, r0
  403866:	6849      	ldr	r1, [r1, #4]
  403868:	07c9      	lsls	r1, r1, #31
  40386a:	d444      	bmi.n	4038f6 <_free_r+0x1b6>
  40386c:	6891      	ldr	r1, [r2, #8]
  40386e:	68d2      	ldr	r2, [r2, #12]
  403870:	60ca      	str	r2, [r1, #12]
  403872:	4403      	add	r3, r0
  403874:	f043 0001 	orr.w	r0, r3, #1
  403878:	6091      	str	r1, [r2, #8]
  40387a:	6060      	str	r0, [r4, #4]
  40387c:	50e3      	str	r3, [r4, r3]
  40387e:	e7a2      	b.n	4037c6 <_free_r+0x86>
  403880:	2a14      	cmp	r2, #20
  403882:	d817      	bhi.n	4038b4 <_free_r+0x174>
  403884:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403888:	007f      	lsls	r7, r7, #1
  40388a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40388e:	e7a9      	b.n	4037e4 <_free_r+0xa4>
  403890:	10aa      	asrs	r2, r5, #2
  403892:	684b      	ldr	r3, [r1, #4]
  403894:	2501      	movs	r5, #1
  403896:	fa05 f202 	lsl.w	r2, r5, r2
  40389a:	4313      	orrs	r3, r2
  40389c:	604b      	str	r3, [r1, #4]
  40389e:	4602      	mov	r2, r0
  4038a0:	e7b1      	b.n	403806 <_free_r+0xc6>
  4038a2:	f043 0201 	orr.w	r2, r3, #1
  4038a6:	614c      	str	r4, [r1, #20]
  4038a8:	610c      	str	r4, [r1, #16]
  4038aa:	60e5      	str	r5, [r4, #12]
  4038ac:	60a5      	str	r5, [r4, #8]
  4038ae:	6062      	str	r2, [r4, #4]
  4038b0:	50e3      	str	r3, [r4, r3]
  4038b2:	e788      	b.n	4037c6 <_free_r+0x86>
  4038b4:	2a54      	cmp	r2, #84	; 0x54
  4038b6:	d806      	bhi.n	4038c6 <_free_r+0x186>
  4038b8:	0b1a      	lsrs	r2, r3, #12
  4038ba:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4038be:	007f      	lsls	r7, r7, #1
  4038c0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4038c4:	e78e      	b.n	4037e4 <_free_r+0xa4>
  4038c6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4038ca:	d806      	bhi.n	4038da <_free_r+0x19a>
  4038cc:	0bda      	lsrs	r2, r3, #15
  4038ce:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4038d2:	007f      	lsls	r7, r7, #1
  4038d4:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4038d8:	e784      	b.n	4037e4 <_free_r+0xa4>
  4038da:	f240 5054 	movw	r0, #1364	; 0x554
  4038de:	4282      	cmp	r2, r0
  4038e0:	d806      	bhi.n	4038f0 <_free_r+0x1b0>
  4038e2:	0c9a      	lsrs	r2, r3, #18
  4038e4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4038e8:	007f      	lsls	r7, r7, #1
  4038ea:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4038ee:	e779      	b.n	4037e4 <_free_r+0xa4>
  4038f0:	27fe      	movs	r7, #254	; 0xfe
  4038f2:	257e      	movs	r5, #126	; 0x7e
  4038f4:	e776      	b.n	4037e4 <_free_r+0xa4>
  4038f6:	f043 0201 	orr.w	r2, r3, #1
  4038fa:	6062      	str	r2, [r4, #4]
  4038fc:	50e3      	str	r3, [r4, r3]
  4038fe:	e762      	b.n	4037c6 <_free_r+0x86>
  403900:	20000458 	.word	0x20000458
  403904:	20000460 	.word	0x20000460
  403908:	20000860 	.word	0x20000860
  40390c:	20000aa8 	.word	0x20000aa8

00403910 <__sfvwrite_r>:
  403910:	6893      	ldr	r3, [r2, #8]
  403912:	2b00      	cmp	r3, #0
  403914:	d076      	beq.n	403a04 <__sfvwrite_r+0xf4>
  403916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40391a:	898b      	ldrh	r3, [r1, #12]
  40391c:	b085      	sub	sp, #20
  40391e:	460c      	mov	r4, r1
  403920:	0719      	lsls	r1, r3, #28
  403922:	9001      	str	r0, [sp, #4]
  403924:	4616      	mov	r6, r2
  403926:	d529      	bpl.n	40397c <__sfvwrite_r+0x6c>
  403928:	6922      	ldr	r2, [r4, #16]
  40392a:	b33a      	cbz	r2, 40397c <__sfvwrite_r+0x6c>
  40392c:	f003 0802 	and.w	r8, r3, #2
  403930:	fa1f f088 	uxth.w	r0, r8
  403934:	6835      	ldr	r5, [r6, #0]
  403936:	2800      	cmp	r0, #0
  403938:	d02f      	beq.n	40399a <__sfvwrite_r+0x8a>
  40393a:	f04f 0900 	mov.w	r9, #0
  40393e:	4fb4      	ldr	r7, [pc, #720]	; (403c10 <__sfvwrite_r+0x300>)
  403940:	46c8      	mov	r8, r9
  403942:	46b2      	mov	sl, r6
  403944:	45b8      	cmp	r8, r7
  403946:	4643      	mov	r3, r8
  403948:	464a      	mov	r2, r9
  40394a:	bf28      	it	cs
  40394c:	463b      	movcs	r3, r7
  40394e:	9801      	ldr	r0, [sp, #4]
  403950:	f1b8 0f00 	cmp.w	r8, #0
  403954:	d050      	beq.n	4039f8 <__sfvwrite_r+0xe8>
  403956:	69e1      	ldr	r1, [r4, #28]
  403958:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40395a:	47b0      	blx	r6
  40395c:	2800      	cmp	r0, #0
  40395e:	dd71      	ble.n	403a44 <__sfvwrite_r+0x134>
  403960:	f8da 3008 	ldr.w	r3, [sl, #8]
  403964:	1a1b      	subs	r3, r3, r0
  403966:	4481      	add	r9, r0
  403968:	ebc0 0808 	rsb	r8, r0, r8
  40396c:	f8ca 3008 	str.w	r3, [sl, #8]
  403970:	2b00      	cmp	r3, #0
  403972:	d1e7      	bne.n	403944 <__sfvwrite_r+0x34>
  403974:	2000      	movs	r0, #0
  403976:	b005      	add	sp, #20
  403978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40397c:	4621      	mov	r1, r4
  40397e:	9801      	ldr	r0, [sp, #4]
  403980:	f7ff fc68 	bl	403254 <__swsetup_r>
  403984:	2800      	cmp	r0, #0
  403986:	f040 813a 	bne.w	403bfe <__sfvwrite_r+0x2ee>
  40398a:	89a3      	ldrh	r3, [r4, #12]
  40398c:	6835      	ldr	r5, [r6, #0]
  40398e:	f003 0802 	and.w	r8, r3, #2
  403992:	fa1f f088 	uxth.w	r0, r8
  403996:	2800      	cmp	r0, #0
  403998:	d1cf      	bne.n	40393a <__sfvwrite_r+0x2a>
  40399a:	f013 0901 	ands.w	r9, r3, #1
  40399e:	d15b      	bne.n	403a58 <__sfvwrite_r+0x148>
  4039a0:	464f      	mov	r7, r9
  4039a2:	9602      	str	r6, [sp, #8]
  4039a4:	b31f      	cbz	r7, 4039ee <__sfvwrite_r+0xde>
  4039a6:	059a      	lsls	r2, r3, #22
  4039a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4039ac:	d52c      	bpl.n	403a08 <__sfvwrite_r+0xf8>
  4039ae:	4547      	cmp	r7, r8
  4039b0:	46c2      	mov	sl, r8
  4039b2:	f0c0 80a4 	bcc.w	403afe <__sfvwrite_r+0x1ee>
  4039b6:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4039ba:	f040 80b1 	bne.w	403b20 <__sfvwrite_r+0x210>
  4039be:	6820      	ldr	r0, [r4, #0]
  4039c0:	4652      	mov	r2, sl
  4039c2:	4649      	mov	r1, r9
  4039c4:	f000 fd7e 	bl	4044c4 <memmove>
  4039c8:	68a0      	ldr	r0, [r4, #8]
  4039ca:	6823      	ldr	r3, [r4, #0]
  4039cc:	ebc8 0000 	rsb	r0, r8, r0
  4039d0:	4453      	add	r3, sl
  4039d2:	60a0      	str	r0, [r4, #8]
  4039d4:	6023      	str	r3, [r4, #0]
  4039d6:	4638      	mov	r0, r7
  4039d8:	9a02      	ldr	r2, [sp, #8]
  4039da:	6893      	ldr	r3, [r2, #8]
  4039dc:	1a1b      	subs	r3, r3, r0
  4039de:	4481      	add	r9, r0
  4039e0:	1a3f      	subs	r7, r7, r0
  4039e2:	6093      	str	r3, [r2, #8]
  4039e4:	2b00      	cmp	r3, #0
  4039e6:	d0c5      	beq.n	403974 <__sfvwrite_r+0x64>
  4039e8:	89a3      	ldrh	r3, [r4, #12]
  4039ea:	2f00      	cmp	r7, #0
  4039ec:	d1db      	bne.n	4039a6 <__sfvwrite_r+0x96>
  4039ee:	f8d5 9000 	ldr.w	r9, [r5]
  4039f2:	686f      	ldr	r7, [r5, #4]
  4039f4:	3508      	adds	r5, #8
  4039f6:	e7d5      	b.n	4039a4 <__sfvwrite_r+0x94>
  4039f8:	f8d5 9000 	ldr.w	r9, [r5]
  4039fc:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403a00:	3508      	adds	r5, #8
  403a02:	e79f      	b.n	403944 <__sfvwrite_r+0x34>
  403a04:	2000      	movs	r0, #0
  403a06:	4770      	bx	lr
  403a08:	6820      	ldr	r0, [r4, #0]
  403a0a:	6923      	ldr	r3, [r4, #16]
  403a0c:	4298      	cmp	r0, r3
  403a0e:	d803      	bhi.n	403a18 <__sfvwrite_r+0x108>
  403a10:	6961      	ldr	r1, [r4, #20]
  403a12:	428f      	cmp	r7, r1
  403a14:	f080 80b7 	bcs.w	403b86 <__sfvwrite_r+0x276>
  403a18:	45b8      	cmp	r8, r7
  403a1a:	bf28      	it	cs
  403a1c:	46b8      	movcs	r8, r7
  403a1e:	4642      	mov	r2, r8
  403a20:	4649      	mov	r1, r9
  403a22:	f000 fd4f 	bl	4044c4 <memmove>
  403a26:	68a3      	ldr	r3, [r4, #8]
  403a28:	6822      	ldr	r2, [r4, #0]
  403a2a:	ebc8 0303 	rsb	r3, r8, r3
  403a2e:	4442      	add	r2, r8
  403a30:	60a3      	str	r3, [r4, #8]
  403a32:	6022      	str	r2, [r4, #0]
  403a34:	2b00      	cmp	r3, #0
  403a36:	d149      	bne.n	403acc <__sfvwrite_r+0x1bc>
  403a38:	4621      	mov	r1, r4
  403a3a:	9801      	ldr	r0, [sp, #4]
  403a3c:	f7ff fd22 	bl	403484 <_fflush_r>
  403a40:	2800      	cmp	r0, #0
  403a42:	d043      	beq.n	403acc <__sfvwrite_r+0x1bc>
  403a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a4c:	f04f 30ff 	mov.w	r0, #4294967295
  403a50:	81a3      	strh	r3, [r4, #12]
  403a52:	b005      	add	sp, #20
  403a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a58:	4680      	mov	r8, r0
  403a5a:	9002      	str	r0, [sp, #8]
  403a5c:	4682      	mov	sl, r0
  403a5e:	4681      	mov	r9, r0
  403a60:	f1b9 0f00 	cmp.w	r9, #0
  403a64:	d02a      	beq.n	403abc <__sfvwrite_r+0x1ac>
  403a66:	9b02      	ldr	r3, [sp, #8]
  403a68:	2b00      	cmp	r3, #0
  403a6a:	d04c      	beq.n	403b06 <__sfvwrite_r+0x1f6>
  403a6c:	6820      	ldr	r0, [r4, #0]
  403a6e:	6923      	ldr	r3, [r4, #16]
  403a70:	6962      	ldr	r2, [r4, #20]
  403a72:	45c8      	cmp	r8, r9
  403a74:	46c3      	mov	fp, r8
  403a76:	bf28      	it	cs
  403a78:	46cb      	movcs	fp, r9
  403a7a:	4298      	cmp	r0, r3
  403a7c:	465f      	mov	r7, fp
  403a7e:	d904      	bls.n	403a8a <__sfvwrite_r+0x17a>
  403a80:	68a3      	ldr	r3, [r4, #8]
  403a82:	4413      	add	r3, r2
  403a84:	459b      	cmp	fp, r3
  403a86:	f300 8090 	bgt.w	403baa <__sfvwrite_r+0x29a>
  403a8a:	4593      	cmp	fp, r2
  403a8c:	db20      	blt.n	403ad0 <__sfvwrite_r+0x1c0>
  403a8e:	4613      	mov	r3, r2
  403a90:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403a92:	69e1      	ldr	r1, [r4, #28]
  403a94:	9801      	ldr	r0, [sp, #4]
  403a96:	4652      	mov	r2, sl
  403a98:	47b8      	blx	r7
  403a9a:	1e07      	subs	r7, r0, #0
  403a9c:	ddd2      	ble.n	403a44 <__sfvwrite_r+0x134>
  403a9e:	ebb8 0807 	subs.w	r8, r8, r7
  403aa2:	d023      	beq.n	403aec <__sfvwrite_r+0x1dc>
  403aa4:	68b3      	ldr	r3, [r6, #8]
  403aa6:	1bdb      	subs	r3, r3, r7
  403aa8:	44ba      	add	sl, r7
  403aaa:	ebc7 0909 	rsb	r9, r7, r9
  403aae:	60b3      	str	r3, [r6, #8]
  403ab0:	2b00      	cmp	r3, #0
  403ab2:	f43f af5f 	beq.w	403974 <__sfvwrite_r+0x64>
  403ab6:	f1b9 0f00 	cmp.w	r9, #0
  403aba:	d1d4      	bne.n	403a66 <__sfvwrite_r+0x156>
  403abc:	2300      	movs	r3, #0
  403abe:	f8d5 a000 	ldr.w	sl, [r5]
  403ac2:	f8d5 9004 	ldr.w	r9, [r5, #4]
  403ac6:	9302      	str	r3, [sp, #8]
  403ac8:	3508      	adds	r5, #8
  403aca:	e7c9      	b.n	403a60 <__sfvwrite_r+0x150>
  403acc:	4640      	mov	r0, r8
  403ace:	e783      	b.n	4039d8 <__sfvwrite_r+0xc8>
  403ad0:	465a      	mov	r2, fp
  403ad2:	4651      	mov	r1, sl
  403ad4:	f000 fcf6 	bl	4044c4 <memmove>
  403ad8:	68a2      	ldr	r2, [r4, #8]
  403ada:	6823      	ldr	r3, [r4, #0]
  403adc:	ebcb 0202 	rsb	r2, fp, r2
  403ae0:	445b      	add	r3, fp
  403ae2:	ebb8 0807 	subs.w	r8, r8, r7
  403ae6:	60a2      	str	r2, [r4, #8]
  403ae8:	6023      	str	r3, [r4, #0]
  403aea:	d1db      	bne.n	403aa4 <__sfvwrite_r+0x194>
  403aec:	4621      	mov	r1, r4
  403aee:	9801      	ldr	r0, [sp, #4]
  403af0:	f7ff fcc8 	bl	403484 <_fflush_r>
  403af4:	2800      	cmp	r0, #0
  403af6:	d1a5      	bne.n	403a44 <__sfvwrite_r+0x134>
  403af8:	f8cd 8008 	str.w	r8, [sp, #8]
  403afc:	e7d2      	b.n	403aa4 <__sfvwrite_r+0x194>
  403afe:	6820      	ldr	r0, [r4, #0]
  403b00:	46b8      	mov	r8, r7
  403b02:	46ba      	mov	sl, r7
  403b04:	e75c      	b.n	4039c0 <__sfvwrite_r+0xb0>
  403b06:	464a      	mov	r2, r9
  403b08:	210a      	movs	r1, #10
  403b0a:	4650      	mov	r0, sl
  403b0c:	f000 fbf0 	bl	4042f0 <memchr>
  403b10:	2800      	cmp	r0, #0
  403b12:	d06f      	beq.n	403bf4 <__sfvwrite_r+0x2e4>
  403b14:	3001      	adds	r0, #1
  403b16:	2301      	movs	r3, #1
  403b18:	ebca 0800 	rsb	r8, sl, r0
  403b1c:	9302      	str	r3, [sp, #8]
  403b1e:	e7a5      	b.n	403a6c <__sfvwrite_r+0x15c>
  403b20:	6962      	ldr	r2, [r4, #20]
  403b22:	6820      	ldr	r0, [r4, #0]
  403b24:	6921      	ldr	r1, [r4, #16]
  403b26:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403b2a:	ebc1 0a00 	rsb	sl, r1, r0
  403b2e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403b32:	f10a 0001 	add.w	r0, sl, #1
  403b36:	ea4f 0868 	mov.w	r8, r8, asr #1
  403b3a:	4438      	add	r0, r7
  403b3c:	4540      	cmp	r0, r8
  403b3e:	4642      	mov	r2, r8
  403b40:	bf84      	itt	hi
  403b42:	4680      	movhi	r8, r0
  403b44:	4642      	movhi	r2, r8
  403b46:	055b      	lsls	r3, r3, #21
  403b48:	d542      	bpl.n	403bd0 <__sfvwrite_r+0x2c0>
  403b4a:	4611      	mov	r1, r2
  403b4c:	9801      	ldr	r0, [sp, #4]
  403b4e:	f000 f911 	bl	403d74 <_malloc_r>
  403b52:	4683      	mov	fp, r0
  403b54:	2800      	cmp	r0, #0
  403b56:	d055      	beq.n	403c04 <__sfvwrite_r+0x2f4>
  403b58:	4652      	mov	r2, sl
  403b5a:	6921      	ldr	r1, [r4, #16]
  403b5c:	f000 fc18 	bl	404390 <memcpy>
  403b60:	89a3      	ldrh	r3, [r4, #12]
  403b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403b6a:	81a3      	strh	r3, [r4, #12]
  403b6c:	ebca 0308 	rsb	r3, sl, r8
  403b70:	eb0b 000a 	add.w	r0, fp, sl
  403b74:	f8c4 8014 	str.w	r8, [r4, #20]
  403b78:	f8c4 b010 	str.w	fp, [r4, #16]
  403b7c:	6020      	str	r0, [r4, #0]
  403b7e:	60a3      	str	r3, [r4, #8]
  403b80:	46b8      	mov	r8, r7
  403b82:	46ba      	mov	sl, r7
  403b84:	e71c      	b.n	4039c0 <__sfvwrite_r+0xb0>
  403b86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  403b8a:	42bb      	cmp	r3, r7
  403b8c:	bf28      	it	cs
  403b8e:	463b      	movcs	r3, r7
  403b90:	464a      	mov	r2, r9
  403b92:	fb93 f3f1 	sdiv	r3, r3, r1
  403b96:	9801      	ldr	r0, [sp, #4]
  403b98:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403b9a:	fb01 f303 	mul.w	r3, r1, r3
  403b9e:	69e1      	ldr	r1, [r4, #28]
  403ba0:	47b0      	blx	r6
  403ba2:	2800      	cmp	r0, #0
  403ba4:	f73f af18 	bgt.w	4039d8 <__sfvwrite_r+0xc8>
  403ba8:	e74c      	b.n	403a44 <__sfvwrite_r+0x134>
  403baa:	461a      	mov	r2, r3
  403bac:	4651      	mov	r1, sl
  403bae:	9303      	str	r3, [sp, #12]
  403bb0:	f000 fc88 	bl	4044c4 <memmove>
  403bb4:	6822      	ldr	r2, [r4, #0]
  403bb6:	9b03      	ldr	r3, [sp, #12]
  403bb8:	9801      	ldr	r0, [sp, #4]
  403bba:	441a      	add	r2, r3
  403bbc:	6022      	str	r2, [r4, #0]
  403bbe:	4621      	mov	r1, r4
  403bc0:	f7ff fc60 	bl	403484 <_fflush_r>
  403bc4:	9b03      	ldr	r3, [sp, #12]
  403bc6:	2800      	cmp	r0, #0
  403bc8:	f47f af3c 	bne.w	403a44 <__sfvwrite_r+0x134>
  403bcc:	461f      	mov	r7, r3
  403bce:	e766      	b.n	403a9e <__sfvwrite_r+0x18e>
  403bd0:	9801      	ldr	r0, [sp, #4]
  403bd2:	f000 fcdf 	bl	404594 <_realloc_r>
  403bd6:	4683      	mov	fp, r0
  403bd8:	2800      	cmp	r0, #0
  403bda:	d1c7      	bne.n	403b6c <__sfvwrite_r+0x25c>
  403bdc:	9d01      	ldr	r5, [sp, #4]
  403bde:	6921      	ldr	r1, [r4, #16]
  403be0:	4628      	mov	r0, r5
  403be2:	f7ff fdad 	bl	403740 <_free_r>
  403be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403bea:	220c      	movs	r2, #12
  403bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403bf0:	602a      	str	r2, [r5, #0]
  403bf2:	e729      	b.n	403a48 <__sfvwrite_r+0x138>
  403bf4:	2301      	movs	r3, #1
  403bf6:	f109 0801 	add.w	r8, r9, #1
  403bfa:	9302      	str	r3, [sp, #8]
  403bfc:	e736      	b.n	403a6c <__sfvwrite_r+0x15c>
  403bfe:	f04f 30ff 	mov.w	r0, #4294967295
  403c02:	e6b8      	b.n	403976 <__sfvwrite_r+0x66>
  403c04:	9a01      	ldr	r2, [sp, #4]
  403c06:	230c      	movs	r3, #12
  403c08:	6013      	str	r3, [r2, #0]
  403c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c0e:	e71b      	b.n	403a48 <__sfvwrite_r+0x138>
  403c10:	7ffffc00 	.word	0x7ffffc00

00403c14 <_fwalk_reent>:
  403c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403c18:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403c1c:	d01f      	beq.n	403c5e <_fwalk_reent+0x4a>
  403c1e:	4688      	mov	r8, r1
  403c20:	4606      	mov	r6, r0
  403c22:	f04f 0900 	mov.w	r9, #0
  403c26:	687d      	ldr	r5, [r7, #4]
  403c28:	68bc      	ldr	r4, [r7, #8]
  403c2a:	3d01      	subs	r5, #1
  403c2c:	d411      	bmi.n	403c52 <_fwalk_reent+0x3e>
  403c2e:	89a3      	ldrh	r3, [r4, #12]
  403c30:	2b01      	cmp	r3, #1
  403c32:	f105 35ff 	add.w	r5, r5, #4294967295
  403c36:	d908      	bls.n	403c4a <_fwalk_reent+0x36>
  403c38:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403c3c:	3301      	adds	r3, #1
  403c3e:	4621      	mov	r1, r4
  403c40:	4630      	mov	r0, r6
  403c42:	d002      	beq.n	403c4a <_fwalk_reent+0x36>
  403c44:	47c0      	blx	r8
  403c46:	ea49 0900 	orr.w	r9, r9, r0
  403c4a:	1c6b      	adds	r3, r5, #1
  403c4c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403c50:	d1ed      	bne.n	403c2e <_fwalk_reent+0x1a>
  403c52:	683f      	ldr	r7, [r7, #0]
  403c54:	2f00      	cmp	r7, #0
  403c56:	d1e6      	bne.n	403c26 <_fwalk_reent+0x12>
  403c58:	4648      	mov	r0, r9
  403c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403c5e:	46b9      	mov	r9, r7
  403c60:	4648      	mov	r0, r9
  403c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403c66:	bf00      	nop

00403c68 <__locale_charset>:
  403c68:	4800      	ldr	r0, [pc, #0]	; (403c6c <__locale_charset+0x4>)
  403c6a:	4770      	bx	lr
  403c6c:	20000434 	.word	0x20000434

00403c70 <__locale_mb_cur_max>:
  403c70:	4b01      	ldr	r3, [pc, #4]	; (403c78 <__locale_mb_cur_max+0x8>)
  403c72:	6818      	ldr	r0, [r3, #0]
  403c74:	4770      	bx	lr
  403c76:	bf00      	nop
  403c78:	20000454 	.word	0x20000454

00403c7c <__swhatbuf_r>:
  403c7c:	b570      	push	{r4, r5, r6, lr}
  403c7e:	460d      	mov	r5, r1
  403c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403c84:	2900      	cmp	r1, #0
  403c86:	b090      	sub	sp, #64	; 0x40
  403c88:	4614      	mov	r4, r2
  403c8a:	461e      	mov	r6, r3
  403c8c:	db14      	blt.n	403cb8 <__swhatbuf_r+0x3c>
  403c8e:	aa01      	add	r2, sp, #4
  403c90:	f001 f88e 	bl	404db0 <_fstat_r>
  403c94:	2800      	cmp	r0, #0
  403c96:	db0f      	blt.n	403cb8 <__swhatbuf_r+0x3c>
  403c98:	9a02      	ldr	r2, [sp, #8]
  403c9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403c9e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403ca2:	fab2 f282 	clz	r2, r2
  403ca6:	0952      	lsrs	r2, r2, #5
  403ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403cac:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403cb0:	6032      	str	r2, [r6, #0]
  403cb2:	6023      	str	r3, [r4, #0]
  403cb4:	b010      	add	sp, #64	; 0x40
  403cb6:	bd70      	pop	{r4, r5, r6, pc}
  403cb8:	89a8      	ldrh	r0, [r5, #12]
  403cba:	f000 0080 	and.w	r0, r0, #128	; 0x80
  403cbe:	b282      	uxth	r2, r0
  403cc0:	2000      	movs	r0, #0
  403cc2:	6030      	str	r0, [r6, #0]
  403cc4:	b11a      	cbz	r2, 403cce <__swhatbuf_r+0x52>
  403cc6:	2340      	movs	r3, #64	; 0x40
  403cc8:	6023      	str	r3, [r4, #0]
  403cca:	b010      	add	sp, #64	; 0x40
  403ccc:	bd70      	pop	{r4, r5, r6, pc}
  403cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403cd2:	4610      	mov	r0, r2
  403cd4:	6023      	str	r3, [r4, #0]
  403cd6:	b010      	add	sp, #64	; 0x40
  403cd8:	bd70      	pop	{r4, r5, r6, pc}
  403cda:	bf00      	nop

00403cdc <__smakebuf_r>:
  403cdc:	898a      	ldrh	r2, [r1, #12]
  403cde:	0792      	lsls	r2, r2, #30
  403ce0:	460b      	mov	r3, r1
  403ce2:	d506      	bpl.n	403cf2 <__smakebuf_r+0x16>
  403ce4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403ce8:	2101      	movs	r1, #1
  403cea:	601a      	str	r2, [r3, #0]
  403cec:	611a      	str	r2, [r3, #16]
  403cee:	6159      	str	r1, [r3, #20]
  403cf0:	4770      	bx	lr
  403cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
  403cf4:	b083      	sub	sp, #12
  403cf6:	ab01      	add	r3, sp, #4
  403cf8:	466a      	mov	r2, sp
  403cfa:	460c      	mov	r4, r1
  403cfc:	4605      	mov	r5, r0
  403cfe:	f7ff ffbd 	bl	403c7c <__swhatbuf_r>
  403d02:	9900      	ldr	r1, [sp, #0]
  403d04:	4606      	mov	r6, r0
  403d06:	4628      	mov	r0, r5
  403d08:	f000 f834 	bl	403d74 <_malloc_r>
  403d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d10:	b1d0      	cbz	r0, 403d48 <__smakebuf_r+0x6c>
  403d12:	9a01      	ldr	r2, [sp, #4]
  403d14:	4f12      	ldr	r7, [pc, #72]	; (403d60 <__smakebuf_r+0x84>)
  403d16:	9900      	ldr	r1, [sp, #0]
  403d18:	63ef      	str	r7, [r5, #60]	; 0x3c
  403d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403d1e:	81a3      	strh	r3, [r4, #12]
  403d20:	6020      	str	r0, [r4, #0]
  403d22:	6120      	str	r0, [r4, #16]
  403d24:	6161      	str	r1, [r4, #20]
  403d26:	b91a      	cbnz	r2, 403d30 <__smakebuf_r+0x54>
  403d28:	4333      	orrs	r3, r6
  403d2a:	81a3      	strh	r3, [r4, #12]
  403d2c:	b003      	add	sp, #12
  403d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d30:	4628      	mov	r0, r5
  403d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403d36:	f001 f84f 	bl	404dd8 <_isatty_r>
  403d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d3e:	2800      	cmp	r0, #0
  403d40:	d0f2      	beq.n	403d28 <__smakebuf_r+0x4c>
  403d42:	f043 0301 	orr.w	r3, r3, #1
  403d46:	e7ef      	b.n	403d28 <__smakebuf_r+0x4c>
  403d48:	059a      	lsls	r2, r3, #22
  403d4a:	d4ef      	bmi.n	403d2c <__smakebuf_r+0x50>
  403d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403d50:	f043 0302 	orr.w	r3, r3, #2
  403d54:	2101      	movs	r1, #1
  403d56:	81a3      	strh	r3, [r4, #12]
  403d58:	6022      	str	r2, [r4, #0]
  403d5a:	6122      	str	r2, [r4, #16]
  403d5c:	6161      	str	r1, [r4, #20]
  403d5e:	e7e5      	b.n	403d2c <__smakebuf_r+0x50>
  403d60:	004034b1 	.word	0x004034b1

00403d64 <malloc>:
  403d64:	4b02      	ldr	r3, [pc, #8]	; (403d70 <malloc+0xc>)
  403d66:	4601      	mov	r1, r0
  403d68:	6818      	ldr	r0, [r3, #0]
  403d6a:	f000 b803 	b.w	403d74 <_malloc_r>
  403d6e:	bf00      	nop
  403d70:	20000430 	.word	0x20000430

00403d74 <_malloc_r>:
  403d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d78:	f101 050b 	add.w	r5, r1, #11
  403d7c:	2d16      	cmp	r5, #22
  403d7e:	b083      	sub	sp, #12
  403d80:	4606      	mov	r6, r0
  403d82:	f240 809f 	bls.w	403ec4 <_malloc_r+0x150>
  403d86:	f035 0507 	bics.w	r5, r5, #7
  403d8a:	f100 80bf 	bmi.w	403f0c <_malloc_r+0x198>
  403d8e:	42a9      	cmp	r1, r5
  403d90:	f200 80bc 	bhi.w	403f0c <_malloc_r+0x198>
  403d94:	f000 fbfa 	bl	40458c <__malloc_lock>
  403d98:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  403d9c:	f0c0 829c 	bcc.w	4042d8 <_malloc_r+0x564>
  403da0:	0a6b      	lsrs	r3, r5, #9
  403da2:	f000 80ba 	beq.w	403f1a <_malloc_r+0x1a6>
  403da6:	2b04      	cmp	r3, #4
  403da8:	f200 8183 	bhi.w	4040b2 <_malloc_r+0x33e>
  403dac:	09a8      	lsrs	r0, r5, #6
  403dae:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  403db2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403db6:	3038      	adds	r0, #56	; 0x38
  403db8:	4fc4      	ldr	r7, [pc, #784]	; (4040cc <_malloc_r+0x358>)
  403dba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403dbe:	f1a3 0108 	sub.w	r1, r3, #8
  403dc2:	685c      	ldr	r4, [r3, #4]
  403dc4:	42a1      	cmp	r1, r4
  403dc6:	d107      	bne.n	403dd8 <_malloc_r+0x64>
  403dc8:	e0ac      	b.n	403f24 <_malloc_r+0x1b0>
  403dca:	2a00      	cmp	r2, #0
  403dcc:	f280 80ac 	bge.w	403f28 <_malloc_r+0x1b4>
  403dd0:	68e4      	ldr	r4, [r4, #12]
  403dd2:	42a1      	cmp	r1, r4
  403dd4:	f000 80a6 	beq.w	403f24 <_malloc_r+0x1b0>
  403dd8:	6863      	ldr	r3, [r4, #4]
  403dda:	f023 0303 	bic.w	r3, r3, #3
  403dde:	1b5a      	subs	r2, r3, r5
  403de0:	2a0f      	cmp	r2, #15
  403de2:	ddf2      	ble.n	403dca <_malloc_r+0x56>
  403de4:	49b9      	ldr	r1, [pc, #740]	; (4040cc <_malloc_r+0x358>)
  403de6:	693c      	ldr	r4, [r7, #16]
  403de8:	f101 0e08 	add.w	lr, r1, #8
  403dec:	4574      	cmp	r4, lr
  403dee:	f000 81b3 	beq.w	404158 <_malloc_r+0x3e4>
  403df2:	6863      	ldr	r3, [r4, #4]
  403df4:	f023 0303 	bic.w	r3, r3, #3
  403df8:	1b5a      	subs	r2, r3, r5
  403dfa:	2a0f      	cmp	r2, #15
  403dfc:	f300 8199 	bgt.w	404132 <_malloc_r+0x3be>
  403e00:	2a00      	cmp	r2, #0
  403e02:	f8c1 e014 	str.w	lr, [r1, #20]
  403e06:	f8c1 e010 	str.w	lr, [r1, #16]
  403e0a:	f280 809e 	bge.w	403f4a <_malloc_r+0x1d6>
  403e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403e12:	f080 8167 	bcs.w	4040e4 <_malloc_r+0x370>
  403e16:	08db      	lsrs	r3, r3, #3
  403e18:	f103 0c01 	add.w	ip, r3, #1
  403e1c:	2201      	movs	r2, #1
  403e1e:	109b      	asrs	r3, r3, #2
  403e20:	fa02 f303 	lsl.w	r3, r2, r3
  403e24:	684a      	ldr	r2, [r1, #4]
  403e26:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  403e2a:	f8c4 8008 	str.w	r8, [r4, #8]
  403e2e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  403e32:	431a      	orrs	r2, r3
  403e34:	f1a9 0308 	sub.w	r3, r9, #8
  403e38:	60e3      	str	r3, [r4, #12]
  403e3a:	604a      	str	r2, [r1, #4]
  403e3c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  403e40:	f8c8 400c 	str.w	r4, [r8, #12]
  403e44:	1083      	asrs	r3, r0, #2
  403e46:	2401      	movs	r4, #1
  403e48:	409c      	lsls	r4, r3
  403e4a:	4294      	cmp	r4, r2
  403e4c:	f200 808a 	bhi.w	403f64 <_malloc_r+0x1f0>
  403e50:	4214      	tst	r4, r2
  403e52:	d106      	bne.n	403e62 <_malloc_r+0xee>
  403e54:	f020 0003 	bic.w	r0, r0, #3
  403e58:	0064      	lsls	r4, r4, #1
  403e5a:	4214      	tst	r4, r2
  403e5c:	f100 0004 	add.w	r0, r0, #4
  403e60:	d0fa      	beq.n	403e58 <_malloc_r+0xe4>
  403e62:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403e66:	46cc      	mov	ip, r9
  403e68:	4680      	mov	r8, r0
  403e6a:	f8dc 100c 	ldr.w	r1, [ip, #12]
  403e6e:	458c      	cmp	ip, r1
  403e70:	d107      	bne.n	403e82 <_malloc_r+0x10e>
  403e72:	e173      	b.n	40415c <_malloc_r+0x3e8>
  403e74:	2a00      	cmp	r2, #0
  403e76:	f280 8181 	bge.w	40417c <_malloc_r+0x408>
  403e7a:	68c9      	ldr	r1, [r1, #12]
  403e7c:	458c      	cmp	ip, r1
  403e7e:	f000 816d 	beq.w	40415c <_malloc_r+0x3e8>
  403e82:	684b      	ldr	r3, [r1, #4]
  403e84:	f023 0303 	bic.w	r3, r3, #3
  403e88:	1b5a      	subs	r2, r3, r5
  403e8a:	2a0f      	cmp	r2, #15
  403e8c:	ddf2      	ble.n	403e74 <_malloc_r+0x100>
  403e8e:	460c      	mov	r4, r1
  403e90:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403e94:	f854 8f08 	ldr.w	r8, [r4, #8]!
  403e98:	194b      	adds	r3, r1, r5
  403e9a:	f045 0501 	orr.w	r5, r5, #1
  403e9e:	604d      	str	r5, [r1, #4]
  403ea0:	f042 0101 	orr.w	r1, r2, #1
  403ea4:	f8c8 c00c 	str.w	ip, [r8, #12]
  403ea8:	4630      	mov	r0, r6
  403eaa:	f8cc 8008 	str.w	r8, [ip, #8]
  403eae:	617b      	str	r3, [r7, #20]
  403eb0:	613b      	str	r3, [r7, #16]
  403eb2:	f8c3 e00c 	str.w	lr, [r3, #12]
  403eb6:	f8c3 e008 	str.w	lr, [r3, #8]
  403eba:	6059      	str	r1, [r3, #4]
  403ebc:	509a      	str	r2, [r3, r2]
  403ebe:	f000 fb67 	bl	404590 <__malloc_unlock>
  403ec2:	e01f      	b.n	403f04 <_malloc_r+0x190>
  403ec4:	2910      	cmp	r1, #16
  403ec6:	d821      	bhi.n	403f0c <_malloc_r+0x198>
  403ec8:	f000 fb60 	bl	40458c <__malloc_lock>
  403ecc:	2510      	movs	r5, #16
  403ece:	2306      	movs	r3, #6
  403ed0:	2002      	movs	r0, #2
  403ed2:	4f7e      	ldr	r7, [pc, #504]	; (4040cc <_malloc_r+0x358>)
  403ed4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403ed8:	f1a3 0208 	sub.w	r2, r3, #8
  403edc:	685c      	ldr	r4, [r3, #4]
  403ede:	4294      	cmp	r4, r2
  403ee0:	f000 8145 	beq.w	40416e <_malloc_r+0x3fa>
  403ee4:	6863      	ldr	r3, [r4, #4]
  403ee6:	68e1      	ldr	r1, [r4, #12]
  403ee8:	68a5      	ldr	r5, [r4, #8]
  403eea:	f023 0303 	bic.w	r3, r3, #3
  403eee:	4423      	add	r3, r4
  403ef0:	4630      	mov	r0, r6
  403ef2:	685a      	ldr	r2, [r3, #4]
  403ef4:	60e9      	str	r1, [r5, #12]
  403ef6:	f042 0201 	orr.w	r2, r2, #1
  403efa:	608d      	str	r5, [r1, #8]
  403efc:	605a      	str	r2, [r3, #4]
  403efe:	f000 fb47 	bl	404590 <__malloc_unlock>
  403f02:	3408      	adds	r4, #8
  403f04:	4620      	mov	r0, r4
  403f06:	b003      	add	sp, #12
  403f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f0c:	2400      	movs	r4, #0
  403f0e:	230c      	movs	r3, #12
  403f10:	4620      	mov	r0, r4
  403f12:	6033      	str	r3, [r6, #0]
  403f14:	b003      	add	sp, #12
  403f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f1a:	2380      	movs	r3, #128	; 0x80
  403f1c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  403f20:	203f      	movs	r0, #63	; 0x3f
  403f22:	e749      	b.n	403db8 <_malloc_r+0x44>
  403f24:	4670      	mov	r0, lr
  403f26:	e75d      	b.n	403de4 <_malloc_r+0x70>
  403f28:	4423      	add	r3, r4
  403f2a:	68e1      	ldr	r1, [r4, #12]
  403f2c:	685a      	ldr	r2, [r3, #4]
  403f2e:	68a5      	ldr	r5, [r4, #8]
  403f30:	f042 0201 	orr.w	r2, r2, #1
  403f34:	60e9      	str	r1, [r5, #12]
  403f36:	4630      	mov	r0, r6
  403f38:	608d      	str	r5, [r1, #8]
  403f3a:	605a      	str	r2, [r3, #4]
  403f3c:	f000 fb28 	bl	404590 <__malloc_unlock>
  403f40:	3408      	adds	r4, #8
  403f42:	4620      	mov	r0, r4
  403f44:	b003      	add	sp, #12
  403f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f4a:	4423      	add	r3, r4
  403f4c:	4630      	mov	r0, r6
  403f4e:	685a      	ldr	r2, [r3, #4]
  403f50:	f042 0201 	orr.w	r2, r2, #1
  403f54:	605a      	str	r2, [r3, #4]
  403f56:	f000 fb1b 	bl	404590 <__malloc_unlock>
  403f5a:	3408      	adds	r4, #8
  403f5c:	4620      	mov	r0, r4
  403f5e:	b003      	add	sp, #12
  403f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f64:	68bc      	ldr	r4, [r7, #8]
  403f66:	6863      	ldr	r3, [r4, #4]
  403f68:	f023 0803 	bic.w	r8, r3, #3
  403f6c:	45a8      	cmp	r8, r5
  403f6e:	d304      	bcc.n	403f7a <_malloc_r+0x206>
  403f70:	ebc5 0308 	rsb	r3, r5, r8
  403f74:	2b0f      	cmp	r3, #15
  403f76:	f300 808c 	bgt.w	404092 <_malloc_r+0x31e>
  403f7a:	4b55      	ldr	r3, [pc, #340]	; (4040d0 <_malloc_r+0x35c>)
  403f7c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4040e0 <_malloc_r+0x36c>
  403f80:	681a      	ldr	r2, [r3, #0]
  403f82:	f8d9 3000 	ldr.w	r3, [r9]
  403f86:	3301      	adds	r3, #1
  403f88:	442a      	add	r2, r5
  403f8a:	eb04 0a08 	add.w	sl, r4, r8
  403f8e:	f000 8160 	beq.w	404252 <_malloc_r+0x4de>
  403f92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  403f96:	320f      	adds	r2, #15
  403f98:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403f9c:	f022 020f 	bic.w	r2, r2, #15
  403fa0:	4611      	mov	r1, r2
  403fa2:	4630      	mov	r0, r6
  403fa4:	9201      	str	r2, [sp, #4]
  403fa6:	f000 fce5 	bl	404974 <_sbrk_r>
  403faa:	f1b0 3fff 	cmp.w	r0, #4294967295
  403fae:	4683      	mov	fp, r0
  403fb0:	9a01      	ldr	r2, [sp, #4]
  403fb2:	f000 8158 	beq.w	404266 <_malloc_r+0x4f2>
  403fb6:	4582      	cmp	sl, r0
  403fb8:	f200 80fc 	bhi.w	4041b4 <_malloc_r+0x440>
  403fbc:	4b45      	ldr	r3, [pc, #276]	; (4040d4 <_malloc_r+0x360>)
  403fbe:	6819      	ldr	r1, [r3, #0]
  403fc0:	45da      	cmp	sl, fp
  403fc2:	4411      	add	r1, r2
  403fc4:	6019      	str	r1, [r3, #0]
  403fc6:	f000 8153 	beq.w	404270 <_malloc_r+0x4fc>
  403fca:	f8d9 0000 	ldr.w	r0, [r9]
  403fce:	f8df e110 	ldr.w	lr, [pc, #272]	; 4040e0 <_malloc_r+0x36c>
  403fd2:	3001      	adds	r0, #1
  403fd4:	bf1b      	ittet	ne
  403fd6:	ebca 0a0b 	rsbne	sl, sl, fp
  403fda:	4451      	addne	r1, sl
  403fdc:	f8ce b000 	streq.w	fp, [lr]
  403fe0:	6019      	strne	r1, [r3, #0]
  403fe2:	f01b 0107 	ands.w	r1, fp, #7
  403fe6:	f000 8117 	beq.w	404218 <_malloc_r+0x4a4>
  403fea:	f1c1 0008 	rsb	r0, r1, #8
  403fee:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403ff2:	4483      	add	fp, r0
  403ff4:	3108      	adds	r1, #8
  403ff6:	445a      	add	r2, fp
  403ff8:	f3c2 020b 	ubfx	r2, r2, #0, #12
  403ffc:	ebc2 0901 	rsb	r9, r2, r1
  404000:	4649      	mov	r1, r9
  404002:	4630      	mov	r0, r6
  404004:	9301      	str	r3, [sp, #4]
  404006:	f000 fcb5 	bl	404974 <_sbrk_r>
  40400a:	1c43      	adds	r3, r0, #1
  40400c:	9b01      	ldr	r3, [sp, #4]
  40400e:	f000 813f 	beq.w	404290 <_malloc_r+0x51c>
  404012:	ebcb 0200 	rsb	r2, fp, r0
  404016:	444a      	add	r2, r9
  404018:	f042 0201 	orr.w	r2, r2, #1
  40401c:	6819      	ldr	r1, [r3, #0]
  40401e:	f8c7 b008 	str.w	fp, [r7, #8]
  404022:	4449      	add	r1, r9
  404024:	42bc      	cmp	r4, r7
  404026:	f8cb 2004 	str.w	r2, [fp, #4]
  40402a:	6019      	str	r1, [r3, #0]
  40402c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4040d4 <_malloc_r+0x360>
  404030:	d016      	beq.n	404060 <_malloc_r+0x2ec>
  404032:	f1b8 0f0f 	cmp.w	r8, #15
  404036:	f240 80fd 	bls.w	404234 <_malloc_r+0x4c0>
  40403a:	6862      	ldr	r2, [r4, #4]
  40403c:	f1a8 030c 	sub.w	r3, r8, #12
  404040:	f023 0307 	bic.w	r3, r3, #7
  404044:	18e0      	adds	r0, r4, r3
  404046:	f002 0201 	and.w	r2, r2, #1
  40404a:	f04f 0e05 	mov.w	lr, #5
  40404e:	431a      	orrs	r2, r3
  404050:	2b0f      	cmp	r3, #15
  404052:	6062      	str	r2, [r4, #4]
  404054:	f8c0 e004 	str.w	lr, [r0, #4]
  404058:	f8c0 e008 	str.w	lr, [r0, #8]
  40405c:	f200 811c 	bhi.w	404298 <_malloc_r+0x524>
  404060:	4b1d      	ldr	r3, [pc, #116]	; (4040d8 <_malloc_r+0x364>)
  404062:	68bc      	ldr	r4, [r7, #8]
  404064:	681a      	ldr	r2, [r3, #0]
  404066:	4291      	cmp	r1, r2
  404068:	bf88      	it	hi
  40406a:	6019      	strhi	r1, [r3, #0]
  40406c:	4b1b      	ldr	r3, [pc, #108]	; (4040dc <_malloc_r+0x368>)
  40406e:	681a      	ldr	r2, [r3, #0]
  404070:	4291      	cmp	r1, r2
  404072:	6862      	ldr	r2, [r4, #4]
  404074:	bf88      	it	hi
  404076:	6019      	strhi	r1, [r3, #0]
  404078:	f022 0203 	bic.w	r2, r2, #3
  40407c:	4295      	cmp	r5, r2
  40407e:	eba2 0305 	sub.w	r3, r2, r5
  404082:	d801      	bhi.n	404088 <_malloc_r+0x314>
  404084:	2b0f      	cmp	r3, #15
  404086:	dc04      	bgt.n	404092 <_malloc_r+0x31e>
  404088:	4630      	mov	r0, r6
  40408a:	f000 fa81 	bl	404590 <__malloc_unlock>
  40408e:	2400      	movs	r4, #0
  404090:	e738      	b.n	403f04 <_malloc_r+0x190>
  404092:	1962      	adds	r2, r4, r5
  404094:	f043 0301 	orr.w	r3, r3, #1
  404098:	f045 0501 	orr.w	r5, r5, #1
  40409c:	6065      	str	r5, [r4, #4]
  40409e:	4630      	mov	r0, r6
  4040a0:	60ba      	str	r2, [r7, #8]
  4040a2:	6053      	str	r3, [r2, #4]
  4040a4:	f000 fa74 	bl	404590 <__malloc_unlock>
  4040a8:	3408      	adds	r4, #8
  4040aa:	4620      	mov	r0, r4
  4040ac:	b003      	add	sp, #12
  4040ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040b2:	2b14      	cmp	r3, #20
  4040b4:	d971      	bls.n	40419a <_malloc_r+0x426>
  4040b6:	2b54      	cmp	r3, #84	; 0x54
  4040b8:	f200 80a4 	bhi.w	404204 <_malloc_r+0x490>
  4040bc:	0b28      	lsrs	r0, r5, #12
  4040be:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4040c2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4040c6:	306e      	adds	r0, #110	; 0x6e
  4040c8:	e676      	b.n	403db8 <_malloc_r+0x44>
  4040ca:	bf00      	nop
  4040cc:	20000458 	.word	0x20000458
  4040d0:	20000aa8 	.word	0x20000aa8
  4040d4:	20000aac 	.word	0x20000aac
  4040d8:	20000aa4 	.word	0x20000aa4
  4040dc:	20000aa0 	.word	0x20000aa0
  4040e0:	20000864 	.word	0x20000864
  4040e4:	0a5a      	lsrs	r2, r3, #9
  4040e6:	2a04      	cmp	r2, #4
  4040e8:	d95e      	bls.n	4041a8 <_malloc_r+0x434>
  4040ea:	2a14      	cmp	r2, #20
  4040ec:	f200 80b3 	bhi.w	404256 <_malloc_r+0x4e2>
  4040f0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4040f4:	0049      	lsls	r1, r1, #1
  4040f6:	325b      	adds	r2, #91	; 0x5b
  4040f8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4040fc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  404100:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4042e0 <_malloc_r+0x56c>
  404104:	f1ac 0c08 	sub.w	ip, ip, #8
  404108:	458c      	cmp	ip, r1
  40410a:	f000 8088 	beq.w	40421e <_malloc_r+0x4aa>
  40410e:	684a      	ldr	r2, [r1, #4]
  404110:	f022 0203 	bic.w	r2, r2, #3
  404114:	4293      	cmp	r3, r2
  404116:	d202      	bcs.n	40411e <_malloc_r+0x3aa>
  404118:	6889      	ldr	r1, [r1, #8]
  40411a:	458c      	cmp	ip, r1
  40411c:	d1f7      	bne.n	40410e <_malloc_r+0x39a>
  40411e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  404122:	687a      	ldr	r2, [r7, #4]
  404124:	f8c4 c00c 	str.w	ip, [r4, #12]
  404128:	60a1      	str	r1, [r4, #8]
  40412a:	f8cc 4008 	str.w	r4, [ip, #8]
  40412e:	60cc      	str	r4, [r1, #12]
  404130:	e688      	b.n	403e44 <_malloc_r+0xd0>
  404132:	1963      	adds	r3, r4, r5
  404134:	f042 0701 	orr.w	r7, r2, #1
  404138:	f045 0501 	orr.w	r5, r5, #1
  40413c:	6065      	str	r5, [r4, #4]
  40413e:	4630      	mov	r0, r6
  404140:	614b      	str	r3, [r1, #20]
  404142:	610b      	str	r3, [r1, #16]
  404144:	f8c3 e00c 	str.w	lr, [r3, #12]
  404148:	f8c3 e008 	str.w	lr, [r3, #8]
  40414c:	605f      	str	r7, [r3, #4]
  40414e:	509a      	str	r2, [r3, r2]
  404150:	3408      	adds	r4, #8
  404152:	f000 fa1d 	bl	404590 <__malloc_unlock>
  404156:	e6d5      	b.n	403f04 <_malloc_r+0x190>
  404158:	684a      	ldr	r2, [r1, #4]
  40415a:	e673      	b.n	403e44 <_malloc_r+0xd0>
  40415c:	f108 0801 	add.w	r8, r8, #1
  404160:	f018 0f03 	tst.w	r8, #3
  404164:	f10c 0c08 	add.w	ip, ip, #8
  404168:	f47f ae7f 	bne.w	403e6a <_malloc_r+0xf6>
  40416c:	e030      	b.n	4041d0 <_malloc_r+0x45c>
  40416e:	68dc      	ldr	r4, [r3, #12]
  404170:	42a3      	cmp	r3, r4
  404172:	bf08      	it	eq
  404174:	3002      	addeq	r0, #2
  404176:	f43f ae35 	beq.w	403de4 <_malloc_r+0x70>
  40417a:	e6b3      	b.n	403ee4 <_malloc_r+0x170>
  40417c:	440b      	add	r3, r1
  40417e:	460c      	mov	r4, r1
  404180:	685a      	ldr	r2, [r3, #4]
  404182:	68c9      	ldr	r1, [r1, #12]
  404184:	f854 5f08 	ldr.w	r5, [r4, #8]!
  404188:	f042 0201 	orr.w	r2, r2, #1
  40418c:	605a      	str	r2, [r3, #4]
  40418e:	4630      	mov	r0, r6
  404190:	60e9      	str	r1, [r5, #12]
  404192:	608d      	str	r5, [r1, #8]
  404194:	f000 f9fc 	bl	404590 <__malloc_unlock>
  404198:	e6b4      	b.n	403f04 <_malloc_r+0x190>
  40419a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40419e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4041a2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4041a6:	e607      	b.n	403db8 <_malloc_r+0x44>
  4041a8:	099a      	lsrs	r2, r3, #6
  4041aa:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4041ae:	0049      	lsls	r1, r1, #1
  4041b0:	3238      	adds	r2, #56	; 0x38
  4041b2:	e7a1      	b.n	4040f8 <_malloc_r+0x384>
  4041b4:	42bc      	cmp	r4, r7
  4041b6:	4b4a      	ldr	r3, [pc, #296]	; (4042e0 <_malloc_r+0x56c>)
  4041b8:	f43f af00 	beq.w	403fbc <_malloc_r+0x248>
  4041bc:	689c      	ldr	r4, [r3, #8]
  4041be:	6862      	ldr	r2, [r4, #4]
  4041c0:	f022 0203 	bic.w	r2, r2, #3
  4041c4:	e75a      	b.n	40407c <_malloc_r+0x308>
  4041c6:	f859 3908 	ldr.w	r3, [r9], #-8
  4041ca:	4599      	cmp	r9, r3
  4041cc:	f040 8082 	bne.w	4042d4 <_malloc_r+0x560>
  4041d0:	f010 0f03 	tst.w	r0, #3
  4041d4:	f100 30ff 	add.w	r0, r0, #4294967295
  4041d8:	d1f5      	bne.n	4041c6 <_malloc_r+0x452>
  4041da:	687b      	ldr	r3, [r7, #4]
  4041dc:	ea23 0304 	bic.w	r3, r3, r4
  4041e0:	607b      	str	r3, [r7, #4]
  4041e2:	0064      	lsls	r4, r4, #1
  4041e4:	429c      	cmp	r4, r3
  4041e6:	f63f aebd 	bhi.w	403f64 <_malloc_r+0x1f0>
  4041ea:	2c00      	cmp	r4, #0
  4041ec:	f43f aeba 	beq.w	403f64 <_malloc_r+0x1f0>
  4041f0:	421c      	tst	r4, r3
  4041f2:	4640      	mov	r0, r8
  4041f4:	f47f ae35 	bne.w	403e62 <_malloc_r+0xee>
  4041f8:	0064      	lsls	r4, r4, #1
  4041fa:	421c      	tst	r4, r3
  4041fc:	f100 0004 	add.w	r0, r0, #4
  404200:	d0fa      	beq.n	4041f8 <_malloc_r+0x484>
  404202:	e62e      	b.n	403e62 <_malloc_r+0xee>
  404204:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404208:	d818      	bhi.n	40423c <_malloc_r+0x4c8>
  40420a:	0be8      	lsrs	r0, r5, #15
  40420c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  404210:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404214:	3077      	adds	r0, #119	; 0x77
  404216:	e5cf      	b.n	403db8 <_malloc_r+0x44>
  404218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40421c:	e6eb      	b.n	403ff6 <_malloc_r+0x282>
  40421e:	2101      	movs	r1, #1
  404220:	f8d8 3004 	ldr.w	r3, [r8, #4]
  404224:	1092      	asrs	r2, r2, #2
  404226:	fa01 f202 	lsl.w	r2, r1, r2
  40422a:	431a      	orrs	r2, r3
  40422c:	f8c8 2004 	str.w	r2, [r8, #4]
  404230:	4661      	mov	r1, ip
  404232:	e777      	b.n	404124 <_malloc_r+0x3b0>
  404234:	2301      	movs	r3, #1
  404236:	f8cb 3004 	str.w	r3, [fp, #4]
  40423a:	e725      	b.n	404088 <_malloc_r+0x314>
  40423c:	f240 5254 	movw	r2, #1364	; 0x554
  404240:	4293      	cmp	r3, r2
  404242:	d820      	bhi.n	404286 <_malloc_r+0x512>
  404244:	0ca8      	lsrs	r0, r5, #18
  404246:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40424a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40424e:	307c      	adds	r0, #124	; 0x7c
  404250:	e5b2      	b.n	403db8 <_malloc_r+0x44>
  404252:	3210      	adds	r2, #16
  404254:	e6a4      	b.n	403fa0 <_malloc_r+0x22c>
  404256:	2a54      	cmp	r2, #84	; 0x54
  404258:	d826      	bhi.n	4042a8 <_malloc_r+0x534>
  40425a:	0b1a      	lsrs	r2, r3, #12
  40425c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404260:	0049      	lsls	r1, r1, #1
  404262:	326e      	adds	r2, #110	; 0x6e
  404264:	e748      	b.n	4040f8 <_malloc_r+0x384>
  404266:	68bc      	ldr	r4, [r7, #8]
  404268:	6862      	ldr	r2, [r4, #4]
  40426a:	f022 0203 	bic.w	r2, r2, #3
  40426e:	e705      	b.n	40407c <_malloc_r+0x308>
  404270:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404274:	2800      	cmp	r0, #0
  404276:	f47f aea8 	bne.w	403fca <_malloc_r+0x256>
  40427a:	4442      	add	r2, r8
  40427c:	68bb      	ldr	r3, [r7, #8]
  40427e:	f042 0201 	orr.w	r2, r2, #1
  404282:	605a      	str	r2, [r3, #4]
  404284:	e6ec      	b.n	404060 <_malloc_r+0x2ec>
  404286:	23fe      	movs	r3, #254	; 0xfe
  404288:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40428c:	207e      	movs	r0, #126	; 0x7e
  40428e:	e593      	b.n	403db8 <_malloc_r+0x44>
  404290:	2201      	movs	r2, #1
  404292:	f04f 0900 	mov.w	r9, #0
  404296:	e6c1      	b.n	40401c <_malloc_r+0x2a8>
  404298:	f104 0108 	add.w	r1, r4, #8
  40429c:	4630      	mov	r0, r6
  40429e:	f7ff fa4f 	bl	403740 <_free_r>
  4042a2:	f8d9 1000 	ldr.w	r1, [r9]
  4042a6:	e6db      	b.n	404060 <_malloc_r+0x2ec>
  4042a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4042ac:	d805      	bhi.n	4042ba <_malloc_r+0x546>
  4042ae:	0bda      	lsrs	r2, r3, #15
  4042b0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4042b4:	0049      	lsls	r1, r1, #1
  4042b6:	3277      	adds	r2, #119	; 0x77
  4042b8:	e71e      	b.n	4040f8 <_malloc_r+0x384>
  4042ba:	f240 5154 	movw	r1, #1364	; 0x554
  4042be:	428a      	cmp	r2, r1
  4042c0:	d805      	bhi.n	4042ce <_malloc_r+0x55a>
  4042c2:	0c9a      	lsrs	r2, r3, #18
  4042c4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4042c8:	0049      	lsls	r1, r1, #1
  4042ca:	327c      	adds	r2, #124	; 0x7c
  4042cc:	e714      	b.n	4040f8 <_malloc_r+0x384>
  4042ce:	21fe      	movs	r1, #254	; 0xfe
  4042d0:	227e      	movs	r2, #126	; 0x7e
  4042d2:	e711      	b.n	4040f8 <_malloc_r+0x384>
  4042d4:	687b      	ldr	r3, [r7, #4]
  4042d6:	e784      	b.n	4041e2 <_malloc_r+0x46e>
  4042d8:	08e8      	lsrs	r0, r5, #3
  4042da:	1c43      	adds	r3, r0, #1
  4042dc:	005b      	lsls	r3, r3, #1
  4042de:	e5f8      	b.n	403ed2 <_malloc_r+0x15e>
  4042e0:	20000458 	.word	0x20000458
	...

004042f0 <memchr>:
  4042f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4042f4:	2a10      	cmp	r2, #16
  4042f6:	db2b      	blt.n	404350 <memchr+0x60>
  4042f8:	f010 0f07 	tst.w	r0, #7
  4042fc:	d008      	beq.n	404310 <memchr+0x20>
  4042fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  404302:	3a01      	subs	r2, #1
  404304:	428b      	cmp	r3, r1
  404306:	d02d      	beq.n	404364 <memchr+0x74>
  404308:	f010 0f07 	tst.w	r0, #7
  40430c:	b342      	cbz	r2, 404360 <memchr+0x70>
  40430e:	d1f6      	bne.n	4042fe <memchr+0xe>
  404310:	b4f0      	push	{r4, r5, r6, r7}
  404312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40431a:	f022 0407 	bic.w	r4, r2, #7
  40431e:	f07f 0700 	mvns.w	r7, #0
  404322:	2300      	movs	r3, #0
  404324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404328:	3c08      	subs	r4, #8
  40432a:	ea85 0501 	eor.w	r5, r5, r1
  40432e:	ea86 0601 	eor.w	r6, r6, r1
  404332:	fa85 f547 	uadd8	r5, r5, r7
  404336:	faa3 f587 	sel	r5, r3, r7
  40433a:	fa86 f647 	uadd8	r6, r6, r7
  40433e:	faa5 f687 	sel	r6, r5, r7
  404342:	b98e      	cbnz	r6, 404368 <memchr+0x78>
  404344:	d1ee      	bne.n	404324 <memchr+0x34>
  404346:	bcf0      	pop	{r4, r5, r6, r7}
  404348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40434c:	f002 0207 	and.w	r2, r2, #7
  404350:	b132      	cbz	r2, 404360 <memchr+0x70>
  404352:	f810 3b01 	ldrb.w	r3, [r0], #1
  404356:	3a01      	subs	r2, #1
  404358:	ea83 0301 	eor.w	r3, r3, r1
  40435c:	b113      	cbz	r3, 404364 <memchr+0x74>
  40435e:	d1f8      	bne.n	404352 <memchr+0x62>
  404360:	2000      	movs	r0, #0
  404362:	4770      	bx	lr
  404364:	3801      	subs	r0, #1
  404366:	4770      	bx	lr
  404368:	2d00      	cmp	r5, #0
  40436a:	bf06      	itte	eq
  40436c:	4635      	moveq	r5, r6
  40436e:	3803      	subeq	r0, #3
  404370:	3807      	subne	r0, #7
  404372:	f015 0f01 	tst.w	r5, #1
  404376:	d107      	bne.n	404388 <memchr+0x98>
  404378:	3001      	adds	r0, #1
  40437a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40437e:	bf02      	ittt	eq
  404380:	3001      	addeq	r0, #1
  404382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404386:	3001      	addeq	r0, #1
  404388:	bcf0      	pop	{r4, r5, r6, r7}
  40438a:	3801      	subs	r0, #1
  40438c:	4770      	bx	lr
  40438e:	bf00      	nop

00404390 <memcpy>:
  404390:	4684      	mov	ip, r0
  404392:	ea41 0300 	orr.w	r3, r1, r0
  404396:	f013 0303 	ands.w	r3, r3, #3
  40439a:	d16d      	bne.n	404478 <memcpy+0xe8>
  40439c:	3a40      	subs	r2, #64	; 0x40
  40439e:	d341      	bcc.n	404424 <memcpy+0x94>
  4043a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043a4:	f840 3b04 	str.w	r3, [r0], #4
  4043a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043ac:	f840 3b04 	str.w	r3, [r0], #4
  4043b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043b4:	f840 3b04 	str.w	r3, [r0], #4
  4043b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043bc:	f840 3b04 	str.w	r3, [r0], #4
  4043c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043c4:	f840 3b04 	str.w	r3, [r0], #4
  4043c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043cc:	f840 3b04 	str.w	r3, [r0], #4
  4043d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043d4:	f840 3b04 	str.w	r3, [r0], #4
  4043d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043dc:	f840 3b04 	str.w	r3, [r0], #4
  4043e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043e4:	f840 3b04 	str.w	r3, [r0], #4
  4043e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043ec:	f840 3b04 	str.w	r3, [r0], #4
  4043f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043f4:	f840 3b04 	str.w	r3, [r0], #4
  4043f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043fc:	f840 3b04 	str.w	r3, [r0], #4
  404400:	f851 3b04 	ldr.w	r3, [r1], #4
  404404:	f840 3b04 	str.w	r3, [r0], #4
  404408:	f851 3b04 	ldr.w	r3, [r1], #4
  40440c:	f840 3b04 	str.w	r3, [r0], #4
  404410:	f851 3b04 	ldr.w	r3, [r1], #4
  404414:	f840 3b04 	str.w	r3, [r0], #4
  404418:	f851 3b04 	ldr.w	r3, [r1], #4
  40441c:	f840 3b04 	str.w	r3, [r0], #4
  404420:	3a40      	subs	r2, #64	; 0x40
  404422:	d2bd      	bcs.n	4043a0 <memcpy+0x10>
  404424:	3230      	adds	r2, #48	; 0x30
  404426:	d311      	bcc.n	40444c <memcpy+0xbc>
  404428:	f851 3b04 	ldr.w	r3, [r1], #4
  40442c:	f840 3b04 	str.w	r3, [r0], #4
  404430:	f851 3b04 	ldr.w	r3, [r1], #4
  404434:	f840 3b04 	str.w	r3, [r0], #4
  404438:	f851 3b04 	ldr.w	r3, [r1], #4
  40443c:	f840 3b04 	str.w	r3, [r0], #4
  404440:	f851 3b04 	ldr.w	r3, [r1], #4
  404444:	f840 3b04 	str.w	r3, [r0], #4
  404448:	3a10      	subs	r2, #16
  40444a:	d2ed      	bcs.n	404428 <memcpy+0x98>
  40444c:	320c      	adds	r2, #12
  40444e:	d305      	bcc.n	40445c <memcpy+0xcc>
  404450:	f851 3b04 	ldr.w	r3, [r1], #4
  404454:	f840 3b04 	str.w	r3, [r0], #4
  404458:	3a04      	subs	r2, #4
  40445a:	d2f9      	bcs.n	404450 <memcpy+0xc0>
  40445c:	3204      	adds	r2, #4
  40445e:	d008      	beq.n	404472 <memcpy+0xe2>
  404460:	07d2      	lsls	r2, r2, #31
  404462:	bf1c      	itt	ne
  404464:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404468:	f800 3b01 	strbne.w	r3, [r0], #1
  40446c:	d301      	bcc.n	404472 <memcpy+0xe2>
  40446e:	880b      	ldrh	r3, [r1, #0]
  404470:	8003      	strh	r3, [r0, #0]
  404472:	4660      	mov	r0, ip
  404474:	4770      	bx	lr
  404476:	bf00      	nop
  404478:	2a08      	cmp	r2, #8
  40447a:	d313      	bcc.n	4044a4 <memcpy+0x114>
  40447c:	078b      	lsls	r3, r1, #30
  40447e:	d08d      	beq.n	40439c <memcpy+0xc>
  404480:	f010 0303 	ands.w	r3, r0, #3
  404484:	d08a      	beq.n	40439c <memcpy+0xc>
  404486:	f1c3 0304 	rsb	r3, r3, #4
  40448a:	1ad2      	subs	r2, r2, r3
  40448c:	07db      	lsls	r3, r3, #31
  40448e:	bf1c      	itt	ne
  404490:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404494:	f800 3b01 	strbne.w	r3, [r0], #1
  404498:	d380      	bcc.n	40439c <memcpy+0xc>
  40449a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40449e:	f820 3b02 	strh.w	r3, [r0], #2
  4044a2:	e77b      	b.n	40439c <memcpy+0xc>
  4044a4:	3a04      	subs	r2, #4
  4044a6:	d3d9      	bcc.n	40445c <memcpy+0xcc>
  4044a8:	3a01      	subs	r2, #1
  4044aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4044ae:	f800 3b01 	strb.w	r3, [r0], #1
  4044b2:	d2f9      	bcs.n	4044a8 <memcpy+0x118>
  4044b4:	780b      	ldrb	r3, [r1, #0]
  4044b6:	7003      	strb	r3, [r0, #0]
  4044b8:	784b      	ldrb	r3, [r1, #1]
  4044ba:	7043      	strb	r3, [r0, #1]
  4044bc:	788b      	ldrb	r3, [r1, #2]
  4044be:	7083      	strb	r3, [r0, #2]
  4044c0:	4660      	mov	r0, ip
  4044c2:	4770      	bx	lr

004044c4 <memmove>:
  4044c4:	4288      	cmp	r0, r1
  4044c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4044c8:	d90d      	bls.n	4044e6 <memmove+0x22>
  4044ca:	188b      	adds	r3, r1, r2
  4044cc:	4298      	cmp	r0, r3
  4044ce:	d20a      	bcs.n	4044e6 <memmove+0x22>
  4044d0:	1881      	adds	r1, r0, r2
  4044d2:	2a00      	cmp	r2, #0
  4044d4:	d051      	beq.n	40457a <memmove+0xb6>
  4044d6:	1a9a      	subs	r2, r3, r2
  4044d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4044dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4044e0:	4293      	cmp	r3, r2
  4044e2:	d1f9      	bne.n	4044d8 <memmove+0x14>
  4044e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044e6:	2a0f      	cmp	r2, #15
  4044e8:	d948      	bls.n	40457c <memmove+0xb8>
  4044ea:	ea41 0300 	orr.w	r3, r1, r0
  4044ee:	079b      	lsls	r3, r3, #30
  4044f0:	d146      	bne.n	404580 <memmove+0xbc>
  4044f2:	f100 0410 	add.w	r4, r0, #16
  4044f6:	f101 0310 	add.w	r3, r1, #16
  4044fa:	4615      	mov	r5, r2
  4044fc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404500:	f844 6c10 	str.w	r6, [r4, #-16]
  404504:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404508:	f844 6c0c 	str.w	r6, [r4, #-12]
  40450c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404510:	f844 6c08 	str.w	r6, [r4, #-8]
  404514:	3d10      	subs	r5, #16
  404516:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40451a:	f844 6c04 	str.w	r6, [r4, #-4]
  40451e:	2d0f      	cmp	r5, #15
  404520:	f103 0310 	add.w	r3, r3, #16
  404524:	f104 0410 	add.w	r4, r4, #16
  404528:	d8e8      	bhi.n	4044fc <memmove+0x38>
  40452a:	f1a2 0310 	sub.w	r3, r2, #16
  40452e:	f023 030f 	bic.w	r3, r3, #15
  404532:	f002 0e0f 	and.w	lr, r2, #15
  404536:	3310      	adds	r3, #16
  404538:	f1be 0f03 	cmp.w	lr, #3
  40453c:	4419      	add	r1, r3
  40453e:	4403      	add	r3, r0
  404540:	d921      	bls.n	404586 <memmove+0xc2>
  404542:	1f1e      	subs	r6, r3, #4
  404544:	460d      	mov	r5, r1
  404546:	4674      	mov	r4, lr
  404548:	3c04      	subs	r4, #4
  40454a:	f855 7b04 	ldr.w	r7, [r5], #4
  40454e:	f846 7f04 	str.w	r7, [r6, #4]!
  404552:	2c03      	cmp	r4, #3
  404554:	d8f8      	bhi.n	404548 <memmove+0x84>
  404556:	f1ae 0404 	sub.w	r4, lr, #4
  40455a:	f024 0403 	bic.w	r4, r4, #3
  40455e:	3404      	adds	r4, #4
  404560:	4423      	add	r3, r4
  404562:	4421      	add	r1, r4
  404564:	f002 0203 	and.w	r2, r2, #3
  404568:	b162      	cbz	r2, 404584 <memmove+0xc0>
  40456a:	3b01      	subs	r3, #1
  40456c:	440a      	add	r2, r1
  40456e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404572:	f803 4f01 	strb.w	r4, [r3, #1]!
  404576:	428a      	cmp	r2, r1
  404578:	d1f9      	bne.n	40456e <memmove+0xaa>
  40457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40457c:	4603      	mov	r3, r0
  40457e:	e7f3      	b.n	404568 <memmove+0xa4>
  404580:	4603      	mov	r3, r0
  404582:	e7f2      	b.n	40456a <memmove+0xa6>
  404584:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404586:	4672      	mov	r2, lr
  404588:	e7ee      	b.n	404568 <memmove+0xa4>
  40458a:	bf00      	nop

0040458c <__malloc_lock>:
  40458c:	4770      	bx	lr
  40458e:	bf00      	nop

00404590 <__malloc_unlock>:
  404590:	4770      	bx	lr
  404592:	bf00      	nop

00404594 <_realloc_r>:
  404594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404598:	4617      	mov	r7, r2
  40459a:	b083      	sub	sp, #12
  40459c:	2900      	cmp	r1, #0
  40459e:	f000 80c1 	beq.w	404724 <_realloc_r+0x190>
  4045a2:	460e      	mov	r6, r1
  4045a4:	4681      	mov	r9, r0
  4045a6:	f107 050b 	add.w	r5, r7, #11
  4045aa:	f7ff ffef 	bl	40458c <__malloc_lock>
  4045ae:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4045b2:	2d16      	cmp	r5, #22
  4045b4:	f02e 0403 	bic.w	r4, lr, #3
  4045b8:	f1a6 0808 	sub.w	r8, r6, #8
  4045bc:	d840      	bhi.n	404640 <_realloc_r+0xac>
  4045be:	2210      	movs	r2, #16
  4045c0:	4615      	mov	r5, r2
  4045c2:	42af      	cmp	r7, r5
  4045c4:	d841      	bhi.n	40464a <_realloc_r+0xb6>
  4045c6:	4294      	cmp	r4, r2
  4045c8:	da75      	bge.n	4046b6 <_realloc_r+0x122>
  4045ca:	4bc9      	ldr	r3, [pc, #804]	; (4048f0 <_realloc_r+0x35c>)
  4045cc:	6899      	ldr	r1, [r3, #8]
  4045ce:	eb08 0004 	add.w	r0, r8, r4
  4045d2:	4288      	cmp	r0, r1
  4045d4:	6841      	ldr	r1, [r0, #4]
  4045d6:	f000 80d9 	beq.w	40478c <_realloc_r+0x1f8>
  4045da:	f021 0301 	bic.w	r3, r1, #1
  4045de:	4403      	add	r3, r0
  4045e0:	685b      	ldr	r3, [r3, #4]
  4045e2:	07db      	lsls	r3, r3, #31
  4045e4:	d57d      	bpl.n	4046e2 <_realloc_r+0x14e>
  4045e6:	f01e 0f01 	tst.w	lr, #1
  4045ea:	d035      	beq.n	404658 <_realloc_r+0xc4>
  4045ec:	4639      	mov	r1, r7
  4045ee:	4648      	mov	r0, r9
  4045f0:	f7ff fbc0 	bl	403d74 <_malloc_r>
  4045f4:	4607      	mov	r7, r0
  4045f6:	b1e0      	cbz	r0, 404632 <_realloc_r+0x9e>
  4045f8:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4045fc:	f023 0301 	bic.w	r3, r3, #1
  404600:	4443      	add	r3, r8
  404602:	f1a0 0208 	sub.w	r2, r0, #8
  404606:	429a      	cmp	r2, r3
  404608:	f000 8144 	beq.w	404894 <_realloc_r+0x300>
  40460c:	1f22      	subs	r2, r4, #4
  40460e:	2a24      	cmp	r2, #36	; 0x24
  404610:	f200 8131 	bhi.w	404876 <_realloc_r+0x2e2>
  404614:	2a13      	cmp	r2, #19
  404616:	f200 8104 	bhi.w	404822 <_realloc_r+0x28e>
  40461a:	4603      	mov	r3, r0
  40461c:	4632      	mov	r2, r6
  40461e:	6811      	ldr	r1, [r2, #0]
  404620:	6019      	str	r1, [r3, #0]
  404622:	6851      	ldr	r1, [r2, #4]
  404624:	6059      	str	r1, [r3, #4]
  404626:	6892      	ldr	r2, [r2, #8]
  404628:	609a      	str	r2, [r3, #8]
  40462a:	4631      	mov	r1, r6
  40462c:	4648      	mov	r0, r9
  40462e:	f7ff f887 	bl	403740 <_free_r>
  404632:	4648      	mov	r0, r9
  404634:	f7ff ffac 	bl	404590 <__malloc_unlock>
  404638:	4638      	mov	r0, r7
  40463a:	b003      	add	sp, #12
  40463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404640:	f025 0507 	bic.w	r5, r5, #7
  404644:	2d00      	cmp	r5, #0
  404646:	462a      	mov	r2, r5
  404648:	dabb      	bge.n	4045c2 <_realloc_r+0x2e>
  40464a:	230c      	movs	r3, #12
  40464c:	2000      	movs	r0, #0
  40464e:	f8c9 3000 	str.w	r3, [r9]
  404652:	b003      	add	sp, #12
  404654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404658:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40465c:	ebc3 0a08 	rsb	sl, r3, r8
  404660:	f8da 3004 	ldr.w	r3, [sl, #4]
  404664:	f023 0c03 	bic.w	ip, r3, #3
  404668:	eb04 030c 	add.w	r3, r4, ip
  40466c:	4293      	cmp	r3, r2
  40466e:	dbbd      	blt.n	4045ec <_realloc_r+0x58>
  404670:	4657      	mov	r7, sl
  404672:	f8da 100c 	ldr.w	r1, [sl, #12]
  404676:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40467a:	1f22      	subs	r2, r4, #4
  40467c:	2a24      	cmp	r2, #36	; 0x24
  40467e:	60c1      	str	r1, [r0, #12]
  404680:	6088      	str	r0, [r1, #8]
  404682:	f200 8117 	bhi.w	4048b4 <_realloc_r+0x320>
  404686:	2a13      	cmp	r2, #19
  404688:	f240 8112 	bls.w	4048b0 <_realloc_r+0x31c>
  40468c:	6831      	ldr	r1, [r6, #0]
  40468e:	f8ca 1008 	str.w	r1, [sl, #8]
  404692:	6871      	ldr	r1, [r6, #4]
  404694:	f8ca 100c 	str.w	r1, [sl, #12]
  404698:	2a1b      	cmp	r2, #27
  40469a:	f200 812b 	bhi.w	4048f4 <_realloc_r+0x360>
  40469e:	3608      	adds	r6, #8
  4046a0:	f10a 0210 	add.w	r2, sl, #16
  4046a4:	6831      	ldr	r1, [r6, #0]
  4046a6:	6011      	str	r1, [r2, #0]
  4046a8:	6871      	ldr	r1, [r6, #4]
  4046aa:	6051      	str	r1, [r2, #4]
  4046ac:	68b1      	ldr	r1, [r6, #8]
  4046ae:	6091      	str	r1, [r2, #8]
  4046b0:	463e      	mov	r6, r7
  4046b2:	461c      	mov	r4, r3
  4046b4:	46d0      	mov	r8, sl
  4046b6:	1b63      	subs	r3, r4, r5
  4046b8:	2b0f      	cmp	r3, #15
  4046ba:	d81d      	bhi.n	4046f8 <_realloc_r+0x164>
  4046bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4046c0:	f003 0301 	and.w	r3, r3, #1
  4046c4:	4323      	orrs	r3, r4
  4046c6:	4444      	add	r4, r8
  4046c8:	f8c8 3004 	str.w	r3, [r8, #4]
  4046cc:	6863      	ldr	r3, [r4, #4]
  4046ce:	f043 0301 	orr.w	r3, r3, #1
  4046d2:	6063      	str	r3, [r4, #4]
  4046d4:	4648      	mov	r0, r9
  4046d6:	f7ff ff5b 	bl	404590 <__malloc_unlock>
  4046da:	4630      	mov	r0, r6
  4046dc:	b003      	add	sp, #12
  4046de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046e2:	f021 0103 	bic.w	r1, r1, #3
  4046e6:	4421      	add	r1, r4
  4046e8:	4291      	cmp	r1, r2
  4046ea:	db21      	blt.n	404730 <_realloc_r+0x19c>
  4046ec:	68c3      	ldr	r3, [r0, #12]
  4046ee:	6882      	ldr	r2, [r0, #8]
  4046f0:	460c      	mov	r4, r1
  4046f2:	60d3      	str	r3, [r2, #12]
  4046f4:	609a      	str	r2, [r3, #8]
  4046f6:	e7de      	b.n	4046b6 <_realloc_r+0x122>
  4046f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4046fc:	eb08 0105 	add.w	r1, r8, r5
  404700:	f002 0201 	and.w	r2, r2, #1
  404704:	4315      	orrs	r5, r2
  404706:	f043 0201 	orr.w	r2, r3, #1
  40470a:	440b      	add	r3, r1
  40470c:	f8c8 5004 	str.w	r5, [r8, #4]
  404710:	604a      	str	r2, [r1, #4]
  404712:	685a      	ldr	r2, [r3, #4]
  404714:	f042 0201 	orr.w	r2, r2, #1
  404718:	3108      	adds	r1, #8
  40471a:	605a      	str	r2, [r3, #4]
  40471c:	4648      	mov	r0, r9
  40471e:	f7ff f80f 	bl	403740 <_free_r>
  404722:	e7d7      	b.n	4046d4 <_realloc_r+0x140>
  404724:	4611      	mov	r1, r2
  404726:	b003      	add	sp, #12
  404728:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40472c:	f7ff bb22 	b.w	403d74 <_malloc_r>
  404730:	f01e 0f01 	tst.w	lr, #1
  404734:	f47f af5a 	bne.w	4045ec <_realloc_r+0x58>
  404738:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40473c:	ebc3 0a08 	rsb	sl, r3, r8
  404740:	f8da 3004 	ldr.w	r3, [sl, #4]
  404744:	f023 0c03 	bic.w	ip, r3, #3
  404748:	eb01 0e0c 	add.w	lr, r1, ip
  40474c:	4596      	cmp	lr, r2
  40474e:	db8b      	blt.n	404668 <_realloc_r+0xd4>
  404750:	68c3      	ldr	r3, [r0, #12]
  404752:	6882      	ldr	r2, [r0, #8]
  404754:	4657      	mov	r7, sl
  404756:	60d3      	str	r3, [r2, #12]
  404758:	609a      	str	r2, [r3, #8]
  40475a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40475e:	f8da 300c 	ldr.w	r3, [sl, #12]
  404762:	60cb      	str	r3, [r1, #12]
  404764:	1f22      	subs	r2, r4, #4
  404766:	2a24      	cmp	r2, #36	; 0x24
  404768:	6099      	str	r1, [r3, #8]
  40476a:	f200 8099 	bhi.w	4048a0 <_realloc_r+0x30c>
  40476e:	2a13      	cmp	r2, #19
  404770:	d962      	bls.n	404838 <_realloc_r+0x2a4>
  404772:	6833      	ldr	r3, [r6, #0]
  404774:	f8ca 3008 	str.w	r3, [sl, #8]
  404778:	6873      	ldr	r3, [r6, #4]
  40477a:	f8ca 300c 	str.w	r3, [sl, #12]
  40477e:	2a1b      	cmp	r2, #27
  404780:	f200 80a0 	bhi.w	4048c4 <_realloc_r+0x330>
  404784:	3608      	adds	r6, #8
  404786:	f10a 0310 	add.w	r3, sl, #16
  40478a:	e056      	b.n	40483a <_realloc_r+0x2a6>
  40478c:	f021 0b03 	bic.w	fp, r1, #3
  404790:	44a3      	add	fp, r4
  404792:	f105 0010 	add.w	r0, r5, #16
  404796:	4583      	cmp	fp, r0
  404798:	da59      	bge.n	40484e <_realloc_r+0x2ba>
  40479a:	f01e 0f01 	tst.w	lr, #1
  40479e:	f47f af25 	bne.w	4045ec <_realloc_r+0x58>
  4047a2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4047a6:	ebc1 0a08 	rsb	sl, r1, r8
  4047aa:	f8da 1004 	ldr.w	r1, [sl, #4]
  4047ae:	f021 0c03 	bic.w	ip, r1, #3
  4047b2:	44e3      	add	fp, ip
  4047b4:	4558      	cmp	r0, fp
  4047b6:	f73f af57 	bgt.w	404668 <_realloc_r+0xd4>
  4047ba:	4657      	mov	r7, sl
  4047bc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4047c0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4047c4:	1f22      	subs	r2, r4, #4
  4047c6:	2a24      	cmp	r2, #36	; 0x24
  4047c8:	60c1      	str	r1, [r0, #12]
  4047ca:	6088      	str	r0, [r1, #8]
  4047cc:	f200 80b4 	bhi.w	404938 <_realloc_r+0x3a4>
  4047d0:	2a13      	cmp	r2, #19
  4047d2:	f240 80a5 	bls.w	404920 <_realloc_r+0x38c>
  4047d6:	6831      	ldr	r1, [r6, #0]
  4047d8:	f8ca 1008 	str.w	r1, [sl, #8]
  4047dc:	6871      	ldr	r1, [r6, #4]
  4047de:	f8ca 100c 	str.w	r1, [sl, #12]
  4047e2:	2a1b      	cmp	r2, #27
  4047e4:	f200 80af 	bhi.w	404946 <_realloc_r+0x3b2>
  4047e8:	3608      	adds	r6, #8
  4047ea:	f10a 0210 	add.w	r2, sl, #16
  4047ee:	6831      	ldr	r1, [r6, #0]
  4047f0:	6011      	str	r1, [r2, #0]
  4047f2:	6871      	ldr	r1, [r6, #4]
  4047f4:	6051      	str	r1, [r2, #4]
  4047f6:	68b1      	ldr	r1, [r6, #8]
  4047f8:	6091      	str	r1, [r2, #8]
  4047fa:	eb0a 0105 	add.w	r1, sl, r5
  4047fe:	ebc5 020b 	rsb	r2, r5, fp
  404802:	f042 0201 	orr.w	r2, r2, #1
  404806:	6099      	str	r1, [r3, #8]
  404808:	604a      	str	r2, [r1, #4]
  40480a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40480e:	f003 0301 	and.w	r3, r3, #1
  404812:	431d      	orrs	r5, r3
  404814:	4648      	mov	r0, r9
  404816:	f8ca 5004 	str.w	r5, [sl, #4]
  40481a:	f7ff feb9 	bl	404590 <__malloc_unlock>
  40481e:	4638      	mov	r0, r7
  404820:	e75c      	b.n	4046dc <_realloc_r+0x148>
  404822:	6833      	ldr	r3, [r6, #0]
  404824:	6003      	str	r3, [r0, #0]
  404826:	6873      	ldr	r3, [r6, #4]
  404828:	6043      	str	r3, [r0, #4]
  40482a:	2a1b      	cmp	r2, #27
  40482c:	d827      	bhi.n	40487e <_realloc_r+0x2ea>
  40482e:	f100 0308 	add.w	r3, r0, #8
  404832:	f106 0208 	add.w	r2, r6, #8
  404836:	e6f2      	b.n	40461e <_realloc_r+0x8a>
  404838:	463b      	mov	r3, r7
  40483a:	6832      	ldr	r2, [r6, #0]
  40483c:	601a      	str	r2, [r3, #0]
  40483e:	6872      	ldr	r2, [r6, #4]
  404840:	605a      	str	r2, [r3, #4]
  404842:	68b2      	ldr	r2, [r6, #8]
  404844:	609a      	str	r2, [r3, #8]
  404846:	463e      	mov	r6, r7
  404848:	4674      	mov	r4, lr
  40484a:	46d0      	mov	r8, sl
  40484c:	e733      	b.n	4046b6 <_realloc_r+0x122>
  40484e:	eb08 0105 	add.w	r1, r8, r5
  404852:	ebc5 0b0b 	rsb	fp, r5, fp
  404856:	f04b 0201 	orr.w	r2, fp, #1
  40485a:	6099      	str	r1, [r3, #8]
  40485c:	604a      	str	r2, [r1, #4]
  40485e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  404862:	f003 0301 	and.w	r3, r3, #1
  404866:	431d      	orrs	r5, r3
  404868:	4648      	mov	r0, r9
  40486a:	f846 5c04 	str.w	r5, [r6, #-4]
  40486e:	f7ff fe8f 	bl	404590 <__malloc_unlock>
  404872:	4630      	mov	r0, r6
  404874:	e732      	b.n	4046dc <_realloc_r+0x148>
  404876:	4631      	mov	r1, r6
  404878:	f7ff fe24 	bl	4044c4 <memmove>
  40487c:	e6d5      	b.n	40462a <_realloc_r+0x96>
  40487e:	68b3      	ldr	r3, [r6, #8]
  404880:	6083      	str	r3, [r0, #8]
  404882:	68f3      	ldr	r3, [r6, #12]
  404884:	60c3      	str	r3, [r0, #12]
  404886:	2a24      	cmp	r2, #36	; 0x24
  404888:	d028      	beq.n	4048dc <_realloc_r+0x348>
  40488a:	f100 0310 	add.w	r3, r0, #16
  40488e:	f106 0210 	add.w	r2, r6, #16
  404892:	e6c4      	b.n	40461e <_realloc_r+0x8a>
  404894:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404898:	f023 0303 	bic.w	r3, r3, #3
  40489c:	441c      	add	r4, r3
  40489e:	e70a      	b.n	4046b6 <_realloc_r+0x122>
  4048a0:	4631      	mov	r1, r6
  4048a2:	4638      	mov	r0, r7
  4048a4:	4674      	mov	r4, lr
  4048a6:	46d0      	mov	r8, sl
  4048a8:	f7ff fe0c 	bl	4044c4 <memmove>
  4048ac:	463e      	mov	r6, r7
  4048ae:	e702      	b.n	4046b6 <_realloc_r+0x122>
  4048b0:	463a      	mov	r2, r7
  4048b2:	e6f7      	b.n	4046a4 <_realloc_r+0x110>
  4048b4:	4631      	mov	r1, r6
  4048b6:	4638      	mov	r0, r7
  4048b8:	461c      	mov	r4, r3
  4048ba:	46d0      	mov	r8, sl
  4048bc:	f7ff fe02 	bl	4044c4 <memmove>
  4048c0:	463e      	mov	r6, r7
  4048c2:	e6f8      	b.n	4046b6 <_realloc_r+0x122>
  4048c4:	68b3      	ldr	r3, [r6, #8]
  4048c6:	f8ca 3010 	str.w	r3, [sl, #16]
  4048ca:	68f3      	ldr	r3, [r6, #12]
  4048cc:	f8ca 3014 	str.w	r3, [sl, #20]
  4048d0:	2a24      	cmp	r2, #36	; 0x24
  4048d2:	d01b      	beq.n	40490c <_realloc_r+0x378>
  4048d4:	3610      	adds	r6, #16
  4048d6:	f10a 0318 	add.w	r3, sl, #24
  4048da:	e7ae      	b.n	40483a <_realloc_r+0x2a6>
  4048dc:	6933      	ldr	r3, [r6, #16]
  4048de:	6103      	str	r3, [r0, #16]
  4048e0:	6973      	ldr	r3, [r6, #20]
  4048e2:	6143      	str	r3, [r0, #20]
  4048e4:	f106 0218 	add.w	r2, r6, #24
  4048e8:	f100 0318 	add.w	r3, r0, #24
  4048ec:	e697      	b.n	40461e <_realloc_r+0x8a>
  4048ee:	bf00      	nop
  4048f0:	20000458 	.word	0x20000458
  4048f4:	68b1      	ldr	r1, [r6, #8]
  4048f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4048fa:	68f1      	ldr	r1, [r6, #12]
  4048fc:	f8ca 1014 	str.w	r1, [sl, #20]
  404900:	2a24      	cmp	r2, #36	; 0x24
  404902:	d00f      	beq.n	404924 <_realloc_r+0x390>
  404904:	3610      	adds	r6, #16
  404906:	f10a 0218 	add.w	r2, sl, #24
  40490a:	e6cb      	b.n	4046a4 <_realloc_r+0x110>
  40490c:	6933      	ldr	r3, [r6, #16]
  40490e:	f8ca 3018 	str.w	r3, [sl, #24]
  404912:	6973      	ldr	r3, [r6, #20]
  404914:	f8ca 301c 	str.w	r3, [sl, #28]
  404918:	3618      	adds	r6, #24
  40491a:	f10a 0320 	add.w	r3, sl, #32
  40491e:	e78c      	b.n	40483a <_realloc_r+0x2a6>
  404920:	463a      	mov	r2, r7
  404922:	e764      	b.n	4047ee <_realloc_r+0x25a>
  404924:	6932      	ldr	r2, [r6, #16]
  404926:	f8ca 2018 	str.w	r2, [sl, #24]
  40492a:	6972      	ldr	r2, [r6, #20]
  40492c:	f8ca 201c 	str.w	r2, [sl, #28]
  404930:	3618      	adds	r6, #24
  404932:	f10a 0220 	add.w	r2, sl, #32
  404936:	e6b5      	b.n	4046a4 <_realloc_r+0x110>
  404938:	4631      	mov	r1, r6
  40493a:	4638      	mov	r0, r7
  40493c:	9301      	str	r3, [sp, #4]
  40493e:	f7ff fdc1 	bl	4044c4 <memmove>
  404942:	9b01      	ldr	r3, [sp, #4]
  404944:	e759      	b.n	4047fa <_realloc_r+0x266>
  404946:	68b1      	ldr	r1, [r6, #8]
  404948:	f8ca 1010 	str.w	r1, [sl, #16]
  40494c:	68f1      	ldr	r1, [r6, #12]
  40494e:	f8ca 1014 	str.w	r1, [sl, #20]
  404952:	2a24      	cmp	r2, #36	; 0x24
  404954:	d003      	beq.n	40495e <_realloc_r+0x3ca>
  404956:	3610      	adds	r6, #16
  404958:	f10a 0218 	add.w	r2, sl, #24
  40495c:	e747      	b.n	4047ee <_realloc_r+0x25a>
  40495e:	6932      	ldr	r2, [r6, #16]
  404960:	f8ca 2018 	str.w	r2, [sl, #24]
  404964:	6972      	ldr	r2, [r6, #20]
  404966:	f8ca 201c 	str.w	r2, [sl, #28]
  40496a:	3618      	adds	r6, #24
  40496c:	f10a 0220 	add.w	r2, sl, #32
  404970:	e73d      	b.n	4047ee <_realloc_r+0x25a>
  404972:	bf00      	nop

00404974 <_sbrk_r>:
  404974:	b538      	push	{r3, r4, r5, lr}
  404976:	4c07      	ldr	r4, [pc, #28]	; (404994 <_sbrk_r+0x20>)
  404978:	2300      	movs	r3, #0
  40497a:	4605      	mov	r5, r0
  40497c:	4608      	mov	r0, r1
  40497e:	6023      	str	r3, [r4, #0]
  404980:	f7fd f85a 	bl	401a38 <_sbrk>
  404984:	1c43      	adds	r3, r0, #1
  404986:	d000      	beq.n	40498a <_sbrk_r+0x16>
  404988:	bd38      	pop	{r3, r4, r5, pc}
  40498a:	6823      	ldr	r3, [r4, #0]
  40498c:	2b00      	cmp	r3, #0
  40498e:	d0fb      	beq.n	404988 <_sbrk_r+0x14>
  404990:	602b      	str	r3, [r5, #0]
  404992:	bd38      	pop	{r3, r4, r5, pc}
  404994:	20000af8 	.word	0x20000af8

00404998 <__sread>:
  404998:	b510      	push	{r4, lr}
  40499a:	460c      	mov	r4, r1
  40499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4049a0:	f000 fa42 	bl	404e28 <_read_r>
  4049a4:	2800      	cmp	r0, #0
  4049a6:	db03      	blt.n	4049b0 <__sread+0x18>
  4049a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4049aa:	4403      	add	r3, r0
  4049ac:	6523      	str	r3, [r4, #80]	; 0x50
  4049ae:	bd10      	pop	{r4, pc}
  4049b0:	89a3      	ldrh	r3, [r4, #12]
  4049b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4049b6:	81a3      	strh	r3, [r4, #12]
  4049b8:	bd10      	pop	{r4, pc}
  4049ba:	bf00      	nop

004049bc <__swrite>:
  4049bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4049c0:	4616      	mov	r6, r2
  4049c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4049c6:	461f      	mov	r7, r3
  4049c8:	05d3      	lsls	r3, r2, #23
  4049ca:	460c      	mov	r4, r1
  4049cc:	4605      	mov	r5, r0
  4049ce:	d507      	bpl.n	4049e0 <__swrite+0x24>
  4049d0:	2200      	movs	r2, #0
  4049d2:	2302      	movs	r3, #2
  4049d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4049d8:	f000 fa10 	bl	404dfc <_lseek_r>
  4049dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4049e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4049e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4049e8:	81a2      	strh	r2, [r4, #12]
  4049ea:	463b      	mov	r3, r7
  4049ec:	4632      	mov	r2, r6
  4049ee:	4628      	mov	r0, r5
  4049f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4049f4:	f000 b920 	b.w	404c38 <_write_r>

004049f8 <__sseek>:
  4049f8:	b510      	push	{r4, lr}
  4049fa:	460c      	mov	r4, r1
  4049fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a00:	f000 f9fc 	bl	404dfc <_lseek_r>
  404a04:	89a3      	ldrh	r3, [r4, #12]
  404a06:	1c42      	adds	r2, r0, #1
  404a08:	bf0e      	itee	eq
  404a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404a12:	6520      	strne	r0, [r4, #80]	; 0x50
  404a14:	81a3      	strh	r3, [r4, #12]
  404a16:	bd10      	pop	{r4, pc}

00404a18 <__sclose>:
  404a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a1c:	f000 b974 	b.w	404d08 <_close_r>
	...

00404a40 <strlen>:
  404a40:	f890 f000 	pld	[r0]
  404a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404a48:	f020 0107 	bic.w	r1, r0, #7
  404a4c:	f06f 0c00 	mvn.w	ip, #0
  404a50:	f010 0407 	ands.w	r4, r0, #7
  404a54:	f891 f020 	pld	[r1, #32]
  404a58:	f040 8049 	bne.w	404aee <strlen+0xae>
  404a5c:	f04f 0400 	mov.w	r4, #0
  404a60:	f06f 0007 	mvn.w	r0, #7
  404a64:	e9d1 2300 	ldrd	r2, r3, [r1]
  404a68:	f891 f040 	pld	[r1, #64]	; 0x40
  404a6c:	f100 0008 	add.w	r0, r0, #8
  404a70:	fa82 f24c 	uadd8	r2, r2, ip
  404a74:	faa4 f28c 	sel	r2, r4, ip
  404a78:	fa83 f34c 	uadd8	r3, r3, ip
  404a7c:	faa2 f38c 	sel	r3, r2, ip
  404a80:	bb4b      	cbnz	r3, 404ad6 <strlen+0x96>
  404a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404a86:	fa82 f24c 	uadd8	r2, r2, ip
  404a8a:	f100 0008 	add.w	r0, r0, #8
  404a8e:	faa4 f28c 	sel	r2, r4, ip
  404a92:	fa83 f34c 	uadd8	r3, r3, ip
  404a96:	faa2 f38c 	sel	r3, r2, ip
  404a9a:	b9e3      	cbnz	r3, 404ad6 <strlen+0x96>
  404a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404aa0:	fa82 f24c 	uadd8	r2, r2, ip
  404aa4:	f100 0008 	add.w	r0, r0, #8
  404aa8:	faa4 f28c 	sel	r2, r4, ip
  404aac:	fa83 f34c 	uadd8	r3, r3, ip
  404ab0:	faa2 f38c 	sel	r3, r2, ip
  404ab4:	b97b      	cbnz	r3, 404ad6 <strlen+0x96>
  404ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404aba:	f101 0120 	add.w	r1, r1, #32
  404abe:	fa82 f24c 	uadd8	r2, r2, ip
  404ac2:	f100 0008 	add.w	r0, r0, #8
  404ac6:	faa4 f28c 	sel	r2, r4, ip
  404aca:	fa83 f34c 	uadd8	r3, r3, ip
  404ace:	faa2 f38c 	sel	r3, r2, ip
  404ad2:	2b00      	cmp	r3, #0
  404ad4:	d0c6      	beq.n	404a64 <strlen+0x24>
  404ad6:	2a00      	cmp	r2, #0
  404ad8:	bf04      	itt	eq
  404ada:	3004      	addeq	r0, #4
  404adc:	461a      	moveq	r2, r3
  404ade:	ba12      	rev	r2, r2
  404ae0:	fab2 f282 	clz	r2, r2
  404ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404aec:	4770      	bx	lr
  404aee:	e9d1 2300 	ldrd	r2, r3, [r1]
  404af2:	f004 0503 	and.w	r5, r4, #3
  404af6:	f1c4 0000 	rsb	r0, r4, #0
  404afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404afe:	f014 0f04 	tst.w	r4, #4
  404b02:	f891 f040 	pld	[r1, #64]	; 0x40
  404b06:	fa0c f505 	lsl.w	r5, ip, r5
  404b0a:	ea62 0205 	orn	r2, r2, r5
  404b0e:	bf1c      	itt	ne
  404b10:	ea63 0305 	ornne	r3, r3, r5
  404b14:	4662      	movne	r2, ip
  404b16:	f04f 0400 	mov.w	r4, #0
  404b1a:	e7a9      	b.n	404a70 <strlen+0x30>

00404b1c <__swbuf_r>:
  404b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404b1e:	460e      	mov	r6, r1
  404b20:	4614      	mov	r4, r2
  404b22:	4607      	mov	r7, r0
  404b24:	b110      	cbz	r0, 404b2c <__swbuf_r+0x10>
  404b26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404b28:	2b00      	cmp	r3, #0
  404b2a:	d04a      	beq.n	404bc2 <__swbuf_r+0xa6>
  404b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404b30:	69a3      	ldr	r3, [r4, #24]
  404b32:	60a3      	str	r3, [r4, #8]
  404b34:	b291      	uxth	r1, r2
  404b36:	0708      	lsls	r0, r1, #28
  404b38:	d538      	bpl.n	404bac <__swbuf_r+0x90>
  404b3a:	6923      	ldr	r3, [r4, #16]
  404b3c:	2b00      	cmp	r3, #0
  404b3e:	d035      	beq.n	404bac <__swbuf_r+0x90>
  404b40:	0489      	lsls	r1, r1, #18
  404b42:	b2f5      	uxtb	r5, r6
  404b44:	d515      	bpl.n	404b72 <__swbuf_r+0x56>
  404b46:	6822      	ldr	r2, [r4, #0]
  404b48:	6961      	ldr	r1, [r4, #20]
  404b4a:	1ad3      	subs	r3, r2, r3
  404b4c:	428b      	cmp	r3, r1
  404b4e:	da1c      	bge.n	404b8a <__swbuf_r+0x6e>
  404b50:	3301      	adds	r3, #1
  404b52:	68a1      	ldr	r1, [r4, #8]
  404b54:	1c50      	adds	r0, r2, #1
  404b56:	3901      	subs	r1, #1
  404b58:	60a1      	str	r1, [r4, #8]
  404b5a:	6020      	str	r0, [r4, #0]
  404b5c:	7016      	strb	r6, [r2, #0]
  404b5e:	6962      	ldr	r2, [r4, #20]
  404b60:	429a      	cmp	r2, r3
  404b62:	d01a      	beq.n	404b9a <__swbuf_r+0x7e>
  404b64:	89a3      	ldrh	r3, [r4, #12]
  404b66:	07db      	lsls	r3, r3, #31
  404b68:	d501      	bpl.n	404b6e <__swbuf_r+0x52>
  404b6a:	2d0a      	cmp	r5, #10
  404b6c:	d015      	beq.n	404b9a <__swbuf_r+0x7e>
  404b6e:	4628      	mov	r0, r5
  404b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b72:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404b78:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404b7c:	81a2      	strh	r2, [r4, #12]
  404b7e:	6822      	ldr	r2, [r4, #0]
  404b80:	6661      	str	r1, [r4, #100]	; 0x64
  404b82:	6961      	ldr	r1, [r4, #20]
  404b84:	1ad3      	subs	r3, r2, r3
  404b86:	428b      	cmp	r3, r1
  404b88:	dbe2      	blt.n	404b50 <__swbuf_r+0x34>
  404b8a:	4621      	mov	r1, r4
  404b8c:	4638      	mov	r0, r7
  404b8e:	f7fe fc79 	bl	403484 <_fflush_r>
  404b92:	b940      	cbnz	r0, 404ba6 <__swbuf_r+0x8a>
  404b94:	6822      	ldr	r2, [r4, #0]
  404b96:	2301      	movs	r3, #1
  404b98:	e7db      	b.n	404b52 <__swbuf_r+0x36>
  404b9a:	4621      	mov	r1, r4
  404b9c:	4638      	mov	r0, r7
  404b9e:	f7fe fc71 	bl	403484 <_fflush_r>
  404ba2:	2800      	cmp	r0, #0
  404ba4:	d0e3      	beq.n	404b6e <__swbuf_r+0x52>
  404ba6:	f04f 30ff 	mov.w	r0, #4294967295
  404baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404bac:	4621      	mov	r1, r4
  404bae:	4638      	mov	r0, r7
  404bb0:	f7fe fb50 	bl	403254 <__swsetup_r>
  404bb4:	2800      	cmp	r0, #0
  404bb6:	d1f6      	bne.n	404ba6 <__swbuf_r+0x8a>
  404bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404bbc:	6923      	ldr	r3, [r4, #16]
  404bbe:	b291      	uxth	r1, r2
  404bc0:	e7be      	b.n	404b40 <__swbuf_r+0x24>
  404bc2:	f7fe fcf3 	bl	4035ac <__sinit>
  404bc6:	e7b1      	b.n	404b2c <__swbuf_r+0x10>

00404bc8 <_wcrtomb_r>:
  404bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404bcc:	4605      	mov	r5, r0
  404bce:	b086      	sub	sp, #24
  404bd0:	461e      	mov	r6, r3
  404bd2:	460c      	mov	r4, r1
  404bd4:	b1a1      	cbz	r1, 404c00 <_wcrtomb_r+0x38>
  404bd6:	4b10      	ldr	r3, [pc, #64]	; (404c18 <_wcrtomb_r+0x50>)
  404bd8:	4617      	mov	r7, r2
  404bda:	f8d3 8000 	ldr.w	r8, [r3]
  404bde:	f7ff f843 	bl	403c68 <__locale_charset>
  404be2:	9600      	str	r6, [sp, #0]
  404be4:	4603      	mov	r3, r0
  404be6:	463a      	mov	r2, r7
  404be8:	4621      	mov	r1, r4
  404bea:	4628      	mov	r0, r5
  404bec:	47c0      	blx	r8
  404bee:	1c43      	adds	r3, r0, #1
  404bf0:	d103      	bne.n	404bfa <_wcrtomb_r+0x32>
  404bf2:	2200      	movs	r2, #0
  404bf4:	238a      	movs	r3, #138	; 0x8a
  404bf6:	6032      	str	r2, [r6, #0]
  404bf8:	602b      	str	r3, [r5, #0]
  404bfa:	b006      	add	sp, #24
  404bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c00:	4b05      	ldr	r3, [pc, #20]	; (404c18 <_wcrtomb_r+0x50>)
  404c02:	681f      	ldr	r7, [r3, #0]
  404c04:	f7ff f830 	bl	403c68 <__locale_charset>
  404c08:	9600      	str	r6, [sp, #0]
  404c0a:	4603      	mov	r3, r0
  404c0c:	4622      	mov	r2, r4
  404c0e:	a903      	add	r1, sp, #12
  404c10:	4628      	mov	r0, r5
  404c12:	47b8      	blx	r7
  404c14:	e7eb      	b.n	404bee <_wcrtomb_r+0x26>
  404c16:	bf00      	nop
  404c18:	20000868 	.word	0x20000868

00404c1c <__ascii_wctomb>:
  404c1c:	b121      	cbz	r1, 404c28 <__ascii_wctomb+0xc>
  404c1e:	2aff      	cmp	r2, #255	; 0xff
  404c20:	d804      	bhi.n	404c2c <__ascii_wctomb+0x10>
  404c22:	700a      	strb	r2, [r1, #0]
  404c24:	2001      	movs	r0, #1
  404c26:	4770      	bx	lr
  404c28:	4608      	mov	r0, r1
  404c2a:	4770      	bx	lr
  404c2c:	238a      	movs	r3, #138	; 0x8a
  404c2e:	6003      	str	r3, [r0, #0]
  404c30:	f04f 30ff 	mov.w	r0, #4294967295
  404c34:	4770      	bx	lr
  404c36:	bf00      	nop

00404c38 <_write_r>:
  404c38:	b570      	push	{r4, r5, r6, lr}
  404c3a:	460d      	mov	r5, r1
  404c3c:	4c08      	ldr	r4, [pc, #32]	; (404c60 <_write_r+0x28>)
  404c3e:	4611      	mov	r1, r2
  404c40:	4606      	mov	r6, r0
  404c42:	461a      	mov	r2, r3
  404c44:	4628      	mov	r0, r5
  404c46:	2300      	movs	r3, #0
  404c48:	6023      	str	r3, [r4, #0]
  404c4a:	f7fb fc67 	bl	40051c <_write>
  404c4e:	1c43      	adds	r3, r0, #1
  404c50:	d000      	beq.n	404c54 <_write_r+0x1c>
  404c52:	bd70      	pop	{r4, r5, r6, pc}
  404c54:	6823      	ldr	r3, [r4, #0]
  404c56:	2b00      	cmp	r3, #0
  404c58:	d0fb      	beq.n	404c52 <_write_r+0x1a>
  404c5a:	6033      	str	r3, [r6, #0]
  404c5c:	bd70      	pop	{r4, r5, r6, pc}
  404c5e:	bf00      	nop
  404c60:	20000af8 	.word	0x20000af8

00404c64 <__register_exitproc>:
  404c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404c68:	4c25      	ldr	r4, [pc, #148]	; (404d00 <__register_exitproc+0x9c>)
  404c6a:	6825      	ldr	r5, [r4, #0]
  404c6c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404c70:	4606      	mov	r6, r0
  404c72:	4688      	mov	r8, r1
  404c74:	4692      	mov	sl, r2
  404c76:	4699      	mov	r9, r3
  404c78:	b3c4      	cbz	r4, 404cec <__register_exitproc+0x88>
  404c7a:	6860      	ldr	r0, [r4, #4]
  404c7c:	281f      	cmp	r0, #31
  404c7e:	dc17      	bgt.n	404cb0 <__register_exitproc+0x4c>
  404c80:	1c43      	adds	r3, r0, #1
  404c82:	b176      	cbz	r6, 404ca2 <__register_exitproc+0x3e>
  404c84:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  404c88:	2201      	movs	r2, #1
  404c8a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  404c8e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  404c92:	4082      	lsls	r2, r0
  404c94:	4311      	orrs	r1, r2
  404c96:	2e02      	cmp	r6, #2
  404c98:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  404c9c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  404ca0:	d01e      	beq.n	404ce0 <__register_exitproc+0x7c>
  404ca2:	3002      	adds	r0, #2
  404ca4:	6063      	str	r3, [r4, #4]
  404ca6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  404caa:	2000      	movs	r0, #0
  404cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404cb0:	4b14      	ldr	r3, [pc, #80]	; (404d04 <__register_exitproc+0xa0>)
  404cb2:	b303      	cbz	r3, 404cf6 <__register_exitproc+0x92>
  404cb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404cb8:	f7ff f854 	bl	403d64 <malloc>
  404cbc:	4604      	mov	r4, r0
  404cbe:	b1d0      	cbz	r0, 404cf6 <__register_exitproc+0x92>
  404cc0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404cc4:	2700      	movs	r7, #0
  404cc6:	e880 0088 	stmia.w	r0, {r3, r7}
  404cca:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404cce:	4638      	mov	r0, r7
  404cd0:	2301      	movs	r3, #1
  404cd2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  404cd6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  404cda:	2e00      	cmp	r6, #0
  404cdc:	d0e1      	beq.n	404ca2 <__register_exitproc+0x3e>
  404cde:	e7d1      	b.n	404c84 <__register_exitproc+0x20>
  404ce0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404ce4:	430a      	orrs	r2, r1
  404ce6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  404cea:	e7da      	b.n	404ca2 <__register_exitproc+0x3e>
  404cec:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404cf0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404cf4:	e7c1      	b.n	404c7a <__register_exitproc+0x16>
  404cf6:	f04f 30ff 	mov.w	r0, #4294967295
  404cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404cfe:	bf00      	nop
  404d00:	004051a8 	.word	0x004051a8
  404d04:	00403d65 	.word	0x00403d65

00404d08 <_close_r>:
  404d08:	b538      	push	{r3, r4, r5, lr}
  404d0a:	4c07      	ldr	r4, [pc, #28]	; (404d28 <_close_r+0x20>)
  404d0c:	2300      	movs	r3, #0
  404d0e:	4605      	mov	r5, r0
  404d10:	4608      	mov	r0, r1
  404d12:	6023      	str	r3, [r4, #0]
  404d14:	f7fc febc 	bl	401a90 <_close>
  404d18:	1c43      	adds	r3, r0, #1
  404d1a:	d000      	beq.n	404d1e <_close_r+0x16>
  404d1c:	bd38      	pop	{r3, r4, r5, pc}
  404d1e:	6823      	ldr	r3, [r4, #0]
  404d20:	2b00      	cmp	r3, #0
  404d22:	d0fb      	beq.n	404d1c <_close_r+0x14>
  404d24:	602b      	str	r3, [r5, #0]
  404d26:	bd38      	pop	{r3, r4, r5, pc}
  404d28:	20000af8 	.word	0x20000af8

00404d2c <_fclose_r>:
  404d2c:	2900      	cmp	r1, #0
  404d2e:	d03d      	beq.n	404dac <_fclose_r+0x80>
  404d30:	b570      	push	{r4, r5, r6, lr}
  404d32:	4605      	mov	r5, r0
  404d34:	460c      	mov	r4, r1
  404d36:	b108      	cbz	r0, 404d3c <_fclose_r+0x10>
  404d38:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404d3a:	b37b      	cbz	r3, 404d9c <_fclose_r+0x70>
  404d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404d40:	b90b      	cbnz	r3, 404d46 <_fclose_r+0x1a>
  404d42:	2000      	movs	r0, #0
  404d44:	bd70      	pop	{r4, r5, r6, pc}
  404d46:	4621      	mov	r1, r4
  404d48:	4628      	mov	r0, r5
  404d4a:	f7fe faf7 	bl	40333c <__sflush_r>
  404d4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404d50:	4606      	mov	r6, r0
  404d52:	b133      	cbz	r3, 404d62 <_fclose_r+0x36>
  404d54:	69e1      	ldr	r1, [r4, #28]
  404d56:	4628      	mov	r0, r5
  404d58:	4798      	blx	r3
  404d5a:	2800      	cmp	r0, #0
  404d5c:	bfb8      	it	lt
  404d5e:	f04f 36ff 	movlt.w	r6, #4294967295
  404d62:	89a3      	ldrh	r3, [r4, #12]
  404d64:	061b      	lsls	r3, r3, #24
  404d66:	d41c      	bmi.n	404da2 <_fclose_r+0x76>
  404d68:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404d6a:	b141      	cbz	r1, 404d7e <_fclose_r+0x52>
  404d6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404d70:	4299      	cmp	r1, r3
  404d72:	d002      	beq.n	404d7a <_fclose_r+0x4e>
  404d74:	4628      	mov	r0, r5
  404d76:	f7fe fce3 	bl	403740 <_free_r>
  404d7a:	2300      	movs	r3, #0
  404d7c:	6323      	str	r3, [r4, #48]	; 0x30
  404d7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404d80:	b121      	cbz	r1, 404d8c <_fclose_r+0x60>
  404d82:	4628      	mov	r0, r5
  404d84:	f7fe fcdc 	bl	403740 <_free_r>
  404d88:	2300      	movs	r3, #0
  404d8a:	6463      	str	r3, [r4, #68]	; 0x44
  404d8c:	f7fe fc14 	bl	4035b8 <__sfp_lock_acquire>
  404d90:	2300      	movs	r3, #0
  404d92:	81a3      	strh	r3, [r4, #12]
  404d94:	f7fe fc12 	bl	4035bc <__sfp_lock_release>
  404d98:	4630      	mov	r0, r6
  404d9a:	bd70      	pop	{r4, r5, r6, pc}
  404d9c:	f7fe fc06 	bl	4035ac <__sinit>
  404da0:	e7cc      	b.n	404d3c <_fclose_r+0x10>
  404da2:	6921      	ldr	r1, [r4, #16]
  404da4:	4628      	mov	r0, r5
  404da6:	f7fe fccb 	bl	403740 <_free_r>
  404daa:	e7dd      	b.n	404d68 <_fclose_r+0x3c>
  404dac:	2000      	movs	r0, #0
  404dae:	4770      	bx	lr

00404db0 <_fstat_r>:
  404db0:	b538      	push	{r3, r4, r5, lr}
  404db2:	460b      	mov	r3, r1
  404db4:	4c07      	ldr	r4, [pc, #28]	; (404dd4 <_fstat_r+0x24>)
  404db6:	4605      	mov	r5, r0
  404db8:	4611      	mov	r1, r2
  404dba:	4618      	mov	r0, r3
  404dbc:	2300      	movs	r3, #0
  404dbe:	6023      	str	r3, [r4, #0]
  404dc0:	f7fc fe72 	bl	401aa8 <_fstat>
  404dc4:	1c43      	adds	r3, r0, #1
  404dc6:	d000      	beq.n	404dca <_fstat_r+0x1a>
  404dc8:	bd38      	pop	{r3, r4, r5, pc}
  404dca:	6823      	ldr	r3, [r4, #0]
  404dcc:	2b00      	cmp	r3, #0
  404dce:	d0fb      	beq.n	404dc8 <_fstat_r+0x18>
  404dd0:	602b      	str	r3, [r5, #0]
  404dd2:	bd38      	pop	{r3, r4, r5, pc}
  404dd4:	20000af8 	.word	0x20000af8

00404dd8 <_isatty_r>:
  404dd8:	b538      	push	{r3, r4, r5, lr}
  404dda:	4c07      	ldr	r4, [pc, #28]	; (404df8 <_isatty_r+0x20>)
  404ddc:	2300      	movs	r3, #0
  404dde:	4605      	mov	r5, r0
  404de0:	4608      	mov	r0, r1
  404de2:	6023      	str	r3, [r4, #0]
  404de4:	f7fc fe70 	bl	401ac8 <_isatty>
  404de8:	1c43      	adds	r3, r0, #1
  404dea:	d000      	beq.n	404dee <_isatty_r+0x16>
  404dec:	bd38      	pop	{r3, r4, r5, pc}
  404dee:	6823      	ldr	r3, [r4, #0]
  404df0:	2b00      	cmp	r3, #0
  404df2:	d0fb      	beq.n	404dec <_isatty_r+0x14>
  404df4:	602b      	str	r3, [r5, #0]
  404df6:	bd38      	pop	{r3, r4, r5, pc}
  404df8:	20000af8 	.word	0x20000af8

00404dfc <_lseek_r>:
  404dfc:	b570      	push	{r4, r5, r6, lr}
  404dfe:	460d      	mov	r5, r1
  404e00:	4c08      	ldr	r4, [pc, #32]	; (404e24 <_lseek_r+0x28>)
  404e02:	4611      	mov	r1, r2
  404e04:	4606      	mov	r6, r0
  404e06:	461a      	mov	r2, r3
  404e08:	4628      	mov	r0, r5
  404e0a:	2300      	movs	r3, #0
  404e0c:	6023      	str	r3, [r4, #0]
  404e0e:	f7fc fe65 	bl	401adc <_lseek>
  404e12:	1c43      	adds	r3, r0, #1
  404e14:	d000      	beq.n	404e18 <_lseek_r+0x1c>
  404e16:	bd70      	pop	{r4, r5, r6, pc}
  404e18:	6823      	ldr	r3, [r4, #0]
  404e1a:	2b00      	cmp	r3, #0
  404e1c:	d0fb      	beq.n	404e16 <_lseek_r+0x1a>
  404e1e:	6033      	str	r3, [r6, #0]
  404e20:	bd70      	pop	{r4, r5, r6, pc}
  404e22:	bf00      	nop
  404e24:	20000af8 	.word	0x20000af8

00404e28 <_read_r>:
  404e28:	b570      	push	{r4, r5, r6, lr}
  404e2a:	460d      	mov	r5, r1
  404e2c:	4c08      	ldr	r4, [pc, #32]	; (404e50 <_read_r+0x28>)
  404e2e:	4611      	mov	r1, r2
  404e30:	4606      	mov	r6, r0
  404e32:	461a      	mov	r2, r3
  404e34:	4628      	mov	r0, r5
  404e36:	2300      	movs	r3, #0
  404e38:	6023      	str	r3, [r4, #0]
  404e3a:	f7fb fb45 	bl	4004c8 <_read>
  404e3e:	1c43      	adds	r3, r0, #1
  404e40:	d000      	beq.n	404e44 <_read_r+0x1c>
  404e42:	bd70      	pop	{r4, r5, r6, pc}
  404e44:	6823      	ldr	r3, [r4, #0]
  404e46:	2b00      	cmp	r3, #0
  404e48:	d0fb      	beq.n	404e42 <_read_r+0x1a>
  404e4a:	6033      	str	r3, [r6, #0]
  404e4c:	bd70      	pop	{r4, r5, r6, pc}
  404e4e:	bf00      	nop
  404e50:	20000af8 	.word	0x20000af8

00404e54 <__aeabi_uldivmod>:
  404e54:	b953      	cbnz	r3, 404e6c <__aeabi_uldivmod+0x18>
  404e56:	b94a      	cbnz	r2, 404e6c <__aeabi_uldivmod+0x18>
  404e58:	2900      	cmp	r1, #0
  404e5a:	bf08      	it	eq
  404e5c:	2800      	cmpeq	r0, #0
  404e5e:	bf1c      	itt	ne
  404e60:	f04f 31ff 	movne.w	r1, #4294967295
  404e64:	f04f 30ff 	movne.w	r0, #4294967295
  404e68:	f000 b97e 	b.w	405168 <__aeabi_idiv0>
  404e6c:	f1ad 0c08 	sub.w	ip, sp, #8
  404e70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404e74:	f000 f806 	bl	404e84 <__udivmoddi4>
  404e78:	f8dd e004 	ldr.w	lr, [sp, #4]
  404e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404e80:	b004      	add	sp, #16
  404e82:	4770      	bx	lr

00404e84 <__udivmoddi4>:
  404e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404e88:	468c      	mov	ip, r1
  404e8a:	460e      	mov	r6, r1
  404e8c:	4604      	mov	r4, r0
  404e8e:	9d08      	ldr	r5, [sp, #32]
  404e90:	2b00      	cmp	r3, #0
  404e92:	d150      	bne.n	404f36 <__udivmoddi4+0xb2>
  404e94:	428a      	cmp	r2, r1
  404e96:	4617      	mov	r7, r2
  404e98:	d96c      	bls.n	404f74 <__udivmoddi4+0xf0>
  404e9a:	fab2 fe82 	clz	lr, r2
  404e9e:	f1be 0f00 	cmp.w	lr, #0
  404ea2:	d00b      	beq.n	404ebc <__udivmoddi4+0x38>
  404ea4:	f1ce 0420 	rsb	r4, lr, #32
  404ea8:	fa20 f404 	lsr.w	r4, r0, r4
  404eac:	fa01 f60e 	lsl.w	r6, r1, lr
  404eb0:	ea44 0c06 	orr.w	ip, r4, r6
  404eb4:	fa02 f70e 	lsl.w	r7, r2, lr
  404eb8:	fa00 f40e 	lsl.w	r4, r0, lr
  404ebc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  404ec0:	0c22      	lsrs	r2, r4, #16
  404ec2:	fbbc f0f9 	udiv	r0, ip, r9
  404ec6:	fa1f f887 	uxth.w	r8, r7
  404eca:	fb09 c610 	mls	r6, r9, r0, ip
  404ece:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  404ed2:	fb00 f308 	mul.w	r3, r0, r8
  404ed6:	42b3      	cmp	r3, r6
  404ed8:	d909      	bls.n	404eee <__udivmoddi4+0x6a>
  404eda:	19f6      	adds	r6, r6, r7
  404edc:	f100 32ff 	add.w	r2, r0, #4294967295
  404ee0:	f080 8122 	bcs.w	405128 <__udivmoddi4+0x2a4>
  404ee4:	42b3      	cmp	r3, r6
  404ee6:	f240 811f 	bls.w	405128 <__udivmoddi4+0x2a4>
  404eea:	3802      	subs	r0, #2
  404eec:	443e      	add	r6, r7
  404eee:	1af6      	subs	r6, r6, r3
  404ef0:	b2a2      	uxth	r2, r4
  404ef2:	fbb6 f3f9 	udiv	r3, r6, r9
  404ef6:	fb09 6613 	mls	r6, r9, r3, r6
  404efa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  404efe:	fb03 f808 	mul.w	r8, r3, r8
  404f02:	45a0      	cmp	r8, r4
  404f04:	d909      	bls.n	404f1a <__udivmoddi4+0x96>
  404f06:	19e4      	adds	r4, r4, r7
  404f08:	f103 32ff 	add.w	r2, r3, #4294967295
  404f0c:	f080 810a 	bcs.w	405124 <__udivmoddi4+0x2a0>
  404f10:	45a0      	cmp	r8, r4
  404f12:	f240 8107 	bls.w	405124 <__udivmoddi4+0x2a0>
  404f16:	3b02      	subs	r3, #2
  404f18:	443c      	add	r4, r7
  404f1a:	ebc8 0404 	rsb	r4, r8, r4
  404f1e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  404f22:	2100      	movs	r1, #0
  404f24:	2d00      	cmp	r5, #0
  404f26:	d062      	beq.n	404fee <__udivmoddi4+0x16a>
  404f28:	fa24 f40e 	lsr.w	r4, r4, lr
  404f2c:	2300      	movs	r3, #0
  404f2e:	602c      	str	r4, [r5, #0]
  404f30:	606b      	str	r3, [r5, #4]
  404f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f36:	428b      	cmp	r3, r1
  404f38:	d907      	bls.n	404f4a <__udivmoddi4+0xc6>
  404f3a:	2d00      	cmp	r5, #0
  404f3c:	d055      	beq.n	404fea <__udivmoddi4+0x166>
  404f3e:	2100      	movs	r1, #0
  404f40:	e885 0041 	stmia.w	r5, {r0, r6}
  404f44:	4608      	mov	r0, r1
  404f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f4a:	fab3 f183 	clz	r1, r3
  404f4e:	2900      	cmp	r1, #0
  404f50:	f040 8090 	bne.w	405074 <__udivmoddi4+0x1f0>
  404f54:	42b3      	cmp	r3, r6
  404f56:	d302      	bcc.n	404f5e <__udivmoddi4+0xda>
  404f58:	4282      	cmp	r2, r0
  404f5a:	f200 80f8 	bhi.w	40514e <__udivmoddi4+0x2ca>
  404f5e:	1a84      	subs	r4, r0, r2
  404f60:	eb66 0603 	sbc.w	r6, r6, r3
  404f64:	2001      	movs	r0, #1
  404f66:	46b4      	mov	ip, r6
  404f68:	2d00      	cmp	r5, #0
  404f6a:	d040      	beq.n	404fee <__udivmoddi4+0x16a>
  404f6c:	e885 1010 	stmia.w	r5, {r4, ip}
  404f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f74:	b912      	cbnz	r2, 404f7c <__udivmoddi4+0xf8>
  404f76:	2701      	movs	r7, #1
  404f78:	fbb7 f7f2 	udiv	r7, r7, r2
  404f7c:	fab7 fe87 	clz	lr, r7
  404f80:	f1be 0f00 	cmp.w	lr, #0
  404f84:	d135      	bne.n	404ff2 <__udivmoddi4+0x16e>
  404f86:	1bf3      	subs	r3, r6, r7
  404f88:	ea4f 4817 	mov.w	r8, r7, lsr #16
  404f8c:	fa1f fc87 	uxth.w	ip, r7
  404f90:	2101      	movs	r1, #1
  404f92:	fbb3 f0f8 	udiv	r0, r3, r8
  404f96:	0c22      	lsrs	r2, r4, #16
  404f98:	fb08 3610 	mls	r6, r8, r0, r3
  404f9c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  404fa0:	fb0c f300 	mul.w	r3, ip, r0
  404fa4:	42b3      	cmp	r3, r6
  404fa6:	d907      	bls.n	404fb8 <__udivmoddi4+0x134>
  404fa8:	19f6      	adds	r6, r6, r7
  404faa:	f100 32ff 	add.w	r2, r0, #4294967295
  404fae:	d202      	bcs.n	404fb6 <__udivmoddi4+0x132>
  404fb0:	42b3      	cmp	r3, r6
  404fb2:	f200 80ce 	bhi.w	405152 <__udivmoddi4+0x2ce>
  404fb6:	4610      	mov	r0, r2
  404fb8:	1af6      	subs	r6, r6, r3
  404fba:	b2a2      	uxth	r2, r4
  404fbc:	fbb6 f3f8 	udiv	r3, r6, r8
  404fc0:	fb08 6613 	mls	r6, r8, r3, r6
  404fc4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  404fc8:	fb0c fc03 	mul.w	ip, ip, r3
  404fcc:	45a4      	cmp	ip, r4
  404fce:	d907      	bls.n	404fe0 <__udivmoddi4+0x15c>
  404fd0:	19e4      	adds	r4, r4, r7
  404fd2:	f103 32ff 	add.w	r2, r3, #4294967295
  404fd6:	d202      	bcs.n	404fde <__udivmoddi4+0x15a>
  404fd8:	45a4      	cmp	ip, r4
  404fda:	f200 80b5 	bhi.w	405148 <__udivmoddi4+0x2c4>
  404fde:	4613      	mov	r3, r2
  404fe0:	ebcc 0404 	rsb	r4, ip, r4
  404fe4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  404fe8:	e79c      	b.n	404f24 <__udivmoddi4+0xa0>
  404fea:	4629      	mov	r1, r5
  404fec:	4628      	mov	r0, r5
  404fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404ff2:	f1ce 0120 	rsb	r1, lr, #32
  404ff6:	fa06 f30e 	lsl.w	r3, r6, lr
  404ffa:	fa07 f70e 	lsl.w	r7, r7, lr
  404ffe:	fa20 f901 	lsr.w	r9, r0, r1
  405002:	ea4f 4817 	mov.w	r8, r7, lsr #16
  405006:	40ce      	lsrs	r6, r1
  405008:	ea49 0903 	orr.w	r9, r9, r3
  40500c:	fbb6 faf8 	udiv	sl, r6, r8
  405010:	ea4f 4419 	mov.w	r4, r9, lsr #16
  405014:	fb08 661a 	mls	r6, r8, sl, r6
  405018:	fa1f fc87 	uxth.w	ip, r7
  40501c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  405020:	fb0a f20c 	mul.w	r2, sl, ip
  405024:	429a      	cmp	r2, r3
  405026:	fa00 f40e 	lsl.w	r4, r0, lr
  40502a:	d90a      	bls.n	405042 <__udivmoddi4+0x1be>
  40502c:	19db      	adds	r3, r3, r7
  40502e:	f10a 31ff 	add.w	r1, sl, #4294967295
  405032:	f080 8087 	bcs.w	405144 <__udivmoddi4+0x2c0>
  405036:	429a      	cmp	r2, r3
  405038:	f240 8084 	bls.w	405144 <__udivmoddi4+0x2c0>
  40503c:	f1aa 0a02 	sub.w	sl, sl, #2
  405040:	443b      	add	r3, r7
  405042:	1a9b      	subs	r3, r3, r2
  405044:	fa1f f989 	uxth.w	r9, r9
  405048:	fbb3 f1f8 	udiv	r1, r3, r8
  40504c:	fb08 3311 	mls	r3, r8, r1, r3
  405050:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  405054:	fb01 f60c 	mul.w	r6, r1, ip
  405058:	429e      	cmp	r6, r3
  40505a:	d907      	bls.n	40506c <__udivmoddi4+0x1e8>
  40505c:	19db      	adds	r3, r3, r7
  40505e:	f101 32ff 	add.w	r2, r1, #4294967295
  405062:	d26b      	bcs.n	40513c <__udivmoddi4+0x2b8>
  405064:	429e      	cmp	r6, r3
  405066:	d969      	bls.n	40513c <__udivmoddi4+0x2b8>
  405068:	3902      	subs	r1, #2
  40506a:	443b      	add	r3, r7
  40506c:	1b9b      	subs	r3, r3, r6
  40506e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  405072:	e78e      	b.n	404f92 <__udivmoddi4+0x10e>
  405074:	f1c1 0e20 	rsb	lr, r1, #32
  405078:	fa22 f40e 	lsr.w	r4, r2, lr
  40507c:	408b      	lsls	r3, r1
  40507e:	4323      	orrs	r3, r4
  405080:	fa20 f70e 	lsr.w	r7, r0, lr
  405084:	fa06 f401 	lsl.w	r4, r6, r1
  405088:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40508c:	fa26 f60e 	lsr.w	r6, r6, lr
  405090:	433c      	orrs	r4, r7
  405092:	fbb6 f9fc 	udiv	r9, r6, ip
  405096:	0c27      	lsrs	r7, r4, #16
  405098:	fb0c 6619 	mls	r6, ip, r9, r6
  40509c:	fa1f f883 	uxth.w	r8, r3
  4050a0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4050a4:	fb09 f708 	mul.w	r7, r9, r8
  4050a8:	42b7      	cmp	r7, r6
  4050aa:	fa02 f201 	lsl.w	r2, r2, r1
  4050ae:	fa00 fa01 	lsl.w	sl, r0, r1
  4050b2:	d908      	bls.n	4050c6 <__udivmoddi4+0x242>
  4050b4:	18f6      	adds	r6, r6, r3
  4050b6:	f109 30ff 	add.w	r0, r9, #4294967295
  4050ba:	d241      	bcs.n	405140 <__udivmoddi4+0x2bc>
  4050bc:	42b7      	cmp	r7, r6
  4050be:	d93f      	bls.n	405140 <__udivmoddi4+0x2bc>
  4050c0:	f1a9 0902 	sub.w	r9, r9, #2
  4050c4:	441e      	add	r6, r3
  4050c6:	1bf6      	subs	r6, r6, r7
  4050c8:	b2a0      	uxth	r0, r4
  4050ca:	fbb6 f4fc 	udiv	r4, r6, ip
  4050ce:	fb0c 6614 	mls	r6, ip, r4, r6
  4050d2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4050d6:	fb04 f808 	mul.w	r8, r4, r8
  4050da:	45b8      	cmp	r8, r7
  4050dc:	d907      	bls.n	4050ee <__udivmoddi4+0x26a>
  4050de:	18ff      	adds	r7, r7, r3
  4050e0:	f104 30ff 	add.w	r0, r4, #4294967295
  4050e4:	d228      	bcs.n	405138 <__udivmoddi4+0x2b4>
  4050e6:	45b8      	cmp	r8, r7
  4050e8:	d926      	bls.n	405138 <__udivmoddi4+0x2b4>
  4050ea:	3c02      	subs	r4, #2
  4050ec:	441f      	add	r7, r3
  4050ee:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4050f2:	ebc8 0707 	rsb	r7, r8, r7
  4050f6:	fba0 8902 	umull	r8, r9, r0, r2
  4050fa:	454f      	cmp	r7, r9
  4050fc:	4644      	mov	r4, r8
  4050fe:	464e      	mov	r6, r9
  405100:	d314      	bcc.n	40512c <__udivmoddi4+0x2a8>
  405102:	d029      	beq.n	405158 <__udivmoddi4+0x2d4>
  405104:	b365      	cbz	r5, 405160 <__udivmoddi4+0x2dc>
  405106:	ebba 0304 	subs.w	r3, sl, r4
  40510a:	eb67 0706 	sbc.w	r7, r7, r6
  40510e:	fa07 fe0e 	lsl.w	lr, r7, lr
  405112:	40cb      	lsrs	r3, r1
  405114:	40cf      	lsrs	r7, r1
  405116:	ea4e 0303 	orr.w	r3, lr, r3
  40511a:	e885 0088 	stmia.w	r5, {r3, r7}
  40511e:	2100      	movs	r1, #0
  405120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405124:	4613      	mov	r3, r2
  405126:	e6f8      	b.n	404f1a <__udivmoddi4+0x96>
  405128:	4610      	mov	r0, r2
  40512a:	e6e0      	b.n	404eee <__udivmoddi4+0x6a>
  40512c:	ebb8 0402 	subs.w	r4, r8, r2
  405130:	eb69 0603 	sbc.w	r6, r9, r3
  405134:	3801      	subs	r0, #1
  405136:	e7e5      	b.n	405104 <__udivmoddi4+0x280>
  405138:	4604      	mov	r4, r0
  40513a:	e7d8      	b.n	4050ee <__udivmoddi4+0x26a>
  40513c:	4611      	mov	r1, r2
  40513e:	e795      	b.n	40506c <__udivmoddi4+0x1e8>
  405140:	4681      	mov	r9, r0
  405142:	e7c0      	b.n	4050c6 <__udivmoddi4+0x242>
  405144:	468a      	mov	sl, r1
  405146:	e77c      	b.n	405042 <__udivmoddi4+0x1be>
  405148:	3b02      	subs	r3, #2
  40514a:	443c      	add	r4, r7
  40514c:	e748      	b.n	404fe0 <__udivmoddi4+0x15c>
  40514e:	4608      	mov	r0, r1
  405150:	e70a      	b.n	404f68 <__udivmoddi4+0xe4>
  405152:	3802      	subs	r0, #2
  405154:	443e      	add	r6, r7
  405156:	e72f      	b.n	404fb8 <__udivmoddi4+0x134>
  405158:	45c2      	cmp	sl, r8
  40515a:	d3e7      	bcc.n	40512c <__udivmoddi4+0x2a8>
  40515c:	463e      	mov	r6, r7
  40515e:	e7d1      	b.n	405104 <__udivmoddi4+0x280>
  405160:	4629      	mov	r1, r5
  405162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405166:	bf00      	nop

00405168 <__aeabi_idiv0>:
  405168:	4770      	bx	lr
  40516a:	bf00      	nop
  40516c:	00002580 	.word	0x00002580
  405170:	000000c0 	.word	0x000000c0
  405174:	00000800 	.word	0x00000800
	...
  405184:	0d545352 	.word	0x0d545352
  405188:	0000000a 	.word	0x0000000a
  40518c:	20747248 	.word	0x20747248
  405190:	6425203d 	.word	0x6425203d
  405194:	00000a0d 	.word	0x00000a0d
  405198:	32307053 	.word	0x32307053
  40519c:	25203d20 	.word	0x25203d20
  4051a0:	000a0d64 	.word	0x000a0d64
  4051a4:	00000043 	.word	0x00000043

004051a8 <_global_impure_ptr>:
  4051a8:	20000008                                ... 

004051ac <zeroes.6993>:
  4051ac:	30303030 30303030 30303030 30303030     0000000000000000
  4051bc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4051cc:	00000000 33323130 37363534 62613938     ....0123456789ab
  4051dc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

004051ec <blanks.6992>:
  4051ec:	20202020 20202020 20202020 20202020                     

004051fc <_init>:
  4051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4051fe:	bf00      	nop
  405200:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405202:	bc08      	pop	{r3}
  405204:	469e      	mov	lr, r3
  405206:	4770      	bx	lr

00405208 <__init_array_start>:
  405208:	0040331d 	.word	0x0040331d

0040520c <__frame_dummy_init_array_entry>:
  40520c:	004000f1                                ..@.

00405210 <_fini>:
  405210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405212:	bf00      	nop
  405214:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405216:	bc08      	pop	{r3}
  405218:	469e      	mov	lr, r3
  40521a:	4770      	bx	lr

0040521c <__fini_array_start>:
  40521c:	004000cd 	.word	0x004000cd
