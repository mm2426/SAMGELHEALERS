
SAMGELHEALERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b98  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404b98  00404b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000874  20000000  00404ba0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000e0  20000874  00405414  00020874  2**2
                  ALLOC
  4 .stack        00003004  20000954  004054f4  00020874  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020874  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002089e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008c7e  00000000  00000000  000208f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001636  00000000  00000000  00029575  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000057b4  00000000  00000000  0002abab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000998  00000000  00000000  0003035f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008b8  00000000  00000000  00030cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000129a7  00000000  00000000  000315af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a7b7  00000000  00000000  00043f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f297  00000000  00000000  0004e70d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003470  00000000  00000000  0009d9a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003958 	.word	0x20003958
  400004:	0040126d 	.word	0x0040126d
  400008:	00401335 	.word	0x00401335
  40000c:	00401335 	.word	0x00401335
  400010:	00401335 	.word	0x00401335
  400014:	00401335 	.word	0x00401335
  400018:	00401335 	.word	0x00401335
	...
  40002c:	00401335 	.word	0x00401335
  400030:	00401335 	.word	0x00401335
  400034:	00000000 	.word	0x00000000
  400038:	00401335 	.word	0x00401335
  40003c:	00401335 	.word	0x00401335
  400040:	00401335 	.word	0x00401335
  400044:	00401335 	.word	0x00401335
  400048:	00401335 	.word	0x00401335
  40004c:	00401335 	.word	0x00401335
  400050:	00401335 	.word	0x00401335
  400054:	00401335 	.word	0x00401335
  400058:	00401335 	.word	0x00401335
  40005c:	00401335 	.word	0x00401335
  400060:	00401335 	.word	0x00401335
  400064:	00401335 	.word	0x00401335
  400068:	00000000 	.word	0x00000000
  40006c:	004002bd 	.word	0x004002bd
  400070:	004002d5 	.word	0x004002d5
  400074:	004002ed 	.word	0x004002ed
  400078:	00401335 	.word	0x00401335
  40007c:	00401335 	.word	0x00401335
	...
  400088:	00401335 	.word	0x00401335
  40008c:	00401335 	.word	0x00401335
  400090:	00401335 	.word	0x00401335
  400094:	00401335 	.word	0x00401335
  400098:	00401335 	.word	0x00401335
  40009c:	00401335 	.word	0x00401335
  4000a0:	00401335 	.word	0x00401335
  4000a4:	00401335 	.word	0x00401335
  4000a8:	00401335 	.word	0x00401335
  4000ac:	00401335 	.word	0x00401335
  4000b0:	00401335 	.word	0x00401335
  4000b4:	00401335 	.word	0x00401335
  4000b8:	00401335 	.word	0x00401335
  4000bc:	00401335 	.word	0x00401335
  4000c0:	00401335 	.word	0x00401335
  4000c4:	00401335 	.word	0x00401335
  4000c8:	00401335 	.word	0x00401335

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000874 	.word	0x20000874
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404ba0 	.word	0x00404ba0

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000878 	.word	0x20000878
  40011c:	00404ba0 	.word	0x00404ba0
  400120:	00404ba0 	.word	0x00404ba0
  400124:	00000000 	.word	0x00000000

00400128 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400128:	b580      	push	{r7, lr}
  40012a:	b086      	sub	sp, #24
  40012c:	af00      	add	r7, sp, #0
  40012e:	60f8      	str	r0, [r7, #12]
  400130:	60b9      	str	r1, [r7, #8]
  400132:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400134:	2300      	movs	r3, #0
  400136:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400138:	68fb      	ldr	r3, [r7, #12]
  40013a:	2b00      	cmp	r3, #0
  40013c:	d012      	beq.n	400164 <_read+0x3c>
		return -1;
  40013e:	f04f 33ff 	mov.w	r3, #4294967295
  400142:	e013      	b.n	40016c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400144:	4b0b      	ldr	r3, [pc, #44]	; (400174 <_read+0x4c>)
  400146:	681b      	ldr	r3, [r3, #0]
  400148:	4a0b      	ldr	r2, [pc, #44]	; (400178 <_read+0x50>)
  40014a:	6812      	ldr	r2, [r2, #0]
  40014c:	68b9      	ldr	r1, [r7, #8]
  40014e:	4610      	mov	r0, r2
  400150:	4798      	blx	r3
		ptr++;
  400152:	68bb      	ldr	r3, [r7, #8]
  400154:	3301      	adds	r3, #1
  400156:	60bb      	str	r3, [r7, #8]
		nChars++;
  400158:	697b      	ldr	r3, [r7, #20]
  40015a:	3301      	adds	r3, #1
  40015c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40015e:	687b      	ldr	r3, [r7, #4]
  400160:	3b01      	subs	r3, #1
  400162:	607b      	str	r3, [r7, #4]
  400164:	687b      	ldr	r3, [r7, #4]
  400166:	2b00      	cmp	r3, #0
  400168:	dcec      	bgt.n	400144 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40016a:	697b      	ldr	r3, [r7, #20]
}
  40016c:	4618      	mov	r0, r3
  40016e:	3718      	adds	r7, #24
  400170:	46bd      	mov	sp, r7
  400172:	bd80      	pop	{r7, pc}
  400174:	20000940 	.word	0x20000940
  400178:	20000948 	.word	0x20000948

0040017c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40017c:	b580      	push	{r7, lr}
  40017e:	b086      	sub	sp, #24
  400180:	af00      	add	r7, sp, #0
  400182:	60f8      	str	r0, [r7, #12]
  400184:	60b9      	str	r1, [r7, #8]
  400186:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400188:	2300      	movs	r3, #0
  40018a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40018c:	68fb      	ldr	r3, [r7, #12]
  40018e:	2b01      	cmp	r3, #1
  400190:	d01e      	beq.n	4001d0 <_write+0x54>
  400192:	68fb      	ldr	r3, [r7, #12]
  400194:	2b02      	cmp	r3, #2
  400196:	d01b      	beq.n	4001d0 <_write+0x54>
  400198:	68fb      	ldr	r3, [r7, #12]
  40019a:	2b03      	cmp	r3, #3
  40019c:	d018      	beq.n	4001d0 <_write+0x54>
		return -1;
  40019e:	f04f 33ff 	mov.w	r3, #4294967295
  4001a2:	e019      	b.n	4001d8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001a4:	4b0e      	ldr	r3, [pc, #56]	; (4001e0 <_write+0x64>)
  4001a6:	681a      	ldr	r2, [r3, #0]
  4001a8:	4b0e      	ldr	r3, [pc, #56]	; (4001e4 <_write+0x68>)
  4001aa:	6818      	ldr	r0, [r3, #0]
  4001ac:	68bb      	ldr	r3, [r7, #8]
  4001ae:	1c59      	adds	r1, r3, #1
  4001b0:	60b9      	str	r1, [r7, #8]
  4001b2:	781b      	ldrb	r3, [r3, #0]
  4001b4:	4619      	mov	r1, r3
  4001b6:	4790      	blx	r2
  4001b8:	4603      	mov	r3, r0
  4001ba:	2b00      	cmp	r3, #0
  4001bc:	da02      	bge.n	4001c4 <_write+0x48>
			return -1;
  4001be:	f04f 33ff 	mov.w	r3, #4294967295
  4001c2:	e009      	b.n	4001d8 <_write+0x5c>
		}
		++nChars;
  4001c4:	697b      	ldr	r3, [r7, #20]
  4001c6:	3301      	adds	r3, #1
  4001c8:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ca:	687b      	ldr	r3, [r7, #4]
  4001cc:	3b01      	subs	r3, #1
  4001ce:	607b      	str	r3, [r7, #4]
  4001d0:	687b      	ldr	r3, [r7, #4]
  4001d2:	2b00      	cmp	r3, #0
  4001d4:	d1e6      	bne.n	4001a4 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001d6:	697b      	ldr	r3, [r7, #20]
}
  4001d8:	4618      	mov	r0, r3
  4001da:	3718      	adds	r7, #24
  4001dc:	46bd      	mov	sp, r7
  4001de:	bd80      	pop	{r7, pc}
  4001e0:	20000944 	.word	0x20000944
  4001e4:	20000948 	.word	0x20000948

004001e8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4001e8:	b580      	push	{r7, lr}
  4001ea:	b084      	sub	sp, #16
  4001ec:	af00      	add	r7, sp, #0
  4001ee:	6078      	str	r0, [r7, #4]
  4001f0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4001f2:	6878      	ldr	r0, [r7, #4]
  4001f4:	4b2c      	ldr	r3, [pc, #176]	; (4002a8 <pio_handler_process+0xc0>)
  4001f6:	4798      	blx	r3
  4001f8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4001fa:	6878      	ldr	r0, [r7, #4]
  4001fc:	4b2b      	ldr	r3, [pc, #172]	; (4002ac <pio_handler_process+0xc4>)
  4001fe:	4798      	blx	r3
  400200:	4602      	mov	r2, r0
  400202:	68fb      	ldr	r3, [r7, #12]
  400204:	4013      	ands	r3, r2
  400206:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400208:	68fb      	ldr	r3, [r7, #12]
  40020a:	2b00      	cmp	r3, #0
  40020c:	d03c      	beq.n	400288 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40020e:	2300      	movs	r3, #0
  400210:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400212:	e034      	b.n	40027e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400214:	4a26      	ldr	r2, [pc, #152]	; (4002b0 <pio_handler_process+0xc8>)
  400216:	68bb      	ldr	r3, [r7, #8]
  400218:	011b      	lsls	r3, r3, #4
  40021a:	4413      	add	r3, r2
  40021c:	681a      	ldr	r2, [r3, #0]
  40021e:	683b      	ldr	r3, [r7, #0]
  400220:	429a      	cmp	r2, r3
  400222:	d126      	bne.n	400272 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400224:	4a22      	ldr	r2, [pc, #136]	; (4002b0 <pio_handler_process+0xc8>)
  400226:	68bb      	ldr	r3, [r7, #8]
  400228:	011b      	lsls	r3, r3, #4
  40022a:	4413      	add	r3, r2
  40022c:	3304      	adds	r3, #4
  40022e:	681a      	ldr	r2, [r3, #0]
  400230:	68fb      	ldr	r3, [r7, #12]
  400232:	4013      	ands	r3, r2
  400234:	2b00      	cmp	r3, #0
  400236:	d01c      	beq.n	400272 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400238:	4a1d      	ldr	r2, [pc, #116]	; (4002b0 <pio_handler_process+0xc8>)
  40023a:	68bb      	ldr	r3, [r7, #8]
  40023c:	011b      	lsls	r3, r3, #4
  40023e:	4413      	add	r3, r2
  400240:	330c      	adds	r3, #12
  400242:	681b      	ldr	r3, [r3, #0]
  400244:	491a      	ldr	r1, [pc, #104]	; (4002b0 <pio_handler_process+0xc8>)
  400246:	68ba      	ldr	r2, [r7, #8]
  400248:	0112      	lsls	r2, r2, #4
  40024a:	440a      	add	r2, r1
  40024c:	6810      	ldr	r0, [r2, #0]
  40024e:	4918      	ldr	r1, [pc, #96]	; (4002b0 <pio_handler_process+0xc8>)
  400250:	68ba      	ldr	r2, [r7, #8]
  400252:	0112      	lsls	r2, r2, #4
  400254:	440a      	add	r2, r1
  400256:	3204      	adds	r2, #4
  400258:	6812      	ldr	r2, [r2, #0]
  40025a:	4611      	mov	r1, r2
  40025c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40025e:	4a14      	ldr	r2, [pc, #80]	; (4002b0 <pio_handler_process+0xc8>)
  400260:	68bb      	ldr	r3, [r7, #8]
  400262:	011b      	lsls	r3, r3, #4
  400264:	4413      	add	r3, r2
  400266:	3304      	adds	r3, #4
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	43db      	mvns	r3, r3
  40026c:	68fa      	ldr	r2, [r7, #12]
  40026e:	4013      	ands	r3, r2
  400270:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400272:	68bb      	ldr	r3, [r7, #8]
  400274:	3301      	adds	r3, #1
  400276:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400278:	68bb      	ldr	r3, [r7, #8]
  40027a:	2b06      	cmp	r3, #6
  40027c:	d803      	bhi.n	400286 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40027e:	68fb      	ldr	r3, [r7, #12]
  400280:	2b00      	cmp	r3, #0
  400282:	d1c7      	bne.n	400214 <pio_handler_process+0x2c>
  400284:	e000      	b.n	400288 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400286:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400288:	4b0a      	ldr	r3, [pc, #40]	; (4002b4 <pio_handler_process+0xcc>)
  40028a:	681b      	ldr	r3, [r3, #0]
  40028c:	2b00      	cmp	r3, #0
  40028e:	d007      	beq.n	4002a0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400290:	4b09      	ldr	r3, [pc, #36]	; (4002b8 <pio_handler_process+0xd0>)
  400292:	681b      	ldr	r3, [r3, #0]
  400294:	2b00      	cmp	r3, #0
  400296:	d003      	beq.n	4002a0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400298:	4b07      	ldr	r3, [pc, #28]	; (4002b8 <pio_handler_process+0xd0>)
  40029a:	681b      	ldr	r3, [r3, #0]
  40029c:	6878      	ldr	r0, [r7, #4]
  40029e:	4798      	blx	r3
		}
	}
#endif
}
  4002a0:	bf00      	nop
  4002a2:	3710      	adds	r7, #16
  4002a4:	46bd      	mov	sp, r7
  4002a6:	bd80      	pop	{r7, pc}
  4002a8:	00400bfd 	.word	0x00400bfd
  4002ac:	00400c15 	.word	0x00400c15
  4002b0:	20000890 	.word	0x20000890
  4002b4:	2000094c 	.word	0x2000094c
  4002b8:	20000900 	.word	0x20000900

004002bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002bc:	b580      	push	{r7, lr}
  4002be:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4002c0:	210b      	movs	r1, #11
  4002c2:	4802      	ldr	r0, [pc, #8]	; (4002cc <PIOA_Handler+0x10>)
  4002c4:	4b02      	ldr	r3, [pc, #8]	; (4002d0 <PIOA_Handler+0x14>)
  4002c6:	4798      	blx	r3
}
  4002c8:	bf00      	nop
  4002ca:	bd80      	pop	{r7, pc}
  4002cc:	400e0e00 	.word	0x400e0e00
  4002d0:	004001e9 	.word	0x004001e9

004002d4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002d4:	b580      	push	{r7, lr}
  4002d6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4002d8:	210c      	movs	r1, #12
  4002da:	4802      	ldr	r0, [pc, #8]	; (4002e4 <PIOB_Handler+0x10>)
  4002dc:	4b02      	ldr	r3, [pc, #8]	; (4002e8 <PIOB_Handler+0x14>)
  4002de:	4798      	blx	r3
}
  4002e0:	bf00      	nop
  4002e2:	bd80      	pop	{r7, pc}
  4002e4:	400e1000 	.word	0x400e1000
  4002e8:	004001e9 	.word	0x004001e9

004002ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4002ec:	b580      	push	{r7, lr}
  4002ee:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4002f0:	210d      	movs	r1, #13
  4002f2:	4802      	ldr	r0, [pc, #8]	; (4002fc <PIOC_Handler+0x10>)
  4002f4:	4b02      	ldr	r3, [pc, #8]	; (400300 <PIOC_Handler+0x14>)
  4002f6:	4798      	blx	r3
}
  4002f8:	bf00      	nop
  4002fa:	bd80      	pop	{r7, pc}
  4002fc:	400e1200 	.word	0x400e1200
  400300:	004001e9 	.word	0x004001e9

00400304 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400304:	b480      	push	{r7}
  400306:	b085      	sub	sp, #20
  400308:	af00      	add	r7, sp, #0
  40030a:	6078      	str	r0, [r7, #4]
  40030c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40030e:	2300      	movs	r3, #0
  400310:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400312:	687b      	ldr	r3, [r7, #4]
  400314:	22ac      	movs	r2, #172	; 0xac
  400316:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400318:	683b      	ldr	r3, [r7, #0]
  40031a:	681a      	ldr	r2, [r3, #0]
  40031c:	683b      	ldr	r3, [r7, #0]
  40031e:	685b      	ldr	r3, [r3, #4]
  400320:	fbb2 f3f3 	udiv	r3, r2, r3
  400324:	091b      	lsrs	r3, r3, #4
  400326:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400328:	68fb      	ldr	r3, [r7, #12]
  40032a:	2b00      	cmp	r3, #0
  40032c:	d003      	beq.n	400336 <uart_init+0x32>
  40032e:	68fb      	ldr	r3, [r7, #12]
  400330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400334:	d301      	bcc.n	40033a <uart_init+0x36>
		return 1;
  400336:	2301      	movs	r3, #1
  400338:	e00f      	b.n	40035a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  40033a:	687b      	ldr	r3, [r7, #4]
  40033c:	68fa      	ldr	r2, [r7, #12]
  40033e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400340:	683b      	ldr	r3, [r7, #0]
  400342:	689a      	ldr	r2, [r3, #8]
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400348:	687b      	ldr	r3, [r7, #4]
  40034a:	f240 2202 	movw	r2, #514	; 0x202
  40034e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400352:	687b      	ldr	r3, [r7, #4]
  400354:	2250      	movs	r2, #80	; 0x50
  400356:	601a      	str	r2, [r3, #0]

	return 0;
  400358:	2300      	movs	r3, #0
}
  40035a:	4618      	mov	r0, r3
  40035c:	3714      	adds	r7, #20
  40035e:	46bd      	mov	sp, r7
  400360:	bc80      	pop	{r7}
  400362:	4770      	bx	lr

00400364 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  400364:	b480      	push	{r7}
  400366:	b083      	sub	sp, #12
  400368:	af00      	add	r7, sp, #0
  40036a:	6078      	str	r0, [r7, #4]
  40036c:	460b      	mov	r3, r1
  40036e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	695b      	ldr	r3, [r3, #20]
  400374:	f003 0302 	and.w	r3, r3, #2
  400378:	2b00      	cmp	r3, #0
  40037a:	d101      	bne.n	400380 <uart_write+0x1c>
		return 1;
  40037c:	2301      	movs	r3, #1
  40037e:	e003      	b.n	400388 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  400380:	78fa      	ldrb	r2, [r7, #3]
  400382:	687b      	ldr	r3, [r7, #4]
  400384:	61da      	str	r2, [r3, #28]
	return 0;
  400386:	2300      	movs	r3, #0
}
  400388:	4618      	mov	r0, r3
  40038a:	370c      	adds	r7, #12
  40038c:	46bd      	mov	sp, r7
  40038e:	bc80      	pop	{r7}
  400390:	4770      	bx	lr
  400392:	bf00      	nop

00400394 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  400394:	b480      	push	{r7}
  400396:	b083      	sub	sp, #12
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
  40039c:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40039e:	687b      	ldr	r3, [r7, #4]
  4003a0:	695b      	ldr	r3, [r3, #20]
  4003a2:	f003 0301 	and.w	r3, r3, #1
  4003a6:	2b00      	cmp	r3, #0
  4003a8:	d101      	bne.n	4003ae <uart_read+0x1a>
		return 1;
  4003aa:	2301      	movs	r3, #1
  4003ac:	e005      	b.n	4003ba <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4003ae:	687b      	ldr	r3, [r7, #4]
  4003b0:	699b      	ldr	r3, [r3, #24]
  4003b2:	b2da      	uxtb	r2, r3
  4003b4:	683b      	ldr	r3, [r7, #0]
  4003b6:	701a      	strb	r2, [r3, #0]
	return 0;
  4003b8:	2300      	movs	r3, #0
}
  4003ba:	4618      	mov	r0, r3
  4003bc:	370c      	adds	r7, #12
  4003be:	46bd      	mov	sp, r7
  4003c0:	bc80      	pop	{r7}
  4003c2:	4770      	bx	lr

004003c4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4003c4:	b480      	push	{r7}
  4003c6:	b089      	sub	sp, #36	; 0x24
  4003c8:	af00      	add	r7, sp, #0
  4003ca:	60f8      	str	r0, [r7, #12]
  4003cc:	60b9      	str	r1, [r7, #8]
  4003ce:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4003d0:	68bb      	ldr	r3, [r7, #8]
  4003d2:	011a      	lsls	r2, r3, #4
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	429a      	cmp	r2, r3
  4003d8:	d802      	bhi.n	4003e0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4003da:	2310      	movs	r3, #16
  4003dc:	61fb      	str	r3, [r7, #28]
  4003de:	e001      	b.n	4003e4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4003e0:	2308      	movs	r3, #8
  4003e2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4003e4:	687b      	ldr	r3, [r7, #4]
  4003e6:	00da      	lsls	r2, r3, #3
  4003e8:	69fb      	ldr	r3, [r7, #28]
  4003ea:	68b9      	ldr	r1, [r7, #8]
  4003ec:	fb01 f303 	mul.w	r3, r1, r3
  4003f0:	085b      	lsrs	r3, r3, #1
  4003f2:	441a      	add	r2, r3
  4003f4:	69fb      	ldr	r3, [r7, #28]
  4003f6:	68b9      	ldr	r1, [r7, #8]
  4003f8:	fb01 f303 	mul.w	r3, r1, r3
  4003fc:	fbb2 f3f3 	udiv	r3, r2, r3
  400400:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400402:	69bb      	ldr	r3, [r7, #24]
  400404:	08db      	lsrs	r3, r3, #3
  400406:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400408:	69bb      	ldr	r3, [r7, #24]
  40040a:	f003 0307 	and.w	r3, r3, #7
  40040e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400410:	697b      	ldr	r3, [r7, #20]
  400412:	2b00      	cmp	r3, #0
  400414:	d003      	beq.n	40041e <usart_set_async_baudrate+0x5a>
  400416:	697b      	ldr	r3, [r7, #20]
  400418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40041c:	d301      	bcc.n	400422 <usart_set_async_baudrate+0x5e>
		return 1;
  40041e:	2301      	movs	r3, #1
  400420:	e00f      	b.n	400442 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400422:	69fb      	ldr	r3, [r7, #28]
  400424:	2b08      	cmp	r3, #8
  400426:	d105      	bne.n	400434 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400428:	68fb      	ldr	r3, [r7, #12]
  40042a:	685b      	ldr	r3, [r3, #4]
  40042c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400430:	68fb      	ldr	r3, [r7, #12]
  400432:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400434:	693b      	ldr	r3, [r7, #16]
  400436:	041a      	lsls	r2, r3, #16
  400438:	697b      	ldr	r3, [r7, #20]
  40043a:	431a      	orrs	r2, r3
  40043c:	68fb      	ldr	r3, [r7, #12]
  40043e:	621a      	str	r2, [r3, #32]

	return 0;
  400440:	2300      	movs	r3, #0
}
  400442:	4618      	mov	r0, r3
  400444:	3724      	adds	r7, #36	; 0x24
  400446:	46bd      	mov	sp, r7
  400448:	bc80      	pop	{r7}
  40044a:	4770      	bx	lr

0040044c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40044c:	b580      	push	{r7, lr}
  40044e:	b082      	sub	sp, #8
  400450:	af00      	add	r7, sp, #0
  400452:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400454:	6878      	ldr	r0, [r7, #4]
  400456:	4b0f      	ldr	r3, [pc, #60]	; (400494 <usart_reset+0x48>)
  400458:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40045a:	687b      	ldr	r3, [r7, #4]
  40045c:	2200      	movs	r2, #0
  40045e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400460:	687b      	ldr	r3, [r7, #4]
  400462:	2200      	movs	r2, #0
  400464:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400466:	687b      	ldr	r3, [r7, #4]
  400468:	2200      	movs	r2, #0
  40046a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40046c:	6878      	ldr	r0, [r7, #4]
  40046e:	4b0a      	ldr	r3, [pc, #40]	; (400498 <usart_reset+0x4c>)
  400470:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400472:	6878      	ldr	r0, [r7, #4]
  400474:	4b09      	ldr	r3, [pc, #36]	; (40049c <usart_reset+0x50>)
  400476:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400478:	6878      	ldr	r0, [r7, #4]
  40047a:	4b09      	ldr	r3, [pc, #36]	; (4004a0 <usart_reset+0x54>)
  40047c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40047e:	6878      	ldr	r0, [r7, #4]
  400480:	4b08      	ldr	r3, [pc, #32]	; (4004a4 <usart_reset+0x58>)
  400482:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400484:	6878      	ldr	r0, [r7, #4]
  400486:	4b08      	ldr	r3, [pc, #32]	; (4004a8 <usart_reset+0x5c>)
  400488:	4798      	blx	r3
#endif
}
  40048a:	bf00      	nop
  40048c:	3708      	adds	r7, #8
  40048e:	46bd      	mov	sp, r7
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	00400649 	.word	0x00400649
  400498:	00400549 	.word	0x00400549
  40049c:	00400579 	.word	0x00400579
  4004a0:	00400591 	.word	0x00400591
  4004a4:	004005c9 	.word	0x004005c9
  4004a8:	004005ad 	.word	0x004005ad

004004ac <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4004ac:	b580      	push	{r7, lr}
  4004ae:	b084      	sub	sp, #16
  4004b0:	af00      	add	r7, sp, #0
  4004b2:	60f8      	str	r0, [r7, #12]
  4004b4:	60b9      	str	r1, [r7, #8]
  4004b6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4004b8:	68f8      	ldr	r0, [r7, #12]
  4004ba:	4b1a      	ldr	r3, [pc, #104]	; (400524 <usart_init_rs232+0x78>)
  4004bc:	4798      	blx	r3

	ul_reg_val = 0;
  4004be:	4b1a      	ldr	r3, [pc, #104]	; (400528 <usart_init_rs232+0x7c>)
  4004c0:	2200      	movs	r2, #0
  4004c2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4004c4:	68bb      	ldr	r3, [r7, #8]
  4004c6:	2b00      	cmp	r3, #0
  4004c8:	d009      	beq.n	4004de <usart_init_rs232+0x32>
  4004ca:	68bb      	ldr	r3, [r7, #8]
  4004cc:	681b      	ldr	r3, [r3, #0]
  4004ce:	687a      	ldr	r2, [r7, #4]
  4004d0:	4619      	mov	r1, r3
  4004d2:	68f8      	ldr	r0, [r7, #12]
  4004d4:	4b15      	ldr	r3, [pc, #84]	; (40052c <usart_init_rs232+0x80>)
  4004d6:	4798      	blx	r3
  4004d8:	4603      	mov	r3, r0
  4004da:	2b00      	cmp	r3, #0
  4004dc:	d001      	beq.n	4004e2 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4004de:	2301      	movs	r3, #1
  4004e0:	e01b      	b.n	40051a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4004e2:	68bb      	ldr	r3, [r7, #8]
  4004e4:	685a      	ldr	r2, [r3, #4]
  4004e6:	68bb      	ldr	r3, [r7, #8]
  4004e8:	689b      	ldr	r3, [r3, #8]
  4004ea:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4004ec:	68bb      	ldr	r3, [r7, #8]
  4004ee:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4004f0:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4004f2:	68bb      	ldr	r3, [r7, #8]
  4004f4:	68db      	ldr	r3, [r3, #12]
  4004f6:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4004f8:	4b0b      	ldr	r3, [pc, #44]	; (400528 <usart_init_rs232+0x7c>)
  4004fa:	681b      	ldr	r3, [r3, #0]
  4004fc:	4313      	orrs	r3, r2
  4004fe:	4a0a      	ldr	r2, [pc, #40]	; (400528 <usart_init_rs232+0x7c>)
  400500:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400502:	4b09      	ldr	r3, [pc, #36]	; (400528 <usart_init_rs232+0x7c>)
  400504:	681b      	ldr	r3, [r3, #0]
  400506:	4a08      	ldr	r2, [pc, #32]	; (400528 <usart_init_rs232+0x7c>)
  400508:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40050a:	68fb      	ldr	r3, [r7, #12]
  40050c:	685a      	ldr	r2, [r3, #4]
  40050e:	4b06      	ldr	r3, [pc, #24]	; (400528 <usart_init_rs232+0x7c>)
  400510:	681b      	ldr	r3, [r3, #0]
  400512:	431a      	orrs	r2, r3
  400514:	68fb      	ldr	r3, [r7, #12]
  400516:	605a      	str	r2, [r3, #4]

	return 0;
  400518:	2300      	movs	r3, #0
}
  40051a:	4618      	mov	r0, r3
  40051c:	3710      	adds	r7, #16
  40051e:	46bd      	mov	sp, r7
  400520:	bd80      	pop	{r7, pc}
  400522:	bf00      	nop
  400524:	0040044d 	.word	0x0040044d
  400528:	20000904 	.word	0x20000904
  40052c:	004003c5 	.word	0x004003c5

00400530 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400530:	b480      	push	{r7}
  400532:	b083      	sub	sp, #12
  400534:	af00      	add	r7, sp, #0
  400536:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400538:	687b      	ldr	r3, [r7, #4]
  40053a:	2240      	movs	r2, #64	; 0x40
  40053c:	601a      	str	r2, [r3, #0]
}
  40053e:	bf00      	nop
  400540:	370c      	adds	r7, #12
  400542:	46bd      	mov	sp, r7
  400544:	bc80      	pop	{r7}
  400546:	4770      	bx	lr

00400548 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400548:	b480      	push	{r7}
  40054a:	b083      	sub	sp, #12
  40054c:	af00      	add	r7, sp, #0
  40054e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400550:	687b      	ldr	r3, [r7, #4]
  400552:	2288      	movs	r2, #136	; 0x88
  400554:	601a      	str	r2, [r3, #0]
}
  400556:	bf00      	nop
  400558:	370c      	adds	r7, #12
  40055a:	46bd      	mov	sp, r7
  40055c:	bc80      	pop	{r7}
  40055e:	4770      	bx	lr

00400560 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400560:	b480      	push	{r7}
  400562:	b083      	sub	sp, #12
  400564:	af00      	add	r7, sp, #0
  400566:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	2210      	movs	r2, #16
  40056c:	601a      	str	r2, [r3, #0]
}
  40056e:	bf00      	nop
  400570:	370c      	adds	r7, #12
  400572:	46bd      	mov	sp, r7
  400574:	bc80      	pop	{r7}
  400576:	4770      	bx	lr

00400578 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400578:	b480      	push	{r7}
  40057a:	b083      	sub	sp, #12
  40057c:	af00      	add	r7, sp, #0
  40057e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400580:	687b      	ldr	r3, [r7, #4]
  400582:	2224      	movs	r2, #36	; 0x24
  400584:	601a      	str	r2, [r3, #0]
}
  400586:	bf00      	nop
  400588:	370c      	adds	r7, #12
  40058a:	46bd      	mov	sp, r7
  40058c:	bc80      	pop	{r7}
  40058e:	4770      	bx	lr

00400590 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400590:	b480      	push	{r7}
  400592:	b083      	sub	sp, #12
  400594:	af00      	add	r7, sp, #0
  400596:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400598:	687b      	ldr	r3, [r7, #4]
  40059a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40059e:	601a      	str	r2, [r3, #0]
}
  4005a0:	bf00      	nop
  4005a2:	370c      	adds	r7, #12
  4005a4:	46bd      	mov	sp, r7
  4005a6:	bc80      	pop	{r7}
  4005a8:	4770      	bx	lr
  4005aa:	bf00      	nop

004005ac <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4005ac:	b480      	push	{r7}
  4005ae:	b083      	sub	sp, #12
  4005b0:	af00      	add	r7, sp, #0
  4005b2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4005ba:	601a      	str	r2, [r3, #0]
}
  4005bc:	bf00      	nop
  4005be:	370c      	adds	r7, #12
  4005c0:	46bd      	mov	sp, r7
  4005c2:	bc80      	pop	{r7}
  4005c4:	4770      	bx	lr
  4005c6:	bf00      	nop

004005c8 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4005c8:	b480      	push	{r7}
  4005ca:	b083      	sub	sp, #12
  4005cc:	af00      	add	r7, sp, #0
  4005ce:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4005d0:	687b      	ldr	r3, [r7, #4]
  4005d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4005d6:	601a      	str	r2, [r3, #0]
}
  4005d8:	bf00      	nop
  4005da:	370c      	adds	r7, #12
  4005dc:	46bd      	mov	sp, r7
  4005de:	bc80      	pop	{r7}
  4005e0:	4770      	bx	lr
  4005e2:	bf00      	nop

004005e4 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4005e4:	b480      	push	{r7}
  4005e6:	b083      	sub	sp, #12
  4005e8:	af00      	add	r7, sp, #0
  4005ea:	6078      	str	r0, [r7, #4]
  4005ec:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4005ee:	687b      	ldr	r3, [r7, #4]
  4005f0:	695b      	ldr	r3, [r3, #20]
  4005f2:	f003 0302 	and.w	r3, r3, #2
  4005f6:	2b00      	cmp	r3, #0
  4005f8:	d101      	bne.n	4005fe <usart_write+0x1a>
		return 1;
  4005fa:	2301      	movs	r3, #1
  4005fc:	e005      	b.n	40060a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4005fe:	683b      	ldr	r3, [r7, #0]
  400600:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400604:	687b      	ldr	r3, [r7, #4]
  400606:	61da      	str	r2, [r3, #28]
	return 0;
  400608:	2300      	movs	r3, #0
}
  40060a:	4618      	mov	r0, r3
  40060c:	370c      	adds	r7, #12
  40060e:	46bd      	mov	sp, r7
  400610:	bc80      	pop	{r7}
  400612:	4770      	bx	lr

00400614 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400614:	b480      	push	{r7}
  400616:	b083      	sub	sp, #12
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40061e:	687b      	ldr	r3, [r7, #4]
  400620:	695b      	ldr	r3, [r3, #20]
  400622:	f003 0301 	and.w	r3, r3, #1
  400626:	2b00      	cmp	r3, #0
  400628:	d101      	bne.n	40062e <usart_read+0x1a>
		return 1;
  40062a:	2301      	movs	r3, #1
  40062c:	e006      	b.n	40063c <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40062e:	687b      	ldr	r3, [r7, #4]
  400630:	699b      	ldr	r3, [r3, #24]
  400632:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400636:	683b      	ldr	r3, [r7, #0]
  400638:	601a      	str	r2, [r3, #0]

	return 0;
  40063a:	2300      	movs	r3, #0
}
  40063c:	4618      	mov	r0, r3
  40063e:	370c      	adds	r7, #12
  400640:	46bd      	mov	sp, r7
  400642:	bc80      	pop	{r7}
  400644:	4770      	bx	lr
  400646:	bf00      	nop

00400648 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400648:	b480      	push	{r7}
  40064a:	b083      	sub	sp, #12
  40064c:	af00      	add	r7, sp, #0
  40064e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400650:	687b      	ldr	r3, [r7, #4]
  400652:	4a04      	ldr	r2, [pc, #16]	; (400664 <usart_disable_writeprotect+0x1c>)
  400654:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400658:	bf00      	nop
  40065a:	370c      	adds	r7, #12
  40065c:	46bd      	mov	sp, r7
  40065e:	bc80      	pop	{r7}
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	55534100 	.word	0x55534100

00400668 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400668:	b580      	push	{r7, lr}
  40066a:	b082      	sub	sp, #8
  40066c:	af00      	add	r7, sp, #0
  40066e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400670:	687b      	ldr	r3, [r7, #4]
  400672:	2b07      	cmp	r3, #7
  400674:	d831      	bhi.n	4006da <osc_enable+0x72>
  400676:	a201      	add	r2, pc, #4	; (adr r2, 40067c <osc_enable+0x14>)
  400678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40067c:	004006d9 	.word	0x004006d9
  400680:	0040069d 	.word	0x0040069d
  400684:	004006a5 	.word	0x004006a5
  400688:	004006ad 	.word	0x004006ad
  40068c:	004006b5 	.word	0x004006b5
  400690:	004006bd 	.word	0x004006bd
  400694:	004006c5 	.word	0x004006c5
  400698:	004006cf 	.word	0x004006cf
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40069c:	2000      	movs	r0, #0
  40069e:	4b11      	ldr	r3, [pc, #68]	; (4006e4 <osc_enable+0x7c>)
  4006a0:	4798      	blx	r3
		break;
  4006a2:	e01a      	b.n	4006da <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4006a4:	2001      	movs	r0, #1
  4006a6:	4b0f      	ldr	r3, [pc, #60]	; (4006e4 <osc_enable+0x7c>)
  4006a8:	4798      	blx	r3
		break;
  4006aa:	e016      	b.n	4006da <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4006ac:	2000      	movs	r0, #0
  4006ae:	4b0e      	ldr	r3, [pc, #56]	; (4006e8 <osc_enable+0x80>)
  4006b0:	4798      	blx	r3
		break;
  4006b2:	e012      	b.n	4006da <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4006b4:	2010      	movs	r0, #16
  4006b6:	4b0c      	ldr	r3, [pc, #48]	; (4006e8 <osc_enable+0x80>)
  4006b8:	4798      	blx	r3
		break;
  4006ba:	e00e      	b.n	4006da <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4006bc:	2020      	movs	r0, #32
  4006be:	4b0a      	ldr	r3, [pc, #40]	; (4006e8 <osc_enable+0x80>)
  4006c0:	4798      	blx	r3
		break;
  4006c2:	e00a      	b.n	4006da <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4006c4:	213e      	movs	r1, #62	; 0x3e
  4006c6:	2000      	movs	r0, #0
  4006c8:	4b08      	ldr	r3, [pc, #32]	; (4006ec <osc_enable+0x84>)
  4006ca:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4006cc:	e005      	b.n	4006da <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4006ce:	213e      	movs	r1, #62	; 0x3e
  4006d0:	2001      	movs	r0, #1
  4006d2:	4b06      	ldr	r3, [pc, #24]	; (4006ec <osc_enable+0x84>)
  4006d4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4006d6:	e000      	b.n	4006da <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  4006d8:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  4006da:	bf00      	nop
  4006dc:	3708      	adds	r7, #8
  4006de:	46bd      	mov	sp, r7
  4006e0:	bd80      	pop	{r7, pc}
  4006e2:	bf00      	nop
  4006e4:	00400fad 	.word	0x00400fad
  4006e8:	00401019 	.word	0x00401019
  4006ec:	00401089 	.word	0x00401089

004006f0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4006f0:	b580      	push	{r7, lr}
  4006f2:	b082      	sub	sp, #8
  4006f4:	af00      	add	r7, sp, #0
  4006f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4006f8:	687b      	ldr	r3, [r7, #4]
  4006fa:	2b07      	cmp	r3, #7
  4006fc:	d826      	bhi.n	40074c <osc_is_ready+0x5c>
  4006fe:	a201      	add	r2, pc, #4	; (adr r2, 400704 <osc_is_ready+0x14>)
  400700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400704:	00400725 	.word	0x00400725
  400708:	00400729 	.word	0x00400729
  40070c:	00400729 	.word	0x00400729
  400710:	0040073b 	.word	0x0040073b
  400714:	0040073b 	.word	0x0040073b
  400718:	0040073b 	.word	0x0040073b
  40071c:	0040073b 	.word	0x0040073b
  400720:	0040073b 	.word	0x0040073b
	case OSC_SLCK_32K_RC:
		return 1;
  400724:	2301      	movs	r3, #1
  400726:	e012      	b.n	40074e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400728:	4b0b      	ldr	r3, [pc, #44]	; (400758 <osc_is_ready+0x68>)
  40072a:	4798      	blx	r3
  40072c:	4603      	mov	r3, r0
  40072e:	2b00      	cmp	r3, #0
  400730:	bf14      	ite	ne
  400732:	2301      	movne	r3, #1
  400734:	2300      	moveq	r3, #0
  400736:	b2db      	uxtb	r3, r3
  400738:	e009      	b.n	40074e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40073a:	4b08      	ldr	r3, [pc, #32]	; (40075c <osc_is_ready+0x6c>)
  40073c:	4798      	blx	r3
  40073e:	4603      	mov	r3, r0
  400740:	2b00      	cmp	r3, #0
  400742:	bf14      	ite	ne
  400744:	2301      	movne	r3, #1
  400746:	2300      	moveq	r3, #0
  400748:	b2db      	uxtb	r3, r3
  40074a:	e000      	b.n	40074e <osc_is_ready+0x5e>
	}

	return 0;
  40074c:	2300      	movs	r3, #0
}
  40074e:	4618      	mov	r0, r3
  400750:	3708      	adds	r7, #8
  400752:	46bd      	mov	sp, r7
  400754:	bd80      	pop	{r7, pc}
  400756:	bf00      	nop
  400758:	00400fe5 	.word	0x00400fe5
  40075c:	00401101 	.word	0x00401101

00400760 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400760:	b480      	push	{r7}
  400762:	b083      	sub	sp, #12
  400764:	af00      	add	r7, sp, #0
  400766:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400768:	687b      	ldr	r3, [r7, #4]
  40076a:	2b07      	cmp	r3, #7
  40076c:	d825      	bhi.n	4007ba <osc_get_rate+0x5a>
  40076e:	a201      	add	r2, pc, #4	; (adr r2, 400774 <osc_get_rate+0x14>)
  400770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400774:	00400795 	.word	0x00400795
  400778:	0040079b 	.word	0x0040079b
  40077c:	004007a1 	.word	0x004007a1
  400780:	004007a7 	.word	0x004007a7
  400784:	004007ab 	.word	0x004007ab
  400788:	004007af 	.word	0x004007af
  40078c:	004007b3 	.word	0x004007b3
  400790:	004007b7 	.word	0x004007b7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400794:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400798:	e010      	b.n	4007bc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40079a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40079e:	e00d      	b.n	4007bc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4007a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4007a4:	e00a      	b.n	4007bc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4007a6:	4b08      	ldr	r3, [pc, #32]	; (4007c8 <osc_get_rate+0x68>)
  4007a8:	e008      	b.n	4007bc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4007aa:	4b08      	ldr	r3, [pc, #32]	; (4007cc <osc_get_rate+0x6c>)
  4007ac:	e006      	b.n	4007bc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4007ae:	4b08      	ldr	r3, [pc, #32]	; (4007d0 <osc_get_rate+0x70>)
  4007b0:	e004      	b.n	4007bc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4007b2:	4b07      	ldr	r3, [pc, #28]	; (4007d0 <osc_get_rate+0x70>)
  4007b4:	e002      	b.n	4007bc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4007b6:	4b06      	ldr	r3, [pc, #24]	; (4007d0 <osc_get_rate+0x70>)
  4007b8:	e000      	b.n	4007bc <osc_get_rate+0x5c>
	}

	return 0;
  4007ba:	2300      	movs	r3, #0
}
  4007bc:	4618      	mov	r0, r3
  4007be:	370c      	adds	r7, #12
  4007c0:	46bd      	mov	sp, r7
  4007c2:	bc80      	pop	{r7}
  4007c4:	4770      	bx	lr
  4007c6:	bf00      	nop
  4007c8:	003d0900 	.word	0x003d0900
  4007cc:	007a1200 	.word	0x007a1200
  4007d0:	00b71b00 	.word	0x00b71b00

004007d4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4007d4:	b580      	push	{r7, lr}
  4007d6:	b082      	sub	sp, #8
  4007d8:	af00      	add	r7, sp, #0
  4007da:	4603      	mov	r3, r0
  4007dc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4007de:	bf00      	nop
  4007e0:	79fb      	ldrb	r3, [r7, #7]
  4007e2:	4618      	mov	r0, r3
  4007e4:	4b05      	ldr	r3, [pc, #20]	; (4007fc <osc_wait_ready+0x28>)
  4007e6:	4798      	blx	r3
  4007e8:	4603      	mov	r3, r0
  4007ea:	f083 0301 	eor.w	r3, r3, #1
  4007ee:	b2db      	uxtb	r3, r3
  4007f0:	2b00      	cmp	r3, #0
  4007f2:	d1f5      	bne.n	4007e0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4007f4:	bf00      	nop
  4007f6:	3708      	adds	r7, #8
  4007f8:	46bd      	mov	sp, r7
  4007fa:	bd80      	pop	{r7, pc}
  4007fc:	004006f1 	.word	0x004006f1

00400800 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400800:	b580      	push	{r7, lr}
  400802:	b086      	sub	sp, #24
  400804:	af00      	add	r7, sp, #0
  400806:	60f8      	str	r0, [r7, #12]
  400808:	607a      	str	r2, [r7, #4]
  40080a:	603b      	str	r3, [r7, #0]
  40080c:	460b      	mov	r3, r1
  40080e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400810:	7afb      	ldrb	r3, [r7, #11]
  400812:	4618      	mov	r0, r3
  400814:	4b0d      	ldr	r3, [pc, #52]	; (40084c <pll_config_init+0x4c>)
  400816:	4798      	blx	r3
  400818:	4602      	mov	r2, r0
  40081a:	687b      	ldr	r3, [r7, #4]
  40081c:	fbb2 f3f3 	udiv	r3, r2, r3
  400820:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400822:	697b      	ldr	r3, [r7, #20]
  400824:	683a      	ldr	r2, [r7, #0]
  400826:	fb02 f303 	mul.w	r3, r2, r3
  40082a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40082c:	683b      	ldr	r3, [r7, #0]
  40082e:	3b01      	subs	r3, #1
  400830:	041a      	lsls	r2, r3, #16
  400832:	4b07      	ldr	r3, [pc, #28]	; (400850 <pll_config_init+0x50>)
  400834:	4013      	ands	r3, r2
  400836:	687a      	ldr	r2, [r7, #4]
  400838:	b2d2      	uxtb	r2, r2
  40083a:	4313      	orrs	r3, r2
  40083c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400840:	68fb      	ldr	r3, [r7, #12]
  400842:	601a      	str	r2, [r3, #0]
}
  400844:	bf00      	nop
  400846:	3718      	adds	r7, #24
  400848:	46bd      	mov	sp, r7
  40084a:	bd80      	pop	{r7, pc}
  40084c:	00400761 	.word	0x00400761
  400850:	07ff0000 	.word	0x07ff0000

00400854 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400854:	b580      	push	{r7, lr}
  400856:	b082      	sub	sp, #8
  400858:	af00      	add	r7, sp, #0
  40085a:	6078      	str	r0, [r7, #4]
  40085c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40085e:	683b      	ldr	r3, [r7, #0]
  400860:	2b00      	cmp	r3, #0
  400862:	d108      	bne.n	400876 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400864:	4b09      	ldr	r3, [pc, #36]	; (40088c <pll_enable+0x38>)
  400866:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400868:	4a09      	ldr	r2, [pc, #36]	; (400890 <pll_enable+0x3c>)
  40086a:	687b      	ldr	r3, [r7, #4]
  40086c:	681b      	ldr	r3, [r3, #0]
  40086e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400872:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400874:	e005      	b.n	400882 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400876:	4b07      	ldr	r3, [pc, #28]	; (400894 <pll_enable+0x40>)
  400878:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40087a:	4a05      	ldr	r2, [pc, #20]	; (400890 <pll_enable+0x3c>)
  40087c:	687b      	ldr	r3, [r7, #4]
  40087e:	681b      	ldr	r3, [r3, #0]
  400880:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  400882:	bf00      	nop
  400884:	3708      	adds	r7, #8
  400886:	46bd      	mov	sp, r7
  400888:	bd80      	pop	{r7, pc}
  40088a:	bf00      	nop
  40088c:	00401119 	.word	0x00401119
  400890:	400e0400 	.word	0x400e0400
  400894:	00401149 	.word	0x00401149

00400898 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400898:	b580      	push	{r7, lr}
  40089a:	b082      	sub	sp, #8
  40089c:	af00      	add	r7, sp, #0
  40089e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4008a0:	687b      	ldr	r3, [r7, #4]
  4008a2:	2b00      	cmp	r3, #0
  4008a4:	d103      	bne.n	4008ae <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4008a6:	4b05      	ldr	r3, [pc, #20]	; (4008bc <pll_is_locked+0x24>)
  4008a8:	4798      	blx	r3
  4008aa:	4603      	mov	r3, r0
  4008ac:	e002      	b.n	4008b4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4008ae:	4b04      	ldr	r3, [pc, #16]	; (4008c0 <pll_is_locked+0x28>)
  4008b0:	4798      	blx	r3
  4008b2:	4603      	mov	r3, r0
	}
}
  4008b4:	4618      	mov	r0, r3
  4008b6:	3708      	adds	r7, #8
  4008b8:	46bd      	mov	sp, r7
  4008ba:	bd80      	pop	{r7, pc}
  4008bc:	00401131 	.word	0x00401131
  4008c0:	00401161 	.word	0x00401161

004008c4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4008c4:	b580      	push	{r7, lr}
  4008c6:	b082      	sub	sp, #8
  4008c8:	af00      	add	r7, sp, #0
  4008ca:	4603      	mov	r3, r0
  4008cc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4008ce:	79fb      	ldrb	r3, [r7, #7]
  4008d0:	3b03      	subs	r3, #3
  4008d2:	2b04      	cmp	r3, #4
  4008d4:	d808      	bhi.n	4008e8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4008d6:	79fb      	ldrb	r3, [r7, #7]
  4008d8:	4618      	mov	r0, r3
  4008da:	4b06      	ldr	r3, [pc, #24]	; (4008f4 <pll_enable_source+0x30>)
  4008dc:	4798      	blx	r3
		osc_wait_ready(e_src);
  4008de:	79fb      	ldrb	r3, [r7, #7]
  4008e0:	4618      	mov	r0, r3
  4008e2:	4b05      	ldr	r3, [pc, #20]	; (4008f8 <pll_enable_source+0x34>)
  4008e4:	4798      	blx	r3
		break;
  4008e6:	e000      	b.n	4008ea <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4008e8:	bf00      	nop
	}
}
  4008ea:	bf00      	nop
  4008ec:	3708      	adds	r7, #8
  4008ee:	46bd      	mov	sp, r7
  4008f0:	bd80      	pop	{r7, pc}
  4008f2:	bf00      	nop
  4008f4:	00400669 	.word	0x00400669
  4008f8:	004007d5 	.word	0x004007d5

004008fc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4008fc:	b580      	push	{r7, lr}
  4008fe:	b082      	sub	sp, #8
  400900:	af00      	add	r7, sp, #0
  400902:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400904:	bf00      	nop
  400906:	6878      	ldr	r0, [r7, #4]
  400908:	4b04      	ldr	r3, [pc, #16]	; (40091c <pll_wait_for_lock+0x20>)
  40090a:	4798      	blx	r3
  40090c:	4603      	mov	r3, r0
  40090e:	2b00      	cmp	r3, #0
  400910:	d0f9      	beq.n	400906 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400912:	2300      	movs	r3, #0
}
  400914:	4618      	mov	r0, r3
  400916:	3708      	adds	r7, #8
  400918:	46bd      	mov	sp, r7
  40091a:	bd80      	pop	{r7, pc}
  40091c:	00400899 	.word	0x00400899

00400920 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400920:	b580      	push	{r7, lr}
  400922:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400924:	2006      	movs	r0, #6
  400926:	4b04      	ldr	r3, [pc, #16]	; (400938 <sysclk_get_main_hz+0x18>)
  400928:	4798      	blx	r3
  40092a:	4602      	mov	r2, r0
  40092c:	4613      	mov	r3, r2
  40092e:	009b      	lsls	r3, r3, #2
  400930:	4413      	add	r3, r2
  400932:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400934:	4618      	mov	r0, r3
  400936:	bd80      	pop	{r7, pc}
  400938:	00400761 	.word	0x00400761

0040093c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40093c:	b580      	push	{r7, lr}
  40093e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400940:	4b02      	ldr	r3, [pc, #8]	; (40094c <sysclk_get_cpu_hz+0x10>)
  400942:	4798      	blx	r3
  400944:	4603      	mov	r3, r0
  400946:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400948:	4618      	mov	r0, r3
  40094a:	bd80      	pop	{r7, pc}
  40094c:	00400921 	.word	0x00400921

00400950 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400950:	b590      	push	{r4, r7, lr}
  400952:	b083      	sub	sp, #12
  400954:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400956:	4811      	ldr	r0, [pc, #68]	; (40099c <sysclk_init+0x4c>)
  400958:	4b11      	ldr	r3, [pc, #68]	; (4009a0 <sysclk_init+0x50>)
  40095a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40095c:	2006      	movs	r0, #6
  40095e:	4b11      	ldr	r3, [pc, #68]	; (4009a4 <sysclk_init+0x54>)
  400960:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400962:	1d38      	adds	r0, r7, #4
  400964:	2314      	movs	r3, #20
  400966:	2201      	movs	r2, #1
  400968:	2106      	movs	r1, #6
  40096a:	4c0f      	ldr	r4, [pc, #60]	; (4009a8 <sysclk_init+0x58>)
  40096c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40096e:	1d3b      	adds	r3, r7, #4
  400970:	2100      	movs	r1, #0
  400972:	4618      	mov	r0, r3
  400974:	4b0d      	ldr	r3, [pc, #52]	; (4009ac <sysclk_init+0x5c>)
  400976:	4798      	blx	r3
		pll_wait_for_lock(0);
  400978:	2000      	movs	r0, #0
  40097a:	4b0d      	ldr	r3, [pc, #52]	; (4009b0 <sysclk_init+0x60>)
  40097c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40097e:	2010      	movs	r0, #16
  400980:	4b0c      	ldr	r3, [pc, #48]	; (4009b4 <sysclk_init+0x64>)
  400982:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400984:	4b0c      	ldr	r3, [pc, #48]	; (4009b8 <sysclk_init+0x68>)
  400986:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400988:	4b0c      	ldr	r3, [pc, #48]	; (4009bc <sysclk_init+0x6c>)
  40098a:	4798      	blx	r3
  40098c:	4603      	mov	r3, r0
  40098e:	4618      	mov	r0, r3
  400990:	4b03      	ldr	r3, [pc, #12]	; (4009a0 <sysclk_init+0x50>)
  400992:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400994:	bf00      	nop
  400996:	370c      	adds	r7, #12
  400998:	46bd      	mov	sp, r7
  40099a:	bd90      	pop	{r4, r7, pc}
  40099c:	07270e00 	.word	0x07270e00
  4009a0:	004014d9 	.word	0x004014d9
  4009a4:	004008c5 	.word	0x004008c5
  4009a8:	00400801 	.word	0x00400801
  4009ac:	00400855 	.word	0x00400855
  4009b0:	004008fd 	.word	0x004008fd
  4009b4:	00400f2d 	.word	0x00400f2d
  4009b8:	0040133d 	.word	0x0040133d
  4009bc:	0040093d 	.word	0x0040093d

004009c0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4009c0:	b480      	push	{r7}
  4009c2:	b085      	sub	sp, #20
  4009c4:	af00      	add	r7, sp, #0
  4009c6:	60f8      	str	r0, [r7, #12]
  4009c8:	60b9      	str	r1, [r7, #8]
  4009ca:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4009cc:	687b      	ldr	r3, [r7, #4]
  4009ce:	2b00      	cmp	r3, #0
  4009d0:	d003      	beq.n	4009da <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4009d2:	68fb      	ldr	r3, [r7, #12]
  4009d4:	68ba      	ldr	r2, [r7, #8]
  4009d6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4009d8:	e002      	b.n	4009e0 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4009da:	68fb      	ldr	r3, [r7, #12]
  4009dc:	68ba      	ldr	r2, [r7, #8]
  4009de:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  4009e0:	bf00      	nop
  4009e2:	3714      	adds	r7, #20
  4009e4:	46bd      	mov	sp, r7
  4009e6:	bc80      	pop	{r7}
  4009e8:	4770      	bx	lr
  4009ea:	bf00      	nop

004009ec <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4009ec:	b480      	push	{r7}
  4009ee:	b087      	sub	sp, #28
  4009f0:	af00      	add	r7, sp, #0
  4009f2:	60f8      	str	r0, [r7, #12]
  4009f4:	60b9      	str	r1, [r7, #8]
  4009f6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4009f8:	68fb      	ldr	r3, [r7, #12]
  4009fa:	687a      	ldr	r2, [r7, #4]
  4009fc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4009fe:	68bb      	ldr	r3, [r7, #8]
  400a00:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400a04:	d04a      	beq.n	400a9c <pio_set_peripheral+0xb0>
  400a06:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400a0a:	d808      	bhi.n	400a1e <pio_set_peripheral+0x32>
  400a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400a10:	d016      	beq.n	400a40 <pio_set_peripheral+0x54>
  400a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400a16:	d02c      	beq.n	400a72 <pio_set_peripheral+0x86>
  400a18:	2b00      	cmp	r3, #0
  400a1a:	d069      	beq.n	400af0 <pio_set_peripheral+0x104>
  400a1c:	e064      	b.n	400ae8 <pio_set_peripheral+0xfc>
  400a1e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400a22:	d065      	beq.n	400af0 <pio_set_peripheral+0x104>
  400a24:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400a28:	d803      	bhi.n	400a32 <pio_set_peripheral+0x46>
  400a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400a2e:	d04a      	beq.n	400ac6 <pio_set_peripheral+0xda>
  400a30:	e05a      	b.n	400ae8 <pio_set_peripheral+0xfc>
  400a32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400a36:	d05b      	beq.n	400af0 <pio_set_peripheral+0x104>
  400a38:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400a3c:	d058      	beq.n	400af0 <pio_set_peripheral+0x104>
  400a3e:	e053      	b.n	400ae8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a40:	68fb      	ldr	r3, [r7, #12]
  400a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400a44:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a46:	68fb      	ldr	r3, [r7, #12]
  400a48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a4a:	687b      	ldr	r3, [r7, #4]
  400a4c:	43d9      	mvns	r1, r3
  400a4e:	697b      	ldr	r3, [r7, #20]
  400a50:	400b      	ands	r3, r1
  400a52:	401a      	ands	r2, r3
  400a54:	68fb      	ldr	r3, [r7, #12]
  400a56:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a58:	68fb      	ldr	r3, [r7, #12]
  400a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400a5c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a5e:	68fb      	ldr	r3, [r7, #12]
  400a60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a62:	687b      	ldr	r3, [r7, #4]
  400a64:	43d9      	mvns	r1, r3
  400a66:	697b      	ldr	r3, [r7, #20]
  400a68:	400b      	ands	r3, r1
  400a6a:	401a      	ands	r2, r3
  400a6c:	68fb      	ldr	r3, [r7, #12]
  400a6e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400a70:	e03a      	b.n	400ae8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a72:	68fb      	ldr	r3, [r7, #12]
  400a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400a76:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a78:	687a      	ldr	r2, [r7, #4]
  400a7a:	697b      	ldr	r3, [r7, #20]
  400a7c:	431a      	orrs	r2, r3
  400a7e:	68fb      	ldr	r3, [r7, #12]
  400a80:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a82:	68fb      	ldr	r3, [r7, #12]
  400a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400a86:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a88:	68fb      	ldr	r3, [r7, #12]
  400a8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a8c:	687b      	ldr	r3, [r7, #4]
  400a8e:	43d9      	mvns	r1, r3
  400a90:	697b      	ldr	r3, [r7, #20]
  400a92:	400b      	ands	r3, r1
  400a94:	401a      	ands	r2, r3
  400a96:	68fb      	ldr	r3, [r7, #12]
  400a98:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400a9a:	e025      	b.n	400ae8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a9c:	68fb      	ldr	r3, [r7, #12]
  400a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400aa0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400aa2:	68fb      	ldr	r3, [r7, #12]
  400aa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400aa6:	687b      	ldr	r3, [r7, #4]
  400aa8:	43d9      	mvns	r1, r3
  400aaa:	697b      	ldr	r3, [r7, #20]
  400aac:	400b      	ands	r3, r1
  400aae:	401a      	ands	r2, r3
  400ab0:	68fb      	ldr	r3, [r7, #12]
  400ab2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ab4:	68fb      	ldr	r3, [r7, #12]
  400ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400ab8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400aba:	687a      	ldr	r2, [r7, #4]
  400abc:	697b      	ldr	r3, [r7, #20]
  400abe:	431a      	orrs	r2, r3
  400ac0:	68fb      	ldr	r3, [r7, #12]
  400ac2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400ac4:	e010      	b.n	400ae8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ac6:	68fb      	ldr	r3, [r7, #12]
  400ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400aca:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400acc:	687a      	ldr	r2, [r7, #4]
  400ace:	697b      	ldr	r3, [r7, #20]
  400ad0:	431a      	orrs	r2, r3
  400ad2:	68fb      	ldr	r3, [r7, #12]
  400ad4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ad6:	68fb      	ldr	r3, [r7, #12]
  400ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400ada:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400adc:	687a      	ldr	r2, [r7, #4]
  400ade:	697b      	ldr	r3, [r7, #20]
  400ae0:	431a      	orrs	r2, r3
  400ae2:	68fb      	ldr	r3, [r7, #12]
  400ae4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400ae6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400ae8:	68fb      	ldr	r3, [r7, #12]
  400aea:	687a      	ldr	r2, [r7, #4]
  400aec:	605a      	str	r2, [r3, #4]
  400aee:	e000      	b.n	400af2 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  400af0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  400af2:	371c      	adds	r7, #28
  400af4:	46bd      	mov	sp, r7
  400af6:	bc80      	pop	{r7}
  400af8:	4770      	bx	lr
  400afa:	bf00      	nop

00400afc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400afc:	b580      	push	{r7, lr}
  400afe:	b084      	sub	sp, #16
  400b00:	af00      	add	r7, sp, #0
  400b02:	60f8      	str	r0, [r7, #12]
  400b04:	60b9      	str	r1, [r7, #8]
  400b06:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400b08:	68b9      	ldr	r1, [r7, #8]
  400b0a:	68f8      	ldr	r0, [r7, #12]
  400b0c:	4b19      	ldr	r3, [pc, #100]	; (400b74 <pio_set_input+0x78>)
  400b0e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400b10:	687b      	ldr	r3, [r7, #4]
  400b12:	f003 0301 	and.w	r3, r3, #1
  400b16:	461a      	mov	r2, r3
  400b18:	68b9      	ldr	r1, [r7, #8]
  400b1a:	68f8      	ldr	r0, [r7, #12]
  400b1c:	4b16      	ldr	r3, [pc, #88]	; (400b78 <pio_set_input+0x7c>)
  400b1e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400b20:	687b      	ldr	r3, [r7, #4]
  400b22:	f003 030a 	and.w	r3, r3, #10
  400b26:	2b00      	cmp	r3, #0
  400b28:	d003      	beq.n	400b32 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400b2a:	68fb      	ldr	r3, [r7, #12]
  400b2c:	68ba      	ldr	r2, [r7, #8]
  400b2e:	621a      	str	r2, [r3, #32]
  400b30:	e002      	b.n	400b38 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400b32:	68fb      	ldr	r3, [r7, #12]
  400b34:	68ba      	ldr	r2, [r7, #8]
  400b36:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400b38:	687b      	ldr	r3, [r7, #4]
  400b3a:	f003 0302 	and.w	r3, r3, #2
  400b3e:	2b00      	cmp	r3, #0
  400b40:	d004      	beq.n	400b4c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400b42:	68fb      	ldr	r3, [r7, #12]
  400b44:	68ba      	ldr	r2, [r7, #8]
  400b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400b4a:	e008      	b.n	400b5e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400b4c:	687b      	ldr	r3, [r7, #4]
  400b4e:	f003 0308 	and.w	r3, r3, #8
  400b52:	2b00      	cmp	r3, #0
  400b54:	d003      	beq.n	400b5e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400b56:	68fb      	ldr	r3, [r7, #12]
  400b58:	68ba      	ldr	r2, [r7, #8]
  400b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400b5e:	68fb      	ldr	r3, [r7, #12]
  400b60:	68ba      	ldr	r2, [r7, #8]
  400b62:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400b64:	68fb      	ldr	r3, [r7, #12]
  400b66:	68ba      	ldr	r2, [r7, #8]
  400b68:	601a      	str	r2, [r3, #0]
}
  400b6a:	bf00      	nop
  400b6c:	3710      	adds	r7, #16
  400b6e:	46bd      	mov	sp, r7
  400b70:	bd80      	pop	{r7, pc}
  400b72:	bf00      	nop
  400b74:	00400be1 	.word	0x00400be1
  400b78:	004009c1 	.word	0x004009c1

00400b7c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400b7c:	b580      	push	{r7, lr}
  400b7e:	b084      	sub	sp, #16
  400b80:	af00      	add	r7, sp, #0
  400b82:	60f8      	str	r0, [r7, #12]
  400b84:	60b9      	str	r1, [r7, #8]
  400b86:	607a      	str	r2, [r7, #4]
  400b88:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400b8a:	68b9      	ldr	r1, [r7, #8]
  400b8c:	68f8      	ldr	r0, [r7, #12]
  400b8e:	4b12      	ldr	r3, [pc, #72]	; (400bd8 <pio_set_output+0x5c>)
  400b90:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400b92:	69ba      	ldr	r2, [r7, #24]
  400b94:	68b9      	ldr	r1, [r7, #8]
  400b96:	68f8      	ldr	r0, [r7, #12]
  400b98:	4b10      	ldr	r3, [pc, #64]	; (400bdc <pio_set_output+0x60>)
  400b9a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400b9c:	683b      	ldr	r3, [r7, #0]
  400b9e:	2b00      	cmp	r3, #0
  400ba0:	d003      	beq.n	400baa <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400ba2:	68fb      	ldr	r3, [r7, #12]
  400ba4:	68ba      	ldr	r2, [r7, #8]
  400ba6:	651a      	str	r2, [r3, #80]	; 0x50
  400ba8:	e002      	b.n	400bb0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400baa:	68fb      	ldr	r3, [r7, #12]
  400bac:	68ba      	ldr	r2, [r7, #8]
  400bae:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400bb0:	687b      	ldr	r3, [r7, #4]
  400bb2:	2b00      	cmp	r3, #0
  400bb4:	d003      	beq.n	400bbe <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400bb6:	68fb      	ldr	r3, [r7, #12]
  400bb8:	68ba      	ldr	r2, [r7, #8]
  400bba:	631a      	str	r2, [r3, #48]	; 0x30
  400bbc:	e002      	b.n	400bc4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400bbe:	68fb      	ldr	r3, [r7, #12]
  400bc0:	68ba      	ldr	r2, [r7, #8]
  400bc2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400bc4:	68fb      	ldr	r3, [r7, #12]
  400bc6:	68ba      	ldr	r2, [r7, #8]
  400bc8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400bca:	68fb      	ldr	r3, [r7, #12]
  400bcc:	68ba      	ldr	r2, [r7, #8]
  400bce:	601a      	str	r2, [r3, #0]
}
  400bd0:	bf00      	nop
  400bd2:	3710      	adds	r7, #16
  400bd4:	46bd      	mov	sp, r7
  400bd6:	bd80      	pop	{r7, pc}
  400bd8:	00400be1 	.word	0x00400be1
  400bdc:	004009c1 	.word	0x004009c1

00400be0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400be0:	b480      	push	{r7}
  400be2:	b083      	sub	sp, #12
  400be4:	af00      	add	r7, sp, #0
  400be6:	6078      	str	r0, [r7, #4]
  400be8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400bea:	687b      	ldr	r3, [r7, #4]
  400bec:	683a      	ldr	r2, [r7, #0]
  400bee:	645a      	str	r2, [r3, #68]	; 0x44
}
  400bf0:	bf00      	nop
  400bf2:	370c      	adds	r7, #12
  400bf4:	46bd      	mov	sp, r7
  400bf6:	bc80      	pop	{r7}
  400bf8:	4770      	bx	lr
  400bfa:	bf00      	nop

00400bfc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400bfc:	b480      	push	{r7}
  400bfe:	b083      	sub	sp, #12
  400c00:	af00      	add	r7, sp, #0
  400c02:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400c04:	687b      	ldr	r3, [r7, #4]
  400c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400c08:	4618      	mov	r0, r3
  400c0a:	370c      	adds	r7, #12
  400c0c:	46bd      	mov	sp, r7
  400c0e:	bc80      	pop	{r7}
  400c10:	4770      	bx	lr
  400c12:	bf00      	nop

00400c14 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400c14:	b480      	push	{r7}
  400c16:	b083      	sub	sp, #12
  400c18:	af00      	add	r7, sp, #0
  400c1a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400c1c:	687b      	ldr	r3, [r7, #4]
  400c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400c20:	4618      	mov	r0, r3
  400c22:	370c      	adds	r7, #12
  400c24:	46bd      	mov	sp, r7
  400c26:	bc80      	pop	{r7}
  400c28:	4770      	bx	lr
  400c2a:	bf00      	nop

00400c2c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400c2c:	b590      	push	{r4, r7, lr}
  400c2e:	b087      	sub	sp, #28
  400c30:	af02      	add	r7, sp, #8
  400c32:	6078      	str	r0, [r7, #4]
  400c34:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400c36:	6878      	ldr	r0, [r7, #4]
  400c38:	4b63      	ldr	r3, [pc, #396]	; (400dc8 <pio_configure_pin+0x19c>)
  400c3a:	4798      	blx	r3
  400c3c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400c3e:	683b      	ldr	r3, [r7, #0]
  400c40:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c48:	d067      	beq.n	400d1a <pio_configure_pin+0xee>
  400c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c4e:	d809      	bhi.n	400c64 <pio_configure_pin+0x38>
  400c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400c54:	d02b      	beq.n	400cae <pio_configure_pin+0x82>
  400c56:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400c5a:	d043      	beq.n	400ce4 <pio_configure_pin+0xb8>
  400c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400c60:	d00a      	beq.n	400c78 <pio_configure_pin+0x4c>
  400c62:	e0a9      	b.n	400db8 <pio_configure_pin+0x18c>
  400c64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400c68:	d07e      	beq.n	400d68 <pio_configure_pin+0x13c>
  400c6a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400c6e:	d07b      	beq.n	400d68 <pio_configure_pin+0x13c>
  400c70:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400c74:	d06c      	beq.n	400d50 <pio_configure_pin+0x124>
  400c76:	e09f      	b.n	400db8 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400c78:	687b      	ldr	r3, [r7, #4]
  400c7a:	f003 031f 	and.w	r3, r3, #31
  400c7e:	2201      	movs	r2, #1
  400c80:	fa02 f303 	lsl.w	r3, r2, r3
  400c84:	461a      	mov	r2, r3
  400c86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c8a:	68f8      	ldr	r0, [r7, #12]
  400c8c:	4b4f      	ldr	r3, [pc, #316]	; (400dcc <pio_configure_pin+0x1a0>)
  400c8e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400c90:	687b      	ldr	r3, [r7, #4]
  400c92:	f003 031f 	and.w	r3, r3, #31
  400c96:	2201      	movs	r2, #1
  400c98:	fa02 f303 	lsl.w	r3, r2, r3
  400c9c:	4619      	mov	r1, r3
  400c9e:	683b      	ldr	r3, [r7, #0]
  400ca0:	f003 0301 	and.w	r3, r3, #1
  400ca4:	461a      	mov	r2, r3
  400ca6:	68f8      	ldr	r0, [r7, #12]
  400ca8:	4b49      	ldr	r3, [pc, #292]	; (400dd0 <pio_configure_pin+0x1a4>)
  400caa:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400cac:	e086      	b.n	400dbc <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400cae:	687b      	ldr	r3, [r7, #4]
  400cb0:	f003 031f 	and.w	r3, r3, #31
  400cb4:	2201      	movs	r2, #1
  400cb6:	fa02 f303 	lsl.w	r3, r2, r3
  400cba:	461a      	mov	r2, r3
  400cbc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cc0:	68f8      	ldr	r0, [r7, #12]
  400cc2:	4b42      	ldr	r3, [pc, #264]	; (400dcc <pio_configure_pin+0x1a0>)
  400cc4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400cc6:	687b      	ldr	r3, [r7, #4]
  400cc8:	f003 031f 	and.w	r3, r3, #31
  400ccc:	2201      	movs	r2, #1
  400cce:	fa02 f303 	lsl.w	r3, r2, r3
  400cd2:	4619      	mov	r1, r3
  400cd4:	683b      	ldr	r3, [r7, #0]
  400cd6:	f003 0301 	and.w	r3, r3, #1
  400cda:	461a      	mov	r2, r3
  400cdc:	68f8      	ldr	r0, [r7, #12]
  400cde:	4b3c      	ldr	r3, [pc, #240]	; (400dd0 <pio_configure_pin+0x1a4>)
  400ce0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400ce2:	e06b      	b.n	400dbc <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	f003 031f 	and.w	r3, r3, #31
  400cea:	2201      	movs	r2, #1
  400cec:	fa02 f303 	lsl.w	r3, r2, r3
  400cf0:	461a      	mov	r2, r3
  400cf2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400cf6:	68f8      	ldr	r0, [r7, #12]
  400cf8:	4b34      	ldr	r3, [pc, #208]	; (400dcc <pio_configure_pin+0x1a0>)
  400cfa:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400cfc:	687b      	ldr	r3, [r7, #4]
  400cfe:	f003 031f 	and.w	r3, r3, #31
  400d02:	2201      	movs	r2, #1
  400d04:	fa02 f303 	lsl.w	r3, r2, r3
  400d08:	4619      	mov	r1, r3
  400d0a:	683b      	ldr	r3, [r7, #0]
  400d0c:	f003 0301 	and.w	r3, r3, #1
  400d10:	461a      	mov	r2, r3
  400d12:	68f8      	ldr	r0, [r7, #12]
  400d14:	4b2e      	ldr	r3, [pc, #184]	; (400dd0 <pio_configure_pin+0x1a4>)
  400d16:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400d18:	e050      	b.n	400dbc <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400d1a:	687b      	ldr	r3, [r7, #4]
  400d1c:	f003 031f 	and.w	r3, r3, #31
  400d20:	2201      	movs	r2, #1
  400d22:	fa02 f303 	lsl.w	r3, r2, r3
  400d26:	461a      	mov	r2, r3
  400d28:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400d2c:	68f8      	ldr	r0, [r7, #12]
  400d2e:	4b27      	ldr	r3, [pc, #156]	; (400dcc <pio_configure_pin+0x1a0>)
  400d30:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400d32:	687b      	ldr	r3, [r7, #4]
  400d34:	f003 031f 	and.w	r3, r3, #31
  400d38:	2201      	movs	r2, #1
  400d3a:	fa02 f303 	lsl.w	r3, r2, r3
  400d3e:	4619      	mov	r1, r3
  400d40:	683b      	ldr	r3, [r7, #0]
  400d42:	f003 0301 	and.w	r3, r3, #1
  400d46:	461a      	mov	r2, r3
  400d48:	68f8      	ldr	r0, [r7, #12]
  400d4a:	4b21      	ldr	r3, [pc, #132]	; (400dd0 <pio_configure_pin+0x1a4>)
  400d4c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400d4e:	e035      	b.n	400dbc <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400d50:	687b      	ldr	r3, [r7, #4]
  400d52:	f003 031f 	and.w	r3, r3, #31
  400d56:	2201      	movs	r2, #1
  400d58:	fa02 f303 	lsl.w	r3, r2, r3
  400d5c:	683a      	ldr	r2, [r7, #0]
  400d5e:	4619      	mov	r1, r3
  400d60:	68f8      	ldr	r0, [r7, #12]
  400d62:	4b1c      	ldr	r3, [pc, #112]	; (400dd4 <pio_configure_pin+0x1a8>)
  400d64:	4798      	blx	r3
		break;
  400d66:	e029      	b.n	400dbc <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400d68:	687b      	ldr	r3, [r7, #4]
  400d6a:	f003 031f 	and.w	r3, r3, #31
  400d6e:	2201      	movs	r2, #1
  400d70:	fa02 f303 	lsl.w	r3, r2, r3
  400d74:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400d76:	683b      	ldr	r3, [r7, #0]
  400d78:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400d7c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400d80:	bf0c      	ite	eq
  400d82:	2301      	moveq	r3, #1
  400d84:	2300      	movne	r3, #0
  400d86:	b2db      	uxtb	r3, r3
  400d88:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  400d8a:	683b      	ldr	r3, [r7, #0]
  400d8c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400d90:	2b00      	cmp	r3, #0
  400d92:	bf14      	ite	ne
  400d94:	2301      	movne	r3, #1
  400d96:	2300      	moveq	r3, #0
  400d98:	b2db      	uxtb	r3, r3
  400d9a:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  400d9c:	683b      	ldr	r3, [r7, #0]
  400d9e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400da2:	2b00      	cmp	r3, #0
  400da4:	bf14      	ite	ne
  400da6:	2301      	movne	r3, #1
  400da8:	2300      	moveq	r3, #0
  400daa:	b2db      	uxtb	r3, r3
  400dac:	9300      	str	r3, [sp, #0]
  400dae:	4603      	mov	r3, r0
  400db0:	68f8      	ldr	r0, [r7, #12]
  400db2:	4c09      	ldr	r4, [pc, #36]	; (400dd8 <pio_configure_pin+0x1ac>)
  400db4:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400db6:	e001      	b.n	400dbc <pio_configure_pin+0x190>

	default:
		return 0;
  400db8:	2300      	movs	r3, #0
  400dba:	e000      	b.n	400dbe <pio_configure_pin+0x192>
	}

	return 1;
  400dbc:	2301      	movs	r3, #1
}
  400dbe:	4618      	mov	r0, r3
  400dc0:	3714      	adds	r7, #20
  400dc2:	46bd      	mov	sp, r7
  400dc4:	bd90      	pop	{r4, r7, pc}
  400dc6:	bf00      	nop
  400dc8:	00400f09 	.word	0x00400f09
  400dcc:	004009ed 	.word	0x004009ed
  400dd0:	004009c1 	.word	0x004009c1
  400dd4:	00400afd 	.word	0x00400afd
  400dd8:	00400b7d 	.word	0x00400b7d

00400ddc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400ddc:	b590      	push	{r4, r7, lr}
  400dde:	b087      	sub	sp, #28
  400de0:	af02      	add	r7, sp, #8
  400de2:	60f8      	str	r0, [r7, #12]
  400de4:	60b9      	str	r1, [r7, #8]
  400de6:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400de8:	687b      	ldr	r3, [r7, #4]
  400dea:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400df2:	d043      	beq.n	400e7c <pio_configure_pin_group+0xa0>
  400df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400df8:	d809      	bhi.n	400e0e <pio_configure_pin_group+0x32>
  400dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400dfe:	d01f      	beq.n	400e40 <pio_configure_pin_group+0x64>
  400e00:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e04:	d02b      	beq.n	400e5e <pio_configure_pin_group+0x82>
  400e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400e0a:	d00a      	beq.n	400e22 <pio_configure_pin_group+0x46>
  400e0c:	e06d      	b.n	400eea <pio_configure_pin_group+0x10e>
  400e0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400e12:	d048      	beq.n	400ea6 <pio_configure_pin_group+0xca>
  400e14:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400e18:	d045      	beq.n	400ea6 <pio_configure_pin_group+0xca>
  400e1a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400e1e:	d03c      	beq.n	400e9a <pio_configure_pin_group+0xbe>
  400e20:	e063      	b.n	400eea <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400e22:	68ba      	ldr	r2, [r7, #8]
  400e24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e28:	68f8      	ldr	r0, [r7, #12]
  400e2a:	4b33      	ldr	r3, [pc, #204]	; (400ef8 <pio_configure_pin_group+0x11c>)
  400e2c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  400e2e:	687b      	ldr	r3, [r7, #4]
  400e30:	f003 0301 	and.w	r3, r3, #1
  400e34:	461a      	mov	r2, r3
  400e36:	68b9      	ldr	r1, [r7, #8]
  400e38:	68f8      	ldr	r0, [r7, #12]
  400e3a:	4b30      	ldr	r3, [pc, #192]	; (400efc <pio_configure_pin_group+0x120>)
  400e3c:	4798      	blx	r3
		break;
  400e3e:	e056      	b.n	400eee <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400e40:	68ba      	ldr	r2, [r7, #8]
  400e42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400e46:	68f8      	ldr	r0, [r7, #12]
  400e48:	4b2b      	ldr	r3, [pc, #172]	; (400ef8 <pio_configure_pin_group+0x11c>)
  400e4a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  400e4c:	687b      	ldr	r3, [r7, #4]
  400e4e:	f003 0301 	and.w	r3, r3, #1
  400e52:	461a      	mov	r2, r3
  400e54:	68b9      	ldr	r1, [r7, #8]
  400e56:	68f8      	ldr	r0, [r7, #12]
  400e58:	4b28      	ldr	r3, [pc, #160]	; (400efc <pio_configure_pin_group+0x120>)
  400e5a:	4798      	blx	r3
		break;
  400e5c:	e047      	b.n	400eee <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400e5e:	68ba      	ldr	r2, [r7, #8]
  400e60:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400e64:	68f8      	ldr	r0, [r7, #12]
  400e66:	4b24      	ldr	r3, [pc, #144]	; (400ef8 <pio_configure_pin_group+0x11c>)
  400e68:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  400e6a:	687b      	ldr	r3, [r7, #4]
  400e6c:	f003 0301 	and.w	r3, r3, #1
  400e70:	461a      	mov	r2, r3
  400e72:	68b9      	ldr	r1, [r7, #8]
  400e74:	68f8      	ldr	r0, [r7, #12]
  400e76:	4b21      	ldr	r3, [pc, #132]	; (400efc <pio_configure_pin_group+0x120>)
  400e78:	4798      	blx	r3
		break;
  400e7a:	e038      	b.n	400eee <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400e7c:	68ba      	ldr	r2, [r7, #8]
  400e7e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400e82:	68f8      	ldr	r0, [r7, #12]
  400e84:	4b1c      	ldr	r3, [pc, #112]	; (400ef8 <pio_configure_pin_group+0x11c>)
  400e86:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  400e88:	687b      	ldr	r3, [r7, #4]
  400e8a:	f003 0301 	and.w	r3, r3, #1
  400e8e:	461a      	mov	r2, r3
  400e90:	68b9      	ldr	r1, [r7, #8]
  400e92:	68f8      	ldr	r0, [r7, #12]
  400e94:	4b19      	ldr	r3, [pc, #100]	; (400efc <pio_configure_pin_group+0x120>)
  400e96:	4798      	blx	r3
		break;
  400e98:	e029      	b.n	400eee <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400e9a:	687a      	ldr	r2, [r7, #4]
  400e9c:	68b9      	ldr	r1, [r7, #8]
  400e9e:	68f8      	ldr	r0, [r7, #12]
  400ea0:	4b17      	ldr	r3, [pc, #92]	; (400f00 <pio_configure_pin_group+0x124>)
  400ea2:	4798      	blx	r3
		break;
  400ea4:	e023      	b.n	400eee <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400ea6:	687b      	ldr	r3, [r7, #4]
  400ea8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400eac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400eb0:	bf0c      	ite	eq
  400eb2:	2301      	moveq	r3, #1
  400eb4:	2300      	movne	r3, #0
  400eb6:	b2db      	uxtb	r3, r3
  400eb8:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  400eba:	687b      	ldr	r3, [r7, #4]
  400ebc:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400ec0:	2b00      	cmp	r3, #0
  400ec2:	bf14      	ite	ne
  400ec4:	2301      	movne	r3, #1
  400ec6:	2300      	moveq	r3, #0
  400ec8:	b2db      	uxtb	r3, r3
  400eca:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  400ecc:	687b      	ldr	r3, [r7, #4]
  400ece:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400ed2:	2b00      	cmp	r3, #0
  400ed4:	bf14      	ite	ne
  400ed6:	2301      	movne	r3, #1
  400ed8:	2300      	moveq	r3, #0
  400eda:	b2db      	uxtb	r3, r3
  400edc:	9300      	str	r3, [sp, #0]
  400ede:	460b      	mov	r3, r1
  400ee0:	68b9      	ldr	r1, [r7, #8]
  400ee2:	68f8      	ldr	r0, [r7, #12]
  400ee4:	4c07      	ldr	r4, [pc, #28]	; (400f04 <pio_configure_pin_group+0x128>)
  400ee6:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400ee8:	e001      	b.n	400eee <pio_configure_pin_group+0x112>

	default:
		return 0;
  400eea:	2300      	movs	r3, #0
  400eec:	e000      	b.n	400ef0 <pio_configure_pin_group+0x114>
	}

	return 1;
  400eee:	2301      	movs	r3, #1
}
  400ef0:	4618      	mov	r0, r3
  400ef2:	3714      	adds	r7, #20
  400ef4:	46bd      	mov	sp, r7
  400ef6:	bd90      	pop	{r4, r7, pc}
  400ef8:	004009ed 	.word	0x004009ed
  400efc:	004009c1 	.word	0x004009c1
  400f00:	00400afd 	.word	0x00400afd
  400f04:	00400b7d 	.word	0x00400b7d

00400f08 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  400f08:	b480      	push	{r7}
  400f0a:	b085      	sub	sp, #20
  400f0c:	af00      	add	r7, sp, #0
  400f0e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400f10:	687b      	ldr	r3, [r7, #4]
  400f12:	095b      	lsrs	r3, r3, #5
  400f14:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400f18:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400f1c:	025b      	lsls	r3, r3, #9
  400f1e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  400f20:	68fb      	ldr	r3, [r7, #12]
}
  400f22:	4618      	mov	r0, r3
  400f24:	3714      	adds	r7, #20
  400f26:	46bd      	mov	sp, r7
  400f28:	bc80      	pop	{r7}
  400f2a:	4770      	bx	lr

00400f2c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400f2c:	b480      	push	{r7}
  400f2e:	b085      	sub	sp, #20
  400f30:	af00      	add	r7, sp, #0
  400f32:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400f34:	491c      	ldr	r1, [pc, #112]	; (400fa8 <pmc_switch_mck_to_pllack+0x7c>)
  400f36:	4b1c      	ldr	r3, [pc, #112]	; (400fa8 <pmc_switch_mck_to_pllack+0x7c>)
  400f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400f3e:	687b      	ldr	r3, [r7, #4]
  400f40:	4313      	orrs	r3, r2
  400f42:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400f48:	60fb      	str	r3, [r7, #12]
  400f4a:	e007      	b.n	400f5c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f4c:	68fb      	ldr	r3, [r7, #12]
  400f4e:	2b00      	cmp	r3, #0
  400f50:	d101      	bne.n	400f56 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400f52:	2301      	movs	r3, #1
  400f54:	e023      	b.n	400f9e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400f56:	68fb      	ldr	r3, [r7, #12]
  400f58:	3b01      	subs	r3, #1
  400f5a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f5c:	4b12      	ldr	r3, [pc, #72]	; (400fa8 <pmc_switch_mck_to_pllack+0x7c>)
  400f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f60:	f003 0308 	and.w	r3, r3, #8
  400f64:	2b00      	cmp	r3, #0
  400f66:	d0f1      	beq.n	400f4c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f68:	4a0f      	ldr	r2, [pc, #60]	; (400fa8 <pmc_switch_mck_to_pllack+0x7c>)
  400f6a:	4b0f      	ldr	r3, [pc, #60]	; (400fa8 <pmc_switch_mck_to_pllack+0x7c>)
  400f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f6e:	f023 0303 	bic.w	r3, r3, #3
  400f72:	f043 0302 	orr.w	r3, r3, #2
  400f76:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f78:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400f7c:	60fb      	str	r3, [r7, #12]
  400f7e:	e007      	b.n	400f90 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f80:	68fb      	ldr	r3, [r7, #12]
  400f82:	2b00      	cmp	r3, #0
  400f84:	d101      	bne.n	400f8a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400f86:	2301      	movs	r3, #1
  400f88:	e009      	b.n	400f9e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400f8a:	68fb      	ldr	r3, [r7, #12]
  400f8c:	3b01      	subs	r3, #1
  400f8e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f90:	4b05      	ldr	r3, [pc, #20]	; (400fa8 <pmc_switch_mck_to_pllack+0x7c>)
  400f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f94:	f003 0308 	and.w	r3, r3, #8
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d0f1      	beq.n	400f80 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400f9c:	2300      	movs	r3, #0
}
  400f9e:	4618      	mov	r0, r3
  400fa0:	3714      	adds	r7, #20
  400fa2:	46bd      	mov	sp, r7
  400fa4:	bc80      	pop	{r7}
  400fa6:	4770      	bx	lr
  400fa8:	400e0400 	.word	0x400e0400

00400fac <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400fac:	b480      	push	{r7}
  400fae:	b083      	sub	sp, #12
  400fb0:	af00      	add	r7, sp, #0
  400fb2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400fb4:	687b      	ldr	r3, [r7, #4]
  400fb6:	2b01      	cmp	r3, #1
  400fb8:	d107      	bne.n	400fca <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400fba:	4a08      	ldr	r2, [pc, #32]	; (400fdc <pmc_switch_sclk_to_32kxtal+0x30>)
  400fbc:	4b07      	ldr	r3, [pc, #28]	; (400fdc <pmc_switch_sclk_to_32kxtal+0x30>)
  400fbe:	689b      	ldr	r3, [r3, #8]
  400fc0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400fc8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400fca:	4b04      	ldr	r3, [pc, #16]	; (400fdc <pmc_switch_sclk_to_32kxtal+0x30>)
  400fcc:	4a04      	ldr	r2, [pc, #16]	; (400fe0 <pmc_switch_sclk_to_32kxtal+0x34>)
  400fce:	601a      	str	r2, [r3, #0]
}
  400fd0:	bf00      	nop
  400fd2:	370c      	adds	r7, #12
  400fd4:	46bd      	mov	sp, r7
  400fd6:	bc80      	pop	{r7}
  400fd8:	4770      	bx	lr
  400fda:	bf00      	nop
  400fdc:	400e1410 	.word	0x400e1410
  400fe0:	a5000008 	.word	0xa5000008

00400fe4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400fe4:	b480      	push	{r7}
  400fe6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400fe8:	4b09      	ldr	r3, [pc, #36]	; (401010 <pmc_osc_is_ready_32kxtal+0x2c>)
  400fea:	695b      	ldr	r3, [r3, #20]
  400fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400ff0:	2b00      	cmp	r3, #0
  400ff2:	d007      	beq.n	401004 <pmc_osc_is_ready_32kxtal+0x20>
  400ff4:	4b07      	ldr	r3, [pc, #28]	; (401014 <pmc_osc_is_ready_32kxtal+0x30>)
  400ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400ffc:	2b00      	cmp	r3, #0
  400ffe:	d001      	beq.n	401004 <pmc_osc_is_ready_32kxtal+0x20>
  401000:	2301      	movs	r3, #1
  401002:	e000      	b.n	401006 <pmc_osc_is_ready_32kxtal+0x22>
  401004:	2300      	movs	r3, #0
}
  401006:	4618      	mov	r0, r3
  401008:	46bd      	mov	sp, r7
  40100a:	bc80      	pop	{r7}
  40100c:	4770      	bx	lr
  40100e:	bf00      	nop
  401010:	400e1410 	.word	0x400e1410
  401014:	400e0400 	.word	0x400e0400

00401018 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401018:	b480      	push	{r7}
  40101a:	b083      	sub	sp, #12
  40101c:	af00      	add	r7, sp, #0
  40101e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401020:	4a18      	ldr	r2, [pc, #96]	; (401084 <pmc_switch_mainck_to_fastrc+0x6c>)
  401022:	4b18      	ldr	r3, [pc, #96]	; (401084 <pmc_switch_mainck_to_fastrc+0x6c>)
  401024:	6a1b      	ldr	r3, [r3, #32]
  401026:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40102a:	f043 0308 	orr.w	r3, r3, #8
  40102e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401030:	bf00      	nop
  401032:	4b14      	ldr	r3, [pc, #80]	; (401084 <pmc_switch_mainck_to_fastrc+0x6c>)
  401034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40103a:	2b00      	cmp	r3, #0
  40103c:	d0f9      	beq.n	401032 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40103e:	4911      	ldr	r1, [pc, #68]	; (401084 <pmc_switch_mainck_to_fastrc+0x6c>)
  401040:	4b10      	ldr	r3, [pc, #64]	; (401084 <pmc_switch_mainck_to_fastrc+0x6c>)
  401042:	6a1b      	ldr	r3, [r3, #32]
  401044:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40104c:	687a      	ldr	r2, [r7, #4]
  40104e:	4313      	orrs	r3, r2
  401050:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401054:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401056:	bf00      	nop
  401058:	4b0a      	ldr	r3, [pc, #40]	; (401084 <pmc_switch_mainck_to_fastrc+0x6c>)
  40105a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401060:	2b00      	cmp	r3, #0
  401062:	d0f9      	beq.n	401058 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401064:	4a07      	ldr	r2, [pc, #28]	; (401084 <pmc_switch_mainck_to_fastrc+0x6c>)
  401066:	4b07      	ldr	r3, [pc, #28]	; (401084 <pmc_switch_mainck_to_fastrc+0x6c>)
  401068:	6a1b      	ldr	r3, [r3, #32]
  40106a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40106e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401072:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401076:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401078:	bf00      	nop
  40107a:	370c      	adds	r7, #12
  40107c:	46bd      	mov	sp, r7
  40107e:	bc80      	pop	{r7}
  401080:	4770      	bx	lr
  401082:	bf00      	nop
  401084:	400e0400 	.word	0x400e0400

00401088 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401088:	b480      	push	{r7}
  40108a:	b083      	sub	sp, #12
  40108c:	af00      	add	r7, sp, #0
  40108e:	6078      	str	r0, [r7, #4]
  401090:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401092:	687b      	ldr	r3, [r7, #4]
  401094:	2b00      	cmp	r3, #0
  401096:	d008      	beq.n	4010aa <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401098:	4916      	ldr	r1, [pc, #88]	; (4010f4 <pmc_switch_mainck_to_xtal+0x6c>)
  40109a:	4b16      	ldr	r3, [pc, #88]	; (4010f4 <pmc_switch_mainck_to_xtal+0x6c>)
  40109c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40109e:	4a16      	ldr	r2, [pc, #88]	; (4010f8 <pmc_switch_mainck_to_xtal+0x70>)
  4010a0:	401a      	ands	r2, r3
  4010a2:	4b16      	ldr	r3, [pc, #88]	; (4010fc <pmc_switch_mainck_to_xtal+0x74>)
  4010a4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010a6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4010a8:	e01e      	b.n	4010e8 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4010aa:	4912      	ldr	r1, [pc, #72]	; (4010f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4010ac:	4b11      	ldr	r3, [pc, #68]	; (4010f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4010ae:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4010b0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4010b4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4010b8:	683a      	ldr	r2, [r7, #0]
  4010ba:	0212      	lsls	r2, r2, #8
  4010bc:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4010be:	4313      	orrs	r3, r2
  4010c0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4010c4:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4010c8:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4010ca:	bf00      	nop
  4010cc:	4b09      	ldr	r3, [pc, #36]	; (4010f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4010ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4010d0:	f003 0301 	and.w	r3, r3, #1
  4010d4:	2b00      	cmp	r3, #0
  4010d6:	d0f9      	beq.n	4010cc <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4010d8:	4a06      	ldr	r2, [pc, #24]	; (4010f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4010da:	4b06      	ldr	r3, [pc, #24]	; (4010f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4010dc:	6a1b      	ldr	r3, [r3, #32]
  4010de:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4010e6:	6213      	str	r3, [r2, #32]
	}
}
  4010e8:	bf00      	nop
  4010ea:	370c      	adds	r7, #12
  4010ec:	46bd      	mov	sp, r7
  4010ee:	bc80      	pop	{r7}
  4010f0:	4770      	bx	lr
  4010f2:	bf00      	nop
  4010f4:	400e0400 	.word	0x400e0400
  4010f8:	fec8fffc 	.word	0xfec8fffc
  4010fc:	01370002 	.word	0x01370002

00401100 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401100:	b480      	push	{r7}
  401102:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401104:	4b03      	ldr	r3, [pc, #12]	; (401114 <pmc_osc_is_ready_mainck+0x14>)
  401106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40110c:	4618      	mov	r0, r3
  40110e:	46bd      	mov	sp, r7
  401110:	bc80      	pop	{r7}
  401112:	4770      	bx	lr
  401114:	400e0400 	.word	0x400e0400

00401118 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401118:	b480      	push	{r7}
  40111a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40111c:	4b03      	ldr	r3, [pc, #12]	; (40112c <pmc_disable_pllack+0x14>)
  40111e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401122:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401124:	bf00      	nop
  401126:	46bd      	mov	sp, r7
  401128:	bc80      	pop	{r7}
  40112a:	4770      	bx	lr
  40112c:	400e0400 	.word	0x400e0400

00401130 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401130:	b480      	push	{r7}
  401132:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401134:	4b03      	ldr	r3, [pc, #12]	; (401144 <pmc_is_locked_pllack+0x14>)
  401136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401138:	f003 0302 	and.w	r3, r3, #2
}
  40113c:	4618      	mov	r0, r3
  40113e:	46bd      	mov	sp, r7
  401140:	bc80      	pop	{r7}
  401142:	4770      	bx	lr
  401144:	400e0400 	.word	0x400e0400

00401148 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401148:	b480      	push	{r7}
  40114a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40114c:	4b03      	ldr	r3, [pc, #12]	; (40115c <pmc_disable_pllbck+0x14>)
  40114e:	2200      	movs	r2, #0
  401150:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401152:	bf00      	nop
  401154:	46bd      	mov	sp, r7
  401156:	bc80      	pop	{r7}
  401158:	4770      	bx	lr
  40115a:	bf00      	nop
  40115c:	400e0400 	.word	0x400e0400

00401160 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401160:	b480      	push	{r7}
  401162:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401164:	4b03      	ldr	r3, [pc, #12]	; (401174 <pmc_is_locked_pllbck+0x14>)
  401166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401168:	f003 0304 	and.w	r3, r3, #4
}
  40116c:	4618      	mov	r0, r3
  40116e:	46bd      	mov	sp, r7
  401170:	bc80      	pop	{r7}
  401172:	4770      	bx	lr
  401174:	400e0400 	.word	0x400e0400

00401178 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401178:	b480      	push	{r7}
  40117a:	b083      	sub	sp, #12
  40117c:	af00      	add	r7, sp, #0
  40117e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401180:	687b      	ldr	r3, [r7, #4]
  401182:	2b22      	cmp	r3, #34	; 0x22
  401184:	d901      	bls.n	40118a <pmc_enable_periph_clk+0x12>
		return 1;
  401186:	2301      	movs	r3, #1
  401188:	e02f      	b.n	4011ea <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40118a:	687b      	ldr	r3, [r7, #4]
  40118c:	2b1f      	cmp	r3, #31
  40118e:	d813      	bhi.n	4011b8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401190:	4b18      	ldr	r3, [pc, #96]	; (4011f4 <pmc_enable_periph_clk+0x7c>)
  401192:	699a      	ldr	r2, [r3, #24]
  401194:	2101      	movs	r1, #1
  401196:	687b      	ldr	r3, [r7, #4]
  401198:	fa01 f303 	lsl.w	r3, r1, r3
  40119c:	401a      	ands	r2, r3
  40119e:	2101      	movs	r1, #1
  4011a0:	687b      	ldr	r3, [r7, #4]
  4011a2:	fa01 f303 	lsl.w	r3, r1, r3
  4011a6:	429a      	cmp	r2, r3
  4011a8:	d01e      	beq.n	4011e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4011aa:	4a12      	ldr	r2, [pc, #72]	; (4011f4 <pmc_enable_periph_clk+0x7c>)
  4011ac:	2101      	movs	r1, #1
  4011ae:	687b      	ldr	r3, [r7, #4]
  4011b0:	fa01 f303 	lsl.w	r3, r1, r3
  4011b4:	6113      	str	r3, [r2, #16]
  4011b6:	e017      	b.n	4011e8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4011b8:	687b      	ldr	r3, [r7, #4]
  4011ba:	3b20      	subs	r3, #32
  4011bc:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4011be:	4b0d      	ldr	r3, [pc, #52]	; (4011f4 <pmc_enable_periph_clk+0x7c>)
  4011c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4011c4:	2101      	movs	r1, #1
  4011c6:	687b      	ldr	r3, [r7, #4]
  4011c8:	fa01 f303 	lsl.w	r3, r1, r3
  4011cc:	401a      	ands	r2, r3
  4011ce:	2101      	movs	r1, #1
  4011d0:	687b      	ldr	r3, [r7, #4]
  4011d2:	fa01 f303 	lsl.w	r3, r1, r3
  4011d6:	429a      	cmp	r2, r3
  4011d8:	d006      	beq.n	4011e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4011da:	4a06      	ldr	r2, [pc, #24]	; (4011f4 <pmc_enable_periph_clk+0x7c>)
  4011dc:	2101      	movs	r1, #1
  4011de:	687b      	ldr	r3, [r7, #4]
  4011e0:	fa01 f303 	lsl.w	r3, r1, r3
  4011e4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4011e8:	2300      	movs	r3, #0
}
  4011ea:	4618      	mov	r0, r3
  4011ec:	370c      	adds	r7, #12
  4011ee:	46bd      	mov	sp, r7
  4011f0:	bc80      	pop	{r7}
  4011f2:	4770      	bx	lr
  4011f4:	400e0400 	.word	0x400e0400

004011f8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4011f8:	b580      	push	{r7, lr}
  4011fa:	b082      	sub	sp, #8
  4011fc:	af00      	add	r7, sp, #0
  4011fe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401200:	6878      	ldr	r0, [r7, #4]
  401202:	4b03      	ldr	r3, [pc, #12]	; (401210 <sysclk_enable_peripheral_clock+0x18>)
  401204:	4798      	blx	r3
}
  401206:	bf00      	nop
  401208:	3708      	adds	r7, #8
  40120a:	46bd      	mov	sp, r7
  40120c:	bd80      	pop	{r7, pc}
  40120e:	bf00      	nop
  401210:	00401179 	.word	0x00401179

00401214 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  401214:	b580      	push	{r7, lr}
  401216:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  401218:	200b      	movs	r0, #11
  40121a:	4b05      	ldr	r3, [pc, #20]	; (401230 <ioport_init+0x1c>)
  40121c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40121e:	200c      	movs	r0, #12
  401220:	4b03      	ldr	r3, [pc, #12]	; (401230 <ioport_init+0x1c>)
  401222:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  401224:	200d      	movs	r0, #13
  401226:	4b02      	ldr	r3, [pc, #8]	; (401230 <ioport_init+0x1c>)
  401228:	4798      	blx	r3
	arch_ioport_init();
}
  40122a:	bf00      	nop
  40122c:	bd80      	pop	{r7, pc}
  40122e:	bf00      	nop
  401230:	004011f9 	.word	0x004011f9

00401234 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  401234:	b580      	push	{r7, lr}
  401236:	af00      	add	r7, sp, #0
	/* Init IO Port service to enable configuring pins */
	ioport_init();
  401238:	4b08      	ldr	r3, [pc, #32]	; (40125c <board_init+0x28>)
  40123a:	4798      	blx	r3

	/* Configure UART1 pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40123c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401240:	210c      	movs	r1, #12
  401242:	4807      	ldr	r0, [pc, #28]	; (401260 <board_init+0x2c>)
  401244:	4b07      	ldr	r3, [pc, #28]	; (401264 <board_init+0x30>)
  401246:	4798      	blx	r3

	/* Configure USART1 pins */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  401248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40124c:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
  401250:	4805      	ldr	r0, [pc, #20]	; (401268 <board_init+0x34>)
  401252:	4b04      	ldr	r3, [pc, #16]	; (401264 <board_init+0x30>)
  401254:	4798      	blx	r3
}
  401256:	bf00      	nop
  401258:	bd80      	pop	{r7, pc}
  40125a:	bf00      	nop
  40125c:	00401215 	.word	0x00401215
  401260:	400e1000 	.word	0x400e1000
  401264:	00400ddd 	.word	0x00400ddd
  401268:	400e0e00 	.word	0x400e0e00

0040126c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40126c:	b580      	push	{r7, lr}
  40126e:	b084      	sub	sp, #16
  401270:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401272:	4b27      	ldr	r3, [pc, #156]	; (401310 <Reset_Handler+0xa4>)
  401274:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401276:	4b27      	ldr	r3, [pc, #156]	; (401314 <Reset_Handler+0xa8>)
  401278:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40127a:	68fa      	ldr	r2, [r7, #12]
  40127c:	68bb      	ldr	r3, [r7, #8]
  40127e:	429a      	cmp	r2, r3
  401280:	d90d      	bls.n	40129e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401282:	e007      	b.n	401294 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401284:	68bb      	ldr	r3, [r7, #8]
  401286:	1d1a      	adds	r2, r3, #4
  401288:	60ba      	str	r2, [r7, #8]
  40128a:	68fa      	ldr	r2, [r7, #12]
  40128c:	1d11      	adds	r1, r2, #4
  40128e:	60f9      	str	r1, [r7, #12]
  401290:	6812      	ldr	r2, [r2, #0]
  401292:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401294:	68bb      	ldr	r3, [r7, #8]
  401296:	4a20      	ldr	r2, [pc, #128]	; (401318 <Reset_Handler+0xac>)
  401298:	4293      	cmp	r3, r2
  40129a:	d3f3      	bcc.n	401284 <Reset_Handler+0x18>
  40129c:	e020      	b.n	4012e0 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40129e:	68fa      	ldr	r2, [r7, #12]
  4012a0:	68bb      	ldr	r3, [r7, #8]
  4012a2:	429a      	cmp	r2, r3
  4012a4:	d21c      	bcs.n	4012e0 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4012a6:	4a1c      	ldr	r2, [pc, #112]	; (401318 <Reset_Handler+0xac>)
  4012a8:	4b1a      	ldr	r3, [pc, #104]	; (401314 <Reset_Handler+0xa8>)
  4012aa:	1ad3      	subs	r3, r2, r3
  4012ac:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4012ae:	68fa      	ldr	r2, [r7, #12]
  4012b0:	687b      	ldr	r3, [r7, #4]
  4012b2:	4413      	add	r3, r2
  4012b4:	3b04      	subs	r3, #4
  4012b6:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4012b8:	68ba      	ldr	r2, [r7, #8]
  4012ba:	687b      	ldr	r3, [r7, #4]
  4012bc:	4413      	add	r3, r2
  4012be:	3b04      	subs	r3, #4
  4012c0:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4012c2:	e00a      	b.n	4012da <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4012c4:	68bb      	ldr	r3, [r7, #8]
  4012c6:	1f1a      	subs	r2, r3, #4
  4012c8:	60ba      	str	r2, [r7, #8]
  4012ca:	68fa      	ldr	r2, [r7, #12]
  4012cc:	1f11      	subs	r1, r2, #4
  4012ce:	60f9      	str	r1, [r7, #12]
  4012d0:	6812      	ldr	r2, [r2, #0]
  4012d2:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4012d4:	687b      	ldr	r3, [r7, #4]
  4012d6:	3b04      	subs	r3, #4
  4012d8:	607b      	str	r3, [r7, #4]
  4012da:	687b      	ldr	r3, [r7, #4]
  4012dc:	2b00      	cmp	r3, #0
  4012de:	d1f1      	bne.n	4012c4 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4012e0:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4012e2:	4b0e      	ldr	r3, [pc, #56]	; (40131c <Reset_Handler+0xb0>)
  4012e4:	60bb      	str	r3, [r7, #8]
  4012e6:	e004      	b.n	4012f2 <Reset_Handler+0x86>
		*pDest++ = 0;
  4012e8:	68bb      	ldr	r3, [r7, #8]
  4012ea:	1d1a      	adds	r2, r3, #4
  4012ec:	60ba      	str	r2, [r7, #8]
  4012ee:	2200      	movs	r2, #0
  4012f0:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4012f2:	68bb      	ldr	r3, [r7, #8]
  4012f4:	4a0a      	ldr	r2, [pc, #40]	; (401320 <Reset_Handler+0xb4>)
  4012f6:	4293      	cmp	r3, r2
  4012f8:	d3f6      	bcc.n	4012e8 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4012fa:	4b0a      	ldr	r3, [pc, #40]	; (401324 <Reset_Handler+0xb8>)
  4012fc:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4012fe:	4a0a      	ldr	r2, [pc, #40]	; (401328 <Reset_Handler+0xbc>)
  401300:	68fb      	ldr	r3, [r7, #12]
  401302:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401304:	4b09      	ldr	r3, [pc, #36]	; (40132c <Reset_Handler+0xc0>)
  401306:	4798      	blx	r3

	/* Branch to main function */
	main();
  401308:	4b09      	ldr	r3, [pc, #36]	; (401330 <Reset_Handler+0xc4>)
  40130a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40130c:	e7fe      	b.n	40130c <Reset_Handler+0xa0>
  40130e:	bf00      	nop
  401310:	00404ba0 	.word	0x00404ba0
  401314:	20000000 	.word	0x20000000
  401318:	20000874 	.word	0x20000874
  40131c:	20000874 	.word	0x20000874
  401320:	20000954 	.word	0x20000954
  401324:	00400000 	.word	0x00400000
  401328:	e000ed00 	.word	0xe000ed00
  40132c:	00401ded 	.word	0x00401ded
  401330:	004019d9 	.word	0x004019d9

00401334 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401334:	b480      	push	{r7}
  401336:	af00      	add	r7, sp, #0
	while (1) {
	}
  401338:	e7fe      	b.n	401338 <Dummy_Handler+0x4>
  40133a:	bf00      	nop

0040133c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40133c:	b480      	push	{r7}
  40133e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401340:	4b5d      	ldr	r3, [pc, #372]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  401342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401344:	f003 0303 	and.w	r3, r3, #3
  401348:	2b03      	cmp	r3, #3
  40134a:	f200 8096 	bhi.w	40147a <SystemCoreClockUpdate+0x13e>
  40134e:	a201      	add	r2, pc, #4	; (adr r2, 401354 <SystemCoreClockUpdate+0x18>)
  401350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401354:	00401365 	.word	0x00401365
  401358:	00401385 	.word	0x00401385
  40135c:	004013cf 	.word	0x004013cf
  401360:	004013cf 	.word	0x004013cf
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401364:	4b55      	ldr	r3, [pc, #340]	; (4014bc <SystemCoreClockUpdate+0x180>)
  401366:	695b      	ldr	r3, [r3, #20]
  401368:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40136c:	2b00      	cmp	r3, #0
  40136e:	d004      	beq.n	40137a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401370:	4b53      	ldr	r3, [pc, #332]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401372:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401376:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401378:	e080      	b.n	40147c <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40137a:	4b51      	ldr	r3, [pc, #324]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  40137c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401380:	601a      	str	r2, [r3, #0]
			}
		break;
  401382:	e07b      	b.n	40147c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401384:	4b4c      	ldr	r3, [pc, #304]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  401386:	6a1b      	ldr	r3, [r3, #32]
  401388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40138c:	2b00      	cmp	r3, #0
  40138e:	d003      	beq.n	401398 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401390:	4b4b      	ldr	r3, [pc, #300]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401392:	4a4c      	ldr	r2, [pc, #304]	; (4014c4 <SystemCoreClockUpdate+0x188>)
  401394:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401396:	e071      	b.n	40147c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401398:	4b49      	ldr	r3, [pc, #292]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  40139a:	4a4b      	ldr	r2, [pc, #300]	; (4014c8 <SystemCoreClockUpdate+0x18c>)
  40139c:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40139e:	4b46      	ldr	r3, [pc, #280]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  4013a0:	6a1b      	ldr	r3, [r3, #32]
  4013a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4013a6:	2b10      	cmp	r3, #16
  4013a8:	d008      	beq.n	4013bc <SystemCoreClockUpdate+0x80>
  4013aa:	2b20      	cmp	r3, #32
  4013ac:	d00a      	beq.n	4013c4 <SystemCoreClockUpdate+0x88>
  4013ae:	2b00      	cmp	r3, #0
  4013b0:	d000      	beq.n	4013b4 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  4013b2:	e00b      	b.n	4013cc <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4013b4:	4b42      	ldr	r3, [pc, #264]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  4013b6:	4a44      	ldr	r2, [pc, #272]	; (4014c8 <SystemCoreClockUpdate+0x18c>)
  4013b8:	601a      	str	r2, [r3, #0]
			break;
  4013ba:	e007      	b.n	4013cc <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4013bc:	4b40      	ldr	r3, [pc, #256]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  4013be:	4a43      	ldr	r2, [pc, #268]	; (4014cc <SystemCoreClockUpdate+0x190>)
  4013c0:	601a      	str	r2, [r3, #0]
			break;
  4013c2:	e003      	b.n	4013cc <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4013c4:	4b3e      	ldr	r3, [pc, #248]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  4013c6:	4a3f      	ldr	r2, [pc, #252]	; (4014c4 <SystemCoreClockUpdate+0x188>)
  4013c8:	601a      	str	r2, [r3, #0]
			break;
  4013ca:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  4013cc:	e056      	b.n	40147c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4013ce:	4b3a      	ldr	r3, [pc, #232]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  4013d0:	6a1b      	ldr	r3, [r3, #32]
  4013d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4013d6:	2b00      	cmp	r3, #0
  4013d8:	d003      	beq.n	4013e2 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4013da:	4b39      	ldr	r3, [pc, #228]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  4013dc:	4a39      	ldr	r2, [pc, #228]	; (4014c4 <SystemCoreClockUpdate+0x188>)
  4013de:	601a      	str	r2, [r3, #0]
  4013e0:	e019      	b.n	401416 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4013e2:	4b37      	ldr	r3, [pc, #220]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  4013e4:	4a38      	ldr	r2, [pc, #224]	; (4014c8 <SystemCoreClockUpdate+0x18c>)
  4013e6:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4013e8:	4b33      	ldr	r3, [pc, #204]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  4013ea:	6a1b      	ldr	r3, [r3, #32]
  4013ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4013f0:	2b10      	cmp	r3, #16
  4013f2:	d008      	beq.n	401406 <SystemCoreClockUpdate+0xca>
  4013f4:	2b20      	cmp	r3, #32
  4013f6:	d00a      	beq.n	40140e <SystemCoreClockUpdate+0xd2>
  4013f8:	2b00      	cmp	r3, #0
  4013fa:	d000      	beq.n	4013fe <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4013fc:	e00b      	b.n	401416 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4013fe:	4b30      	ldr	r3, [pc, #192]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401400:	4a31      	ldr	r2, [pc, #196]	; (4014c8 <SystemCoreClockUpdate+0x18c>)
  401402:	601a      	str	r2, [r3, #0]
					break;
  401404:	e007      	b.n	401416 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401406:	4b2e      	ldr	r3, [pc, #184]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401408:	4a30      	ldr	r2, [pc, #192]	; (4014cc <SystemCoreClockUpdate+0x190>)
  40140a:	601a      	str	r2, [r3, #0]
					break;
  40140c:	e003      	b.n	401416 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40140e:	4b2c      	ldr	r3, [pc, #176]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401410:	4a2c      	ldr	r2, [pc, #176]	; (4014c4 <SystemCoreClockUpdate+0x188>)
  401412:	601a      	str	r2, [r3, #0]
					break;
  401414:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401416:	4b28      	ldr	r3, [pc, #160]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  401418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40141a:	f003 0303 	and.w	r3, r3, #3
  40141e:	2b02      	cmp	r3, #2
  401420:	d115      	bne.n	40144e <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401422:	4b25      	ldr	r3, [pc, #148]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  401424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401426:	4b2a      	ldr	r3, [pc, #168]	; (4014d0 <SystemCoreClockUpdate+0x194>)
  401428:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40142a:	0c1b      	lsrs	r3, r3, #16
  40142c:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40142e:	4a24      	ldr	r2, [pc, #144]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401430:	6812      	ldr	r2, [r2, #0]
  401432:	fb02 f303 	mul.w	r3, r2, r3
  401436:	4a22      	ldr	r2, [pc, #136]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401438:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40143a:	4b1f      	ldr	r3, [pc, #124]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  40143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40143e:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401440:	4a1f      	ldr	r2, [pc, #124]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401442:	6812      	ldr	r2, [r2, #0]
  401444:	fbb2 f3f3 	udiv	r3, r2, r3
  401448:	4a1d      	ldr	r2, [pc, #116]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  40144a:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40144c:	e016      	b.n	40147c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40144e:	4b1a      	ldr	r3, [pc, #104]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  401450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401452:	4b1f      	ldr	r3, [pc, #124]	; (4014d0 <SystemCoreClockUpdate+0x194>)
  401454:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401456:	0c1b      	lsrs	r3, r3, #16
  401458:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40145a:	4a19      	ldr	r2, [pc, #100]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  40145c:	6812      	ldr	r2, [r2, #0]
  40145e:	fb02 f303 	mul.w	r3, r2, r3
  401462:	4a17      	ldr	r2, [pc, #92]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401464:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401466:	4b14      	ldr	r3, [pc, #80]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  401468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40146a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40146c:	4a14      	ldr	r2, [pc, #80]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  40146e:	6812      	ldr	r2, [r2, #0]
  401470:	fbb2 f3f3 	udiv	r3, r2, r3
  401474:	4a12      	ldr	r2, [pc, #72]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401476:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401478:	e000      	b.n	40147c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40147a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40147c:	4b0e      	ldr	r3, [pc, #56]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  40147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401480:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401484:	2b70      	cmp	r3, #112	; 0x70
  401486:	d108      	bne.n	40149a <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401488:	4b0d      	ldr	r3, [pc, #52]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  40148a:	681b      	ldr	r3, [r3, #0]
  40148c:	4a11      	ldr	r2, [pc, #68]	; (4014d4 <SystemCoreClockUpdate+0x198>)
  40148e:	fba2 2303 	umull	r2, r3, r2, r3
  401492:	085b      	lsrs	r3, r3, #1
  401494:	4a0a      	ldr	r2, [pc, #40]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  401496:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401498:	e00a      	b.n	4014b0 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40149a:	4b07      	ldr	r3, [pc, #28]	; (4014b8 <SystemCoreClockUpdate+0x17c>)
  40149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40149e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014a2:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4014a4:	4a06      	ldr	r2, [pc, #24]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  4014a6:	6812      	ldr	r2, [r2, #0]
  4014a8:	fa22 f303 	lsr.w	r3, r2, r3
  4014ac:	4a04      	ldr	r2, [pc, #16]	; (4014c0 <SystemCoreClockUpdate+0x184>)
  4014ae:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4014b0:	bf00      	nop
  4014b2:	46bd      	mov	sp, r7
  4014b4:	bc80      	pop	{r7}
  4014b6:	4770      	bx	lr
  4014b8:	400e0400 	.word	0x400e0400
  4014bc:	400e1410 	.word	0x400e1410
  4014c0:	2000000c 	.word	0x2000000c
  4014c4:	00b71b00 	.word	0x00b71b00
  4014c8:	003d0900 	.word	0x003d0900
  4014cc:	007a1200 	.word	0x007a1200
  4014d0:	07ff0000 	.word	0x07ff0000
  4014d4:	aaaaaaab 	.word	0xaaaaaaab

004014d8 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4014d8:	b480      	push	{r7}
  4014da:	b083      	sub	sp, #12
  4014dc:	af00      	add	r7, sp, #0
  4014de:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4014e0:	687b      	ldr	r3, [r7, #4]
  4014e2:	4a22      	ldr	r2, [pc, #136]	; (40156c <system_init_flash+0x94>)
  4014e4:	4293      	cmp	r3, r2
  4014e6:	d808      	bhi.n	4014fa <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4014e8:	4b21      	ldr	r3, [pc, #132]	; (401570 <system_init_flash+0x98>)
  4014ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4014ee:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4014f0:	4b20      	ldr	r3, [pc, #128]	; (401574 <system_init_flash+0x9c>)
  4014f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4014f6:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4014f8:	e033      	b.n	401562 <system_init_flash+0x8a>
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4014fa:	687b      	ldr	r3, [r7, #4]
  4014fc:	4a1e      	ldr	r2, [pc, #120]	; (401578 <system_init_flash+0xa0>)
  4014fe:	4293      	cmp	r3, r2
  401500:	d806      	bhi.n	401510 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401502:	4b1b      	ldr	r3, [pc, #108]	; (401570 <system_init_flash+0x98>)
  401504:	4a1d      	ldr	r2, [pc, #116]	; (40157c <system_init_flash+0xa4>)
  401506:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401508:	4b1a      	ldr	r3, [pc, #104]	; (401574 <system_init_flash+0x9c>)
  40150a:	4a1c      	ldr	r2, [pc, #112]	; (40157c <system_init_flash+0xa4>)
  40150c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40150e:	e028      	b.n	401562 <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401510:	687b      	ldr	r3, [r7, #4]
  401512:	4a1b      	ldr	r2, [pc, #108]	; (401580 <system_init_flash+0xa8>)
  401514:	4293      	cmp	r3, r2
  401516:	d806      	bhi.n	401526 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401518:	4b15      	ldr	r3, [pc, #84]	; (401570 <system_init_flash+0x98>)
  40151a:	4a1a      	ldr	r2, [pc, #104]	; (401584 <system_init_flash+0xac>)
  40151c:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40151e:	4b15      	ldr	r3, [pc, #84]	; (401574 <system_init_flash+0x9c>)
  401520:	4a18      	ldr	r2, [pc, #96]	; (401584 <system_init_flash+0xac>)
  401522:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401524:	e01d      	b.n	401562 <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401526:	687b      	ldr	r3, [r7, #4]
  401528:	4a17      	ldr	r2, [pc, #92]	; (401588 <system_init_flash+0xb0>)
  40152a:	4293      	cmp	r3, r2
  40152c:	d806      	bhi.n	40153c <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40152e:	4b10      	ldr	r3, [pc, #64]	; (401570 <system_init_flash+0x98>)
  401530:	4a16      	ldr	r2, [pc, #88]	; (40158c <system_init_flash+0xb4>)
  401532:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401534:	4b0f      	ldr	r3, [pc, #60]	; (401574 <system_init_flash+0x9c>)
  401536:	4a15      	ldr	r2, [pc, #84]	; (40158c <system_init_flash+0xb4>)
  401538:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40153a:	e012      	b.n	401562 <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40153c:	687b      	ldr	r3, [r7, #4]
  40153e:	4a14      	ldr	r2, [pc, #80]	; (401590 <system_init_flash+0xb8>)
  401540:	4293      	cmp	r3, r2
  401542:	d808      	bhi.n	401556 <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401544:	4b0a      	ldr	r3, [pc, #40]	; (401570 <system_init_flash+0x98>)
  401546:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40154a:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40154c:	4b09      	ldr	r3, [pc, #36]	; (401574 <system_init_flash+0x9c>)
  40154e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401552:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401554:	e005      	b.n	401562 <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401556:	4b06      	ldr	r3, [pc, #24]	; (401570 <system_init_flash+0x98>)
  401558:	4a0e      	ldr	r2, [pc, #56]	; (401594 <system_init_flash+0xbc>)
  40155a:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40155c:	4b05      	ldr	r3, [pc, #20]	; (401574 <system_init_flash+0x9c>)
  40155e:	4a0d      	ldr	r2, [pc, #52]	; (401594 <system_init_flash+0xbc>)
  401560:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401562:	bf00      	nop
  401564:	370c      	adds	r7, #12
  401566:	46bd      	mov	sp, r7
  401568:	bc80      	pop	{r7}
  40156a:	4770      	bx	lr
  40156c:	01312cff 	.word	0x01312cff
  401570:	400e0a00 	.word	0x400e0a00
  401574:	400e0c00 	.word	0x400e0c00
  401578:	026259ff 	.word	0x026259ff
  40157c:	04000100 	.word	0x04000100
  401580:	039386ff 	.word	0x039386ff
  401584:	04000200 	.word	0x04000200
  401588:	04c4b3ff 	.word	0x04c4b3ff
  40158c:	04000300 	.word	0x04000300
  401590:	05f5e0ff 	.word	0x05f5e0ff
  401594:	04000500 	.word	0x04000500

00401598 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401598:	b480      	push	{r7}
  40159a:	b085      	sub	sp, #20
  40159c:	af00      	add	r7, sp, #0
  40159e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4015a0:	4b10      	ldr	r3, [pc, #64]	; (4015e4 <_sbrk+0x4c>)
  4015a2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4015a4:	4b10      	ldr	r3, [pc, #64]	; (4015e8 <_sbrk+0x50>)
  4015a6:	681b      	ldr	r3, [r3, #0]
  4015a8:	2b00      	cmp	r3, #0
  4015aa:	d102      	bne.n	4015b2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4015ac:	4b0e      	ldr	r3, [pc, #56]	; (4015e8 <_sbrk+0x50>)
  4015ae:	4a0f      	ldr	r2, [pc, #60]	; (4015ec <_sbrk+0x54>)
  4015b0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4015b2:	4b0d      	ldr	r3, [pc, #52]	; (4015e8 <_sbrk+0x50>)
  4015b4:	681b      	ldr	r3, [r3, #0]
  4015b6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4015b8:	68ba      	ldr	r2, [r7, #8]
  4015ba:	687b      	ldr	r3, [r7, #4]
  4015bc:	441a      	add	r2, r3
  4015be:	68fb      	ldr	r3, [r7, #12]
  4015c0:	429a      	cmp	r2, r3
  4015c2:	dd02      	ble.n	4015ca <_sbrk+0x32>
		return (caddr_t) -1;	
  4015c4:	f04f 33ff 	mov.w	r3, #4294967295
  4015c8:	e006      	b.n	4015d8 <_sbrk+0x40>
	}

	heap += incr;
  4015ca:	4b07      	ldr	r3, [pc, #28]	; (4015e8 <_sbrk+0x50>)
  4015cc:	681a      	ldr	r2, [r3, #0]
  4015ce:	687b      	ldr	r3, [r7, #4]
  4015d0:	4413      	add	r3, r2
  4015d2:	4a05      	ldr	r2, [pc, #20]	; (4015e8 <_sbrk+0x50>)
  4015d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4015d6:	68bb      	ldr	r3, [r7, #8]
}
  4015d8:	4618      	mov	r0, r3
  4015da:	3714      	adds	r7, #20
  4015dc:	46bd      	mov	sp, r7
  4015de:	bc80      	pop	{r7}
  4015e0:	4770      	bx	lr
  4015e2:	bf00      	nop
  4015e4:	20027ffc 	.word	0x20027ffc
  4015e8:	20000908 	.word	0x20000908
  4015ec:	20003958 	.word	0x20003958

004015f0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4015f0:	b480      	push	{r7}
  4015f2:	b083      	sub	sp, #12
  4015f4:	af00      	add	r7, sp, #0
  4015f6:	6078      	str	r0, [r7, #4]
	return -1;
  4015f8:	f04f 33ff 	mov.w	r3, #4294967295
}
  4015fc:	4618      	mov	r0, r3
  4015fe:	370c      	adds	r7, #12
  401600:	46bd      	mov	sp, r7
  401602:	bc80      	pop	{r7}
  401604:	4770      	bx	lr
  401606:	bf00      	nop

00401608 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401608:	b480      	push	{r7}
  40160a:	b083      	sub	sp, #12
  40160c:	af00      	add	r7, sp, #0
  40160e:	6078      	str	r0, [r7, #4]
  401610:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401612:	683b      	ldr	r3, [r7, #0]
  401614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401618:	605a      	str	r2, [r3, #4]

	return 0;
  40161a:	2300      	movs	r3, #0
}
  40161c:	4618      	mov	r0, r3
  40161e:	370c      	adds	r7, #12
  401620:	46bd      	mov	sp, r7
  401622:	bc80      	pop	{r7}
  401624:	4770      	bx	lr
  401626:	bf00      	nop

00401628 <_isatty>:

extern int _isatty(int file)
{
  401628:	b480      	push	{r7}
  40162a:	b083      	sub	sp, #12
  40162c:	af00      	add	r7, sp, #0
  40162e:	6078      	str	r0, [r7, #4]
	return 1;
  401630:	2301      	movs	r3, #1
}
  401632:	4618      	mov	r0, r3
  401634:	370c      	adds	r7, #12
  401636:	46bd      	mov	sp, r7
  401638:	bc80      	pop	{r7}
  40163a:	4770      	bx	lr

0040163c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40163c:	b480      	push	{r7}
  40163e:	b085      	sub	sp, #20
  401640:	af00      	add	r7, sp, #0
  401642:	60f8      	str	r0, [r7, #12]
  401644:	60b9      	str	r1, [r7, #8]
  401646:	607a      	str	r2, [r7, #4]
	return 0;
  401648:	2300      	movs	r3, #0
}
  40164a:	4618      	mov	r0, r3
  40164c:	3714      	adds	r7, #20
  40164e:	46bd      	mov	sp, r7
  401650:	bc80      	pop	{r7}
  401652:	4770      	bx	lr

00401654 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401654:	b480      	push	{r7}
  401656:	b083      	sub	sp, #12
  401658:	af00      	add	r7, sp, #0
  40165a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40165c:	687b      	ldr	r3, [r7, #4]
  40165e:	2b07      	cmp	r3, #7
  401660:	d825      	bhi.n	4016ae <osc_get_rate+0x5a>
  401662:	a201      	add	r2, pc, #4	; (adr r2, 401668 <osc_get_rate+0x14>)
  401664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401668:	00401689 	.word	0x00401689
  40166c:	0040168f 	.word	0x0040168f
  401670:	00401695 	.word	0x00401695
  401674:	0040169b 	.word	0x0040169b
  401678:	0040169f 	.word	0x0040169f
  40167c:	004016a3 	.word	0x004016a3
  401680:	004016a7 	.word	0x004016a7
  401684:	004016ab 	.word	0x004016ab
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401688:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40168c:	e010      	b.n	4016b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40168e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401692:	e00d      	b.n	4016b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401698:	e00a      	b.n	4016b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40169a:	4b08      	ldr	r3, [pc, #32]	; (4016bc <osc_get_rate+0x68>)
  40169c:	e008      	b.n	4016b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40169e:	4b08      	ldr	r3, [pc, #32]	; (4016c0 <osc_get_rate+0x6c>)
  4016a0:	e006      	b.n	4016b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4016a2:	4b08      	ldr	r3, [pc, #32]	; (4016c4 <osc_get_rate+0x70>)
  4016a4:	e004      	b.n	4016b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4016a6:	4b07      	ldr	r3, [pc, #28]	; (4016c4 <osc_get_rate+0x70>)
  4016a8:	e002      	b.n	4016b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4016aa:	4b06      	ldr	r3, [pc, #24]	; (4016c4 <osc_get_rate+0x70>)
  4016ac:	e000      	b.n	4016b0 <osc_get_rate+0x5c>
	}

	return 0;
  4016ae:	2300      	movs	r3, #0
}
  4016b0:	4618      	mov	r0, r3
  4016b2:	370c      	adds	r7, #12
  4016b4:	46bd      	mov	sp, r7
  4016b6:	bc80      	pop	{r7}
  4016b8:	4770      	bx	lr
  4016ba:	bf00      	nop
  4016bc:	003d0900 	.word	0x003d0900
  4016c0:	007a1200 	.word	0x007a1200
  4016c4:	00b71b00 	.word	0x00b71b00

004016c8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4016c8:	b580      	push	{r7, lr}
  4016ca:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4016cc:	2006      	movs	r0, #6
  4016ce:	4b04      	ldr	r3, [pc, #16]	; (4016e0 <sysclk_get_main_hz+0x18>)
  4016d0:	4798      	blx	r3
  4016d2:	4602      	mov	r2, r0
  4016d4:	4613      	mov	r3, r2
  4016d6:	009b      	lsls	r3, r3, #2
  4016d8:	4413      	add	r3, r2
  4016da:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4016dc:	4618      	mov	r0, r3
  4016de:	bd80      	pop	{r7, pc}
  4016e0:	00401655 	.word	0x00401655

004016e4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4016e4:	b580      	push	{r7, lr}
  4016e6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4016e8:	4b02      	ldr	r3, [pc, #8]	; (4016f4 <sysclk_get_cpu_hz+0x10>)
  4016ea:	4798      	blx	r3
  4016ec:	4603      	mov	r3, r0
  4016ee:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4016f0:	4618      	mov	r0, r3
  4016f2:	bd80      	pop	{r7, pc}
  4016f4:	004016c9 	.word	0x004016c9

004016f8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4016f8:	b580      	push	{r7, lr}
  4016fa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4016fc:	4b02      	ldr	r3, [pc, #8]	; (401708 <sysclk_get_peripheral_hz+0x10>)
  4016fe:	4798      	blx	r3
  401700:	4603      	mov	r3, r0
  401702:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401704:	4618      	mov	r0, r3
  401706:	bd80      	pop	{r7, pc}
  401708:	004016c9 	.word	0x004016c9

0040170c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40170c:	b580      	push	{r7, lr}
  40170e:	b082      	sub	sp, #8
  401710:	af00      	add	r7, sp, #0
  401712:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401714:	6878      	ldr	r0, [r7, #4]
  401716:	4b03      	ldr	r3, [pc, #12]	; (401724 <sysclk_enable_peripheral_clock+0x18>)
  401718:	4798      	blx	r3
}
  40171a:	bf00      	nop
  40171c:	3708      	adds	r7, #8
  40171e:	46bd      	mov	sp, r7
  401720:	bd80      	pop	{r7, pc}
  401722:	bf00      	nop
  401724:	00401179 	.word	0x00401179

00401728 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401728:	b580      	push	{r7, lr}
  40172a:	b08c      	sub	sp, #48	; 0x30
  40172c:	af00      	add	r7, sp, #0
  40172e:	6078      	str	r0, [r7, #4]
  401730:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401732:	4b31      	ldr	r3, [pc, #196]	; (4017f8 <usart_serial_init+0xd0>)
  401734:	4798      	blx	r3
  401736:	4603      	mov	r3, r0
  401738:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40173a:	683b      	ldr	r3, [r7, #0]
  40173c:	681b      	ldr	r3, [r3, #0]
  40173e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401740:	683b      	ldr	r3, [r7, #0]
  401742:	689b      	ldr	r3, [r3, #8]
  401744:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401746:	683b      	ldr	r3, [r7, #0]
  401748:	681b      	ldr	r3, [r3, #0]
  40174a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40174c:	683b      	ldr	r3, [r7, #0]
  40174e:	685b      	ldr	r3, [r3, #4]
  401750:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401752:	683b      	ldr	r3, [r7, #0]
  401754:	689b      	ldr	r3, [r3, #8]
  401756:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401758:	683b      	ldr	r3, [r7, #0]
  40175a:	68db      	ldr	r3, [r3, #12]
  40175c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40175e:	2300      	movs	r3, #0
  401760:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401762:	687b      	ldr	r3, [r7, #4]
  401764:	4a25      	ldr	r2, [pc, #148]	; (4017fc <usart_serial_init+0xd4>)
  401766:	4293      	cmp	r3, r2
  401768:	d108      	bne.n	40177c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40176a:	2008      	movs	r0, #8
  40176c:	4b24      	ldr	r3, [pc, #144]	; (401800 <usart_serial_init+0xd8>)
  40176e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401770:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401774:	4619      	mov	r1, r3
  401776:	6878      	ldr	r0, [r7, #4]
  401778:	4b22      	ldr	r3, [pc, #136]	; (401804 <usart_serial_init+0xdc>)
  40177a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40177c:	687b      	ldr	r3, [r7, #4]
  40177e:	4a22      	ldr	r2, [pc, #136]	; (401808 <usart_serial_init+0xe0>)
  401780:	4293      	cmp	r3, r2
  401782:	d108      	bne.n	401796 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401784:	2009      	movs	r0, #9
  401786:	4b1e      	ldr	r3, [pc, #120]	; (401800 <usart_serial_init+0xd8>)
  401788:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40178e:	4619      	mov	r1, r3
  401790:	6878      	ldr	r0, [r7, #4]
  401792:	4b1c      	ldr	r3, [pc, #112]	; (401804 <usart_serial_init+0xdc>)
  401794:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401796:	687b      	ldr	r3, [r7, #4]
  401798:	4a1c      	ldr	r2, [pc, #112]	; (40180c <usart_serial_init+0xe4>)
  40179a:	4293      	cmp	r3, r2
  40179c:	d111      	bne.n	4017c2 <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40179e:	200e      	movs	r0, #14
  4017a0:	4b17      	ldr	r3, [pc, #92]	; (401800 <usart_serial_init+0xd8>)
  4017a2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4017a4:	4b14      	ldr	r3, [pc, #80]	; (4017f8 <usart_serial_init+0xd0>)
  4017a6:	4798      	blx	r3
  4017a8:	4602      	mov	r2, r0
  4017aa:	f107 030c 	add.w	r3, r7, #12
  4017ae:	4619      	mov	r1, r3
  4017b0:	6878      	ldr	r0, [r7, #4]
  4017b2:	4b17      	ldr	r3, [pc, #92]	; (401810 <usart_serial_init+0xe8>)
  4017b4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4017b6:	6878      	ldr	r0, [r7, #4]
  4017b8:	4b16      	ldr	r3, [pc, #88]	; (401814 <usart_serial_init+0xec>)
  4017ba:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4017bc:	6878      	ldr	r0, [r7, #4]
  4017be:	4b16      	ldr	r3, [pc, #88]	; (401818 <usart_serial_init+0xf0>)
  4017c0:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4017c2:	687b      	ldr	r3, [r7, #4]
  4017c4:	4a15      	ldr	r2, [pc, #84]	; (40181c <usart_serial_init+0xf4>)
  4017c6:	4293      	cmp	r3, r2
  4017c8:	d111      	bne.n	4017ee <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4017ca:	200f      	movs	r0, #15
  4017cc:	4b0c      	ldr	r3, [pc, #48]	; (401800 <usart_serial_init+0xd8>)
  4017ce:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4017d0:	4b09      	ldr	r3, [pc, #36]	; (4017f8 <usart_serial_init+0xd0>)
  4017d2:	4798      	blx	r3
  4017d4:	4602      	mov	r2, r0
  4017d6:	f107 030c 	add.w	r3, r7, #12
  4017da:	4619      	mov	r1, r3
  4017dc:	6878      	ldr	r0, [r7, #4]
  4017de:	4b0c      	ldr	r3, [pc, #48]	; (401810 <usart_serial_init+0xe8>)
  4017e0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4017e2:	6878      	ldr	r0, [r7, #4]
  4017e4:	4b0b      	ldr	r3, [pc, #44]	; (401814 <usart_serial_init+0xec>)
  4017e6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4017e8:	6878      	ldr	r0, [r7, #4]
  4017ea:	4b0b      	ldr	r3, [pc, #44]	; (401818 <usart_serial_init+0xf0>)
  4017ec:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4017ee:	bf00      	nop
  4017f0:	3730      	adds	r7, #48	; 0x30
  4017f2:	46bd      	mov	sp, r7
  4017f4:	bd80      	pop	{r7, pc}
  4017f6:	bf00      	nop
  4017f8:	004016f9 	.word	0x004016f9
  4017fc:	400e0600 	.word	0x400e0600
  401800:	0040170d 	.word	0x0040170d
  401804:	00400305 	.word	0x00400305
  401808:	400e0800 	.word	0x400e0800
  40180c:	40024000 	.word	0x40024000
  401810:	004004ad 	.word	0x004004ad
  401814:	00400531 	.word	0x00400531
  401818:	00400561 	.word	0x00400561
  40181c:	40028000 	.word	0x40028000

00401820 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401820:	b580      	push	{r7, lr}
  401822:	b082      	sub	sp, #8
  401824:	af00      	add	r7, sp, #0
  401826:	6078      	str	r0, [r7, #4]
  401828:	460b      	mov	r3, r1
  40182a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40182c:	687b      	ldr	r3, [r7, #4]
  40182e:	4a20      	ldr	r2, [pc, #128]	; (4018b0 <usart_serial_putchar+0x90>)
  401830:	4293      	cmp	r3, r2
  401832:	d10a      	bne.n	40184a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401834:	bf00      	nop
  401836:	78fb      	ldrb	r3, [r7, #3]
  401838:	4619      	mov	r1, r3
  40183a:	6878      	ldr	r0, [r7, #4]
  40183c:	4b1d      	ldr	r3, [pc, #116]	; (4018b4 <usart_serial_putchar+0x94>)
  40183e:	4798      	blx	r3
  401840:	4603      	mov	r3, r0
  401842:	2b00      	cmp	r3, #0
  401844:	d1f7      	bne.n	401836 <usart_serial_putchar+0x16>
		return 1;
  401846:	2301      	movs	r3, #1
  401848:	e02d      	b.n	4018a6 <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40184a:	687b      	ldr	r3, [r7, #4]
  40184c:	4a1a      	ldr	r2, [pc, #104]	; (4018b8 <usart_serial_putchar+0x98>)
  40184e:	4293      	cmp	r3, r2
  401850:	d10a      	bne.n	401868 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401852:	bf00      	nop
  401854:	78fb      	ldrb	r3, [r7, #3]
  401856:	4619      	mov	r1, r3
  401858:	6878      	ldr	r0, [r7, #4]
  40185a:	4b16      	ldr	r3, [pc, #88]	; (4018b4 <usart_serial_putchar+0x94>)
  40185c:	4798      	blx	r3
  40185e:	4603      	mov	r3, r0
  401860:	2b00      	cmp	r3, #0
  401862:	d1f7      	bne.n	401854 <usart_serial_putchar+0x34>
		return 1;
  401864:	2301      	movs	r3, #1
  401866:	e01e      	b.n	4018a6 <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401868:	687b      	ldr	r3, [r7, #4]
  40186a:	4a14      	ldr	r2, [pc, #80]	; (4018bc <usart_serial_putchar+0x9c>)
  40186c:	4293      	cmp	r3, r2
  40186e:	d10a      	bne.n	401886 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  401870:	bf00      	nop
  401872:	78fb      	ldrb	r3, [r7, #3]
  401874:	4619      	mov	r1, r3
  401876:	6878      	ldr	r0, [r7, #4]
  401878:	4b11      	ldr	r3, [pc, #68]	; (4018c0 <usart_serial_putchar+0xa0>)
  40187a:	4798      	blx	r3
  40187c:	4603      	mov	r3, r0
  40187e:	2b00      	cmp	r3, #0
  401880:	d1f7      	bne.n	401872 <usart_serial_putchar+0x52>
		return 1;
  401882:	2301      	movs	r3, #1
  401884:	e00f      	b.n	4018a6 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401886:	687b      	ldr	r3, [r7, #4]
  401888:	4a0e      	ldr	r2, [pc, #56]	; (4018c4 <usart_serial_putchar+0xa4>)
  40188a:	4293      	cmp	r3, r2
  40188c:	d10a      	bne.n	4018a4 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  40188e:	bf00      	nop
  401890:	78fb      	ldrb	r3, [r7, #3]
  401892:	4619      	mov	r1, r3
  401894:	6878      	ldr	r0, [r7, #4]
  401896:	4b0a      	ldr	r3, [pc, #40]	; (4018c0 <usart_serial_putchar+0xa0>)
  401898:	4798      	blx	r3
  40189a:	4603      	mov	r3, r0
  40189c:	2b00      	cmp	r3, #0
  40189e:	d1f7      	bne.n	401890 <usart_serial_putchar+0x70>
		return 1;
  4018a0:	2301      	movs	r3, #1
  4018a2:	e000      	b.n	4018a6 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4018a4:	2300      	movs	r3, #0
}
  4018a6:	4618      	mov	r0, r3
  4018a8:	3708      	adds	r7, #8
  4018aa:	46bd      	mov	sp, r7
  4018ac:	bd80      	pop	{r7, pc}
  4018ae:	bf00      	nop
  4018b0:	400e0600 	.word	0x400e0600
  4018b4:	00400365 	.word	0x00400365
  4018b8:	400e0800 	.word	0x400e0800
  4018bc:	40024000 	.word	0x40024000
  4018c0:	004005e5 	.word	0x004005e5
  4018c4:	40028000 	.word	0x40028000

004018c8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4018c8:	b580      	push	{r7, lr}
  4018ca:	b084      	sub	sp, #16
  4018cc:	af00      	add	r7, sp, #0
  4018ce:	6078      	str	r0, [r7, #4]
  4018d0:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4018d2:	2300      	movs	r3, #0
  4018d4:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4018d6:	687b      	ldr	r3, [r7, #4]
  4018d8:	4a1f      	ldr	r2, [pc, #124]	; (401958 <usart_serial_getchar+0x90>)
  4018da:	4293      	cmp	r3, r2
  4018dc:	d107      	bne.n	4018ee <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4018de:	bf00      	nop
  4018e0:	6839      	ldr	r1, [r7, #0]
  4018e2:	6878      	ldr	r0, [r7, #4]
  4018e4:	4b1d      	ldr	r3, [pc, #116]	; (40195c <usart_serial_getchar+0x94>)
  4018e6:	4798      	blx	r3
  4018e8:	4603      	mov	r3, r0
  4018ea:	2b00      	cmp	r3, #0
  4018ec:	d1f8      	bne.n	4018e0 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	4a1b      	ldr	r2, [pc, #108]	; (401960 <usart_serial_getchar+0x98>)
  4018f2:	4293      	cmp	r3, r2
  4018f4:	d107      	bne.n	401906 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4018f6:	bf00      	nop
  4018f8:	6839      	ldr	r1, [r7, #0]
  4018fa:	6878      	ldr	r0, [r7, #4]
  4018fc:	4b17      	ldr	r3, [pc, #92]	; (40195c <usart_serial_getchar+0x94>)
  4018fe:	4798      	blx	r3
  401900:	4603      	mov	r3, r0
  401902:	2b00      	cmp	r3, #0
  401904:	d1f8      	bne.n	4018f8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401906:	687b      	ldr	r3, [r7, #4]
  401908:	4a16      	ldr	r2, [pc, #88]	; (401964 <usart_serial_getchar+0x9c>)
  40190a:	4293      	cmp	r3, r2
  40190c:	d10d      	bne.n	40192a <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  40190e:	bf00      	nop
  401910:	f107 030c 	add.w	r3, r7, #12
  401914:	4619      	mov	r1, r3
  401916:	6878      	ldr	r0, [r7, #4]
  401918:	4b13      	ldr	r3, [pc, #76]	; (401968 <usart_serial_getchar+0xa0>)
  40191a:	4798      	blx	r3
  40191c:	4603      	mov	r3, r0
  40191e:	2b00      	cmp	r3, #0
  401920:	d1f6      	bne.n	401910 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  401922:	68fb      	ldr	r3, [r7, #12]
  401924:	b2da      	uxtb	r2, r3
  401926:	683b      	ldr	r3, [r7, #0]
  401928:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40192a:	687b      	ldr	r3, [r7, #4]
  40192c:	4a0f      	ldr	r2, [pc, #60]	; (40196c <usart_serial_getchar+0xa4>)
  40192e:	4293      	cmp	r3, r2
  401930:	d10d      	bne.n	40194e <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  401932:	bf00      	nop
  401934:	f107 030c 	add.w	r3, r7, #12
  401938:	4619      	mov	r1, r3
  40193a:	6878      	ldr	r0, [r7, #4]
  40193c:	4b0a      	ldr	r3, [pc, #40]	; (401968 <usart_serial_getchar+0xa0>)
  40193e:	4798      	blx	r3
  401940:	4603      	mov	r3, r0
  401942:	2b00      	cmp	r3, #0
  401944:	d1f6      	bne.n	401934 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  401946:	68fb      	ldr	r3, [r7, #12]
  401948:	b2da      	uxtb	r2, r3
  40194a:	683b      	ldr	r3, [r7, #0]
  40194c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40194e:	bf00      	nop
  401950:	3710      	adds	r7, #16
  401952:	46bd      	mov	sp, r7
  401954:	bd80      	pop	{r7, pc}
  401956:	bf00      	nop
  401958:	400e0600 	.word	0x400e0600
  40195c:	00400395 	.word	0x00400395
  401960:	400e0800 	.word	0x400e0800
  401964:	40024000 	.word	0x40024000
  401968:	00400615 	.word	0x00400615
  40196c:	40028000 	.word	0x40028000

00401970 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401970:	b580      	push	{r7, lr}
  401972:	b082      	sub	sp, #8
  401974:	af00      	add	r7, sp, #0
  401976:	6078      	str	r0, [r7, #4]
  401978:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  40197a:	4a0f      	ldr	r2, [pc, #60]	; (4019b8 <stdio_serial_init+0x48>)
  40197c:	687b      	ldr	r3, [r7, #4]
  40197e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401980:	4b0e      	ldr	r3, [pc, #56]	; (4019bc <stdio_serial_init+0x4c>)
  401982:	4a0f      	ldr	r2, [pc, #60]	; (4019c0 <stdio_serial_init+0x50>)
  401984:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401986:	4b0f      	ldr	r3, [pc, #60]	; (4019c4 <stdio_serial_init+0x54>)
  401988:	4a0f      	ldr	r2, [pc, #60]	; (4019c8 <stdio_serial_init+0x58>)
  40198a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  40198c:	6839      	ldr	r1, [r7, #0]
  40198e:	6878      	ldr	r0, [r7, #4]
  401990:	4b0e      	ldr	r3, [pc, #56]	; (4019cc <stdio_serial_init+0x5c>)
  401992:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401994:	4b0e      	ldr	r3, [pc, #56]	; (4019d0 <stdio_serial_init+0x60>)
  401996:	681b      	ldr	r3, [r3, #0]
  401998:	689b      	ldr	r3, [r3, #8]
  40199a:	2100      	movs	r1, #0
  40199c:	4618      	mov	r0, r3
  40199e:	4b0d      	ldr	r3, [pc, #52]	; (4019d4 <stdio_serial_init+0x64>)
  4019a0:	4798      	blx	r3
	setbuf(stdin, NULL);
  4019a2:	4b0b      	ldr	r3, [pc, #44]	; (4019d0 <stdio_serial_init+0x60>)
  4019a4:	681b      	ldr	r3, [r3, #0]
  4019a6:	685b      	ldr	r3, [r3, #4]
  4019a8:	2100      	movs	r1, #0
  4019aa:	4618      	mov	r0, r3
  4019ac:	4b09      	ldr	r3, [pc, #36]	; (4019d4 <stdio_serial_init+0x64>)
  4019ae:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4019b0:	bf00      	nop
  4019b2:	3708      	adds	r7, #8
  4019b4:	46bd      	mov	sp, r7
  4019b6:	bd80      	pop	{r7, pc}
  4019b8:	20000948 	.word	0x20000948
  4019bc:	20000944 	.word	0x20000944
  4019c0:	00401821 	.word	0x00401821
  4019c4:	20000940 	.word	0x20000940
  4019c8:	004018c9 	.word	0x004018c9
  4019cc:	00401729 	.word	0x00401729
  4019d0:	20000438 	.word	0x20000438
  4019d4:	00401f01 	.word	0x00401f01

004019d8 <main>:
#include <asf.h>

void InitConUart(void);

int main (void)
{
  4019d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019dc:	af00      	add	r7, sp, #0
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  4019de:	4b23      	ldr	r3, [pc, #140]	; (401a6c <main+0x94>)
  4019e0:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  4019e2:	4b23      	ldr	r3, [pc, #140]	; (401a70 <main+0x98>)
  4019e4:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	//LED PIN
	gpio_configure_pin(PIO_PC23_IDX, (PIO_OUTPUT_1 | PIO_DEFAULT));
  4019e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4019ea:	2057      	movs	r0, #87	; 0x57
  4019ec:	4b21      	ldr	r3, [pc, #132]	; (401a74 <main+0x9c>)
  4019ee:	4798      	blx	r3

	InitConUart();
  4019f0:	4b21      	ldr	r3, [pc, #132]	; (401a78 <main+0xa0>)
  4019f2:	4798      	blx	r3

	while (1)
	{
		printf("%d\r\n", 90);
  4019f4:	215a      	movs	r1, #90	; 0x5a
  4019f6:	4821      	ldr	r0, [pc, #132]	; (401a7c <main+0xa4>)
  4019f8:	4b21      	ldr	r3, [pc, #132]	; (401a80 <main+0xa8>)
  4019fa:	4798      	blx	r3
		delay_ms(1000);
  4019fc:	4b21      	ldr	r3, [pc, #132]	; (401a84 <main+0xac>)
  4019fe:	4798      	blx	r3
  401a00:	4603      	mov	r3, r0
  401a02:	4618      	mov	r0, r3
  401a04:	f04f 0100 	mov.w	r1, #0
  401a08:	4602      	mov	r2, r0
  401a0a:	460b      	mov	r3, r1
  401a0c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  401a10:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  401a14:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  401a18:	4652      	mov	r2, sl
  401a1a:	465b      	mov	r3, fp
  401a1c:	015d      	lsls	r5, r3, #5
  401a1e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  401a22:	0154      	lsls	r4, r2, #5
  401a24:	1aa4      	subs	r4, r4, r2
  401a26:	eb65 0503 	sbc.w	r5, r5, r3
  401a2a:	1824      	adds	r4, r4, r0
  401a2c:	eb45 0501 	adc.w	r5, r5, r1
  401a30:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  401a34:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  401a38:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  401a3c:	4644      	mov	r4, r8
  401a3e:	464d      	mov	r5, r9
  401a40:	4620      	mov	r0, r4
  401a42:	4629      	mov	r1, r5
  401a44:	f243 62af 	movw	r2, #13999	; 0x36af
  401a48:	f04f 0300 	mov.w	r3, #0
  401a4c:	1880      	adds	r0, r0, r2
  401a4e:	eb41 0103 	adc.w	r1, r1, r3
  401a52:	4e0d      	ldr	r6, [pc, #52]	; (401a88 <main+0xb0>)
  401a54:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401a58:	f04f 0300 	mov.w	r3, #0
  401a5c:	47b0      	blx	r6
  401a5e:	4602      	mov	r2, r0
  401a60:	460b      	mov	r3, r1
  401a62:	4613      	mov	r3, r2
  401a64:	4618      	mov	r0, r3
  401a66:	4b09      	ldr	r3, [pc, #36]	; (401a8c <main+0xb4>)
  401a68:	4798      	blx	r3
	}
  401a6a:	e7c3      	b.n	4019f4 <main+0x1c>
  401a6c:	00400951 	.word	0x00400951
  401a70:	00401235 	.word	0x00401235
  401a74:	00400c2d 	.word	0x00400c2d
  401a78:	00401a91 	.word	0x00401a91
  401a7c:	00404b14 	.word	0x00404b14
  401a80:	00401e3d 	.word	0x00401e3d
  401a84:	004016e5 	.word	0x004016e5
  401a88:	00401ad5 	.word	0x00401ad5
  401a8c:	20000001 	.word	0x20000001

00401a90 <InitConUart>:

/**
 *  Configure UART for debug message output.
 */
void InitConUart(void)
{
  401a90:	b580      	push	{r7, lr}
  401a92:	b084      	sub	sp, #16
  401a94:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  401a96:	463b      	mov	r3, r7
  401a98:	2200      	movs	r2, #0
  401a9a:	601a      	str	r2, [r3, #0]
  401a9c:	605a      	str	r2, [r3, #4]
  401a9e:	609a      	str	r2, [r3, #8]
  401aa0:	60da      	str	r2, [r3, #12]
  401aa2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401aa6:	603b      	str	r3, [r7, #0]
  401aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401aac:	60bb      	str	r3, [r7, #8]
		.baudrate = CONSOLE_UART_BAUDRATE,
		.paritytype = UART_MR_PAR_NO
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  401aae:	2009      	movs	r0, #9
  401ab0:	4b05      	ldr	r3, [pc, #20]	; (401ac8 <InitConUart+0x38>)
  401ab2:	4798      	blx	r3
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
  401ab4:	463b      	mov	r3, r7
  401ab6:	4619      	mov	r1, r3
  401ab8:	4804      	ldr	r0, [pc, #16]	; (401acc <InitConUart+0x3c>)
  401aba:	4b05      	ldr	r3, [pc, #20]	; (401ad0 <InitConUart+0x40>)
  401abc:	4798      	blx	r3
}
  401abe:	bf00      	nop
  401ac0:	3710      	adds	r7, #16
  401ac2:	46bd      	mov	sp, r7
  401ac4:	bd80      	pop	{r7, pc}
  401ac6:	bf00      	nop
  401ac8:	0040170d 	.word	0x0040170d
  401acc:	400e0800 	.word	0x400e0800
  401ad0:	00401971 	.word	0x00401971

00401ad4 <__aeabi_uldivmod>:
  401ad4:	b953      	cbnz	r3, 401aec <__aeabi_uldivmod+0x18>
  401ad6:	b94a      	cbnz	r2, 401aec <__aeabi_uldivmod+0x18>
  401ad8:	2900      	cmp	r1, #0
  401ada:	bf08      	it	eq
  401adc:	2800      	cmpeq	r0, #0
  401ade:	bf1c      	itt	ne
  401ae0:	f04f 31ff 	movne.w	r1, #4294967295
  401ae4:	f04f 30ff 	movne.w	r0, #4294967295
  401ae8:	f000 b97e 	b.w	401de8 <__aeabi_idiv0>
  401aec:	f1ad 0c08 	sub.w	ip, sp, #8
  401af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401af4:	f000 f806 	bl	401b04 <__udivmoddi4>
  401af8:	f8dd e004 	ldr.w	lr, [sp, #4]
  401afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401b00:	b004      	add	sp, #16
  401b02:	4770      	bx	lr

00401b04 <__udivmoddi4>:
  401b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b08:	468c      	mov	ip, r1
  401b0a:	460e      	mov	r6, r1
  401b0c:	4604      	mov	r4, r0
  401b0e:	9d08      	ldr	r5, [sp, #32]
  401b10:	2b00      	cmp	r3, #0
  401b12:	d150      	bne.n	401bb6 <__udivmoddi4+0xb2>
  401b14:	428a      	cmp	r2, r1
  401b16:	4617      	mov	r7, r2
  401b18:	d96c      	bls.n	401bf4 <__udivmoddi4+0xf0>
  401b1a:	fab2 fe82 	clz	lr, r2
  401b1e:	f1be 0f00 	cmp.w	lr, #0
  401b22:	d00b      	beq.n	401b3c <__udivmoddi4+0x38>
  401b24:	f1ce 0420 	rsb	r4, lr, #32
  401b28:	fa20 f404 	lsr.w	r4, r0, r4
  401b2c:	fa01 f60e 	lsl.w	r6, r1, lr
  401b30:	ea44 0c06 	orr.w	ip, r4, r6
  401b34:	fa02 f70e 	lsl.w	r7, r2, lr
  401b38:	fa00 f40e 	lsl.w	r4, r0, lr
  401b3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  401b40:	0c22      	lsrs	r2, r4, #16
  401b42:	fbbc f0f9 	udiv	r0, ip, r9
  401b46:	fa1f f887 	uxth.w	r8, r7
  401b4a:	fb09 c610 	mls	r6, r9, r0, ip
  401b4e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  401b52:	fb00 f308 	mul.w	r3, r0, r8
  401b56:	42b3      	cmp	r3, r6
  401b58:	d909      	bls.n	401b6e <__udivmoddi4+0x6a>
  401b5a:	19f6      	adds	r6, r6, r7
  401b5c:	f100 32ff 	add.w	r2, r0, #4294967295
  401b60:	f080 8122 	bcs.w	401da8 <__udivmoddi4+0x2a4>
  401b64:	42b3      	cmp	r3, r6
  401b66:	f240 811f 	bls.w	401da8 <__udivmoddi4+0x2a4>
  401b6a:	3802      	subs	r0, #2
  401b6c:	443e      	add	r6, r7
  401b6e:	1af6      	subs	r6, r6, r3
  401b70:	b2a2      	uxth	r2, r4
  401b72:	fbb6 f3f9 	udiv	r3, r6, r9
  401b76:	fb09 6613 	mls	r6, r9, r3, r6
  401b7a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  401b7e:	fb03 f808 	mul.w	r8, r3, r8
  401b82:	45a0      	cmp	r8, r4
  401b84:	d909      	bls.n	401b9a <__udivmoddi4+0x96>
  401b86:	19e4      	adds	r4, r4, r7
  401b88:	f103 32ff 	add.w	r2, r3, #4294967295
  401b8c:	f080 810a 	bcs.w	401da4 <__udivmoddi4+0x2a0>
  401b90:	45a0      	cmp	r8, r4
  401b92:	f240 8107 	bls.w	401da4 <__udivmoddi4+0x2a0>
  401b96:	3b02      	subs	r3, #2
  401b98:	443c      	add	r4, r7
  401b9a:	ebc8 0404 	rsb	r4, r8, r4
  401b9e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  401ba2:	2100      	movs	r1, #0
  401ba4:	2d00      	cmp	r5, #0
  401ba6:	d062      	beq.n	401c6e <__udivmoddi4+0x16a>
  401ba8:	fa24 f40e 	lsr.w	r4, r4, lr
  401bac:	2300      	movs	r3, #0
  401bae:	602c      	str	r4, [r5, #0]
  401bb0:	606b      	str	r3, [r5, #4]
  401bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bb6:	428b      	cmp	r3, r1
  401bb8:	d907      	bls.n	401bca <__udivmoddi4+0xc6>
  401bba:	2d00      	cmp	r5, #0
  401bbc:	d055      	beq.n	401c6a <__udivmoddi4+0x166>
  401bbe:	2100      	movs	r1, #0
  401bc0:	e885 0041 	stmia.w	r5, {r0, r6}
  401bc4:	4608      	mov	r0, r1
  401bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bca:	fab3 f183 	clz	r1, r3
  401bce:	2900      	cmp	r1, #0
  401bd0:	f040 8090 	bne.w	401cf4 <__udivmoddi4+0x1f0>
  401bd4:	42b3      	cmp	r3, r6
  401bd6:	d302      	bcc.n	401bde <__udivmoddi4+0xda>
  401bd8:	4282      	cmp	r2, r0
  401bda:	f200 80f8 	bhi.w	401dce <__udivmoddi4+0x2ca>
  401bde:	1a84      	subs	r4, r0, r2
  401be0:	eb66 0603 	sbc.w	r6, r6, r3
  401be4:	2001      	movs	r0, #1
  401be6:	46b4      	mov	ip, r6
  401be8:	2d00      	cmp	r5, #0
  401bea:	d040      	beq.n	401c6e <__udivmoddi4+0x16a>
  401bec:	e885 1010 	stmia.w	r5, {r4, ip}
  401bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bf4:	b912      	cbnz	r2, 401bfc <__udivmoddi4+0xf8>
  401bf6:	2701      	movs	r7, #1
  401bf8:	fbb7 f7f2 	udiv	r7, r7, r2
  401bfc:	fab7 fe87 	clz	lr, r7
  401c00:	f1be 0f00 	cmp.w	lr, #0
  401c04:	d135      	bne.n	401c72 <__udivmoddi4+0x16e>
  401c06:	1bf3      	subs	r3, r6, r7
  401c08:	ea4f 4817 	mov.w	r8, r7, lsr #16
  401c0c:	fa1f fc87 	uxth.w	ip, r7
  401c10:	2101      	movs	r1, #1
  401c12:	fbb3 f0f8 	udiv	r0, r3, r8
  401c16:	0c22      	lsrs	r2, r4, #16
  401c18:	fb08 3610 	mls	r6, r8, r0, r3
  401c1c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  401c20:	fb0c f300 	mul.w	r3, ip, r0
  401c24:	42b3      	cmp	r3, r6
  401c26:	d907      	bls.n	401c38 <__udivmoddi4+0x134>
  401c28:	19f6      	adds	r6, r6, r7
  401c2a:	f100 32ff 	add.w	r2, r0, #4294967295
  401c2e:	d202      	bcs.n	401c36 <__udivmoddi4+0x132>
  401c30:	42b3      	cmp	r3, r6
  401c32:	f200 80ce 	bhi.w	401dd2 <__udivmoddi4+0x2ce>
  401c36:	4610      	mov	r0, r2
  401c38:	1af6      	subs	r6, r6, r3
  401c3a:	b2a2      	uxth	r2, r4
  401c3c:	fbb6 f3f8 	udiv	r3, r6, r8
  401c40:	fb08 6613 	mls	r6, r8, r3, r6
  401c44:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  401c48:	fb0c fc03 	mul.w	ip, ip, r3
  401c4c:	45a4      	cmp	ip, r4
  401c4e:	d907      	bls.n	401c60 <__udivmoddi4+0x15c>
  401c50:	19e4      	adds	r4, r4, r7
  401c52:	f103 32ff 	add.w	r2, r3, #4294967295
  401c56:	d202      	bcs.n	401c5e <__udivmoddi4+0x15a>
  401c58:	45a4      	cmp	ip, r4
  401c5a:	f200 80b5 	bhi.w	401dc8 <__udivmoddi4+0x2c4>
  401c5e:	4613      	mov	r3, r2
  401c60:	ebcc 0404 	rsb	r4, ip, r4
  401c64:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  401c68:	e79c      	b.n	401ba4 <__udivmoddi4+0xa0>
  401c6a:	4629      	mov	r1, r5
  401c6c:	4628      	mov	r0, r5
  401c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c72:	f1ce 0120 	rsb	r1, lr, #32
  401c76:	fa06 f30e 	lsl.w	r3, r6, lr
  401c7a:	fa07 f70e 	lsl.w	r7, r7, lr
  401c7e:	fa20 f901 	lsr.w	r9, r0, r1
  401c82:	ea4f 4817 	mov.w	r8, r7, lsr #16
  401c86:	40ce      	lsrs	r6, r1
  401c88:	ea49 0903 	orr.w	r9, r9, r3
  401c8c:	fbb6 faf8 	udiv	sl, r6, r8
  401c90:	ea4f 4419 	mov.w	r4, r9, lsr #16
  401c94:	fb08 661a 	mls	r6, r8, sl, r6
  401c98:	fa1f fc87 	uxth.w	ip, r7
  401c9c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  401ca0:	fb0a f20c 	mul.w	r2, sl, ip
  401ca4:	429a      	cmp	r2, r3
  401ca6:	fa00 f40e 	lsl.w	r4, r0, lr
  401caa:	d90a      	bls.n	401cc2 <__udivmoddi4+0x1be>
  401cac:	19db      	adds	r3, r3, r7
  401cae:	f10a 31ff 	add.w	r1, sl, #4294967295
  401cb2:	f080 8087 	bcs.w	401dc4 <__udivmoddi4+0x2c0>
  401cb6:	429a      	cmp	r2, r3
  401cb8:	f240 8084 	bls.w	401dc4 <__udivmoddi4+0x2c0>
  401cbc:	f1aa 0a02 	sub.w	sl, sl, #2
  401cc0:	443b      	add	r3, r7
  401cc2:	1a9b      	subs	r3, r3, r2
  401cc4:	fa1f f989 	uxth.w	r9, r9
  401cc8:	fbb3 f1f8 	udiv	r1, r3, r8
  401ccc:	fb08 3311 	mls	r3, r8, r1, r3
  401cd0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  401cd4:	fb01 f60c 	mul.w	r6, r1, ip
  401cd8:	429e      	cmp	r6, r3
  401cda:	d907      	bls.n	401cec <__udivmoddi4+0x1e8>
  401cdc:	19db      	adds	r3, r3, r7
  401cde:	f101 32ff 	add.w	r2, r1, #4294967295
  401ce2:	d26b      	bcs.n	401dbc <__udivmoddi4+0x2b8>
  401ce4:	429e      	cmp	r6, r3
  401ce6:	d969      	bls.n	401dbc <__udivmoddi4+0x2b8>
  401ce8:	3902      	subs	r1, #2
  401cea:	443b      	add	r3, r7
  401cec:	1b9b      	subs	r3, r3, r6
  401cee:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  401cf2:	e78e      	b.n	401c12 <__udivmoddi4+0x10e>
  401cf4:	f1c1 0e20 	rsb	lr, r1, #32
  401cf8:	fa22 f40e 	lsr.w	r4, r2, lr
  401cfc:	408b      	lsls	r3, r1
  401cfe:	4323      	orrs	r3, r4
  401d00:	fa20 f70e 	lsr.w	r7, r0, lr
  401d04:	fa06 f401 	lsl.w	r4, r6, r1
  401d08:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401d0c:	fa26 f60e 	lsr.w	r6, r6, lr
  401d10:	433c      	orrs	r4, r7
  401d12:	fbb6 f9fc 	udiv	r9, r6, ip
  401d16:	0c27      	lsrs	r7, r4, #16
  401d18:	fb0c 6619 	mls	r6, ip, r9, r6
  401d1c:	fa1f f883 	uxth.w	r8, r3
  401d20:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  401d24:	fb09 f708 	mul.w	r7, r9, r8
  401d28:	42b7      	cmp	r7, r6
  401d2a:	fa02 f201 	lsl.w	r2, r2, r1
  401d2e:	fa00 fa01 	lsl.w	sl, r0, r1
  401d32:	d908      	bls.n	401d46 <__udivmoddi4+0x242>
  401d34:	18f6      	adds	r6, r6, r3
  401d36:	f109 30ff 	add.w	r0, r9, #4294967295
  401d3a:	d241      	bcs.n	401dc0 <__udivmoddi4+0x2bc>
  401d3c:	42b7      	cmp	r7, r6
  401d3e:	d93f      	bls.n	401dc0 <__udivmoddi4+0x2bc>
  401d40:	f1a9 0902 	sub.w	r9, r9, #2
  401d44:	441e      	add	r6, r3
  401d46:	1bf6      	subs	r6, r6, r7
  401d48:	b2a0      	uxth	r0, r4
  401d4a:	fbb6 f4fc 	udiv	r4, r6, ip
  401d4e:	fb0c 6614 	mls	r6, ip, r4, r6
  401d52:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  401d56:	fb04 f808 	mul.w	r8, r4, r8
  401d5a:	45b8      	cmp	r8, r7
  401d5c:	d907      	bls.n	401d6e <__udivmoddi4+0x26a>
  401d5e:	18ff      	adds	r7, r7, r3
  401d60:	f104 30ff 	add.w	r0, r4, #4294967295
  401d64:	d228      	bcs.n	401db8 <__udivmoddi4+0x2b4>
  401d66:	45b8      	cmp	r8, r7
  401d68:	d926      	bls.n	401db8 <__udivmoddi4+0x2b4>
  401d6a:	3c02      	subs	r4, #2
  401d6c:	441f      	add	r7, r3
  401d6e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  401d72:	ebc8 0707 	rsb	r7, r8, r7
  401d76:	fba0 8902 	umull	r8, r9, r0, r2
  401d7a:	454f      	cmp	r7, r9
  401d7c:	4644      	mov	r4, r8
  401d7e:	464e      	mov	r6, r9
  401d80:	d314      	bcc.n	401dac <__udivmoddi4+0x2a8>
  401d82:	d029      	beq.n	401dd8 <__udivmoddi4+0x2d4>
  401d84:	b365      	cbz	r5, 401de0 <__udivmoddi4+0x2dc>
  401d86:	ebba 0304 	subs.w	r3, sl, r4
  401d8a:	eb67 0706 	sbc.w	r7, r7, r6
  401d8e:	fa07 fe0e 	lsl.w	lr, r7, lr
  401d92:	40cb      	lsrs	r3, r1
  401d94:	40cf      	lsrs	r7, r1
  401d96:	ea4e 0303 	orr.w	r3, lr, r3
  401d9a:	e885 0088 	stmia.w	r5, {r3, r7}
  401d9e:	2100      	movs	r1, #0
  401da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401da4:	4613      	mov	r3, r2
  401da6:	e6f8      	b.n	401b9a <__udivmoddi4+0x96>
  401da8:	4610      	mov	r0, r2
  401daa:	e6e0      	b.n	401b6e <__udivmoddi4+0x6a>
  401dac:	ebb8 0402 	subs.w	r4, r8, r2
  401db0:	eb69 0603 	sbc.w	r6, r9, r3
  401db4:	3801      	subs	r0, #1
  401db6:	e7e5      	b.n	401d84 <__udivmoddi4+0x280>
  401db8:	4604      	mov	r4, r0
  401dba:	e7d8      	b.n	401d6e <__udivmoddi4+0x26a>
  401dbc:	4611      	mov	r1, r2
  401dbe:	e795      	b.n	401cec <__udivmoddi4+0x1e8>
  401dc0:	4681      	mov	r9, r0
  401dc2:	e7c0      	b.n	401d46 <__udivmoddi4+0x242>
  401dc4:	468a      	mov	sl, r1
  401dc6:	e77c      	b.n	401cc2 <__udivmoddi4+0x1be>
  401dc8:	3b02      	subs	r3, #2
  401dca:	443c      	add	r4, r7
  401dcc:	e748      	b.n	401c60 <__udivmoddi4+0x15c>
  401dce:	4608      	mov	r0, r1
  401dd0:	e70a      	b.n	401be8 <__udivmoddi4+0xe4>
  401dd2:	3802      	subs	r0, #2
  401dd4:	443e      	add	r6, r7
  401dd6:	e72f      	b.n	401c38 <__udivmoddi4+0x134>
  401dd8:	45c2      	cmp	sl, r8
  401dda:	d3e7      	bcc.n	401dac <__udivmoddi4+0x2a8>
  401ddc:	463e      	mov	r6, r7
  401dde:	e7d1      	b.n	401d84 <__udivmoddi4+0x280>
  401de0:	4629      	mov	r1, r5
  401de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401de6:	bf00      	nop

00401de8 <__aeabi_idiv0>:
  401de8:	4770      	bx	lr
  401dea:	bf00      	nop

00401dec <__libc_init_array>:
  401dec:	b570      	push	{r4, r5, r6, lr}
  401dee:	4e0f      	ldr	r6, [pc, #60]	; (401e2c <__libc_init_array+0x40>)
  401df0:	4d0f      	ldr	r5, [pc, #60]	; (401e30 <__libc_init_array+0x44>)
  401df2:	1b76      	subs	r6, r6, r5
  401df4:	10b6      	asrs	r6, r6, #2
  401df6:	bf18      	it	ne
  401df8:	2400      	movne	r4, #0
  401dfa:	d005      	beq.n	401e08 <__libc_init_array+0x1c>
  401dfc:	3401      	adds	r4, #1
  401dfe:	f855 3b04 	ldr.w	r3, [r5], #4
  401e02:	4798      	blx	r3
  401e04:	42a6      	cmp	r6, r4
  401e06:	d1f9      	bne.n	401dfc <__libc_init_array+0x10>
  401e08:	4e0a      	ldr	r6, [pc, #40]	; (401e34 <__libc_init_array+0x48>)
  401e0a:	4d0b      	ldr	r5, [pc, #44]	; (401e38 <__libc_init_array+0x4c>)
  401e0c:	1b76      	subs	r6, r6, r5
  401e0e:	f002 feb1 	bl	404b74 <_init>
  401e12:	10b6      	asrs	r6, r6, #2
  401e14:	bf18      	it	ne
  401e16:	2400      	movne	r4, #0
  401e18:	d006      	beq.n	401e28 <__libc_init_array+0x3c>
  401e1a:	3401      	adds	r4, #1
  401e1c:	f855 3b04 	ldr.w	r3, [r5], #4
  401e20:	4798      	blx	r3
  401e22:	42a6      	cmp	r6, r4
  401e24:	d1f9      	bne.n	401e1a <__libc_init_array+0x2e>
  401e26:	bd70      	pop	{r4, r5, r6, pc}
  401e28:	bd70      	pop	{r4, r5, r6, pc}
  401e2a:	bf00      	nop
  401e2c:	00404b80 	.word	0x00404b80
  401e30:	00404b80 	.word	0x00404b80
  401e34:	00404b88 	.word	0x00404b88
  401e38:	00404b80 	.word	0x00404b80

00401e3c <iprintf>:
  401e3c:	b40f      	push	{r0, r1, r2, r3}
  401e3e:	b500      	push	{lr}
  401e40:	4907      	ldr	r1, [pc, #28]	; (401e60 <iprintf+0x24>)
  401e42:	b083      	sub	sp, #12
  401e44:	ab04      	add	r3, sp, #16
  401e46:	6808      	ldr	r0, [r1, #0]
  401e48:	f853 2b04 	ldr.w	r2, [r3], #4
  401e4c:	6881      	ldr	r1, [r0, #8]
  401e4e:	9301      	str	r3, [sp, #4]
  401e50:	f000 f942 	bl	4020d8 <_vfiprintf_r>
  401e54:	b003      	add	sp, #12
  401e56:	f85d eb04 	ldr.w	lr, [sp], #4
  401e5a:	b004      	add	sp, #16
  401e5c:	4770      	bx	lr
  401e5e:	bf00      	nop
  401e60:	20000438 	.word	0x20000438

00401e64 <memset>:
  401e64:	b470      	push	{r4, r5, r6}
  401e66:	0784      	lsls	r4, r0, #30
  401e68:	d046      	beq.n	401ef8 <memset+0x94>
  401e6a:	1e54      	subs	r4, r2, #1
  401e6c:	2a00      	cmp	r2, #0
  401e6e:	d041      	beq.n	401ef4 <memset+0x90>
  401e70:	b2cd      	uxtb	r5, r1
  401e72:	4603      	mov	r3, r0
  401e74:	e002      	b.n	401e7c <memset+0x18>
  401e76:	1e62      	subs	r2, r4, #1
  401e78:	b3e4      	cbz	r4, 401ef4 <memset+0x90>
  401e7a:	4614      	mov	r4, r2
  401e7c:	f803 5b01 	strb.w	r5, [r3], #1
  401e80:	079a      	lsls	r2, r3, #30
  401e82:	d1f8      	bne.n	401e76 <memset+0x12>
  401e84:	2c03      	cmp	r4, #3
  401e86:	d92e      	bls.n	401ee6 <memset+0x82>
  401e88:	b2cd      	uxtb	r5, r1
  401e8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401e8e:	2c0f      	cmp	r4, #15
  401e90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401e94:	d919      	bls.n	401eca <memset+0x66>
  401e96:	f103 0210 	add.w	r2, r3, #16
  401e9a:	4626      	mov	r6, r4
  401e9c:	3e10      	subs	r6, #16
  401e9e:	2e0f      	cmp	r6, #15
  401ea0:	f842 5c10 	str.w	r5, [r2, #-16]
  401ea4:	f842 5c0c 	str.w	r5, [r2, #-12]
  401ea8:	f842 5c08 	str.w	r5, [r2, #-8]
  401eac:	f842 5c04 	str.w	r5, [r2, #-4]
  401eb0:	f102 0210 	add.w	r2, r2, #16
  401eb4:	d8f2      	bhi.n	401e9c <memset+0x38>
  401eb6:	f1a4 0210 	sub.w	r2, r4, #16
  401eba:	f022 020f 	bic.w	r2, r2, #15
  401ebe:	f004 040f 	and.w	r4, r4, #15
  401ec2:	3210      	adds	r2, #16
  401ec4:	2c03      	cmp	r4, #3
  401ec6:	4413      	add	r3, r2
  401ec8:	d90d      	bls.n	401ee6 <memset+0x82>
  401eca:	461e      	mov	r6, r3
  401ecc:	4622      	mov	r2, r4
  401ece:	3a04      	subs	r2, #4
  401ed0:	2a03      	cmp	r2, #3
  401ed2:	f846 5b04 	str.w	r5, [r6], #4
  401ed6:	d8fa      	bhi.n	401ece <memset+0x6a>
  401ed8:	1f22      	subs	r2, r4, #4
  401eda:	f022 0203 	bic.w	r2, r2, #3
  401ede:	3204      	adds	r2, #4
  401ee0:	4413      	add	r3, r2
  401ee2:	f004 0403 	and.w	r4, r4, #3
  401ee6:	b12c      	cbz	r4, 401ef4 <memset+0x90>
  401ee8:	b2c9      	uxtb	r1, r1
  401eea:	441c      	add	r4, r3
  401eec:	f803 1b01 	strb.w	r1, [r3], #1
  401ef0:	42a3      	cmp	r3, r4
  401ef2:	d1fb      	bne.n	401eec <memset+0x88>
  401ef4:	bc70      	pop	{r4, r5, r6}
  401ef6:	4770      	bx	lr
  401ef8:	4614      	mov	r4, r2
  401efa:	4603      	mov	r3, r0
  401efc:	e7c2      	b.n	401e84 <memset+0x20>
  401efe:	bf00      	nop

00401f00 <setbuf>:
  401f00:	2900      	cmp	r1, #0
  401f02:	bf0c      	ite	eq
  401f04:	2202      	moveq	r2, #2
  401f06:	2200      	movne	r2, #0
  401f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401f0c:	f000 b800 	b.w	401f10 <setvbuf>

00401f10 <setvbuf>:
  401f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401f14:	4c51      	ldr	r4, [pc, #324]	; (40205c <setvbuf+0x14c>)
  401f16:	6825      	ldr	r5, [r4, #0]
  401f18:	b083      	sub	sp, #12
  401f1a:	4604      	mov	r4, r0
  401f1c:	460f      	mov	r7, r1
  401f1e:	4690      	mov	r8, r2
  401f20:	461e      	mov	r6, r3
  401f22:	b115      	cbz	r5, 401f2a <setvbuf+0x1a>
  401f24:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401f26:	2b00      	cmp	r3, #0
  401f28:	d079      	beq.n	40201e <setvbuf+0x10e>
  401f2a:	f1b8 0f02 	cmp.w	r8, #2
  401f2e:	d004      	beq.n	401f3a <setvbuf+0x2a>
  401f30:	f1b8 0f01 	cmp.w	r8, #1
  401f34:	d87f      	bhi.n	402036 <setvbuf+0x126>
  401f36:	2e00      	cmp	r6, #0
  401f38:	db7d      	blt.n	402036 <setvbuf+0x126>
  401f3a:	4621      	mov	r1, r4
  401f3c:	4628      	mov	r0, r5
  401f3e:	f001 f917 	bl	403170 <_fflush_r>
  401f42:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401f44:	b141      	cbz	r1, 401f58 <setvbuf+0x48>
  401f46:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401f4a:	4299      	cmp	r1, r3
  401f4c:	d002      	beq.n	401f54 <setvbuf+0x44>
  401f4e:	4628      	mov	r0, r5
  401f50:	f001 fa6c 	bl	40342c <_free_r>
  401f54:	2300      	movs	r3, #0
  401f56:	6323      	str	r3, [r4, #48]	; 0x30
  401f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401f5c:	2200      	movs	r2, #0
  401f5e:	61a2      	str	r2, [r4, #24]
  401f60:	6062      	str	r2, [r4, #4]
  401f62:	061a      	lsls	r2, r3, #24
  401f64:	d454      	bmi.n	402010 <setvbuf+0x100>
  401f66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401f6a:	f023 0303 	bic.w	r3, r3, #3
  401f6e:	f1b8 0f02 	cmp.w	r8, #2
  401f72:	81a3      	strh	r3, [r4, #12]
  401f74:	d039      	beq.n	401fea <setvbuf+0xda>
  401f76:	ab01      	add	r3, sp, #4
  401f78:	466a      	mov	r2, sp
  401f7a:	4621      	mov	r1, r4
  401f7c:	4628      	mov	r0, r5
  401f7e:	f001 fcf3 	bl	403968 <__swhatbuf_r>
  401f82:	89a3      	ldrh	r3, [r4, #12]
  401f84:	4318      	orrs	r0, r3
  401f86:	81a0      	strh	r0, [r4, #12]
  401f88:	b326      	cbz	r6, 401fd4 <setvbuf+0xc4>
  401f8a:	b327      	cbz	r7, 401fd6 <setvbuf+0xc6>
  401f8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401f8e:	2b00      	cmp	r3, #0
  401f90:	d04d      	beq.n	40202e <setvbuf+0x11e>
  401f92:	9b00      	ldr	r3, [sp, #0]
  401f94:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  401f98:	6027      	str	r7, [r4, #0]
  401f9a:	429e      	cmp	r6, r3
  401f9c:	bf1c      	itt	ne
  401f9e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  401fa2:	81a0      	strhne	r0, [r4, #12]
  401fa4:	f1b8 0f01 	cmp.w	r8, #1
  401fa8:	bf08      	it	eq
  401faa:	f040 0001 	orreq.w	r0, r0, #1
  401fae:	b283      	uxth	r3, r0
  401fb0:	bf08      	it	eq
  401fb2:	81a0      	strheq	r0, [r4, #12]
  401fb4:	f003 0008 	and.w	r0, r3, #8
  401fb8:	b280      	uxth	r0, r0
  401fba:	6127      	str	r7, [r4, #16]
  401fbc:	6166      	str	r6, [r4, #20]
  401fbe:	b318      	cbz	r0, 402008 <setvbuf+0xf8>
  401fc0:	f013 0001 	ands.w	r0, r3, #1
  401fc4:	d02f      	beq.n	402026 <setvbuf+0x116>
  401fc6:	2000      	movs	r0, #0
  401fc8:	4276      	negs	r6, r6
  401fca:	61a6      	str	r6, [r4, #24]
  401fcc:	60a0      	str	r0, [r4, #8]
  401fce:	b003      	add	sp, #12
  401fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401fd4:	9e00      	ldr	r6, [sp, #0]
  401fd6:	4630      	mov	r0, r6
  401fd8:	f001 fd3a 	bl	403a50 <malloc>
  401fdc:	4607      	mov	r7, r0
  401fde:	b368      	cbz	r0, 40203c <setvbuf+0x12c>
  401fe0:	89a3      	ldrh	r3, [r4, #12]
  401fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401fe6:	81a3      	strh	r3, [r4, #12]
  401fe8:	e7d0      	b.n	401f8c <setvbuf+0x7c>
  401fea:	2000      	movs	r0, #0
  401fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401ff0:	f043 0302 	orr.w	r3, r3, #2
  401ff4:	2500      	movs	r5, #0
  401ff6:	2101      	movs	r1, #1
  401ff8:	81a3      	strh	r3, [r4, #12]
  401ffa:	60a5      	str	r5, [r4, #8]
  401ffc:	6022      	str	r2, [r4, #0]
  401ffe:	6122      	str	r2, [r4, #16]
  402000:	6161      	str	r1, [r4, #20]
  402002:	b003      	add	sp, #12
  402004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402008:	60a0      	str	r0, [r4, #8]
  40200a:	b003      	add	sp, #12
  40200c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402010:	6921      	ldr	r1, [r4, #16]
  402012:	4628      	mov	r0, r5
  402014:	f001 fa0a 	bl	40342c <_free_r>
  402018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40201c:	e7a3      	b.n	401f66 <setvbuf+0x56>
  40201e:	4628      	mov	r0, r5
  402020:	f001 f93a 	bl	403298 <__sinit>
  402024:	e781      	b.n	401f2a <setvbuf+0x1a>
  402026:	60a6      	str	r6, [r4, #8]
  402028:	b003      	add	sp, #12
  40202a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40202e:	4628      	mov	r0, r5
  402030:	f001 f932 	bl	403298 <__sinit>
  402034:	e7ad      	b.n	401f92 <setvbuf+0x82>
  402036:	f04f 30ff 	mov.w	r0, #4294967295
  40203a:	e7e2      	b.n	402002 <setvbuf+0xf2>
  40203c:	f8dd 9000 	ldr.w	r9, [sp]
  402040:	45b1      	cmp	r9, r6
  402042:	d006      	beq.n	402052 <setvbuf+0x142>
  402044:	4648      	mov	r0, r9
  402046:	f001 fd03 	bl	403a50 <malloc>
  40204a:	4607      	mov	r7, r0
  40204c:	b108      	cbz	r0, 402052 <setvbuf+0x142>
  40204e:	464e      	mov	r6, r9
  402050:	e7c6      	b.n	401fe0 <setvbuf+0xd0>
  402052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402056:	f04f 30ff 	mov.w	r0, #4294967295
  40205a:	e7c7      	b.n	401fec <setvbuf+0xdc>
  40205c:	20000438 	.word	0x20000438

00402060 <__sprint_r.part.0>:
  402060:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402066:	049c      	lsls	r4, r3, #18
  402068:	4692      	mov	sl, r2
  40206a:	d52c      	bpl.n	4020c6 <__sprint_r.part.0+0x66>
  40206c:	6893      	ldr	r3, [r2, #8]
  40206e:	6812      	ldr	r2, [r2, #0]
  402070:	b33b      	cbz	r3, 4020c2 <__sprint_r.part.0+0x62>
  402072:	460f      	mov	r7, r1
  402074:	4680      	mov	r8, r0
  402076:	f102 0908 	add.w	r9, r2, #8
  40207a:	e919 0060 	ldmdb	r9, {r5, r6}
  40207e:	08b6      	lsrs	r6, r6, #2
  402080:	d017      	beq.n	4020b2 <__sprint_r.part.0+0x52>
  402082:	3d04      	subs	r5, #4
  402084:	2400      	movs	r4, #0
  402086:	e001      	b.n	40208c <__sprint_r.part.0+0x2c>
  402088:	42a6      	cmp	r6, r4
  40208a:	d010      	beq.n	4020ae <__sprint_r.part.0+0x4e>
  40208c:	463a      	mov	r2, r7
  40208e:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402092:	4640      	mov	r0, r8
  402094:	f001 f96a 	bl	40336c <_fputwc_r>
  402098:	1c43      	adds	r3, r0, #1
  40209a:	f104 0401 	add.w	r4, r4, #1
  40209e:	d1f3      	bne.n	402088 <__sprint_r.part.0+0x28>
  4020a0:	2300      	movs	r3, #0
  4020a2:	f8ca 3008 	str.w	r3, [sl, #8]
  4020a6:	f8ca 3004 	str.w	r3, [sl, #4]
  4020aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020ae:	f8da 3008 	ldr.w	r3, [sl, #8]
  4020b2:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4020b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4020ba:	f109 0908 	add.w	r9, r9, #8
  4020be:	2b00      	cmp	r3, #0
  4020c0:	d1db      	bne.n	40207a <__sprint_r.part.0+0x1a>
  4020c2:	2000      	movs	r0, #0
  4020c4:	e7ec      	b.n	4020a0 <__sprint_r.part.0+0x40>
  4020c6:	f001 fa99 	bl	4035fc <__sfvwrite_r>
  4020ca:	2300      	movs	r3, #0
  4020cc:	f8ca 3008 	str.w	r3, [sl, #8]
  4020d0:	f8ca 3004 	str.w	r3, [sl, #4]
  4020d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004020d8 <_vfiprintf_r>:
  4020d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020dc:	b0ab      	sub	sp, #172	; 0xac
  4020de:	461c      	mov	r4, r3
  4020e0:	9100      	str	r1, [sp, #0]
  4020e2:	4690      	mov	r8, r2
  4020e4:	9304      	str	r3, [sp, #16]
  4020e6:	9005      	str	r0, [sp, #20]
  4020e8:	b118      	cbz	r0, 4020f2 <_vfiprintf_r+0x1a>
  4020ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4020ec:	2b00      	cmp	r3, #0
  4020ee:	f000 80de 	beq.w	4022ae <_vfiprintf_r+0x1d6>
  4020f2:	9800      	ldr	r0, [sp, #0]
  4020f4:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  4020f8:	b28a      	uxth	r2, r1
  4020fa:	0495      	lsls	r5, r2, #18
  4020fc:	d407      	bmi.n	40210e <_vfiprintf_r+0x36>
  4020fe:	6e43      	ldr	r3, [r0, #100]	; 0x64
  402100:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  402104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402108:	8182      	strh	r2, [r0, #12]
  40210a:	6643      	str	r3, [r0, #100]	; 0x64
  40210c:	b292      	uxth	r2, r2
  40210e:	0711      	lsls	r1, r2, #28
  402110:	f140 80b1 	bpl.w	402276 <_vfiprintf_r+0x19e>
  402114:	9b00      	ldr	r3, [sp, #0]
  402116:	691b      	ldr	r3, [r3, #16]
  402118:	2b00      	cmp	r3, #0
  40211a:	f000 80ac 	beq.w	402276 <_vfiprintf_r+0x19e>
  40211e:	f002 021a 	and.w	r2, r2, #26
  402122:	2a0a      	cmp	r2, #10
  402124:	f000 80b5 	beq.w	402292 <_vfiprintf_r+0x1ba>
  402128:	2300      	movs	r3, #0
  40212a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40212e:	9302      	str	r3, [sp, #8]
  402130:	930f      	str	r3, [sp, #60]	; 0x3c
  402132:	930e      	str	r3, [sp, #56]	; 0x38
  402134:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  402138:	46da      	mov	sl, fp
  40213a:	f898 3000 	ldrb.w	r3, [r8]
  40213e:	4644      	mov	r4, r8
  402140:	b1fb      	cbz	r3, 402182 <_vfiprintf_r+0xaa>
  402142:	2b25      	cmp	r3, #37	; 0x25
  402144:	d102      	bne.n	40214c <_vfiprintf_r+0x74>
  402146:	e01c      	b.n	402182 <_vfiprintf_r+0xaa>
  402148:	2b25      	cmp	r3, #37	; 0x25
  40214a:	d003      	beq.n	402154 <_vfiprintf_r+0x7c>
  40214c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402150:	2b00      	cmp	r3, #0
  402152:	d1f9      	bne.n	402148 <_vfiprintf_r+0x70>
  402154:	ebc8 0504 	rsb	r5, r8, r4
  402158:	b19d      	cbz	r5, 402182 <_vfiprintf_r+0xaa>
  40215a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40215c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40215e:	f8ca 8000 	str.w	r8, [sl]
  402162:	3301      	adds	r3, #1
  402164:	442a      	add	r2, r5
  402166:	2b07      	cmp	r3, #7
  402168:	f8ca 5004 	str.w	r5, [sl, #4]
  40216c:	920f      	str	r2, [sp, #60]	; 0x3c
  40216e:	930e      	str	r3, [sp, #56]	; 0x38
  402170:	dd7b      	ble.n	40226a <_vfiprintf_r+0x192>
  402172:	2a00      	cmp	r2, #0
  402174:	f040 8528 	bne.w	402bc8 <_vfiprintf_r+0xaf0>
  402178:	9b02      	ldr	r3, [sp, #8]
  40217a:	920e      	str	r2, [sp, #56]	; 0x38
  40217c:	442b      	add	r3, r5
  40217e:	46da      	mov	sl, fp
  402180:	9302      	str	r3, [sp, #8]
  402182:	7823      	ldrb	r3, [r4, #0]
  402184:	2b00      	cmp	r3, #0
  402186:	f000 843e 	beq.w	402a06 <_vfiprintf_r+0x92e>
  40218a:	2100      	movs	r1, #0
  40218c:	f04f 0300 	mov.w	r3, #0
  402190:	f04f 32ff 	mov.w	r2, #4294967295
  402194:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402198:	f104 0801 	add.w	r8, r4, #1
  40219c:	7863      	ldrb	r3, [r4, #1]
  40219e:	9201      	str	r2, [sp, #4]
  4021a0:	4608      	mov	r0, r1
  4021a2:	460e      	mov	r6, r1
  4021a4:	460c      	mov	r4, r1
  4021a6:	f108 0801 	add.w	r8, r8, #1
  4021aa:	f1a3 0220 	sub.w	r2, r3, #32
  4021ae:	2a58      	cmp	r2, #88	; 0x58
  4021b0:	f200 8393 	bhi.w	4028da <_vfiprintf_r+0x802>
  4021b4:	e8df f012 	tbh	[pc, r2, lsl #1]
  4021b8:	03910346 	.word	0x03910346
  4021bc:	034e0391 	.word	0x034e0391
  4021c0:	03910391 	.word	0x03910391
  4021c4:	03910391 	.word	0x03910391
  4021c8:	03910391 	.word	0x03910391
  4021cc:	02670289 	.word	0x02670289
  4021d0:	00800391 	.word	0x00800391
  4021d4:	0391026c 	.word	0x0391026c
  4021d8:	025901c6 	.word	0x025901c6
  4021dc:	02590259 	.word	0x02590259
  4021e0:	02590259 	.word	0x02590259
  4021e4:	02590259 	.word	0x02590259
  4021e8:	02590259 	.word	0x02590259
  4021ec:	03910391 	.word	0x03910391
  4021f0:	03910391 	.word	0x03910391
  4021f4:	03910391 	.word	0x03910391
  4021f8:	03910391 	.word	0x03910391
  4021fc:	03910391 	.word	0x03910391
  402200:	039101cb 	.word	0x039101cb
  402204:	03910391 	.word	0x03910391
  402208:	03910391 	.word	0x03910391
  40220c:	03910391 	.word	0x03910391
  402210:	03910391 	.word	0x03910391
  402214:	02140391 	.word	0x02140391
  402218:	03910391 	.word	0x03910391
  40221c:	03910391 	.word	0x03910391
  402220:	02ee0391 	.word	0x02ee0391
  402224:	03910391 	.word	0x03910391
  402228:	03910311 	.word	0x03910311
  40222c:	03910391 	.word	0x03910391
  402230:	03910391 	.word	0x03910391
  402234:	03910391 	.word	0x03910391
  402238:	03910391 	.word	0x03910391
  40223c:	03340391 	.word	0x03340391
  402240:	0391038a 	.word	0x0391038a
  402244:	03910391 	.word	0x03910391
  402248:	038a0367 	.word	0x038a0367
  40224c:	03910391 	.word	0x03910391
  402250:	0391036c 	.word	0x0391036c
  402254:	02950379 	.word	0x02950379
  402258:	02e90085 	.word	0x02e90085
  40225c:	029b0391 	.word	0x029b0391
  402260:	02ba0391 	.word	0x02ba0391
  402264:	03910391 	.word	0x03910391
  402268:	0353      	.short	0x0353
  40226a:	f10a 0a08 	add.w	sl, sl, #8
  40226e:	9b02      	ldr	r3, [sp, #8]
  402270:	442b      	add	r3, r5
  402272:	9302      	str	r3, [sp, #8]
  402274:	e785      	b.n	402182 <_vfiprintf_r+0xaa>
  402276:	9900      	ldr	r1, [sp, #0]
  402278:	9805      	ldr	r0, [sp, #20]
  40227a:	f000 fe61 	bl	402f40 <__swsetup_r>
  40227e:	2800      	cmp	r0, #0
  402280:	f040 8558 	bne.w	402d34 <_vfiprintf_r+0xc5c>
  402284:	9b00      	ldr	r3, [sp, #0]
  402286:	899a      	ldrh	r2, [r3, #12]
  402288:	f002 021a 	and.w	r2, r2, #26
  40228c:	2a0a      	cmp	r2, #10
  40228e:	f47f af4b 	bne.w	402128 <_vfiprintf_r+0x50>
  402292:	9900      	ldr	r1, [sp, #0]
  402294:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  402298:	2b00      	cmp	r3, #0
  40229a:	f6ff af45 	blt.w	402128 <_vfiprintf_r+0x50>
  40229e:	4623      	mov	r3, r4
  4022a0:	4642      	mov	r2, r8
  4022a2:	9805      	ldr	r0, [sp, #20]
  4022a4:	f000 fe16 	bl	402ed4 <__sbprintf>
  4022a8:	b02b      	add	sp, #172	; 0xac
  4022aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022ae:	f000 fff3 	bl	403298 <__sinit>
  4022b2:	e71e      	b.n	4020f2 <_vfiprintf_r+0x1a>
  4022b4:	4264      	negs	r4, r4
  4022b6:	9304      	str	r3, [sp, #16]
  4022b8:	f046 0604 	orr.w	r6, r6, #4
  4022bc:	f898 3000 	ldrb.w	r3, [r8]
  4022c0:	e771      	b.n	4021a6 <_vfiprintf_r+0xce>
  4022c2:	2130      	movs	r1, #48	; 0x30
  4022c4:	9804      	ldr	r0, [sp, #16]
  4022c6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  4022ca:	9901      	ldr	r1, [sp, #4]
  4022cc:	9406      	str	r4, [sp, #24]
  4022ce:	f04f 0300 	mov.w	r3, #0
  4022d2:	2278      	movs	r2, #120	; 0x78
  4022d4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4022d8:	2900      	cmp	r1, #0
  4022da:	4603      	mov	r3, r0
  4022dc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  4022e0:	6804      	ldr	r4, [r0, #0]
  4022e2:	f103 0304 	add.w	r3, r3, #4
  4022e6:	f04f 0500 	mov.w	r5, #0
  4022ea:	f046 0202 	orr.w	r2, r6, #2
  4022ee:	f2c0 8525 	blt.w	402d3c <_vfiprintf_r+0xc64>
  4022f2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4022f6:	ea54 0205 	orrs.w	r2, r4, r5
  4022fa:	f046 0602 	orr.w	r6, r6, #2
  4022fe:	9304      	str	r3, [sp, #16]
  402300:	f040 84bf 	bne.w	402c82 <_vfiprintf_r+0xbaa>
  402304:	48b3      	ldr	r0, [pc, #716]	; (4025d4 <_vfiprintf_r+0x4fc>)
  402306:	9b01      	ldr	r3, [sp, #4]
  402308:	2b00      	cmp	r3, #0
  40230a:	f040 841c 	bne.w	402b46 <_vfiprintf_r+0xa6e>
  40230e:	4699      	mov	r9, r3
  402310:	2300      	movs	r3, #0
  402312:	9301      	str	r3, [sp, #4]
  402314:	9303      	str	r3, [sp, #12]
  402316:	465f      	mov	r7, fp
  402318:	9b01      	ldr	r3, [sp, #4]
  40231a:	9a03      	ldr	r2, [sp, #12]
  40231c:	4293      	cmp	r3, r2
  40231e:	bfb8      	it	lt
  402320:	4613      	movlt	r3, r2
  402322:	461d      	mov	r5, r3
  402324:	f1b9 0f00 	cmp.w	r9, #0
  402328:	d000      	beq.n	40232c <_vfiprintf_r+0x254>
  40232a:	3501      	adds	r5, #1
  40232c:	f016 0302 	ands.w	r3, r6, #2
  402330:	9307      	str	r3, [sp, #28]
  402332:	bf18      	it	ne
  402334:	3502      	addne	r5, #2
  402336:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  40233a:	9308      	str	r3, [sp, #32]
  40233c:	f040 82f1 	bne.w	402922 <_vfiprintf_r+0x84a>
  402340:	9b06      	ldr	r3, [sp, #24]
  402342:	1b5c      	subs	r4, r3, r5
  402344:	2c00      	cmp	r4, #0
  402346:	f340 82ec 	ble.w	402922 <_vfiprintf_r+0x84a>
  40234a:	2c10      	cmp	r4, #16
  40234c:	f340 8556 	ble.w	402dfc <_vfiprintf_r+0xd24>
  402350:	f8df 9284 	ldr.w	r9, [pc, #644]	; 4025d8 <_vfiprintf_r+0x500>
  402354:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  402358:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40235a:	46d4      	mov	ip, sl
  40235c:	2310      	movs	r3, #16
  40235e:	46c2      	mov	sl, r8
  402360:	4670      	mov	r0, lr
  402362:	46a8      	mov	r8, r5
  402364:	464d      	mov	r5, r9
  402366:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40236a:	e007      	b.n	40237c <_vfiprintf_r+0x2a4>
  40236c:	f100 0e02 	add.w	lr, r0, #2
  402370:	f10c 0c08 	add.w	ip, ip, #8
  402374:	4608      	mov	r0, r1
  402376:	3c10      	subs	r4, #16
  402378:	2c10      	cmp	r4, #16
  40237a:	dd13      	ble.n	4023a4 <_vfiprintf_r+0x2cc>
  40237c:	1c41      	adds	r1, r0, #1
  40237e:	3210      	adds	r2, #16
  402380:	2907      	cmp	r1, #7
  402382:	920f      	str	r2, [sp, #60]	; 0x3c
  402384:	f8cc 5000 	str.w	r5, [ip]
  402388:	f8cc 3004 	str.w	r3, [ip, #4]
  40238c:	910e      	str	r1, [sp, #56]	; 0x38
  40238e:	dded      	ble.n	40236c <_vfiprintf_r+0x294>
  402390:	2a00      	cmp	r2, #0
  402392:	f040 82b7 	bne.w	402904 <_vfiprintf_r+0x82c>
  402396:	3c10      	subs	r4, #16
  402398:	2c10      	cmp	r4, #16
  40239a:	4610      	mov	r0, r2
  40239c:	f04f 0e01 	mov.w	lr, #1
  4023a0:	46dc      	mov	ip, fp
  4023a2:	dceb      	bgt.n	40237c <_vfiprintf_r+0x2a4>
  4023a4:	46a9      	mov	r9, r5
  4023a6:	4670      	mov	r0, lr
  4023a8:	4645      	mov	r5, r8
  4023aa:	46d0      	mov	r8, sl
  4023ac:	46e2      	mov	sl, ip
  4023ae:	4422      	add	r2, r4
  4023b0:	2807      	cmp	r0, #7
  4023b2:	920f      	str	r2, [sp, #60]	; 0x3c
  4023b4:	f8ca 9000 	str.w	r9, [sl]
  4023b8:	f8ca 4004 	str.w	r4, [sl, #4]
  4023bc:	900e      	str	r0, [sp, #56]	; 0x38
  4023be:	f300 8375 	bgt.w	402aac <_vfiprintf_r+0x9d4>
  4023c2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4023c6:	f10a 0a08 	add.w	sl, sl, #8
  4023ca:	f100 0e01 	add.w	lr, r0, #1
  4023ce:	2b00      	cmp	r3, #0
  4023d0:	f040 82b0 	bne.w	402934 <_vfiprintf_r+0x85c>
  4023d4:	9b07      	ldr	r3, [sp, #28]
  4023d6:	2b00      	cmp	r3, #0
  4023d8:	f000 82c3 	beq.w	402962 <_vfiprintf_r+0x88a>
  4023dc:	3202      	adds	r2, #2
  4023de:	a90c      	add	r1, sp, #48	; 0x30
  4023e0:	2302      	movs	r3, #2
  4023e2:	f1be 0f07 	cmp.w	lr, #7
  4023e6:	920f      	str	r2, [sp, #60]	; 0x3c
  4023e8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4023ec:	e88a 000a 	stmia.w	sl, {r1, r3}
  4023f0:	f340 8378 	ble.w	402ae4 <_vfiprintf_r+0xa0c>
  4023f4:	2a00      	cmp	r2, #0
  4023f6:	f040 840a 	bne.w	402c0e <_vfiprintf_r+0xb36>
  4023fa:	9b08      	ldr	r3, [sp, #32]
  4023fc:	2b80      	cmp	r3, #128	; 0x80
  4023fe:	f04f 0e01 	mov.w	lr, #1
  402402:	4610      	mov	r0, r2
  402404:	46da      	mov	sl, fp
  402406:	f040 82b0 	bne.w	40296a <_vfiprintf_r+0x892>
  40240a:	9b06      	ldr	r3, [sp, #24]
  40240c:	1b5c      	subs	r4, r3, r5
  40240e:	2c00      	cmp	r4, #0
  402410:	f340 82ab 	ble.w	40296a <_vfiprintf_r+0x892>
  402414:	2c10      	cmp	r4, #16
  402416:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 4025dc <_vfiprintf_r+0x504>
  40241a:	f340 850b 	ble.w	402e34 <_vfiprintf_r+0xd5c>
  40241e:	46d6      	mov	lr, sl
  402420:	2310      	movs	r3, #16
  402422:	46c2      	mov	sl, r8
  402424:	46a8      	mov	r8, r5
  402426:	464d      	mov	r5, r9
  402428:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40242c:	e007      	b.n	40243e <_vfiprintf_r+0x366>
  40242e:	f100 0c02 	add.w	ip, r0, #2
  402432:	f10e 0e08 	add.w	lr, lr, #8
  402436:	4608      	mov	r0, r1
  402438:	3c10      	subs	r4, #16
  40243a:	2c10      	cmp	r4, #16
  40243c:	dd13      	ble.n	402466 <_vfiprintf_r+0x38e>
  40243e:	1c41      	adds	r1, r0, #1
  402440:	3210      	adds	r2, #16
  402442:	2907      	cmp	r1, #7
  402444:	920f      	str	r2, [sp, #60]	; 0x3c
  402446:	f8ce 5000 	str.w	r5, [lr]
  40244a:	f8ce 3004 	str.w	r3, [lr, #4]
  40244e:	910e      	str	r1, [sp, #56]	; 0x38
  402450:	dded      	ble.n	40242e <_vfiprintf_r+0x356>
  402452:	2a00      	cmp	r2, #0
  402454:	f040 8315 	bne.w	402a82 <_vfiprintf_r+0x9aa>
  402458:	3c10      	subs	r4, #16
  40245a:	2c10      	cmp	r4, #16
  40245c:	f04f 0c01 	mov.w	ip, #1
  402460:	4610      	mov	r0, r2
  402462:	46de      	mov	lr, fp
  402464:	dceb      	bgt.n	40243e <_vfiprintf_r+0x366>
  402466:	46a9      	mov	r9, r5
  402468:	4645      	mov	r5, r8
  40246a:	46d0      	mov	r8, sl
  40246c:	46f2      	mov	sl, lr
  40246e:	4422      	add	r2, r4
  402470:	f1bc 0f07 	cmp.w	ip, #7
  402474:	920f      	str	r2, [sp, #60]	; 0x3c
  402476:	f8ca 9000 	str.w	r9, [sl]
  40247a:	f8ca 4004 	str.w	r4, [sl, #4]
  40247e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  402482:	f300 83d2 	bgt.w	402c2a <_vfiprintf_r+0xb52>
  402486:	9b01      	ldr	r3, [sp, #4]
  402488:	9903      	ldr	r1, [sp, #12]
  40248a:	1a5c      	subs	r4, r3, r1
  40248c:	2c00      	cmp	r4, #0
  40248e:	f10a 0a08 	add.w	sl, sl, #8
  402492:	f10c 0e01 	add.w	lr, ip, #1
  402496:	4660      	mov	r0, ip
  402498:	f300 826d 	bgt.w	402976 <_vfiprintf_r+0x89e>
  40249c:	9903      	ldr	r1, [sp, #12]
  40249e:	f8ca 7000 	str.w	r7, [sl]
  4024a2:	440a      	add	r2, r1
  4024a4:	f1be 0f07 	cmp.w	lr, #7
  4024a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4024aa:	f8ca 1004 	str.w	r1, [sl, #4]
  4024ae:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4024b2:	f340 82ce 	ble.w	402a52 <_vfiprintf_r+0x97a>
  4024b6:	2a00      	cmp	r2, #0
  4024b8:	f040 833a 	bne.w	402b30 <_vfiprintf_r+0xa58>
  4024bc:	0770      	lsls	r0, r6, #29
  4024be:	920e      	str	r2, [sp, #56]	; 0x38
  4024c0:	d538      	bpl.n	402534 <_vfiprintf_r+0x45c>
  4024c2:	9b06      	ldr	r3, [sp, #24]
  4024c4:	1b5c      	subs	r4, r3, r5
  4024c6:	2c00      	cmp	r4, #0
  4024c8:	dd34      	ble.n	402534 <_vfiprintf_r+0x45c>
  4024ca:	46da      	mov	sl, fp
  4024cc:	2c10      	cmp	r4, #16
  4024ce:	f340 84ab 	ble.w	402e28 <_vfiprintf_r+0xd50>
  4024d2:	f8df 9104 	ldr.w	r9, [pc, #260]	; 4025d8 <_vfiprintf_r+0x500>
  4024d6:	990e      	ldr	r1, [sp, #56]	; 0x38
  4024d8:	464f      	mov	r7, r9
  4024da:	2610      	movs	r6, #16
  4024dc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4024e0:	e006      	b.n	4024f0 <_vfiprintf_r+0x418>
  4024e2:	1c88      	adds	r0, r1, #2
  4024e4:	f10a 0a08 	add.w	sl, sl, #8
  4024e8:	4619      	mov	r1, r3
  4024ea:	3c10      	subs	r4, #16
  4024ec:	2c10      	cmp	r4, #16
  4024ee:	dd13      	ble.n	402518 <_vfiprintf_r+0x440>
  4024f0:	1c4b      	adds	r3, r1, #1
  4024f2:	3210      	adds	r2, #16
  4024f4:	2b07      	cmp	r3, #7
  4024f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4024f8:	f8ca 7000 	str.w	r7, [sl]
  4024fc:	f8ca 6004 	str.w	r6, [sl, #4]
  402500:	930e      	str	r3, [sp, #56]	; 0x38
  402502:	ddee      	ble.n	4024e2 <_vfiprintf_r+0x40a>
  402504:	2a00      	cmp	r2, #0
  402506:	f040 828e 	bne.w	402a26 <_vfiprintf_r+0x94e>
  40250a:	3c10      	subs	r4, #16
  40250c:	2c10      	cmp	r4, #16
  40250e:	f04f 0001 	mov.w	r0, #1
  402512:	4611      	mov	r1, r2
  402514:	46da      	mov	sl, fp
  402516:	dceb      	bgt.n	4024f0 <_vfiprintf_r+0x418>
  402518:	46b9      	mov	r9, r7
  40251a:	4422      	add	r2, r4
  40251c:	2807      	cmp	r0, #7
  40251e:	920f      	str	r2, [sp, #60]	; 0x3c
  402520:	f8ca 9000 	str.w	r9, [sl]
  402524:	f8ca 4004 	str.w	r4, [sl, #4]
  402528:	900e      	str	r0, [sp, #56]	; 0x38
  40252a:	f340 829b 	ble.w	402a64 <_vfiprintf_r+0x98c>
  40252e:	2a00      	cmp	r2, #0
  402530:	f040 8425 	bne.w	402d7e <_vfiprintf_r+0xca6>
  402534:	9b02      	ldr	r3, [sp, #8]
  402536:	9a06      	ldr	r2, [sp, #24]
  402538:	42aa      	cmp	r2, r5
  40253a:	bfac      	ite	ge
  40253c:	189b      	addge	r3, r3, r2
  40253e:	195b      	addlt	r3, r3, r5
  402540:	9302      	str	r3, [sp, #8]
  402542:	e299      	b.n	402a78 <_vfiprintf_r+0x9a0>
  402544:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402548:	f898 3000 	ldrb.w	r3, [r8]
  40254c:	e62b      	b.n	4021a6 <_vfiprintf_r+0xce>
  40254e:	9406      	str	r4, [sp, #24]
  402550:	2900      	cmp	r1, #0
  402552:	f040 84af 	bne.w	402eb4 <_vfiprintf_r+0xddc>
  402556:	f046 0610 	orr.w	r6, r6, #16
  40255a:	06b3      	lsls	r3, r6, #26
  40255c:	f140 8312 	bpl.w	402b84 <_vfiprintf_r+0xaac>
  402560:	9904      	ldr	r1, [sp, #16]
  402562:	3107      	adds	r1, #7
  402564:	f021 0107 	bic.w	r1, r1, #7
  402568:	e9d1 2300 	ldrd	r2, r3, [r1]
  40256c:	3108      	adds	r1, #8
  40256e:	9104      	str	r1, [sp, #16]
  402570:	4614      	mov	r4, r2
  402572:	461d      	mov	r5, r3
  402574:	2a00      	cmp	r2, #0
  402576:	f173 0300 	sbcs.w	r3, r3, #0
  40257a:	f2c0 8386 	blt.w	402c8a <_vfiprintf_r+0xbb2>
  40257e:	9b01      	ldr	r3, [sp, #4]
  402580:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402584:	2b00      	cmp	r3, #0
  402586:	f2c0 831a 	blt.w	402bbe <_vfiprintf_r+0xae6>
  40258a:	ea54 0305 	orrs.w	r3, r4, r5
  40258e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402592:	f000 80ed 	beq.w	402770 <_vfiprintf_r+0x698>
  402596:	2d00      	cmp	r5, #0
  402598:	bf08      	it	eq
  40259a:	2c0a      	cmpeq	r4, #10
  40259c:	f0c0 80ed 	bcc.w	40277a <_vfiprintf_r+0x6a2>
  4025a0:	465f      	mov	r7, fp
  4025a2:	4620      	mov	r0, r4
  4025a4:	4629      	mov	r1, r5
  4025a6:	220a      	movs	r2, #10
  4025a8:	2300      	movs	r3, #0
  4025aa:	f7ff fa93 	bl	401ad4 <__aeabi_uldivmod>
  4025ae:	3230      	adds	r2, #48	; 0x30
  4025b0:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4025b4:	4620      	mov	r0, r4
  4025b6:	4629      	mov	r1, r5
  4025b8:	2300      	movs	r3, #0
  4025ba:	220a      	movs	r2, #10
  4025bc:	f7ff fa8a 	bl	401ad4 <__aeabi_uldivmod>
  4025c0:	4604      	mov	r4, r0
  4025c2:	460d      	mov	r5, r1
  4025c4:	ea54 0305 	orrs.w	r3, r4, r5
  4025c8:	d1eb      	bne.n	4025a2 <_vfiprintf_r+0x4ca>
  4025ca:	ebc7 030b 	rsb	r3, r7, fp
  4025ce:	9303      	str	r3, [sp, #12]
  4025d0:	e6a2      	b.n	402318 <_vfiprintf_r+0x240>
  4025d2:	bf00      	nop
  4025d4:	00404b48 	.word	0x00404b48
  4025d8:	00404b64 	.word	0x00404b64
  4025dc:	00404b24 	.word	0x00404b24
  4025e0:	9406      	str	r4, [sp, #24]
  4025e2:	2900      	cmp	r1, #0
  4025e4:	f040 8462 	bne.w	402eac <_vfiprintf_r+0xdd4>
  4025e8:	f046 0610 	orr.w	r6, r6, #16
  4025ec:	f016 0320 	ands.w	r3, r6, #32
  4025f0:	f000 82ae 	beq.w	402b50 <_vfiprintf_r+0xa78>
  4025f4:	9b04      	ldr	r3, [sp, #16]
  4025f6:	3307      	adds	r3, #7
  4025f8:	f023 0307 	bic.w	r3, r3, #7
  4025fc:	f04f 0200 	mov.w	r2, #0
  402600:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402604:	e9d3 4500 	ldrd	r4, r5, [r3]
  402608:	f103 0208 	add.w	r2, r3, #8
  40260c:	9b01      	ldr	r3, [sp, #4]
  40260e:	9204      	str	r2, [sp, #16]
  402610:	2b00      	cmp	r3, #0
  402612:	f2c0 8174 	blt.w	4028fe <_vfiprintf_r+0x826>
  402616:	ea54 0305 	orrs.w	r3, r4, r5
  40261a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40261e:	f040 816e 	bne.w	4028fe <_vfiprintf_r+0x826>
  402622:	9b01      	ldr	r3, [sp, #4]
  402624:	2b00      	cmp	r3, #0
  402626:	f000 8430 	beq.w	402e8a <_vfiprintf_r+0xdb2>
  40262a:	f04f 0900 	mov.w	r9, #0
  40262e:	2400      	movs	r4, #0
  402630:	2500      	movs	r5, #0
  402632:	465f      	mov	r7, fp
  402634:	08e2      	lsrs	r2, r4, #3
  402636:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40263a:	08e9      	lsrs	r1, r5, #3
  40263c:	f004 0307 	and.w	r3, r4, #7
  402640:	460d      	mov	r5, r1
  402642:	4614      	mov	r4, r2
  402644:	3330      	adds	r3, #48	; 0x30
  402646:	ea54 0205 	orrs.w	r2, r4, r5
  40264a:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40264e:	d1f1      	bne.n	402634 <_vfiprintf_r+0x55c>
  402650:	07f4      	lsls	r4, r6, #31
  402652:	d5ba      	bpl.n	4025ca <_vfiprintf_r+0x4f2>
  402654:	2b30      	cmp	r3, #48	; 0x30
  402656:	d0b8      	beq.n	4025ca <_vfiprintf_r+0x4f2>
  402658:	2230      	movs	r2, #48	; 0x30
  40265a:	1e7b      	subs	r3, r7, #1
  40265c:	f807 2c01 	strb.w	r2, [r7, #-1]
  402660:	ebc3 020b 	rsb	r2, r3, fp
  402664:	9203      	str	r2, [sp, #12]
  402666:	461f      	mov	r7, r3
  402668:	e656      	b.n	402318 <_vfiprintf_r+0x240>
  40266a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40266e:	2400      	movs	r4, #0
  402670:	f818 3b01 	ldrb.w	r3, [r8], #1
  402674:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402678:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  40267c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402680:	2a09      	cmp	r2, #9
  402682:	d9f5      	bls.n	402670 <_vfiprintf_r+0x598>
  402684:	e591      	b.n	4021aa <_vfiprintf_r+0xd2>
  402686:	f898 3000 	ldrb.w	r3, [r8]
  40268a:	2101      	movs	r1, #1
  40268c:	202b      	movs	r0, #43	; 0x2b
  40268e:	e58a      	b.n	4021a6 <_vfiprintf_r+0xce>
  402690:	f898 3000 	ldrb.w	r3, [r8]
  402694:	2b2a      	cmp	r3, #42	; 0x2a
  402696:	f108 0501 	add.w	r5, r8, #1
  40269a:	f000 83dd 	beq.w	402e58 <_vfiprintf_r+0xd80>
  40269e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4026a2:	2a09      	cmp	r2, #9
  4026a4:	46a8      	mov	r8, r5
  4026a6:	bf98      	it	ls
  4026a8:	2500      	movls	r5, #0
  4026aa:	f200 83ce 	bhi.w	402e4a <_vfiprintf_r+0xd72>
  4026ae:	f818 3b01 	ldrb.w	r3, [r8], #1
  4026b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4026b6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4026ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4026be:	2a09      	cmp	r2, #9
  4026c0:	d9f5      	bls.n	4026ae <_vfiprintf_r+0x5d6>
  4026c2:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  4026c6:	9201      	str	r2, [sp, #4]
  4026c8:	e56f      	b.n	4021aa <_vfiprintf_r+0xd2>
  4026ca:	9a04      	ldr	r2, [sp, #16]
  4026cc:	6814      	ldr	r4, [r2, #0]
  4026ce:	4613      	mov	r3, r2
  4026d0:	2c00      	cmp	r4, #0
  4026d2:	f103 0304 	add.w	r3, r3, #4
  4026d6:	f6ff aded 	blt.w	4022b4 <_vfiprintf_r+0x1dc>
  4026da:	9304      	str	r3, [sp, #16]
  4026dc:	f898 3000 	ldrb.w	r3, [r8]
  4026e0:	e561      	b.n	4021a6 <_vfiprintf_r+0xce>
  4026e2:	9406      	str	r4, [sp, #24]
  4026e4:	2900      	cmp	r1, #0
  4026e6:	d081      	beq.n	4025ec <_vfiprintf_r+0x514>
  4026e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4026ec:	e77e      	b.n	4025ec <_vfiprintf_r+0x514>
  4026ee:	9a04      	ldr	r2, [sp, #16]
  4026f0:	9406      	str	r4, [sp, #24]
  4026f2:	6817      	ldr	r7, [r2, #0]
  4026f4:	f04f 0300 	mov.w	r3, #0
  4026f8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4026fc:	1d14      	adds	r4, r2, #4
  4026fe:	9b01      	ldr	r3, [sp, #4]
  402700:	2f00      	cmp	r7, #0
  402702:	f000 8386 	beq.w	402e12 <_vfiprintf_r+0xd3a>
  402706:	2b00      	cmp	r3, #0
  402708:	f2c0 835f 	blt.w	402dca <_vfiprintf_r+0xcf2>
  40270c:	461a      	mov	r2, r3
  40270e:	2100      	movs	r1, #0
  402710:	4638      	mov	r0, r7
  402712:	f001 fc5d 	bl	403fd0 <memchr>
  402716:	2800      	cmp	r0, #0
  402718:	f000 838f 	beq.w	402e3a <_vfiprintf_r+0xd62>
  40271c:	1bc3      	subs	r3, r0, r7
  40271e:	9303      	str	r3, [sp, #12]
  402720:	2300      	movs	r3, #0
  402722:	9404      	str	r4, [sp, #16]
  402724:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402728:	9301      	str	r3, [sp, #4]
  40272a:	e5f5      	b.n	402318 <_vfiprintf_r+0x240>
  40272c:	9406      	str	r4, [sp, #24]
  40272e:	2900      	cmp	r1, #0
  402730:	f040 83b9 	bne.w	402ea6 <_vfiprintf_r+0xdce>
  402734:	f016 0920 	ands.w	r9, r6, #32
  402738:	d135      	bne.n	4027a6 <_vfiprintf_r+0x6ce>
  40273a:	f016 0310 	ands.w	r3, r6, #16
  40273e:	d103      	bne.n	402748 <_vfiprintf_r+0x670>
  402740:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402744:	f040 832a 	bne.w	402d9c <_vfiprintf_r+0xcc4>
  402748:	9a04      	ldr	r2, [sp, #16]
  40274a:	4613      	mov	r3, r2
  40274c:	6814      	ldr	r4, [r2, #0]
  40274e:	9a01      	ldr	r2, [sp, #4]
  402750:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402754:	2a00      	cmp	r2, #0
  402756:	f103 0304 	add.w	r3, r3, #4
  40275a:	f04f 0500 	mov.w	r5, #0
  40275e:	f2c0 8332 	blt.w	402dc6 <_vfiprintf_r+0xcee>
  402762:	ea54 0205 	orrs.w	r2, r4, r5
  402766:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40276a:	9304      	str	r3, [sp, #16]
  40276c:	f47f af13 	bne.w	402596 <_vfiprintf_r+0x4be>
  402770:	9b01      	ldr	r3, [sp, #4]
  402772:	2b00      	cmp	r3, #0
  402774:	f43f adcc 	beq.w	402310 <_vfiprintf_r+0x238>
  402778:	2400      	movs	r4, #0
  40277a:	af2a      	add	r7, sp, #168	; 0xa8
  40277c:	3430      	adds	r4, #48	; 0x30
  40277e:	f807 4d41 	strb.w	r4, [r7, #-65]!
  402782:	ebc7 030b 	rsb	r3, r7, fp
  402786:	9303      	str	r3, [sp, #12]
  402788:	e5c6      	b.n	402318 <_vfiprintf_r+0x240>
  40278a:	f046 0620 	orr.w	r6, r6, #32
  40278e:	f898 3000 	ldrb.w	r3, [r8]
  402792:	e508      	b.n	4021a6 <_vfiprintf_r+0xce>
  402794:	9406      	str	r4, [sp, #24]
  402796:	2900      	cmp	r1, #0
  402798:	f040 836e 	bne.w	402e78 <_vfiprintf_r+0xda0>
  40279c:	f046 0610 	orr.w	r6, r6, #16
  4027a0:	f016 0920 	ands.w	r9, r6, #32
  4027a4:	d0c9      	beq.n	40273a <_vfiprintf_r+0x662>
  4027a6:	9b04      	ldr	r3, [sp, #16]
  4027a8:	3307      	adds	r3, #7
  4027aa:	f023 0307 	bic.w	r3, r3, #7
  4027ae:	f04f 0200 	mov.w	r2, #0
  4027b2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4027b6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4027ba:	f103 0208 	add.w	r2, r3, #8
  4027be:	9b01      	ldr	r3, [sp, #4]
  4027c0:	9204      	str	r2, [sp, #16]
  4027c2:	2b00      	cmp	r3, #0
  4027c4:	f2c0 81f9 	blt.w	402bba <_vfiprintf_r+0xae2>
  4027c8:	ea54 0305 	orrs.w	r3, r4, r5
  4027cc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4027d0:	f04f 0900 	mov.w	r9, #0
  4027d4:	f47f aedf 	bne.w	402596 <_vfiprintf_r+0x4be>
  4027d8:	e7ca      	b.n	402770 <_vfiprintf_r+0x698>
  4027da:	9406      	str	r4, [sp, #24]
  4027dc:	2900      	cmp	r1, #0
  4027de:	f040 8351 	bne.w	402e84 <_vfiprintf_r+0xdac>
  4027e2:	06b2      	lsls	r2, r6, #26
  4027e4:	48ae      	ldr	r0, [pc, #696]	; (402aa0 <_vfiprintf_r+0x9c8>)
  4027e6:	d541      	bpl.n	40286c <_vfiprintf_r+0x794>
  4027e8:	9a04      	ldr	r2, [sp, #16]
  4027ea:	3207      	adds	r2, #7
  4027ec:	f022 0207 	bic.w	r2, r2, #7
  4027f0:	e9d2 4500 	ldrd	r4, r5, [r2]
  4027f4:	f102 0108 	add.w	r1, r2, #8
  4027f8:	9104      	str	r1, [sp, #16]
  4027fa:	f016 0901 	ands.w	r9, r6, #1
  4027fe:	f000 8177 	beq.w	402af0 <_vfiprintf_r+0xa18>
  402802:	ea54 0205 	orrs.w	r2, r4, r5
  402806:	f040 8226 	bne.w	402c56 <_vfiprintf_r+0xb7e>
  40280a:	f04f 0300 	mov.w	r3, #0
  40280e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402812:	9b01      	ldr	r3, [sp, #4]
  402814:	2b00      	cmp	r3, #0
  402816:	f2c0 8196 	blt.w	402b46 <_vfiprintf_r+0xa6e>
  40281a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40281e:	e572      	b.n	402306 <_vfiprintf_r+0x22e>
  402820:	9a04      	ldr	r2, [sp, #16]
  402822:	9406      	str	r4, [sp, #24]
  402824:	6813      	ldr	r3, [r2, #0]
  402826:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40282a:	4613      	mov	r3, r2
  40282c:	f04f 0100 	mov.w	r1, #0
  402830:	2501      	movs	r5, #1
  402832:	3304      	adds	r3, #4
  402834:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  402838:	9304      	str	r3, [sp, #16]
  40283a:	9503      	str	r5, [sp, #12]
  40283c:	af10      	add	r7, sp, #64	; 0x40
  40283e:	2300      	movs	r3, #0
  402840:	9301      	str	r3, [sp, #4]
  402842:	e573      	b.n	40232c <_vfiprintf_r+0x254>
  402844:	f898 3000 	ldrb.w	r3, [r8]
  402848:	2800      	cmp	r0, #0
  40284a:	f47f acac 	bne.w	4021a6 <_vfiprintf_r+0xce>
  40284e:	2101      	movs	r1, #1
  402850:	2020      	movs	r0, #32
  402852:	e4a8      	b.n	4021a6 <_vfiprintf_r+0xce>
  402854:	f046 0601 	orr.w	r6, r6, #1
  402858:	f898 3000 	ldrb.w	r3, [r8]
  40285c:	e4a3      	b.n	4021a6 <_vfiprintf_r+0xce>
  40285e:	9406      	str	r4, [sp, #24]
  402860:	2900      	cmp	r1, #0
  402862:	f040 830c 	bne.w	402e7e <_vfiprintf_r+0xda6>
  402866:	06b2      	lsls	r2, r6, #26
  402868:	488e      	ldr	r0, [pc, #568]	; (402aa4 <_vfiprintf_r+0x9cc>)
  40286a:	d4bd      	bmi.n	4027e8 <_vfiprintf_r+0x710>
  40286c:	9904      	ldr	r1, [sp, #16]
  40286e:	06f7      	lsls	r7, r6, #27
  402870:	460a      	mov	r2, r1
  402872:	f100 819d 	bmi.w	402bb0 <_vfiprintf_r+0xad8>
  402876:	0675      	lsls	r5, r6, #25
  402878:	f140 819a 	bpl.w	402bb0 <_vfiprintf_r+0xad8>
  40287c:	3204      	adds	r2, #4
  40287e:	880c      	ldrh	r4, [r1, #0]
  402880:	9204      	str	r2, [sp, #16]
  402882:	2500      	movs	r5, #0
  402884:	e7b9      	b.n	4027fa <_vfiprintf_r+0x722>
  402886:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40288a:	f898 3000 	ldrb.w	r3, [r8]
  40288e:	e48a      	b.n	4021a6 <_vfiprintf_r+0xce>
  402890:	f898 3000 	ldrb.w	r3, [r8]
  402894:	2b6c      	cmp	r3, #108	; 0x6c
  402896:	bf03      	ittte	eq
  402898:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  40289c:	f046 0620 	orreq.w	r6, r6, #32
  4028a0:	f108 0801 	addeq.w	r8, r8, #1
  4028a4:	f046 0610 	orrne.w	r6, r6, #16
  4028a8:	e47d      	b.n	4021a6 <_vfiprintf_r+0xce>
  4028aa:	2900      	cmp	r1, #0
  4028ac:	f040 8309 	bne.w	402ec2 <_vfiprintf_r+0xdea>
  4028b0:	06b4      	lsls	r4, r6, #26
  4028b2:	f140 821c 	bpl.w	402cee <_vfiprintf_r+0xc16>
  4028b6:	9a04      	ldr	r2, [sp, #16]
  4028b8:	9902      	ldr	r1, [sp, #8]
  4028ba:	6813      	ldr	r3, [r2, #0]
  4028bc:	17cd      	asrs	r5, r1, #31
  4028be:	4608      	mov	r0, r1
  4028c0:	3204      	adds	r2, #4
  4028c2:	4629      	mov	r1, r5
  4028c4:	9204      	str	r2, [sp, #16]
  4028c6:	e9c3 0100 	strd	r0, r1, [r3]
  4028ca:	e436      	b.n	40213a <_vfiprintf_r+0x62>
  4028cc:	9406      	str	r4, [sp, #24]
  4028ce:	2900      	cmp	r1, #0
  4028d0:	f43f ae43 	beq.w	40255a <_vfiprintf_r+0x482>
  4028d4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4028d8:	e63f      	b.n	40255a <_vfiprintf_r+0x482>
  4028da:	9406      	str	r4, [sp, #24]
  4028dc:	2900      	cmp	r1, #0
  4028de:	f040 82ed 	bne.w	402ebc <_vfiprintf_r+0xde4>
  4028e2:	2b00      	cmp	r3, #0
  4028e4:	f000 808f 	beq.w	402a06 <_vfiprintf_r+0x92e>
  4028e8:	2501      	movs	r5, #1
  4028ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4028ee:	f04f 0300 	mov.w	r3, #0
  4028f2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4028f6:	9503      	str	r5, [sp, #12]
  4028f8:	af10      	add	r7, sp, #64	; 0x40
  4028fa:	e7a0      	b.n	40283e <_vfiprintf_r+0x766>
  4028fc:	9304      	str	r3, [sp, #16]
  4028fe:	f04f 0900 	mov.w	r9, #0
  402902:	e696      	b.n	402632 <_vfiprintf_r+0x55a>
  402904:	aa0d      	add	r2, sp, #52	; 0x34
  402906:	9900      	ldr	r1, [sp, #0]
  402908:	9309      	str	r3, [sp, #36]	; 0x24
  40290a:	4648      	mov	r0, r9
  40290c:	f7ff fba8 	bl	402060 <__sprint_r.part.0>
  402910:	2800      	cmp	r0, #0
  402912:	d17f      	bne.n	402a14 <_vfiprintf_r+0x93c>
  402914:	980e      	ldr	r0, [sp, #56]	; 0x38
  402916:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402918:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40291a:	f100 0e01 	add.w	lr, r0, #1
  40291e:	46dc      	mov	ip, fp
  402920:	e529      	b.n	402376 <_vfiprintf_r+0x29e>
  402922:	980e      	ldr	r0, [sp, #56]	; 0x38
  402924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402926:	f100 0e01 	add.w	lr, r0, #1
  40292a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40292e:	2b00      	cmp	r3, #0
  402930:	f43f ad50 	beq.w	4023d4 <_vfiprintf_r+0x2fc>
  402934:	3201      	adds	r2, #1
  402936:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40293a:	2301      	movs	r3, #1
  40293c:	f1be 0f07 	cmp.w	lr, #7
  402940:	920f      	str	r2, [sp, #60]	; 0x3c
  402942:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402946:	e88a 000a 	stmia.w	sl, {r1, r3}
  40294a:	f340 80bf 	ble.w	402acc <_vfiprintf_r+0x9f4>
  40294e:	2a00      	cmp	r2, #0
  402950:	f040 814e 	bne.w	402bf0 <_vfiprintf_r+0xb18>
  402954:	9907      	ldr	r1, [sp, #28]
  402956:	2900      	cmp	r1, #0
  402958:	f040 80be 	bne.w	402ad8 <_vfiprintf_r+0xa00>
  40295c:	469e      	mov	lr, r3
  40295e:	4610      	mov	r0, r2
  402960:	46da      	mov	sl, fp
  402962:	9b08      	ldr	r3, [sp, #32]
  402964:	2b80      	cmp	r3, #128	; 0x80
  402966:	f43f ad50 	beq.w	40240a <_vfiprintf_r+0x332>
  40296a:	9b01      	ldr	r3, [sp, #4]
  40296c:	9903      	ldr	r1, [sp, #12]
  40296e:	1a5c      	subs	r4, r3, r1
  402970:	2c00      	cmp	r4, #0
  402972:	f77f ad93 	ble.w	40249c <_vfiprintf_r+0x3c4>
  402976:	2c10      	cmp	r4, #16
  402978:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402aa8 <_vfiprintf_r+0x9d0>
  40297c:	dd25      	ble.n	4029ca <_vfiprintf_r+0x8f2>
  40297e:	46d4      	mov	ip, sl
  402980:	2310      	movs	r3, #16
  402982:	46c2      	mov	sl, r8
  402984:	46a8      	mov	r8, r5
  402986:	464d      	mov	r5, r9
  402988:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40298c:	e007      	b.n	40299e <_vfiprintf_r+0x8c6>
  40298e:	f100 0e02 	add.w	lr, r0, #2
  402992:	f10c 0c08 	add.w	ip, ip, #8
  402996:	4608      	mov	r0, r1
  402998:	3c10      	subs	r4, #16
  40299a:	2c10      	cmp	r4, #16
  40299c:	dd11      	ble.n	4029c2 <_vfiprintf_r+0x8ea>
  40299e:	1c41      	adds	r1, r0, #1
  4029a0:	3210      	adds	r2, #16
  4029a2:	2907      	cmp	r1, #7
  4029a4:	920f      	str	r2, [sp, #60]	; 0x3c
  4029a6:	f8cc 5000 	str.w	r5, [ip]
  4029aa:	f8cc 3004 	str.w	r3, [ip, #4]
  4029ae:	910e      	str	r1, [sp, #56]	; 0x38
  4029b0:	dded      	ble.n	40298e <_vfiprintf_r+0x8b6>
  4029b2:	b9d2      	cbnz	r2, 4029ea <_vfiprintf_r+0x912>
  4029b4:	3c10      	subs	r4, #16
  4029b6:	2c10      	cmp	r4, #16
  4029b8:	f04f 0e01 	mov.w	lr, #1
  4029bc:	4610      	mov	r0, r2
  4029be:	46dc      	mov	ip, fp
  4029c0:	dced      	bgt.n	40299e <_vfiprintf_r+0x8c6>
  4029c2:	46a9      	mov	r9, r5
  4029c4:	4645      	mov	r5, r8
  4029c6:	46d0      	mov	r8, sl
  4029c8:	46e2      	mov	sl, ip
  4029ca:	4422      	add	r2, r4
  4029cc:	f1be 0f07 	cmp.w	lr, #7
  4029d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4029d2:	f8ca 9000 	str.w	r9, [sl]
  4029d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4029da:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4029de:	dc2e      	bgt.n	402a3e <_vfiprintf_r+0x966>
  4029e0:	f10a 0a08 	add.w	sl, sl, #8
  4029e4:	f10e 0e01 	add.w	lr, lr, #1
  4029e8:	e558      	b.n	40249c <_vfiprintf_r+0x3c4>
  4029ea:	aa0d      	add	r2, sp, #52	; 0x34
  4029ec:	9900      	ldr	r1, [sp, #0]
  4029ee:	9301      	str	r3, [sp, #4]
  4029f0:	4648      	mov	r0, r9
  4029f2:	f7ff fb35 	bl	402060 <__sprint_r.part.0>
  4029f6:	b968      	cbnz	r0, 402a14 <_vfiprintf_r+0x93c>
  4029f8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4029fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4029fc:	9b01      	ldr	r3, [sp, #4]
  4029fe:	f100 0e01 	add.w	lr, r0, #1
  402a02:	46dc      	mov	ip, fp
  402a04:	e7c8      	b.n	402998 <_vfiprintf_r+0x8c0>
  402a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402a08:	b123      	cbz	r3, 402a14 <_vfiprintf_r+0x93c>
  402a0a:	9805      	ldr	r0, [sp, #20]
  402a0c:	9900      	ldr	r1, [sp, #0]
  402a0e:	aa0d      	add	r2, sp, #52	; 0x34
  402a10:	f7ff fb26 	bl	402060 <__sprint_r.part.0>
  402a14:	9b00      	ldr	r3, [sp, #0]
  402a16:	899b      	ldrh	r3, [r3, #12]
  402a18:	065a      	lsls	r2, r3, #25
  402a1a:	f100 818b 	bmi.w	402d34 <_vfiprintf_r+0xc5c>
  402a1e:	9802      	ldr	r0, [sp, #8]
  402a20:	b02b      	add	sp, #172	; 0xac
  402a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a26:	aa0d      	add	r2, sp, #52	; 0x34
  402a28:	9900      	ldr	r1, [sp, #0]
  402a2a:	4648      	mov	r0, r9
  402a2c:	f7ff fb18 	bl	402060 <__sprint_r.part.0>
  402a30:	2800      	cmp	r0, #0
  402a32:	d1ef      	bne.n	402a14 <_vfiprintf_r+0x93c>
  402a34:	990e      	ldr	r1, [sp, #56]	; 0x38
  402a36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402a38:	1c48      	adds	r0, r1, #1
  402a3a:	46da      	mov	sl, fp
  402a3c:	e555      	b.n	4024ea <_vfiprintf_r+0x412>
  402a3e:	2a00      	cmp	r2, #0
  402a40:	f040 80fb 	bne.w	402c3a <_vfiprintf_r+0xb62>
  402a44:	9a03      	ldr	r2, [sp, #12]
  402a46:	921b      	str	r2, [sp, #108]	; 0x6c
  402a48:	2301      	movs	r3, #1
  402a4a:	920f      	str	r2, [sp, #60]	; 0x3c
  402a4c:	971a      	str	r7, [sp, #104]	; 0x68
  402a4e:	930e      	str	r3, [sp, #56]	; 0x38
  402a50:	46da      	mov	sl, fp
  402a52:	f10a 0a08 	add.w	sl, sl, #8
  402a56:	0771      	lsls	r1, r6, #29
  402a58:	d504      	bpl.n	402a64 <_vfiprintf_r+0x98c>
  402a5a:	9b06      	ldr	r3, [sp, #24]
  402a5c:	1b5c      	subs	r4, r3, r5
  402a5e:	2c00      	cmp	r4, #0
  402a60:	f73f ad34 	bgt.w	4024cc <_vfiprintf_r+0x3f4>
  402a64:	9b02      	ldr	r3, [sp, #8]
  402a66:	9906      	ldr	r1, [sp, #24]
  402a68:	42a9      	cmp	r1, r5
  402a6a:	bfac      	ite	ge
  402a6c:	185b      	addge	r3, r3, r1
  402a6e:	195b      	addlt	r3, r3, r5
  402a70:	9302      	str	r3, [sp, #8]
  402a72:	2a00      	cmp	r2, #0
  402a74:	f040 80b3 	bne.w	402bde <_vfiprintf_r+0xb06>
  402a78:	2300      	movs	r3, #0
  402a7a:	930e      	str	r3, [sp, #56]	; 0x38
  402a7c:	46da      	mov	sl, fp
  402a7e:	f7ff bb5c 	b.w	40213a <_vfiprintf_r+0x62>
  402a82:	aa0d      	add	r2, sp, #52	; 0x34
  402a84:	9900      	ldr	r1, [sp, #0]
  402a86:	9307      	str	r3, [sp, #28]
  402a88:	4648      	mov	r0, r9
  402a8a:	f7ff fae9 	bl	402060 <__sprint_r.part.0>
  402a8e:	2800      	cmp	r0, #0
  402a90:	d1c0      	bne.n	402a14 <_vfiprintf_r+0x93c>
  402a92:	980e      	ldr	r0, [sp, #56]	; 0x38
  402a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402a96:	9b07      	ldr	r3, [sp, #28]
  402a98:	f100 0c01 	add.w	ip, r0, #1
  402a9c:	46de      	mov	lr, fp
  402a9e:	e4cb      	b.n	402438 <_vfiprintf_r+0x360>
  402aa0:	00404b34 	.word	0x00404b34
  402aa4:	00404b48 	.word	0x00404b48
  402aa8:	00404b24 	.word	0x00404b24
  402aac:	2a00      	cmp	r2, #0
  402aae:	f040 8133 	bne.w	402d18 <_vfiprintf_r+0xc40>
  402ab2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402ab6:	2b00      	cmp	r3, #0
  402ab8:	f000 80f5 	beq.w	402ca6 <_vfiprintf_r+0xbce>
  402abc:	2301      	movs	r3, #1
  402abe:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  402ac2:	461a      	mov	r2, r3
  402ac4:	931b      	str	r3, [sp, #108]	; 0x6c
  402ac6:	469e      	mov	lr, r3
  402ac8:	911a      	str	r1, [sp, #104]	; 0x68
  402aca:	46da      	mov	sl, fp
  402acc:	4670      	mov	r0, lr
  402ace:	f10a 0a08 	add.w	sl, sl, #8
  402ad2:	f10e 0e01 	add.w	lr, lr, #1
  402ad6:	e47d      	b.n	4023d4 <_vfiprintf_r+0x2fc>
  402ad8:	a90c      	add	r1, sp, #48	; 0x30
  402ada:	2202      	movs	r2, #2
  402adc:	469e      	mov	lr, r3
  402ade:	911a      	str	r1, [sp, #104]	; 0x68
  402ae0:	921b      	str	r2, [sp, #108]	; 0x6c
  402ae2:	46da      	mov	sl, fp
  402ae4:	4670      	mov	r0, lr
  402ae6:	f10a 0a08 	add.w	sl, sl, #8
  402aea:	f10e 0e01 	add.w	lr, lr, #1
  402aee:	e738      	b.n	402962 <_vfiprintf_r+0x88a>
  402af0:	9b01      	ldr	r3, [sp, #4]
  402af2:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402af6:	2b00      	cmp	r3, #0
  402af8:	f2c0 812a 	blt.w	402d50 <_vfiprintf_r+0xc78>
  402afc:	ea54 0305 	orrs.w	r3, r4, r5
  402b00:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402b04:	f43f abff 	beq.w	402306 <_vfiprintf_r+0x22e>
  402b08:	465f      	mov	r7, fp
  402b0a:	0923      	lsrs	r3, r4, #4
  402b0c:	f004 010f 	and.w	r1, r4, #15
  402b10:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402b14:	092a      	lsrs	r2, r5, #4
  402b16:	461c      	mov	r4, r3
  402b18:	4615      	mov	r5, r2
  402b1a:	5c43      	ldrb	r3, [r0, r1]
  402b1c:	f807 3d01 	strb.w	r3, [r7, #-1]!
  402b20:	ea54 0305 	orrs.w	r3, r4, r5
  402b24:	d1f1      	bne.n	402b0a <_vfiprintf_r+0xa32>
  402b26:	ebc7 030b 	rsb	r3, r7, fp
  402b2a:	9303      	str	r3, [sp, #12]
  402b2c:	f7ff bbf4 	b.w	402318 <_vfiprintf_r+0x240>
  402b30:	aa0d      	add	r2, sp, #52	; 0x34
  402b32:	9900      	ldr	r1, [sp, #0]
  402b34:	9805      	ldr	r0, [sp, #20]
  402b36:	f7ff fa93 	bl	402060 <__sprint_r.part.0>
  402b3a:	2800      	cmp	r0, #0
  402b3c:	f47f af6a 	bne.w	402a14 <_vfiprintf_r+0x93c>
  402b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402b42:	46da      	mov	sl, fp
  402b44:	e787      	b.n	402a56 <_vfiprintf_r+0x97e>
  402b46:	f04f 0900 	mov.w	r9, #0
  402b4a:	2400      	movs	r4, #0
  402b4c:	2500      	movs	r5, #0
  402b4e:	e7db      	b.n	402b08 <_vfiprintf_r+0xa30>
  402b50:	f016 0210 	ands.w	r2, r6, #16
  402b54:	f000 80b2 	beq.w	402cbc <_vfiprintf_r+0xbe4>
  402b58:	9904      	ldr	r1, [sp, #16]
  402b5a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402b5e:	460a      	mov	r2, r1
  402b60:	680c      	ldr	r4, [r1, #0]
  402b62:	9901      	ldr	r1, [sp, #4]
  402b64:	2900      	cmp	r1, #0
  402b66:	f102 0204 	add.w	r2, r2, #4
  402b6a:	f04f 0500 	mov.w	r5, #0
  402b6e:	f2c0 8159 	blt.w	402e24 <_vfiprintf_r+0xd4c>
  402b72:	ea54 0105 	orrs.w	r1, r4, r5
  402b76:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402b7a:	9204      	str	r2, [sp, #16]
  402b7c:	f43f ad51 	beq.w	402622 <_vfiprintf_r+0x54a>
  402b80:	4699      	mov	r9, r3
  402b82:	e556      	b.n	402632 <_vfiprintf_r+0x55a>
  402b84:	06f7      	lsls	r7, r6, #27
  402b86:	d40a      	bmi.n	402b9e <_vfiprintf_r+0xac6>
  402b88:	0675      	lsls	r5, r6, #25
  402b8a:	d508      	bpl.n	402b9e <_vfiprintf_r+0xac6>
  402b8c:	9904      	ldr	r1, [sp, #16]
  402b8e:	f9b1 4000 	ldrsh.w	r4, [r1]
  402b92:	3104      	adds	r1, #4
  402b94:	17e5      	asrs	r5, r4, #31
  402b96:	4622      	mov	r2, r4
  402b98:	462b      	mov	r3, r5
  402b9a:	9104      	str	r1, [sp, #16]
  402b9c:	e4ea      	b.n	402574 <_vfiprintf_r+0x49c>
  402b9e:	9a04      	ldr	r2, [sp, #16]
  402ba0:	6814      	ldr	r4, [r2, #0]
  402ba2:	4613      	mov	r3, r2
  402ba4:	3304      	adds	r3, #4
  402ba6:	17e5      	asrs	r5, r4, #31
  402ba8:	9304      	str	r3, [sp, #16]
  402baa:	4622      	mov	r2, r4
  402bac:	462b      	mov	r3, r5
  402bae:	e4e1      	b.n	402574 <_vfiprintf_r+0x49c>
  402bb0:	6814      	ldr	r4, [r2, #0]
  402bb2:	3204      	adds	r2, #4
  402bb4:	9204      	str	r2, [sp, #16]
  402bb6:	2500      	movs	r5, #0
  402bb8:	e61f      	b.n	4027fa <_vfiprintf_r+0x722>
  402bba:	f04f 0900 	mov.w	r9, #0
  402bbe:	ea54 0305 	orrs.w	r3, r4, r5
  402bc2:	f47f ace8 	bne.w	402596 <_vfiprintf_r+0x4be>
  402bc6:	e5d8      	b.n	40277a <_vfiprintf_r+0x6a2>
  402bc8:	aa0d      	add	r2, sp, #52	; 0x34
  402bca:	9900      	ldr	r1, [sp, #0]
  402bcc:	9805      	ldr	r0, [sp, #20]
  402bce:	f7ff fa47 	bl	402060 <__sprint_r.part.0>
  402bd2:	2800      	cmp	r0, #0
  402bd4:	f47f af1e 	bne.w	402a14 <_vfiprintf_r+0x93c>
  402bd8:	46da      	mov	sl, fp
  402bda:	f7ff bb48 	b.w	40226e <_vfiprintf_r+0x196>
  402bde:	aa0d      	add	r2, sp, #52	; 0x34
  402be0:	9900      	ldr	r1, [sp, #0]
  402be2:	9805      	ldr	r0, [sp, #20]
  402be4:	f7ff fa3c 	bl	402060 <__sprint_r.part.0>
  402be8:	2800      	cmp	r0, #0
  402bea:	f43f af45 	beq.w	402a78 <_vfiprintf_r+0x9a0>
  402bee:	e711      	b.n	402a14 <_vfiprintf_r+0x93c>
  402bf0:	aa0d      	add	r2, sp, #52	; 0x34
  402bf2:	9900      	ldr	r1, [sp, #0]
  402bf4:	9805      	ldr	r0, [sp, #20]
  402bf6:	f7ff fa33 	bl	402060 <__sprint_r.part.0>
  402bfa:	2800      	cmp	r0, #0
  402bfc:	f47f af0a 	bne.w	402a14 <_vfiprintf_r+0x93c>
  402c00:	980e      	ldr	r0, [sp, #56]	; 0x38
  402c02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c04:	f100 0e01 	add.w	lr, r0, #1
  402c08:	46da      	mov	sl, fp
  402c0a:	f7ff bbe3 	b.w	4023d4 <_vfiprintf_r+0x2fc>
  402c0e:	aa0d      	add	r2, sp, #52	; 0x34
  402c10:	9900      	ldr	r1, [sp, #0]
  402c12:	9805      	ldr	r0, [sp, #20]
  402c14:	f7ff fa24 	bl	402060 <__sprint_r.part.0>
  402c18:	2800      	cmp	r0, #0
  402c1a:	f47f aefb 	bne.w	402a14 <_vfiprintf_r+0x93c>
  402c1e:	980e      	ldr	r0, [sp, #56]	; 0x38
  402c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c22:	f100 0e01 	add.w	lr, r0, #1
  402c26:	46da      	mov	sl, fp
  402c28:	e69b      	b.n	402962 <_vfiprintf_r+0x88a>
  402c2a:	2a00      	cmp	r2, #0
  402c2c:	f040 80d8 	bne.w	402de0 <_vfiprintf_r+0xd08>
  402c30:	f04f 0e01 	mov.w	lr, #1
  402c34:	4610      	mov	r0, r2
  402c36:	46da      	mov	sl, fp
  402c38:	e697      	b.n	40296a <_vfiprintf_r+0x892>
  402c3a:	aa0d      	add	r2, sp, #52	; 0x34
  402c3c:	9900      	ldr	r1, [sp, #0]
  402c3e:	9805      	ldr	r0, [sp, #20]
  402c40:	f7ff fa0e 	bl	402060 <__sprint_r.part.0>
  402c44:	2800      	cmp	r0, #0
  402c46:	f47f aee5 	bne.w	402a14 <_vfiprintf_r+0x93c>
  402c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402c4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c4e:	f103 0e01 	add.w	lr, r3, #1
  402c52:	46da      	mov	sl, fp
  402c54:	e422      	b.n	40249c <_vfiprintf_r+0x3c4>
  402c56:	2230      	movs	r2, #48	; 0x30
  402c58:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  402c5c:	9a01      	ldr	r2, [sp, #4]
  402c5e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  402c62:	2a00      	cmp	r2, #0
  402c64:	f04f 0300 	mov.w	r3, #0
  402c68:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402c6c:	f046 0302 	orr.w	r3, r6, #2
  402c70:	f2c0 80cb 	blt.w	402e0a <_vfiprintf_r+0xd32>
  402c74:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402c78:	f046 0602 	orr.w	r6, r6, #2
  402c7c:	f04f 0900 	mov.w	r9, #0
  402c80:	e742      	b.n	402b08 <_vfiprintf_r+0xa30>
  402c82:	f04f 0900 	mov.w	r9, #0
  402c86:	4890      	ldr	r0, [pc, #576]	; (402ec8 <_vfiprintf_r+0xdf0>)
  402c88:	e73e      	b.n	402b08 <_vfiprintf_r+0xa30>
  402c8a:	9b01      	ldr	r3, [sp, #4]
  402c8c:	4264      	negs	r4, r4
  402c8e:	f04f 092d 	mov.w	r9, #45	; 0x2d
  402c92:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402c96:	2b00      	cmp	r3, #0
  402c98:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402c9c:	f6ff ac7b 	blt.w	402596 <_vfiprintf_r+0x4be>
  402ca0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402ca4:	e477      	b.n	402596 <_vfiprintf_r+0x4be>
  402ca6:	9b07      	ldr	r3, [sp, #28]
  402ca8:	2b00      	cmp	r3, #0
  402caa:	d072      	beq.n	402d92 <_vfiprintf_r+0xcba>
  402cac:	ab0c      	add	r3, sp, #48	; 0x30
  402cae:	2202      	movs	r2, #2
  402cb0:	931a      	str	r3, [sp, #104]	; 0x68
  402cb2:	921b      	str	r2, [sp, #108]	; 0x6c
  402cb4:	f04f 0e01 	mov.w	lr, #1
  402cb8:	46da      	mov	sl, fp
  402cba:	e713      	b.n	402ae4 <_vfiprintf_r+0xa0c>
  402cbc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402cc0:	d048      	beq.n	402d54 <_vfiprintf_r+0xc7c>
  402cc2:	9904      	ldr	r1, [sp, #16]
  402cc4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402cc8:	460b      	mov	r3, r1
  402cca:	880c      	ldrh	r4, [r1, #0]
  402ccc:	9901      	ldr	r1, [sp, #4]
  402cce:	2900      	cmp	r1, #0
  402cd0:	f103 0304 	add.w	r3, r3, #4
  402cd4:	f04f 0500 	mov.w	r5, #0
  402cd8:	f6ff ae10 	blt.w	4028fc <_vfiprintf_r+0x824>
  402cdc:	ea54 0105 	orrs.w	r1, r4, r5
  402ce0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402ce4:	9304      	str	r3, [sp, #16]
  402ce6:	f43f ac9c 	beq.w	402622 <_vfiprintf_r+0x54a>
  402cea:	4691      	mov	r9, r2
  402cec:	e4a1      	b.n	402632 <_vfiprintf_r+0x55a>
  402cee:	06f0      	lsls	r0, r6, #27
  402cf0:	d40a      	bmi.n	402d08 <_vfiprintf_r+0xc30>
  402cf2:	0671      	lsls	r1, r6, #25
  402cf4:	d508      	bpl.n	402d08 <_vfiprintf_r+0xc30>
  402cf6:	9a04      	ldr	r2, [sp, #16]
  402cf8:	6813      	ldr	r3, [r2, #0]
  402cfa:	3204      	adds	r2, #4
  402cfc:	9204      	str	r2, [sp, #16]
  402cfe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  402d02:	801a      	strh	r2, [r3, #0]
  402d04:	f7ff ba19 	b.w	40213a <_vfiprintf_r+0x62>
  402d08:	9a04      	ldr	r2, [sp, #16]
  402d0a:	6813      	ldr	r3, [r2, #0]
  402d0c:	3204      	adds	r2, #4
  402d0e:	9204      	str	r2, [sp, #16]
  402d10:	9a02      	ldr	r2, [sp, #8]
  402d12:	601a      	str	r2, [r3, #0]
  402d14:	f7ff ba11 	b.w	40213a <_vfiprintf_r+0x62>
  402d18:	aa0d      	add	r2, sp, #52	; 0x34
  402d1a:	9900      	ldr	r1, [sp, #0]
  402d1c:	9805      	ldr	r0, [sp, #20]
  402d1e:	f7ff f99f 	bl	402060 <__sprint_r.part.0>
  402d22:	2800      	cmp	r0, #0
  402d24:	f47f ae76 	bne.w	402a14 <_vfiprintf_r+0x93c>
  402d28:	980e      	ldr	r0, [sp, #56]	; 0x38
  402d2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402d2c:	f100 0e01 	add.w	lr, r0, #1
  402d30:	46da      	mov	sl, fp
  402d32:	e5fa      	b.n	40292a <_vfiprintf_r+0x852>
  402d34:	f04f 30ff 	mov.w	r0, #4294967295
  402d38:	f7ff bab6 	b.w	4022a8 <_vfiprintf_r+0x1d0>
  402d3c:	4862      	ldr	r0, [pc, #392]	; (402ec8 <_vfiprintf_r+0xdf0>)
  402d3e:	4616      	mov	r6, r2
  402d40:	ea54 0205 	orrs.w	r2, r4, r5
  402d44:	9304      	str	r3, [sp, #16]
  402d46:	f04f 0900 	mov.w	r9, #0
  402d4a:	f47f aedd 	bne.w	402b08 <_vfiprintf_r+0xa30>
  402d4e:	e6fc      	b.n	402b4a <_vfiprintf_r+0xa72>
  402d50:	9b04      	ldr	r3, [sp, #16]
  402d52:	e7f5      	b.n	402d40 <_vfiprintf_r+0xc68>
  402d54:	9a04      	ldr	r2, [sp, #16]
  402d56:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402d5a:	4613      	mov	r3, r2
  402d5c:	6814      	ldr	r4, [r2, #0]
  402d5e:	9a01      	ldr	r2, [sp, #4]
  402d60:	2a00      	cmp	r2, #0
  402d62:	f103 0304 	add.w	r3, r3, #4
  402d66:	f04f 0500 	mov.w	r5, #0
  402d6a:	f6ff adc7 	blt.w	4028fc <_vfiprintf_r+0x824>
  402d6e:	ea54 0205 	orrs.w	r2, r4, r5
  402d72:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402d76:	9304      	str	r3, [sp, #16]
  402d78:	f47f ac5b 	bne.w	402632 <_vfiprintf_r+0x55a>
  402d7c:	e451      	b.n	402622 <_vfiprintf_r+0x54a>
  402d7e:	aa0d      	add	r2, sp, #52	; 0x34
  402d80:	9900      	ldr	r1, [sp, #0]
  402d82:	9805      	ldr	r0, [sp, #20]
  402d84:	f7ff f96c 	bl	402060 <__sprint_r.part.0>
  402d88:	2800      	cmp	r0, #0
  402d8a:	f47f ae43 	bne.w	402a14 <_vfiprintf_r+0x93c>
  402d8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402d90:	e668      	b.n	402a64 <_vfiprintf_r+0x98c>
  402d92:	4610      	mov	r0, r2
  402d94:	f04f 0e01 	mov.w	lr, #1
  402d98:	46da      	mov	sl, fp
  402d9a:	e5e6      	b.n	40296a <_vfiprintf_r+0x892>
  402d9c:	9904      	ldr	r1, [sp, #16]
  402d9e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402da2:	460a      	mov	r2, r1
  402da4:	880c      	ldrh	r4, [r1, #0]
  402da6:	9901      	ldr	r1, [sp, #4]
  402da8:	2900      	cmp	r1, #0
  402daa:	f102 0204 	add.w	r2, r2, #4
  402dae:	f04f 0500 	mov.w	r5, #0
  402db2:	db4e      	blt.n	402e52 <_vfiprintf_r+0xd7a>
  402db4:	ea54 0105 	orrs.w	r1, r4, r5
  402db8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402dbc:	9204      	str	r2, [sp, #16]
  402dbe:	4699      	mov	r9, r3
  402dc0:	f47f abe9 	bne.w	402596 <_vfiprintf_r+0x4be>
  402dc4:	e4d4      	b.n	402770 <_vfiprintf_r+0x698>
  402dc6:	9304      	str	r3, [sp, #16]
  402dc8:	e6f9      	b.n	402bbe <_vfiprintf_r+0xae6>
  402dca:	4638      	mov	r0, r7
  402dcc:	9404      	str	r4, [sp, #16]
  402dce:	f001 fc97 	bl	404700 <strlen>
  402dd2:	2300      	movs	r3, #0
  402dd4:	9003      	str	r0, [sp, #12]
  402dd6:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402dda:	9301      	str	r3, [sp, #4]
  402ddc:	f7ff ba9c 	b.w	402318 <_vfiprintf_r+0x240>
  402de0:	aa0d      	add	r2, sp, #52	; 0x34
  402de2:	9900      	ldr	r1, [sp, #0]
  402de4:	9805      	ldr	r0, [sp, #20]
  402de6:	f7ff f93b 	bl	402060 <__sprint_r.part.0>
  402dea:	2800      	cmp	r0, #0
  402dec:	f47f ae12 	bne.w	402a14 <_vfiprintf_r+0x93c>
  402df0:	980e      	ldr	r0, [sp, #56]	; 0x38
  402df2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402df4:	f100 0e01 	add.w	lr, r0, #1
  402df8:	46da      	mov	sl, fp
  402dfa:	e5b6      	b.n	40296a <_vfiprintf_r+0x892>
  402dfc:	980e      	ldr	r0, [sp, #56]	; 0x38
  402dfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402e00:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 402ed0 <_vfiprintf_r+0xdf8>
  402e04:	3001      	adds	r0, #1
  402e06:	f7ff bad2 	b.w	4023ae <_vfiprintf_r+0x2d6>
  402e0a:	461e      	mov	r6, r3
  402e0c:	f04f 0900 	mov.w	r9, #0
  402e10:	e67a      	b.n	402b08 <_vfiprintf_r+0xa30>
  402e12:	2b06      	cmp	r3, #6
  402e14:	bf28      	it	cs
  402e16:	2306      	movcs	r3, #6
  402e18:	9303      	str	r3, [sp, #12]
  402e1a:	9404      	str	r4, [sp, #16]
  402e1c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  402e20:	4f2a      	ldr	r7, [pc, #168]	; (402ecc <_vfiprintf_r+0xdf4>)
  402e22:	e50c      	b.n	40283e <_vfiprintf_r+0x766>
  402e24:	9204      	str	r2, [sp, #16]
  402e26:	e56a      	b.n	4028fe <_vfiprintf_r+0x826>
  402e28:	980e      	ldr	r0, [sp, #56]	; 0x38
  402e2a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 402ed0 <_vfiprintf_r+0xdf8>
  402e2e:	3001      	adds	r0, #1
  402e30:	f7ff bb73 	b.w	40251a <_vfiprintf_r+0x442>
  402e34:	46f4      	mov	ip, lr
  402e36:	f7ff bb1a 	b.w	40246e <_vfiprintf_r+0x396>
  402e3a:	9b01      	ldr	r3, [sp, #4]
  402e3c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402e40:	9303      	str	r3, [sp, #12]
  402e42:	9404      	str	r4, [sp, #16]
  402e44:	9001      	str	r0, [sp, #4]
  402e46:	f7ff ba67 	b.w	402318 <_vfiprintf_r+0x240>
  402e4a:	2200      	movs	r2, #0
  402e4c:	9201      	str	r2, [sp, #4]
  402e4e:	f7ff b9ac 	b.w	4021aa <_vfiprintf_r+0xd2>
  402e52:	9204      	str	r2, [sp, #16]
  402e54:	4699      	mov	r9, r3
  402e56:	e6b2      	b.n	402bbe <_vfiprintf_r+0xae6>
  402e58:	9a04      	ldr	r2, [sp, #16]
  402e5a:	6813      	ldr	r3, [r2, #0]
  402e5c:	9301      	str	r3, [sp, #4]
  402e5e:	3204      	adds	r2, #4
  402e60:	2b00      	cmp	r3, #0
  402e62:	9204      	str	r2, [sp, #16]
  402e64:	f898 3001 	ldrb.w	r3, [r8, #1]
  402e68:	46a8      	mov	r8, r5
  402e6a:	f6bf a99c 	bge.w	4021a6 <_vfiprintf_r+0xce>
  402e6e:	f04f 32ff 	mov.w	r2, #4294967295
  402e72:	9201      	str	r2, [sp, #4]
  402e74:	f7ff b997 	b.w	4021a6 <_vfiprintf_r+0xce>
  402e78:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402e7c:	e48e      	b.n	40279c <_vfiprintf_r+0x6c4>
  402e7e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402e82:	e4f0      	b.n	402866 <_vfiprintf_r+0x78e>
  402e84:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402e88:	e4ab      	b.n	4027e2 <_vfiprintf_r+0x70a>
  402e8a:	4699      	mov	r9, r3
  402e8c:	07f3      	lsls	r3, r6, #31
  402e8e:	d505      	bpl.n	402e9c <_vfiprintf_r+0xdc4>
  402e90:	af2a      	add	r7, sp, #168	; 0xa8
  402e92:	2330      	movs	r3, #48	; 0x30
  402e94:	f807 3d41 	strb.w	r3, [r7, #-65]!
  402e98:	f7ff bb97 	b.w	4025ca <_vfiprintf_r+0x4f2>
  402e9c:	9b01      	ldr	r3, [sp, #4]
  402e9e:	9303      	str	r3, [sp, #12]
  402ea0:	465f      	mov	r7, fp
  402ea2:	f7ff ba39 	b.w	402318 <_vfiprintf_r+0x240>
  402ea6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402eaa:	e443      	b.n	402734 <_vfiprintf_r+0x65c>
  402eac:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402eb0:	f7ff bb9a 	b.w	4025e8 <_vfiprintf_r+0x510>
  402eb4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402eb8:	f7ff bb4d 	b.w	402556 <_vfiprintf_r+0x47e>
  402ebc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402ec0:	e50f      	b.n	4028e2 <_vfiprintf_r+0x80a>
  402ec2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402ec6:	e4f3      	b.n	4028b0 <_vfiprintf_r+0x7d8>
  402ec8:	00404b48 	.word	0x00404b48
  402ecc:	00404b5c 	.word	0x00404b5c
  402ed0:	00404b64 	.word	0x00404b64

00402ed4 <__sbprintf>:
  402ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ed6:	460c      	mov	r4, r1
  402ed8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  402edc:	8989      	ldrh	r1, [r1, #12]
  402ede:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402ee0:	89e5      	ldrh	r5, [r4, #14]
  402ee2:	9619      	str	r6, [sp, #100]	; 0x64
  402ee4:	f021 0102 	bic.w	r1, r1, #2
  402ee8:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402eea:	f8ad 500e 	strh.w	r5, [sp, #14]
  402eee:	2500      	movs	r5, #0
  402ef0:	69e7      	ldr	r7, [r4, #28]
  402ef2:	f8ad 100c 	strh.w	r1, [sp, #12]
  402ef6:	9609      	str	r6, [sp, #36]	; 0x24
  402ef8:	9506      	str	r5, [sp, #24]
  402efa:	ae1a      	add	r6, sp, #104	; 0x68
  402efc:	f44f 6580 	mov.w	r5, #1024	; 0x400
  402f00:	4669      	mov	r1, sp
  402f02:	9600      	str	r6, [sp, #0]
  402f04:	9604      	str	r6, [sp, #16]
  402f06:	9502      	str	r5, [sp, #8]
  402f08:	9505      	str	r5, [sp, #20]
  402f0a:	9707      	str	r7, [sp, #28]
  402f0c:	4606      	mov	r6, r0
  402f0e:	f7ff f8e3 	bl	4020d8 <_vfiprintf_r>
  402f12:	1e05      	subs	r5, r0, #0
  402f14:	db07      	blt.n	402f26 <__sbprintf+0x52>
  402f16:	4630      	mov	r0, r6
  402f18:	4669      	mov	r1, sp
  402f1a:	f000 f929 	bl	403170 <_fflush_r>
  402f1e:	2800      	cmp	r0, #0
  402f20:	bf18      	it	ne
  402f22:	f04f 35ff 	movne.w	r5, #4294967295
  402f26:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402f2a:	065b      	lsls	r3, r3, #25
  402f2c:	d503      	bpl.n	402f36 <__sbprintf+0x62>
  402f2e:	89a3      	ldrh	r3, [r4, #12]
  402f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402f34:	81a3      	strh	r3, [r4, #12]
  402f36:	4628      	mov	r0, r5
  402f38:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  402f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402f3e:	bf00      	nop

00402f40 <__swsetup_r>:
  402f40:	b538      	push	{r3, r4, r5, lr}
  402f42:	4b30      	ldr	r3, [pc, #192]	; (403004 <__swsetup_r+0xc4>)
  402f44:	681b      	ldr	r3, [r3, #0]
  402f46:	4605      	mov	r5, r0
  402f48:	460c      	mov	r4, r1
  402f4a:	b113      	cbz	r3, 402f52 <__swsetup_r+0x12>
  402f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402f4e:	2a00      	cmp	r2, #0
  402f50:	d038      	beq.n	402fc4 <__swsetup_r+0x84>
  402f52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402f56:	b293      	uxth	r3, r2
  402f58:	0718      	lsls	r0, r3, #28
  402f5a:	d50c      	bpl.n	402f76 <__swsetup_r+0x36>
  402f5c:	6920      	ldr	r0, [r4, #16]
  402f5e:	b1a8      	cbz	r0, 402f8c <__swsetup_r+0x4c>
  402f60:	f013 0201 	ands.w	r2, r3, #1
  402f64:	d01e      	beq.n	402fa4 <__swsetup_r+0x64>
  402f66:	6963      	ldr	r3, [r4, #20]
  402f68:	2200      	movs	r2, #0
  402f6a:	425b      	negs	r3, r3
  402f6c:	61a3      	str	r3, [r4, #24]
  402f6e:	60a2      	str	r2, [r4, #8]
  402f70:	b1f0      	cbz	r0, 402fb0 <__swsetup_r+0x70>
  402f72:	2000      	movs	r0, #0
  402f74:	bd38      	pop	{r3, r4, r5, pc}
  402f76:	06d9      	lsls	r1, r3, #27
  402f78:	d53c      	bpl.n	402ff4 <__swsetup_r+0xb4>
  402f7a:	0758      	lsls	r0, r3, #29
  402f7c:	d426      	bmi.n	402fcc <__swsetup_r+0x8c>
  402f7e:	6920      	ldr	r0, [r4, #16]
  402f80:	f042 0308 	orr.w	r3, r2, #8
  402f84:	81a3      	strh	r3, [r4, #12]
  402f86:	b29b      	uxth	r3, r3
  402f88:	2800      	cmp	r0, #0
  402f8a:	d1e9      	bne.n	402f60 <__swsetup_r+0x20>
  402f8c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402f90:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402f94:	d0e4      	beq.n	402f60 <__swsetup_r+0x20>
  402f96:	4628      	mov	r0, r5
  402f98:	4621      	mov	r1, r4
  402f9a:	f000 fd15 	bl	4039c8 <__smakebuf_r>
  402f9e:	89a3      	ldrh	r3, [r4, #12]
  402fa0:	6920      	ldr	r0, [r4, #16]
  402fa2:	e7dd      	b.n	402f60 <__swsetup_r+0x20>
  402fa4:	0799      	lsls	r1, r3, #30
  402fa6:	bf58      	it	pl
  402fa8:	6962      	ldrpl	r2, [r4, #20]
  402faa:	60a2      	str	r2, [r4, #8]
  402fac:	2800      	cmp	r0, #0
  402fae:	d1e0      	bne.n	402f72 <__swsetup_r+0x32>
  402fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402fb4:	061a      	lsls	r2, r3, #24
  402fb6:	d5dd      	bpl.n	402f74 <__swsetup_r+0x34>
  402fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402fbc:	81a3      	strh	r3, [r4, #12]
  402fbe:	f04f 30ff 	mov.w	r0, #4294967295
  402fc2:	bd38      	pop	{r3, r4, r5, pc}
  402fc4:	4618      	mov	r0, r3
  402fc6:	f000 f967 	bl	403298 <__sinit>
  402fca:	e7c2      	b.n	402f52 <__swsetup_r+0x12>
  402fcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402fce:	b151      	cbz	r1, 402fe6 <__swsetup_r+0xa6>
  402fd0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402fd4:	4299      	cmp	r1, r3
  402fd6:	d004      	beq.n	402fe2 <__swsetup_r+0xa2>
  402fd8:	4628      	mov	r0, r5
  402fda:	f000 fa27 	bl	40342c <_free_r>
  402fde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402fe2:	2300      	movs	r3, #0
  402fe4:	6323      	str	r3, [r4, #48]	; 0x30
  402fe6:	2300      	movs	r3, #0
  402fe8:	6920      	ldr	r0, [r4, #16]
  402fea:	6063      	str	r3, [r4, #4]
  402fec:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402ff0:	6020      	str	r0, [r4, #0]
  402ff2:	e7c5      	b.n	402f80 <__swsetup_r+0x40>
  402ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402ff8:	2309      	movs	r3, #9
  402ffa:	602b      	str	r3, [r5, #0]
  402ffc:	f04f 30ff 	mov.w	r0, #4294967295
  403000:	81a2      	strh	r2, [r4, #12]
  403002:	bd38      	pop	{r3, r4, r5, pc}
  403004:	20000438 	.word	0x20000438

00403008 <register_fini>:
  403008:	4b02      	ldr	r3, [pc, #8]	; (403014 <register_fini+0xc>)
  40300a:	b113      	cbz	r3, 403012 <register_fini+0xa>
  40300c:	4802      	ldr	r0, [pc, #8]	; (403018 <register_fini+0x10>)
  40300e:	f000 b805 	b.w	40301c <atexit>
  403012:	4770      	bx	lr
  403014:	00000000 	.word	0x00000000
  403018:	004032ad 	.word	0x004032ad

0040301c <atexit>:
  40301c:	2300      	movs	r3, #0
  40301e:	4601      	mov	r1, r0
  403020:	461a      	mov	r2, r3
  403022:	4618      	mov	r0, r3
  403024:	f001 bc7e 	b.w	404924 <__register_exitproc>

00403028 <__sflush_r>:
  403028:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40302c:	b29a      	uxth	r2, r3
  40302e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403032:	460d      	mov	r5, r1
  403034:	0711      	lsls	r1, r2, #28
  403036:	4680      	mov	r8, r0
  403038:	d43c      	bmi.n	4030b4 <__sflush_r+0x8c>
  40303a:	686a      	ldr	r2, [r5, #4]
  40303c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403040:	2a00      	cmp	r2, #0
  403042:	81ab      	strh	r3, [r5, #12]
  403044:	dd73      	ble.n	40312e <__sflush_r+0x106>
  403046:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403048:	2c00      	cmp	r4, #0
  40304a:	d04b      	beq.n	4030e4 <__sflush_r+0xbc>
  40304c:	b29b      	uxth	r3, r3
  40304e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  403052:	2100      	movs	r1, #0
  403054:	b292      	uxth	r2, r2
  403056:	f8d8 6000 	ldr.w	r6, [r8]
  40305a:	f8c8 1000 	str.w	r1, [r8]
  40305e:	2a00      	cmp	r2, #0
  403060:	d069      	beq.n	403136 <__sflush_r+0x10e>
  403062:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403064:	075f      	lsls	r7, r3, #29
  403066:	d505      	bpl.n	403074 <__sflush_r+0x4c>
  403068:	6869      	ldr	r1, [r5, #4]
  40306a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40306c:	1a52      	subs	r2, r2, r1
  40306e:	b10b      	cbz	r3, 403074 <__sflush_r+0x4c>
  403070:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403072:	1ad2      	subs	r2, r2, r3
  403074:	2300      	movs	r3, #0
  403076:	69e9      	ldr	r1, [r5, #28]
  403078:	4640      	mov	r0, r8
  40307a:	47a0      	blx	r4
  40307c:	1c44      	adds	r4, r0, #1
  40307e:	d03c      	beq.n	4030fa <__sflush_r+0xd2>
  403080:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403084:	692a      	ldr	r2, [r5, #16]
  403086:	602a      	str	r2, [r5, #0]
  403088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40308c:	2200      	movs	r2, #0
  40308e:	81ab      	strh	r3, [r5, #12]
  403090:	04db      	lsls	r3, r3, #19
  403092:	606a      	str	r2, [r5, #4]
  403094:	d449      	bmi.n	40312a <__sflush_r+0x102>
  403096:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403098:	f8c8 6000 	str.w	r6, [r8]
  40309c:	b311      	cbz	r1, 4030e4 <__sflush_r+0xbc>
  40309e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4030a2:	4299      	cmp	r1, r3
  4030a4:	d002      	beq.n	4030ac <__sflush_r+0x84>
  4030a6:	4640      	mov	r0, r8
  4030a8:	f000 f9c0 	bl	40342c <_free_r>
  4030ac:	2000      	movs	r0, #0
  4030ae:	6328      	str	r0, [r5, #48]	; 0x30
  4030b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030b4:	692e      	ldr	r6, [r5, #16]
  4030b6:	b1ae      	cbz	r6, 4030e4 <__sflush_r+0xbc>
  4030b8:	682c      	ldr	r4, [r5, #0]
  4030ba:	602e      	str	r6, [r5, #0]
  4030bc:	0790      	lsls	r0, r2, #30
  4030be:	bf0c      	ite	eq
  4030c0:	696b      	ldreq	r3, [r5, #20]
  4030c2:	2300      	movne	r3, #0
  4030c4:	1ba4      	subs	r4, r4, r6
  4030c6:	60ab      	str	r3, [r5, #8]
  4030c8:	e00a      	b.n	4030e0 <__sflush_r+0xb8>
  4030ca:	4623      	mov	r3, r4
  4030cc:	4632      	mov	r2, r6
  4030ce:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4030d0:	69e9      	ldr	r1, [r5, #28]
  4030d2:	4640      	mov	r0, r8
  4030d4:	47b8      	blx	r7
  4030d6:	2800      	cmp	r0, #0
  4030d8:	eba4 0400 	sub.w	r4, r4, r0
  4030dc:	4406      	add	r6, r0
  4030de:	dd04      	ble.n	4030ea <__sflush_r+0xc2>
  4030e0:	2c00      	cmp	r4, #0
  4030e2:	dcf2      	bgt.n	4030ca <__sflush_r+0xa2>
  4030e4:	2000      	movs	r0, #0
  4030e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030ea:	89ab      	ldrh	r3, [r5, #12]
  4030ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030f0:	81ab      	strh	r3, [r5, #12]
  4030f2:	f04f 30ff 	mov.w	r0, #4294967295
  4030f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030fa:	f8d8 2000 	ldr.w	r2, [r8]
  4030fe:	2a1d      	cmp	r2, #29
  403100:	d8f3      	bhi.n	4030ea <__sflush_r+0xc2>
  403102:	4b1a      	ldr	r3, [pc, #104]	; (40316c <__sflush_r+0x144>)
  403104:	40d3      	lsrs	r3, r2
  403106:	f003 0301 	and.w	r3, r3, #1
  40310a:	f083 0401 	eor.w	r4, r3, #1
  40310e:	2b00      	cmp	r3, #0
  403110:	d0eb      	beq.n	4030ea <__sflush_r+0xc2>
  403112:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403116:	6929      	ldr	r1, [r5, #16]
  403118:	6029      	str	r1, [r5, #0]
  40311a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40311e:	04d9      	lsls	r1, r3, #19
  403120:	606c      	str	r4, [r5, #4]
  403122:	81ab      	strh	r3, [r5, #12]
  403124:	d5b7      	bpl.n	403096 <__sflush_r+0x6e>
  403126:	2a00      	cmp	r2, #0
  403128:	d1b5      	bne.n	403096 <__sflush_r+0x6e>
  40312a:	6528      	str	r0, [r5, #80]	; 0x50
  40312c:	e7b3      	b.n	403096 <__sflush_r+0x6e>
  40312e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403130:	2a00      	cmp	r2, #0
  403132:	dc88      	bgt.n	403046 <__sflush_r+0x1e>
  403134:	e7d6      	b.n	4030e4 <__sflush_r+0xbc>
  403136:	2301      	movs	r3, #1
  403138:	69e9      	ldr	r1, [r5, #28]
  40313a:	4640      	mov	r0, r8
  40313c:	47a0      	blx	r4
  40313e:	1c43      	adds	r3, r0, #1
  403140:	4602      	mov	r2, r0
  403142:	d002      	beq.n	40314a <__sflush_r+0x122>
  403144:	89ab      	ldrh	r3, [r5, #12]
  403146:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403148:	e78c      	b.n	403064 <__sflush_r+0x3c>
  40314a:	f8d8 3000 	ldr.w	r3, [r8]
  40314e:	2b00      	cmp	r3, #0
  403150:	d0f8      	beq.n	403144 <__sflush_r+0x11c>
  403152:	2b1d      	cmp	r3, #29
  403154:	d001      	beq.n	40315a <__sflush_r+0x132>
  403156:	2b16      	cmp	r3, #22
  403158:	d102      	bne.n	403160 <__sflush_r+0x138>
  40315a:	f8c8 6000 	str.w	r6, [r8]
  40315e:	e7c1      	b.n	4030e4 <__sflush_r+0xbc>
  403160:	89ab      	ldrh	r3, [r5, #12]
  403162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403166:	81ab      	strh	r3, [r5, #12]
  403168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40316c:	20400001 	.word	0x20400001

00403170 <_fflush_r>:
  403170:	b510      	push	{r4, lr}
  403172:	4604      	mov	r4, r0
  403174:	b082      	sub	sp, #8
  403176:	b108      	cbz	r0, 40317c <_fflush_r+0xc>
  403178:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40317a:	b153      	cbz	r3, 403192 <_fflush_r+0x22>
  40317c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  403180:	b908      	cbnz	r0, 403186 <_fflush_r+0x16>
  403182:	b002      	add	sp, #8
  403184:	bd10      	pop	{r4, pc}
  403186:	4620      	mov	r0, r4
  403188:	b002      	add	sp, #8
  40318a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40318e:	f7ff bf4b 	b.w	403028 <__sflush_r>
  403192:	9101      	str	r1, [sp, #4]
  403194:	f000 f880 	bl	403298 <__sinit>
  403198:	9901      	ldr	r1, [sp, #4]
  40319a:	e7ef      	b.n	40317c <_fflush_r+0xc>

0040319c <_cleanup_r>:
  40319c:	4901      	ldr	r1, [pc, #4]	; (4031a4 <_cleanup_r+0x8>)
  40319e:	f000 bbaf 	b.w	403900 <_fwalk_reent>
  4031a2:	bf00      	nop
  4031a4:	004049ed 	.word	0x004049ed

004031a8 <__sinit.part.1>:
  4031a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031ac:	4b35      	ldr	r3, [pc, #212]	; (403284 <__sinit.part.1+0xdc>)
  4031ae:	6845      	ldr	r5, [r0, #4]
  4031b0:	63c3      	str	r3, [r0, #60]	; 0x3c
  4031b2:	2400      	movs	r4, #0
  4031b4:	4607      	mov	r7, r0
  4031b6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4031ba:	2304      	movs	r3, #4
  4031bc:	2103      	movs	r1, #3
  4031be:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4031c2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4031c6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4031ca:	b083      	sub	sp, #12
  4031cc:	602c      	str	r4, [r5, #0]
  4031ce:	606c      	str	r4, [r5, #4]
  4031d0:	60ac      	str	r4, [r5, #8]
  4031d2:	666c      	str	r4, [r5, #100]	; 0x64
  4031d4:	81ec      	strh	r4, [r5, #14]
  4031d6:	612c      	str	r4, [r5, #16]
  4031d8:	616c      	str	r4, [r5, #20]
  4031da:	61ac      	str	r4, [r5, #24]
  4031dc:	81ab      	strh	r3, [r5, #12]
  4031de:	4621      	mov	r1, r4
  4031e0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4031e4:	2208      	movs	r2, #8
  4031e6:	f7fe fe3d 	bl	401e64 <memset>
  4031ea:	68be      	ldr	r6, [r7, #8]
  4031ec:	f8df b098 	ldr.w	fp, [pc, #152]	; 403288 <__sinit.part.1+0xe0>
  4031f0:	f8df a098 	ldr.w	sl, [pc, #152]	; 40328c <__sinit.part.1+0xe4>
  4031f4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 403290 <__sinit.part.1+0xe8>
  4031f8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 403294 <__sinit.part.1+0xec>
  4031fc:	f8c5 b020 	str.w	fp, [r5, #32]
  403200:	2301      	movs	r3, #1
  403202:	2209      	movs	r2, #9
  403204:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403208:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40320c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403210:	61ed      	str	r5, [r5, #28]
  403212:	4621      	mov	r1, r4
  403214:	81f3      	strh	r3, [r6, #14]
  403216:	81b2      	strh	r2, [r6, #12]
  403218:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40321c:	6034      	str	r4, [r6, #0]
  40321e:	6074      	str	r4, [r6, #4]
  403220:	60b4      	str	r4, [r6, #8]
  403222:	6674      	str	r4, [r6, #100]	; 0x64
  403224:	6134      	str	r4, [r6, #16]
  403226:	6174      	str	r4, [r6, #20]
  403228:	61b4      	str	r4, [r6, #24]
  40322a:	2208      	movs	r2, #8
  40322c:	9301      	str	r3, [sp, #4]
  40322e:	f7fe fe19 	bl	401e64 <memset>
  403232:	68fd      	ldr	r5, [r7, #12]
  403234:	61f6      	str	r6, [r6, #28]
  403236:	2012      	movs	r0, #18
  403238:	2202      	movs	r2, #2
  40323a:	f8c6 b020 	str.w	fp, [r6, #32]
  40323e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  403242:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  403246:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40324a:	4621      	mov	r1, r4
  40324c:	81a8      	strh	r0, [r5, #12]
  40324e:	81ea      	strh	r2, [r5, #14]
  403250:	602c      	str	r4, [r5, #0]
  403252:	606c      	str	r4, [r5, #4]
  403254:	60ac      	str	r4, [r5, #8]
  403256:	666c      	str	r4, [r5, #100]	; 0x64
  403258:	612c      	str	r4, [r5, #16]
  40325a:	616c      	str	r4, [r5, #20]
  40325c:	61ac      	str	r4, [r5, #24]
  40325e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403262:	2208      	movs	r2, #8
  403264:	f7fe fdfe 	bl	401e64 <memset>
  403268:	9b01      	ldr	r3, [sp, #4]
  40326a:	61ed      	str	r5, [r5, #28]
  40326c:	f8c5 b020 	str.w	fp, [r5, #32]
  403270:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403274:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403278:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40327c:	63bb      	str	r3, [r7, #56]	; 0x38
  40327e:	b003      	add	sp, #12
  403280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403284:	0040319d 	.word	0x0040319d
  403288:	00404679 	.word	0x00404679
  40328c:	0040469d 	.word	0x0040469d
  403290:	004046d9 	.word	0x004046d9
  403294:	004046f9 	.word	0x004046f9

00403298 <__sinit>:
  403298:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40329a:	b103      	cbz	r3, 40329e <__sinit+0x6>
  40329c:	4770      	bx	lr
  40329e:	f7ff bf83 	b.w	4031a8 <__sinit.part.1>
  4032a2:	bf00      	nop

004032a4 <__sfp_lock_acquire>:
  4032a4:	4770      	bx	lr
  4032a6:	bf00      	nop

004032a8 <__sfp_lock_release>:
  4032a8:	4770      	bx	lr
  4032aa:	bf00      	nop

004032ac <__libc_fini_array>:
  4032ac:	b538      	push	{r3, r4, r5, lr}
  4032ae:	4d07      	ldr	r5, [pc, #28]	; (4032cc <__libc_fini_array+0x20>)
  4032b0:	4c07      	ldr	r4, [pc, #28]	; (4032d0 <__libc_fini_array+0x24>)
  4032b2:	1b2c      	subs	r4, r5, r4
  4032b4:	10a4      	asrs	r4, r4, #2
  4032b6:	d005      	beq.n	4032c4 <__libc_fini_array+0x18>
  4032b8:	3c01      	subs	r4, #1
  4032ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4032be:	4798      	blx	r3
  4032c0:	2c00      	cmp	r4, #0
  4032c2:	d1f9      	bne.n	4032b8 <__libc_fini_array+0xc>
  4032c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4032c8:	f001 bc5e 	b.w	404b88 <_fini>
  4032cc:	00404b98 	.word	0x00404b98
  4032d0:	00404b94 	.word	0x00404b94

004032d4 <__fputwc>:
  4032d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4032d8:	b082      	sub	sp, #8
  4032da:	4680      	mov	r8, r0
  4032dc:	4689      	mov	r9, r1
  4032de:	4614      	mov	r4, r2
  4032e0:	f000 fb3c 	bl	40395c <__locale_mb_cur_max>
  4032e4:	2801      	cmp	r0, #1
  4032e6:	d033      	beq.n	403350 <__fputwc+0x7c>
  4032e8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4032ec:	464a      	mov	r2, r9
  4032ee:	a901      	add	r1, sp, #4
  4032f0:	4640      	mov	r0, r8
  4032f2:	f001 fac9 	bl	404888 <_wcrtomb_r>
  4032f6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4032fa:	4682      	mov	sl, r0
  4032fc:	d021      	beq.n	403342 <__fputwc+0x6e>
  4032fe:	b388      	cbz	r0, 403364 <__fputwc+0x90>
  403300:	f89d 6004 	ldrb.w	r6, [sp, #4]
  403304:	2500      	movs	r5, #0
  403306:	e008      	b.n	40331a <__fputwc+0x46>
  403308:	6823      	ldr	r3, [r4, #0]
  40330a:	1c5a      	adds	r2, r3, #1
  40330c:	6022      	str	r2, [r4, #0]
  40330e:	701e      	strb	r6, [r3, #0]
  403310:	3501      	adds	r5, #1
  403312:	4555      	cmp	r5, sl
  403314:	d226      	bcs.n	403364 <__fputwc+0x90>
  403316:	ab01      	add	r3, sp, #4
  403318:	5d5e      	ldrb	r6, [r3, r5]
  40331a:	68a3      	ldr	r3, [r4, #8]
  40331c:	3b01      	subs	r3, #1
  40331e:	2b00      	cmp	r3, #0
  403320:	60a3      	str	r3, [r4, #8]
  403322:	daf1      	bge.n	403308 <__fputwc+0x34>
  403324:	69a7      	ldr	r7, [r4, #24]
  403326:	42bb      	cmp	r3, r7
  403328:	4631      	mov	r1, r6
  40332a:	4622      	mov	r2, r4
  40332c:	4640      	mov	r0, r8
  40332e:	db01      	blt.n	403334 <__fputwc+0x60>
  403330:	2e0a      	cmp	r6, #10
  403332:	d1e9      	bne.n	403308 <__fputwc+0x34>
  403334:	f001 fa52 	bl	4047dc <__swbuf_r>
  403338:	1c43      	adds	r3, r0, #1
  40333a:	d1e9      	bne.n	403310 <__fputwc+0x3c>
  40333c:	b002      	add	sp, #8
  40333e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403342:	89a3      	ldrh	r3, [r4, #12]
  403344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403348:	81a3      	strh	r3, [r4, #12]
  40334a:	b002      	add	sp, #8
  40334c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403350:	f109 33ff 	add.w	r3, r9, #4294967295
  403354:	2bfe      	cmp	r3, #254	; 0xfe
  403356:	d8c7      	bhi.n	4032e8 <__fputwc+0x14>
  403358:	fa5f f689 	uxtb.w	r6, r9
  40335c:	4682      	mov	sl, r0
  40335e:	f88d 6004 	strb.w	r6, [sp, #4]
  403362:	e7cf      	b.n	403304 <__fputwc+0x30>
  403364:	4648      	mov	r0, r9
  403366:	b002      	add	sp, #8
  403368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040336c <_fputwc_r>:
  40336c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403370:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403374:	d10a      	bne.n	40338c <_fputwc_r+0x20>
  403376:	b410      	push	{r4}
  403378:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40337a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40337e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  403382:	6654      	str	r4, [r2, #100]	; 0x64
  403384:	8193      	strh	r3, [r2, #12]
  403386:	bc10      	pop	{r4}
  403388:	f7ff bfa4 	b.w	4032d4 <__fputwc>
  40338c:	f7ff bfa2 	b.w	4032d4 <__fputwc>

00403390 <_malloc_trim_r>:
  403390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403392:	4f23      	ldr	r7, [pc, #140]	; (403420 <_malloc_trim_r+0x90>)
  403394:	460c      	mov	r4, r1
  403396:	4606      	mov	r6, r0
  403398:	f000 ff68 	bl	40426c <__malloc_lock>
  40339c:	68bb      	ldr	r3, [r7, #8]
  40339e:	685d      	ldr	r5, [r3, #4]
  4033a0:	f025 0503 	bic.w	r5, r5, #3
  4033a4:	1b29      	subs	r1, r5, r4
  4033a6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4033aa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4033ae:	f021 010f 	bic.w	r1, r1, #15
  4033b2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4033b6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4033ba:	db07      	blt.n	4033cc <_malloc_trim_r+0x3c>
  4033bc:	2100      	movs	r1, #0
  4033be:	4630      	mov	r0, r6
  4033c0:	f001 f948 	bl	404654 <_sbrk_r>
  4033c4:	68bb      	ldr	r3, [r7, #8]
  4033c6:	442b      	add	r3, r5
  4033c8:	4298      	cmp	r0, r3
  4033ca:	d004      	beq.n	4033d6 <_malloc_trim_r+0x46>
  4033cc:	4630      	mov	r0, r6
  4033ce:	f000 ff4f 	bl	404270 <__malloc_unlock>
  4033d2:	2000      	movs	r0, #0
  4033d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4033d6:	4261      	negs	r1, r4
  4033d8:	4630      	mov	r0, r6
  4033da:	f001 f93b 	bl	404654 <_sbrk_r>
  4033de:	3001      	adds	r0, #1
  4033e0:	d00d      	beq.n	4033fe <_malloc_trim_r+0x6e>
  4033e2:	4b10      	ldr	r3, [pc, #64]	; (403424 <_malloc_trim_r+0x94>)
  4033e4:	68ba      	ldr	r2, [r7, #8]
  4033e6:	6819      	ldr	r1, [r3, #0]
  4033e8:	1b2d      	subs	r5, r5, r4
  4033ea:	f045 0501 	orr.w	r5, r5, #1
  4033ee:	4630      	mov	r0, r6
  4033f0:	1b09      	subs	r1, r1, r4
  4033f2:	6055      	str	r5, [r2, #4]
  4033f4:	6019      	str	r1, [r3, #0]
  4033f6:	f000 ff3b 	bl	404270 <__malloc_unlock>
  4033fa:	2001      	movs	r0, #1
  4033fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4033fe:	2100      	movs	r1, #0
  403400:	4630      	mov	r0, r6
  403402:	f001 f927 	bl	404654 <_sbrk_r>
  403406:	68ba      	ldr	r2, [r7, #8]
  403408:	1a83      	subs	r3, r0, r2
  40340a:	2b0f      	cmp	r3, #15
  40340c:	ddde      	ble.n	4033cc <_malloc_trim_r+0x3c>
  40340e:	4c06      	ldr	r4, [pc, #24]	; (403428 <_malloc_trim_r+0x98>)
  403410:	4904      	ldr	r1, [pc, #16]	; (403424 <_malloc_trim_r+0x94>)
  403412:	6824      	ldr	r4, [r4, #0]
  403414:	f043 0301 	orr.w	r3, r3, #1
  403418:	1b00      	subs	r0, r0, r4
  40341a:	6053      	str	r3, [r2, #4]
  40341c:	6008      	str	r0, [r1, #0]
  40341e:	e7d5      	b.n	4033cc <_malloc_trim_r+0x3c>
  403420:	20000460 	.word	0x20000460
  403424:	20000918 	.word	0x20000918
  403428:	2000086c 	.word	0x2000086c

0040342c <_free_r>:
  40342c:	2900      	cmp	r1, #0
  40342e:	d045      	beq.n	4034bc <_free_r+0x90>
  403430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403434:	460d      	mov	r5, r1
  403436:	4680      	mov	r8, r0
  403438:	f000 ff18 	bl	40426c <__malloc_lock>
  40343c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403440:	496a      	ldr	r1, [pc, #424]	; (4035ec <_free_r+0x1c0>)
  403442:	f027 0301 	bic.w	r3, r7, #1
  403446:	f1a5 0408 	sub.w	r4, r5, #8
  40344a:	18e2      	adds	r2, r4, r3
  40344c:	688e      	ldr	r6, [r1, #8]
  40344e:	6850      	ldr	r0, [r2, #4]
  403450:	42b2      	cmp	r2, r6
  403452:	f020 0003 	bic.w	r0, r0, #3
  403456:	d062      	beq.n	40351e <_free_r+0xf2>
  403458:	07fe      	lsls	r6, r7, #31
  40345a:	6050      	str	r0, [r2, #4]
  40345c:	d40b      	bmi.n	403476 <_free_r+0x4a>
  40345e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403462:	1be4      	subs	r4, r4, r7
  403464:	f101 0e08 	add.w	lr, r1, #8
  403468:	68a5      	ldr	r5, [r4, #8]
  40346a:	4575      	cmp	r5, lr
  40346c:	443b      	add	r3, r7
  40346e:	d06f      	beq.n	403550 <_free_r+0x124>
  403470:	68e7      	ldr	r7, [r4, #12]
  403472:	60ef      	str	r7, [r5, #12]
  403474:	60bd      	str	r5, [r7, #8]
  403476:	1815      	adds	r5, r2, r0
  403478:	686d      	ldr	r5, [r5, #4]
  40347a:	07ed      	lsls	r5, r5, #31
  40347c:	d542      	bpl.n	403504 <_free_r+0xd8>
  40347e:	f043 0201 	orr.w	r2, r3, #1
  403482:	6062      	str	r2, [r4, #4]
  403484:	50e3      	str	r3, [r4, r3]
  403486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40348a:	d218      	bcs.n	4034be <_free_r+0x92>
  40348c:	08db      	lsrs	r3, r3, #3
  40348e:	1c5a      	adds	r2, r3, #1
  403490:	684d      	ldr	r5, [r1, #4]
  403492:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  403496:	60a7      	str	r7, [r4, #8]
  403498:	2001      	movs	r0, #1
  40349a:	109b      	asrs	r3, r3, #2
  40349c:	fa00 f303 	lsl.w	r3, r0, r3
  4034a0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4034a4:	431d      	orrs	r5, r3
  4034a6:	3808      	subs	r0, #8
  4034a8:	60e0      	str	r0, [r4, #12]
  4034aa:	604d      	str	r5, [r1, #4]
  4034ac:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4034b0:	60fc      	str	r4, [r7, #12]
  4034b2:	4640      	mov	r0, r8
  4034b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4034b8:	f000 beda 	b.w	404270 <__malloc_unlock>
  4034bc:	4770      	bx	lr
  4034be:	0a5a      	lsrs	r2, r3, #9
  4034c0:	2a04      	cmp	r2, #4
  4034c2:	d853      	bhi.n	40356c <_free_r+0x140>
  4034c4:	099a      	lsrs	r2, r3, #6
  4034c6:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4034ca:	007f      	lsls	r7, r7, #1
  4034cc:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4034d0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4034d4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4034d8:	4944      	ldr	r1, [pc, #272]	; (4035ec <_free_r+0x1c0>)
  4034da:	3808      	subs	r0, #8
  4034dc:	4290      	cmp	r0, r2
  4034de:	d04d      	beq.n	40357c <_free_r+0x150>
  4034e0:	6851      	ldr	r1, [r2, #4]
  4034e2:	f021 0103 	bic.w	r1, r1, #3
  4034e6:	428b      	cmp	r3, r1
  4034e8:	d202      	bcs.n	4034f0 <_free_r+0xc4>
  4034ea:	6892      	ldr	r2, [r2, #8]
  4034ec:	4290      	cmp	r0, r2
  4034ee:	d1f7      	bne.n	4034e0 <_free_r+0xb4>
  4034f0:	68d0      	ldr	r0, [r2, #12]
  4034f2:	60e0      	str	r0, [r4, #12]
  4034f4:	60a2      	str	r2, [r4, #8]
  4034f6:	6084      	str	r4, [r0, #8]
  4034f8:	60d4      	str	r4, [r2, #12]
  4034fa:	4640      	mov	r0, r8
  4034fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403500:	f000 beb6 	b.w	404270 <__malloc_unlock>
  403504:	6895      	ldr	r5, [r2, #8]
  403506:	4f3a      	ldr	r7, [pc, #232]	; (4035f0 <_free_r+0x1c4>)
  403508:	42bd      	cmp	r5, r7
  40350a:	4403      	add	r3, r0
  40350c:	d03f      	beq.n	40358e <_free_r+0x162>
  40350e:	68d0      	ldr	r0, [r2, #12]
  403510:	60e8      	str	r0, [r5, #12]
  403512:	f043 0201 	orr.w	r2, r3, #1
  403516:	6085      	str	r5, [r0, #8]
  403518:	6062      	str	r2, [r4, #4]
  40351a:	50e3      	str	r3, [r4, r3]
  40351c:	e7b3      	b.n	403486 <_free_r+0x5a>
  40351e:	07ff      	lsls	r7, r7, #31
  403520:	4403      	add	r3, r0
  403522:	d407      	bmi.n	403534 <_free_r+0x108>
  403524:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403528:	1aa4      	subs	r4, r4, r2
  40352a:	4413      	add	r3, r2
  40352c:	68a0      	ldr	r0, [r4, #8]
  40352e:	68e2      	ldr	r2, [r4, #12]
  403530:	60c2      	str	r2, [r0, #12]
  403532:	6090      	str	r0, [r2, #8]
  403534:	4a2f      	ldr	r2, [pc, #188]	; (4035f4 <_free_r+0x1c8>)
  403536:	6812      	ldr	r2, [r2, #0]
  403538:	f043 0001 	orr.w	r0, r3, #1
  40353c:	4293      	cmp	r3, r2
  40353e:	6060      	str	r0, [r4, #4]
  403540:	608c      	str	r4, [r1, #8]
  403542:	d3b6      	bcc.n	4034b2 <_free_r+0x86>
  403544:	4b2c      	ldr	r3, [pc, #176]	; (4035f8 <_free_r+0x1cc>)
  403546:	4640      	mov	r0, r8
  403548:	6819      	ldr	r1, [r3, #0]
  40354a:	f7ff ff21 	bl	403390 <_malloc_trim_r>
  40354e:	e7b0      	b.n	4034b2 <_free_r+0x86>
  403550:	1811      	adds	r1, r2, r0
  403552:	6849      	ldr	r1, [r1, #4]
  403554:	07c9      	lsls	r1, r1, #31
  403556:	d444      	bmi.n	4035e2 <_free_r+0x1b6>
  403558:	6891      	ldr	r1, [r2, #8]
  40355a:	68d2      	ldr	r2, [r2, #12]
  40355c:	60ca      	str	r2, [r1, #12]
  40355e:	4403      	add	r3, r0
  403560:	f043 0001 	orr.w	r0, r3, #1
  403564:	6091      	str	r1, [r2, #8]
  403566:	6060      	str	r0, [r4, #4]
  403568:	50e3      	str	r3, [r4, r3]
  40356a:	e7a2      	b.n	4034b2 <_free_r+0x86>
  40356c:	2a14      	cmp	r2, #20
  40356e:	d817      	bhi.n	4035a0 <_free_r+0x174>
  403570:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403574:	007f      	lsls	r7, r7, #1
  403576:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40357a:	e7a9      	b.n	4034d0 <_free_r+0xa4>
  40357c:	10aa      	asrs	r2, r5, #2
  40357e:	684b      	ldr	r3, [r1, #4]
  403580:	2501      	movs	r5, #1
  403582:	fa05 f202 	lsl.w	r2, r5, r2
  403586:	4313      	orrs	r3, r2
  403588:	604b      	str	r3, [r1, #4]
  40358a:	4602      	mov	r2, r0
  40358c:	e7b1      	b.n	4034f2 <_free_r+0xc6>
  40358e:	f043 0201 	orr.w	r2, r3, #1
  403592:	614c      	str	r4, [r1, #20]
  403594:	610c      	str	r4, [r1, #16]
  403596:	60e5      	str	r5, [r4, #12]
  403598:	60a5      	str	r5, [r4, #8]
  40359a:	6062      	str	r2, [r4, #4]
  40359c:	50e3      	str	r3, [r4, r3]
  40359e:	e788      	b.n	4034b2 <_free_r+0x86>
  4035a0:	2a54      	cmp	r2, #84	; 0x54
  4035a2:	d806      	bhi.n	4035b2 <_free_r+0x186>
  4035a4:	0b1a      	lsrs	r2, r3, #12
  4035a6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4035aa:	007f      	lsls	r7, r7, #1
  4035ac:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4035b0:	e78e      	b.n	4034d0 <_free_r+0xa4>
  4035b2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4035b6:	d806      	bhi.n	4035c6 <_free_r+0x19a>
  4035b8:	0bda      	lsrs	r2, r3, #15
  4035ba:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4035be:	007f      	lsls	r7, r7, #1
  4035c0:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4035c4:	e784      	b.n	4034d0 <_free_r+0xa4>
  4035c6:	f240 5054 	movw	r0, #1364	; 0x554
  4035ca:	4282      	cmp	r2, r0
  4035cc:	d806      	bhi.n	4035dc <_free_r+0x1b0>
  4035ce:	0c9a      	lsrs	r2, r3, #18
  4035d0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4035d4:	007f      	lsls	r7, r7, #1
  4035d6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4035da:	e779      	b.n	4034d0 <_free_r+0xa4>
  4035dc:	27fe      	movs	r7, #254	; 0xfe
  4035de:	257e      	movs	r5, #126	; 0x7e
  4035e0:	e776      	b.n	4034d0 <_free_r+0xa4>
  4035e2:	f043 0201 	orr.w	r2, r3, #1
  4035e6:	6062      	str	r2, [r4, #4]
  4035e8:	50e3      	str	r3, [r4, r3]
  4035ea:	e762      	b.n	4034b2 <_free_r+0x86>
  4035ec:	20000460 	.word	0x20000460
  4035f0:	20000468 	.word	0x20000468
  4035f4:	20000868 	.word	0x20000868
  4035f8:	20000914 	.word	0x20000914

004035fc <__sfvwrite_r>:
  4035fc:	6893      	ldr	r3, [r2, #8]
  4035fe:	2b00      	cmp	r3, #0
  403600:	d076      	beq.n	4036f0 <__sfvwrite_r+0xf4>
  403602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403606:	898b      	ldrh	r3, [r1, #12]
  403608:	b085      	sub	sp, #20
  40360a:	460c      	mov	r4, r1
  40360c:	0719      	lsls	r1, r3, #28
  40360e:	9001      	str	r0, [sp, #4]
  403610:	4616      	mov	r6, r2
  403612:	d529      	bpl.n	403668 <__sfvwrite_r+0x6c>
  403614:	6922      	ldr	r2, [r4, #16]
  403616:	b33a      	cbz	r2, 403668 <__sfvwrite_r+0x6c>
  403618:	f003 0802 	and.w	r8, r3, #2
  40361c:	fa1f f088 	uxth.w	r0, r8
  403620:	6835      	ldr	r5, [r6, #0]
  403622:	2800      	cmp	r0, #0
  403624:	d02f      	beq.n	403686 <__sfvwrite_r+0x8a>
  403626:	f04f 0900 	mov.w	r9, #0
  40362a:	4fb4      	ldr	r7, [pc, #720]	; (4038fc <__sfvwrite_r+0x300>)
  40362c:	46c8      	mov	r8, r9
  40362e:	46b2      	mov	sl, r6
  403630:	45b8      	cmp	r8, r7
  403632:	4643      	mov	r3, r8
  403634:	464a      	mov	r2, r9
  403636:	bf28      	it	cs
  403638:	463b      	movcs	r3, r7
  40363a:	9801      	ldr	r0, [sp, #4]
  40363c:	f1b8 0f00 	cmp.w	r8, #0
  403640:	d050      	beq.n	4036e4 <__sfvwrite_r+0xe8>
  403642:	69e1      	ldr	r1, [r4, #28]
  403644:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403646:	47b0      	blx	r6
  403648:	2800      	cmp	r0, #0
  40364a:	dd71      	ble.n	403730 <__sfvwrite_r+0x134>
  40364c:	f8da 3008 	ldr.w	r3, [sl, #8]
  403650:	1a1b      	subs	r3, r3, r0
  403652:	4481      	add	r9, r0
  403654:	ebc0 0808 	rsb	r8, r0, r8
  403658:	f8ca 3008 	str.w	r3, [sl, #8]
  40365c:	2b00      	cmp	r3, #0
  40365e:	d1e7      	bne.n	403630 <__sfvwrite_r+0x34>
  403660:	2000      	movs	r0, #0
  403662:	b005      	add	sp, #20
  403664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403668:	4621      	mov	r1, r4
  40366a:	9801      	ldr	r0, [sp, #4]
  40366c:	f7ff fc68 	bl	402f40 <__swsetup_r>
  403670:	2800      	cmp	r0, #0
  403672:	f040 813a 	bne.w	4038ea <__sfvwrite_r+0x2ee>
  403676:	89a3      	ldrh	r3, [r4, #12]
  403678:	6835      	ldr	r5, [r6, #0]
  40367a:	f003 0802 	and.w	r8, r3, #2
  40367e:	fa1f f088 	uxth.w	r0, r8
  403682:	2800      	cmp	r0, #0
  403684:	d1cf      	bne.n	403626 <__sfvwrite_r+0x2a>
  403686:	f013 0901 	ands.w	r9, r3, #1
  40368a:	d15b      	bne.n	403744 <__sfvwrite_r+0x148>
  40368c:	464f      	mov	r7, r9
  40368e:	9602      	str	r6, [sp, #8]
  403690:	b31f      	cbz	r7, 4036da <__sfvwrite_r+0xde>
  403692:	059a      	lsls	r2, r3, #22
  403694:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403698:	d52c      	bpl.n	4036f4 <__sfvwrite_r+0xf8>
  40369a:	4547      	cmp	r7, r8
  40369c:	46c2      	mov	sl, r8
  40369e:	f0c0 80a4 	bcc.w	4037ea <__sfvwrite_r+0x1ee>
  4036a2:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4036a6:	f040 80b1 	bne.w	40380c <__sfvwrite_r+0x210>
  4036aa:	6820      	ldr	r0, [r4, #0]
  4036ac:	4652      	mov	r2, sl
  4036ae:	4649      	mov	r1, r9
  4036b0:	f000 fd78 	bl	4041a4 <memmove>
  4036b4:	68a0      	ldr	r0, [r4, #8]
  4036b6:	6823      	ldr	r3, [r4, #0]
  4036b8:	ebc8 0000 	rsb	r0, r8, r0
  4036bc:	4453      	add	r3, sl
  4036be:	60a0      	str	r0, [r4, #8]
  4036c0:	6023      	str	r3, [r4, #0]
  4036c2:	4638      	mov	r0, r7
  4036c4:	9a02      	ldr	r2, [sp, #8]
  4036c6:	6893      	ldr	r3, [r2, #8]
  4036c8:	1a1b      	subs	r3, r3, r0
  4036ca:	4481      	add	r9, r0
  4036cc:	1a3f      	subs	r7, r7, r0
  4036ce:	6093      	str	r3, [r2, #8]
  4036d0:	2b00      	cmp	r3, #0
  4036d2:	d0c5      	beq.n	403660 <__sfvwrite_r+0x64>
  4036d4:	89a3      	ldrh	r3, [r4, #12]
  4036d6:	2f00      	cmp	r7, #0
  4036d8:	d1db      	bne.n	403692 <__sfvwrite_r+0x96>
  4036da:	f8d5 9000 	ldr.w	r9, [r5]
  4036de:	686f      	ldr	r7, [r5, #4]
  4036e0:	3508      	adds	r5, #8
  4036e2:	e7d5      	b.n	403690 <__sfvwrite_r+0x94>
  4036e4:	f8d5 9000 	ldr.w	r9, [r5]
  4036e8:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4036ec:	3508      	adds	r5, #8
  4036ee:	e79f      	b.n	403630 <__sfvwrite_r+0x34>
  4036f0:	2000      	movs	r0, #0
  4036f2:	4770      	bx	lr
  4036f4:	6820      	ldr	r0, [r4, #0]
  4036f6:	6923      	ldr	r3, [r4, #16]
  4036f8:	4298      	cmp	r0, r3
  4036fa:	d803      	bhi.n	403704 <__sfvwrite_r+0x108>
  4036fc:	6961      	ldr	r1, [r4, #20]
  4036fe:	428f      	cmp	r7, r1
  403700:	f080 80b7 	bcs.w	403872 <__sfvwrite_r+0x276>
  403704:	45b8      	cmp	r8, r7
  403706:	bf28      	it	cs
  403708:	46b8      	movcs	r8, r7
  40370a:	4642      	mov	r2, r8
  40370c:	4649      	mov	r1, r9
  40370e:	f000 fd49 	bl	4041a4 <memmove>
  403712:	68a3      	ldr	r3, [r4, #8]
  403714:	6822      	ldr	r2, [r4, #0]
  403716:	ebc8 0303 	rsb	r3, r8, r3
  40371a:	4442      	add	r2, r8
  40371c:	60a3      	str	r3, [r4, #8]
  40371e:	6022      	str	r2, [r4, #0]
  403720:	2b00      	cmp	r3, #0
  403722:	d149      	bne.n	4037b8 <__sfvwrite_r+0x1bc>
  403724:	4621      	mov	r1, r4
  403726:	9801      	ldr	r0, [sp, #4]
  403728:	f7ff fd22 	bl	403170 <_fflush_r>
  40372c:	2800      	cmp	r0, #0
  40372e:	d043      	beq.n	4037b8 <__sfvwrite_r+0x1bc>
  403730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403738:	f04f 30ff 	mov.w	r0, #4294967295
  40373c:	81a3      	strh	r3, [r4, #12]
  40373e:	b005      	add	sp, #20
  403740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403744:	4680      	mov	r8, r0
  403746:	9002      	str	r0, [sp, #8]
  403748:	4682      	mov	sl, r0
  40374a:	4681      	mov	r9, r0
  40374c:	f1b9 0f00 	cmp.w	r9, #0
  403750:	d02a      	beq.n	4037a8 <__sfvwrite_r+0x1ac>
  403752:	9b02      	ldr	r3, [sp, #8]
  403754:	2b00      	cmp	r3, #0
  403756:	d04c      	beq.n	4037f2 <__sfvwrite_r+0x1f6>
  403758:	6820      	ldr	r0, [r4, #0]
  40375a:	6923      	ldr	r3, [r4, #16]
  40375c:	6962      	ldr	r2, [r4, #20]
  40375e:	45c8      	cmp	r8, r9
  403760:	46c3      	mov	fp, r8
  403762:	bf28      	it	cs
  403764:	46cb      	movcs	fp, r9
  403766:	4298      	cmp	r0, r3
  403768:	465f      	mov	r7, fp
  40376a:	d904      	bls.n	403776 <__sfvwrite_r+0x17a>
  40376c:	68a3      	ldr	r3, [r4, #8]
  40376e:	4413      	add	r3, r2
  403770:	459b      	cmp	fp, r3
  403772:	f300 8090 	bgt.w	403896 <__sfvwrite_r+0x29a>
  403776:	4593      	cmp	fp, r2
  403778:	db20      	blt.n	4037bc <__sfvwrite_r+0x1c0>
  40377a:	4613      	mov	r3, r2
  40377c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40377e:	69e1      	ldr	r1, [r4, #28]
  403780:	9801      	ldr	r0, [sp, #4]
  403782:	4652      	mov	r2, sl
  403784:	47b8      	blx	r7
  403786:	1e07      	subs	r7, r0, #0
  403788:	ddd2      	ble.n	403730 <__sfvwrite_r+0x134>
  40378a:	ebb8 0807 	subs.w	r8, r8, r7
  40378e:	d023      	beq.n	4037d8 <__sfvwrite_r+0x1dc>
  403790:	68b3      	ldr	r3, [r6, #8]
  403792:	1bdb      	subs	r3, r3, r7
  403794:	44ba      	add	sl, r7
  403796:	ebc7 0909 	rsb	r9, r7, r9
  40379a:	60b3      	str	r3, [r6, #8]
  40379c:	2b00      	cmp	r3, #0
  40379e:	f43f af5f 	beq.w	403660 <__sfvwrite_r+0x64>
  4037a2:	f1b9 0f00 	cmp.w	r9, #0
  4037a6:	d1d4      	bne.n	403752 <__sfvwrite_r+0x156>
  4037a8:	2300      	movs	r3, #0
  4037aa:	f8d5 a000 	ldr.w	sl, [r5]
  4037ae:	f8d5 9004 	ldr.w	r9, [r5, #4]
  4037b2:	9302      	str	r3, [sp, #8]
  4037b4:	3508      	adds	r5, #8
  4037b6:	e7c9      	b.n	40374c <__sfvwrite_r+0x150>
  4037b8:	4640      	mov	r0, r8
  4037ba:	e783      	b.n	4036c4 <__sfvwrite_r+0xc8>
  4037bc:	465a      	mov	r2, fp
  4037be:	4651      	mov	r1, sl
  4037c0:	f000 fcf0 	bl	4041a4 <memmove>
  4037c4:	68a2      	ldr	r2, [r4, #8]
  4037c6:	6823      	ldr	r3, [r4, #0]
  4037c8:	ebcb 0202 	rsb	r2, fp, r2
  4037cc:	445b      	add	r3, fp
  4037ce:	ebb8 0807 	subs.w	r8, r8, r7
  4037d2:	60a2      	str	r2, [r4, #8]
  4037d4:	6023      	str	r3, [r4, #0]
  4037d6:	d1db      	bne.n	403790 <__sfvwrite_r+0x194>
  4037d8:	4621      	mov	r1, r4
  4037da:	9801      	ldr	r0, [sp, #4]
  4037dc:	f7ff fcc8 	bl	403170 <_fflush_r>
  4037e0:	2800      	cmp	r0, #0
  4037e2:	d1a5      	bne.n	403730 <__sfvwrite_r+0x134>
  4037e4:	f8cd 8008 	str.w	r8, [sp, #8]
  4037e8:	e7d2      	b.n	403790 <__sfvwrite_r+0x194>
  4037ea:	6820      	ldr	r0, [r4, #0]
  4037ec:	46b8      	mov	r8, r7
  4037ee:	46ba      	mov	sl, r7
  4037f0:	e75c      	b.n	4036ac <__sfvwrite_r+0xb0>
  4037f2:	464a      	mov	r2, r9
  4037f4:	210a      	movs	r1, #10
  4037f6:	4650      	mov	r0, sl
  4037f8:	f000 fbea 	bl	403fd0 <memchr>
  4037fc:	2800      	cmp	r0, #0
  4037fe:	d06f      	beq.n	4038e0 <__sfvwrite_r+0x2e4>
  403800:	3001      	adds	r0, #1
  403802:	2301      	movs	r3, #1
  403804:	ebca 0800 	rsb	r8, sl, r0
  403808:	9302      	str	r3, [sp, #8]
  40380a:	e7a5      	b.n	403758 <__sfvwrite_r+0x15c>
  40380c:	6962      	ldr	r2, [r4, #20]
  40380e:	6820      	ldr	r0, [r4, #0]
  403810:	6921      	ldr	r1, [r4, #16]
  403812:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403816:	ebc1 0a00 	rsb	sl, r1, r0
  40381a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40381e:	f10a 0001 	add.w	r0, sl, #1
  403822:	ea4f 0868 	mov.w	r8, r8, asr #1
  403826:	4438      	add	r0, r7
  403828:	4540      	cmp	r0, r8
  40382a:	4642      	mov	r2, r8
  40382c:	bf84      	itt	hi
  40382e:	4680      	movhi	r8, r0
  403830:	4642      	movhi	r2, r8
  403832:	055b      	lsls	r3, r3, #21
  403834:	d542      	bpl.n	4038bc <__sfvwrite_r+0x2c0>
  403836:	4611      	mov	r1, r2
  403838:	9801      	ldr	r0, [sp, #4]
  40383a:	f000 f911 	bl	403a60 <_malloc_r>
  40383e:	4683      	mov	fp, r0
  403840:	2800      	cmp	r0, #0
  403842:	d055      	beq.n	4038f0 <__sfvwrite_r+0x2f4>
  403844:	4652      	mov	r2, sl
  403846:	6921      	ldr	r1, [r4, #16]
  403848:	f000 fc12 	bl	404070 <memcpy>
  40384c:	89a3      	ldrh	r3, [r4, #12]
  40384e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403856:	81a3      	strh	r3, [r4, #12]
  403858:	ebca 0308 	rsb	r3, sl, r8
  40385c:	eb0b 000a 	add.w	r0, fp, sl
  403860:	f8c4 8014 	str.w	r8, [r4, #20]
  403864:	f8c4 b010 	str.w	fp, [r4, #16]
  403868:	6020      	str	r0, [r4, #0]
  40386a:	60a3      	str	r3, [r4, #8]
  40386c:	46b8      	mov	r8, r7
  40386e:	46ba      	mov	sl, r7
  403870:	e71c      	b.n	4036ac <__sfvwrite_r+0xb0>
  403872:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  403876:	42bb      	cmp	r3, r7
  403878:	bf28      	it	cs
  40387a:	463b      	movcs	r3, r7
  40387c:	464a      	mov	r2, r9
  40387e:	fb93 f3f1 	sdiv	r3, r3, r1
  403882:	9801      	ldr	r0, [sp, #4]
  403884:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403886:	fb01 f303 	mul.w	r3, r1, r3
  40388a:	69e1      	ldr	r1, [r4, #28]
  40388c:	47b0      	blx	r6
  40388e:	2800      	cmp	r0, #0
  403890:	f73f af18 	bgt.w	4036c4 <__sfvwrite_r+0xc8>
  403894:	e74c      	b.n	403730 <__sfvwrite_r+0x134>
  403896:	461a      	mov	r2, r3
  403898:	4651      	mov	r1, sl
  40389a:	9303      	str	r3, [sp, #12]
  40389c:	f000 fc82 	bl	4041a4 <memmove>
  4038a0:	6822      	ldr	r2, [r4, #0]
  4038a2:	9b03      	ldr	r3, [sp, #12]
  4038a4:	9801      	ldr	r0, [sp, #4]
  4038a6:	441a      	add	r2, r3
  4038a8:	6022      	str	r2, [r4, #0]
  4038aa:	4621      	mov	r1, r4
  4038ac:	f7ff fc60 	bl	403170 <_fflush_r>
  4038b0:	9b03      	ldr	r3, [sp, #12]
  4038b2:	2800      	cmp	r0, #0
  4038b4:	f47f af3c 	bne.w	403730 <__sfvwrite_r+0x134>
  4038b8:	461f      	mov	r7, r3
  4038ba:	e766      	b.n	40378a <__sfvwrite_r+0x18e>
  4038bc:	9801      	ldr	r0, [sp, #4]
  4038be:	f000 fcd9 	bl	404274 <_realloc_r>
  4038c2:	4683      	mov	fp, r0
  4038c4:	2800      	cmp	r0, #0
  4038c6:	d1c7      	bne.n	403858 <__sfvwrite_r+0x25c>
  4038c8:	9d01      	ldr	r5, [sp, #4]
  4038ca:	6921      	ldr	r1, [r4, #16]
  4038cc:	4628      	mov	r0, r5
  4038ce:	f7ff fdad 	bl	40342c <_free_r>
  4038d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038d6:	220c      	movs	r2, #12
  4038d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4038dc:	602a      	str	r2, [r5, #0]
  4038de:	e729      	b.n	403734 <__sfvwrite_r+0x138>
  4038e0:	2301      	movs	r3, #1
  4038e2:	f109 0801 	add.w	r8, r9, #1
  4038e6:	9302      	str	r3, [sp, #8]
  4038e8:	e736      	b.n	403758 <__sfvwrite_r+0x15c>
  4038ea:	f04f 30ff 	mov.w	r0, #4294967295
  4038ee:	e6b8      	b.n	403662 <__sfvwrite_r+0x66>
  4038f0:	9a01      	ldr	r2, [sp, #4]
  4038f2:	230c      	movs	r3, #12
  4038f4:	6013      	str	r3, [r2, #0]
  4038f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038fa:	e71b      	b.n	403734 <__sfvwrite_r+0x138>
  4038fc:	7ffffc00 	.word	0x7ffffc00

00403900 <_fwalk_reent>:
  403900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403904:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403908:	d01f      	beq.n	40394a <_fwalk_reent+0x4a>
  40390a:	4688      	mov	r8, r1
  40390c:	4606      	mov	r6, r0
  40390e:	f04f 0900 	mov.w	r9, #0
  403912:	687d      	ldr	r5, [r7, #4]
  403914:	68bc      	ldr	r4, [r7, #8]
  403916:	3d01      	subs	r5, #1
  403918:	d411      	bmi.n	40393e <_fwalk_reent+0x3e>
  40391a:	89a3      	ldrh	r3, [r4, #12]
  40391c:	2b01      	cmp	r3, #1
  40391e:	f105 35ff 	add.w	r5, r5, #4294967295
  403922:	d908      	bls.n	403936 <_fwalk_reent+0x36>
  403924:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403928:	3301      	adds	r3, #1
  40392a:	4621      	mov	r1, r4
  40392c:	4630      	mov	r0, r6
  40392e:	d002      	beq.n	403936 <_fwalk_reent+0x36>
  403930:	47c0      	blx	r8
  403932:	ea49 0900 	orr.w	r9, r9, r0
  403936:	1c6b      	adds	r3, r5, #1
  403938:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40393c:	d1ed      	bne.n	40391a <_fwalk_reent+0x1a>
  40393e:	683f      	ldr	r7, [r7, #0]
  403940:	2f00      	cmp	r7, #0
  403942:	d1e6      	bne.n	403912 <_fwalk_reent+0x12>
  403944:	4648      	mov	r0, r9
  403946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40394a:	46b9      	mov	r9, r7
  40394c:	4648      	mov	r0, r9
  40394e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403952:	bf00      	nop

00403954 <__locale_charset>:
  403954:	4800      	ldr	r0, [pc, #0]	; (403958 <__locale_charset+0x4>)
  403956:	4770      	bx	lr
  403958:	2000043c 	.word	0x2000043c

0040395c <__locale_mb_cur_max>:
  40395c:	4b01      	ldr	r3, [pc, #4]	; (403964 <__locale_mb_cur_max+0x8>)
  40395e:	6818      	ldr	r0, [r3, #0]
  403960:	4770      	bx	lr
  403962:	bf00      	nop
  403964:	2000045c 	.word	0x2000045c

00403968 <__swhatbuf_r>:
  403968:	b570      	push	{r4, r5, r6, lr}
  40396a:	460d      	mov	r5, r1
  40396c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403970:	2900      	cmp	r1, #0
  403972:	b090      	sub	sp, #64	; 0x40
  403974:	4614      	mov	r4, r2
  403976:	461e      	mov	r6, r3
  403978:	db14      	blt.n	4039a4 <__swhatbuf_r+0x3c>
  40397a:	aa01      	add	r2, sp, #4
  40397c:	f001 f878 	bl	404a70 <_fstat_r>
  403980:	2800      	cmp	r0, #0
  403982:	db0f      	blt.n	4039a4 <__swhatbuf_r+0x3c>
  403984:	9a02      	ldr	r2, [sp, #8]
  403986:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40398a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40398e:	fab2 f282 	clz	r2, r2
  403992:	0952      	lsrs	r2, r2, #5
  403994:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403998:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40399c:	6032      	str	r2, [r6, #0]
  40399e:	6023      	str	r3, [r4, #0]
  4039a0:	b010      	add	sp, #64	; 0x40
  4039a2:	bd70      	pop	{r4, r5, r6, pc}
  4039a4:	89a8      	ldrh	r0, [r5, #12]
  4039a6:	f000 0080 	and.w	r0, r0, #128	; 0x80
  4039aa:	b282      	uxth	r2, r0
  4039ac:	2000      	movs	r0, #0
  4039ae:	6030      	str	r0, [r6, #0]
  4039b0:	b11a      	cbz	r2, 4039ba <__swhatbuf_r+0x52>
  4039b2:	2340      	movs	r3, #64	; 0x40
  4039b4:	6023      	str	r3, [r4, #0]
  4039b6:	b010      	add	sp, #64	; 0x40
  4039b8:	bd70      	pop	{r4, r5, r6, pc}
  4039ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4039be:	4610      	mov	r0, r2
  4039c0:	6023      	str	r3, [r4, #0]
  4039c2:	b010      	add	sp, #64	; 0x40
  4039c4:	bd70      	pop	{r4, r5, r6, pc}
  4039c6:	bf00      	nop

004039c8 <__smakebuf_r>:
  4039c8:	898a      	ldrh	r2, [r1, #12]
  4039ca:	0792      	lsls	r2, r2, #30
  4039cc:	460b      	mov	r3, r1
  4039ce:	d506      	bpl.n	4039de <__smakebuf_r+0x16>
  4039d0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4039d4:	2101      	movs	r1, #1
  4039d6:	601a      	str	r2, [r3, #0]
  4039d8:	611a      	str	r2, [r3, #16]
  4039da:	6159      	str	r1, [r3, #20]
  4039dc:	4770      	bx	lr
  4039de:	b5f0      	push	{r4, r5, r6, r7, lr}
  4039e0:	b083      	sub	sp, #12
  4039e2:	ab01      	add	r3, sp, #4
  4039e4:	466a      	mov	r2, sp
  4039e6:	460c      	mov	r4, r1
  4039e8:	4605      	mov	r5, r0
  4039ea:	f7ff ffbd 	bl	403968 <__swhatbuf_r>
  4039ee:	9900      	ldr	r1, [sp, #0]
  4039f0:	4606      	mov	r6, r0
  4039f2:	4628      	mov	r0, r5
  4039f4:	f000 f834 	bl	403a60 <_malloc_r>
  4039f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039fc:	b1d0      	cbz	r0, 403a34 <__smakebuf_r+0x6c>
  4039fe:	9a01      	ldr	r2, [sp, #4]
  403a00:	4f12      	ldr	r7, [pc, #72]	; (403a4c <__smakebuf_r+0x84>)
  403a02:	9900      	ldr	r1, [sp, #0]
  403a04:	63ef      	str	r7, [r5, #60]	; 0x3c
  403a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403a0a:	81a3      	strh	r3, [r4, #12]
  403a0c:	6020      	str	r0, [r4, #0]
  403a0e:	6120      	str	r0, [r4, #16]
  403a10:	6161      	str	r1, [r4, #20]
  403a12:	b91a      	cbnz	r2, 403a1c <__smakebuf_r+0x54>
  403a14:	4333      	orrs	r3, r6
  403a16:	81a3      	strh	r3, [r4, #12]
  403a18:	b003      	add	sp, #12
  403a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403a1c:	4628      	mov	r0, r5
  403a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403a22:	f001 f839 	bl	404a98 <_isatty_r>
  403a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a2a:	2800      	cmp	r0, #0
  403a2c:	d0f2      	beq.n	403a14 <__smakebuf_r+0x4c>
  403a2e:	f043 0301 	orr.w	r3, r3, #1
  403a32:	e7ef      	b.n	403a14 <__smakebuf_r+0x4c>
  403a34:	059a      	lsls	r2, r3, #22
  403a36:	d4ef      	bmi.n	403a18 <__smakebuf_r+0x50>
  403a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403a3c:	f043 0302 	orr.w	r3, r3, #2
  403a40:	2101      	movs	r1, #1
  403a42:	81a3      	strh	r3, [r4, #12]
  403a44:	6022      	str	r2, [r4, #0]
  403a46:	6122      	str	r2, [r4, #16]
  403a48:	6161      	str	r1, [r4, #20]
  403a4a:	e7e5      	b.n	403a18 <__smakebuf_r+0x50>
  403a4c:	0040319d 	.word	0x0040319d

00403a50 <malloc>:
  403a50:	4b02      	ldr	r3, [pc, #8]	; (403a5c <malloc+0xc>)
  403a52:	4601      	mov	r1, r0
  403a54:	6818      	ldr	r0, [r3, #0]
  403a56:	f000 b803 	b.w	403a60 <_malloc_r>
  403a5a:	bf00      	nop
  403a5c:	20000438 	.word	0x20000438

00403a60 <_malloc_r>:
  403a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a64:	f101 050b 	add.w	r5, r1, #11
  403a68:	2d16      	cmp	r5, #22
  403a6a:	b083      	sub	sp, #12
  403a6c:	4606      	mov	r6, r0
  403a6e:	f240 809f 	bls.w	403bb0 <_malloc_r+0x150>
  403a72:	f035 0507 	bics.w	r5, r5, #7
  403a76:	f100 80bf 	bmi.w	403bf8 <_malloc_r+0x198>
  403a7a:	42a9      	cmp	r1, r5
  403a7c:	f200 80bc 	bhi.w	403bf8 <_malloc_r+0x198>
  403a80:	f000 fbf4 	bl	40426c <__malloc_lock>
  403a84:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  403a88:	f0c0 829c 	bcc.w	403fc4 <_malloc_r+0x564>
  403a8c:	0a6b      	lsrs	r3, r5, #9
  403a8e:	f000 80ba 	beq.w	403c06 <_malloc_r+0x1a6>
  403a92:	2b04      	cmp	r3, #4
  403a94:	f200 8183 	bhi.w	403d9e <_malloc_r+0x33e>
  403a98:	09a8      	lsrs	r0, r5, #6
  403a9a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  403a9e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403aa2:	3038      	adds	r0, #56	; 0x38
  403aa4:	4fc4      	ldr	r7, [pc, #784]	; (403db8 <_malloc_r+0x358>)
  403aa6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403aaa:	f1a3 0108 	sub.w	r1, r3, #8
  403aae:	685c      	ldr	r4, [r3, #4]
  403ab0:	42a1      	cmp	r1, r4
  403ab2:	d107      	bne.n	403ac4 <_malloc_r+0x64>
  403ab4:	e0ac      	b.n	403c10 <_malloc_r+0x1b0>
  403ab6:	2a00      	cmp	r2, #0
  403ab8:	f280 80ac 	bge.w	403c14 <_malloc_r+0x1b4>
  403abc:	68e4      	ldr	r4, [r4, #12]
  403abe:	42a1      	cmp	r1, r4
  403ac0:	f000 80a6 	beq.w	403c10 <_malloc_r+0x1b0>
  403ac4:	6863      	ldr	r3, [r4, #4]
  403ac6:	f023 0303 	bic.w	r3, r3, #3
  403aca:	1b5a      	subs	r2, r3, r5
  403acc:	2a0f      	cmp	r2, #15
  403ace:	ddf2      	ble.n	403ab6 <_malloc_r+0x56>
  403ad0:	49b9      	ldr	r1, [pc, #740]	; (403db8 <_malloc_r+0x358>)
  403ad2:	693c      	ldr	r4, [r7, #16]
  403ad4:	f101 0e08 	add.w	lr, r1, #8
  403ad8:	4574      	cmp	r4, lr
  403ada:	f000 81b3 	beq.w	403e44 <_malloc_r+0x3e4>
  403ade:	6863      	ldr	r3, [r4, #4]
  403ae0:	f023 0303 	bic.w	r3, r3, #3
  403ae4:	1b5a      	subs	r2, r3, r5
  403ae6:	2a0f      	cmp	r2, #15
  403ae8:	f300 8199 	bgt.w	403e1e <_malloc_r+0x3be>
  403aec:	2a00      	cmp	r2, #0
  403aee:	f8c1 e014 	str.w	lr, [r1, #20]
  403af2:	f8c1 e010 	str.w	lr, [r1, #16]
  403af6:	f280 809e 	bge.w	403c36 <_malloc_r+0x1d6>
  403afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403afe:	f080 8167 	bcs.w	403dd0 <_malloc_r+0x370>
  403b02:	08db      	lsrs	r3, r3, #3
  403b04:	f103 0c01 	add.w	ip, r3, #1
  403b08:	2201      	movs	r2, #1
  403b0a:	109b      	asrs	r3, r3, #2
  403b0c:	fa02 f303 	lsl.w	r3, r2, r3
  403b10:	684a      	ldr	r2, [r1, #4]
  403b12:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  403b16:	f8c4 8008 	str.w	r8, [r4, #8]
  403b1a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  403b1e:	431a      	orrs	r2, r3
  403b20:	f1a9 0308 	sub.w	r3, r9, #8
  403b24:	60e3      	str	r3, [r4, #12]
  403b26:	604a      	str	r2, [r1, #4]
  403b28:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  403b2c:	f8c8 400c 	str.w	r4, [r8, #12]
  403b30:	1083      	asrs	r3, r0, #2
  403b32:	2401      	movs	r4, #1
  403b34:	409c      	lsls	r4, r3
  403b36:	4294      	cmp	r4, r2
  403b38:	f200 808a 	bhi.w	403c50 <_malloc_r+0x1f0>
  403b3c:	4214      	tst	r4, r2
  403b3e:	d106      	bne.n	403b4e <_malloc_r+0xee>
  403b40:	f020 0003 	bic.w	r0, r0, #3
  403b44:	0064      	lsls	r4, r4, #1
  403b46:	4214      	tst	r4, r2
  403b48:	f100 0004 	add.w	r0, r0, #4
  403b4c:	d0fa      	beq.n	403b44 <_malloc_r+0xe4>
  403b4e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403b52:	46cc      	mov	ip, r9
  403b54:	4680      	mov	r8, r0
  403b56:	f8dc 100c 	ldr.w	r1, [ip, #12]
  403b5a:	458c      	cmp	ip, r1
  403b5c:	d107      	bne.n	403b6e <_malloc_r+0x10e>
  403b5e:	e173      	b.n	403e48 <_malloc_r+0x3e8>
  403b60:	2a00      	cmp	r2, #0
  403b62:	f280 8181 	bge.w	403e68 <_malloc_r+0x408>
  403b66:	68c9      	ldr	r1, [r1, #12]
  403b68:	458c      	cmp	ip, r1
  403b6a:	f000 816d 	beq.w	403e48 <_malloc_r+0x3e8>
  403b6e:	684b      	ldr	r3, [r1, #4]
  403b70:	f023 0303 	bic.w	r3, r3, #3
  403b74:	1b5a      	subs	r2, r3, r5
  403b76:	2a0f      	cmp	r2, #15
  403b78:	ddf2      	ble.n	403b60 <_malloc_r+0x100>
  403b7a:	460c      	mov	r4, r1
  403b7c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403b80:	f854 8f08 	ldr.w	r8, [r4, #8]!
  403b84:	194b      	adds	r3, r1, r5
  403b86:	f045 0501 	orr.w	r5, r5, #1
  403b8a:	604d      	str	r5, [r1, #4]
  403b8c:	f042 0101 	orr.w	r1, r2, #1
  403b90:	f8c8 c00c 	str.w	ip, [r8, #12]
  403b94:	4630      	mov	r0, r6
  403b96:	f8cc 8008 	str.w	r8, [ip, #8]
  403b9a:	617b      	str	r3, [r7, #20]
  403b9c:	613b      	str	r3, [r7, #16]
  403b9e:	f8c3 e00c 	str.w	lr, [r3, #12]
  403ba2:	f8c3 e008 	str.w	lr, [r3, #8]
  403ba6:	6059      	str	r1, [r3, #4]
  403ba8:	509a      	str	r2, [r3, r2]
  403baa:	f000 fb61 	bl	404270 <__malloc_unlock>
  403bae:	e01f      	b.n	403bf0 <_malloc_r+0x190>
  403bb0:	2910      	cmp	r1, #16
  403bb2:	d821      	bhi.n	403bf8 <_malloc_r+0x198>
  403bb4:	f000 fb5a 	bl	40426c <__malloc_lock>
  403bb8:	2510      	movs	r5, #16
  403bba:	2306      	movs	r3, #6
  403bbc:	2002      	movs	r0, #2
  403bbe:	4f7e      	ldr	r7, [pc, #504]	; (403db8 <_malloc_r+0x358>)
  403bc0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403bc4:	f1a3 0208 	sub.w	r2, r3, #8
  403bc8:	685c      	ldr	r4, [r3, #4]
  403bca:	4294      	cmp	r4, r2
  403bcc:	f000 8145 	beq.w	403e5a <_malloc_r+0x3fa>
  403bd0:	6863      	ldr	r3, [r4, #4]
  403bd2:	68e1      	ldr	r1, [r4, #12]
  403bd4:	68a5      	ldr	r5, [r4, #8]
  403bd6:	f023 0303 	bic.w	r3, r3, #3
  403bda:	4423      	add	r3, r4
  403bdc:	4630      	mov	r0, r6
  403bde:	685a      	ldr	r2, [r3, #4]
  403be0:	60e9      	str	r1, [r5, #12]
  403be2:	f042 0201 	orr.w	r2, r2, #1
  403be6:	608d      	str	r5, [r1, #8]
  403be8:	605a      	str	r2, [r3, #4]
  403bea:	f000 fb41 	bl	404270 <__malloc_unlock>
  403bee:	3408      	adds	r4, #8
  403bf0:	4620      	mov	r0, r4
  403bf2:	b003      	add	sp, #12
  403bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bf8:	2400      	movs	r4, #0
  403bfa:	230c      	movs	r3, #12
  403bfc:	4620      	mov	r0, r4
  403bfe:	6033      	str	r3, [r6, #0]
  403c00:	b003      	add	sp, #12
  403c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c06:	2380      	movs	r3, #128	; 0x80
  403c08:	f04f 0e40 	mov.w	lr, #64	; 0x40
  403c0c:	203f      	movs	r0, #63	; 0x3f
  403c0e:	e749      	b.n	403aa4 <_malloc_r+0x44>
  403c10:	4670      	mov	r0, lr
  403c12:	e75d      	b.n	403ad0 <_malloc_r+0x70>
  403c14:	4423      	add	r3, r4
  403c16:	68e1      	ldr	r1, [r4, #12]
  403c18:	685a      	ldr	r2, [r3, #4]
  403c1a:	68a5      	ldr	r5, [r4, #8]
  403c1c:	f042 0201 	orr.w	r2, r2, #1
  403c20:	60e9      	str	r1, [r5, #12]
  403c22:	4630      	mov	r0, r6
  403c24:	608d      	str	r5, [r1, #8]
  403c26:	605a      	str	r2, [r3, #4]
  403c28:	f000 fb22 	bl	404270 <__malloc_unlock>
  403c2c:	3408      	adds	r4, #8
  403c2e:	4620      	mov	r0, r4
  403c30:	b003      	add	sp, #12
  403c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c36:	4423      	add	r3, r4
  403c38:	4630      	mov	r0, r6
  403c3a:	685a      	ldr	r2, [r3, #4]
  403c3c:	f042 0201 	orr.w	r2, r2, #1
  403c40:	605a      	str	r2, [r3, #4]
  403c42:	f000 fb15 	bl	404270 <__malloc_unlock>
  403c46:	3408      	adds	r4, #8
  403c48:	4620      	mov	r0, r4
  403c4a:	b003      	add	sp, #12
  403c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c50:	68bc      	ldr	r4, [r7, #8]
  403c52:	6863      	ldr	r3, [r4, #4]
  403c54:	f023 0803 	bic.w	r8, r3, #3
  403c58:	45a8      	cmp	r8, r5
  403c5a:	d304      	bcc.n	403c66 <_malloc_r+0x206>
  403c5c:	ebc5 0308 	rsb	r3, r5, r8
  403c60:	2b0f      	cmp	r3, #15
  403c62:	f300 808c 	bgt.w	403d7e <_malloc_r+0x31e>
  403c66:	4b55      	ldr	r3, [pc, #340]	; (403dbc <_malloc_r+0x35c>)
  403c68:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403dcc <_malloc_r+0x36c>
  403c6c:	681a      	ldr	r2, [r3, #0]
  403c6e:	f8d9 3000 	ldr.w	r3, [r9]
  403c72:	3301      	adds	r3, #1
  403c74:	442a      	add	r2, r5
  403c76:	eb04 0a08 	add.w	sl, r4, r8
  403c7a:	f000 8160 	beq.w	403f3e <_malloc_r+0x4de>
  403c7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  403c82:	320f      	adds	r2, #15
  403c84:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403c88:	f022 020f 	bic.w	r2, r2, #15
  403c8c:	4611      	mov	r1, r2
  403c8e:	4630      	mov	r0, r6
  403c90:	9201      	str	r2, [sp, #4]
  403c92:	f000 fcdf 	bl	404654 <_sbrk_r>
  403c96:	f1b0 3fff 	cmp.w	r0, #4294967295
  403c9a:	4683      	mov	fp, r0
  403c9c:	9a01      	ldr	r2, [sp, #4]
  403c9e:	f000 8158 	beq.w	403f52 <_malloc_r+0x4f2>
  403ca2:	4582      	cmp	sl, r0
  403ca4:	f200 80fc 	bhi.w	403ea0 <_malloc_r+0x440>
  403ca8:	4b45      	ldr	r3, [pc, #276]	; (403dc0 <_malloc_r+0x360>)
  403caa:	6819      	ldr	r1, [r3, #0]
  403cac:	45da      	cmp	sl, fp
  403cae:	4411      	add	r1, r2
  403cb0:	6019      	str	r1, [r3, #0]
  403cb2:	f000 8153 	beq.w	403f5c <_malloc_r+0x4fc>
  403cb6:	f8d9 0000 	ldr.w	r0, [r9]
  403cba:	f8df e110 	ldr.w	lr, [pc, #272]	; 403dcc <_malloc_r+0x36c>
  403cbe:	3001      	adds	r0, #1
  403cc0:	bf1b      	ittet	ne
  403cc2:	ebca 0a0b 	rsbne	sl, sl, fp
  403cc6:	4451      	addne	r1, sl
  403cc8:	f8ce b000 	streq.w	fp, [lr]
  403ccc:	6019      	strne	r1, [r3, #0]
  403cce:	f01b 0107 	ands.w	r1, fp, #7
  403cd2:	f000 8117 	beq.w	403f04 <_malloc_r+0x4a4>
  403cd6:	f1c1 0008 	rsb	r0, r1, #8
  403cda:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403cde:	4483      	add	fp, r0
  403ce0:	3108      	adds	r1, #8
  403ce2:	445a      	add	r2, fp
  403ce4:	f3c2 020b 	ubfx	r2, r2, #0, #12
  403ce8:	ebc2 0901 	rsb	r9, r2, r1
  403cec:	4649      	mov	r1, r9
  403cee:	4630      	mov	r0, r6
  403cf0:	9301      	str	r3, [sp, #4]
  403cf2:	f000 fcaf 	bl	404654 <_sbrk_r>
  403cf6:	1c43      	adds	r3, r0, #1
  403cf8:	9b01      	ldr	r3, [sp, #4]
  403cfa:	f000 813f 	beq.w	403f7c <_malloc_r+0x51c>
  403cfe:	ebcb 0200 	rsb	r2, fp, r0
  403d02:	444a      	add	r2, r9
  403d04:	f042 0201 	orr.w	r2, r2, #1
  403d08:	6819      	ldr	r1, [r3, #0]
  403d0a:	f8c7 b008 	str.w	fp, [r7, #8]
  403d0e:	4449      	add	r1, r9
  403d10:	42bc      	cmp	r4, r7
  403d12:	f8cb 2004 	str.w	r2, [fp, #4]
  403d16:	6019      	str	r1, [r3, #0]
  403d18:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 403dc0 <_malloc_r+0x360>
  403d1c:	d016      	beq.n	403d4c <_malloc_r+0x2ec>
  403d1e:	f1b8 0f0f 	cmp.w	r8, #15
  403d22:	f240 80fd 	bls.w	403f20 <_malloc_r+0x4c0>
  403d26:	6862      	ldr	r2, [r4, #4]
  403d28:	f1a8 030c 	sub.w	r3, r8, #12
  403d2c:	f023 0307 	bic.w	r3, r3, #7
  403d30:	18e0      	adds	r0, r4, r3
  403d32:	f002 0201 	and.w	r2, r2, #1
  403d36:	f04f 0e05 	mov.w	lr, #5
  403d3a:	431a      	orrs	r2, r3
  403d3c:	2b0f      	cmp	r3, #15
  403d3e:	6062      	str	r2, [r4, #4]
  403d40:	f8c0 e004 	str.w	lr, [r0, #4]
  403d44:	f8c0 e008 	str.w	lr, [r0, #8]
  403d48:	f200 811c 	bhi.w	403f84 <_malloc_r+0x524>
  403d4c:	4b1d      	ldr	r3, [pc, #116]	; (403dc4 <_malloc_r+0x364>)
  403d4e:	68bc      	ldr	r4, [r7, #8]
  403d50:	681a      	ldr	r2, [r3, #0]
  403d52:	4291      	cmp	r1, r2
  403d54:	bf88      	it	hi
  403d56:	6019      	strhi	r1, [r3, #0]
  403d58:	4b1b      	ldr	r3, [pc, #108]	; (403dc8 <_malloc_r+0x368>)
  403d5a:	681a      	ldr	r2, [r3, #0]
  403d5c:	4291      	cmp	r1, r2
  403d5e:	6862      	ldr	r2, [r4, #4]
  403d60:	bf88      	it	hi
  403d62:	6019      	strhi	r1, [r3, #0]
  403d64:	f022 0203 	bic.w	r2, r2, #3
  403d68:	4295      	cmp	r5, r2
  403d6a:	eba2 0305 	sub.w	r3, r2, r5
  403d6e:	d801      	bhi.n	403d74 <_malloc_r+0x314>
  403d70:	2b0f      	cmp	r3, #15
  403d72:	dc04      	bgt.n	403d7e <_malloc_r+0x31e>
  403d74:	4630      	mov	r0, r6
  403d76:	f000 fa7b 	bl	404270 <__malloc_unlock>
  403d7a:	2400      	movs	r4, #0
  403d7c:	e738      	b.n	403bf0 <_malloc_r+0x190>
  403d7e:	1962      	adds	r2, r4, r5
  403d80:	f043 0301 	orr.w	r3, r3, #1
  403d84:	f045 0501 	orr.w	r5, r5, #1
  403d88:	6065      	str	r5, [r4, #4]
  403d8a:	4630      	mov	r0, r6
  403d8c:	60ba      	str	r2, [r7, #8]
  403d8e:	6053      	str	r3, [r2, #4]
  403d90:	f000 fa6e 	bl	404270 <__malloc_unlock>
  403d94:	3408      	adds	r4, #8
  403d96:	4620      	mov	r0, r4
  403d98:	b003      	add	sp, #12
  403d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d9e:	2b14      	cmp	r3, #20
  403da0:	d971      	bls.n	403e86 <_malloc_r+0x426>
  403da2:	2b54      	cmp	r3, #84	; 0x54
  403da4:	f200 80a4 	bhi.w	403ef0 <_malloc_r+0x490>
  403da8:	0b28      	lsrs	r0, r5, #12
  403daa:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  403dae:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403db2:	306e      	adds	r0, #110	; 0x6e
  403db4:	e676      	b.n	403aa4 <_malloc_r+0x44>
  403db6:	bf00      	nop
  403db8:	20000460 	.word	0x20000460
  403dbc:	20000914 	.word	0x20000914
  403dc0:	20000918 	.word	0x20000918
  403dc4:	20000910 	.word	0x20000910
  403dc8:	2000090c 	.word	0x2000090c
  403dcc:	2000086c 	.word	0x2000086c
  403dd0:	0a5a      	lsrs	r2, r3, #9
  403dd2:	2a04      	cmp	r2, #4
  403dd4:	d95e      	bls.n	403e94 <_malloc_r+0x434>
  403dd6:	2a14      	cmp	r2, #20
  403dd8:	f200 80b3 	bhi.w	403f42 <_malloc_r+0x4e2>
  403ddc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403de0:	0049      	lsls	r1, r1, #1
  403de2:	325b      	adds	r2, #91	; 0x5b
  403de4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  403de8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  403dec:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 403fcc <_malloc_r+0x56c>
  403df0:	f1ac 0c08 	sub.w	ip, ip, #8
  403df4:	458c      	cmp	ip, r1
  403df6:	f000 8088 	beq.w	403f0a <_malloc_r+0x4aa>
  403dfa:	684a      	ldr	r2, [r1, #4]
  403dfc:	f022 0203 	bic.w	r2, r2, #3
  403e00:	4293      	cmp	r3, r2
  403e02:	d202      	bcs.n	403e0a <_malloc_r+0x3aa>
  403e04:	6889      	ldr	r1, [r1, #8]
  403e06:	458c      	cmp	ip, r1
  403e08:	d1f7      	bne.n	403dfa <_malloc_r+0x39a>
  403e0a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403e0e:	687a      	ldr	r2, [r7, #4]
  403e10:	f8c4 c00c 	str.w	ip, [r4, #12]
  403e14:	60a1      	str	r1, [r4, #8]
  403e16:	f8cc 4008 	str.w	r4, [ip, #8]
  403e1a:	60cc      	str	r4, [r1, #12]
  403e1c:	e688      	b.n	403b30 <_malloc_r+0xd0>
  403e1e:	1963      	adds	r3, r4, r5
  403e20:	f042 0701 	orr.w	r7, r2, #1
  403e24:	f045 0501 	orr.w	r5, r5, #1
  403e28:	6065      	str	r5, [r4, #4]
  403e2a:	4630      	mov	r0, r6
  403e2c:	614b      	str	r3, [r1, #20]
  403e2e:	610b      	str	r3, [r1, #16]
  403e30:	f8c3 e00c 	str.w	lr, [r3, #12]
  403e34:	f8c3 e008 	str.w	lr, [r3, #8]
  403e38:	605f      	str	r7, [r3, #4]
  403e3a:	509a      	str	r2, [r3, r2]
  403e3c:	3408      	adds	r4, #8
  403e3e:	f000 fa17 	bl	404270 <__malloc_unlock>
  403e42:	e6d5      	b.n	403bf0 <_malloc_r+0x190>
  403e44:	684a      	ldr	r2, [r1, #4]
  403e46:	e673      	b.n	403b30 <_malloc_r+0xd0>
  403e48:	f108 0801 	add.w	r8, r8, #1
  403e4c:	f018 0f03 	tst.w	r8, #3
  403e50:	f10c 0c08 	add.w	ip, ip, #8
  403e54:	f47f ae7f 	bne.w	403b56 <_malloc_r+0xf6>
  403e58:	e030      	b.n	403ebc <_malloc_r+0x45c>
  403e5a:	68dc      	ldr	r4, [r3, #12]
  403e5c:	42a3      	cmp	r3, r4
  403e5e:	bf08      	it	eq
  403e60:	3002      	addeq	r0, #2
  403e62:	f43f ae35 	beq.w	403ad0 <_malloc_r+0x70>
  403e66:	e6b3      	b.n	403bd0 <_malloc_r+0x170>
  403e68:	440b      	add	r3, r1
  403e6a:	460c      	mov	r4, r1
  403e6c:	685a      	ldr	r2, [r3, #4]
  403e6e:	68c9      	ldr	r1, [r1, #12]
  403e70:	f854 5f08 	ldr.w	r5, [r4, #8]!
  403e74:	f042 0201 	orr.w	r2, r2, #1
  403e78:	605a      	str	r2, [r3, #4]
  403e7a:	4630      	mov	r0, r6
  403e7c:	60e9      	str	r1, [r5, #12]
  403e7e:	608d      	str	r5, [r1, #8]
  403e80:	f000 f9f6 	bl	404270 <__malloc_unlock>
  403e84:	e6b4      	b.n	403bf0 <_malloc_r+0x190>
  403e86:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  403e8a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  403e8e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403e92:	e607      	b.n	403aa4 <_malloc_r+0x44>
  403e94:	099a      	lsrs	r2, r3, #6
  403e96:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403e9a:	0049      	lsls	r1, r1, #1
  403e9c:	3238      	adds	r2, #56	; 0x38
  403e9e:	e7a1      	b.n	403de4 <_malloc_r+0x384>
  403ea0:	42bc      	cmp	r4, r7
  403ea2:	4b4a      	ldr	r3, [pc, #296]	; (403fcc <_malloc_r+0x56c>)
  403ea4:	f43f af00 	beq.w	403ca8 <_malloc_r+0x248>
  403ea8:	689c      	ldr	r4, [r3, #8]
  403eaa:	6862      	ldr	r2, [r4, #4]
  403eac:	f022 0203 	bic.w	r2, r2, #3
  403eb0:	e75a      	b.n	403d68 <_malloc_r+0x308>
  403eb2:	f859 3908 	ldr.w	r3, [r9], #-8
  403eb6:	4599      	cmp	r9, r3
  403eb8:	f040 8082 	bne.w	403fc0 <_malloc_r+0x560>
  403ebc:	f010 0f03 	tst.w	r0, #3
  403ec0:	f100 30ff 	add.w	r0, r0, #4294967295
  403ec4:	d1f5      	bne.n	403eb2 <_malloc_r+0x452>
  403ec6:	687b      	ldr	r3, [r7, #4]
  403ec8:	ea23 0304 	bic.w	r3, r3, r4
  403ecc:	607b      	str	r3, [r7, #4]
  403ece:	0064      	lsls	r4, r4, #1
  403ed0:	429c      	cmp	r4, r3
  403ed2:	f63f aebd 	bhi.w	403c50 <_malloc_r+0x1f0>
  403ed6:	2c00      	cmp	r4, #0
  403ed8:	f43f aeba 	beq.w	403c50 <_malloc_r+0x1f0>
  403edc:	421c      	tst	r4, r3
  403ede:	4640      	mov	r0, r8
  403ee0:	f47f ae35 	bne.w	403b4e <_malloc_r+0xee>
  403ee4:	0064      	lsls	r4, r4, #1
  403ee6:	421c      	tst	r4, r3
  403ee8:	f100 0004 	add.w	r0, r0, #4
  403eec:	d0fa      	beq.n	403ee4 <_malloc_r+0x484>
  403eee:	e62e      	b.n	403b4e <_malloc_r+0xee>
  403ef0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403ef4:	d818      	bhi.n	403f28 <_malloc_r+0x4c8>
  403ef6:	0be8      	lsrs	r0, r5, #15
  403ef8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  403efc:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403f00:	3077      	adds	r0, #119	; 0x77
  403f02:	e5cf      	b.n	403aa4 <_malloc_r+0x44>
  403f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403f08:	e6eb      	b.n	403ce2 <_malloc_r+0x282>
  403f0a:	2101      	movs	r1, #1
  403f0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403f10:	1092      	asrs	r2, r2, #2
  403f12:	fa01 f202 	lsl.w	r2, r1, r2
  403f16:	431a      	orrs	r2, r3
  403f18:	f8c8 2004 	str.w	r2, [r8, #4]
  403f1c:	4661      	mov	r1, ip
  403f1e:	e777      	b.n	403e10 <_malloc_r+0x3b0>
  403f20:	2301      	movs	r3, #1
  403f22:	f8cb 3004 	str.w	r3, [fp, #4]
  403f26:	e725      	b.n	403d74 <_malloc_r+0x314>
  403f28:	f240 5254 	movw	r2, #1364	; 0x554
  403f2c:	4293      	cmp	r3, r2
  403f2e:	d820      	bhi.n	403f72 <_malloc_r+0x512>
  403f30:	0ca8      	lsrs	r0, r5, #18
  403f32:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  403f36:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403f3a:	307c      	adds	r0, #124	; 0x7c
  403f3c:	e5b2      	b.n	403aa4 <_malloc_r+0x44>
  403f3e:	3210      	adds	r2, #16
  403f40:	e6a4      	b.n	403c8c <_malloc_r+0x22c>
  403f42:	2a54      	cmp	r2, #84	; 0x54
  403f44:	d826      	bhi.n	403f94 <_malloc_r+0x534>
  403f46:	0b1a      	lsrs	r2, r3, #12
  403f48:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403f4c:	0049      	lsls	r1, r1, #1
  403f4e:	326e      	adds	r2, #110	; 0x6e
  403f50:	e748      	b.n	403de4 <_malloc_r+0x384>
  403f52:	68bc      	ldr	r4, [r7, #8]
  403f54:	6862      	ldr	r2, [r4, #4]
  403f56:	f022 0203 	bic.w	r2, r2, #3
  403f5a:	e705      	b.n	403d68 <_malloc_r+0x308>
  403f5c:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403f60:	2800      	cmp	r0, #0
  403f62:	f47f aea8 	bne.w	403cb6 <_malloc_r+0x256>
  403f66:	4442      	add	r2, r8
  403f68:	68bb      	ldr	r3, [r7, #8]
  403f6a:	f042 0201 	orr.w	r2, r2, #1
  403f6e:	605a      	str	r2, [r3, #4]
  403f70:	e6ec      	b.n	403d4c <_malloc_r+0x2ec>
  403f72:	23fe      	movs	r3, #254	; 0xfe
  403f74:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  403f78:	207e      	movs	r0, #126	; 0x7e
  403f7a:	e593      	b.n	403aa4 <_malloc_r+0x44>
  403f7c:	2201      	movs	r2, #1
  403f7e:	f04f 0900 	mov.w	r9, #0
  403f82:	e6c1      	b.n	403d08 <_malloc_r+0x2a8>
  403f84:	f104 0108 	add.w	r1, r4, #8
  403f88:	4630      	mov	r0, r6
  403f8a:	f7ff fa4f 	bl	40342c <_free_r>
  403f8e:	f8d9 1000 	ldr.w	r1, [r9]
  403f92:	e6db      	b.n	403d4c <_malloc_r+0x2ec>
  403f94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403f98:	d805      	bhi.n	403fa6 <_malloc_r+0x546>
  403f9a:	0bda      	lsrs	r2, r3, #15
  403f9c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403fa0:	0049      	lsls	r1, r1, #1
  403fa2:	3277      	adds	r2, #119	; 0x77
  403fa4:	e71e      	b.n	403de4 <_malloc_r+0x384>
  403fa6:	f240 5154 	movw	r1, #1364	; 0x554
  403faa:	428a      	cmp	r2, r1
  403fac:	d805      	bhi.n	403fba <_malloc_r+0x55a>
  403fae:	0c9a      	lsrs	r2, r3, #18
  403fb0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403fb4:	0049      	lsls	r1, r1, #1
  403fb6:	327c      	adds	r2, #124	; 0x7c
  403fb8:	e714      	b.n	403de4 <_malloc_r+0x384>
  403fba:	21fe      	movs	r1, #254	; 0xfe
  403fbc:	227e      	movs	r2, #126	; 0x7e
  403fbe:	e711      	b.n	403de4 <_malloc_r+0x384>
  403fc0:	687b      	ldr	r3, [r7, #4]
  403fc2:	e784      	b.n	403ece <_malloc_r+0x46e>
  403fc4:	08e8      	lsrs	r0, r5, #3
  403fc6:	1c43      	adds	r3, r0, #1
  403fc8:	005b      	lsls	r3, r3, #1
  403fca:	e5f8      	b.n	403bbe <_malloc_r+0x15e>
  403fcc:	20000460 	.word	0x20000460

00403fd0 <memchr>:
  403fd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403fd4:	2a10      	cmp	r2, #16
  403fd6:	db2b      	blt.n	404030 <memchr+0x60>
  403fd8:	f010 0f07 	tst.w	r0, #7
  403fdc:	d008      	beq.n	403ff0 <memchr+0x20>
  403fde:	f810 3b01 	ldrb.w	r3, [r0], #1
  403fe2:	3a01      	subs	r2, #1
  403fe4:	428b      	cmp	r3, r1
  403fe6:	d02d      	beq.n	404044 <memchr+0x74>
  403fe8:	f010 0f07 	tst.w	r0, #7
  403fec:	b342      	cbz	r2, 404040 <memchr+0x70>
  403fee:	d1f6      	bne.n	403fde <memchr+0xe>
  403ff0:	b4f0      	push	{r4, r5, r6, r7}
  403ff2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403ff6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403ffa:	f022 0407 	bic.w	r4, r2, #7
  403ffe:	f07f 0700 	mvns.w	r7, #0
  404002:	2300      	movs	r3, #0
  404004:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404008:	3c08      	subs	r4, #8
  40400a:	ea85 0501 	eor.w	r5, r5, r1
  40400e:	ea86 0601 	eor.w	r6, r6, r1
  404012:	fa85 f547 	uadd8	r5, r5, r7
  404016:	faa3 f587 	sel	r5, r3, r7
  40401a:	fa86 f647 	uadd8	r6, r6, r7
  40401e:	faa5 f687 	sel	r6, r5, r7
  404022:	b98e      	cbnz	r6, 404048 <memchr+0x78>
  404024:	d1ee      	bne.n	404004 <memchr+0x34>
  404026:	bcf0      	pop	{r4, r5, r6, r7}
  404028:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40402c:	f002 0207 	and.w	r2, r2, #7
  404030:	b132      	cbz	r2, 404040 <memchr+0x70>
  404032:	f810 3b01 	ldrb.w	r3, [r0], #1
  404036:	3a01      	subs	r2, #1
  404038:	ea83 0301 	eor.w	r3, r3, r1
  40403c:	b113      	cbz	r3, 404044 <memchr+0x74>
  40403e:	d1f8      	bne.n	404032 <memchr+0x62>
  404040:	2000      	movs	r0, #0
  404042:	4770      	bx	lr
  404044:	3801      	subs	r0, #1
  404046:	4770      	bx	lr
  404048:	2d00      	cmp	r5, #0
  40404a:	bf06      	itte	eq
  40404c:	4635      	moveq	r5, r6
  40404e:	3803      	subeq	r0, #3
  404050:	3807      	subne	r0, #7
  404052:	f015 0f01 	tst.w	r5, #1
  404056:	d107      	bne.n	404068 <memchr+0x98>
  404058:	3001      	adds	r0, #1
  40405a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40405e:	bf02      	ittt	eq
  404060:	3001      	addeq	r0, #1
  404062:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404066:	3001      	addeq	r0, #1
  404068:	bcf0      	pop	{r4, r5, r6, r7}
  40406a:	3801      	subs	r0, #1
  40406c:	4770      	bx	lr
  40406e:	bf00      	nop

00404070 <memcpy>:
  404070:	4684      	mov	ip, r0
  404072:	ea41 0300 	orr.w	r3, r1, r0
  404076:	f013 0303 	ands.w	r3, r3, #3
  40407a:	d16d      	bne.n	404158 <memcpy+0xe8>
  40407c:	3a40      	subs	r2, #64	; 0x40
  40407e:	d341      	bcc.n	404104 <memcpy+0x94>
  404080:	f851 3b04 	ldr.w	r3, [r1], #4
  404084:	f840 3b04 	str.w	r3, [r0], #4
  404088:	f851 3b04 	ldr.w	r3, [r1], #4
  40408c:	f840 3b04 	str.w	r3, [r0], #4
  404090:	f851 3b04 	ldr.w	r3, [r1], #4
  404094:	f840 3b04 	str.w	r3, [r0], #4
  404098:	f851 3b04 	ldr.w	r3, [r1], #4
  40409c:	f840 3b04 	str.w	r3, [r0], #4
  4040a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040a4:	f840 3b04 	str.w	r3, [r0], #4
  4040a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040ac:	f840 3b04 	str.w	r3, [r0], #4
  4040b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040b4:	f840 3b04 	str.w	r3, [r0], #4
  4040b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040bc:	f840 3b04 	str.w	r3, [r0], #4
  4040c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040c4:	f840 3b04 	str.w	r3, [r0], #4
  4040c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040cc:	f840 3b04 	str.w	r3, [r0], #4
  4040d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040d4:	f840 3b04 	str.w	r3, [r0], #4
  4040d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040dc:	f840 3b04 	str.w	r3, [r0], #4
  4040e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040e4:	f840 3b04 	str.w	r3, [r0], #4
  4040e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040ec:	f840 3b04 	str.w	r3, [r0], #4
  4040f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040f4:	f840 3b04 	str.w	r3, [r0], #4
  4040f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040fc:	f840 3b04 	str.w	r3, [r0], #4
  404100:	3a40      	subs	r2, #64	; 0x40
  404102:	d2bd      	bcs.n	404080 <memcpy+0x10>
  404104:	3230      	adds	r2, #48	; 0x30
  404106:	d311      	bcc.n	40412c <memcpy+0xbc>
  404108:	f851 3b04 	ldr.w	r3, [r1], #4
  40410c:	f840 3b04 	str.w	r3, [r0], #4
  404110:	f851 3b04 	ldr.w	r3, [r1], #4
  404114:	f840 3b04 	str.w	r3, [r0], #4
  404118:	f851 3b04 	ldr.w	r3, [r1], #4
  40411c:	f840 3b04 	str.w	r3, [r0], #4
  404120:	f851 3b04 	ldr.w	r3, [r1], #4
  404124:	f840 3b04 	str.w	r3, [r0], #4
  404128:	3a10      	subs	r2, #16
  40412a:	d2ed      	bcs.n	404108 <memcpy+0x98>
  40412c:	320c      	adds	r2, #12
  40412e:	d305      	bcc.n	40413c <memcpy+0xcc>
  404130:	f851 3b04 	ldr.w	r3, [r1], #4
  404134:	f840 3b04 	str.w	r3, [r0], #4
  404138:	3a04      	subs	r2, #4
  40413a:	d2f9      	bcs.n	404130 <memcpy+0xc0>
  40413c:	3204      	adds	r2, #4
  40413e:	d008      	beq.n	404152 <memcpy+0xe2>
  404140:	07d2      	lsls	r2, r2, #31
  404142:	bf1c      	itt	ne
  404144:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404148:	f800 3b01 	strbne.w	r3, [r0], #1
  40414c:	d301      	bcc.n	404152 <memcpy+0xe2>
  40414e:	880b      	ldrh	r3, [r1, #0]
  404150:	8003      	strh	r3, [r0, #0]
  404152:	4660      	mov	r0, ip
  404154:	4770      	bx	lr
  404156:	bf00      	nop
  404158:	2a08      	cmp	r2, #8
  40415a:	d313      	bcc.n	404184 <memcpy+0x114>
  40415c:	078b      	lsls	r3, r1, #30
  40415e:	d08d      	beq.n	40407c <memcpy+0xc>
  404160:	f010 0303 	ands.w	r3, r0, #3
  404164:	d08a      	beq.n	40407c <memcpy+0xc>
  404166:	f1c3 0304 	rsb	r3, r3, #4
  40416a:	1ad2      	subs	r2, r2, r3
  40416c:	07db      	lsls	r3, r3, #31
  40416e:	bf1c      	itt	ne
  404170:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404174:	f800 3b01 	strbne.w	r3, [r0], #1
  404178:	d380      	bcc.n	40407c <memcpy+0xc>
  40417a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40417e:	f820 3b02 	strh.w	r3, [r0], #2
  404182:	e77b      	b.n	40407c <memcpy+0xc>
  404184:	3a04      	subs	r2, #4
  404186:	d3d9      	bcc.n	40413c <memcpy+0xcc>
  404188:	3a01      	subs	r2, #1
  40418a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40418e:	f800 3b01 	strb.w	r3, [r0], #1
  404192:	d2f9      	bcs.n	404188 <memcpy+0x118>
  404194:	780b      	ldrb	r3, [r1, #0]
  404196:	7003      	strb	r3, [r0, #0]
  404198:	784b      	ldrb	r3, [r1, #1]
  40419a:	7043      	strb	r3, [r0, #1]
  40419c:	788b      	ldrb	r3, [r1, #2]
  40419e:	7083      	strb	r3, [r0, #2]
  4041a0:	4660      	mov	r0, ip
  4041a2:	4770      	bx	lr

004041a4 <memmove>:
  4041a4:	4288      	cmp	r0, r1
  4041a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4041a8:	d90d      	bls.n	4041c6 <memmove+0x22>
  4041aa:	188b      	adds	r3, r1, r2
  4041ac:	4298      	cmp	r0, r3
  4041ae:	d20a      	bcs.n	4041c6 <memmove+0x22>
  4041b0:	1881      	adds	r1, r0, r2
  4041b2:	2a00      	cmp	r2, #0
  4041b4:	d051      	beq.n	40425a <memmove+0xb6>
  4041b6:	1a9a      	subs	r2, r3, r2
  4041b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4041bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4041c0:	4293      	cmp	r3, r2
  4041c2:	d1f9      	bne.n	4041b8 <memmove+0x14>
  4041c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4041c6:	2a0f      	cmp	r2, #15
  4041c8:	d948      	bls.n	40425c <memmove+0xb8>
  4041ca:	ea41 0300 	orr.w	r3, r1, r0
  4041ce:	079b      	lsls	r3, r3, #30
  4041d0:	d146      	bne.n	404260 <memmove+0xbc>
  4041d2:	f100 0410 	add.w	r4, r0, #16
  4041d6:	f101 0310 	add.w	r3, r1, #16
  4041da:	4615      	mov	r5, r2
  4041dc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4041e0:	f844 6c10 	str.w	r6, [r4, #-16]
  4041e4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4041e8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4041ec:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4041f0:	f844 6c08 	str.w	r6, [r4, #-8]
  4041f4:	3d10      	subs	r5, #16
  4041f6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4041fa:	f844 6c04 	str.w	r6, [r4, #-4]
  4041fe:	2d0f      	cmp	r5, #15
  404200:	f103 0310 	add.w	r3, r3, #16
  404204:	f104 0410 	add.w	r4, r4, #16
  404208:	d8e8      	bhi.n	4041dc <memmove+0x38>
  40420a:	f1a2 0310 	sub.w	r3, r2, #16
  40420e:	f023 030f 	bic.w	r3, r3, #15
  404212:	f002 0e0f 	and.w	lr, r2, #15
  404216:	3310      	adds	r3, #16
  404218:	f1be 0f03 	cmp.w	lr, #3
  40421c:	4419      	add	r1, r3
  40421e:	4403      	add	r3, r0
  404220:	d921      	bls.n	404266 <memmove+0xc2>
  404222:	1f1e      	subs	r6, r3, #4
  404224:	460d      	mov	r5, r1
  404226:	4674      	mov	r4, lr
  404228:	3c04      	subs	r4, #4
  40422a:	f855 7b04 	ldr.w	r7, [r5], #4
  40422e:	f846 7f04 	str.w	r7, [r6, #4]!
  404232:	2c03      	cmp	r4, #3
  404234:	d8f8      	bhi.n	404228 <memmove+0x84>
  404236:	f1ae 0404 	sub.w	r4, lr, #4
  40423a:	f024 0403 	bic.w	r4, r4, #3
  40423e:	3404      	adds	r4, #4
  404240:	4423      	add	r3, r4
  404242:	4421      	add	r1, r4
  404244:	f002 0203 	and.w	r2, r2, #3
  404248:	b162      	cbz	r2, 404264 <memmove+0xc0>
  40424a:	3b01      	subs	r3, #1
  40424c:	440a      	add	r2, r1
  40424e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404252:	f803 4f01 	strb.w	r4, [r3, #1]!
  404256:	428a      	cmp	r2, r1
  404258:	d1f9      	bne.n	40424e <memmove+0xaa>
  40425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40425c:	4603      	mov	r3, r0
  40425e:	e7f3      	b.n	404248 <memmove+0xa4>
  404260:	4603      	mov	r3, r0
  404262:	e7f2      	b.n	40424a <memmove+0xa6>
  404264:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404266:	4672      	mov	r2, lr
  404268:	e7ee      	b.n	404248 <memmove+0xa4>
  40426a:	bf00      	nop

0040426c <__malloc_lock>:
  40426c:	4770      	bx	lr
  40426e:	bf00      	nop

00404270 <__malloc_unlock>:
  404270:	4770      	bx	lr
  404272:	bf00      	nop

00404274 <_realloc_r>:
  404274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404278:	4617      	mov	r7, r2
  40427a:	b083      	sub	sp, #12
  40427c:	2900      	cmp	r1, #0
  40427e:	f000 80c1 	beq.w	404404 <_realloc_r+0x190>
  404282:	460e      	mov	r6, r1
  404284:	4681      	mov	r9, r0
  404286:	f107 050b 	add.w	r5, r7, #11
  40428a:	f7ff ffef 	bl	40426c <__malloc_lock>
  40428e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  404292:	2d16      	cmp	r5, #22
  404294:	f02e 0403 	bic.w	r4, lr, #3
  404298:	f1a6 0808 	sub.w	r8, r6, #8
  40429c:	d840      	bhi.n	404320 <_realloc_r+0xac>
  40429e:	2210      	movs	r2, #16
  4042a0:	4615      	mov	r5, r2
  4042a2:	42af      	cmp	r7, r5
  4042a4:	d841      	bhi.n	40432a <_realloc_r+0xb6>
  4042a6:	4294      	cmp	r4, r2
  4042a8:	da75      	bge.n	404396 <_realloc_r+0x122>
  4042aa:	4bc9      	ldr	r3, [pc, #804]	; (4045d0 <_realloc_r+0x35c>)
  4042ac:	6899      	ldr	r1, [r3, #8]
  4042ae:	eb08 0004 	add.w	r0, r8, r4
  4042b2:	4288      	cmp	r0, r1
  4042b4:	6841      	ldr	r1, [r0, #4]
  4042b6:	f000 80d9 	beq.w	40446c <_realloc_r+0x1f8>
  4042ba:	f021 0301 	bic.w	r3, r1, #1
  4042be:	4403      	add	r3, r0
  4042c0:	685b      	ldr	r3, [r3, #4]
  4042c2:	07db      	lsls	r3, r3, #31
  4042c4:	d57d      	bpl.n	4043c2 <_realloc_r+0x14e>
  4042c6:	f01e 0f01 	tst.w	lr, #1
  4042ca:	d035      	beq.n	404338 <_realloc_r+0xc4>
  4042cc:	4639      	mov	r1, r7
  4042ce:	4648      	mov	r0, r9
  4042d0:	f7ff fbc6 	bl	403a60 <_malloc_r>
  4042d4:	4607      	mov	r7, r0
  4042d6:	b1e0      	cbz	r0, 404312 <_realloc_r+0x9e>
  4042d8:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4042dc:	f023 0301 	bic.w	r3, r3, #1
  4042e0:	4443      	add	r3, r8
  4042e2:	f1a0 0208 	sub.w	r2, r0, #8
  4042e6:	429a      	cmp	r2, r3
  4042e8:	f000 8144 	beq.w	404574 <_realloc_r+0x300>
  4042ec:	1f22      	subs	r2, r4, #4
  4042ee:	2a24      	cmp	r2, #36	; 0x24
  4042f0:	f200 8131 	bhi.w	404556 <_realloc_r+0x2e2>
  4042f4:	2a13      	cmp	r2, #19
  4042f6:	f200 8104 	bhi.w	404502 <_realloc_r+0x28e>
  4042fa:	4603      	mov	r3, r0
  4042fc:	4632      	mov	r2, r6
  4042fe:	6811      	ldr	r1, [r2, #0]
  404300:	6019      	str	r1, [r3, #0]
  404302:	6851      	ldr	r1, [r2, #4]
  404304:	6059      	str	r1, [r3, #4]
  404306:	6892      	ldr	r2, [r2, #8]
  404308:	609a      	str	r2, [r3, #8]
  40430a:	4631      	mov	r1, r6
  40430c:	4648      	mov	r0, r9
  40430e:	f7ff f88d 	bl	40342c <_free_r>
  404312:	4648      	mov	r0, r9
  404314:	f7ff ffac 	bl	404270 <__malloc_unlock>
  404318:	4638      	mov	r0, r7
  40431a:	b003      	add	sp, #12
  40431c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404320:	f025 0507 	bic.w	r5, r5, #7
  404324:	2d00      	cmp	r5, #0
  404326:	462a      	mov	r2, r5
  404328:	dabb      	bge.n	4042a2 <_realloc_r+0x2e>
  40432a:	230c      	movs	r3, #12
  40432c:	2000      	movs	r0, #0
  40432e:	f8c9 3000 	str.w	r3, [r9]
  404332:	b003      	add	sp, #12
  404334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404338:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40433c:	ebc3 0a08 	rsb	sl, r3, r8
  404340:	f8da 3004 	ldr.w	r3, [sl, #4]
  404344:	f023 0c03 	bic.w	ip, r3, #3
  404348:	eb04 030c 	add.w	r3, r4, ip
  40434c:	4293      	cmp	r3, r2
  40434e:	dbbd      	blt.n	4042cc <_realloc_r+0x58>
  404350:	4657      	mov	r7, sl
  404352:	f8da 100c 	ldr.w	r1, [sl, #12]
  404356:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40435a:	1f22      	subs	r2, r4, #4
  40435c:	2a24      	cmp	r2, #36	; 0x24
  40435e:	60c1      	str	r1, [r0, #12]
  404360:	6088      	str	r0, [r1, #8]
  404362:	f200 8117 	bhi.w	404594 <_realloc_r+0x320>
  404366:	2a13      	cmp	r2, #19
  404368:	f240 8112 	bls.w	404590 <_realloc_r+0x31c>
  40436c:	6831      	ldr	r1, [r6, #0]
  40436e:	f8ca 1008 	str.w	r1, [sl, #8]
  404372:	6871      	ldr	r1, [r6, #4]
  404374:	f8ca 100c 	str.w	r1, [sl, #12]
  404378:	2a1b      	cmp	r2, #27
  40437a:	f200 812b 	bhi.w	4045d4 <_realloc_r+0x360>
  40437e:	3608      	adds	r6, #8
  404380:	f10a 0210 	add.w	r2, sl, #16
  404384:	6831      	ldr	r1, [r6, #0]
  404386:	6011      	str	r1, [r2, #0]
  404388:	6871      	ldr	r1, [r6, #4]
  40438a:	6051      	str	r1, [r2, #4]
  40438c:	68b1      	ldr	r1, [r6, #8]
  40438e:	6091      	str	r1, [r2, #8]
  404390:	463e      	mov	r6, r7
  404392:	461c      	mov	r4, r3
  404394:	46d0      	mov	r8, sl
  404396:	1b63      	subs	r3, r4, r5
  404398:	2b0f      	cmp	r3, #15
  40439a:	d81d      	bhi.n	4043d8 <_realloc_r+0x164>
  40439c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4043a0:	f003 0301 	and.w	r3, r3, #1
  4043a4:	4323      	orrs	r3, r4
  4043a6:	4444      	add	r4, r8
  4043a8:	f8c8 3004 	str.w	r3, [r8, #4]
  4043ac:	6863      	ldr	r3, [r4, #4]
  4043ae:	f043 0301 	orr.w	r3, r3, #1
  4043b2:	6063      	str	r3, [r4, #4]
  4043b4:	4648      	mov	r0, r9
  4043b6:	f7ff ff5b 	bl	404270 <__malloc_unlock>
  4043ba:	4630      	mov	r0, r6
  4043bc:	b003      	add	sp, #12
  4043be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043c2:	f021 0103 	bic.w	r1, r1, #3
  4043c6:	4421      	add	r1, r4
  4043c8:	4291      	cmp	r1, r2
  4043ca:	db21      	blt.n	404410 <_realloc_r+0x19c>
  4043cc:	68c3      	ldr	r3, [r0, #12]
  4043ce:	6882      	ldr	r2, [r0, #8]
  4043d0:	460c      	mov	r4, r1
  4043d2:	60d3      	str	r3, [r2, #12]
  4043d4:	609a      	str	r2, [r3, #8]
  4043d6:	e7de      	b.n	404396 <_realloc_r+0x122>
  4043d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4043dc:	eb08 0105 	add.w	r1, r8, r5
  4043e0:	f002 0201 	and.w	r2, r2, #1
  4043e4:	4315      	orrs	r5, r2
  4043e6:	f043 0201 	orr.w	r2, r3, #1
  4043ea:	440b      	add	r3, r1
  4043ec:	f8c8 5004 	str.w	r5, [r8, #4]
  4043f0:	604a      	str	r2, [r1, #4]
  4043f2:	685a      	ldr	r2, [r3, #4]
  4043f4:	f042 0201 	orr.w	r2, r2, #1
  4043f8:	3108      	adds	r1, #8
  4043fa:	605a      	str	r2, [r3, #4]
  4043fc:	4648      	mov	r0, r9
  4043fe:	f7ff f815 	bl	40342c <_free_r>
  404402:	e7d7      	b.n	4043b4 <_realloc_r+0x140>
  404404:	4611      	mov	r1, r2
  404406:	b003      	add	sp, #12
  404408:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40440c:	f7ff bb28 	b.w	403a60 <_malloc_r>
  404410:	f01e 0f01 	tst.w	lr, #1
  404414:	f47f af5a 	bne.w	4042cc <_realloc_r+0x58>
  404418:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40441c:	ebc3 0a08 	rsb	sl, r3, r8
  404420:	f8da 3004 	ldr.w	r3, [sl, #4]
  404424:	f023 0c03 	bic.w	ip, r3, #3
  404428:	eb01 0e0c 	add.w	lr, r1, ip
  40442c:	4596      	cmp	lr, r2
  40442e:	db8b      	blt.n	404348 <_realloc_r+0xd4>
  404430:	68c3      	ldr	r3, [r0, #12]
  404432:	6882      	ldr	r2, [r0, #8]
  404434:	4657      	mov	r7, sl
  404436:	60d3      	str	r3, [r2, #12]
  404438:	609a      	str	r2, [r3, #8]
  40443a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40443e:	f8da 300c 	ldr.w	r3, [sl, #12]
  404442:	60cb      	str	r3, [r1, #12]
  404444:	1f22      	subs	r2, r4, #4
  404446:	2a24      	cmp	r2, #36	; 0x24
  404448:	6099      	str	r1, [r3, #8]
  40444a:	f200 8099 	bhi.w	404580 <_realloc_r+0x30c>
  40444e:	2a13      	cmp	r2, #19
  404450:	d962      	bls.n	404518 <_realloc_r+0x2a4>
  404452:	6833      	ldr	r3, [r6, #0]
  404454:	f8ca 3008 	str.w	r3, [sl, #8]
  404458:	6873      	ldr	r3, [r6, #4]
  40445a:	f8ca 300c 	str.w	r3, [sl, #12]
  40445e:	2a1b      	cmp	r2, #27
  404460:	f200 80a0 	bhi.w	4045a4 <_realloc_r+0x330>
  404464:	3608      	adds	r6, #8
  404466:	f10a 0310 	add.w	r3, sl, #16
  40446a:	e056      	b.n	40451a <_realloc_r+0x2a6>
  40446c:	f021 0b03 	bic.w	fp, r1, #3
  404470:	44a3      	add	fp, r4
  404472:	f105 0010 	add.w	r0, r5, #16
  404476:	4583      	cmp	fp, r0
  404478:	da59      	bge.n	40452e <_realloc_r+0x2ba>
  40447a:	f01e 0f01 	tst.w	lr, #1
  40447e:	f47f af25 	bne.w	4042cc <_realloc_r+0x58>
  404482:	f856 1c08 	ldr.w	r1, [r6, #-8]
  404486:	ebc1 0a08 	rsb	sl, r1, r8
  40448a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40448e:	f021 0c03 	bic.w	ip, r1, #3
  404492:	44e3      	add	fp, ip
  404494:	4558      	cmp	r0, fp
  404496:	f73f af57 	bgt.w	404348 <_realloc_r+0xd4>
  40449a:	4657      	mov	r7, sl
  40449c:	f8da 100c 	ldr.w	r1, [sl, #12]
  4044a0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4044a4:	1f22      	subs	r2, r4, #4
  4044a6:	2a24      	cmp	r2, #36	; 0x24
  4044a8:	60c1      	str	r1, [r0, #12]
  4044aa:	6088      	str	r0, [r1, #8]
  4044ac:	f200 80b4 	bhi.w	404618 <_realloc_r+0x3a4>
  4044b0:	2a13      	cmp	r2, #19
  4044b2:	f240 80a5 	bls.w	404600 <_realloc_r+0x38c>
  4044b6:	6831      	ldr	r1, [r6, #0]
  4044b8:	f8ca 1008 	str.w	r1, [sl, #8]
  4044bc:	6871      	ldr	r1, [r6, #4]
  4044be:	f8ca 100c 	str.w	r1, [sl, #12]
  4044c2:	2a1b      	cmp	r2, #27
  4044c4:	f200 80af 	bhi.w	404626 <_realloc_r+0x3b2>
  4044c8:	3608      	adds	r6, #8
  4044ca:	f10a 0210 	add.w	r2, sl, #16
  4044ce:	6831      	ldr	r1, [r6, #0]
  4044d0:	6011      	str	r1, [r2, #0]
  4044d2:	6871      	ldr	r1, [r6, #4]
  4044d4:	6051      	str	r1, [r2, #4]
  4044d6:	68b1      	ldr	r1, [r6, #8]
  4044d8:	6091      	str	r1, [r2, #8]
  4044da:	eb0a 0105 	add.w	r1, sl, r5
  4044de:	ebc5 020b 	rsb	r2, r5, fp
  4044e2:	f042 0201 	orr.w	r2, r2, #1
  4044e6:	6099      	str	r1, [r3, #8]
  4044e8:	604a      	str	r2, [r1, #4]
  4044ea:	f8da 3004 	ldr.w	r3, [sl, #4]
  4044ee:	f003 0301 	and.w	r3, r3, #1
  4044f2:	431d      	orrs	r5, r3
  4044f4:	4648      	mov	r0, r9
  4044f6:	f8ca 5004 	str.w	r5, [sl, #4]
  4044fa:	f7ff feb9 	bl	404270 <__malloc_unlock>
  4044fe:	4638      	mov	r0, r7
  404500:	e75c      	b.n	4043bc <_realloc_r+0x148>
  404502:	6833      	ldr	r3, [r6, #0]
  404504:	6003      	str	r3, [r0, #0]
  404506:	6873      	ldr	r3, [r6, #4]
  404508:	6043      	str	r3, [r0, #4]
  40450a:	2a1b      	cmp	r2, #27
  40450c:	d827      	bhi.n	40455e <_realloc_r+0x2ea>
  40450e:	f100 0308 	add.w	r3, r0, #8
  404512:	f106 0208 	add.w	r2, r6, #8
  404516:	e6f2      	b.n	4042fe <_realloc_r+0x8a>
  404518:	463b      	mov	r3, r7
  40451a:	6832      	ldr	r2, [r6, #0]
  40451c:	601a      	str	r2, [r3, #0]
  40451e:	6872      	ldr	r2, [r6, #4]
  404520:	605a      	str	r2, [r3, #4]
  404522:	68b2      	ldr	r2, [r6, #8]
  404524:	609a      	str	r2, [r3, #8]
  404526:	463e      	mov	r6, r7
  404528:	4674      	mov	r4, lr
  40452a:	46d0      	mov	r8, sl
  40452c:	e733      	b.n	404396 <_realloc_r+0x122>
  40452e:	eb08 0105 	add.w	r1, r8, r5
  404532:	ebc5 0b0b 	rsb	fp, r5, fp
  404536:	f04b 0201 	orr.w	r2, fp, #1
  40453a:	6099      	str	r1, [r3, #8]
  40453c:	604a      	str	r2, [r1, #4]
  40453e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  404542:	f003 0301 	and.w	r3, r3, #1
  404546:	431d      	orrs	r5, r3
  404548:	4648      	mov	r0, r9
  40454a:	f846 5c04 	str.w	r5, [r6, #-4]
  40454e:	f7ff fe8f 	bl	404270 <__malloc_unlock>
  404552:	4630      	mov	r0, r6
  404554:	e732      	b.n	4043bc <_realloc_r+0x148>
  404556:	4631      	mov	r1, r6
  404558:	f7ff fe24 	bl	4041a4 <memmove>
  40455c:	e6d5      	b.n	40430a <_realloc_r+0x96>
  40455e:	68b3      	ldr	r3, [r6, #8]
  404560:	6083      	str	r3, [r0, #8]
  404562:	68f3      	ldr	r3, [r6, #12]
  404564:	60c3      	str	r3, [r0, #12]
  404566:	2a24      	cmp	r2, #36	; 0x24
  404568:	d028      	beq.n	4045bc <_realloc_r+0x348>
  40456a:	f100 0310 	add.w	r3, r0, #16
  40456e:	f106 0210 	add.w	r2, r6, #16
  404572:	e6c4      	b.n	4042fe <_realloc_r+0x8a>
  404574:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404578:	f023 0303 	bic.w	r3, r3, #3
  40457c:	441c      	add	r4, r3
  40457e:	e70a      	b.n	404396 <_realloc_r+0x122>
  404580:	4631      	mov	r1, r6
  404582:	4638      	mov	r0, r7
  404584:	4674      	mov	r4, lr
  404586:	46d0      	mov	r8, sl
  404588:	f7ff fe0c 	bl	4041a4 <memmove>
  40458c:	463e      	mov	r6, r7
  40458e:	e702      	b.n	404396 <_realloc_r+0x122>
  404590:	463a      	mov	r2, r7
  404592:	e6f7      	b.n	404384 <_realloc_r+0x110>
  404594:	4631      	mov	r1, r6
  404596:	4638      	mov	r0, r7
  404598:	461c      	mov	r4, r3
  40459a:	46d0      	mov	r8, sl
  40459c:	f7ff fe02 	bl	4041a4 <memmove>
  4045a0:	463e      	mov	r6, r7
  4045a2:	e6f8      	b.n	404396 <_realloc_r+0x122>
  4045a4:	68b3      	ldr	r3, [r6, #8]
  4045a6:	f8ca 3010 	str.w	r3, [sl, #16]
  4045aa:	68f3      	ldr	r3, [r6, #12]
  4045ac:	f8ca 3014 	str.w	r3, [sl, #20]
  4045b0:	2a24      	cmp	r2, #36	; 0x24
  4045b2:	d01b      	beq.n	4045ec <_realloc_r+0x378>
  4045b4:	3610      	adds	r6, #16
  4045b6:	f10a 0318 	add.w	r3, sl, #24
  4045ba:	e7ae      	b.n	40451a <_realloc_r+0x2a6>
  4045bc:	6933      	ldr	r3, [r6, #16]
  4045be:	6103      	str	r3, [r0, #16]
  4045c0:	6973      	ldr	r3, [r6, #20]
  4045c2:	6143      	str	r3, [r0, #20]
  4045c4:	f106 0218 	add.w	r2, r6, #24
  4045c8:	f100 0318 	add.w	r3, r0, #24
  4045cc:	e697      	b.n	4042fe <_realloc_r+0x8a>
  4045ce:	bf00      	nop
  4045d0:	20000460 	.word	0x20000460
  4045d4:	68b1      	ldr	r1, [r6, #8]
  4045d6:	f8ca 1010 	str.w	r1, [sl, #16]
  4045da:	68f1      	ldr	r1, [r6, #12]
  4045dc:	f8ca 1014 	str.w	r1, [sl, #20]
  4045e0:	2a24      	cmp	r2, #36	; 0x24
  4045e2:	d00f      	beq.n	404604 <_realloc_r+0x390>
  4045e4:	3610      	adds	r6, #16
  4045e6:	f10a 0218 	add.w	r2, sl, #24
  4045ea:	e6cb      	b.n	404384 <_realloc_r+0x110>
  4045ec:	6933      	ldr	r3, [r6, #16]
  4045ee:	f8ca 3018 	str.w	r3, [sl, #24]
  4045f2:	6973      	ldr	r3, [r6, #20]
  4045f4:	f8ca 301c 	str.w	r3, [sl, #28]
  4045f8:	3618      	adds	r6, #24
  4045fa:	f10a 0320 	add.w	r3, sl, #32
  4045fe:	e78c      	b.n	40451a <_realloc_r+0x2a6>
  404600:	463a      	mov	r2, r7
  404602:	e764      	b.n	4044ce <_realloc_r+0x25a>
  404604:	6932      	ldr	r2, [r6, #16]
  404606:	f8ca 2018 	str.w	r2, [sl, #24]
  40460a:	6972      	ldr	r2, [r6, #20]
  40460c:	f8ca 201c 	str.w	r2, [sl, #28]
  404610:	3618      	adds	r6, #24
  404612:	f10a 0220 	add.w	r2, sl, #32
  404616:	e6b5      	b.n	404384 <_realloc_r+0x110>
  404618:	4631      	mov	r1, r6
  40461a:	4638      	mov	r0, r7
  40461c:	9301      	str	r3, [sp, #4]
  40461e:	f7ff fdc1 	bl	4041a4 <memmove>
  404622:	9b01      	ldr	r3, [sp, #4]
  404624:	e759      	b.n	4044da <_realloc_r+0x266>
  404626:	68b1      	ldr	r1, [r6, #8]
  404628:	f8ca 1010 	str.w	r1, [sl, #16]
  40462c:	68f1      	ldr	r1, [r6, #12]
  40462e:	f8ca 1014 	str.w	r1, [sl, #20]
  404632:	2a24      	cmp	r2, #36	; 0x24
  404634:	d003      	beq.n	40463e <_realloc_r+0x3ca>
  404636:	3610      	adds	r6, #16
  404638:	f10a 0218 	add.w	r2, sl, #24
  40463c:	e747      	b.n	4044ce <_realloc_r+0x25a>
  40463e:	6932      	ldr	r2, [r6, #16]
  404640:	f8ca 2018 	str.w	r2, [sl, #24]
  404644:	6972      	ldr	r2, [r6, #20]
  404646:	f8ca 201c 	str.w	r2, [sl, #28]
  40464a:	3618      	adds	r6, #24
  40464c:	f10a 0220 	add.w	r2, sl, #32
  404650:	e73d      	b.n	4044ce <_realloc_r+0x25a>
  404652:	bf00      	nop

00404654 <_sbrk_r>:
  404654:	b538      	push	{r3, r4, r5, lr}
  404656:	4c07      	ldr	r4, [pc, #28]	; (404674 <_sbrk_r+0x20>)
  404658:	2300      	movs	r3, #0
  40465a:	4605      	mov	r5, r0
  40465c:	4608      	mov	r0, r1
  40465e:	6023      	str	r3, [r4, #0]
  404660:	f7fc ff9a 	bl	401598 <_sbrk>
  404664:	1c43      	adds	r3, r0, #1
  404666:	d000      	beq.n	40466a <_sbrk_r+0x16>
  404668:	bd38      	pop	{r3, r4, r5, pc}
  40466a:	6823      	ldr	r3, [r4, #0]
  40466c:	2b00      	cmp	r3, #0
  40466e:	d0fb      	beq.n	404668 <_sbrk_r+0x14>
  404670:	602b      	str	r3, [r5, #0]
  404672:	bd38      	pop	{r3, r4, r5, pc}
  404674:	20000950 	.word	0x20000950

00404678 <__sread>:
  404678:	b510      	push	{r4, lr}
  40467a:	460c      	mov	r4, r1
  40467c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404680:	f000 fa32 	bl	404ae8 <_read_r>
  404684:	2800      	cmp	r0, #0
  404686:	db03      	blt.n	404690 <__sread+0x18>
  404688:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40468a:	4403      	add	r3, r0
  40468c:	6523      	str	r3, [r4, #80]	; 0x50
  40468e:	bd10      	pop	{r4, pc}
  404690:	89a3      	ldrh	r3, [r4, #12]
  404692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404696:	81a3      	strh	r3, [r4, #12]
  404698:	bd10      	pop	{r4, pc}
  40469a:	bf00      	nop

0040469c <__swrite>:
  40469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4046a0:	4616      	mov	r6, r2
  4046a2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4046a6:	461f      	mov	r7, r3
  4046a8:	05d3      	lsls	r3, r2, #23
  4046aa:	460c      	mov	r4, r1
  4046ac:	4605      	mov	r5, r0
  4046ae:	d507      	bpl.n	4046c0 <__swrite+0x24>
  4046b0:	2200      	movs	r2, #0
  4046b2:	2302      	movs	r3, #2
  4046b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4046b8:	f000 fa00 	bl	404abc <_lseek_r>
  4046bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4046c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4046c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4046c8:	81a2      	strh	r2, [r4, #12]
  4046ca:	463b      	mov	r3, r7
  4046cc:	4632      	mov	r2, r6
  4046ce:	4628      	mov	r0, r5
  4046d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4046d4:	f000 b910 	b.w	4048f8 <_write_r>

004046d8 <__sseek>:
  4046d8:	b510      	push	{r4, lr}
  4046da:	460c      	mov	r4, r1
  4046dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4046e0:	f000 f9ec 	bl	404abc <_lseek_r>
  4046e4:	89a3      	ldrh	r3, [r4, #12]
  4046e6:	1c42      	adds	r2, r0, #1
  4046e8:	bf0e      	itee	eq
  4046ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4046ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4046f2:	6520      	strne	r0, [r4, #80]	; 0x50
  4046f4:	81a3      	strh	r3, [r4, #12]
  4046f6:	bd10      	pop	{r4, pc}

004046f8 <__sclose>:
  4046f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4046fc:	f000 b964 	b.w	4049c8 <_close_r>

00404700 <strlen>:
  404700:	f890 f000 	pld	[r0]
  404704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404708:	f020 0107 	bic.w	r1, r0, #7
  40470c:	f06f 0c00 	mvn.w	ip, #0
  404710:	f010 0407 	ands.w	r4, r0, #7
  404714:	f891 f020 	pld	[r1, #32]
  404718:	f040 8049 	bne.w	4047ae <strlen+0xae>
  40471c:	f04f 0400 	mov.w	r4, #0
  404720:	f06f 0007 	mvn.w	r0, #7
  404724:	e9d1 2300 	ldrd	r2, r3, [r1]
  404728:	f891 f040 	pld	[r1, #64]	; 0x40
  40472c:	f100 0008 	add.w	r0, r0, #8
  404730:	fa82 f24c 	uadd8	r2, r2, ip
  404734:	faa4 f28c 	sel	r2, r4, ip
  404738:	fa83 f34c 	uadd8	r3, r3, ip
  40473c:	faa2 f38c 	sel	r3, r2, ip
  404740:	bb4b      	cbnz	r3, 404796 <strlen+0x96>
  404742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404746:	fa82 f24c 	uadd8	r2, r2, ip
  40474a:	f100 0008 	add.w	r0, r0, #8
  40474e:	faa4 f28c 	sel	r2, r4, ip
  404752:	fa83 f34c 	uadd8	r3, r3, ip
  404756:	faa2 f38c 	sel	r3, r2, ip
  40475a:	b9e3      	cbnz	r3, 404796 <strlen+0x96>
  40475c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404760:	fa82 f24c 	uadd8	r2, r2, ip
  404764:	f100 0008 	add.w	r0, r0, #8
  404768:	faa4 f28c 	sel	r2, r4, ip
  40476c:	fa83 f34c 	uadd8	r3, r3, ip
  404770:	faa2 f38c 	sel	r3, r2, ip
  404774:	b97b      	cbnz	r3, 404796 <strlen+0x96>
  404776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40477a:	f101 0120 	add.w	r1, r1, #32
  40477e:	fa82 f24c 	uadd8	r2, r2, ip
  404782:	f100 0008 	add.w	r0, r0, #8
  404786:	faa4 f28c 	sel	r2, r4, ip
  40478a:	fa83 f34c 	uadd8	r3, r3, ip
  40478e:	faa2 f38c 	sel	r3, r2, ip
  404792:	2b00      	cmp	r3, #0
  404794:	d0c6      	beq.n	404724 <strlen+0x24>
  404796:	2a00      	cmp	r2, #0
  404798:	bf04      	itt	eq
  40479a:	3004      	addeq	r0, #4
  40479c:	461a      	moveq	r2, r3
  40479e:	ba12      	rev	r2, r2
  4047a0:	fab2 f282 	clz	r2, r2
  4047a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4047a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4047ac:	4770      	bx	lr
  4047ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4047b2:	f004 0503 	and.w	r5, r4, #3
  4047b6:	f1c4 0000 	rsb	r0, r4, #0
  4047ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4047be:	f014 0f04 	tst.w	r4, #4
  4047c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4047c6:	fa0c f505 	lsl.w	r5, ip, r5
  4047ca:	ea62 0205 	orn	r2, r2, r5
  4047ce:	bf1c      	itt	ne
  4047d0:	ea63 0305 	ornne	r3, r3, r5
  4047d4:	4662      	movne	r2, ip
  4047d6:	f04f 0400 	mov.w	r4, #0
  4047da:	e7a9      	b.n	404730 <strlen+0x30>

004047dc <__swbuf_r>:
  4047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4047de:	460e      	mov	r6, r1
  4047e0:	4614      	mov	r4, r2
  4047e2:	4607      	mov	r7, r0
  4047e4:	b110      	cbz	r0, 4047ec <__swbuf_r+0x10>
  4047e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4047e8:	2b00      	cmp	r3, #0
  4047ea:	d04a      	beq.n	404882 <__swbuf_r+0xa6>
  4047ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4047f0:	69a3      	ldr	r3, [r4, #24]
  4047f2:	60a3      	str	r3, [r4, #8]
  4047f4:	b291      	uxth	r1, r2
  4047f6:	0708      	lsls	r0, r1, #28
  4047f8:	d538      	bpl.n	40486c <__swbuf_r+0x90>
  4047fa:	6923      	ldr	r3, [r4, #16]
  4047fc:	2b00      	cmp	r3, #0
  4047fe:	d035      	beq.n	40486c <__swbuf_r+0x90>
  404800:	0489      	lsls	r1, r1, #18
  404802:	b2f5      	uxtb	r5, r6
  404804:	d515      	bpl.n	404832 <__swbuf_r+0x56>
  404806:	6822      	ldr	r2, [r4, #0]
  404808:	6961      	ldr	r1, [r4, #20]
  40480a:	1ad3      	subs	r3, r2, r3
  40480c:	428b      	cmp	r3, r1
  40480e:	da1c      	bge.n	40484a <__swbuf_r+0x6e>
  404810:	3301      	adds	r3, #1
  404812:	68a1      	ldr	r1, [r4, #8]
  404814:	1c50      	adds	r0, r2, #1
  404816:	3901      	subs	r1, #1
  404818:	60a1      	str	r1, [r4, #8]
  40481a:	6020      	str	r0, [r4, #0]
  40481c:	7016      	strb	r6, [r2, #0]
  40481e:	6962      	ldr	r2, [r4, #20]
  404820:	429a      	cmp	r2, r3
  404822:	d01a      	beq.n	40485a <__swbuf_r+0x7e>
  404824:	89a3      	ldrh	r3, [r4, #12]
  404826:	07db      	lsls	r3, r3, #31
  404828:	d501      	bpl.n	40482e <__swbuf_r+0x52>
  40482a:	2d0a      	cmp	r5, #10
  40482c:	d015      	beq.n	40485a <__swbuf_r+0x7e>
  40482e:	4628      	mov	r0, r5
  404830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404832:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404838:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40483c:	81a2      	strh	r2, [r4, #12]
  40483e:	6822      	ldr	r2, [r4, #0]
  404840:	6661      	str	r1, [r4, #100]	; 0x64
  404842:	6961      	ldr	r1, [r4, #20]
  404844:	1ad3      	subs	r3, r2, r3
  404846:	428b      	cmp	r3, r1
  404848:	dbe2      	blt.n	404810 <__swbuf_r+0x34>
  40484a:	4621      	mov	r1, r4
  40484c:	4638      	mov	r0, r7
  40484e:	f7fe fc8f 	bl	403170 <_fflush_r>
  404852:	b940      	cbnz	r0, 404866 <__swbuf_r+0x8a>
  404854:	6822      	ldr	r2, [r4, #0]
  404856:	2301      	movs	r3, #1
  404858:	e7db      	b.n	404812 <__swbuf_r+0x36>
  40485a:	4621      	mov	r1, r4
  40485c:	4638      	mov	r0, r7
  40485e:	f7fe fc87 	bl	403170 <_fflush_r>
  404862:	2800      	cmp	r0, #0
  404864:	d0e3      	beq.n	40482e <__swbuf_r+0x52>
  404866:	f04f 30ff 	mov.w	r0, #4294967295
  40486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40486c:	4621      	mov	r1, r4
  40486e:	4638      	mov	r0, r7
  404870:	f7fe fb66 	bl	402f40 <__swsetup_r>
  404874:	2800      	cmp	r0, #0
  404876:	d1f6      	bne.n	404866 <__swbuf_r+0x8a>
  404878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40487c:	6923      	ldr	r3, [r4, #16]
  40487e:	b291      	uxth	r1, r2
  404880:	e7be      	b.n	404800 <__swbuf_r+0x24>
  404882:	f7fe fd09 	bl	403298 <__sinit>
  404886:	e7b1      	b.n	4047ec <__swbuf_r+0x10>

00404888 <_wcrtomb_r>:
  404888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40488c:	4605      	mov	r5, r0
  40488e:	b086      	sub	sp, #24
  404890:	461e      	mov	r6, r3
  404892:	460c      	mov	r4, r1
  404894:	b1a1      	cbz	r1, 4048c0 <_wcrtomb_r+0x38>
  404896:	4b10      	ldr	r3, [pc, #64]	; (4048d8 <_wcrtomb_r+0x50>)
  404898:	4617      	mov	r7, r2
  40489a:	f8d3 8000 	ldr.w	r8, [r3]
  40489e:	f7ff f859 	bl	403954 <__locale_charset>
  4048a2:	9600      	str	r6, [sp, #0]
  4048a4:	4603      	mov	r3, r0
  4048a6:	463a      	mov	r2, r7
  4048a8:	4621      	mov	r1, r4
  4048aa:	4628      	mov	r0, r5
  4048ac:	47c0      	blx	r8
  4048ae:	1c43      	adds	r3, r0, #1
  4048b0:	d103      	bne.n	4048ba <_wcrtomb_r+0x32>
  4048b2:	2200      	movs	r2, #0
  4048b4:	238a      	movs	r3, #138	; 0x8a
  4048b6:	6032      	str	r2, [r6, #0]
  4048b8:	602b      	str	r3, [r5, #0]
  4048ba:	b006      	add	sp, #24
  4048bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048c0:	4b05      	ldr	r3, [pc, #20]	; (4048d8 <_wcrtomb_r+0x50>)
  4048c2:	681f      	ldr	r7, [r3, #0]
  4048c4:	f7ff f846 	bl	403954 <__locale_charset>
  4048c8:	9600      	str	r6, [sp, #0]
  4048ca:	4603      	mov	r3, r0
  4048cc:	4622      	mov	r2, r4
  4048ce:	a903      	add	r1, sp, #12
  4048d0:	4628      	mov	r0, r5
  4048d2:	47b8      	blx	r7
  4048d4:	e7eb      	b.n	4048ae <_wcrtomb_r+0x26>
  4048d6:	bf00      	nop
  4048d8:	20000870 	.word	0x20000870

004048dc <__ascii_wctomb>:
  4048dc:	b121      	cbz	r1, 4048e8 <__ascii_wctomb+0xc>
  4048de:	2aff      	cmp	r2, #255	; 0xff
  4048e0:	d804      	bhi.n	4048ec <__ascii_wctomb+0x10>
  4048e2:	700a      	strb	r2, [r1, #0]
  4048e4:	2001      	movs	r0, #1
  4048e6:	4770      	bx	lr
  4048e8:	4608      	mov	r0, r1
  4048ea:	4770      	bx	lr
  4048ec:	238a      	movs	r3, #138	; 0x8a
  4048ee:	6003      	str	r3, [r0, #0]
  4048f0:	f04f 30ff 	mov.w	r0, #4294967295
  4048f4:	4770      	bx	lr
  4048f6:	bf00      	nop

004048f8 <_write_r>:
  4048f8:	b570      	push	{r4, r5, r6, lr}
  4048fa:	460d      	mov	r5, r1
  4048fc:	4c08      	ldr	r4, [pc, #32]	; (404920 <_write_r+0x28>)
  4048fe:	4611      	mov	r1, r2
  404900:	4606      	mov	r6, r0
  404902:	461a      	mov	r2, r3
  404904:	4628      	mov	r0, r5
  404906:	2300      	movs	r3, #0
  404908:	6023      	str	r3, [r4, #0]
  40490a:	f7fb fc37 	bl	40017c <_write>
  40490e:	1c43      	adds	r3, r0, #1
  404910:	d000      	beq.n	404914 <_write_r+0x1c>
  404912:	bd70      	pop	{r4, r5, r6, pc}
  404914:	6823      	ldr	r3, [r4, #0]
  404916:	2b00      	cmp	r3, #0
  404918:	d0fb      	beq.n	404912 <_write_r+0x1a>
  40491a:	6033      	str	r3, [r6, #0]
  40491c:	bd70      	pop	{r4, r5, r6, pc}
  40491e:	bf00      	nop
  404920:	20000950 	.word	0x20000950

00404924 <__register_exitproc>:
  404924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404928:	4c25      	ldr	r4, [pc, #148]	; (4049c0 <__register_exitproc+0x9c>)
  40492a:	6825      	ldr	r5, [r4, #0]
  40492c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404930:	4606      	mov	r6, r0
  404932:	4688      	mov	r8, r1
  404934:	4692      	mov	sl, r2
  404936:	4699      	mov	r9, r3
  404938:	b3c4      	cbz	r4, 4049ac <__register_exitproc+0x88>
  40493a:	6860      	ldr	r0, [r4, #4]
  40493c:	281f      	cmp	r0, #31
  40493e:	dc17      	bgt.n	404970 <__register_exitproc+0x4c>
  404940:	1c43      	adds	r3, r0, #1
  404942:	b176      	cbz	r6, 404962 <__register_exitproc+0x3e>
  404944:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  404948:	2201      	movs	r2, #1
  40494a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40494e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  404952:	4082      	lsls	r2, r0
  404954:	4311      	orrs	r1, r2
  404956:	2e02      	cmp	r6, #2
  404958:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40495c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  404960:	d01e      	beq.n	4049a0 <__register_exitproc+0x7c>
  404962:	3002      	adds	r0, #2
  404964:	6063      	str	r3, [r4, #4]
  404966:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40496a:	2000      	movs	r0, #0
  40496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404970:	4b14      	ldr	r3, [pc, #80]	; (4049c4 <__register_exitproc+0xa0>)
  404972:	b303      	cbz	r3, 4049b6 <__register_exitproc+0x92>
  404974:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404978:	f7ff f86a 	bl	403a50 <malloc>
  40497c:	4604      	mov	r4, r0
  40497e:	b1d0      	cbz	r0, 4049b6 <__register_exitproc+0x92>
  404980:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404984:	2700      	movs	r7, #0
  404986:	e880 0088 	stmia.w	r0, {r3, r7}
  40498a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40498e:	4638      	mov	r0, r7
  404990:	2301      	movs	r3, #1
  404992:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  404996:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40499a:	2e00      	cmp	r6, #0
  40499c:	d0e1      	beq.n	404962 <__register_exitproc+0x3e>
  40499e:	e7d1      	b.n	404944 <__register_exitproc+0x20>
  4049a0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4049a4:	430a      	orrs	r2, r1
  4049a6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4049aa:	e7da      	b.n	404962 <__register_exitproc+0x3e>
  4049ac:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4049b0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4049b4:	e7c1      	b.n	40493a <__register_exitproc+0x16>
  4049b6:	f04f 30ff 	mov.w	r0, #4294967295
  4049ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4049be:	bf00      	nop
  4049c0:	00404b20 	.word	0x00404b20
  4049c4:	00403a51 	.word	0x00403a51

004049c8 <_close_r>:
  4049c8:	b538      	push	{r3, r4, r5, lr}
  4049ca:	4c07      	ldr	r4, [pc, #28]	; (4049e8 <_close_r+0x20>)
  4049cc:	2300      	movs	r3, #0
  4049ce:	4605      	mov	r5, r0
  4049d0:	4608      	mov	r0, r1
  4049d2:	6023      	str	r3, [r4, #0]
  4049d4:	f7fc fe0c 	bl	4015f0 <_close>
  4049d8:	1c43      	adds	r3, r0, #1
  4049da:	d000      	beq.n	4049de <_close_r+0x16>
  4049dc:	bd38      	pop	{r3, r4, r5, pc}
  4049de:	6823      	ldr	r3, [r4, #0]
  4049e0:	2b00      	cmp	r3, #0
  4049e2:	d0fb      	beq.n	4049dc <_close_r+0x14>
  4049e4:	602b      	str	r3, [r5, #0]
  4049e6:	bd38      	pop	{r3, r4, r5, pc}
  4049e8:	20000950 	.word	0x20000950

004049ec <_fclose_r>:
  4049ec:	2900      	cmp	r1, #0
  4049ee:	d03d      	beq.n	404a6c <_fclose_r+0x80>
  4049f0:	b570      	push	{r4, r5, r6, lr}
  4049f2:	4605      	mov	r5, r0
  4049f4:	460c      	mov	r4, r1
  4049f6:	b108      	cbz	r0, 4049fc <_fclose_r+0x10>
  4049f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4049fa:	b37b      	cbz	r3, 404a5c <_fclose_r+0x70>
  4049fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a00:	b90b      	cbnz	r3, 404a06 <_fclose_r+0x1a>
  404a02:	2000      	movs	r0, #0
  404a04:	bd70      	pop	{r4, r5, r6, pc}
  404a06:	4621      	mov	r1, r4
  404a08:	4628      	mov	r0, r5
  404a0a:	f7fe fb0d 	bl	403028 <__sflush_r>
  404a0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404a10:	4606      	mov	r6, r0
  404a12:	b133      	cbz	r3, 404a22 <_fclose_r+0x36>
  404a14:	69e1      	ldr	r1, [r4, #28]
  404a16:	4628      	mov	r0, r5
  404a18:	4798      	blx	r3
  404a1a:	2800      	cmp	r0, #0
  404a1c:	bfb8      	it	lt
  404a1e:	f04f 36ff 	movlt.w	r6, #4294967295
  404a22:	89a3      	ldrh	r3, [r4, #12]
  404a24:	061b      	lsls	r3, r3, #24
  404a26:	d41c      	bmi.n	404a62 <_fclose_r+0x76>
  404a28:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a2a:	b141      	cbz	r1, 404a3e <_fclose_r+0x52>
  404a2c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a30:	4299      	cmp	r1, r3
  404a32:	d002      	beq.n	404a3a <_fclose_r+0x4e>
  404a34:	4628      	mov	r0, r5
  404a36:	f7fe fcf9 	bl	40342c <_free_r>
  404a3a:	2300      	movs	r3, #0
  404a3c:	6323      	str	r3, [r4, #48]	; 0x30
  404a3e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404a40:	b121      	cbz	r1, 404a4c <_fclose_r+0x60>
  404a42:	4628      	mov	r0, r5
  404a44:	f7fe fcf2 	bl	40342c <_free_r>
  404a48:	2300      	movs	r3, #0
  404a4a:	6463      	str	r3, [r4, #68]	; 0x44
  404a4c:	f7fe fc2a 	bl	4032a4 <__sfp_lock_acquire>
  404a50:	2300      	movs	r3, #0
  404a52:	81a3      	strh	r3, [r4, #12]
  404a54:	f7fe fc28 	bl	4032a8 <__sfp_lock_release>
  404a58:	4630      	mov	r0, r6
  404a5a:	bd70      	pop	{r4, r5, r6, pc}
  404a5c:	f7fe fc1c 	bl	403298 <__sinit>
  404a60:	e7cc      	b.n	4049fc <_fclose_r+0x10>
  404a62:	6921      	ldr	r1, [r4, #16]
  404a64:	4628      	mov	r0, r5
  404a66:	f7fe fce1 	bl	40342c <_free_r>
  404a6a:	e7dd      	b.n	404a28 <_fclose_r+0x3c>
  404a6c:	2000      	movs	r0, #0
  404a6e:	4770      	bx	lr

00404a70 <_fstat_r>:
  404a70:	b538      	push	{r3, r4, r5, lr}
  404a72:	460b      	mov	r3, r1
  404a74:	4c07      	ldr	r4, [pc, #28]	; (404a94 <_fstat_r+0x24>)
  404a76:	4605      	mov	r5, r0
  404a78:	4611      	mov	r1, r2
  404a7a:	4618      	mov	r0, r3
  404a7c:	2300      	movs	r3, #0
  404a7e:	6023      	str	r3, [r4, #0]
  404a80:	f7fc fdc2 	bl	401608 <_fstat>
  404a84:	1c43      	adds	r3, r0, #1
  404a86:	d000      	beq.n	404a8a <_fstat_r+0x1a>
  404a88:	bd38      	pop	{r3, r4, r5, pc}
  404a8a:	6823      	ldr	r3, [r4, #0]
  404a8c:	2b00      	cmp	r3, #0
  404a8e:	d0fb      	beq.n	404a88 <_fstat_r+0x18>
  404a90:	602b      	str	r3, [r5, #0]
  404a92:	bd38      	pop	{r3, r4, r5, pc}
  404a94:	20000950 	.word	0x20000950

00404a98 <_isatty_r>:
  404a98:	b538      	push	{r3, r4, r5, lr}
  404a9a:	4c07      	ldr	r4, [pc, #28]	; (404ab8 <_isatty_r+0x20>)
  404a9c:	2300      	movs	r3, #0
  404a9e:	4605      	mov	r5, r0
  404aa0:	4608      	mov	r0, r1
  404aa2:	6023      	str	r3, [r4, #0]
  404aa4:	f7fc fdc0 	bl	401628 <_isatty>
  404aa8:	1c43      	adds	r3, r0, #1
  404aaa:	d000      	beq.n	404aae <_isatty_r+0x16>
  404aac:	bd38      	pop	{r3, r4, r5, pc}
  404aae:	6823      	ldr	r3, [r4, #0]
  404ab0:	2b00      	cmp	r3, #0
  404ab2:	d0fb      	beq.n	404aac <_isatty_r+0x14>
  404ab4:	602b      	str	r3, [r5, #0]
  404ab6:	bd38      	pop	{r3, r4, r5, pc}
  404ab8:	20000950 	.word	0x20000950

00404abc <_lseek_r>:
  404abc:	b570      	push	{r4, r5, r6, lr}
  404abe:	460d      	mov	r5, r1
  404ac0:	4c08      	ldr	r4, [pc, #32]	; (404ae4 <_lseek_r+0x28>)
  404ac2:	4611      	mov	r1, r2
  404ac4:	4606      	mov	r6, r0
  404ac6:	461a      	mov	r2, r3
  404ac8:	4628      	mov	r0, r5
  404aca:	2300      	movs	r3, #0
  404acc:	6023      	str	r3, [r4, #0]
  404ace:	f7fc fdb5 	bl	40163c <_lseek>
  404ad2:	1c43      	adds	r3, r0, #1
  404ad4:	d000      	beq.n	404ad8 <_lseek_r+0x1c>
  404ad6:	bd70      	pop	{r4, r5, r6, pc}
  404ad8:	6823      	ldr	r3, [r4, #0]
  404ada:	2b00      	cmp	r3, #0
  404adc:	d0fb      	beq.n	404ad6 <_lseek_r+0x1a>
  404ade:	6033      	str	r3, [r6, #0]
  404ae0:	bd70      	pop	{r4, r5, r6, pc}
  404ae2:	bf00      	nop
  404ae4:	20000950 	.word	0x20000950

00404ae8 <_read_r>:
  404ae8:	b570      	push	{r4, r5, r6, lr}
  404aea:	460d      	mov	r5, r1
  404aec:	4c08      	ldr	r4, [pc, #32]	; (404b10 <_read_r+0x28>)
  404aee:	4611      	mov	r1, r2
  404af0:	4606      	mov	r6, r0
  404af2:	461a      	mov	r2, r3
  404af4:	4628      	mov	r0, r5
  404af6:	2300      	movs	r3, #0
  404af8:	6023      	str	r3, [r4, #0]
  404afa:	f7fb fb15 	bl	400128 <_read>
  404afe:	1c43      	adds	r3, r0, #1
  404b00:	d000      	beq.n	404b04 <_read_r+0x1c>
  404b02:	bd70      	pop	{r4, r5, r6, pc}
  404b04:	6823      	ldr	r3, [r4, #0]
  404b06:	2b00      	cmp	r3, #0
  404b08:	d0fb      	beq.n	404b02 <_read_r+0x1a>
  404b0a:	6033      	str	r3, [r6, #0]
  404b0c:	bd70      	pop	{r4, r5, r6, pc}
  404b0e:	bf00      	nop
  404b10:	20000950 	.word	0x20000950
  404b14:	0a0d6425 	.word	0x0a0d6425
  404b18:	00000000 	.word	0x00000000
  404b1c:	00000043 	.word	0x00000043

00404b20 <_global_impure_ptr>:
  404b20:	20000010                                ... 

00404b24 <zeroes.6993>:
  404b24:	30303030 30303030 30303030 30303030     0000000000000000
  404b34:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  404b44:	00000000 33323130 37363534 62613938     ....0123456789ab
  404b54:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00404b64 <blanks.6992>:
  404b64:	20202020 20202020 20202020 20202020                     

00404b74 <_init>:
  404b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404b76:	bf00      	nop
  404b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404b7a:	bc08      	pop	{r3}
  404b7c:	469e      	mov	lr, r3
  404b7e:	4770      	bx	lr

00404b80 <__init_array_start>:
  404b80:	00403009 	.word	0x00403009

00404b84 <__frame_dummy_init_array_entry>:
  404b84:	004000f1                                ..@.

00404b88 <_fini>:
  404b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404b8a:	bf00      	nop
  404b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404b8e:	bc08      	pop	{r3}
  404b90:	469e      	mov	lr, r3
  404b92:	4770      	bx	lr

00404b94 <__fini_array_start>:
  404b94:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	4b1c 0040 0000 0000 0000 0000 0000 0000     .K@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <_impure_ptr>:
20000438:	0010 2000                                   ... 

2000043c <lc_ctype_charset>:
2000043c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2000045c <__mb_cur_max>:
2000045c:	0001 0000                                   ....

20000460 <__malloc_av_>:
	...
20000468:	0460 2000 0460 2000 0468 2000 0468 2000     `.. `.. h.. h.. 
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 

20000868 <__malloc_trim_threshold>:
20000868:	0000 0002                                   ....

2000086c <__malloc_sbrk_base>:
2000086c:	ffff ffff                                   ....

20000870 <__wctomb>:
20000870:	48dd 0040                                   .H@.
