
SAMGELHEALERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004190  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  00404190  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000480  20000844  004049d4  00020844  2**2
                  ALLOC
  3 .stack        00003004  20000cc4  00404e54  00020844  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002086e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000b536  00000000  00000000  000208c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c06  00000000  00000000  0002bdfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006334  00000000  00000000  0002da03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ad8  00000000  00000000  00033d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009d8  00000000  00000000  0003480f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013c73  00000000  00000000  000351e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c900  00000000  00000000  00048e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004f878  00000000  00000000  0005575a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000034a4  00000000  00000000  000a4fd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003cc8 	.word	0x20003cc8
  400004:	00401919 	.word	0x00401919
  400008:	004019e1 	.word	0x004019e1
  40000c:	004019e1 	.word	0x004019e1
  400010:	004019e1 	.word	0x004019e1
  400014:	004019e1 	.word	0x004019e1
  400018:	004019e1 	.word	0x004019e1
	...
  40002c:	004019e1 	.word	0x004019e1
  400030:	004019e1 	.word	0x004019e1
  400034:	00000000 	.word	0x00000000
  400038:	004019e1 	.word	0x004019e1
  40003c:	004021f1 	.word	0x004021f1
  400040:	004019e1 	.word	0x004019e1
  400044:	004019e1 	.word	0x004019e1
  400048:	004019e1 	.word	0x004019e1
  40004c:	004019e1 	.word	0x004019e1
  400050:	004019e1 	.word	0x004019e1
  400054:	004019e1 	.word	0x004019e1
  400058:	004019e1 	.word	0x004019e1
  40005c:	004019e1 	.word	0x004019e1
  400060:	004019e1 	.word	0x004019e1
  400064:	004019e1 	.word	0x004019e1
  400068:	00000000 	.word	0x00000000
  40006c:	0040073d 	.word	0x0040073d
  400070:	00400755 	.word	0x00400755
  400074:	0040076d 	.word	0x0040076d
  400078:	004019e1 	.word	0x004019e1
  40007c:	004019e1 	.word	0x004019e1
	...
  400088:	004019e1 	.word	0x004019e1
  40008c:	004019e1 	.word	0x004019e1
  400090:	004019e1 	.word	0x004019e1
  400094:	004019e1 	.word	0x004019e1
  400098:	004019e1 	.word	0x004019e1
  40009c:	004019e1 	.word	0x004019e1
  4000a0:	004019e1 	.word	0x004019e1
  4000a4:	004019e1 	.word	0x004019e1
  4000a8:	004019e1 	.word	0x004019e1
  4000ac:	004019e1 	.word	0x004019e1
  4000b0:	004019e1 	.word	0x004019e1
  4000b4:	004019e1 	.word	0x004019e1
  4000b8:	004019e1 	.word	0x004019e1
  4000bc:	004019e1 	.word	0x004019e1
  4000c0:	004019e1 	.word	0x004019e1
  4000c4:	004019e1 	.word	0x004019e1
  4000c8:	004019e1 	.word	0x004019e1

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000844 	.word	0x20000844
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404190 	.word	0x00404190

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000848 	.word	0x20000848
  40011c:	00404190 	.word	0x00404190
  400120:	00404190 	.word	0x00404190
  400124:	00000000 	.word	0x00000000

00400128 <CBuffGetRxBytes>:

 #include <asf.h>
 #include "cBuff.h"

  uint32_t CBuffGetRxBytes(struct cBuff_t *cbuff)
 {
  400128:	b480      	push	{r7}
  40012a:	b085      	sub	sp, #20
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	uint32_t recvdBytes;

	if(cbuff->wPtr>cbuff->rPtr)
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
  400136:	687b      	ldr	r3, [r7, #4]
  400138:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  40013c:	429a      	cmp	r2, r3
  40013e:	d909      	bls.n	400154 <CBuffGetRxBytes+0x2c>
	{
		recvdBytes = (cbuff->wPtr - cbuff->rPtr);
  400140:	687b      	ldr	r3, [r7, #4]
  400142:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
  400146:	461a      	mov	r2, r3
  400148:	687b      	ldr	r3, [r7, #4]
  40014a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  40014e:	1ad3      	subs	r3, r2, r3
  400150:	60fb      	str	r3, [r7, #12]
  400152:	e014      	b.n	40017e <CBuffGetRxBytes+0x56>
	}
	else if(cbuff->wPtr<cbuff->rPtr)
  400154:	687b      	ldr	r3, [r7, #4]
  400156:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
  40015a:	687b      	ldr	r3, [r7, #4]
  40015c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  400160:	429a      	cmp	r2, r3
  400162:	d20a      	bcs.n	40017a <CBuffGetRxBytes+0x52>
	{
		recvdBytes = (CBUFF_SIZE - cbuff->rPtr) + cbuff->wPtr;
  400164:	687b      	ldr	r3, [r7, #4]
  400166:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  40016a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  40016e:	687a      	ldr	r2, [r7, #4]
  400170:	f892 2065 	ldrb.w	r2, [r2, #101]	; 0x65
  400174:	4413      	add	r3, r2
  400176:	60fb      	str	r3, [r7, #12]
  400178:	e001      	b.n	40017e <CBuffGetRxBytes+0x56>
	}
	else
	{
		recvdBytes = 0;
  40017a:	2300      	movs	r3, #0
  40017c:	60fb      	str	r3, [r7, #12]
	}
 }
  40017e:	bf00      	nop
  400180:	4618      	mov	r0, r3
  400182:	3714      	adds	r7, #20
  400184:	46bd      	mov	sp, r7
  400186:	bc80      	pop	{r7}
  400188:	4770      	bx	lr
  40018a:	bf00      	nop

0040018c <CBuffReadByte>:
 
 CBUFF_TYPE CBuffReadByte(struct cBuff_t *cbuff)
 {
  40018c:	b480      	push	{r7}
  40018e:	b085      	sub	sp, #20
  400190:	af00      	add	r7, sp, #0
  400192:	6078      	str	r0, [r7, #4]
	CBUFF_TYPE retVal;

	retVal = cbuff->buff[cbuff->rPtr++];
  400194:	687b      	ldr	r3, [r7, #4]
  400196:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  40019a:	1c5a      	adds	r2, r3, #1
  40019c:	b2d1      	uxtb	r1, r2
  40019e:	687a      	ldr	r2, [r7, #4]
  4001a0:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
  4001a4:	461a      	mov	r2, r3
  4001a6:	687b      	ldr	r3, [r7, #4]
  4001a8:	5c9b      	ldrb	r3, [r3, r2]
  4001aa:	73fb      	strb	r3, [r7, #15]
	if(cbuff->rPtr>(CBUFF_SIZE-1))
  4001ac:	687b      	ldr	r3, [r7, #4]
  4001ae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  4001b2:	2b63      	cmp	r3, #99	; 0x63
  4001b4:	d903      	bls.n	4001be <CBuffReadByte+0x32>
	{
		cbuff->rPtr = 0;
  4001b6:	687b      	ldr	r3, [r7, #4]
  4001b8:	2200      	movs	r2, #0
  4001ba:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	}
	return retVal;
  4001be:	7bfb      	ldrb	r3, [r7, #15]
 }
  4001c0:	4618      	mov	r0, r3
  4001c2:	3714      	adds	r7, #20
  4001c4:	46bd      	mov	sp, r7
  4001c6:	bc80      	pop	{r7}
  4001c8:	4770      	bx	lr
  4001ca:	bf00      	nop

004001cc <CBuffWriteByte>:
  
 void CBuffWriteByte(struct cBuff_t *cbuff, CBUFF_TYPE dByte)
 {
  4001cc:	b480      	push	{r7}
  4001ce:	b083      	sub	sp, #12
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	6078      	str	r0, [r7, #4]
  4001d4:	460b      	mov	r3, r1
  4001d6:	70fb      	strb	r3, [r7, #3]
	cbuff->buff[cbuff->wPtr++] = dByte;
  4001d8:	687b      	ldr	r3, [r7, #4]
  4001da:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
  4001de:	1c5a      	adds	r2, r3, #1
  4001e0:	b2d1      	uxtb	r1, r2
  4001e2:	687a      	ldr	r2, [r7, #4]
  4001e4:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
  4001e8:	4619      	mov	r1, r3
  4001ea:	687b      	ldr	r3, [r7, #4]
  4001ec:	78fa      	ldrb	r2, [r7, #3]
  4001ee:	545a      	strb	r2, [r3, r1]
	if(cbuff->wPtr>(CBUFF_SIZE-1))
  4001f0:	687b      	ldr	r3, [r7, #4]
  4001f2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
  4001f6:	2b63      	cmp	r3, #99	; 0x63
  4001f8:	d903      	bls.n	400202 <CBuffWriteByte+0x36>
	{
		cbuff->wPtr = 0;
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	2200      	movs	r2, #0
  4001fe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	}
  400202:	bf00      	nop
  400204:	370c      	adds	r7, #12
  400206:	46bd      	mov	sp, r7
  400208:	bc80      	pop	{r7}
  40020a:	4770      	bx	lr

0040020c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40020c:	b480      	push	{r7}
  40020e:	b083      	sub	sp, #12
  400210:	af00      	add	r7, sp, #0
  400212:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400214:	687b      	ldr	r3, [r7, #4]
  400216:	2b07      	cmp	r3, #7
  400218:	d825      	bhi.n	400266 <osc_get_rate+0x5a>
  40021a:	a201      	add	r2, pc, #4	; (adr r2, 400220 <osc_get_rate+0x14>)
  40021c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400220:	00400241 	.word	0x00400241
  400224:	00400247 	.word	0x00400247
  400228:	0040024d 	.word	0x0040024d
  40022c:	00400253 	.word	0x00400253
  400230:	00400257 	.word	0x00400257
  400234:	0040025b 	.word	0x0040025b
  400238:	0040025f 	.word	0x0040025f
  40023c:	00400263 	.word	0x00400263
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400240:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400244:	e010      	b.n	400268 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40024a:	e00d      	b.n	400268 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40024c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400250:	e00a      	b.n	400268 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400252:	4b08      	ldr	r3, [pc, #32]	; (400274 <osc_get_rate+0x68>)
  400254:	e008      	b.n	400268 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400256:	4b08      	ldr	r3, [pc, #32]	; (400278 <osc_get_rate+0x6c>)
  400258:	e006      	b.n	400268 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40025a:	4b08      	ldr	r3, [pc, #32]	; (40027c <osc_get_rate+0x70>)
  40025c:	e004      	b.n	400268 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40025e:	4b07      	ldr	r3, [pc, #28]	; (40027c <osc_get_rate+0x70>)
  400260:	e002      	b.n	400268 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400262:	4b06      	ldr	r3, [pc, #24]	; (40027c <osc_get_rate+0x70>)
  400264:	e000      	b.n	400268 <osc_get_rate+0x5c>
	}

	return 0;
  400266:	2300      	movs	r3, #0
}
  400268:	4618      	mov	r0, r3
  40026a:	370c      	adds	r7, #12
  40026c:	46bd      	mov	sp, r7
  40026e:	bc80      	pop	{r7}
  400270:	4770      	bx	lr
  400272:	bf00      	nop
  400274:	003d0900 	.word	0x003d0900
  400278:	007a1200 	.word	0x007a1200
  40027c:	00b71b00 	.word	0x00b71b00

00400280 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400280:	b580      	push	{r7, lr}
  400282:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400284:	2006      	movs	r0, #6
  400286:	4b04      	ldr	r3, [pc, #16]	; (400298 <sysclk_get_main_hz+0x18>)
  400288:	4798      	blx	r3
  40028a:	4602      	mov	r2, r0
  40028c:	4613      	mov	r3, r2
  40028e:	009b      	lsls	r3, r3, #2
  400290:	4413      	add	r3, r2
  400292:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400294:	4618      	mov	r0, r3
  400296:	bd80      	pop	{r7, pc}
  400298:	0040020d 	.word	0x0040020d

0040029c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40029c:	b580      	push	{r7, lr}
  40029e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4002a0:	4b02      	ldr	r3, [pc, #8]	; (4002ac <sysclk_get_peripheral_hz+0x10>)
  4002a2:	4798      	blx	r3
  4002a4:	4603      	mov	r3, r0
  4002a6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4002a8:	4618      	mov	r0, r3
  4002aa:	bd80      	pop	{r7, pc}
  4002ac:	00400281 	.word	0x00400281

004002b0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4002b0:	b580      	push	{r7, lr}
  4002b2:	b082      	sub	sp, #8
  4002b4:	af00      	add	r7, sp, #0
  4002b6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4002b8:	6878      	ldr	r0, [r7, #4]
  4002ba:	4b03      	ldr	r3, [pc, #12]	; (4002c8 <sysclk_enable_peripheral_clock+0x18>)
  4002bc:	4798      	blx	r3
}
  4002be:	bf00      	nop
  4002c0:	3708      	adds	r7, #8
  4002c2:	46bd      	mov	sp, r7
  4002c4:	bd80      	pop	{r7, pc}
  4002c6:	bf00      	nop
  4002c8:	0040180d 	.word	0x0040180d

004002cc <SenInitUsart>:
 pdc_packet_t pdcPkt;// pdcPkt2;
 /* Pointer to PDC register base. */
 Pdc *sen1PdcBase, *sen2PdcBase;

 void SenInitUsart(void)
 {
  4002cc:	b5b0      	push	{r4, r5, r7, lr}
  4002ce:	b086      	sub	sp, #24
  4002d0:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  4002d2:	4b30      	ldr	r3, [pc, #192]	; (400394 <SenInitUsart+0xc8>)
  4002d4:	463c      	mov	r4, r7
  4002d6:	461d      	mov	r5, r3
  4002d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4002da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4002dc:	e895 0003 	ldmia.w	r5, {r0, r1}
  4002e0:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(SEN1_USART_ID);
  4002e4:	200f      	movs	r0, #15
  4002e6:	4b2c      	ldr	r3, [pc, #176]	; (400398 <SenInitUsart+0xcc>)
  4002e8:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs232(SEN1_USART, &usart_console_settings,
  4002ea:	4b2c      	ldr	r3, [pc, #176]	; (40039c <SenInitUsart+0xd0>)
  4002ec:	4798      	blx	r3
  4002ee:	4602      	mov	r2, r0
  4002f0:	463b      	mov	r3, r7
  4002f2:	4619      	mov	r1, r3
  4002f4:	482a      	ldr	r0, [pc, #168]	; (4003a0 <SenInitUsart+0xd4>)
  4002f6:	4b2b      	ldr	r3, [pc, #172]	; (4003a4 <SenInitUsart+0xd8>)
  4002f8:	4798      	blx	r3
	 sysclk_get_peripheral_hz());

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(SEN2_USART_ID);
  4002fa:	200e      	movs	r0, #14
  4002fc:	4b26      	ldr	r3, [pc, #152]	; (400398 <SenInitUsart+0xcc>)
  4002fe:	4798      	blx	r3
	/* Configure USART in RS485 mode. */
	usart_init_rs232(SEN2_USART, &usart_console_settings,
  400300:	4b26      	ldr	r3, [pc, #152]	; (40039c <SenInitUsart+0xd0>)
  400302:	4798      	blx	r3
  400304:	4602      	mov	r2, r0
  400306:	463b      	mov	r3, r7
  400308:	4619      	mov	r1, r3
  40030a:	4827      	ldr	r0, [pc, #156]	; (4003a8 <SenInitUsart+0xdc>)
  40030c:	4b25      	ldr	r3, [pc, #148]	; (4003a4 <SenInitUsart+0xd8>)
  40030e:	4798      	blx	r3
		sysclk_get_peripheral_hz());

	 /* Enable RX function. */
	 usart_disable_tx(SEN1_USART);
  400310:	4823      	ldr	r0, [pc, #140]	; (4003a0 <SenInitUsart+0xd4>)
  400312:	4b26      	ldr	r3, [pc, #152]	; (4003ac <SenInitUsart+0xe0>)
  400314:	4798      	blx	r3
	 usart_enable_rx(SEN1_USART);
  400316:	4822      	ldr	r0, [pc, #136]	; (4003a0 <SenInitUsart+0xd4>)
  400318:	4b25      	ldr	r3, [pc, #148]	; (4003b0 <SenInitUsart+0xe4>)
  40031a:	4798      	blx	r3
	 usart_disable_tx(SEN2_USART);
  40031c:	4822      	ldr	r0, [pc, #136]	; (4003a8 <SenInitUsart+0xdc>)
  40031e:	4b23      	ldr	r3, [pc, #140]	; (4003ac <SenInitUsart+0xe0>)
  400320:	4798      	blx	r3
	 usart_enable_rx(SEN2_USART);
  400322:	4821      	ldr	r0, [pc, #132]	; (4003a8 <SenInitUsart+0xdc>)
  400324:	4b22      	ldr	r3, [pc, #136]	; (4003b0 <SenInitUsart+0xe4>)
  400326:	4798      	blx	r3

	/* Get board USART PDC base address and enable receiver and transmitter. */
	sen1PdcBase = usart_get_pdc_base(SEN1_USART);
  400328:	481d      	ldr	r0, [pc, #116]	; (4003a0 <SenInitUsart+0xd4>)
  40032a:	4b22      	ldr	r3, [pc, #136]	; (4003b4 <SenInitUsart+0xe8>)
  40032c:	4798      	blx	r3
  40032e:	4602      	mov	r2, r0
  400330:	4b21      	ldr	r3, [pc, #132]	; (4003b8 <SenInitUsart+0xec>)
  400332:	601a      	str	r2, [r3, #0]
	pdc_enable_transfer(sen1PdcBase, PERIPH_PTCR_RXTEN);
  400334:	4b20      	ldr	r3, [pc, #128]	; (4003b8 <SenInitUsart+0xec>)
  400336:	681b      	ldr	r3, [r3, #0]
  400338:	2101      	movs	r1, #1
  40033a:	4618      	mov	r0, r3
  40033c:	4b1f      	ldr	r3, [pc, #124]	; (4003bc <SenInitUsart+0xf0>)
  40033e:	4798      	blx	r3

	sen2PdcBase = usart_get_pdc_base(SEN2_USART);
  400340:	4819      	ldr	r0, [pc, #100]	; (4003a8 <SenInitUsart+0xdc>)
  400342:	4b1c      	ldr	r3, [pc, #112]	; (4003b4 <SenInitUsart+0xe8>)
  400344:	4798      	blx	r3
  400346:	4602      	mov	r2, r0
  400348:	4b1d      	ldr	r3, [pc, #116]	; (4003c0 <SenInitUsart+0xf4>)
  40034a:	601a      	str	r2, [r3, #0]
	pdc_enable_transfer(sen2PdcBase, PERIPH_PTCR_RXTEN);
  40034c:	4b1c      	ldr	r3, [pc, #112]	; (4003c0 <SenInitUsart+0xf4>)
  40034e:	681b      	ldr	r3, [r3, #0]
  400350:	2101      	movs	r1, #1
  400352:	4618      	mov	r0, r3
  400354:	4b19      	ldr	r3, [pc, #100]	; (4003bc <SenInitUsart+0xf0>)
  400356:	4798      	blx	r3
	
	pdcPkt.ul_addr = (uint32_t) sen1Buff;
  400358:	4a1a      	ldr	r2, [pc, #104]	; (4003c4 <SenInitUsart+0xf8>)
  40035a:	4b1b      	ldr	r3, [pc, #108]	; (4003c8 <SenInitUsart+0xfc>)
  40035c:	601a      	str	r2, [r3, #0]
	pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  40035e:	4b1a      	ldr	r3, [pc, #104]	; (4003c8 <SenInitUsart+0xfc>)
  400360:	22c8      	movs	r2, #200	; 0xc8
  400362:	605a      	str	r2, [r3, #4]
	//For circular buffer operation
	pdc_rx_init(sen1PdcBase, &pdcPkt, &pdcPkt);
  400364:	4b14      	ldr	r3, [pc, #80]	; (4003b8 <SenInitUsart+0xec>)
  400366:	681b      	ldr	r3, [r3, #0]
  400368:	4a17      	ldr	r2, [pc, #92]	; (4003c8 <SenInitUsart+0xfc>)
  40036a:	4917      	ldr	r1, [pc, #92]	; (4003c8 <SenInitUsart+0xfc>)
  40036c:	4618      	mov	r0, r3
  40036e:	4b17      	ldr	r3, [pc, #92]	; (4003cc <SenInitUsart+0x100>)
  400370:	4798      	blx	r3

	pdcPkt.ul_addr = (uint32_t) sen2Buff;
  400372:	4a17      	ldr	r2, [pc, #92]	; (4003d0 <SenInitUsart+0x104>)
  400374:	4b14      	ldr	r3, [pc, #80]	; (4003c8 <SenInitUsart+0xfc>)
  400376:	601a      	str	r2, [r3, #0]
	pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  400378:	4b13      	ldr	r3, [pc, #76]	; (4003c8 <SenInitUsart+0xfc>)
  40037a:	22c8      	movs	r2, #200	; 0xc8
  40037c:	605a      	str	r2, [r3, #4]
	//For circular buffer operation
	pdc_rx_init(sen2PdcBase, &pdcPkt, &pdcPkt);
  40037e:	4b10      	ldr	r3, [pc, #64]	; (4003c0 <SenInitUsart+0xf4>)
  400380:	681b      	ldr	r3, [r3, #0]
  400382:	4a11      	ldr	r2, [pc, #68]	; (4003c8 <SenInitUsart+0xfc>)
  400384:	4910      	ldr	r1, [pc, #64]	; (4003c8 <SenInitUsart+0xfc>)
  400386:	4618      	mov	r0, r3
  400388:	4b10      	ldr	r3, [pc, #64]	; (4003cc <SenInitUsart+0x100>)
  40038a:	4798      	blx	r3

 }
  40038c:	bf00      	nop
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bdb0      	pop	{r4, r5, r7, pc}
  400394:	0040414c 	.word	0x0040414c
  400398:	004002b1 	.word	0x004002b1
  40039c:	0040029d 	.word	0x0040029d
  4003a0:	40028000 	.word	0x40028000
  4003a4:	004009b1 	.word	0x004009b1
  4003a8:	40024000 	.word	0x40024000
  4003ac:	00400a4d 	.word	0x00400a4d
  4003b0:	00400a7d 	.word	0x00400a7d
  4003b4:	00400b65 	.word	0x00400b65
  4003b8:	20000ac0 	.word	0x20000ac0
  4003bc:	00400fad 	.word	0x00400fad
  4003c0:	20000abc 	.word	0x20000abc
  4003c4:	20000860 	.word	0x20000860
  4003c8:	20000ab4 	.word	0x20000ab4
  4003cc:	00400f69 	.word	0x00400f69
  4003d0:	20000928 	.word	0x20000928

004003d4 <SenPdcManageBuff>:

 void SenPdcManageBuff(void)
 {
  4003d4:	b580      	push	{r7, lr}
  4003d6:	af00      	add	r7, sp, #0
	/* If PDC receive next pointer is 0 */
	if(pdc_read_rx_next_counter(sen1PdcBase)==0)
  4003d8:	4b21      	ldr	r3, [pc, #132]	; (400460 <SenPdcManageBuff+0x8c>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	4618      	mov	r0, r3
  4003de:	4b21      	ldr	r3, [pc, #132]	; (400464 <SenPdcManageBuff+0x90>)
  4003e0:	4798      	blx	r3
  4003e2:	4603      	mov	r3, r0
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	d10c      	bne.n	400402 <SenPdcManageBuff+0x2e>
	{
		/* If code reaches here it means current buffer is full and 
		next buffer ptr is assigned to current buffer ptr by PDC. */
		pdcPkt.ul_addr = (uint32_t) sen1Buff;
  4003e8:	4a1f      	ldr	r2, [pc, #124]	; (400468 <SenPdcManageBuff+0x94>)
  4003ea:	4b20      	ldr	r3, [pc, #128]	; (40046c <SenPdcManageBuff+0x98>)
  4003ec:	601a      	str	r2, [r3, #0]
		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  4003ee:	4b1f      	ldr	r3, [pc, #124]	; (40046c <SenPdcManageBuff+0x98>)
  4003f0:	22c8      	movs	r2, #200	; 0xc8
  4003f2:	605a      	str	r2, [r3, #4]
		//For circular buffer operation infinitely
		pdc_rx_init(sen1PdcBase, NULL, &pdcPkt);
  4003f4:	4b1a      	ldr	r3, [pc, #104]	; (400460 <SenPdcManageBuff+0x8c>)
  4003f6:	681b      	ldr	r3, [r3, #0]
  4003f8:	4a1c      	ldr	r2, [pc, #112]	; (40046c <SenPdcManageBuff+0x98>)
  4003fa:	2100      	movs	r1, #0
  4003fc:	4618      	mov	r0, r3
  4003fe:	4b1c      	ldr	r3, [pc, #112]	; (400470 <SenPdcManageBuff+0x9c>)
  400400:	4798      	blx	r3
	}
	sen1Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen1PdcBase);
  400402:	4b17      	ldr	r3, [pc, #92]	; (400460 <SenPdcManageBuff+0x8c>)
  400404:	681b      	ldr	r3, [r3, #0]
  400406:	4618      	mov	r0, r3
  400408:	4b1a      	ldr	r3, [pc, #104]	; (400474 <SenPdcManageBuff+0xa0>)
  40040a:	4798      	blx	r3
  40040c:	4603      	mov	r3, r0
  40040e:	b29b      	uxth	r3, r3
  400410:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400414:	b29a      	uxth	r2, r3
  400416:	4b18      	ldr	r3, [pc, #96]	; (400478 <SenPdcManageBuff+0xa4>)
  400418:	801a      	strh	r2, [r3, #0]

	/* If PDC receive next pointer is 0 */
	if(pdc_read_rx_next_counter(sen2PdcBase)==0)
  40041a:	4b18      	ldr	r3, [pc, #96]	; (40047c <SenPdcManageBuff+0xa8>)
  40041c:	681b      	ldr	r3, [r3, #0]
  40041e:	4618      	mov	r0, r3
  400420:	4b10      	ldr	r3, [pc, #64]	; (400464 <SenPdcManageBuff+0x90>)
  400422:	4798      	blx	r3
  400424:	4603      	mov	r3, r0
  400426:	2b00      	cmp	r3, #0
  400428:	d10c      	bne.n	400444 <SenPdcManageBuff+0x70>
	{
		/* If code reaches here it means current buffer is full and 
		next buffer ptr is assigned to current buffer ptr by PDC. */
		pdcPkt.ul_addr = (uint32_t) sen2Buff;
  40042a:	4a15      	ldr	r2, [pc, #84]	; (400480 <SenPdcManageBuff+0xac>)
  40042c:	4b0f      	ldr	r3, [pc, #60]	; (40046c <SenPdcManageBuff+0x98>)
  40042e:	601a      	str	r2, [r3, #0]
		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  400430:	4b0e      	ldr	r3, [pc, #56]	; (40046c <SenPdcManageBuff+0x98>)
  400432:	22c8      	movs	r2, #200	; 0xc8
  400434:	605a      	str	r2, [r3, #4]
		//For circular buffer operation infinitely
		pdc_rx_init(sen2PdcBase, NULL, &pdcPkt);
  400436:	4b11      	ldr	r3, [pc, #68]	; (40047c <SenPdcManageBuff+0xa8>)
  400438:	681b      	ldr	r3, [r3, #0]
  40043a:	4a0c      	ldr	r2, [pc, #48]	; (40046c <SenPdcManageBuff+0x98>)
  40043c:	2100      	movs	r1, #0
  40043e:	4618      	mov	r0, r3
  400440:	4b0b      	ldr	r3, [pc, #44]	; (400470 <SenPdcManageBuff+0x9c>)
  400442:	4798      	blx	r3
	}
	sen2Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen2PdcBase);
  400444:	4b0d      	ldr	r3, [pc, #52]	; (40047c <SenPdcManageBuff+0xa8>)
  400446:	681b      	ldr	r3, [r3, #0]
  400448:	4618      	mov	r0, r3
  40044a:	4b0a      	ldr	r3, [pc, #40]	; (400474 <SenPdcManageBuff+0xa0>)
  40044c:	4798      	blx	r3
  40044e:	4603      	mov	r3, r0
  400450:	b29b      	uxth	r3, r3
  400452:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400456:	b29a      	uxth	r2, r3
  400458:	4b0a      	ldr	r3, [pc, #40]	; (400484 <SenPdcManageBuff+0xb0>)
  40045a:	801a      	strh	r2, [r3, #0]
 }
  40045c:	bf00      	nop
  40045e:	bd80      	pop	{r7, pc}
  400460:	20000ac0 	.word	0x20000ac0
  400464:	00400fe5 	.word	0x00400fe5
  400468:	20000860 	.word	0x20000860
  40046c:	20000ab4 	.word	0x20000ab4
  400470:	00400f69 	.word	0x00400f69
  400474:	00400fcd 	.word	0x00400fcd
  400478:	200009f4 	.word	0x200009f4
  40047c:	20000abc 	.word	0x20000abc
  400480:	20000928 	.word	0x20000928
  400484:	200009f6 	.word	0x200009f6

00400488 <SenGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t SenGetRxBytes(uint8_t senNo)
 {
  400488:	b480      	push	{r7}
  40048a:	b085      	sub	sp, #20
  40048c:	af00      	add	r7, sp, #0
  40048e:	4603      	mov	r3, r0
  400490:	71fb      	strb	r3, [r7, #7]
	uint32_t recvdBytes;
	if(senNo == 1)
  400492:	79fb      	ldrb	r3, [r7, #7]
  400494:	2b01      	cmp	r3, #1
  400496:	d11f      	bne.n	4004d8 <SenGetRxBytes+0x50>
	{
		if(sen1Wptr>sen1Rptr)
  400498:	4b22      	ldr	r3, [pc, #136]	; (400524 <SenGetRxBytes+0x9c>)
  40049a:	881a      	ldrh	r2, [r3, #0]
  40049c:	4b22      	ldr	r3, [pc, #136]	; (400528 <SenGetRxBytes+0xa0>)
  40049e:	881b      	ldrh	r3, [r3, #0]
  4004a0:	429a      	cmp	r2, r3
  4004a2:	d907      	bls.n	4004b4 <SenGetRxBytes+0x2c>
		{
			recvdBytes = (sen1Wptr-sen1Rptr);
  4004a4:	4b1f      	ldr	r3, [pc, #124]	; (400524 <SenGetRxBytes+0x9c>)
  4004a6:	881b      	ldrh	r3, [r3, #0]
  4004a8:	461a      	mov	r2, r3
  4004aa:	4b1f      	ldr	r3, [pc, #124]	; (400528 <SenGetRxBytes+0xa0>)
  4004ac:	881b      	ldrh	r3, [r3, #0]
  4004ae:	1ad3      	subs	r3, r2, r3
  4004b0:	60fb      	str	r3, [r7, #12]
  4004b2:	e030      	b.n	400516 <SenGetRxBytes+0x8e>
		}
		else if(sen1Wptr<sen1Rptr)
  4004b4:	4b1b      	ldr	r3, [pc, #108]	; (400524 <SenGetRxBytes+0x9c>)
  4004b6:	881a      	ldrh	r2, [r3, #0]
  4004b8:	4b1b      	ldr	r3, [pc, #108]	; (400528 <SenGetRxBytes+0xa0>)
  4004ba:	881b      	ldrh	r3, [r3, #0]
  4004bc:	429a      	cmp	r2, r3
  4004be:	d208      	bcs.n	4004d2 <SenGetRxBytes+0x4a>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen1Rptr) + sen1Wptr;
  4004c0:	4b19      	ldr	r3, [pc, #100]	; (400528 <SenGetRxBytes+0xa0>)
  4004c2:	881b      	ldrh	r3, [r3, #0]
  4004c4:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  4004c8:	4a16      	ldr	r2, [pc, #88]	; (400524 <SenGetRxBytes+0x9c>)
  4004ca:	8812      	ldrh	r2, [r2, #0]
  4004cc:	4413      	add	r3, r2
  4004ce:	60fb      	str	r3, [r7, #12]
  4004d0:	e021      	b.n	400516 <SenGetRxBytes+0x8e>
		}
		else
		{
			recvdBytes = 0;
  4004d2:	2300      	movs	r3, #0
  4004d4:	60fb      	str	r3, [r7, #12]
  4004d6:	e01e      	b.n	400516 <SenGetRxBytes+0x8e>
		}
	}
	else
	{
		if(sen2Wptr>sen2Rptr)
  4004d8:	4b14      	ldr	r3, [pc, #80]	; (40052c <SenGetRxBytes+0xa4>)
  4004da:	881a      	ldrh	r2, [r3, #0]
  4004dc:	4b14      	ldr	r3, [pc, #80]	; (400530 <SenGetRxBytes+0xa8>)
  4004de:	881b      	ldrh	r3, [r3, #0]
  4004e0:	429a      	cmp	r2, r3
  4004e2:	d907      	bls.n	4004f4 <SenGetRxBytes+0x6c>
		{
			recvdBytes = (sen2Wptr-sen2Rptr);
  4004e4:	4b11      	ldr	r3, [pc, #68]	; (40052c <SenGetRxBytes+0xa4>)
  4004e6:	881b      	ldrh	r3, [r3, #0]
  4004e8:	461a      	mov	r2, r3
  4004ea:	4b11      	ldr	r3, [pc, #68]	; (400530 <SenGetRxBytes+0xa8>)
  4004ec:	881b      	ldrh	r3, [r3, #0]
  4004ee:	1ad3      	subs	r3, r2, r3
  4004f0:	60fb      	str	r3, [r7, #12]
  4004f2:	e010      	b.n	400516 <SenGetRxBytes+0x8e>
		}
		else if(sen2Wptr<sen2Rptr)
  4004f4:	4b0d      	ldr	r3, [pc, #52]	; (40052c <SenGetRxBytes+0xa4>)
  4004f6:	881a      	ldrh	r2, [r3, #0]
  4004f8:	4b0d      	ldr	r3, [pc, #52]	; (400530 <SenGetRxBytes+0xa8>)
  4004fa:	881b      	ldrh	r3, [r3, #0]
  4004fc:	429a      	cmp	r2, r3
  4004fe:	d208      	bcs.n	400512 <SenGetRxBytes+0x8a>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen2Rptr) + sen2Wptr;
  400500:	4b0b      	ldr	r3, [pc, #44]	; (400530 <SenGetRxBytes+0xa8>)
  400502:	881b      	ldrh	r3, [r3, #0]
  400504:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400508:	4a08      	ldr	r2, [pc, #32]	; (40052c <SenGetRxBytes+0xa4>)
  40050a:	8812      	ldrh	r2, [r2, #0]
  40050c:	4413      	add	r3, r2
  40050e:	60fb      	str	r3, [r7, #12]
  400510:	e001      	b.n	400516 <SenGetRxBytes+0x8e>
		}
		else
		{
			recvdBytes = 0;
  400512:	2300      	movs	r3, #0
  400514:	60fb      	str	r3, [r7, #12]
		}
	}
	
	return recvdBytes;
  400516:	68fb      	ldr	r3, [r7, #12]
 }
  400518:	4618      	mov	r0, r3
  40051a:	3714      	adds	r7, #20
  40051c:	46bd      	mov	sp, r7
  40051e:	bc80      	pop	{r7}
  400520:	4770      	bx	lr
  400522:	bf00      	nop
  400524:	200009f4 	.word	0x200009f4
  400528:	200009f0 	.word	0x200009f0
  40052c:	200009f6 	.word	0x200009f6
  400530:	200009f2 	.word	0x200009f2

00400534 <SenGetByte>:

 uint8_t SenGetByte(uint8_t senNo)
 {
  400534:	b480      	push	{r7}
  400536:	b085      	sub	sp, #20
  400538:	af00      	add	r7, sp, #0
  40053a:	4603      	mov	r3, r0
  40053c:	71fb      	strb	r3, [r7, #7]
	uint8_t dataByte;
	if(senNo==1)
  40053e:	79fb      	ldrb	r3, [r7, #7]
  400540:	2b01      	cmp	r3, #1
  400542:	d111      	bne.n	400568 <SenGetByte+0x34>
	{
		dataByte = sen1Buff[sen1Rptr++];
  400544:	4b14      	ldr	r3, [pc, #80]	; (400598 <SenGetByte+0x64>)
  400546:	881b      	ldrh	r3, [r3, #0]
  400548:	1c5a      	adds	r2, r3, #1
  40054a:	b291      	uxth	r1, r2
  40054c:	4a12      	ldr	r2, [pc, #72]	; (400598 <SenGetByte+0x64>)
  40054e:	8011      	strh	r1, [r2, #0]
  400550:	461a      	mov	r2, r3
  400552:	4b12      	ldr	r3, [pc, #72]	; (40059c <SenGetByte+0x68>)
  400554:	5c9b      	ldrb	r3, [r3, r2]
  400556:	73fb      	strb	r3, [r7, #15]
		if(sen1Rptr>=SEN_USART_BUFF_SIZE)
  400558:	4b0f      	ldr	r3, [pc, #60]	; (400598 <SenGetByte+0x64>)
  40055a:	881b      	ldrh	r3, [r3, #0]
  40055c:	2bc7      	cmp	r3, #199	; 0xc7
  40055e:	d914      	bls.n	40058a <SenGetByte+0x56>
			sen1Rptr = 0;
  400560:	4b0d      	ldr	r3, [pc, #52]	; (400598 <SenGetByte+0x64>)
  400562:	2200      	movs	r2, #0
  400564:	801a      	strh	r2, [r3, #0]
  400566:	e010      	b.n	40058a <SenGetByte+0x56>
	}
	else
	{
		dataByte = sen2Buff[sen2Rptr++];
  400568:	4b0d      	ldr	r3, [pc, #52]	; (4005a0 <SenGetByte+0x6c>)
  40056a:	881b      	ldrh	r3, [r3, #0]
  40056c:	1c5a      	adds	r2, r3, #1
  40056e:	b291      	uxth	r1, r2
  400570:	4a0b      	ldr	r2, [pc, #44]	; (4005a0 <SenGetByte+0x6c>)
  400572:	8011      	strh	r1, [r2, #0]
  400574:	461a      	mov	r2, r3
  400576:	4b0b      	ldr	r3, [pc, #44]	; (4005a4 <SenGetByte+0x70>)
  400578:	5c9b      	ldrb	r3, [r3, r2]
  40057a:	73fb      	strb	r3, [r7, #15]
		if(sen2Rptr>=SEN_USART_BUFF_SIZE)
  40057c:	4b08      	ldr	r3, [pc, #32]	; (4005a0 <SenGetByte+0x6c>)
  40057e:	881b      	ldrh	r3, [r3, #0]
  400580:	2bc7      	cmp	r3, #199	; 0xc7
  400582:	d902      	bls.n	40058a <SenGetByte+0x56>
			sen2Rptr = 0;
  400584:	4b06      	ldr	r3, [pc, #24]	; (4005a0 <SenGetByte+0x6c>)
  400586:	2200      	movs	r2, #0
  400588:	801a      	strh	r2, [r3, #0]
	}
	return dataByte;
  40058a:	7bfb      	ldrb	r3, [r7, #15]
  40058c:	4618      	mov	r0, r3
  40058e:	3714      	adds	r7, #20
  400590:	46bd      	mov	sp, r7
  400592:	bc80      	pop	{r7}
  400594:	4770      	bx	lr
  400596:	bf00      	nop
  400598:	200009f0 	.word	0x200009f0
  40059c:	20000860 	.word	0x20000860
  4005a0:	200009f2 	.word	0x200009f2
  4005a4:	20000928 	.word	0x20000928

004005a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4005a8:	b580      	push	{r7, lr}
  4005aa:	b086      	sub	sp, #24
  4005ac:	af00      	add	r7, sp, #0
  4005ae:	60f8      	str	r0, [r7, #12]
  4005b0:	60b9      	str	r1, [r7, #8]
  4005b2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4005b4:	2300      	movs	r3, #0
  4005b6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4005b8:	68fb      	ldr	r3, [r7, #12]
  4005ba:	2b00      	cmp	r3, #0
  4005bc:	d012      	beq.n	4005e4 <_read+0x3c>
		return -1;
  4005be:	f04f 33ff 	mov.w	r3, #4294967295
  4005c2:	e013      	b.n	4005ec <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4005c4:	4b0b      	ldr	r3, [pc, #44]	; (4005f4 <_read+0x4c>)
  4005c6:	681b      	ldr	r3, [r3, #0]
  4005c8:	4a0b      	ldr	r2, [pc, #44]	; (4005f8 <_read+0x50>)
  4005ca:	6812      	ldr	r2, [r2, #0]
  4005cc:	68b9      	ldr	r1, [r7, #8]
  4005ce:	4610      	mov	r0, r2
  4005d0:	4798      	blx	r3
		ptr++;
  4005d2:	68bb      	ldr	r3, [r7, #8]
  4005d4:	3301      	adds	r3, #1
  4005d6:	60bb      	str	r3, [r7, #8]
		nChars++;
  4005d8:	697b      	ldr	r3, [r7, #20]
  4005da:	3301      	adds	r3, #1
  4005dc:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4005de:	687b      	ldr	r3, [r7, #4]
  4005e0:	3b01      	subs	r3, #1
  4005e2:	607b      	str	r3, [r7, #4]
  4005e4:	687b      	ldr	r3, [r7, #4]
  4005e6:	2b00      	cmp	r3, #0
  4005e8:	dcec      	bgt.n	4005c4 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4005ea:	697b      	ldr	r3, [r7, #20]
}
  4005ec:	4618      	mov	r0, r3
  4005ee:	3718      	adds	r7, #24
  4005f0:	46bd      	mov	sp, r7
  4005f2:	bd80      	pop	{r7, pc}
  4005f4:	20000ac4 	.word	0x20000ac4
  4005f8:	20000acc 	.word	0x20000acc

004005fc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4005fc:	b580      	push	{r7, lr}
  4005fe:	b086      	sub	sp, #24
  400600:	af00      	add	r7, sp, #0
  400602:	60f8      	str	r0, [r7, #12]
  400604:	60b9      	str	r1, [r7, #8]
  400606:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400608:	2300      	movs	r3, #0
  40060a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40060c:	68fb      	ldr	r3, [r7, #12]
  40060e:	2b01      	cmp	r3, #1
  400610:	d01e      	beq.n	400650 <_write+0x54>
  400612:	68fb      	ldr	r3, [r7, #12]
  400614:	2b02      	cmp	r3, #2
  400616:	d01b      	beq.n	400650 <_write+0x54>
  400618:	68fb      	ldr	r3, [r7, #12]
  40061a:	2b03      	cmp	r3, #3
  40061c:	d018      	beq.n	400650 <_write+0x54>
		return -1;
  40061e:	f04f 33ff 	mov.w	r3, #4294967295
  400622:	e019      	b.n	400658 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400624:	4b0e      	ldr	r3, [pc, #56]	; (400660 <_write+0x64>)
  400626:	681a      	ldr	r2, [r3, #0]
  400628:	4b0e      	ldr	r3, [pc, #56]	; (400664 <_write+0x68>)
  40062a:	6818      	ldr	r0, [r3, #0]
  40062c:	68bb      	ldr	r3, [r7, #8]
  40062e:	1c59      	adds	r1, r3, #1
  400630:	60b9      	str	r1, [r7, #8]
  400632:	781b      	ldrb	r3, [r3, #0]
  400634:	4619      	mov	r1, r3
  400636:	4790      	blx	r2
  400638:	4603      	mov	r3, r0
  40063a:	2b00      	cmp	r3, #0
  40063c:	da02      	bge.n	400644 <_write+0x48>
			return -1;
  40063e:	f04f 33ff 	mov.w	r3, #4294967295
  400642:	e009      	b.n	400658 <_write+0x5c>
		}
		++nChars;
  400644:	697b      	ldr	r3, [r7, #20]
  400646:	3301      	adds	r3, #1
  400648:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40064a:	687b      	ldr	r3, [r7, #4]
  40064c:	3b01      	subs	r3, #1
  40064e:	607b      	str	r3, [r7, #4]
  400650:	687b      	ldr	r3, [r7, #4]
  400652:	2b00      	cmp	r3, #0
  400654:	d1e6      	bne.n	400624 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  400656:	697b      	ldr	r3, [r7, #20]
}
  400658:	4618      	mov	r0, r3
  40065a:	3718      	adds	r7, #24
  40065c:	46bd      	mov	sp, r7
  40065e:	bd80      	pop	{r7, pc}
  400660:	20000ac8 	.word	0x20000ac8
  400664:	20000acc 	.word	0x20000acc

00400668 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400668:	b580      	push	{r7, lr}
  40066a:	b084      	sub	sp, #16
  40066c:	af00      	add	r7, sp, #0
  40066e:	6078      	str	r0, [r7, #4]
  400670:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400672:	6878      	ldr	r0, [r7, #4]
  400674:	4b2c      	ldr	r3, [pc, #176]	; (400728 <pio_handler_process+0xc0>)
  400676:	4798      	blx	r3
  400678:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40067a:	6878      	ldr	r0, [r7, #4]
  40067c:	4b2b      	ldr	r3, [pc, #172]	; (40072c <pio_handler_process+0xc4>)
  40067e:	4798      	blx	r3
  400680:	4602      	mov	r2, r0
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	4013      	ands	r3, r2
  400686:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400688:	68fb      	ldr	r3, [r7, #12]
  40068a:	2b00      	cmp	r3, #0
  40068c:	d03c      	beq.n	400708 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40068e:	2300      	movs	r3, #0
  400690:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400692:	e034      	b.n	4006fe <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400694:	4a26      	ldr	r2, [pc, #152]	; (400730 <pio_handler_process+0xc8>)
  400696:	68bb      	ldr	r3, [r7, #8]
  400698:	011b      	lsls	r3, r3, #4
  40069a:	4413      	add	r3, r2
  40069c:	681a      	ldr	r2, [r3, #0]
  40069e:	683b      	ldr	r3, [r7, #0]
  4006a0:	429a      	cmp	r2, r3
  4006a2:	d126      	bne.n	4006f2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4006a4:	4a22      	ldr	r2, [pc, #136]	; (400730 <pio_handler_process+0xc8>)
  4006a6:	68bb      	ldr	r3, [r7, #8]
  4006a8:	011b      	lsls	r3, r3, #4
  4006aa:	4413      	add	r3, r2
  4006ac:	3304      	adds	r3, #4
  4006ae:	681a      	ldr	r2, [r3, #0]
  4006b0:	68fb      	ldr	r3, [r7, #12]
  4006b2:	4013      	ands	r3, r2
  4006b4:	2b00      	cmp	r3, #0
  4006b6:	d01c      	beq.n	4006f2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4006b8:	4a1d      	ldr	r2, [pc, #116]	; (400730 <pio_handler_process+0xc8>)
  4006ba:	68bb      	ldr	r3, [r7, #8]
  4006bc:	011b      	lsls	r3, r3, #4
  4006be:	4413      	add	r3, r2
  4006c0:	330c      	adds	r3, #12
  4006c2:	681b      	ldr	r3, [r3, #0]
  4006c4:	491a      	ldr	r1, [pc, #104]	; (400730 <pio_handler_process+0xc8>)
  4006c6:	68ba      	ldr	r2, [r7, #8]
  4006c8:	0112      	lsls	r2, r2, #4
  4006ca:	440a      	add	r2, r1
  4006cc:	6810      	ldr	r0, [r2, #0]
  4006ce:	4918      	ldr	r1, [pc, #96]	; (400730 <pio_handler_process+0xc8>)
  4006d0:	68ba      	ldr	r2, [r7, #8]
  4006d2:	0112      	lsls	r2, r2, #4
  4006d4:	440a      	add	r2, r1
  4006d6:	3204      	adds	r2, #4
  4006d8:	6812      	ldr	r2, [r2, #0]
  4006da:	4611      	mov	r1, r2
  4006dc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4006de:	4a14      	ldr	r2, [pc, #80]	; (400730 <pio_handler_process+0xc8>)
  4006e0:	68bb      	ldr	r3, [r7, #8]
  4006e2:	011b      	lsls	r3, r3, #4
  4006e4:	4413      	add	r3, r2
  4006e6:	3304      	adds	r3, #4
  4006e8:	681b      	ldr	r3, [r3, #0]
  4006ea:	43db      	mvns	r3, r3
  4006ec:	68fa      	ldr	r2, [r7, #12]
  4006ee:	4013      	ands	r3, r2
  4006f0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4006f2:	68bb      	ldr	r3, [r7, #8]
  4006f4:	3301      	adds	r3, #1
  4006f6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4006f8:	68bb      	ldr	r3, [r7, #8]
  4006fa:	2b06      	cmp	r3, #6
  4006fc:	d803      	bhi.n	400706 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4006fe:	68fb      	ldr	r3, [r7, #12]
  400700:	2b00      	cmp	r3, #0
  400702:	d1c7      	bne.n	400694 <pio_handler_process+0x2c>
  400704:	e000      	b.n	400708 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400706:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400708:	4b0a      	ldr	r3, [pc, #40]	; (400734 <pio_handler_process+0xcc>)
  40070a:	681b      	ldr	r3, [r3, #0]
  40070c:	2b00      	cmp	r3, #0
  40070e:	d007      	beq.n	400720 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400710:	4b09      	ldr	r3, [pc, #36]	; (400738 <pio_handler_process+0xd0>)
  400712:	681b      	ldr	r3, [r3, #0]
  400714:	2b00      	cmp	r3, #0
  400716:	d003      	beq.n	400720 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400718:	4b07      	ldr	r3, [pc, #28]	; (400738 <pio_handler_process+0xd0>)
  40071a:	681b      	ldr	r3, [r3, #0]
  40071c:	6878      	ldr	r0, [r7, #4]
  40071e:	4798      	blx	r3
		}
	}
#endif
}
  400720:	bf00      	nop
  400722:	3710      	adds	r7, #16
  400724:	46bd      	mov	sp, r7
  400726:	bd80      	pop	{r7, pc}
  400728:	00401239 	.word	0x00401239
  40072c:	00401251 	.word	0x00401251
  400730:	200009f8 	.word	0x200009f8
  400734:	20000ad0 	.word	0x20000ad0
  400738:	20000a68 	.word	0x20000a68

0040073c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40073c:	b580      	push	{r7, lr}
  40073e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400740:	210b      	movs	r1, #11
  400742:	4802      	ldr	r0, [pc, #8]	; (40074c <PIOA_Handler+0x10>)
  400744:	4b02      	ldr	r3, [pc, #8]	; (400750 <PIOA_Handler+0x14>)
  400746:	4798      	blx	r3
}
  400748:	bf00      	nop
  40074a:	bd80      	pop	{r7, pc}
  40074c:	400e0e00 	.word	0x400e0e00
  400750:	00400669 	.word	0x00400669

00400754 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400754:	b580      	push	{r7, lr}
  400756:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400758:	210c      	movs	r1, #12
  40075a:	4802      	ldr	r0, [pc, #8]	; (400764 <PIOB_Handler+0x10>)
  40075c:	4b02      	ldr	r3, [pc, #8]	; (400768 <PIOB_Handler+0x14>)
  40075e:	4798      	blx	r3
}
  400760:	bf00      	nop
  400762:	bd80      	pop	{r7, pc}
  400764:	400e1000 	.word	0x400e1000
  400768:	00400669 	.word	0x00400669

0040076c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40076c:	b580      	push	{r7, lr}
  40076e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400770:	210d      	movs	r1, #13
  400772:	4802      	ldr	r0, [pc, #8]	; (40077c <PIOC_Handler+0x10>)
  400774:	4b02      	ldr	r3, [pc, #8]	; (400780 <PIOC_Handler+0x14>)
  400776:	4798      	blx	r3
}
  400778:	bf00      	nop
  40077a:	bd80      	pop	{r7, pc}
  40077c:	400e1200 	.word	0x400e1200
  400780:	00400669 	.word	0x00400669

00400784 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400784:	b480      	push	{r7}
  400786:	b085      	sub	sp, #20
  400788:	af00      	add	r7, sp, #0
  40078a:	6078      	str	r0, [r7, #4]
  40078c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40078e:	2300      	movs	r3, #0
  400790:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400792:	687b      	ldr	r3, [r7, #4]
  400794:	22ac      	movs	r2, #172	; 0xac
  400796:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400798:	683b      	ldr	r3, [r7, #0]
  40079a:	681a      	ldr	r2, [r3, #0]
  40079c:	683b      	ldr	r3, [r7, #0]
  40079e:	685b      	ldr	r3, [r3, #4]
  4007a0:	fbb2 f3f3 	udiv	r3, r2, r3
  4007a4:	091b      	lsrs	r3, r3, #4
  4007a6:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4007a8:	68fb      	ldr	r3, [r7, #12]
  4007aa:	2b00      	cmp	r3, #0
  4007ac:	d003      	beq.n	4007b6 <uart_init+0x32>
  4007ae:	68fb      	ldr	r3, [r7, #12]
  4007b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4007b4:	d301      	bcc.n	4007ba <uart_init+0x36>
		return 1;
  4007b6:	2301      	movs	r3, #1
  4007b8:	e00f      	b.n	4007da <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  4007ba:	687b      	ldr	r3, [r7, #4]
  4007bc:	68fa      	ldr	r2, [r7, #12]
  4007be:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4007c0:	683b      	ldr	r3, [r7, #0]
  4007c2:	689a      	ldr	r2, [r3, #8]
  4007c4:	687b      	ldr	r3, [r7, #4]
  4007c6:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4007c8:	687b      	ldr	r3, [r7, #4]
  4007ca:	f240 2202 	movw	r2, #514	; 0x202
  4007ce:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4007d2:	687b      	ldr	r3, [r7, #4]
  4007d4:	2250      	movs	r2, #80	; 0x50
  4007d6:	601a      	str	r2, [r3, #0]

	return 0;
  4007d8:	2300      	movs	r3, #0
}
  4007da:	4618      	mov	r0, r3
  4007dc:	3714      	adds	r7, #20
  4007de:	46bd      	mov	sp, r7
  4007e0:	bc80      	pop	{r7}
  4007e2:	4770      	bx	lr

004007e4 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
  4007e4:	b480      	push	{r7}
  4007e6:	b083      	sub	sp, #12
  4007e8:	af00      	add	r7, sp, #0
  4007ea:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  4007ec:	687b      	ldr	r3, [r7, #4]
  4007ee:	2240      	movs	r2, #64	; 0x40
  4007f0:	601a      	str	r2, [r3, #0]
}
  4007f2:	bf00      	nop
  4007f4:	370c      	adds	r7, #12
  4007f6:	46bd      	mov	sp, r7
  4007f8:	bc80      	pop	{r7}
  4007fa:	4770      	bx	lr

004007fc <uart_disable_rx>:
 * \brief Disable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable_rx(Uart *p_uart)
{
  4007fc:	b480      	push	{r7}
  4007fe:	b083      	sub	sp, #12
  400800:	af00      	add	r7, sp, #0
  400802:	6078      	str	r0, [r7, #4]
	/* Disable receiver */
	p_uart->UART_CR = UART_CR_RXDIS;
  400804:	687b      	ldr	r3, [r7, #4]
  400806:	2220      	movs	r2, #32
  400808:	601a      	str	r2, [r3, #0]
}
  40080a:	bf00      	nop
  40080c:	370c      	adds	r7, #12
  40080e:	46bd      	mov	sp, r7
  400810:	bc80      	pop	{r7}
  400812:	4770      	bx	lr

00400814 <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  400814:	b480      	push	{r7}
  400816:	b083      	sub	sp, #12
  400818:	af00      	add	r7, sp, #0
  40081a:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  40081c:	687b      	ldr	r3, [r7, #4]
  40081e:	695b      	ldr	r3, [r3, #20]
}
  400820:	4618      	mov	r0, r3
  400822:	370c      	adds	r7, #12
  400824:	46bd      	mov	sp, r7
  400826:	bc80      	pop	{r7}
  400828:	4770      	bx	lr
  40082a:	bf00      	nop

0040082c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  40082c:	b480      	push	{r7}
  40082e:	b083      	sub	sp, #12
  400830:	af00      	add	r7, sp, #0
  400832:	6078      	str	r0, [r7, #4]
  400834:	460b      	mov	r3, r1
  400836:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400838:	687b      	ldr	r3, [r7, #4]
  40083a:	695b      	ldr	r3, [r3, #20]
  40083c:	f003 0302 	and.w	r3, r3, #2
  400840:	2b00      	cmp	r3, #0
  400842:	d101      	bne.n	400848 <uart_write+0x1c>
		return 1;
  400844:	2301      	movs	r3, #1
  400846:	e003      	b.n	400850 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  400848:	78fa      	ldrb	r2, [r7, #3]
  40084a:	687b      	ldr	r3, [r7, #4]
  40084c:	61da      	str	r2, [r3, #28]
	return 0;
  40084e:	2300      	movs	r3, #0
}
  400850:	4618      	mov	r0, r3
  400852:	370c      	adds	r7, #12
  400854:	46bd      	mov	sp, r7
  400856:	bc80      	pop	{r7}
  400858:	4770      	bx	lr
  40085a:	bf00      	nop

0040085c <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  40085c:	b480      	push	{r7}
  40085e:	b083      	sub	sp, #12
  400860:	af00      	add	r7, sp, #0
  400862:	6078      	str	r0, [r7, #4]
  400864:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400866:	687b      	ldr	r3, [r7, #4]
  400868:	695b      	ldr	r3, [r3, #20]
  40086a:	f003 0301 	and.w	r3, r3, #1
  40086e:	2b00      	cmp	r3, #0
  400870:	d101      	bne.n	400876 <uart_read+0x1a>
		return 1;
  400872:	2301      	movs	r3, #1
  400874:	e005      	b.n	400882 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400876:	687b      	ldr	r3, [r7, #4]
  400878:	699b      	ldr	r3, [r3, #24]
  40087a:	b2da      	uxtb	r2, r3
  40087c:	683b      	ldr	r3, [r7, #0]
  40087e:	701a      	strb	r2, [r3, #0]
	return 0;
  400880:	2300      	movs	r3, #0
}
  400882:	4618      	mov	r0, r3
  400884:	370c      	adds	r7, #12
  400886:	46bd      	mov	sp, r7
  400888:	bc80      	pop	{r7}
  40088a:	4770      	bx	lr

0040088c <uart_get_pdc_base>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return UART PDC registers base for PDC driver to access.
 */
Pdc *uart_get_pdc_base(Uart *p_uart)
{
  40088c:	b480      	push	{r7}
  40088e:	b085      	sub	sp, #20
  400890:	af00      	add	r7, sp, #0
  400892:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART0)
  400894:	687b      	ldr	r3, [r7, #4]
  400896:	4a08      	ldr	r2, [pc, #32]	; (4008b8 <uart_get_pdc_base+0x2c>)
  400898:	4293      	cmp	r3, r2
  40089a:	d101      	bne.n	4008a0 <uart_get_pdc_base+0x14>
		p_pdc_base = PDC_UART0;
  40089c:	4b07      	ldr	r3, [pc, #28]	; (4008bc <uart_get_pdc_base+0x30>)
  40089e:	60fb      	str	r3, [r7, #12]
#else
#error "Unsupported device"
#endif

#if (SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART1)
  4008a0:	687b      	ldr	r3, [r7, #4]
  4008a2:	4a07      	ldr	r2, [pc, #28]	; (4008c0 <uart_get_pdc_base+0x34>)
  4008a4:	4293      	cmp	r3, r2
  4008a6:	d101      	bne.n	4008ac <uart_get_pdc_base+0x20>
		p_pdc_base = PDC_UART1;
  4008a8:	4b06      	ldr	r3, [pc, #24]	; (4008c4 <uart_get_pdc_base+0x38>)
  4008aa:	60fb      	str	r3, [r7, #12]
#if (SAM4N)
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
  4008ac:	68fb      	ldr	r3, [r7, #12]
}
  4008ae:	4618      	mov	r0, r3
  4008b0:	3714      	adds	r7, #20
  4008b2:	46bd      	mov	sp, r7
  4008b4:	bc80      	pop	{r7}
  4008b6:	4770      	bx	lr
  4008b8:	400e0600 	.word	0x400e0600
  4008bc:	400e0700 	.word	0x400e0700
  4008c0:	400e0800 	.word	0x400e0800
  4008c4:	400e0900 	.word	0x400e0900

004008c8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4008c8:	b480      	push	{r7}
  4008ca:	b089      	sub	sp, #36	; 0x24
  4008cc:	af00      	add	r7, sp, #0
  4008ce:	60f8      	str	r0, [r7, #12]
  4008d0:	60b9      	str	r1, [r7, #8]
  4008d2:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4008d4:	68bb      	ldr	r3, [r7, #8]
  4008d6:	011a      	lsls	r2, r3, #4
  4008d8:	687b      	ldr	r3, [r7, #4]
  4008da:	429a      	cmp	r2, r3
  4008dc:	d802      	bhi.n	4008e4 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4008de:	2310      	movs	r3, #16
  4008e0:	61fb      	str	r3, [r7, #28]
  4008e2:	e001      	b.n	4008e8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4008e4:	2308      	movs	r3, #8
  4008e6:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4008e8:	687b      	ldr	r3, [r7, #4]
  4008ea:	00da      	lsls	r2, r3, #3
  4008ec:	69fb      	ldr	r3, [r7, #28]
  4008ee:	68b9      	ldr	r1, [r7, #8]
  4008f0:	fb01 f303 	mul.w	r3, r1, r3
  4008f4:	085b      	lsrs	r3, r3, #1
  4008f6:	441a      	add	r2, r3
  4008f8:	69fb      	ldr	r3, [r7, #28]
  4008fa:	68b9      	ldr	r1, [r7, #8]
  4008fc:	fb01 f303 	mul.w	r3, r1, r3
  400900:	fbb2 f3f3 	udiv	r3, r2, r3
  400904:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400906:	69bb      	ldr	r3, [r7, #24]
  400908:	08db      	lsrs	r3, r3, #3
  40090a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	f003 0307 	and.w	r3, r3, #7
  400912:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400914:	697b      	ldr	r3, [r7, #20]
  400916:	2b00      	cmp	r3, #0
  400918:	d003      	beq.n	400922 <usart_set_async_baudrate+0x5a>
  40091a:	697b      	ldr	r3, [r7, #20]
  40091c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400920:	d301      	bcc.n	400926 <usart_set_async_baudrate+0x5e>
		return 1;
  400922:	2301      	movs	r3, #1
  400924:	e00f      	b.n	400946 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400926:	69fb      	ldr	r3, [r7, #28]
  400928:	2b08      	cmp	r3, #8
  40092a:	d105      	bne.n	400938 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40092c:	68fb      	ldr	r3, [r7, #12]
  40092e:	685b      	ldr	r3, [r3, #4]
  400930:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400934:	68fb      	ldr	r3, [r7, #12]
  400936:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400938:	693b      	ldr	r3, [r7, #16]
  40093a:	041a      	lsls	r2, r3, #16
  40093c:	697b      	ldr	r3, [r7, #20]
  40093e:	431a      	orrs	r2, r3
  400940:	68fb      	ldr	r3, [r7, #12]
  400942:	621a      	str	r2, [r3, #32]

	return 0;
  400944:	2300      	movs	r3, #0
}
  400946:	4618      	mov	r0, r3
  400948:	3724      	adds	r7, #36	; 0x24
  40094a:	46bd      	mov	sp, r7
  40094c:	bc80      	pop	{r7}
  40094e:	4770      	bx	lr

00400950 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400950:	b580      	push	{r7, lr}
  400952:	b082      	sub	sp, #8
  400954:	af00      	add	r7, sp, #0
  400956:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400958:	6878      	ldr	r0, [r7, #4]
  40095a:	4b0f      	ldr	r3, [pc, #60]	; (400998 <usart_reset+0x48>)
  40095c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40095e:	687b      	ldr	r3, [r7, #4]
  400960:	2200      	movs	r2, #0
  400962:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400964:	687b      	ldr	r3, [r7, #4]
  400966:	2200      	movs	r2, #0
  400968:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40096a:	687b      	ldr	r3, [r7, #4]
  40096c:	2200      	movs	r2, #0
  40096e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400970:	6878      	ldr	r0, [r7, #4]
  400972:	4b0a      	ldr	r3, [pc, #40]	; (40099c <usart_reset+0x4c>)
  400974:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400976:	6878      	ldr	r0, [r7, #4]
  400978:	4b09      	ldr	r3, [pc, #36]	; (4009a0 <usart_reset+0x50>)
  40097a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  40097c:	6878      	ldr	r0, [r7, #4]
  40097e:	4b09      	ldr	r3, [pc, #36]	; (4009a4 <usart_reset+0x54>)
  400980:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400982:	6878      	ldr	r0, [r7, #4]
  400984:	4b08      	ldr	r3, [pc, #32]	; (4009a8 <usart_reset+0x58>)
  400986:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400988:	6878      	ldr	r0, [r7, #4]
  40098a:	4b08      	ldr	r3, [pc, #32]	; (4009ac <usart_reset+0x5c>)
  40098c:	4798      	blx	r3
#endif
}
  40098e:	bf00      	nop
  400990:	3708      	adds	r7, #8
  400992:	46bd      	mov	sp, r7
  400994:	bd80      	pop	{r7, pc}
  400996:	bf00      	nop
  400998:	00400bad 	.word	0x00400bad
  40099c:	00400a65 	.word	0x00400a65
  4009a0:	00400a95 	.word	0x00400a95
  4009a4:	00400aad 	.word	0x00400aad
  4009a8:	00400ae5 	.word	0x00400ae5
  4009ac:	00400ac9 	.word	0x00400ac9

004009b0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4009b0:	b580      	push	{r7, lr}
  4009b2:	b084      	sub	sp, #16
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	60f8      	str	r0, [r7, #12]
  4009b8:	60b9      	str	r1, [r7, #8]
  4009ba:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4009bc:	68f8      	ldr	r0, [r7, #12]
  4009be:	4b1a      	ldr	r3, [pc, #104]	; (400a28 <usart_init_rs232+0x78>)
  4009c0:	4798      	blx	r3

	ul_reg_val = 0;
  4009c2:	4b1a      	ldr	r3, [pc, #104]	; (400a2c <usart_init_rs232+0x7c>)
  4009c4:	2200      	movs	r2, #0
  4009c6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4009c8:	68bb      	ldr	r3, [r7, #8]
  4009ca:	2b00      	cmp	r3, #0
  4009cc:	d009      	beq.n	4009e2 <usart_init_rs232+0x32>
  4009ce:	68bb      	ldr	r3, [r7, #8]
  4009d0:	681b      	ldr	r3, [r3, #0]
  4009d2:	687a      	ldr	r2, [r7, #4]
  4009d4:	4619      	mov	r1, r3
  4009d6:	68f8      	ldr	r0, [r7, #12]
  4009d8:	4b15      	ldr	r3, [pc, #84]	; (400a30 <usart_init_rs232+0x80>)
  4009da:	4798      	blx	r3
  4009dc:	4603      	mov	r3, r0
  4009de:	2b00      	cmp	r3, #0
  4009e0:	d001      	beq.n	4009e6 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4009e2:	2301      	movs	r3, #1
  4009e4:	e01b      	b.n	400a1e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009e6:	68bb      	ldr	r3, [r7, #8]
  4009e8:	685a      	ldr	r2, [r3, #4]
  4009ea:	68bb      	ldr	r3, [r7, #8]
  4009ec:	689b      	ldr	r3, [r3, #8]
  4009ee:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4009f0:	68bb      	ldr	r3, [r7, #8]
  4009f2:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009f4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4009f6:	68bb      	ldr	r3, [r7, #8]
  4009f8:	68db      	ldr	r3, [r3, #12]
  4009fa:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009fc:	4b0b      	ldr	r3, [pc, #44]	; (400a2c <usart_init_rs232+0x7c>)
  4009fe:	681b      	ldr	r3, [r3, #0]
  400a00:	4313      	orrs	r3, r2
  400a02:	4a0a      	ldr	r2, [pc, #40]	; (400a2c <usart_init_rs232+0x7c>)
  400a04:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400a06:	4b09      	ldr	r3, [pc, #36]	; (400a2c <usart_init_rs232+0x7c>)
  400a08:	681b      	ldr	r3, [r3, #0]
  400a0a:	4a08      	ldr	r2, [pc, #32]	; (400a2c <usart_init_rs232+0x7c>)
  400a0c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400a0e:	68fb      	ldr	r3, [r7, #12]
  400a10:	685a      	ldr	r2, [r3, #4]
  400a12:	4b06      	ldr	r3, [pc, #24]	; (400a2c <usart_init_rs232+0x7c>)
  400a14:	681b      	ldr	r3, [r3, #0]
  400a16:	431a      	orrs	r2, r3
  400a18:	68fb      	ldr	r3, [r7, #12]
  400a1a:	605a      	str	r2, [r3, #4]

	return 0;
  400a1c:	2300      	movs	r3, #0
}
  400a1e:	4618      	mov	r0, r3
  400a20:	3710      	adds	r7, #16
  400a22:	46bd      	mov	sp, r7
  400a24:	bd80      	pop	{r7, pc}
  400a26:	bf00      	nop
  400a28:	00400951 	.word	0x00400951
  400a2c:	20000a6c 	.word	0x20000a6c
  400a30:	004008c9 	.word	0x004008c9

00400a34 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400a34:	b480      	push	{r7}
  400a36:	b083      	sub	sp, #12
  400a38:	af00      	add	r7, sp, #0
  400a3a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400a3c:	687b      	ldr	r3, [r7, #4]
  400a3e:	2240      	movs	r2, #64	; 0x40
  400a40:	601a      	str	r2, [r3, #0]
}
  400a42:	bf00      	nop
  400a44:	370c      	adds	r7, #12
  400a46:	46bd      	mov	sp, r7
  400a48:	bc80      	pop	{r7}
  400a4a:	4770      	bx	lr

00400a4c <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  400a4c:	b480      	push	{r7}
  400a4e:	b083      	sub	sp, #12
  400a50:	af00      	add	r7, sp, #0
  400a52:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  400a54:	687b      	ldr	r3, [r7, #4]
  400a56:	2280      	movs	r2, #128	; 0x80
  400a58:	601a      	str	r2, [r3, #0]
}
  400a5a:	bf00      	nop
  400a5c:	370c      	adds	r7, #12
  400a5e:	46bd      	mov	sp, r7
  400a60:	bc80      	pop	{r7}
  400a62:	4770      	bx	lr

00400a64 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400a64:	b480      	push	{r7}
  400a66:	b083      	sub	sp, #12
  400a68:	af00      	add	r7, sp, #0
  400a6a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400a6c:	687b      	ldr	r3, [r7, #4]
  400a6e:	2288      	movs	r2, #136	; 0x88
  400a70:	601a      	str	r2, [r3, #0]
}
  400a72:	bf00      	nop
  400a74:	370c      	adds	r7, #12
  400a76:	46bd      	mov	sp, r7
  400a78:	bc80      	pop	{r7}
  400a7a:	4770      	bx	lr

00400a7c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400a7c:	b480      	push	{r7}
  400a7e:	b083      	sub	sp, #12
  400a80:	af00      	add	r7, sp, #0
  400a82:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400a84:	687b      	ldr	r3, [r7, #4]
  400a86:	2210      	movs	r2, #16
  400a88:	601a      	str	r2, [r3, #0]
}
  400a8a:	bf00      	nop
  400a8c:	370c      	adds	r7, #12
  400a8e:	46bd      	mov	sp, r7
  400a90:	bc80      	pop	{r7}
  400a92:	4770      	bx	lr

00400a94 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400a94:	b480      	push	{r7}
  400a96:	b083      	sub	sp, #12
  400a98:	af00      	add	r7, sp, #0
  400a9a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400a9c:	687b      	ldr	r3, [r7, #4]
  400a9e:	2224      	movs	r2, #36	; 0x24
  400aa0:	601a      	str	r2, [r3, #0]
}
  400aa2:	bf00      	nop
  400aa4:	370c      	adds	r7, #12
  400aa6:	46bd      	mov	sp, r7
  400aa8:	bc80      	pop	{r7}
  400aaa:	4770      	bx	lr

00400aac <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400aac:	b480      	push	{r7}
  400aae:	b083      	sub	sp, #12
  400ab0:	af00      	add	r7, sp, #0
  400ab2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400ab4:	687b      	ldr	r3, [r7, #4]
  400ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
  400aba:	601a      	str	r2, [r3, #0]
}
  400abc:	bf00      	nop
  400abe:	370c      	adds	r7, #12
  400ac0:	46bd      	mov	sp, r7
  400ac2:	bc80      	pop	{r7}
  400ac4:	4770      	bx	lr
  400ac6:	bf00      	nop

00400ac8 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400ac8:	b480      	push	{r7}
  400aca:	b083      	sub	sp, #12
  400acc:	af00      	add	r7, sp, #0
  400ace:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400ad0:	687b      	ldr	r3, [r7, #4]
  400ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400ad6:	601a      	str	r2, [r3, #0]
}
  400ad8:	bf00      	nop
  400ada:	370c      	adds	r7, #12
  400adc:	46bd      	mov	sp, r7
  400ade:	bc80      	pop	{r7}
  400ae0:	4770      	bx	lr
  400ae2:	bf00      	nop

00400ae4 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400ae4:	b480      	push	{r7}
  400ae6:	b083      	sub	sp, #12
  400ae8:	af00      	add	r7, sp, #0
  400aea:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400aec:	687b      	ldr	r3, [r7, #4]
  400aee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400af2:	601a      	str	r2, [r3, #0]
}
  400af4:	bf00      	nop
  400af6:	370c      	adds	r7, #12
  400af8:	46bd      	mov	sp, r7
  400afa:	bc80      	pop	{r7}
  400afc:	4770      	bx	lr
  400afe:	bf00      	nop

00400b00 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  400b00:	b480      	push	{r7}
  400b02:	b083      	sub	sp, #12
  400b04:	af00      	add	r7, sp, #0
  400b06:	6078      	str	r0, [r7, #4]
  400b08:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b0a:	687b      	ldr	r3, [r7, #4]
  400b0c:	695b      	ldr	r3, [r3, #20]
  400b0e:	f003 0302 	and.w	r3, r3, #2
  400b12:	2b00      	cmp	r3, #0
  400b14:	d101      	bne.n	400b1a <usart_write+0x1a>
		return 1;
  400b16:	2301      	movs	r3, #1
  400b18:	e005      	b.n	400b26 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400b1a:	683b      	ldr	r3, [r7, #0]
  400b1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400b20:	687b      	ldr	r3, [r7, #4]
  400b22:	61da      	str	r2, [r3, #28]
	return 0;
  400b24:	2300      	movs	r3, #0
}
  400b26:	4618      	mov	r0, r3
  400b28:	370c      	adds	r7, #12
  400b2a:	46bd      	mov	sp, r7
  400b2c:	bc80      	pop	{r7}
  400b2e:	4770      	bx	lr

00400b30 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400b30:	b480      	push	{r7}
  400b32:	b083      	sub	sp, #12
  400b34:	af00      	add	r7, sp, #0
  400b36:	6078      	str	r0, [r7, #4]
  400b38:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b3a:	687b      	ldr	r3, [r7, #4]
  400b3c:	695b      	ldr	r3, [r3, #20]
  400b3e:	f003 0301 	and.w	r3, r3, #1
  400b42:	2b00      	cmp	r3, #0
  400b44:	d101      	bne.n	400b4a <usart_read+0x1a>
		return 1;
  400b46:	2301      	movs	r3, #1
  400b48:	e006      	b.n	400b58 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b4a:	687b      	ldr	r3, [r7, #4]
  400b4c:	699b      	ldr	r3, [r3, #24]
  400b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400b52:	683b      	ldr	r3, [r7, #0]
  400b54:	601a      	str	r2, [r3, #0]

	return 0;
  400b56:	2300      	movs	r3, #0
}
  400b58:	4618      	mov	r0, r3
  400b5a:	370c      	adds	r7, #12
  400b5c:	46bd      	mov	sp, r7
  400b5e:	bc80      	pop	{r7}
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop

00400b64 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  400b64:	b480      	push	{r7}
  400b66:	b085      	sub	sp, #20
  400b68:	af00      	add	r7, sp, #0
  400b6a:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  400b6c:	2300      	movs	r3, #0
  400b6e:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  400b70:	687b      	ldr	r3, [r7, #4]
  400b72:	4a0a      	ldr	r2, [pc, #40]	; (400b9c <usart_get_pdc_base+0x38>)
  400b74:	4293      	cmp	r3, r2
  400b76:	d103      	bne.n	400b80 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  400b78:	4b09      	ldr	r3, [pc, #36]	; (400ba0 <usart_get_pdc_base+0x3c>)
  400b7a:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400b7c:	68fb      	ldr	r3, [r7, #12]
  400b7e:	e008      	b.n	400b92 <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	4a08      	ldr	r2, [pc, #32]	; (400ba4 <usart_get_pdc_base+0x40>)
  400b84:	4293      	cmp	r3, r2
  400b86:	d103      	bne.n	400b90 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  400b88:	4b07      	ldr	r3, [pc, #28]	; (400ba8 <usart_get_pdc_base+0x44>)
  400b8a:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400b8c:	68fb      	ldr	r3, [r7, #12]
  400b8e:	e000      	b.n	400b92 <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  400b90:	68fb      	ldr	r3, [r7, #12]
}
  400b92:	4618      	mov	r0, r3
  400b94:	3714      	adds	r7, #20
  400b96:	46bd      	mov	sp, r7
  400b98:	bc80      	pop	{r7}
  400b9a:	4770      	bx	lr
  400b9c:	40024000 	.word	0x40024000
  400ba0:	40024100 	.word	0x40024100
  400ba4:	40028000 	.word	0x40028000
  400ba8:	40028100 	.word	0x40028100

00400bac <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400bac:	b480      	push	{r7}
  400bae:	b083      	sub	sp, #12
  400bb0:	af00      	add	r7, sp, #0
  400bb2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400bb4:	687b      	ldr	r3, [r7, #4]
  400bb6:	4a04      	ldr	r2, [pc, #16]	; (400bc8 <usart_disable_writeprotect+0x1c>)
  400bb8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400bbc:	bf00      	nop
  400bbe:	370c      	adds	r7, #12
  400bc0:	46bd      	mov	sp, r7
  400bc2:	bc80      	pop	{r7}
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	55534100 	.word	0x55534100

00400bcc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400bcc:	b580      	push	{r7, lr}
  400bce:	b082      	sub	sp, #8
  400bd0:	af00      	add	r7, sp, #0
  400bd2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400bd4:	687b      	ldr	r3, [r7, #4]
  400bd6:	2b07      	cmp	r3, #7
  400bd8:	d831      	bhi.n	400c3e <osc_enable+0x72>
  400bda:	a201      	add	r2, pc, #4	; (adr r2, 400be0 <osc_enable+0x14>)
  400bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400be0:	00400c3d 	.word	0x00400c3d
  400be4:	00400c01 	.word	0x00400c01
  400be8:	00400c09 	.word	0x00400c09
  400bec:	00400c11 	.word	0x00400c11
  400bf0:	00400c19 	.word	0x00400c19
  400bf4:	00400c21 	.word	0x00400c21
  400bf8:	00400c29 	.word	0x00400c29
  400bfc:	00400c33 	.word	0x00400c33
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400c00:	2000      	movs	r0, #0
  400c02:	4b11      	ldr	r3, [pc, #68]	; (400c48 <osc_enable+0x7c>)
  400c04:	4798      	blx	r3
		break;
  400c06:	e01a      	b.n	400c3e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400c08:	2001      	movs	r0, #1
  400c0a:	4b0f      	ldr	r3, [pc, #60]	; (400c48 <osc_enable+0x7c>)
  400c0c:	4798      	blx	r3
		break;
  400c0e:	e016      	b.n	400c3e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400c10:	2000      	movs	r0, #0
  400c12:	4b0e      	ldr	r3, [pc, #56]	; (400c4c <osc_enable+0x80>)
  400c14:	4798      	blx	r3
		break;
  400c16:	e012      	b.n	400c3e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400c18:	2010      	movs	r0, #16
  400c1a:	4b0c      	ldr	r3, [pc, #48]	; (400c4c <osc_enable+0x80>)
  400c1c:	4798      	blx	r3
		break;
  400c1e:	e00e      	b.n	400c3e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400c20:	2020      	movs	r0, #32
  400c22:	4b0a      	ldr	r3, [pc, #40]	; (400c4c <osc_enable+0x80>)
  400c24:	4798      	blx	r3
		break;
  400c26:	e00a      	b.n	400c3e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400c28:	213e      	movs	r1, #62	; 0x3e
  400c2a:	2000      	movs	r0, #0
  400c2c:	4b08      	ldr	r3, [pc, #32]	; (400c50 <osc_enable+0x84>)
  400c2e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400c30:	e005      	b.n	400c3e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400c32:	213e      	movs	r1, #62	; 0x3e
  400c34:	2001      	movs	r0, #1
  400c36:	4b06      	ldr	r3, [pc, #24]	; (400c50 <osc_enable+0x84>)
  400c38:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400c3a:	e000      	b.n	400c3e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  400c3c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  400c3e:	bf00      	nop
  400c40:	3708      	adds	r7, #8
  400c42:	46bd      	mov	sp, r7
  400c44:	bd80      	pop	{r7, pc}
  400c46:	bf00      	nop
  400c48:	00401641 	.word	0x00401641
  400c4c:	004016ad 	.word	0x004016ad
  400c50:	0040171d 	.word	0x0040171d

00400c54 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400c54:	b580      	push	{r7, lr}
  400c56:	b082      	sub	sp, #8
  400c58:	af00      	add	r7, sp, #0
  400c5a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c5c:	687b      	ldr	r3, [r7, #4]
  400c5e:	2b07      	cmp	r3, #7
  400c60:	d826      	bhi.n	400cb0 <osc_is_ready+0x5c>
  400c62:	a201      	add	r2, pc, #4	; (adr r2, 400c68 <osc_is_ready+0x14>)
  400c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c68:	00400c89 	.word	0x00400c89
  400c6c:	00400c8d 	.word	0x00400c8d
  400c70:	00400c8d 	.word	0x00400c8d
  400c74:	00400c9f 	.word	0x00400c9f
  400c78:	00400c9f 	.word	0x00400c9f
  400c7c:	00400c9f 	.word	0x00400c9f
  400c80:	00400c9f 	.word	0x00400c9f
  400c84:	00400c9f 	.word	0x00400c9f
	case OSC_SLCK_32K_RC:
		return 1;
  400c88:	2301      	movs	r3, #1
  400c8a:	e012      	b.n	400cb2 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400c8c:	4b0b      	ldr	r3, [pc, #44]	; (400cbc <osc_is_ready+0x68>)
  400c8e:	4798      	blx	r3
  400c90:	4603      	mov	r3, r0
  400c92:	2b00      	cmp	r3, #0
  400c94:	bf14      	ite	ne
  400c96:	2301      	movne	r3, #1
  400c98:	2300      	moveq	r3, #0
  400c9a:	b2db      	uxtb	r3, r3
  400c9c:	e009      	b.n	400cb2 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c9e:	4b08      	ldr	r3, [pc, #32]	; (400cc0 <osc_is_ready+0x6c>)
  400ca0:	4798      	blx	r3
  400ca2:	4603      	mov	r3, r0
  400ca4:	2b00      	cmp	r3, #0
  400ca6:	bf14      	ite	ne
  400ca8:	2301      	movne	r3, #1
  400caa:	2300      	moveq	r3, #0
  400cac:	b2db      	uxtb	r3, r3
  400cae:	e000      	b.n	400cb2 <osc_is_ready+0x5e>
	}

	return 0;
  400cb0:	2300      	movs	r3, #0
}
  400cb2:	4618      	mov	r0, r3
  400cb4:	3708      	adds	r7, #8
  400cb6:	46bd      	mov	sp, r7
  400cb8:	bd80      	pop	{r7, pc}
  400cba:	bf00      	nop
  400cbc:	00401679 	.word	0x00401679
  400cc0:	00401795 	.word	0x00401795

00400cc4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400cc4:	b480      	push	{r7}
  400cc6:	b083      	sub	sp, #12
  400cc8:	af00      	add	r7, sp, #0
  400cca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400ccc:	687b      	ldr	r3, [r7, #4]
  400cce:	2b07      	cmp	r3, #7
  400cd0:	d825      	bhi.n	400d1e <osc_get_rate+0x5a>
  400cd2:	a201      	add	r2, pc, #4	; (adr r2, 400cd8 <osc_get_rate+0x14>)
  400cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cd8:	00400cf9 	.word	0x00400cf9
  400cdc:	00400cff 	.word	0x00400cff
  400ce0:	00400d05 	.word	0x00400d05
  400ce4:	00400d0b 	.word	0x00400d0b
  400ce8:	00400d0f 	.word	0x00400d0f
  400cec:	00400d13 	.word	0x00400d13
  400cf0:	00400d17 	.word	0x00400d17
  400cf4:	00400d1b 	.word	0x00400d1b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400cf8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400cfc:	e010      	b.n	400d20 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d02:	e00d      	b.n	400d20 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d08:	e00a      	b.n	400d20 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400d0a:	4b08      	ldr	r3, [pc, #32]	; (400d2c <osc_get_rate+0x68>)
  400d0c:	e008      	b.n	400d20 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400d0e:	4b08      	ldr	r3, [pc, #32]	; (400d30 <osc_get_rate+0x6c>)
  400d10:	e006      	b.n	400d20 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400d12:	4b08      	ldr	r3, [pc, #32]	; (400d34 <osc_get_rate+0x70>)
  400d14:	e004      	b.n	400d20 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400d16:	4b07      	ldr	r3, [pc, #28]	; (400d34 <osc_get_rate+0x70>)
  400d18:	e002      	b.n	400d20 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400d1a:	4b06      	ldr	r3, [pc, #24]	; (400d34 <osc_get_rate+0x70>)
  400d1c:	e000      	b.n	400d20 <osc_get_rate+0x5c>
	}

	return 0;
  400d1e:	2300      	movs	r3, #0
}
  400d20:	4618      	mov	r0, r3
  400d22:	370c      	adds	r7, #12
  400d24:	46bd      	mov	sp, r7
  400d26:	bc80      	pop	{r7}
  400d28:	4770      	bx	lr
  400d2a:	bf00      	nop
  400d2c:	003d0900 	.word	0x003d0900
  400d30:	007a1200 	.word	0x007a1200
  400d34:	00b71b00 	.word	0x00b71b00

00400d38 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400d38:	b580      	push	{r7, lr}
  400d3a:	b082      	sub	sp, #8
  400d3c:	af00      	add	r7, sp, #0
  400d3e:	4603      	mov	r3, r0
  400d40:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400d42:	bf00      	nop
  400d44:	79fb      	ldrb	r3, [r7, #7]
  400d46:	4618      	mov	r0, r3
  400d48:	4b05      	ldr	r3, [pc, #20]	; (400d60 <osc_wait_ready+0x28>)
  400d4a:	4798      	blx	r3
  400d4c:	4603      	mov	r3, r0
  400d4e:	f083 0301 	eor.w	r3, r3, #1
  400d52:	b2db      	uxtb	r3, r3
  400d54:	2b00      	cmp	r3, #0
  400d56:	d1f5      	bne.n	400d44 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400d58:	bf00      	nop
  400d5a:	3708      	adds	r7, #8
  400d5c:	46bd      	mov	sp, r7
  400d5e:	bd80      	pop	{r7, pc}
  400d60:	00400c55 	.word	0x00400c55

00400d64 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400d64:	b580      	push	{r7, lr}
  400d66:	b086      	sub	sp, #24
  400d68:	af00      	add	r7, sp, #0
  400d6a:	60f8      	str	r0, [r7, #12]
  400d6c:	607a      	str	r2, [r7, #4]
  400d6e:	603b      	str	r3, [r7, #0]
  400d70:	460b      	mov	r3, r1
  400d72:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400d74:	7afb      	ldrb	r3, [r7, #11]
  400d76:	4618      	mov	r0, r3
  400d78:	4b0d      	ldr	r3, [pc, #52]	; (400db0 <pll_config_init+0x4c>)
  400d7a:	4798      	blx	r3
  400d7c:	4602      	mov	r2, r0
  400d7e:	687b      	ldr	r3, [r7, #4]
  400d80:	fbb2 f3f3 	udiv	r3, r2, r3
  400d84:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400d86:	697b      	ldr	r3, [r7, #20]
  400d88:	683a      	ldr	r2, [r7, #0]
  400d8a:	fb02 f303 	mul.w	r3, r2, r3
  400d8e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400d90:	683b      	ldr	r3, [r7, #0]
  400d92:	3b01      	subs	r3, #1
  400d94:	041a      	lsls	r2, r3, #16
  400d96:	4b07      	ldr	r3, [pc, #28]	; (400db4 <pll_config_init+0x50>)
  400d98:	4013      	ands	r3, r2
  400d9a:	687a      	ldr	r2, [r7, #4]
  400d9c:	b2d2      	uxtb	r2, r2
  400d9e:	4313      	orrs	r3, r2
  400da0:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400da4:	68fb      	ldr	r3, [r7, #12]
  400da6:	601a      	str	r2, [r3, #0]
}
  400da8:	bf00      	nop
  400daa:	3718      	adds	r7, #24
  400dac:	46bd      	mov	sp, r7
  400dae:	bd80      	pop	{r7, pc}
  400db0:	00400cc5 	.word	0x00400cc5
  400db4:	07ff0000 	.word	0x07ff0000

00400db8 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400db8:	b580      	push	{r7, lr}
  400dba:	b082      	sub	sp, #8
  400dbc:	af00      	add	r7, sp, #0
  400dbe:	6078      	str	r0, [r7, #4]
  400dc0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400dc2:	683b      	ldr	r3, [r7, #0]
  400dc4:	2b00      	cmp	r3, #0
  400dc6:	d108      	bne.n	400dda <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400dc8:	4b09      	ldr	r3, [pc, #36]	; (400df0 <pll_enable+0x38>)
  400dca:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400dcc:	4a09      	ldr	r2, [pc, #36]	; (400df4 <pll_enable+0x3c>)
  400dce:	687b      	ldr	r3, [r7, #4]
  400dd0:	681b      	ldr	r3, [r3, #0]
  400dd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400dd6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400dd8:	e005      	b.n	400de6 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400dda:	4b07      	ldr	r3, [pc, #28]	; (400df8 <pll_enable+0x40>)
  400ddc:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400dde:	4a05      	ldr	r2, [pc, #20]	; (400df4 <pll_enable+0x3c>)
  400de0:	687b      	ldr	r3, [r7, #4]
  400de2:	681b      	ldr	r3, [r3, #0]
  400de4:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  400de6:	bf00      	nop
  400de8:	3708      	adds	r7, #8
  400dea:	46bd      	mov	sp, r7
  400dec:	bd80      	pop	{r7, pc}
  400dee:	bf00      	nop
  400df0:	004017ad 	.word	0x004017ad
  400df4:	400e0400 	.word	0x400e0400
  400df8:	004017dd 	.word	0x004017dd

00400dfc <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400dfc:	b580      	push	{r7, lr}
  400dfe:	b082      	sub	sp, #8
  400e00:	af00      	add	r7, sp, #0
  400e02:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400e04:	687b      	ldr	r3, [r7, #4]
  400e06:	2b00      	cmp	r3, #0
  400e08:	d103      	bne.n	400e12 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400e0a:	4b05      	ldr	r3, [pc, #20]	; (400e20 <pll_is_locked+0x24>)
  400e0c:	4798      	blx	r3
  400e0e:	4603      	mov	r3, r0
  400e10:	e002      	b.n	400e18 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400e12:	4b04      	ldr	r3, [pc, #16]	; (400e24 <pll_is_locked+0x28>)
  400e14:	4798      	blx	r3
  400e16:	4603      	mov	r3, r0
	}
}
  400e18:	4618      	mov	r0, r3
  400e1a:	3708      	adds	r7, #8
  400e1c:	46bd      	mov	sp, r7
  400e1e:	bd80      	pop	{r7, pc}
  400e20:	004017c5 	.word	0x004017c5
  400e24:	004017f5 	.word	0x004017f5

00400e28 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400e28:	b580      	push	{r7, lr}
  400e2a:	b082      	sub	sp, #8
  400e2c:	af00      	add	r7, sp, #0
  400e2e:	4603      	mov	r3, r0
  400e30:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400e32:	79fb      	ldrb	r3, [r7, #7]
  400e34:	3b03      	subs	r3, #3
  400e36:	2b04      	cmp	r3, #4
  400e38:	d808      	bhi.n	400e4c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400e3a:	79fb      	ldrb	r3, [r7, #7]
  400e3c:	4618      	mov	r0, r3
  400e3e:	4b06      	ldr	r3, [pc, #24]	; (400e58 <pll_enable_source+0x30>)
  400e40:	4798      	blx	r3
		osc_wait_ready(e_src);
  400e42:	79fb      	ldrb	r3, [r7, #7]
  400e44:	4618      	mov	r0, r3
  400e46:	4b05      	ldr	r3, [pc, #20]	; (400e5c <pll_enable_source+0x34>)
  400e48:	4798      	blx	r3
		break;
  400e4a:	e000      	b.n	400e4e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400e4c:	bf00      	nop
	}
}
  400e4e:	bf00      	nop
  400e50:	3708      	adds	r7, #8
  400e52:	46bd      	mov	sp, r7
  400e54:	bd80      	pop	{r7, pc}
  400e56:	bf00      	nop
  400e58:	00400bcd 	.word	0x00400bcd
  400e5c:	00400d39 	.word	0x00400d39

00400e60 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400e60:	b580      	push	{r7, lr}
  400e62:	b082      	sub	sp, #8
  400e64:	af00      	add	r7, sp, #0
  400e66:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e68:	bf00      	nop
  400e6a:	6878      	ldr	r0, [r7, #4]
  400e6c:	4b04      	ldr	r3, [pc, #16]	; (400e80 <pll_wait_for_lock+0x20>)
  400e6e:	4798      	blx	r3
  400e70:	4603      	mov	r3, r0
  400e72:	2b00      	cmp	r3, #0
  400e74:	d0f9      	beq.n	400e6a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400e76:	2300      	movs	r3, #0
}
  400e78:	4618      	mov	r0, r3
  400e7a:	3708      	adds	r7, #8
  400e7c:	46bd      	mov	sp, r7
  400e7e:	bd80      	pop	{r7, pc}
  400e80:	00400dfd 	.word	0x00400dfd

00400e84 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400e84:	b580      	push	{r7, lr}
  400e86:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400e88:	2006      	movs	r0, #6
  400e8a:	4b04      	ldr	r3, [pc, #16]	; (400e9c <sysclk_get_main_hz+0x18>)
  400e8c:	4798      	blx	r3
  400e8e:	4602      	mov	r2, r0
  400e90:	4613      	mov	r3, r2
  400e92:	009b      	lsls	r3, r3, #2
  400e94:	4413      	add	r3, r2
  400e96:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400e98:	4618      	mov	r0, r3
  400e9a:	bd80      	pop	{r7, pc}
  400e9c:	00400cc5 	.word	0x00400cc5

00400ea0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400ea0:	b580      	push	{r7, lr}
  400ea2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400ea4:	4b02      	ldr	r3, [pc, #8]	; (400eb0 <sysclk_get_cpu_hz+0x10>)
  400ea6:	4798      	blx	r3
  400ea8:	4603      	mov	r3, r0
  400eaa:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400eac:	4618      	mov	r0, r3
  400eae:	bd80      	pop	{r7, pc}
  400eb0:	00400e85 	.word	0x00400e85

00400eb4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400eb4:	b590      	push	{r4, r7, lr}
  400eb6:	b083      	sub	sp, #12
  400eb8:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400eba:	4811      	ldr	r0, [pc, #68]	; (400f00 <sysclk_init+0x4c>)
  400ebc:	4b11      	ldr	r3, [pc, #68]	; (400f04 <sysclk_init+0x50>)
  400ebe:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400ec0:	2006      	movs	r0, #6
  400ec2:	4b11      	ldr	r3, [pc, #68]	; (400f08 <sysclk_init+0x54>)
  400ec4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400ec6:	1d38      	adds	r0, r7, #4
  400ec8:	2314      	movs	r3, #20
  400eca:	2201      	movs	r2, #1
  400ecc:	2106      	movs	r1, #6
  400ece:	4c0f      	ldr	r4, [pc, #60]	; (400f0c <sysclk_init+0x58>)
  400ed0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400ed2:	1d3b      	adds	r3, r7, #4
  400ed4:	2100      	movs	r1, #0
  400ed6:	4618      	mov	r0, r3
  400ed8:	4b0d      	ldr	r3, [pc, #52]	; (400f10 <sysclk_init+0x5c>)
  400eda:	4798      	blx	r3
		pll_wait_for_lock(0);
  400edc:	2000      	movs	r0, #0
  400ede:	4b0d      	ldr	r3, [pc, #52]	; (400f14 <sysclk_init+0x60>)
  400ee0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400ee2:	2010      	movs	r0, #16
  400ee4:	4b0c      	ldr	r3, [pc, #48]	; (400f18 <sysclk_init+0x64>)
  400ee6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400ee8:	4b0c      	ldr	r3, [pc, #48]	; (400f1c <sysclk_init+0x68>)
  400eea:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400eec:	4b0c      	ldr	r3, [pc, #48]	; (400f20 <sysclk_init+0x6c>)
  400eee:	4798      	blx	r3
  400ef0:	4603      	mov	r3, r0
  400ef2:	4618      	mov	r0, r3
  400ef4:	4b03      	ldr	r3, [pc, #12]	; (400f04 <sysclk_init+0x50>)
  400ef6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400ef8:	bf00      	nop
  400efa:	370c      	adds	r7, #12
  400efc:	46bd      	mov	sp, r7
  400efe:	bd90      	pop	{r4, r7, pc}
  400f00:	07270e00 	.word	0x07270e00
  400f04:	00401b85 	.word	0x00401b85
  400f08:	00400e29 	.word	0x00400e29
  400f0c:	00400d65 	.word	0x00400d65
  400f10:	00400db9 	.word	0x00400db9
  400f14:	00400e61 	.word	0x00400e61
  400f18:	004015c1 	.word	0x004015c1
  400f1c:	004019e9 	.word	0x004019e9
  400f20:	00400ea1 	.word	0x00400ea1

00400f24 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  400f24:	b480      	push	{r7}
  400f26:	b085      	sub	sp, #20
  400f28:	af00      	add	r7, sp, #0
  400f2a:	60f8      	str	r0, [r7, #12]
  400f2c:	60b9      	str	r1, [r7, #8]
  400f2e:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400f30:	68bb      	ldr	r3, [r7, #8]
  400f32:	2b00      	cmp	r3, #0
  400f34:	d007      	beq.n	400f46 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  400f36:	68bb      	ldr	r3, [r7, #8]
  400f38:	681a      	ldr	r2, [r3, #0]
  400f3a:	68fb      	ldr	r3, [r7, #12]
  400f3c:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  400f3e:	68bb      	ldr	r3, [r7, #8]
  400f40:	685a      	ldr	r2, [r3, #4]
  400f42:	68fb      	ldr	r3, [r7, #12]
  400f44:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  400f46:	687b      	ldr	r3, [r7, #4]
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d007      	beq.n	400f5c <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  400f4c:	687b      	ldr	r3, [r7, #4]
  400f4e:	681a      	ldr	r2, [r3, #0]
  400f50:	68fb      	ldr	r3, [r7, #12]
  400f52:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  400f54:	687b      	ldr	r3, [r7, #4]
  400f56:	685a      	ldr	r2, [r3, #4]
  400f58:	68fb      	ldr	r3, [r7, #12]
  400f5a:	61da      	str	r2, [r3, #28]
	}
}
  400f5c:	bf00      	nop
  400f5e:	3714      	adds	r7, #20
  400f60:	46bd      	mov	sp, r7
  400f62:	bc80      	pop	{r7}
  400f64:	4770      	bx	lr
  400f66:	bf00      	nop

00400f68 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  400f68:	b480      	push	{r7}
  400f6a:	b085      	sub	sp, #20
  400f6c:	af00      	add	r7, sp, #0
  400f6e:	60f8      	str	r0, [r7, #12]
  400f70:	60b9      	str	r1, [r7, #8]
  400f72:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400f74:	68bb      	ldr	r3, [r7, #8]
  400f76:	2b00      	cmp	r3, #0
  400f78:	d007      	beq.n	400f8a <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  400f7a:	68bb      	ldr	r3, [r7, #8]
  400f7c:	681a      	ldr	r2, [r3, #0]
  400f7e:	68fb      	ldr	r3, [r7, #12]
  400f80:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  400f82:	68bb      	ldr	r3, [r7, #8]
  400f84:	685a      	ldr	r2, [r3, #4]
  400f86:	68fb      	ldr	r3, [r7, #12]
  400f88:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  400f8a:	687b      	ldr	r3, [r7, #4]
  400f8c:	2b00      	cmp	r3, #0
  400f8e:	d007      	beq.n	400fa0 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  400f90:	687b      	ldr	r3, [r7, #4]
  400f92:	681a      	ldr	r2, [r3, #0]
  400f94:	68fb      	ldr	r3, [r7, #12]
  400f96:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400f98:	687b      	ldr	r3, [r7, #4]
  400f9a:	685a      	ldr	r2, [r3, #4]
  400f9c:	68fb      	ldr	r3, [r7, #12]
  400f9e:	615a      	str	r2, [r3, #20]
	}
}
  400fa0:	bf00      	nop
  400fa2:	3714      	adds	r7, #20
  400fa4:	46bd      	mov	sp, r7
  400fa6:	bc80      	pop	{r7}
  400fa8:	4770      	bx	lr
  400faa:	bf00      	nop

00400fac <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  400fac:	b480      	push	{r7}
  400fae:	b083      	sub	sp, #12
  400fb0:	af00      	add	r7, sp, #0
  400fb2:	6078      	str	r0, [r7, #4]
  400fb4:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400fb6:	683a      	ldr	r2, [r7, #0]
  400fb8:	f240 1301 	movw	r3, #257	; 0x101
  400fbc:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400fbe:	687a      	ldr	r2, [r7, #4]
  400fc0:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  400fc2:	bf00      	nop
  400fc4:	370c      	adds	r7, #12
  400fc6:	46bd      	mov	sp, r7
  400fc8:	bc80      	pop	{r7}
  400fca:	4770      	bx	lr

00400fcc <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  400fcc:	b480      	push	{r7}
  400fce:	b083      	sub	sp, #12
  400fd0:	af00      	add	r7, sp, #0
  400fd2:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  400fd4:	687b      	ldr	r3, [r7, #4]
  400fd6:	685b      	ldr	r3, [r3, #4]
}
  400fd8:	4618      	mov	r0, r3
  400fda:	370c      	adds	r7, #12
  400fdc:	46bd      	mov	sp, r7
  400fde:	bc80      	pop	{r7}
  400fe0:	4770      	bx	lr
  400fe2:	bf00      	nop

00400fe4 <pdc_read_rx_next_counter>:
 *
 * \return Receive Next Counter Register value.
 */
uint32_t pdc_read_rx_next_counter(
		Pdc *p_pdc)
{
  400fe4:	b480      	push	{r7}
  400fe6:	b083      	sub	sp, #12
  400fe8:	af00      	add	r7, sp, #0
  400fea:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RNCR;
  400fec:	687b      	ldr	r3, [r7, #4]
  400fee:	695b      	ldr	r3, [r3, #20]
}
  400ff0:	4618      	mov	r0, r3
  400ff2:	370c      	adds	r7, #12
  400ff4:	46bd      	mov	sp, r7
  400ff6:	bc80      	pop	{r7}
  400ff8:	4770      	bx	lr
  400ffa:	bf00      	nop

00400ffc <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400ffc:	b480      	push	{r7}
  400ffe:	b085      	sub	sp, #20
  401000:	af00      	add	r7, sp, #0
  401002:	60f8      	str	r0, [r7, #12]
  401004:	60b9      	str	r1, [r7, #8]
  401006:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401008:	687b      	ldr	r3, [r7, #4]
  40100a:	2b00      	cmp	r3, #0
  40100c:	d003      	beq.n	401016 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40100e:	68fb      	ldr	r3, [r7, #12]
  401010:	68ba      	ldr	r2, [r7, #8]
  401012:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401014:	e002      	b.n	40101c <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401016:	68fb      	ldr	r3, [r7, #12]
  401018:	68ba      	ldr	r2, [r7, #8]
  40101a:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  40101c:	bf00      	nop
  40101e:	3714      	adds	r7, #20
  401020:	46bd      	mov	sp, r7
  401022:	bc80      	pop	{r7}
  401024:	4770      	bx	lr
  401026:	bf00      	nop

00401028 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401028:	b480      	push	{r7}
  40102a:	b087      	sub	sp, #28
  40102c:	af00      	add	r7, sp, #0
  40102e:	60f8      	str	r0, [r7, #12]
  401030:	60b9      	str	r1, [r7, #8]
  401032:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401034:	68fb      	ldr	r3, [r7, #12]
  401036:	687a      	ldr	r2, [r7, #4]
  401038:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40103a:	68bb      	ldr	r3, [r7, #8]
  40103c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401040:	d04a      	beq.n	4010d8 <pio_set_peripheral+0xb0>
  401042:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401046:	d808      	bhi.n	40105a <pio_set_peripheral+0x32>
  401048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40104c:	d016      	beq.n	40107c <pio_set_peripheral+0x54>
  40104e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401052:	d02c      	beq.n	4010ae <pio_set_peripheral+0x86>
  401054:	2b00      	cmp	r3, #0
  401056:	d069      	beq.n	40112c <pio_set_peripheral+0x104>
  401058:	e064      	b.n	401124 <pio_set_peripheral+0xfc>
  40105a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40105e:	d065      	beq.n	40112c <pio_set_peripheral+0x104>
  401060:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401064:	d803      	bhi.n	40106e <pio_set_peripheral+0x46>
  401066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40106a:	d04a      	beq.n	401102 <pio_set_peripheral+0xda>
  40106c:	e05a      	b.n	401124 <pio_set_peripheral+0xfc>
  40106e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401072:	d05b      	beq.n	40112c <pio_set_peripheral+0x104>
  401074:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401078:	d058      	beq.n	40112c <pio_set_peripheral+0x104>
  40107a:	e053      	b.n	401124 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40107c:	68fb      	ldr	r3, [r7, #12]
  40107e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401080:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401082:	68fb      	ldr	r3, [r7, #12]
  401084:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401086:	687b      	ldr	r3, [r7, #4]
  401088:	43d9      	mvns	r1, r3
  40108a:	697b      	ldr	r3, [r7, #20]
  40108c:	400b      	ands	r3, r1
  40108e:	401a      	ands	r2, r3
  401090:	68fb      	ldr	r3, [r7, #12]
  401092:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401094:	68fb      	ldr	r3, [r7, #12]
  401096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401098:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40109a:	68fb      	ldr	r3, [r7, #12]
  40109c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40109e:	687b      	ldr	r3, [r7, #4]
  4010a0:	43d9      	mvns	r1, r3
  4010a2:	697b      	ldr	r3, [r7, #20]
  4010a4:	400b      	ands	r3, r1
  4010a6:	401a      	ands	r2, r3
  4010a8:	68fb      	ldr	r3, [r7, #12]
  4010aa:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4010ac:	e03a      	b.n	401124 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4010ae:	68fb      	ldr	r3, [r7, #12]
  4010b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4010b2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4010b4:	687a      	ldr	r2, [r7, #4]
  4010b6:	697b      	ldr	r3, [r7, #20]
  4010b8:	431a      	orrs	r2, r3
  4010ba:	68fb      	ldr	r3, [r7, #12]
  4010bc:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4010be:	68fb      	ldr	r3, [r7, #12]
  4010c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4010c2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4010c4:	68fb      	ldr	r3, [r7, #12]
  4010c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4010c8:	687b      	ldr	r3, [r7, #4]
  4010ca:	43d9      	mvns	r1, r3
  4010cc:	697b      	ldr	r3, [r7, #20]
  4010ce:	400b      	ands	r3, r1
  4010d0:	401a      	ands	r2, r3
  4010d2:	68fb      	ldr	r3, [r7, #12]
  4010d4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4010d6:	e025      	b.n	401124 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4010d8:	68fb      	ldr	r3, [r7, #12]
  4010da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4010dc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4010de:	68fb      	ldr	r3, [r7, #12]
  4010e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4010e2:	687b      	ldr	r3, [r7, #4]
  4010e4:	43d9      	mvns	r1, r3
  4010e6:	697b      	ldr	r3, [r7, #20]
  4010e8:	400b      	ands	r3, r1
  4010ea:	401a      	ands	r2, r3
  4010ec:	68fb      	ldr	r3, [r7, #12]
  4010ee:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4010f0:	68fb      	ldr	r3, [r7, #12]
  4010f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4010f4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4010f6:	687a      	ldr	r2, [r7, #4]
  4010f8:	697b      	ldr	r3, [r7, #20]
  4010fa:	431a      	orrs	r2, r3
  4010fc:	68fb      	ldr	r3, [r7, #12]
  4010fe:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401100:	e010      	b.n	401124 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401102:	68fb      	ldr	r3, [r7, #12]
  401104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401106:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401108:	687a      	ldr	r2, [r7, #4]
  40110a:	697b      	ldr	r3, [r7, #20]
  40110c:	431a      	orrs	r2, r3
  40110e:	68fb      	ldr	r3, [r7, #12]
  401110:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401112:	68fb      	ldr	r3, [r7, #12]
  401114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401116:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401118:	687a      	ldr	r2, [r7, #4]
  40111a:	697b      	ldr	r3, [r7, #20]
  40111c:	431a      	orrs	r2, r3
  40111e:	68fb      	ldr	r3, [r7, #12]
  401120:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401122:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401124:	68fb      	ldr	r3, [r7, #12]
  401126:	687a      	ldr	r2, [r7, #4]
  401128:	605a      	str	r2, [r3, #4]
  40112a:	e000      	b.n	40112e <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  40112c:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40112e:	371c      	adds	r7, #28
  401130:	46bd      	mov	sp, r7
  401132:	bc80      	pop	{r7}
  401134:	4770      	bx	lr
  401136:	bf00      	nop

00401138 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401138:	b580      	push	{r7, lr}
  40113a:	b084      	sub	sp, #16
  40113c:	af00      	add	r7, sp, #0
  40113e:	60f8      	str	r0, [r7, #12]
  401140:	60b9      	str	r1, [r7, #8]
  401142:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401144:	68b9      	ldr	r1, [r7, #8]
  401146:	68f8      	ldr	r0, [r7, #12]
  401148:	4b19      	ldr	r3, [pc, #100]	; (4011b0 <pio_set_input+0x78>)
  40114a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40114c:	687b      	ldr	r3, [r7, #4]
  40114e:	f003 0301 	and.w	r3, r3, #1
  401152:	461a      	mov	r2, r3
  401154:	68b9      	ldr	r1, [r7, #8]
  401156:	68f8      	ldr	r0, [r7, #12]
  401158:	4b16      	ldr	r3, [pc, #88]	; (4011b4 <pio_set_input+0x7c>)
  40115a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40115c:	687b      	ldr	r3, [r7, #4]
  40115e:	f003 030a 	and.w	r3, r3, #10
  401162:	2b00      	cmp	r3, #0
  401164:	d003      	beq.n	40116e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401166:	68fb      	ldr	r3, [r7, #12]
  401168:	68ba      	ldr	r2, [r7, #8]
  40116a:	621a      	str	r2, [r3, #32]
  40116c:	e002      	b.n	401174 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40116e:	68fb      	ldr	r3, [r7, #12]
  401170:	68ba      	ldr	r2, [r7, #8]
  401172:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401174:	687b      	ldr	r3, [r7, #4]
  401176:	f003 0302 	and.w	r3, r3, #2
  40117a:	2b00      	cmp	r3, #0
  40117c:	d004      	beq.n	401188 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40117e:	68fb      	ldr	r3, [r7, #12]
  401180:	68ba      	ldr	r2, [r7, #8]
  401182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401186:	e008      	b.n	40119a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401188:	687b      	ldr	r3, [r7, #4]
  40118a:	f003 0308 	and.w	r3, r3, #8
  40118e:	2b00      	cmp	r3, #0
  401190:	d003      	beq.n	40119a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401192:	68fb      	ldr	r3, [r7, #12]
  401194:	68ba      	ldr	r2, [r7, #8]
  401196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40119a:	68fb      	ldr	r3, [r7, #12]
  40119c:	68ba      	ldr	r2, [r7, #8]
  40119e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4011a0:	68fb      	ldr	r3, [r7, #12]
  4011a2:	68ba      	ldr	r2, [r7, #8]
  4011a4:	601a      	str	r2, [r3, #0]
}
  4011a6:	bf00      	nop
  4011a8:	3710      	adds	r7, #16
  4011aa:	46bd      	mov	sp, r7
  4011ac:	bd80      	pop	{r7, pc}
  4011ae:	bf00      	nop
  4011b0:	0040121d 	.word	0x0040121d
  4011b4:	00400ffd 	.word	0x00400ffd

004011b8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4011b8:	b580      	push	{r7, lr}
  4011ba:	b084      	sub	sp, #16
  4011bc:	af00      	add	r7, sp, #0
  4011be:	60f8      	str	r0, [r7, #12]
  4011c0:	60b9      	str	r1, [r7, #8]
  4011c2:	607a      	str	r2, [r7, #4]
  4011c4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4011c6:	68b9      	ldr	r1, [r7, #8]
  4011c8:	68f8      	ldr	r0, [r7, #12]
  4011ca:	4b12      	ldr	r3, [pc, #72]	; (401214 <pio_set_output+0x5c>)
  4011cc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4011ce:	69ba      	ldr	r2, [r7, #24]
  4011d0:	68b9      	ldr	r1, [r7, #8]
  4011d2:	68f8      	ldr	r0, [r7, #12]
  4011d4:	4b10      	ldr	r3, [pc, #64]	; (401218 <pio_set_output+0x60>)
  4011d6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4011d8:	683b      	ldr	r3, [r7, #0]
  4011da:	2b00      	cmp	r3, #0
  4011dc:	d003      	beq.n	4011e6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4011de:	68fb      	ldr	r3, [r7, #12]
  4011e0:	68ba      	ldr	r2, [r7, #8]
  4011e2:	651a      	str	r2, [r3, #80]	; 0x50
  4011e4:	e002      	b.n	4011ec <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4011e6:	68fb      	ldr	r3, [r7, #12]
  4011e8:	68ba      	ldr	r2, [r7, #8]
  4011ea:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4011ec:	687b      	ldr	r3, [r7, #4]
  4011ee:	2b00      	cmp	r3, #0
  4011f0:	d003      	beq.n	4011fa <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4011f2:	68fb      	ldr	r3, [r7, #12]
  4011f4:	68ba      	ldr	r2, [r7, #8]
  4011f6:	631a      	str	r2, [r3, #48]	; 0x30
  4011f8:	e002      	b.n	401200 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4011fa:	68fb      	ldr	r3, [r7, #12]
  4011fc:	68ba      	ldr	r2, [r7, #8]
  4011fe:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401200:	68fb      	ldr	r3, [r7, #12]
  401202:	68ba      	ldr	r2, [r7, #8]
  401204:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401206:	68fb      	ldr	r3, [r7, #12]
  401208:	68ba      	ldr	r2, [r7, #8]
  40120a:	601a      	str	r2, [r3, #0]
}
  40120c:	bf00      	nop
  40120e:	3710      	adds	r7, #16
  401210:	46bd      	mov	sp, r7
  401212:	bd80      	pop	{r7, pc}
  401214:	0040121d 	.word	0x0040121d
  401218:	00400ffd 	.word	0x00400ffd

0040121c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40121c:	b480      	push	{r7}
  40121e:	b083      	sub	sp, #12
  401220:	af00      	add	r7, sp, #0
  401222:	6078      	str	r0, [r7, #4]
  401224:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401226:	687b      	ldr	r3, [r7, #4]
  401228:	683a      	ldr	r2, [r7, #0]
  40122a:	645a      	str	r2, [r3, #68]	; 0x44
}
  40122c:	bf00      	nop
  40122e:	370c      	adds	r7, #12
  401230:	46bd      	mov	sp, r7
  401232:	bc80      	pop	{r7}
  401234:	4770      	bx	lr
  401236:	bf00      	nop

00401238 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401238:	b480      	push	{r7}
  40123a:	b083      	sub	sp, #12
  40123c:	af00      	add	r7, sp, #0
  40123e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401240:	687b      	ldr	r3, [r7, #4]
  401242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401244:	4618      	mov	r0, r3
  401246:	370c      	adds	r7, #12
  401248:	46bd      	mov	sp, r7
  40124a:	bc80      	pop	{r7}
  40124c:	4770      	bx	lr
  40124e:	bf00      	nop

00401250 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401250:	b480      	push	{r7}
  401252:	b083      	sub	sp, #12
  401254:	af00      	add	r7, sp, #0
  401256:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401258:	687b      	ldr	r3, [r7, #4]
  40125a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40125c:	4618      	mov	r0, r3
  40125e:	370c      	adds	r7, #12
  401260:	46bd      	mov	sp, r7
  401262:	bc80      	pop	{r7}
  401264:	4770      	bx	lr
  401266:	bf00      	nop

00401268 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
  401268:	b580      	push	{r7, lr}
  40126a:	b084      	sub	sp, #16
  40126c:	af00      	add	r7, sp, #0
  40126e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401270:	6878      	ldr	r0, [r7, #4]
  401272:	4b12      	ldr	r3, [pc, #72]	; (4012bc <pio_toggle_pin+0x54>)
  401274:	4798      	blx	r3
  401276:	60f8      	str	r0, [r7, #12]

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  401278:	68fb      	ldr	r3, [r7, #12]
  40127a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40127c:	687a      	ldr	r2, [r7, #4]
  40127e:	f002 021f 	and.w	r2, r2, #31
  401282:	2101      	movs	r1, #1
  401284:	fa01 f202 	lsl.w	r2, r1, r2
  401288:	4013      	ands	r3, r2
  40128a:	2b00      	cmp	r3, #0
  40128c:	d009      	beq.n	4012a2 <pio_toggle_pin+0x3a>
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40128e:	687b      	ldr	r3, [r7, #4]
  401290:	f003 031f 	and.w	r3, r3, #31
  401294:	2201      	movs	r2, #1
  401296:	fa02 f303 	lsl.w	r3, r2, r3
  40129a:	461a      	mov	r2, r3
  40129c:	68fb      	ldr	r3, [r7, #12]
  40129e:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
	}
}
  4012a0:	e008      	b.n	4012b4 <pio_toggle_pin+0x4c>
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4012a2:	687b      	ldr	r3, [r7, #4]
  4012a4:	f003 031f 	and.w	r3, r3, #31
  4012a8:	2201      	movs	r2, #1
  4012aa:	fa02 f303 	lsl.w	r3, r2, r3
  4012ae:	461a      	mov	r2, r3
  4012b0:	68fb      	ldr	r3, [r7, #12]
  4012b2:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
  4012b4:	bf00      	nop
  4012b6:	3710      	adds	r7, #16
  4012b8:	46bd      	mov	sp, r7
  4012ba:	bd80      	pop	{r7, pc}
  4012bc:	0040159d 	.word	0x0040159d

004012c0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4012c0:	b590      	push	{r4, r7, lr}
  4012c2:	b087      	sub	sp, #28
  4012c4:	af02      	add	r7, sp, #8
  4012c6:	6078      	str	r0, [r7, #4]
  4012c8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4012ca:	6878      	ldr	r0, [r7, #4]
  4012cc:	4b63      	ldr	r3, [pc, #396]	; (40145c <pio_configure_pin+0x19c>)
  4012ce:	4798      	blx	r3
  4012d0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4012d2:	683b      	ldr	r3, [r7, #0]
  4012d4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4012d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4012dc:	d067      	beq.n	4013ae <pio_configure_pin+0xee>
  4012de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4012e2:	d809      	bhi.n	4012f8 <pio_configure_pin+0x38>
  4012e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4012e8:	d02b      	beq.n	401342 <pio_configure_pin+0x82>
  4012ea:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4012ee:	d043      	beq.n	401378 <pio_configure_pin+0xb8>
  4012f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4012f4:	d00a      	beq.n	40130c <pio_configure_pin+0x4c>
  4012f6:	e0a9      	b.n	40144c <pio_configure_pin+0x18c>
  4012f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4012fc:	d07e      	beq.n	4013fc <pio_configure_pin+0x13c>
  4012fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401302:	d07b      	beq.n	4013fc <pio_configure_pin+0x13c>
  401304:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401308:	d06c      	beq.n	4013e4 <pio_configure_pin+0x124>
  40130a:	e09f      	b.n	40144c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40130c:	687b      	ldr	r3, [r7, #4]
  40130e:	f003 031f 	and.w	r3, r3, #31
  401312:	2201      	movs	r2, #1
  401314:	fa02 f303 	lsl.w	r3, r2, r3
  401318:	461a      	mov	r2, r3
  40131a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40131e:	68f8      	ldr	r0, [r7, #12]
  401320:	4b4f      	ldr	r3, [pc, #316]	; (401460 <pio_configure_pin+0x1a0>)
  401322:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401324:	687b      	ldr	r3, [r7, #4]
  401326:	f003 031f 	and.w	r3, r3, #31
  40132a:	2201      	movs	r2, #1
  40132c:	fa02 f303 	lsl.w	r3, r2, r3
  401330:	4619      	mov	r1, r3
  401332:	683b      	ldr	r3, [r7, #0]
  401334:	f003 0301 	and.w	r3, r3, #1
  401338:	461a      	mov	r2, r3
  40133a:	68f8      	ldr	r0, [r7, #12]
  40133c:	4b49      	ldr	r3, [pc, #292]	; (401464 <pio_configure_pin+0x1a4>)
  40133e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401340:	e086      	b.n	401450 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401342:	687b      	ldr	r3, [r7, #4]
  401344:	f003 031f 	and.w	r3, r3, #31
  401348:	2201      	movs	r2, #1
  40134a:	fa02 f303 	lsl.w	r3, r2, r3
  40134e:	461a      	mov	r2, r3
  401350:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401354:	68f8      	ldr	r0, [r7, #12]
  401356:	4b42      	ldr	r3, [pc, #264]	; (401460 <pio_configure_pin+0x1a0>)
  401358:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40135a:	687b      	ldr	r3, [r7, #4]
  40135c:	f003 031f 	and.w	r3, r3, #31
  401360:	2201      	movs	r2, #1
  401362:	fa02 f303 	lsl.w	r3, r2, r3
  401366:	4619      	mov	r1, r3
  401368:	683b      	ldr	r3, [r7, #0]
  40136a:	f003 0301 	and.w	r3, r3, #1
  40136e:	461a      	mov	r2, r3
  401370:	68f8      	ldr	r0, [r7, #12]
  401372:	4b3c      	ldr	r3, [pc, #240]	; (401464 <pio_configure_pin+0x1a4>)
  401374:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401376:	e06b      	b.n	401450 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401378:	687b      	ldr	r3, [r7, #4]
  40137a:	f003 031f 	and.w	r3, r3, #31
  40137e:	2201      	movs	r2, #1
  401380:	fa02 f303 	lsl.w	r3, r2, r3
  401384:	461a      	mov	r2, r3
  401386:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40138a:	68f8      	ldr	r0, [r7, #12]
  40138c:	4b34      	ldr	r3, [pc, #208]	; (401460 <pio_configure_pin+0x1a0>)
  40138e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401390:	687b      	ldr	r3, [r7, #4]
  401392:	f003 031f 	and.w	r3, r3, #31
  401396:	2201      	movs	r2, #1
  401398:	fa02 f303 	lsl.w	r3, r2, r3
  40139c:	4619      	mov	r1, r3
  40139e:	683b      	ldr	r3, [r7, #0]
  4013a0:	f003 0301 	and.w	r3, r3, #1
  4013a4:	461a      	mov	r2, r3
  4013a6:	68f8      	ldr	r0, [r7, #12]
  4013a8:	4b2e      	ldr	r3, [pc, #184]	; (401464 <pio_configure_pin+0x1a4>)
  4013aa:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4013ac:	e050      	b.n	401450 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4013ae:	687b      	ldr	r3, [r7, #4]
  4013b0:	f003 031f 	and.w	r3, r3, #31
  4013b4:	2201      	movs	r2, #1
  4013b6:	fa02 f303 	lsl.w	r3, r2, r3
  4013ba:	461a      	mov	r2, r3
  4013bc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4013c0:	68f8      	ldr	r0, [r7, #12]
  4013c2:	4b27      	ldr	r3, [pc, #156]	; (401460 <pio_configure_pin+0x1a0>)
  4013c4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4013c6:	687b      	ldr	r3, [r7, #4]
  4013c8:	f003 031f 	and.w	r3, r3, #31
  4013cc:	2201      	movs	r2, #1
  4013ce:	fa02 f303 	lsl.w	r3, r2, r3
  4013d2:	4619      	mov	r1, r3
  4013d4:	683b      	ldr	r3, [r7, #0]
  4013d6:	f003 0301 	and.w	r3, r3, #1
  4013da:	461a      	mov	r2, r3
  4013dc:	68f8      	ldr	r0, [r7, #12]
  4013de:	4b21      	ldr	r3, [pc, #132]	; (401464 <pio_configure_pin+0x1a4>)
  4013e0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4013e2:	e035      	b.n	401450 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4013e4:	687b      	ldr	r3, [r7, #4]
  4013e6:	f003 031f 	and.w	r3, r3, #31
  4013ea:	2201      	movs	r2, #1
  4013ec:	fa02 f303 	lsl.w	r3, r2, r3
  4013f0:	683a      	ldr	r2, [r7, #0]
  4013f2:	4619      	mov	r1, r3
  4013f4:	68f8      	ldr	r0, [r7, #12]
  4013f6:	4b1c      	ldr	r3, [pc, #112]	; (401468 <pio_configure_pin+0x1a8>)
  4013f8:	4798      	blx	r3
		break;
  4013fa:	e029      	b.n	401450 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4013fc:	687b      	ldr	r3, [r7, #4]
  4013fe:	f003 031f 	and.w	r3, r3, #31
  401402:	2201      	movs	r2, #1
  401404:	fa02 f303 	lsl.w	r3, r2, r3
  401408:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40140a:	683b      	ldr	r3, [r7, #0]
  40140c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401410:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401414:	bf0c      	ite	eq
  401416:	2301      	moveq	r3, #1
  401418:	2300      	movne	r3, #0
  40141a:	b2db      	uxtb	r3, r3
  40141c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40141e:	683b      	ldr	r3, [r7, #0]
  401420:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401424:	2b00      	cmp	r3, #0
  401426:	bf14      	ite	ne
  401428:	2301      	movne	r3, #1
  40142a:	2300      	moveq	r3, #0
  40142c:	b2db      	uxtb	r3, r3
  40142e:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401430:	683b      	ldr	r3, [r7, #0]
  401432:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401436:	2b00      	cmp	r3, #0
  401438:	bf14      	ite	ne
  40143a:	2301      	movne	r3, #1
  40143c:	2300      	moveq	r3, #0
  40143e:	b2db      	uxtb	r3, r3
  401440:	9300      	str	r3, [sp, #0]
  401442:	4603      	mov	r3, r0
  401444:	68f8      	ldr	r0, [r7, #12]
  401446:	4c09      	ldr	r4, [pc, #36]	; (40146c <pio_configure_pin+0x1ac>)
  401448:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40144a:	e001      	b.n	401450 <pio_configure_pin+0x190>

	default:
		return 0;
  40144c:	2300      	movs	r3, #0
  40144e:	e000      	b.n	401452 <pio_configure_pin+0x192>
	}

	return 1;
  401450:	2301      	movs	r3, #1
}
  401452:	4618      	mov	r0, r3
  401454:	3714      	adds	r7, #20
  401456:	46bd      	mov	sp, r7
  401458:	bd90      	pop	{r4, r7, pc}
  40145a:	bf00      	nop
  40145c:	0040159d 	.word	0x0040159d
  401460:	00401029 	.word	0x00401029
  401464:	00400ffd 	.word	0x00400ffd
  401468:	00401139 	.word	0x00401139
  40146c:	004011b9 	.word	0x004011b9

00401470 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401470:	b590      	push	{r4, r7, lr}
  401472:	b087      	sub	sp, #28
  401474:	af02      	add	r7, sp, #8
  401476:	60f8      	str	r0, [r7, #12]
  401478:	60b9      	str	r1, [r7, #8]
  40147a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40147c:	687b      	ldr	r3, [r7, #4]
  40147e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401486:	d043      	beq.n	401510 <pio_configure_pin_group+0xa0>
  401488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40148c:	d809      	bhi.n	4014a2 <pio_configure_pin_group+0x32>
  40148e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401492:	d01f      	beq.n	4014d4 <pio_configure_pin_group+0x64>
  401494:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401498:	d02b      	beq.n	4014f2 <pio_configure_pin_group+0x82>
  40149a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40149e:	d00a      	beq.n	4014b6 <pio_configure_pin_group+0x46>
  4014a0:	e06d      	b.n	40157e <pio_configure_pin_group+0x10e>
  4014a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4014a6:	d048      	beq.n	40153a <pio_configure_pin_group+0xca>
  4014a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4014ac:	d045      	beq.n	40153a <pio_configure_pin_group+0xca>
  4014ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4014b2:	d03c      	beq.n	40152e <pio_configure_pin_group+0xbe>
  4014b4:	e063      	b.n	40157e <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4014b6:	68ba      	ldr	r2, [r7, #8]
  4014b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4014bc:	68f8      	ldr	r0, [r7, #12]
  4014be:	4b33      	ldr	r3, [pc, #204]	; (40158c <pio_configure_pin_group+0x11c>)
  4014c0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4014c2:	687b      	ldr	r3, [r7, #4]
  4014c4:	f003 0301 	and.w	r3, r3, #1
  4014c8:	461a      	mov	r2, r3
  4014ca:	68b9      	ldr	r1, [r7, #8]
  4014cc:	68f8      	ldr	r0, [r7, #12]
  4014ce:	4b30      	ldr	r3, [pc, #192]	; (401590 <pio_configure_pin_group+0x120>)
  4014d0:	4798      	blx	r3
		break;
  4014d2:	e056      	b.n	401582 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4014d4:	68ba      	ldr	r2, [r7, #8]
  4014d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4014da:	68f8      	ldr	r0, [r7, #12]
  4014dc:	4b2b      	ldr	r3, [pc, #172]	; (40158c <pio_configure_pin_group+0x11c>)
  4014de:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4014e0:	687b      	ldr	r3, [r7, #4]
  4014e2:	f003 0301 	and.w	r3, r3, #1
  4014e6:	461a      	mov	r2, r3
  4014e8:	68b9      	ldr	r1, [r7, #8]
  4014ea:	68f8      	ldr	r0, [r7, #12]
  4014ec:	4b28      	ldr	r3, [pc, #160]	; (401590 <pio_configure_pin_group+0x120>)
  4014ee:	4798      	blx	r3
		break;
  4014f0:	e047      	b.n	401582 <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4014f2:	68ba      	ldr	r2, [r7, #8]
  4014f4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4014f8:	68f8      	ldr	r0, [r7, #12]
  4014fa:	4b24      	ldr	r3, [pc, #144]	; (40158c <pio_configure_pin_group+0x11c>)
  4014fc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4014fe:	687b      	ldr	r3, [r7, #4]
  401500:	f003 0301 	and.w	r3, r3, #1
  401504:	461a      	mov	r2, r3
  401506:	68b9      	ldr	r1, [r7, #8]
  401508:	68f8      	ldr	r0, [r7, #12]
  40150a:	4b21      	ldr	r3, [pc, #132]	; (401590 <pio_configure_pin_group+0x120>)
  40150c:	4798      	blx	r3
		break;
  40150e:	e038      	b.n	401582 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401510:	68ba      	ldr	r2, [r7, #8]
  401512:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401516:	68f8      	ldr	r0, [r7, #12]
  401518:	4b1c      	ldr	r3, [pc, #112]	; (40158c <pio_configure_pin_group+0x11c>)
  40151a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40151c:	687b      	ldr	r3, [r7, #4]
  40151e:	f003 0301 	and.w	r3, r3, #1
  401522:	461a      	mov	r2, r3
  401524:	68b9      	ldr	r1, [r7, #8]
  401526:	68f8      	ldr	r0, [r7, #12]
  401528:	4b19      	ldr	r3, [pc, #100]	; (401590 <pio_configure_pin_group+0x120>)
  40152a:	4798      	blx	r3
		break;
  40152c:	e029      	b.n	401582 <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40152e:	687a      	ldr	r2, [r7, #4]
  401530:	68b9      	ldr	r1, [r7, #8]
  401532:	68f8      	ldr	r0, [r7, #12]
  401534:	4b17      	ldr	r3, [pc, #92]	; (401594 <pio_configure_pin_group+0x124>)
  401536:	4798      	blx	r3
		break;
  401538:	e023      	b.n	401582 <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40153a:	687b      	ldr	r3, [r7, #4]
  40153c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401540:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401544:	bf0c      	ite	eq
  401546:	2301      	moveq	r3, #1
  401548:	2300      	movne	r3, #0
  40154a:	b2db      	uxtb	r3, r3
  40154c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40154e:	687b      	ldr	r3, [r7, #4]
  401550:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401554:	2b00      	cmp	r3, #0
  401556:	bf14      	ite	ne
  401558:	2301      	movne	r3, #1
  40155a:	2300      	moveq	r3, #0
  40155c:	b2db      	uxtb	r3, r3
  40155e:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401560:	687b      	ldr	r3, [r7, #4]
  401562:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401566:	2b00      	cmp	r3, #0
  401568:	bf14      	ite	ne
  40156a:	2301      	movne	r3, #1
  40156c:	2300      	moveq	r3, #0
  40156e:	b2db      	uxtb	r3, r3
  401570:	9300      	str	r3, [sp, #0]
  401572:	460b      	mov	r3, r1
  401574:	68b9      	ldr	r1, [r7, #8]
  401576:	68f8      	ldr	r0, [r7, #12]
  401578:	4c07      	ldr	r4, [pc, #28]	; (401598 <pio_configure_pin_group+0x128>)
  40157a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40157c:	e001      	b.n	401582 <pio_configure_pin_group+0x112>

	default:
		return 0;
  40157e:	2300      	movs	r3, #0
  401580:	e000      	b.n	401584 <pio_configure_pin_group+0x114>
	}

	return 1;
  401582:	2301      	movs	r3, #1
}
  401584:	4618      	mov	r0, r3
  401586:	3714      	adds	r7, #20
  401588:	46bd      	mov	sp, r7
  40158a:	bd90      	pop	{r4, r7, pc}
  40158c:	00401029 	.word	0x00401029
  401590:	00400ffd 	.word	0x00400ffd
  401594:	00401139 	.word	0x00401139
  401598:	004011b9 	.word	0x004011b9

0040159c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40159c:	b480      	push	{r7}
  40159e:	b085      	sub	sp, #20
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4015a4:	687b      	ldr	r3, [r7, #4]
  4015a6:	095b      	lsrs	r3, r3, #5
  4015a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4015ac:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4015b0:	025b      	lsls	r3, r3, #9
  4015b2:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4015b4:	68fb      	ldr	r3, [r7, #12]
}
  4015b6:	4618      	mov	r0, r3
  4015b8:	3714      	adds	r7, #20
  4015ba:	46bd      	mov	sp, r7
  4015bc:	bc80      	pop	{r7}
  4015be:	4770      	bx	lr

004015c0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4015c0:	b480      	push	{r7}
  4015c2:	b085      	sub	sp, #20
  4015c4:	af00      	add	r7, sp, #0
  4015c6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4015c8:	491c      	ldr	r1, [pc, #112]	; (40163c <pmc_switch_mck_to_pllack+0x7c>)
  4015ca:	4b1c      	ldr	r3, [pc, #112]	; (40163c <pmc_switch_mck_to_pllack+0x7c>)
  4015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4015d2:	687b      	ldr	r3, [r7, #4]
  4015d4:	4313      	orrs	r3, r2
  4015d6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4015d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4015dc:	60fb      	str	r3, [r7, #12]
  4015de:	e007      	b.n	4015f0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4015e0:	68fb      	ldr	r3, [r7, #12]
  4015e2:	2b00      	cmp	r3, #0
  4015e4:	d101      	bne.n	4015ea <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4015e6:	2301      	movs	r3, #1
  4015e8:	e023      	b.n	401632 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4015ea:	68fb      	ldr	r3, [r7, #12]
  4015ec:	3b01      	subs	r3, #1
  4015ee:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4015f0:	4b12      	ldr	r3, [pc, #72]	; (40163c <pmc_switch_mck_to_pllack+0x7c>)
  4015f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015f4:	f003 0308 	and.w	r3, r3, #8
  4015f8:	2b00      	cmp	r3, #0
  4015fa:	d0f1      	beq.n	4015e0 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4015fc:	4a0f      	ldr	r2, [pc, #60]	; (40163c <pmc_switch_mck_to_pllack+0x7c>)
  4015fe:	4b0f      	ldr	r3, [pc, #60]	; (40163c <pmc_switch_mck_to_pllack+0x7c>)
  401600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401602:	f023 0303 	bic.w	r3, r3, #3
  401606:	f043 0302 	orr.w	r3, r3, #2
  40160a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40160c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401610:	60fb      	str	r3, [r7, #12]
  401612:	e007      	b.n	401624 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401614:	68fb      	ldr	r3, [r7, #12]
  401616:	2b00      	cmp	r3, #0
  401618:	d101      	bne.n	40161e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40161a:	2301      	movs	r3, #1
  40161c:	e009      	b.n	401632 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40161e:	68fb      	ldr	r3, [r7, #12]
  401620:	3b01      	subs	r3, #1
  401622:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401624:	4b05      	ldr	r3, [pc, #20]	; (40163c <pmc_switch_mck_to_pllack+0x7c>)
  401626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401628:	f003 0308 	and.w	r3, r3, #8
  40162c:	2b00      	cmp	r3, #0
  40162e:	d0f1      	beq.n	401614 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401630:	2300      	movs	r3, #0
}
  401632:	4618      	mov	r0, r3
  401634:	3714      	adds	r7, #20
  401636:	46bd      	mov	sp, r7
  401638:	bc80      	pop	{r7}
  40163a:	4770      	bx	lr
  40163c:	400e0400 	.word	0x400e0400

00401640 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401640:	b480      	push	{r7}
  401642:	b083      	sub	sp, #12
  401644:	af00      	add	r7, sp, #0
  401646:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401648:	687b      	ldr	r3, [r7, #4]
  40164a:	2b01      	cmp	r3, #1
  40164c:	d107      	bne.n	40165e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40164e:	4a08      	ldr	r2, [pc, #32]	; (401670 <pmc_switch_sclk_to_32kxtal+0x30>)
  401650:	4b07      	ldr	r3, [pc, #28]	; (401670 <pmc_switch_sclk_to_32kxtal+0x30>)
  401652:	689b      	ldr	r3, [r3, #8]
  401654:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40165c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40165e:	4b04      	ldr	r3, [pc, #16]	; (401670 <pmc_switch_sclk_to_32kxtal+0x30>)
  401660:	4a04      	ldr	r2, [pc, #16]	; (401674 <pmc_switch_sclk_to_32kxtal+0x34>)
  401662:	601a      	str	r2, [r3, #0]
}
  401664:	bf00      	nop
  401666:	370c      	adds	r7, #12
  401668:	46bd      	mov	sp, r7
  40166a:	bc80      	pop	{r7}
  40166c:	4770      	bx	lr
  40166e:	bf00      	nop
  401670:	400e1410 	.word	0x400e1410
  401674:	a5000008 	.word	0xa5000008

00401678 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401678:	b480      	push	{r7}
  40167a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40167c:	4b09      	ldr	r3, [pc, #36]	; (4016a4 <pmc_osc_is_ready_32kxtal+0x2c>)
  40167e:	695b      	ldr	r3, [r3, #20]
  401680:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401684:	2b00      	cmp	r3, #0
  401686:	d007      	beq.n	401698 <pmc_osc_is_ready_32kxtal+0x20>
  401688:	4b07      	ldr	r3, [pc, #28]	; (4016a8 <pmc_osc_is_ready_32kxtal+0x30>)
  40168a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401690:	2b00      	cmp	r3, #0
  401692:	d001      	beq.n	401698 <pmc_osc_is_ready_32kxtal+0x20>
  401694:	2301      	movs	r3, #1
  401696:	e000      	b.n	40169a <pmc_osc_is_ready_32kxtal+0x22>
  401698:	2300      	movs	r3, #0
}
  40169a:	4618      	mov	r0, r3
  40169c:	46bd      	mov	sp, r7
  40169e:	bc80      	pop	{r7}
  4016a0:	4770      	bx	lr
  4016a2:	bf00      	nop
  4016a4:	400e1410 	.word	0x400e1410
  4016a8:	400e0400 	.word	0x400e0400

004016ac <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4016ac:	b480      	push	{r7}
  4016ae:	b083      	sub	sp, #12
  4016b0:	af00      	add	r7, sp, #0
  4016b2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4016b4:	4a18      	ldr	r2, [pc, #96]	; (401718 <pmc_switch_mainck_to_fastrc+0x6c>)
  4016b6:	4b18      	ldr	r3, [pc, #96]	; (401718 <pmc_switch_mainck_to_fastrc+0x6c>)
  4016b8:	6a1b      	ldr	r3, [r3, #32]
  4016ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4016be:	f043 0308 	orr.w	r3, r3, #8
  4016c2:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4016c4:	bf00      	nop
  4016c6:	4b14      	ldr	r3, [pc, #80]	; (401718 <pmc_switch_mainck_to_fastrc+0x6c>)
  4016c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4016ce:	2b00      	cmp	r3, #0
  4016d0:	d0f9      	beq.n	4016c6 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4016d2:	4911      	ldr	r1, [pc, #68]	; (401718 <pmc_switch_mainck_to_fastrc+0x6c>)
  4016d4:	4b10      	ldr	r3, [pc, #64]	; (401718 <pmc_switch_mainck_to_fastrc+0x6c>)
  4016d6:	6a1b      	ldr	r3, [r3, #32]
  4016d8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4016dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4016e0:	687a      	ldr	r2, [r7, #4]
  4016e2:	4313      	orrs	r3, r2
  4016e4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4016e8:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4016ea:	bf00      	nop
  4016ec:	4b0a      	ldr	r3, [pc, #40]	; (401718 <pmc_switch_mainck_to_fastrc+0x6c>)
  4016ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4016f4:	2b00      	cmp	r3, #0
  4016f6:	d0f9      	beq.n	4016ec <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4016f8:	4a07      	ldr	r2, [pc, #28]	; (401718 <pmc_switch_mainck_to_fastrc+0x6c>)
  4016fa:	4b07      	ldr	r3, [pc, #28]	; (401718 <pmc_switch_mainck_to_fastrc+0x6c>)
  4016fc:	6a1b      	ldr	r3, [r3, #32]
  4016fe:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401706:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40170a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40170c:	bf00      	nop
  40170e:	370c      	adds	r7, #12
  401710:	46bd      	mov	sp, r7
  401712:	bc80      	pop	{r7}
  401714:	4770      	bx	lr
  401716:	bf00      	nop
  401718:	400e0400 	.word	0x400e0400

0040171c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40171c:	b480      	push	{r7}
  40171e:	b083      	sub	sp, #12
  401720:	af00      	add	r7, sp, #0
  401722:	6078      	str	r0, [r7, #4]
  401724:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401726:	687b      	ldr	r3, [r7, #4]
  401728:	2b00      	cmp	r3, #0
  40172a:	d008      	beq.n	40173e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40172c:	4916      	ldr	r1, [pc, #88]	; (401788 <pmc_switch_mainck_to_xtal+0x6c>)
  40172e:	4b16      	ldr	r3, [pc, #88]	; (401788 <pmc_switch_mainck_to_xtal+0x6c>)
  401730:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401732:	4a16      	ldr	r2, [pc, #88]	; (40178c <pmc_switch_mainck_to_xtal+0x70>)
  401734:	401a      	ands	r2, r3
  401736:	4b16      	ldr	r3, [pc, #88]	; (401790 <pmc_switch_mainck_to_xtal+0x74>)
  401738:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40173a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40173c:	e01e      	b.n	40177c <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40173e:	4912      	ldr	r1, [pc, #72]	; (401788 <pmc_switch_mainck_to_xtal+0x6c>)
  401740:	4b11      	ldr	r3, [pc, #68]	; (401788 <pmc_switch_mainck_to_xtal+0x6c>)
  401742:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401744:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401748:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40174c:	683a      	ldr	r2, [r7, #0]
  40174e:	0212      	lsls	r2, r2, #8
  401750:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401752:	4313      	orrs	r3, r2
  401754:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401758:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40175c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40175e:	bf00      	nop
  401760:	4b09      	ldr	r3, [pc, #36]	; (401788 <pmc_switch_mainck_to_xtal+0x6c>)
  401762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401764:	f003 0301 	and.w	r3, r3, #1
  401768:	2b00      	cmp	r3, #0
  40176a:	d0f9      	beq.n	401760 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40176c:	4a06      	ldr	r2, [pc, #24]	; (401788 <pmc_switch_mainck_to_xtal+0x6c>)
  40176e:	4b06      	ldr	r3, [pc, #24]	; (401788 <pmc_switch_mainck_to_xtal+0x6c>)
  401770:	6a1b      	ldr	r3, [r3, #32]
  401772:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40177a:	6213      	str	r3, [r2, #32]
	}
}
  40177c:	bf00      	nop
  40177e:	370c      	adds	r7, #12
  401780:	46bd      	mov	sp, r7
  401782:	bc80      	pop	{r7}
  401784:	4770      	bx	lr
  401786:	bf00      	nop
  401788:	400e0400 	.word	0x400e0400
  40178c:	fec8fffc 	.word	0xfec8fffc
  401790:	01370002 	.word	0x01370002

00401794 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401794:	b480      	push	{r7}
  401796:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401798:	4b03      	ldr	r3, [pc, #12]	; (4017a8 <pmc_osc_is_ready_mainck+0x14>)
  40179a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4017a0:	4618      	mov	r0, r3
  4017a2:	46bd      	mov	sp, r7
  4017a4:	bc80      	pop	{r7}
  4017a6:	4770      	bx	lr
  4017a8:	400e0400 	.word	0x400e0400

004017ac <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4017ac:	b480      	push	{r7}
  4017ae:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4017b0:	4b03      	ldr	r3, [pc, #12]	; (4017c0 <pmc_disable_pllack+0x14>)
  4017b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4017b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4017b8:	bf00      	nop
  4017ba:	46bd      	mov	sp, r7
  4017bc:	bc80      	pop	{r7}
  4017be:	4770      	bx	lr
  4017c0:	400e0400 	.word	0x400e0400

004017c4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4017c4:	b480      	push	{r7}
  4017c6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4017c8:	4b03      	ldr	r3, [pc, #12]	; (4017d8 <pmc_is_locked_pllack+0x14>)
  4017ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017cc:	f003 0302 	and.w	r3, r3, #2
}
  4017d0:	4618      	mov	r0, r3
  4017d2:	46bd      	mov	sp, r7
  4017d4:	bc80      	pop	{r7}
  4017d6:	4770      	bx	lr
  4017d8:	400e0400 	.word	0x400e0400

004017dc <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4017dc:	b480      	push	{r7}
  4017de:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4017e0:	4b03      	ldr	r3, [pc, #12]	; (4017f0 <pmc_disable_pllbck+0x14>)
  4017e2:	2200      	movs	r2, #0
  4017e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4017e6:	bf00      	nop
  4017e8:	46bd      	mov	sp, r7
  4017ea:	bc80      	pop	{r7}
  4017ec:	4770      	bx	lr
  4017ee:	bf00      	nop
  4017f0:	400e0400 	.word	0x400e0400

004017f4 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4017f4:	b480      	push	{r7}
  4017f6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4017f8:	4b03      	ldr	r3, [pc, #12]	; (401808 <pmc_is_locked_pllbck+0x14>)
  4017fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017fc:	f003 0304 	and.w	r3, r3, #4
}
  401800:	4618      	mov	r0, r3
  401802:	46bd      	mov	sp, r7
  401804:	bc80      	pop	{r7}
  401806:	4770      	bx	lr
  401808:	400e0400 	.word	0x400e0400

0040180c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40180c:	b480      	push	{r7}
  40180e:	b083      	sub	sp, #12
  401810:	af00      	add	r7, sp, #0
  401812:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401814:	687b      	ldr	r3, [r7, #4]
  401816:	2b22      	cmp	r3, #34	; 0x22
  401818:	d901      	bls.n	40181e <pmc_enable_periph_clk+0x12>
		return 1;
  40181a:	2301      	movs	r3, #1
  40181c:	e02f      	b.n	40187e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40181e:	687b      	ldr	r3, [r7, #4]
  401820:	2b1f      	cmp	r3, #31
  401822:	d813      	bhi.n	40184c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401824:	4b18      	ldr	r3, [pc, #96]	; (401888 <pmc_enable_periph_clk+0x7c>)
  401826:	699a      	ldr	r2, [r3, #24]
  401828:	2101      	movs	r1, #1
  40182a:	687b      	ldr	r3, [r7, #4]
  40182c:	fa01 f303 	lsl.w	r3, r1, r3
  401830:	401a      	ands	r2, r3
  401832:	2101      	movs	r1, #1
  401834:	687b      	ldr	r3, [r7, #4]
  401836:	fa01 f303 	lsl.w	r3, r1, r3
  40183a:	429a      	cmp	r2, r3
  40183c:	d01e      	beq.n	40187c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40183e:	4a12      	ldr	r2, [pc, #72]	; (401888 <pmc_enable_periph_clk+0x7c>)
  401840:	2101      	movs	r1, #1
  401842:	687b      	ldr	r3, [r7, #4]
  401844:	fa01 f303 	lsl.w	r3, r1, r3
  401848:	6113      	str	r3, [r2, #16]
  40184a:	e017      	b.n	40187c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40184c:	687b      	ldr	r3, [r7, #4]
  40184e:	3b20      	subs	r3, #32
  401850:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401852:	4b0d      	ldr	r3, [pc, #52]	; (401888 <pmc_enable_periph_clk+0x7c>)
  401854:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401858:	2101      	movs	r1, #1
  40185a:	687b      	ldr	r3, [r7, #4]
  40185c:	fa01 f303 	lsl.w	r3, r1, r3
  401860:	401a      	ands	r2, r3
  401862:	2101      	movs	r1, #1
  401864:	687b      	ldr	r3, [r7, #4]
  401866:	fa01 f303 	lsl.w	r3, r1, r3
  40186a:	429a      	cmp	r2, r3
  40186c:	d006      	beq.n	40187c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40186e:	4a06      	ldr	r2, [pc, #24]	; (401888 <pmc_enable_periph_clk+0x7c>)
  401870:	2101      	movs	r1, #1
  401872:	687b      	ldr	r3, [r7, #4]
  401874:	fa01 f303 	lsl.w	r3, r1, r3
  401878:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40187c:	2300      	movs	r3, #0
}
  40187e:	4618      	mov	r0, r3
  401880:	370c      	adds	r7, #12
  401882:	46bd      	mov	sp, r7
  401884:	bc80      	pop	{r7}
  401886:	4770      	bx	lr
  401888:	400e0400 	.word	0x400e0400

0040188c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40188c:	b580      	push	{r7, lr}
  40188e:	b082      	sub	sp, #8
  401890:	af00      	add	r7, sp, #0
  401892:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401894:	6878      	ldr	r0, [r7, #4]
  401896:	4b03      	ldr	r3, [pc, #12]	; (4018a4 <sysclk_enable_peripheral_clock+0x18>)
  401898:	4798      	blx	r3
}
  40189a:	bf00      	nop
  40189c:	3708      	adds	r7, #8
  40189e:	46bd      	mov	sp, r7
  4018a0:	bd80      	pop	{r7, pc}
  4018a2:	bf00      	nop
  4018a4:	0040180d 	.word	0x0040180d

004018a8 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4018a8:	b580      	push	{r7, lr}
  4018aa:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4018ac:	200b      	movs	r0, #11
  4018ae:	4b05      	ldr	r3, [pc, #20]	; (4018c4 <ioport_init+0x1c>)
  4018b0:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4018b2:	200c      	movs	r0, #12
  4018b4:	4b03      	ldr	r3, [pc, #12]	; (4018c4 <ioport_init+0x1c>)
  4018b6:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4018b8:	200d      	movs	r0, #13
  4018ba:	4b02      	ldr	r3, [pc, #8]	; (4018c4 <ioport_init+0x1c>)
  4018bc:	4798      	blx	r3
	arch_ioport_init();
}
  4018be:	bf00      	nop
  4018c0:	bd80      	pop	{r7, pc}
  4018c2:	bf00      	nop
  4018c4:	0040188d 	.word	0x0040188d

004018c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4018c8:	b580      	push	{r7, lr}
  4018ca:	af00      	add	r7, sp, #0
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4018cc:	4b0d      	ldr	r3, [pc, #52]	; (401904 <board_init+0x3c>)
  4018ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4018d2:	605a      	str	r2, [r3, #4]

	/* Init IO Port service to enable configuring pins */
	ioport_init();
  4018d4:	4b0c      	ldr	r3, [pc, #48]	; (401908 <board_init+0x40>)
  4018d6:	4798      	blx	r3

	/* Configure UART1 pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4018d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4018dc:	210c      	movs	r1, #12
  4018de:	480b      	ldr	r0, [pc, #44]	; (40190c <board_init+0x44>)
  4018e0:	4b0b      	ldr	r3, [pc, #44]	; (401910 <board_init+0x48>)
  4018e2:	4798      	blx	r3

	/* Configure USART0 pins */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  4018e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4018e8:	2160      	movs	r1, #96	; 0x60
  4018ea:	480a      	ldr	r0, [pc, #40]	; (401914 <board_init+0x4c>)
  4018ec:	4b08      	ldr	r3, [pc, #32]	; (401910 <board_init+0x48>)
  4018ee:	4798      	blx	r3

	/* Configure USART1 pins */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  4018f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4018f4:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
  4018f8:	4806      	ldr	r0, [pc, #24]	; (401914 <board_init+0x4c>)
  4018fa:	4b05      	ldr	r3, [pc, #20]	; (401910 <board_init+0x48>)
  4018fc:	4798      	blx	r3
}
  4018fe:	bf00      	nop
  401900:	bd80      	pop	{r7, pc}
  401902:	bf00      	nop
  401904:	400e1450 	.word	0x400e1450
  401908:	004018a9 	.word	0x004018a9
  40190c:	400e1000 	.word	0x400e1000
  401910:	00401471 	.word	0x00401471
  401914:	400e0e00 	.word	0x400e0e00

00401918 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401918:	b580      	push	{r7, lr}
  40191a:	b084      	sub	sp, #16
  40191c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40191e:	4b27      	ldr	r3, [pc, #156]	; (4019bc <Reset_Handler+0xa4>)
  401920:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401922:	4b27      	ldr	r3, [pc, #156]	; (4019c0 <Reset_Handler+0xa8>)
  401924:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401926:	68fa      	ldr	r2, [r7, #12]
  401928:	68bb      	ldr	r3, [r7, #8]
  40192a:	429a      	cmp	r2, r3
  40192c:	d90d      	bls.n	40194a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40192e:	e007      	b.n	401940 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401930:	68bb      	ldr	r3, [r7, #8]
  401932:	1d1a      	adds	r2, r3, #4
  401934:	60ba      	str	r2, [r7, #8]
  401936:	68fa      	ldr	r2, [r7, #12]
  401938:	1d11      	adds	r1, r2, #4
  40193a:	60f9      	str	r1, [r7, #12]
  40193c:	6812      	ldr	r2, [r2, #0]
  40193e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401940:	68bb      	ldr	r3, [r7, #8]
  401942:	4a20      	ldr	r2, [pc, #128]	; (4019c4 <Reset_Handler+0xac>)
  401944:	4293      	cmp	r3, r2
  401946:	d3f3      	bcc.n	401930 <Reset_Handler+0x18>
  401948:	e020      	b.n	40198c <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40194a:	68fa      	ldr	r2, [r7, #12]
  40194c:	68bb      	ldr	r3, [r7, #8]
  40194e:	429a      	cmp	r2, r3
  401950:	d21c      	bcs.n	40198c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401952:	4a1c      	ldr	r2, [pc, #112]	; (4019c4 <Reset_Handler+0xac>)
  401954:	4b1a      	ldr	r3, [pc, #104]	; (4019c0 <Reset_Handler+0xa8>)
  401956:	1ad3      	subs	r3, r2, r3
  401958:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40195a:	68fa      	ldr	r2, [r7, #12]
  40195c:	687b      	ldr	r3, [r7, #4]
  40195e:	4413      	add	r3, r2
  401960:	3b04      	subs	r3, #4
  401962:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401964:	68ba      	ldr	r2, [r7, #8]
  401966:	687b      	ldr	r3, [r7, #4]
  401968:	4413      	add	r3, r2
  40196a:	3b04      	subs	r3, #4
  40196c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40196e:	e00a      	b.n	401986 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401970:	68bb      	ldr	r3, [r7, #8]
  401972:	1f1a      	subs	r2, r3, #4
  401974:	60ba      	str	r2, [r7, #8]
  401976:	68fa      	ldr	r2, [r7, #12]
  401978:	1f11      	subs	r1, r2, #4
  40197a:	60f9      	str	r1, [r7, #12]
  40197c:	6812      	ldr	r2, [r2, #0]
  40197e:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401980:	687b      	ldr	r3, [r7, #4]
  401982:	3b04      	subs	r3, #4
  401984:	607b      	str	r3, [r7, #4]
  401986:	687b      	ldr	r3, [r7, #4]
  401988:	2b00      	cmp	r3, #0
  40198a:	d1f1      	bne.n	401970 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40198c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40198e:	4b0e      	ldr	r3, [pc, #56]	; (4019c8 <Reset_Handler+0xb0>)
  401990:	60bb      	str	r3, [r7, #8]
  401992:	e004      	b.n	40199e <Reset_Handler+0x86>
		*pDest++ = 0;
  401994:	68bb      	ldr	r3, [r7, #8]
  401996:	1d1a      	adds	r2, r3, #4
  401998:	60ba      	str	r2, [r7, #8]
  40199a:	2200      	movs	r2, #0
  40199c:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40199e:	68bb      	ldr	r3, [r7, #8]
  4019a0:	4a0a      	ldr	r2, [pc, #40]	; (4019cc <Reset_Handler+0xb4>)
  4019a2:	4293      	cmp	r3, r2
  4019a4:	d3f6      	bcc.n	401994 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4019a6:	4b0a      	ldr	r3, [pc, #40]	; (4019d0 <Reset_Handler+0xb8>)
  4019a8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4019aa:	4a0a      	ldr	r2, [pc, #40]	; (4019d4 <Reset_Handler+0xbc>)
  4019ac:	68fb      	ldr	r3, [r7, #12]
  4019ae:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4019b0:	4b09      	ldr	r3, [pc, #36]	; (4019d8 <Reset_Handler+0xc0>)
  4019b2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4019b4:	4b09      	ldr	r3, [pc, #36]	; (4019dc <Reset_Handler+0xc4>)
  4019b6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4019b8:	e7fe      	b.n	4019b8 <Reset_Handler+0xa0>
  4019ba:	bf00      	nop
  4019bc:	00404190 	.word	0x00404190
  4019c0:	20000000 	.word	0x20000000
  4019c4:	20000844 	.word	0x20000844
  4019c8:	20000844 	.word	0x20000844
  4019cc:	20000cc4 	.word	0x20000cc4
  4019d0:	00400000 	.word	0x00400000
  4019d4:	e000ed00 	.word	0xe000ed00
  4019d8:	004030e9 	.word	0x004030e9
  4019dc:	0040210d 	.word	0x0040210d

004019e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4019e0:	b480      	push	{r7}
  4019e2:	af00      	add	r7, sp, #0
	while (1) {
	}
  4019e4:	e7fe      	b.n	4019e4 <Dummy_Handler+0x4>
  4019e6:	bf00      	nop

004019e8 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4019e8:	b480      	push	{r7}
  4019ea:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4019ec:	4b5d      	ldr	r3, [pc, #372]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  4019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4019f0:	f003 0303 	and.w	r3, r3, #3
  4019f4:	2b03      	cmp	r3, #3
  4019f6:	f200 8096 	bhi.w	401b26 <SystemCoreClockUpdate+0x13e>
  4019fa:	a201      	add	r2, pc, #4	; (adr r2, 401a00 <SystemCoreClockUpdate+0x18>)
  4019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a00:	00401a11 	.word	0x00401a11
  401a04:	00401a31 	.word	0x00401a31
  401a08:	00401a7b 	.word	0x00401a7b
  401a0c:	00401a7b 	.word	0x00401a7b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401a10:	4b55      	ldr	r3, [pc, #340]	; (401b68 <SystemCoreClockUpdate+0x180>)
  401a12:	695b      	ldr	r3, [r3, #20]
  401a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a18:	2b00      	cmp	r3, #0
  401a1a:	d004      	beq.n	401a26 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401a1c:	4b53      	ldr	r3, [pc, #332]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401a1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401a22:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401a24:	e080      	b.n	401b28 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401a26:	4b51      	ldr	r3, [pc, #324]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401a28:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401a2c:	601a      	str	r2, [r3, #0]
			}
		break;
  401a2e:	e07b      	b.n	401b28 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401a30:	4b4c      	ldr	r3, [pc, #304]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401a32:	6a1b      	ldr	r3, [r3, #32]
  401a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401a38:	2b00      	cmp	r3, #0
  401a3a:	d003      	beq.n	401a44 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401a3c:	4b4b      	ldr	r3, [pc, #300]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401a3e:	4a4c      	ldr	r2, [pc, #304]	; (401b70 <SystemCoreClockUpdate+0x188>)
  401a40:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401a42:	e071      	b.n	401b28 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401a44:	4b49      	ldr	r3, [pc, #292]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401a46:	4a4b      	ldr	r2, [pc, #300]	; (401b74 <SystemCoreClockUpdate+0x18c>)
  401a48:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401a4a:	4b46      	ldr	r3, [pc, #280]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401a4c:	6a1b      	ldr	r3, [r3, #32]
  401a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401a52:	2b10      	cmp	r3, #16
  401a54:	d008      	beq.n	401a68 <SystemCoreClockUpdate+0x80>
  401a56:	2b20      	cmp	r3, #32
  401a58:	d00a      	beq.n	401a70 <SystemCoreClockUpdate+0x88>
  401a5a:	2b00      	cmp	r3, #0
  401a5c:	d000      	beq.n	401a60 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  401a5e:	e00b      	b.n	401a78 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401a60:	4b42      	ldr	r3, [pc, #264]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401a62:	4a44      	ldr	r2, [pc, #272]	; (401b74 <SystemCoreClockUpdate+0x18c>)
  401a64:	601a      	str	r2, [r3, #0]
			break;
  401a66:	e007      	b.n	401a78 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401a68:	4b40      	ldr	r3, [pc, #256]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401a6a:	4a43      	ldr	r2, [pc, #268]	; (401b78 <SystemCoreClockUpdate+0x190>)
  401a6c:	601a      	str	r2, [r3, #0]
			break;
  401a6e:	e003      	b.n	401a78 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401a70:	4b3e      	ldr	r3, [pc, #248]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401a72:	4a3f      	ldr	r2, [pc, #252]	; (401b70 <SystemCoreClockUpdate+0x188>)
  401a74:	601a      	str	r2, [r3, #0]
			break;
  401a76:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  401a78:	e056      	b.n	401b28 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401a7a:	4b3a      	ldr	r3, [pc, #232]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401a7c:	6a1b      	ldr	r3, [r3, #32]
  401a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401a82:	2b00      	cmp	r3, #0
  401a84:	d003      	beq.n	401a8e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401a86:	4b39      	ldr	r3, [pc, #228]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401a88:	4a39      	ldr	r2, [pc, #228]	; (401b70 <SystemCoreClockUpdate+0x188>)
  401a8a:	601a      	str	r2, [r3, #0]
  401a8c:	e019      	b.n	401ac2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401a8e:	4b37      	ldr	r3, [pc, #220]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401a90:	4a38      	ldr	r2, [pc, #224]	; (401b74 <SystemCoreClockUpdate+0x18c>)
  401a92:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401a94:	4b33      	ldr	r3, [pc, #204]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401a96:	6a1b      	ldr	r3, [r3, #32]
  401a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401a9c:	2b10      	cmp	r3, #16
  401a9e:	d008      	beq.n	401ab2 <SystemCoreClockUpdate+0xca>
  401aa0:	2b20      	cmp	r3, #32
  401aa2:	d00a      	beq.n	401aba <SystemCoreClockUpdate+0xd2>
  401aa4:	2b00      	cmp	r3, #0
  401aa6:	d000      	beq.n	401aaa <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  401aa8:	e00b      	b.n	401ac2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401aaa:	4b30      	ldr	r3, [pc, #192]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401aac:	4a31      	ldr	r2, [pc, #196]	; (401b74 <SystemCoreClockUpdate+0x18c>)
  401aae:	601a      	str	r2, [r3, #0]
					break;
  401ab0:	e007      	b.n	401ac2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401ab2:	4b2e      	ldr	r3, [pc, #184]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401ab4:	4a30      	ldr	r2, [pc, #192]	; (401b78 <SystemCoreClockUpdate+0x190>)
  401ab6:	601a      	str	r2, [r3, #0]
					break;
  401ab8:	e003      	b.n	401ac2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401aba:	4b2c      	ldr	r3, [pc, #176]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401abc:	4a2c      	ldr	r2, [pc, #176]	; (401b70 <SystemCoreClockUpdate+0x188>)
  401abe:	601a      	str	r2, [r3, #0]
					break;
  401ac0:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401ac2:	4b28      	ldr	r3, [pc, #160]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ac6:	f003 0303 	and.w	r3, r3, #3
  401aca:	2b02      	cmp	r3, #2
  401acc:	d115      	bne.n	401afa <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401ace:	4b25      	ldr	r3, [pc, #148]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401ad2:	4b2a      	ldr	r3, [pc, #168]	; (401b7c <SystemCoreClockUpdate+0x194>)
  401ad4:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  401ad6:	0c1b      	lsrs	r3, r3, #16
  401ad8:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401ada:	4a24      	ldr	r2, [pc, #144]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401adc:	6812      	ldr	r2, [r2, #0]
  401ade:	fb02 f303 	mul.w	r3, r2, r3
  401ae2:	4a22      	ldr	r2, [pc, #136]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401ae4:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401ae6:	4b1f      	ldr	r3, [pc, #124]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  401aea:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401aec:	4a1f      	ldr	r2, [pc, #124]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401aee:	6812      	ldr	r2, [r2, #0]
  401af0:	fbb2 f3f3 	udiv	r3, r2, r3
  401af4:	4a1d      	ldr	r2, [pc, #116]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401af6:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401af8:	e016      	b.n	401b28 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401afa:	4b1a      	ldr	r3, [pc, #104]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401afe:	4b1f      	ldr	r3, [pc, #124]	; (401b7c <SystemCoreClockUpdate+0x194>)
  401b00:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401b02:	0c1b      	lsrs	r3, r3, #16
  401b04:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401b06:	4a19      	ldr	r2, [pc, #100]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401b08:	6812      	ldr	r2, [r2, #0]
  401b0a:	fb02 f303 	mul.w	r3, r2, r3
  401b0e:	4a17      	ldr	r2, [pc, #92]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401b10:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401b12:	4b14      	ldr	r3, [pc, #80]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  401b16:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401b18:	4a14      	ldr	r2, [pc, #80]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401b1a:	6812      	ldr	r2, [r2, #0]
  401b1c:	fbb2 f3f3 	udiv	r3, r2, r3
  401b20:	4a12      	ldr	r2, [pc, #72]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401b22:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401b24:	e000      	b.n	401b28 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  401b26:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401b28:	4b0e      	ldr	r3, [pc, #56]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b30:	2b70      	cmp	r3, #112	; 0x70
  401b32:	d108      	bne.n	401b46 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401b34:	4b0d      	ldr	r3, [pc, #52]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401b36:	681b      	ldr	r3, [r3, #0]
  401b38:	4a11      	ldr	r2, [pc, #68]	; (401b80 <SystemCoreClockUpdate+0x198>)
  401b3a:	fba2 2303 	umull	r2, r3, r2, r3
  401b3e:	085b      	lsrs	r3, r3, #1
  401b40:	4a0a      	ldr	r2, [pc, #40]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401b42:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401b44:	e00a      	b.n	401b5c <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401b46:	4b07      	ldr	r3, [pc, #28]	; (401b64 <SystemCoreClockUpdate+0x17c>)
  401b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b4e:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401b50:	4a06      	ldr	r2, [pc, #24]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401b52:	6812      	ldr	r2, [r2, #0]
  401b54:	fa22 f303 	lsr.w	r3, r2, r3
  401b58:	4a04      	ldr	r2, [pc, #16]	; (401b6c <SystemCoreClockUpdate+0x184>)
  401b5a:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401b5c:	bf00      	nop
  401b5e:	46bd      	mov	sp, r7
  401b60:	bc80      	pop	{r7}
  401b62:	4770      	bx	lr
  401b64:	400e0400 	.word	0x400e0400
  401b68:	400e1410 	.word	0x400e1410
  401b6c:	20000000 	.word	0x20000000
  401b70:	00b71b00 	.word	0x00b71b00
  401b74:	003d0900 	.word	0x003d0900
  401b78:	007a1200 	.word	0x007a1200
  401b7c:	07ff0000 	.word	0x07ff0000
  401b80:	aaaaaaab 	.word	0xaaaaaaab

00401b84 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  401b84:	b480      	push	{r7}
  401b86:	b083      	sub	sp, #12
  401b88:	af00      	add	r7, sp, #0
  401b8a:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401b8c:	687b      	ldr	r3, [r7, #4]
  401b8e:	4a22      	ldr	r2, [pc, #136]	; (401c18 <system_init_flash+0x94>)
  401b90:	4293      	cmp	r3, r2
  401b92:	d808      	bhi.n	401ba6 <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401b94:	4b21      	ldr	r3, [pc, #132]	; (401c1c <system_init_flash+0x98>)
  401b96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401b9a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401b9c:	4b20      	ldr	r3, [pc, #128]	; (401c20 <system_init_flash+0x9c>)
  401b9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401ba2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401ba4:	e033      	b.n	401c0e <system_init_flash+0x8a>
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401ba6:	687b      	ldr	r3, [r7, #4]
  401ba8:	4a1e      	ldr	r2, [pc, #120]	; (401c24 <system_init_flash+0xa0>)
  401baa:	4293      	cmp	r3, r2
  401bac:	d806      	bhi.n	401bbc <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401bae:	4b1b      	ldr	r3, [pc, #108]	; (401c1c <system_init_flash+0x98>)
  401bb0:	4a1d      	ldr	r2, [pc, #116]	; (401c28 <system_init_flash+0xa4>)
  401bb2:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401bb4:	4b1a      	ldr	r3, [pc, #104]	; (401c20 <system_init_flash+0x9c>)
  401bb6:	4a1c      	ldr	r2, [pc, #112]	; (401c28 <system_init_flash+0xa4>)
  401bb8:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401bba:	e028      	b.n	401c0e <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401bbc:	687b      	ldr	r3, [r7, #4]
  401bbe:	4a1b      	ldr	r2, [pc, #108]	; (401c2c <system_init_flash+0xa8>)
  401bc0:	4293      	cmp	r3, r2
  401bc2:	d806      	bhi.n	401bd2 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401bc4:	4b15      	ldr	r3, [pc, #84]	; (401c1c <system_init_flash+0x98>)
  401bc6:	4a1a      	ldr	r2, [pc, #104]	; (401c30 <system_init_flash+0xac>)
  401bc8:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401bca:	4b15      	ldr	r3, [pc, #84]	; (401c20 <system_init_flash+0x9c>)
  401bcc:	4a18      	ldr	r2, [pc, #96]	; (401c30 <system_init_flash+0xac>)
  401bce:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401bd0:	e01d      	b.n	401c0e <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401bd2:	687b      	ldr	r3, [r7, #4]
  401bd4:	4a17      	ldr	r2, [pc, #92]	; (401c34 <system_init_flash+0xb0>)
  401bd6:	4293      	cmp	r3, r2
  401bd8:	d806      	bhi.n	401be8 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401bda:	4b10      	ldr	r3, [pc, #64]	; (401c1c <system_init_flash+0x98>)
  401bdc:	4a16      	ldr	r2, [pc, #88]	; (401c38 <system_init_flash+0xb4>)
  401bde:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401be0:	4b0f      	ldr	r3, [pc, #60]	; (401c20 <system_init_flash+0x9c>)
  401be2:	4a15      	ldr	r2, [pc, #84]	; (401c38 <system_init_flash+0xb4>)
  401be4:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401be6:	e012      	b.n	401c0e <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401be8:	687b      	ldr	r3, [r7, #4]
  401bea:	4a14      	ldr	r2, [pc, #80]	; (401c3c <system_init_flash+0xb8>)
  401bec:	4293      	cmp	r3, r2
  401bee:	d808      	bhi.n	401c02 <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401bf0:	4b0a      	ldr	r3, [pc, #40]	; (401c1c <system_init_flash+0x98>)
  401bf2:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401bf6:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401bf8:	4b09      	ldr	r3, [pc, #36]	; (401c20 <system_init_flash+0x9c>)
  401bfa:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401bfe:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401c00:	e005      	b.n	401c0e <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401c02:	4b06      	ldr	r3, [pc, #24]	; (401c1c <system_init_flash+0x98>)
  401c04:	4a0e      	ldr	r2, [pc, #56]	; (401c40 <system_init_flash+0xbc>)
  401c06:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401c08:	4b05      	ldr	r3, [pc, #20]	; (401c20 <system_init_flash+0x9c>)
  401c0a:	4a0d      	ldr	r2, [pc, #52]	; (401c40 <system_init_flash+0xbc>)
  401c0c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401c0e:	bf00      	nop
  401c10:	370c      	adds	r7, #12
  401c12:	46bd      	mov	sp, r7
  401c14:	bc80      	pop	{r7}
  401c16:	4770      	bx	lr
  401c18:	01312cff 	.word	0x01312cff
  401c1c:	400e0a00 	.word	0x400e0a00
  401c20:	400e0c00 	.word	0x400e0c00
  401c24:	026259ff 	.word	0x026259ff
  401c28:	04000100 	.word	0x04000100
  401c2c:	039386ff 	.word	0x039386ff
  401c30:	04000200 	.word	0x04000200
  401c34:	04c4b3ff 	.word	0x04c4b3ff
  401c38:	04000300 	.word	0x04000300
  401c3c:	05f5e0ff 	.word	0x05f5e0ff
  401c40:	04000500 	.word	0x04000500

00401c44 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401c44:	b480      	push	{r7}
  401c46:	b085      	sub	sp, #20
  401c48:	af00      	add	r7, sp, #0
  401c4a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401c4c:	4b10      	ldr	r3, [pc, #64]	; (401c90 <_sbrk+0x4c>)
  401c4e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401c50:	4b10      	ldr	r3, [pc, #64]	; (401c94 <_sbrk+0x50>)
  401c52:	681b      	ldr	r3, [r3, #0]
  401c54:	2b00      	cmp	r3, #0
  401c56:	d102      	bne.n	401c5e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401c58:	4b0e      	ldr	r3, [pc, #56]	; (401c94 <_sbrk+0x50>)
  401c5a:	4a0f      	ldr	r2, [pc, #60]	; (401c98 <_sbrk+0x54>)
  401c5c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401c5e:	4b0d      	ldr	r3, [pc, #52]	; (401c94 <_sbrk+0x50>)
  401c60:	681b      	ldr	r3, [r3, #0]
  401c62:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401c64:	68ba      	ldr	r2, [r7, #8]
  401c66:	687b      	ldr	r3, [r7, #4]
  401c68:	441a      	add	r2, r3
  401c6a:	68fb      	ldr	r3, [r7, #12]
  401c6c:	429a      	cmp	r2, r3
  401c6e:	dd02      	ble.n	401c76 <_sbrk+0x32>
		return (caddr_t) -1;	
  401c70:	f04f 33ff 	mov.w	r3, #4294967295
  401c74:	e006      	b.n	401c84 <_sbrk+0x40>
	}

	heap += incr;
  401c76:	4b07      	ldr	r3, [pc, #28]	; (401c94 <_sbrk+0x50>)
  401c78:	681a      	ldr	r2, [r3, #0]
  401c7a:	687b      	ldr	r3, [r7, #4]
  401c7c:	4413      	add	r3, r2
  401c7e:	4a05      	ldr	r2, [pc, #20]	; (401c94 <_sbrk+0x50>)
  401c80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401c82:	68bb      	ldr	r3, [r7, #8]
}
  401c84:	4618      	mov	r0, r3
  401c86:	3714      	adds	r7, #20
  401c88:	46bd      	mov	sp, r7
  401c8a:	bc80      	pop	{r7}
  401c8c:	4770      	bx	lr
  401c8e:	bf00      	nop
  401c90:	20027ffc 	.word	0x20027ffc
  401c94:	20000a70 	.word	0x20000a70
  401c98:	20003cc8 	.word	0x20003cc8

00401c9c <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401c9c:	b480      	push	{r7}
  401c9e:	b083      	sub	sp, #12
  401ca0:	af00      	add	r7, sp, #0
  401ca2:	6078      	str	r0, [r7, #4]
	return -1;
  401ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
  401ca8:	4618      	mov	r0, r3
  401caa:	370c      	adds	r7, #12
  401cac:	46bd      	mov	sp, r7
  401cae:	bc80      	pop	{r7}
  401cb0:	4770      	bx	lr
  401cb2:	bf00      	nop

00401cb4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401cb4:	b480      	push	{r7}
  401cb6:	b083      	sub	sp, #12
  401cb8:	af00      	add	r7, sp, #0
  401cba:	6078      	str	r0, [r7, #4]
  401cbc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401cbe:	683b      	ldr	r3, [r7, #0]
  401cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401cc4:	605a      	str	r2, [r3, #4]

	return 0;
  401cc6:	2300      	movs	r3, #0
}
  401cc8:	4618      	mov	r0, r3
  401cca:	370c      	adds	r7, #12
  401ccc:	46bd      	mov	sp, r7
  401cce:	bc80      	pop	{r7}
  401cd0:	4770      	bx	lr
  401cd2:	bf00      	nop

00401cd4 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
  401cd4:	b480      	push	{r7}
  401cd6:	b085      	sub	sp, #20
  401cd8:	af00      	add	r7, sp, #0
  401cda:	60f8      	str	r0, [r7, #12]
  401cdc:	60b9      	str	r1, [r7, #8]
  401cde:	607a      	str	r2, [r7, #4]
	return 0;
  401ce0:	2300      	movs	r3, #0
}
  401ce2:	4618      	mov	r0, r3
  401ce4:	3714      	adds	r7, #20
  401ce6:	46bd      	mov	sp, r7
  401ce8:	bc80      	pop	{r7}
  401cea:	4770      	bx	lr

00401cec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401cec:	b480      	push	{r7}
  401cee:	b083      	sub	sp, #12
  401cf0:	af00      	add	r7, sp, #0
  401cf2:	4603      	mov	r3, r0
  401cf4:	6039      	str	r1, [r7, #0]
  401cf6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401cfc:	2b00      	cmp	r3, #0
  401cfe:	da0b      	bge.n	401d18 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401d00:	490d      	ldr	r1, [pc, #52]	; (401d38 <NVIC_SetPriority+0x4c>)
  401d02:	79fb      	ldrb	r3, [r7, #7]
  401d04:	f003 030f 	and.w	r3, r3, #15
  401d08:	3b04      	subs	r3, #4
  401d0a:	683a      	ldr	r2, [r7, #0]
  401d0c:	b2d2      	uxtb	r2, r2
  401d0e:	0112      	lsls	r2, r2, #4
  401d10:	b2d2      	uxtb	r2, r2
  401d12:	440b      	add	r3, r1
  401d14:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  401d16:	e009      	b.n	401d2c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401d18:	4908      	ldr	r1, [pc, #32]	; (401d3c <NVIC_SetPriority+0x50>)
  401d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d1e:	683a      	ldr	r2, [r7, #0]
  401d20:	b2d2      	uxtb	r2, r2
  401d22:	0112      	lsls	r2, r2, #4
  401d24:	b2d2      	uxtb	r2, r2
  401d26:	440b      	add	r3, r1
  401d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401d2c:	bf00      	nop
  401d2e:	370c      	adds	r7, #12
  401d30:	46bd      	mov	sp, r7
  401d32:	bc80      	pop	{r7}
  401d34:	4770      	bx	lr
  401d36:	bf00      	nop
  401d38:	e000ed00 	.word	0xe000ed00
  401d3c:	e000e100 	.word	0xe000e100

00401d40 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  401d40:	b580      	push	{r7, lr}
  401d42:	b082      	sub	sp, #8
  401d44:	af00      	add	r7, sp, #0
  401d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  401d48:	687b      	ldr	r3, [r7, #4]
  401d4a:	3b01      	subs	r3, #1
  401d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  401d50:	d301      	bcc.n	401d56 <SysTick_Config+0x16>
  401d52:	2301      	movs	r3, #1
  401d54:	e00f      	b.n	401d76 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401d56:	4a0a      	ldr	r2, [pc, #40]	; (401d80 <SysTick_Config+0x40>)
  401d58:	687b      	ldr	r3, [r7, #4]
  401d5a:	3b01      	subs	r3, #1
  401d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  401d5e:	210f      	movs	r1, #15
  401d60:	f04f 30ff 	mov.w	r0, #4294967295
  401d64:	4b07      	ldr	r3, [pc, #28]	; (401d84 <SysTick_Config+0x44>)
  401d66:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401d68:	4b05      	ldr	r3, [pc, #20]	; (401d80 <SysTick_Config+0x40>)
  401d6a:	2200      	movs	r2, #0
  401d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401d6e:	4b04      	ldr	r3, [pc, #16]	; (401d80 <SysTick_Config+0x40>)
  401d70:	2207      	movs	r2, #7
  401d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  401d74:	2300      	movs	r3, #0
}
  401d76:	4618      	mov	r0, r3
  401d78:	3708      	adds	r7, #8
  401d7a:	46bd      	mov	sp, r7
  401d7c:	bd80      	pop	{r7, pc}
  401d7e:	bf00      	nop
  401d80:	e000e010 	.word	0xe000e010
  401d84:	00401ced 	.word	0x00401ced

00401d88 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401d88:	b480      	push	{r7}
  401d8a:	b083      	sub	sp, #12
  401d8c:	af00      	add	r7, sp, #0
  401d8e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401d90:	687b      	ldr	r3, [r7, #4]
  401d92:	2b07      	cmp	r3, #7
  401d94:	d825      	bhi.n	401de2 <osc_get_rate+0x5a>
  401d96:	a201      	add	r2, pc, #4	; (adr r2, 401d9c <osc_get_rate+0x14>)
  401d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401d9c:	00401dbd 	.word	0x00401dbd
  401da0:	00401dc3 	.word	0x00401dc3
  401da4:	00401dc9 	.word	0x00401dc9
  401da8:	00401dcf 	.word	0x00401dcf
  401dac:	00401dd3 	.word	0x00401dd3
  401db0:	00401dd7 	.word	0x00401dd7
  401db4:	00401ddb 	.word	0x00401ddb
  401db8:	00401ddf 	.word	0x00401ddf
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401dbc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401dc0:	e010      	b.n	401de4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401dc6:	e00d      	b.n	401de4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401dcc:	e00a      	b.n	401de4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401dce:	4b08      	ldr	r3, [pc, #32]	; (401df0 <osc_get_rate+0x68>)
  401dd0:	e008      	b.n	401de4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401dd2:	4b08      	ldr	r3, [pc, #32]	; (401df4 <osc_get_rate+0x6c>)
  401dd4:	e006      	b.n	401de4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401dd6:	4b08      	ldr	r3, [pc, #32]	; (401df8 <osc_get_rate+0x70>)
  401dd8:	e004      	b.n	401de4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401dda:	4b07      	ldr	r3, [pc, #28]	; (401df8 <osc_get_rate+0x70>)
  401ddc:	e002      	b.n	401de4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401dde:	4b06      	ldr	r3, [pc, #24]	; (401df8 <osc_get_rate+0x70>)
  401de0:	e000      	b.n	401de4 <osc_get_rate+0x5c>
	}

	return 0;
  401de2:	2300      	movs	r3, #0
}
  401de4:	4618      	mov	r0, r3
  401de6:	370c      	adds	r7, #12
  401de8:	46bd      	mov	sp, r7
  401dea:	bc80      	pop	{r7}
  401dec:	4770      	bx	lr
  401dee:	bf00      	nop
  401df0:	003d0900 	.word	0x003d0900
  401df4:	007a1200 	.word	0x007a1200
  401df8:	00b71b00 	.word	0x00b71b00

00401dfc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401dfc:	b580      	push	{r7, lr}
  401dfe:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401e00:	2006      	movs	r0, #6
  401e02:	4b04      	ldr	r3, [pc, #16]	; (401e14 <sysclk_get_main_hz+0x18>)
  401e04:	4798      	blx	r3
  401e06:	4602      	mov	r2, r0
  401e08:	4613      	mov	r3, r2
  401e0a:	009b      	lsls	r3, r3, #2
  401e0c:	4413      	add	r3, r2
  401e0e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401e10:	4618      	mov	r0, r3
  401e12:	bd80      	pop	{r7, pc}
  401e14:	00401d89 	.word	0x00401d89

00401e18 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401e18:	b580      	push	{r7, lr}
  401e1a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401e1c:	4b02      	ldr	r3, [pc, #8]	; (401e28 <sysclk_get_cpu_hz+0x10>)
  401e1e:	4798      	blx	r3
  401e20:	4603      	mov	r3, r0
  401e22:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401e24:	4618      	mov	r0, r3
  401e26:	bd80      	pop	{r7, pc}
  401e28:	00401dfd 	.word	0x00401dfd

00401e2c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401e2c:	b580      	push	{r7, lr}
  401e2e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401e30:	4b02      	ldr	r3, [pc, #8]	; (401e3c <sysclk_get_peripheral_hz+0x10>)
  401e32:	4798      	blx	r3
  401e34:	4603      	mov	r3, r0
  401e36:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401e38:	4618      	mov	r0, r3
  401e3a:	bd80      	pop	{r7, pc}
  401e3c:	00401dfd 	.word	0x00401dfd

00401e40 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401e40:	b580      	push	{r7, lr}
  401e42:	b082      	sub	sp, #8
  401e44:	af00      	add	r7, sp, #0
  401e46:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401e48:	6878      	ldr	r0, [r7, #4]
  401e4a:	4b03      	ldr	r3, [pc, #12]	; (401e58 <sysclk_enable_peripheral_clock+0x18>)
  401e4c:	4798      	blx	r3
}
  401e4e:	bf00      	nop
  401e50:	3708      	adds	r7, #8
  401e52:	46bd      	mov	sp, r7
  401e54:	bd80      	pop	{r7, pc}
  401e56:	bf00      	nop
  401e58:	0040180d 	.word	0x0040180d

00401e5c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401e5c:	b580      	push	{r7, lr}
  401e5e:	b08c      	sub	sp, #48	; 0x30
  401e60:	af00      	add	r7, sp, #0
  401e62:	6078      	str	r0, [r7, #4]
  401e64:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401e66:	4b31      	ldr	r3, [pc, #196]	; (401f2c <usart_serial_init+0xd0>)
  401e68:	4798      	blx	r3
  401e6a:	4603      	mov	r3, r0
  401e6c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401e6e:	683b      	ldr	r3, [r7, #0]
  401e70:	681b      	ldr	r3, [r3, #0]
  401e72:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401e74:	683b      	ldr	r3, [r7, #0]
  401e76:	689b      	ldr	r3, [r3, #8]
  401e78:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401e7a:	683b      	ldr	r3, [r7, #0]
  401e7c:	681b      	ldr	r3, [r3, #0]
  401e7e:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401e80:	683b      	ldr	r3, [r7, #0]
  401e82:	685b      	ldr	r3, [r3, #4]
  401e84:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401e86:	683b      	ldr	r3, [r7, #0]
  401e88:	689b      	ldr	r3, [r3, #8]
  401e8a:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401e8c:	683b      	ldr	r3, [r7, #0]
  401e8e:	68db      	ldr	r3, [r3, #12]
  401e90:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401e92:	2300      	movs	r3, #0
  401e94:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401e96:	687b      	ldr	r3, [r7, #4]
  401e98:	4a25      	ldr	r2, [pc, #148]	; (401f30 <usart_serial_init+0xd4>)
  401e9a:	4293      	cmp	r3, r2
  401e9c:	d108      	bne.n	401eb0 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401e9e:	2008      	movs	r0, #8
  401ea0:	4b24      	ldr	r3, [pc, #144]	; (401f34 <usart_serial_init+0xd8>)
  401ea2:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401ea8:	4619      	mov	r1, r3
  401eaa:	6878      	ldr	r0, [r7, #4]
  401eac:	4b22      	ldr	r3, [pc, #136]	; (401f38 <usart_serial_init+0xdc>)
  401eae:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401eb0:	687b      	ldr	r3, [r7, #4]
  401eb2:	4a22      	ldr	r2, [pc, #136]	; (401f3c <usart_serial_init+0xe0>)
  401eb4:	4293      	cmp	r3, r2
  401eb6:	d108      	bne.n	401eca <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401eb8:	2009      	movs	r0, #9
  401eba:	4b1e      	ldr	r3, [pc, #120]	; (401f34 <usart_serial_init+0xd8>)
  401ebc:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401ec2:	4619      	mov	r1, r3
  401ec4:	6878      	ldr	r0, [r7, #4]
  401ec6:	4b1c      	ldr	r3, [pc, #112]	; (401f38 <usart_serial_init+0xdc>)
  401ec8:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401eca:	687b      	ldr	r3, [r7, #4]
  401ecc:	4a1c      	ldr	r2, [pc, #112]	; (401f40 <usart_serial_init+0xe4>)
  401ece:	4293      	cmp	r3, r2
  401ed0:	d111      	bne.n	401ef6 <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401ed2:	200e      	movs	r0, #14
  401ed4:	4b17      	ldr	r3, [pc, #92]	; (401f34 <usart_serial_init+0xd8>)
  401ed6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401ed8:	4b14      	ldr	r3, [pc, #80]	; (401f2c <usart_serial_init+0xd0>)
  401eda:	4798      	blx	r3
  401edc:	4602      	mov	r2, r0
  401ede:	f107 030c 	add.w	r3, r7, #12
  401ee2:	4619      	mov	r1, r3
  401ee4:	6878      	ldr	r0, [r7, #4]
  401ee6:	4b17      	ldr	r3, [pc, #92]	; (401f44 <usart_serial_init+0xe8>)
  401ee8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401eea:	6878      	ldr	r0, [r7, #4]
  401eec:	4b16      	ldr	r3, [pc, #88]	; (401f48 <usart_serial_init+0xec>)
  401eee:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401ef0:	6878      	ldr	r0, [r7, #4]
  401ef2:	4b16      	ldr	r3, [pc, #88]	; (401f4c <usart_serial_init+0xf0>)
  401ef4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401ef6:	687b      	ldr	r3, [r7, #4]
  401ef8:	4a15      	ldr	r2, [pc, #84]	; (401f50 <usart_serial_init+0xf4>)
  401efa:	4293      	cmp	r3, r2
  401efc:	d111      	bne.n	401f22 <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401efe:	200f      	movs	r0, #15
  401f00:	4b0c      	ldr	r3, [pc, #48]	; (401f34 <usart_serial_init+0xd8>)
  401f02:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401f04:	4b09      	ldr	r3, [pc, #36]	; (401f2c <usart_serial_init+0xd0>)
  401f06:	4798      	blx	r3
  401f08:	4602      	mov	r2, r0
  401f0a:	f107 030c 	add.w	r3, r7, #12
  401f0e:	4619      	mov	r1, r3
  401f10:	6878      	ldr	r0, [r7, #4]
  401f12:	4b0c      	ldr	r3, [pc, #48]	; (401f44 <usart_serial_init+0xe8>)
  401f14:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401f16:	6878      	ldr	r0, [r7, #4]
  401f18:	4b0b      	ldr	r3, [pc, #44]	; (401f48 <usart_serial_init+0xec>)
  401f1a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401f1c:	6878      	ldr	r0, [r7, #4]
  401f1e:	4b0b      	ldr	r3, [pc, #44]	; (401f4c <usart_serial_init+0xf0>)
  401f20:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401f22:	bf00      	nop
  401f24:	3730      	adds	r7, #48	; 0x30
  401f26:	46bd      	mov	sp, r7
  401f28:	bd80      	pop	{r7, pc}
  401f2a:	bf00      	nop
  401f2c:	00401e2d 	.word	0x00401e2d
  401f30:	400e0600 	.word	0x400e0600
  401f34:	00401e41 	.word	0x00401e41
  401f38:	00400785 	.word	0x00400785
  401f3c:	400e0800 	.word	0x400e0800
  401f40:	40024000 	.word	0x40024000
  401f44:	004009b1 	.word	0x004009b1
  401f48:	00400a35 	.word	0x00400a35
  401f4c:	00400a7d 	.word	0x00400a7d
  401f50:	40028000 	.word	0x40028000

00401f54 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401f54:	b580      	push	{r7, lr}
  401f56:	b082      	sub	sp, #8
  401f58:	af00      	add	r7, sp, #0
  401f5a:	6078      	str	r0, [r7, #4]
  401f5c:	460b      	mov	r3, r1
  401f5e:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401f60:	687b      	ldr	r3, [r7, #4]
  401f62:	4a20      	ldr	r2, [pc, #128]	; (401fe4 <usart_serial_putchar+0x90>)
  401f64:	4293      	cmp	r3, r2
  401f66:	d10a      	bne.n	401f7e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401f68:	bf00      	nop
  401f6a:	78fb      	ldrb	r3, [r7, #3]
  401f6c:	4619      	mov	r1, r3
  401f6e:	6878      	ldr	r0, [r7, #4]
  401f70:	4b1d      	ldr	r3, [pc, #116]	; (401fe8 <usart_serial_putchar+0x94>)
  401f72:	4798      	blx	r3
  401f74:	4603      	mov	r3, r0
  401f76:	2b00      	cmp	r3, #0
  401f78:	d1f7      	bne.n	401f6a <usart_serial_putchar+0x16>
		return 1;
  401f7a:	2301      	movs	r3, #1
  401f7c:	e02d      	b.n	401fda <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401f7e:	687b      	ldr	r3, [r7, #4]
  401f80:	4a1a      	ldr	r2, [pc, #104]	; (401fec <usart_serial_putchar+0x98>)
  401f82:	4293      	cmp	r3, r2
  401f84:	d10a      	bne.n	401f9c <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401f86:	bf00      	nop
  401f88:	78fb      	ldrb	r3, [r7, #3]
  401f8a:	4619      	mov	r1, r3
  401f8c:	6878      	ldr	r0, [r7, #4]
  401f8e:	4b16      	ldr	r3, [pc, #88]	; (401fe8 <usart_serial_putchar+0x94>)
  401f90:	4798      	blx	r3
  401f92:	4603      	mov	r3, r0
  401f94:	2b00      	cmp	r3, #0
  401f96:	d1f7      	bne.n	401f88 <usart_serial_putchar+0x34>
		return 1;
  401f98:	2301      	movs	r3, #1
  401f9a:	e01e      	b.n	401fda <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401f9c:	687b      	ldr	r3, [r7, #4]
  401f9e:	4a14      	ldr	r2, [pc, #80]	; (401ff0 <usart_serial_putchar+0x9c>)
  401fa0:	4293      	cmp	r3, r2
  401fa2:	d10a      	bne.n	401fba <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  401fa4:	bf00      	nop
  401fa6:	78fb      	ldrb	r3, [r7, #3]
  401fa8:	4619      	mov	r1, r3
  401faa:	6878      	ldr	r0, [r7, #4]
  401fac:	4b11      	ldr	r3, [pc, #68]	; (401ff4 <usart_serial_putchar+0xa0>)
  401fae:	4798      	blx	r3
  401fb0:	4603      	mov	r3, r0
  401fb2:	2b00      	cmp	r3, #0
  401fb4:	d1f7      	bne.n	401fa6 <usart_serial_putchar+0x52>
		return 1;
  401fb6:	2301      	movs	r3, #1
  401fb8:	e00f      	b.n	401fda <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401fba:	687b      	ldr	r3, [r7, #4]
  401fbc:	4a0e      	ldr	r2, [pc, #56]	; (401ff8 <usart_serial_putchar+0xa4>)
  401fbe:	4293      	cmp	r3, r2
  401fc0:	d10a      	bne.n	401fd8 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  401fc2:	bf00      	nop
  401fc4:	78fb      	ldrb	r3, [r7, #3]
  401fc6:	4619      	mov	r1, r3
  401fc8:	6878      	ldr	r0, [r7, #4]
  401fca:	4b0a      	ldr	r3, [pc, #40]	; (401ff4 <usart_serial_putchar+0xa0>)
  401fcc:	4798      	blx	r3
  401fce:	4603      	mov	r3, r0
  401fd0:	2b00      	cmp	r3, #0
  401fd2:	d1f7      	bne.n	401fc4 <usart_serial_putchar+0x70>
		return 1;
  401fd4:	2301      	movs	r3, #1
  401fd6:	e000      	b.n	401fda <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401fd8:	2300      	movs	r3, #0
}
  401fda:	4618      	mov	r0, r3
  401fdc:	3708      	adds	r7, #8
  401fde:	46bd      	mov	sp, r7
  401fe0:	bd80      	pop	{r7, pc}
  401fe2:	bf00      	nop
  401fe4:	400e0600 	.word	0x400e0600
  401fe8:	0040082d 	.word	0x0040082d
  401fec:	400e0800 	.word	0x400e0800
  401ff0:	40024000 	.word	0x40024000
  401ff4:	00400b01 	.word	0x00400b01
  401ff8:	40028000 	.word	0x40028000

00401ffc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401ffc:	b580      	push	{r7, lr}
  401ffe:	b084      	sub	sp, #16
  402000:	af00      	add	r7, sp, #0
  402002:	6078      	str	r0, [r7, #4]
  402004:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  402006:	2300      	movs	r3, #0
  402008:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40200a:	687b      	ldr	r3, [r7, #4]
  40200c:	4a1f      	ldr	r2, [pc, #124]	; (40208c <usart_serial_getchar+0x90>)
  40200e:	4293      	cmp	r3, r2
  402010:	d107      	bne.n	402022 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  402012:	bf00      	nop
  402014:	6839      	ldr	r1, [r7, #0]
  402016:	6878      	ldr	r0, [r7, #4]
  402018:	4b1d      	ldr	r3, [pc, #116]	; (402090 <usart_serial_getchar+0x94>)
  40201a:	4798      	blx	r3
  40201c:	4603      	mov	r3, r0
  40201e:	2b00      	cmp	r3, #0
  402020:	d1f8      	bne.n	402014 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402022:	687b      	ldr	r3, [r7, #4]
  402024:	4a1b      	ldr	r2, [pc, #108]	; (402094 <usart_serial_getchar+0x98>)
  402026:	4293      	cmp	r3, r2
  402028:	d107      	bne.n	40203a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40202a:	bf00      	nop
  40202c:	6839      	ldr	r1, [r7, #0]
  40202e:	6878      	ldr	r0, [r7, #4]
  402030:	4b17      	ldr	r3, [pc, #92]	; (402090 <usart_serial_getchar+0x94>)
  402032:	4798      	blx	r3
  402034:	4603      	mov	r3, r0
  402036:	2b00      	cmp	r3, #0
  402038:	d1f8      	bne.n	40202c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40203a:	687b      	ldr	r3, [r7, #4]
  40203c:	4a16      	ldr	r2, [pc, #88]	; (402098 <usart_serial_getchar+0x9c>)
  40203e:	4293      	cmp	r3, r2
  402040:	d10d      	bne.n	40205e <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  402042:	bf00      	nop
  402044:	f107 030c 	add.w	r3, r7, #12
  402048:	4619      	mov	r1, r3
  40204a:	6878      	ldr	r0, [r7, #4]
  40204c:	4b13      	ldr	r3, [pc, #76]	; (40209c <usart_serial_getchar+0xa0>)
  40204e:	4798      	blx	r3
  402050:	4603      	mov	r3, r0
  402052:	2b00      	cmp	r3, #0
  402054:	d1f6      	bne.n	402044 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  402056:	68fb      	ldr	r3, [r7, #12]
  402058:	b2da      	uxtb	r2, r3
  40205a:	683b      	ldr	r3, [r7, #0]
  40205c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40205e:	687b      	ldr	r3, [r7, #4]
  402060:	4a0f      	ldr	r2, [pc, #60]	; (4020a0 <usart_serial_getchar+0xa4>)
  402062:	4293      	cmp	r3, r2
  402064:	d10d      	bne.n	402082 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  402066:	bf00      	nop
  402068:	f107 030c 	add.w	r3, r7, #12
  40206c:	4619      	mov	r1, r3
  40206e:	6878      	ldr	r0, [r7, #4]
  402070:	4b0a      	ldr	r3, [pc, #40]	; (40209c <usart_serial_getchar+0xa0>)
  402072:	4798      	blx	r3
  402074:	4603      	mov	r3, r0
  402076:	2b00      	cmp	r3, #0
  402078:	d1f6      	bne.n	402068 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  40207a:	68fb      	ldr	r3, [r7, #12]
  40207c:	b2da      	uxtb	r2, r3
  40207e:	683b      	ldr	r3, [r7, #0]
  402080:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402082:	bf00      	nop
  402084:	3710      	adds	r7, #16
  402086:	46bd      	mov	sp, r7
  402088:	bd80      	pop	{r7, pc}
  40208a:	bf00      	nop
  40208c:	400e0600 	.word	0x400e0600
  402090:	0040085d 	.word	0x0040085d
  402094:	400e0800 	.word	0x400e0800
  402098:	40024000 	.word	0x40024000
  40209c:	00400b31 	.word	0x00400b31
  4020a0:	40028000 	.word	0x40028000

004020a4 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  4020a4:	b580      	push	{r7, lr}
  4020a6:	b082      	sub	sp, #8
  4020a8:	af00      	add	r7, sp, #0
  4020aa:	6078      	str	r0, [r7, #4]
  4020ac:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  4020ae:	4a0f      	ldr	r2, [pc, #60]	; (4020ec <stdio_serial_init+0x48>)
  4020b0:	687b      	ldr	r3, [r7, #4]
  4020b2:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4020b4:	4b0e      	ldr	r3, [pc, #56]	; (4020f0 <stdio_serial_init+0x4c>)
  4020b6:	4a0f      	ldr	r2, [pc, #60]	; (4020f4 <stdio_serial_init+0x50>)
  4020b8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4020ba:	4b0f      	ldr	r3, [pc, #60]	; (4020f8 <stdio_serial_init+0x54>)
  4020bc:	4a0f      	ldr	r2, [pc, #60]	; (4020fc <stdio_serial_init+0x58>)
  4020be:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  4020c0:	6839      	ldr	r1, [r7, #0]
  4020c2:	6878      	ldr	r0, [r7, #4]
  4020c4:	4b0e      	ldr	r3, [pc, #56]	; (402100 <stdio_serial_init+0x5c>)
  4020c6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4020c8:	4b0e      	ldr	r3, [pc, #56]	; (402104 <stdio_serial_init+0x60>)
  4020ca:	681b      	ldr	r3, [r3, #0]
  4020cc:	689b      	ldr	r3, [r3, #8]
  4020ce:	2100      	movs	r1, #0
  4020d0:	4618      	mov	r0, r3
  4020d2:	4b0d      	ldr	r3, [pc, #52]	; (402108 <stdio_serial_init+0x64>)
  4020d4:	4798      	blx	r3
	setbuf(stdin, NULL);
  4020d6:	4b0b      	ldr	r3, [pc, #44]	; (402104 <stdio_serial_init+0x60>)
  4020d8:	681b      	ldr	r3, [r3, #0]
  4020da:	685b      	ldr	r3, [r3, #4]
  4020dc:	2100      	movs	r1, #0
  4020de:	4618      	mov	r0, r3
  4020e0:	4b09      	ldr	r3, [pc, #36]	; (402108 <stdio_serial_init+0x64>)
  4020e2:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4020e4:	bf00      	nop
  4020e6:	3708      	adds	r7, #8
  4020e8:	46bd      	mov	sp, r7
  4020ea:	bd80      	pop	{r7, pc}
  4020ec:	20000acc 	.word	0x20000acc
  4020f0:	20000ac8 	.word	0x20000ac8
  4020f4:	00401f55 	.word	0x00401f55
  4020f8:	20000ac4 	.word	0x20000ac4
  4020fc:	00401ffd 	.word	0x00401ffd
  402100:	00401e5d 	.word	0x00401e5d
  402104:	20000430 	.word	0x20000430
  402108:	004031d5 	.word	0x004031d5

0040210c <main>:
/* Pointer to Disp UART PDC register base */
Pdc *dispUartPdcBase;
pdc_packet_t dispPdcPkt;

int main (void)
{
  40210c:	b580      	push	{r7, lr}
  40210e:	af00      	add	r7, sp, #0
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  402110:	4b25      	ldr	r3, [pc, #148]	; (4021a8 <main+0x9c>)
  402112:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  402114:	4b25      	ldr	r3, [pc, #148]	; (4021ac <main+0xa0>)
  402116:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	//LED PIN
	gpio_configure_pin(PIO_PC23_IDX, (PIO_OUTPUT_1 | PIO_DEFAULT));
  402118:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40211c:	2057      	movs	r0, #87	; 0x57
  40211e:	4b24      	ldr	r3, [pc, #144]	; (4021b0 <main+0xa4>)
  402120:	4798      	blx	r3

// 	gpio_set_pin_low(PIO_PC23_IDX);
// 	delay_ms(300);
// 	gpio_set_pin_high(PIO_PC23_IDX);
	
	InitDispUart();
  402122:	4b24      	ldr	r3, [pc, #144]	; (4021b4 <main+0xa8>)
  402124:	4798      	blx	r3

	/* Init. variables */
	memset(&sen1Data, 0, sizeof(struct senData));
  402126:	2269      	movs	r2, #105	; 0x69
  402128:	2100      	movs	r1, #0
  40212a:	4823      	ldr	r0, [pc, #140]	; (4021b8 <main+0xac>)
  40212c:	4b23      	ldr	r3, [pc, #140]	; (4021bc <main+0xb0>)
  40212e:	4798      	blx	r3
	memset(&sen2Data, 0, sizeof(struct senData));
  402130:	2269      	movs	r2, #105	; 0x69
  402132:	2100      	movs	r1, #0
  402134:	4822      	ldr	r0, [pc, #136]	; (4021c0 <main+0xb4>)
  402136:	4b21      	ldr	r3, [pc, #132]	; (4021bc <main+0xb0>)
  402138:	4798      	blx	r3
	memset(&trigBuff, 0, sizeof(struct cBuff_t));
  40213a:	2266      	movs	r2, #102	; 0x66
  40213c:	2100      	movs	r1, #0
  40213e:	4821      	ldr	r0, [pc, #132]	; (4021c4 <main+0xb8>)
  402140:	4b1e      	ldr	r3, [pc, #120]	; (4021bc <main+0xb0>)
  402142:	4798      	blx	r3
	sen1State.state = q0;
  402144:	4b20      	ldr	r3, [pc, #128]	; (4021c8 <main+0xbc>)
  402146:	2200      	movs	r2, #0
  402148:	701a      	strb	r2, [r3, #0]
	sen1State.sum = 0;
  40214a:	4b1f      	ldr	r3, [pc, #124]	; (4021c8 <main+0xbc>)
  40214c:	2200      	movs	r2, #0
  40214e:	705a      	strb	r2, [r3, #1]
	sen1State.ctr = 0;
  402150:	4b1d      	ldr	r3, [pc, #116]	; (4021c8 <main+0xbc>)
  402152:	2200      	movs	r2, #0
  402154:	709a      	strb	r2, [r3, #2]
	sen2State.state = q0;
  402156:	4b1d      	ldr	r3, [pc, #116]	; (4021cc <main+0xc0>)
  402158:	2200      	movs	r2, #0
  40215a:	701a      	strb	r2, [r3, #0]
	sen2State.sum = 0;
  40215c:	4b1b      	ldr	r3, [pc, #108]	; (4021cc <main+0xc0>)
  40215e:	2200      	movs	r2, #0
  402160:	705a      	strb	r2, [r3, #1]
	sen2State.ctr = 0;
  402162:	4b1a      	ldr	r3, [pc, #104]	; (4021cc <main+0xc0>)
  402164:	2200      	movs	r2, #0
  402166:	709a      	strb	r2, [r3, #2]
	
	/* Initialize pressure in reservoir and cuff */

	/* Initialize sensor USARTs */
	SenInitUsart();
  402168:	4b19      	ldr	r3, [pc, #100]	; (4021d0 <main+0xc4>)
  40216a:	4798      	blx	r3

	/* Initialize Systick timer to generate interrupts every 10 ms */
	InitSystick();
  40216c:	4b19      	ldr	r3, [pc, #100]	; (4021d4 <main+0xc8>)
  40216e:	4798      	blx	r3
	/* Enable WDT */

	while (1)
	{
		/* Toggle LED GPIO */
		gpio_toggle_pin(PIO_PC23_IDX);
  402170:	2057      	movs	r0, #87	; 0x57
  402172:	4b19      	ldr	r3, [pc, #100]	; (4021d8 <main+0xcc>)
  402174:	4798      	blx	r3

		/* Emergency switch action */
		
		/* Call frequently to update next pointer in PDC */
		SenPdcManageBuff();
  402176:	4b19      	ldr	r3, [pc, #100]	; (4021dc <main+0xd0>)
  402178:	4798      	blx	r3

		/* Poll switches */

		/* Collect sensor 1 data and run trigger calculation */
		if(SenGetRxBytes(1)>5)
  40217a:	2001      	movs	r0, #1
  40217c:	4b18      	ldr	r3, [pc, #96]	; (4021e0 <main+0xd4>)
  40217e:	4798      	blx	r3
  402180:	4603      	mov	r3, r0
  402182:	2b05      	cmp	r3, #5
  402184:	d902      	bls.n	40218c <main+0x80>
		{
			SenProcessData(1);
  402186:	2001      	movs	r0, #1
  402188:	4b16      	ldr	r3, [pc, #88]	; (4021e4 <main+0xd8>)
  40218a:	4798      	blx	r3
		}

		/* Collect sensor 2 data */
		if(SenGetRxBytes(2)>5)
  40218c:	2002      	movs	r0, #2
  40218e:	4b14      	ldr	r3, [pc, #80]	; (4021e0 <main+0xd4>)
  402190:	4798      	blx	r3
  402192:	4603      	mov	r3, r0
  402194:	2b05      	cmp	r3, #5
  402196:	d902      	bls.n	40219e <main+0x92>
		{
			SenProcessData(2);
  402198:	2002      	movs	r0, #2
  40219a:	4b12      	ldr	r3, [pc, #72]	; (4021e4 <main+0xd8>)
  40219c:	4798      	blx	r3
		}

		/* Activate valves */
		ActivateValves();
  40219e:	4b12      	ldr	r3, [pc, #72]	; (4021e8 <main+0xdc>)
  4021a0:	4798      	blx	r3

		/* Send data collected from sensors to display */
		SendDispData();
  4021a2:	4b12      	ldr	r3, [pc, #72]	; (4021ec <main+0xe0>)
  4021a4:	4798      	blx	r3

		/* Clear WDT */
	}
  4021a6:	e7e3      	b.n	402170 <main+0x64>
  4021a8:	00400eb5 	.word	0x00400eb5
  4021ac:	004018c9 	.word	0x004018c9
  4021b0:	004012c1 	.word	0x004012c1
  4021b4:	00402245 	.word	0x00402245
  4021b8:	20000b40 	.word	0x20000b40
  4021bc:	00403139 	.word	0x00403139
  4021c0:	20000ad4 	.word	0x20000ad4
  4021c4:	20000c44 	.word	0x20000c44
  4021c8:	20000cb8 	.word	0x20000cb8
  4021cc:	20000cb4 	.word	0x20000cb4
  4021d0:	004002cd 	.word	0x004002cd
  4021d4:	0040220d 	.word	0x0040220d
  4021d8:	00401269 	.word	0x00401269
  4021dc:	004003d5 	.word	0x004003d5
  4021e0:	00400489 	.word	0x00400489
  4021e4:	004022c1 	.word	0x004022c1
  4021e8:	004025a9 	.word	0x004025a9
  4021ec:	00402601 	.word	0x00402601

004021f0 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  4021f0:	b480      	push	{r7}
  4021f2:	af00      	add	r7, sp, #0
	tickCount++;
  4021f4:	4b04      	ldr	r3, [pc, #16]	; (402208 <SysTick_Handler+0x18>)
  4021f6:	681b      	ldr	r3, [r3, #0]
  4021f8:	3301      	adds	r3, #1
  4021fa:	4a03      	ldr	r2, [pc, #12]	; (402208 <SysTick_Handler+0x18>)
  4021fc:	6013      	str	r3, [r2, #0]
}
  4021fe:	bf00      	nop
  402200:	46bd      	mov	sp, r7
  402202:	bc80      	pop	{r7}
  402204:	4770      	bx	lr
  402206:	bf00      	nop
  402208:	20000a78 	.word	0x20000a78

0040220c <InitSystick>:
/**
 *  Configure system tick to generate an interrupt every 10 ms.
 */

void InitSystick(void)
{
  40220c:	b580      	push	{r7, lr}
  40220e:	b082      	sub	sp, #8
  402210:	af00      	add	r7, sp, #0
	uint32_t ul_flag;
	ul_flag = SysTick_Config(sysclk_get_cpu_hz() / SYS_TICK_FREQ);
  402212:	4b09      	ldr	r3, [pc, #36]	; (402238 <InitSystick+0x2c>)
  402214:	4798      	blx	r3
  402216:	4602      	mov	r2, r0
  402218:	4b08      	ldr	r3, [pc, #32]	; (40223c <InitSystick+0x30>)
  40221a:	fba3 2302 	umull	r2, r3, r3, r2
  40221e:	095b      	lsrs	r3, r3, #5
  402220:	4618      	mov	r0, r3
  402222:	4b07      	ldr	r3, [pc, #28]	; (402240 <InitSystick+0x34>)
  402224:	4798      	blx	r3
  402226:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  402228:	687b      	ldr	r3, [r7, #4]
  40222a:	2b00      	cmp	r3, #0
  40222c:	d000      	beq.n	402230 <InitSystick+0x24>
		/* Systick configuration error */
		while (1) {
		}
  40222e:	e7fe      	b.n	40222e <InitSystick+0x22>
	}
}
  402230:	bf00      	nop
  402232:	3708      	adds	r7, #8
  402234:	46bd      	mov	sp, r7
  402236:	bd80      	pop	{r7, pc}
  402238:	00401e19 	.word	0x00401e19
  40223c:	51eb851f 	.word	0x51eb851f
  402240:	00401d41 	.word	0x00401d41

00402244 <InitDispUart>:

/**
 *  Configure display UART for output.
 */
void InitDispUart(void)
{
  402244:	b580      	push	{r7, lr}
  402246:	b084      	sub	sp, #16
  402248:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  40224a:	463b      	mov	r3, r7
  40224c:	2200      	movs	r2, #0
  40224e:	601a      	str	r2, [r3, #0]
  402250:	605a      	str	r2, [r3, #4]
  402252:	609a      	str	r2, [r3, #8]
  402254:	60da      	str	r2, [r3, #12]
  402256:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
  40225a:	603b      	str	r3, [r7, #0]
  40225c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402260:	60bb      	str	r3, [r7, #8]
		.baudrate = DISP_UART_BAUDRATE,
		.paritytype = UART_MR_PAR_NO
	};

	sysclk_enable_peripheral_clock(DISP_UART_ID);
  402262:	2009      	movs	r0, #9
  402264:	4b0e      	ldr	r3, [pc, #56]	; (4022a0 <InitDispUart+0x5c>)
  402266:	4798      	blx	r3
	stdio_serial_init(DISP_UART, &uart_serial_options);
  402268:	463b      	mov	r3, r7
  40226a:	4619      	mov	r1, r3
  40226c:	480d      	ldr	r0, [pc, #52]	; (4022a4 <InitDispUart+0x60>)
  40226e:	4b0e      	ldr	r3, [pc, #56]	; (4022a8 <InitDispUart+0x64>)
  402270:	4798      	blx	r3
	
	uart_enable_tx(DISP_UART);
  402272:	480c      	ldr	r0, [pc, #48]	; (4022a4 <InitDispUart+0x60>)
  402274:	4b0d      	ldr	r3, [pc, #52]	; (4022ac <InitDispUart+0x68>)
  402276:	4798      	blx	r3
	uart_disable_rx(DISP_UART);
  402278:	480a      	ldr	r0, [pc, #40]	; (4022a4 <InitDispUart+0x60>)
  40227a:	4b0d      	ldr	r3, [pc, #52]	; (4022b0 <InitDispUart+0x6c>)
  40227c:	4798      	blx	r3

	dispUartPdcBase = uart_get_pdc_base(DISP_UART);
  40227e:	4809      	ldr	r0, [pc, #36]	; (4022a4 <InitDispUart+0x60>)
  402280:	4b0c      	ldr	r3, [pc, #48]	; (4022b4 <InitDispUart+0x70>)
  402282:	4798      	blx	r3
  402284:	4602      	mov	r2, r0
  402286:	4b0c      	ldr	r3, [pc, #48]	; (4022b8 <InitDispUart+0x74>)
  402288:	601a      	str	r2, [r3, #0]
	pdc_enable_transfer(dispUartPdcBase, PERIPH_PTCR_TXTEN);
  40228a:	4b0b      	ldr	r3, [pc, #44]	; (4022b8 <InitDispUart+0x74>)
  40228c:	681b      	ldr	r3, [r3, #0]
  40228e:	f44f 7180 	mov.w	r1, #256	; 0x100
  402292:	4618      	mov	r0, r3
  402294:	4b09      	ldr	r3, [pc, #36]	; (4022bc <InitDispUart+0x78>)
  402296:	4798      	blx	r3
}
  402298:	bf00      	nop
  40229a:	3710      	adds	r7, #16
  40229c:	46bd      	mov	sp, r7
  40229e:	bd80      	pop	{r7, pc}
  4022a0:	00401e41 	.word	0x00401e41
  4022a4:	400e0800 	.word	0x400e0800
  4022a8:	004020a5 	.word	0x004020a5
  4022ac:	004007e5 	.word	0x004007e5
  4022b0:	004007fd 	.word	0x004007fd
  4022b4:	0040088d 	.word	0x0040088d
  4022b8:	20000cbc 	.word	0x20000cbc
  4022bc:	00400fad 	.word	0x00400fad

004022c0 <SenProcessData>:

void SenProcessData(uint8_t senNo)
{
  4022c0:	b580      	push	{r7, lr}
  4022c2:	b084      	sub	sp, #16
  4022c4:	af00      	add	r7, sp, #0
  4022c6:	4603      	mov	r3, r0
  4022c8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	/* Process only 1 frame at a time i.e. 5B */
	for ( i = 0; i < 5; i++)
  4022ca:	2300      	movs	r3, #0
  4022cc:	73fb      	strb	r3, [r7, #15]
  4022ce:	e014      	b.n	4022fa <SenProcessData+0x3a>
	{
		if(SenGetRxBytes(senNo))
  4022d0:	79fb      	ldrb	r3, [r7, #7]
  4022d2:	4618      	mov	r0, r3
  4022d4:	4b0c      	ldr	r3, [pc, #48]	; (402308 <SenProcessData+0x48>)
  4022d6:	4798      	blx	r3
  4022d8:	4603      	mov	r3, r0
  4022da:	2b00      	cmp	r3, #0
  4022dc:	d00a      	beq.n	4022f4 <SenProcessData+0x34>
		{
			SenParseFrame(senNo, SenGetByte(senNo));
  4022de:	79fb      	ldrb	r3, [r7, #7]
  4022e0:	4618      	mov	r0, r3
  4022e2:	4b0a      	ldr	r3, [pc, #40]	; (40230c <SenProcessData+0x4c>)
  4022e4:	4798      	blx	r3
  4022e6:	4603      	mov	r3, r0
  4022e8:	461a      	mov	r2, r3
  4022ea:	79fb      	ldrb	r3, [r7, #7]
  4022ec:	4611      	mov	r1, r2
  4022ee:	4618      	mov	r0, r3
  4022f0:	4b07      	ldr	r3, [pc, #28]	; (402310 <SenProcessData+0x50>)
  4022f2:	4798      	blx	r3

void SenProcessData(uint8_t senNo)
{
	uint8_t i;
	/* Process only 1 frame at a time i.e. 5B */
	for ( i = 0; i < 5; i++)
  4022f4:	7bfb      	ldrb	r3, [r7, #15]
  4022f6:	3301      	adds	r3, #1
  4022f8:	73fb      	strb	r3, [r7, #15]
  4022fa:	7bfb      	ldrb	r3, [r7, #15]
  4022fc:	2b04      	cmp	r3, #4
  4022fe:	d9e7      	bls.n	4022d0 <SenProcessData+0x10>
		if(SenGetRxBytes(senNo))
		{
			SenParseFrame(senNo, SenGetByte(senNo));
		}
	}
}
  402300:	bf00      	nop
  402302:	3710      	adds	r7, #16
  402304:	46bd      	mov	sp, r7
  402306:	bd80      	pop	{r7, pc}
  402308:	00400489 	.word	0x00400489
  40230c:	00400535 	.word	0x00400535
  402310:	00402315 	.word	0x00402315

00402314 <SenParseFrame>:

void SenParseFrame(uint8_t senNo, uint8_t data)
{
  402314:	b580      	push	{r7, lr}
  402316:	b082      	sub	sp, #8
  402318:	af00      	add	r7, sp, #0
  40231a:	4603      	mov	r3, r0
  40231c:	460a      	mov	r2, r1
  40231e:	71fb      	strb	r3, [r7, #7]
  402320:	4613      	mov	r3, r2
  402322:	71bb      	strb	r3, [r7, #6]
	if(senNo == 1)
  402324:	79fb      	ldrb	r3, [r7, #7]
  402326:	2b01      	cmp	r3, #1
  402328:	f040 80d6 	bne.w	4024d8 <SenParseFrame+0x1c4>
	{
		switch(sen1State.state)
  40232c:	4b6c      	ldr	r3, [pc, #432]	; (4024e0 <SenParseFrame+0x1cc>)
  40232e:	781b      	ldrb	r3, [r3, #0]
  402330:	2b05      	cmp	r3, #5
  402332:	f200 80d1 	bhi.w	4024d8 <SenParseFrame+0x1c4>
  402336:	a201      	add	r2, pc, #4	; (adr r2, 40233c <SenParseFrame+0x28>)
  402338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40233c:	00402355 	.word	0x00402355
  402340:	0040236b 	.word	0x0040236b
  402344:	0040239b 	.word	0x0040239b
  402348:	004023bd 	.word	0x004023bd
  40234c:	004023e7 	.word	0x004023e7
  402350:	00402447 	.word	0x00402447
		{
			case q0:
				if(data==0x01)
  402354:	79bb      	ldrb	r3, [r7, #6]
  402356:	2b01      	cmp	r3, #1
  402358:	f040 80bb 	bne.w	4024d2 <SenParseFrame+0x1be>
				{
					sen1State.state = q1;
  40235c:	4b60      	ldr	r3, [pc, #384]	; (4024e0 <SenParseFrame+0x1cc>)
  40235e:	2201      	movs	r2, #1
  402360:	701a      	strb	r2, [r3, #0]
					sen1State.sum = 0x01;
  402362:	4b5f      	ldr	r3, [pc, #380]	; (4024e0 <SenParseFrame+0x1cc>)
  402364:	2201      	movs	r2, #1
  402366:	705a      	strb	r2, [r3, #1]
				}
				break;
  402368:	e0b3      	b.n	4024d2 <SenParseFrame+0x1be>
			case q1:
				if((data>127)&&BIT_IS_SET(data,0))
  40236a:	f997 3006 	ldrsb.w	r3, [r7, #6]
  40236e:	2b00      	cmp	r3, #0
  402370:	da0f      	bge.n	402392 <SenParseFrame+0x7e>
  402372:	79bb      	ldrb	r3, [r7, #6]
  402374:	f003 0301 	and.w	r3, r3, #1
  402378:	2b00      	cmp	r3, #0
  40237a:	d00a      	beq.n	402392 <SenParseFrame+0x7e>
				{
					sen1State.state = q2;
  40237c:	4b58      	ldr	r3, [pc, #352]	; (4024e0 <SenParseFrame+0x1cc>)
  40237e:	2202      	movs	r2, #2
  402380:	701a      	strb	r2, [r3, #0]
					sen1State.sum += data;
  402382:	4b57      	ldr	r3, [pc, #348]	; (4024e0 <SenParseFrame+0x1cc>)
  402384:	785a      	ldrb	r2, [r3, #1]
  402386:	79bb      	ldrb	r3, [r7, #6]
  402388:	4413      	add	r3, r2
  40238a:	b2da      	uxtb	r2, r3
  40238c:	4b54      	ldr	r3, [pc, #336]	; (4024e0 <SenParseFrame+0x1cc>)
  40238e:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen1State.state = q0;
				}
				break;
  402390:	e0a2      	b.n	4024d8 <SenParseFrame+0x1c4>
					sen1State.state = q2;
					sen1State.sum += data;
				}
				else
				{
					sen1State.state = q0;
  402392:	4b53      	ldr	r3, [pc, #332]	; (4024e0 <SenParseFrame+0x1cc>)
  402394:	2200      	movs	r2, #0
  402396:	701a      	strb	r2, [r3, #0]
				}
				break;
  402398:	e09e      	b.n	4024d8 <SenParseFrame+0x1c4>
			case q2:
				//Pleath Reading
				tempPleath = data;
  40239a:	4a52      	ldr	r2, [pc, #328]	; (4024e4 <SenParseFrame+0x1d0>)
  40239c:	79bb      	ldrb	r3, [r7, #6]
  40239e:	7013      	strb	r3, [r2, #0]
				sen1State.state = q3;
  4023a0:	4b4f      	ldr	r3, [pc, #316]	; (4024e0 <SenParseFrame+0x1cc>)
  4023a2:	2203      	movs	r2, #3
  4023a4:	701a      	strb	r2, [r3, #0]
				sen1State.sum += data;
  4023a6:	4b4e      	ldr	r3, [pc, #312]	; (4024e0 <SenParseFrame+0x1cc>)
  4023a8:	785a      	ldrb	r2, [r3, #1]
  4023aa:	79bb      	ldrb	r3, [r7, #6]
  4023ac:	4413      	add	r3, r2
  4023ae:	b2da      	uxtb	r2, r3
  4023b0:	4b4b      	ldr	r3, [pc, #300]	; (4024e0 <SenParseFrame+0x1cc>)
  4023b2:	705a      	strb	r2, [r3, #1]
				sen1State.pIndex = 3;
  4023b4:	4b4a      	ldr	r3, [pc, #296]	; (4024e0 <SenParseFrame+0x1cc>)
  4023b6:	2203      	movs	r2, #3
  4023b8:	70da      	strb	r2, [r3, #3]
				break;
  4023ba:	e08d      	b.n	4024d8 <SenParseFrame+0x1c4>
			case q3:
				if(data<127)
  4023bc:	79bb      	ldrb	r3, [r7, #6]
  4023be:	2b7e      	cmp	r3, #126	; 0x7e
  4023c0:	d80d      	bhi.n	4023de <SenParseFrame+0xca>
				{
					//HRMSB
					//hrtRate = ((uint16_t)(data&0x03))<<8;
					sen1Data.hrMsb = data;
  4023c2:	4a49      	ldr	r2, [pc, #292]	; (4024e8 <SenParseFrame+0x1d4>)
  4023c4:	79bb      	ldrb	r3, [r7, #6]
  4023c6:	7013      	strb	r3, [r2, #0]
					sen1State.state = q4;
  4023c8:	4b45      	ldr	r3, [pc, #276]	; (4024e0 <SenParseFrame+0x1cc>)
  4023ca:	2204      	movs	r2, #4
  4023cc:	701a      	strb	r2, [r3, #0]
					sen1State.sum += data;
  4023ce:	4b44      	ldr	r3, [pc, #272]	; (4024e0 <SenParseFrame+0x1cc>)
  4023d0:	785a      	ldrb	r2, [r3, #1]
  4023d2:	79bb      	ldrb	r3, [r7, #6]
  4023d4:	4413      	add	r3, r2
  4023d6:	b2da      	uxtb	r2, r3
  4023d8:	4b41      	ldr	r3, [pc, #260]	; (4024e0 <SenParseFrame+0x1cc>)
  4023da:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen1State.state = q0;
				}
				break;
  4023dc:	e07c      	b.n	4024d8 <SenParseFrame+0x1c4>
					sen1State.state = q4;
					sen1State.sum += data;
				}
				else
				{
					sen1State.state = q0;
  4023de:	4b40      	ldr	r3, [pc, #256]	; (4024e0 <SenParseFrame+0x1cc>)
  4023e0:	2200      	movs	r2, #0
  4023e2:	701a      	strb	r2, [r3, #0]
				}
				break;
  4023e4:	e078      	b.n	4024d8 <SenParseFrame+0x1c4>
			case q4:
				/* If Checksum matched */
				if(data==sen1State.sum)
  4023e6:	4b3e      	ldr	r3, [pc, #248]	; (4024e0 <SenParseFrame+0x1cc>)
  4023e8:	785b      	ldrb	r3, [r3, #1]
  4023ea:	79ba      	ldrb	r2, [r7, #6]
  4023ec:	429a      	cmp	r2, r3
  4023ee:	d126      	bne.n	40243e <SenParseFrame+0x12a>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen1Data.pleathBuff, tempPleath);
  4023f0:	4b3c      	ldr	r3, [pc, #240]	; (4024e4 <SenParseFrame+0x1d0>)
  4023f2:	781b      	ldrb	r3, [r3, #0]
  4023f4:	4619      	mov	r1, r3
  4023f6:	483d      	ldr	r0, [pc, #244]	; (4024ec <SenParseFrame+0x1d8>)
  4023f8:	4b3d      	ldr	r3, [pc, #244]	; (4024f0 <SenParseFrame+0x1dc>)
  4023fa:	4798      	blx	r3
					//CBuffWriteByte(&trigBuff, tempPleath);

					if ((!trigFound) && (GetTrigger(tempPleath)))
  4023fc:	4b3d      	ldr	r3, [pc, #244]	; (4024f4 <SenParseFrame+0x1e0>)
  4023fe:	781b      	ldrb	r3, [r3, #0]
  402400:	2b00      	cmp	r3, #0
  402402:	d111      	bne.n	402428 <SenParseFrame+0x114>
  402404:	4b37      	ldr	r3, [pc, #220]	; (4024e4 <SenParseFrame+0x1d0>)
  402406:	781b      	ldrb	r3, [r3, #0]
  402408:	4618      	mov	r0, r3
  40240a:	4b3b      	ldr	r3, [pc, #236]	; (4024f8 <SenParseFrame+0x1e4>)
  40240c:	4798      	blx	r3
  40240e:	4603      	mov	r3, r0
  402410:	2b00      	cmp	r3, #0
  402412:	d009      	beq.n	402428 <SenParseFrame+0x114>
					{
						/* Write data value to trigger circular buffer */
						CBuffWriteByte(&trigBuff, tempPleath);
  402414:	4b33      	ldr	r3, [pc, #204]	; (4024e4 <SenParseFrame+0x1d0>)
  402416:	781b      	ldrb	r3, [r3, #0]
  402418:	4619      	mov	r1, r3
  40241a:	4838      	ldr	r0, [pc, #224]	; (4024fc <SenParseFrame+0x1e8>)
  40241c:	4b34      	ldr	r3, [pc, #208]	; (4024f0 <SenParseFrame+0x1dc>)
  40241e:	4798      	blx	r3
						/* This flag will be reset in the pressure control loop */
						trigFound = 1;
  402420:	4b34      	ldr	r3, [pc, #208]	; (4024f4 <SenParseFrame+0x1e0>)
  402422:	2201      	movs	r2, #1
  402424:	701a      	strb	r2, [r3, #0]
  402426:	e003      	b.n	402430 <SenParseFrame+0x11c>
					}
					else
					{
						/* Write 0 to trigger circular buffer */
						CBuffWriteByte(&trigBuff, 0);
  402428:	2100      	movs	r1, #0
  40242a:	4834      	ldr	r0, [pc, #208]	; (4024fc <SenParseFrame+0x1e8>)
  40242c:	4b30      	ldr	r3, [pc, #192]	; (4024f0 <SenParseFrame+0x1dc>)
  40242e:	4798      	blx	r3
					}
					sen1State.state = q5;
  402430:	4b2b      	ldr	r3, [pc, #172]	; (4024e0 <SenParseFrame+0x1cc>)
  402432:	2205      	movs	r2, #5
  402434:	701a      	strb	r2, [r3, #0]
					sen1State.ctr = 0;
  402436:	4b2a      	ldr	r3, [pc, #168]	; (4024e0 <SenParseFrame+0x1cc>)
  402438:	2200      	movs	r2, #0
  40243a:	709a      	strb	r2, [r3, #2]
				}
				else
				{
					sen1State.state = q0;
				}
				break;
  40243c:	e04c      	b.n	4024d8 <SenParseFrame+0x1c4>
					sen1State.state = q5;
					sen1State.ctr = 0;
				}
				else
				{
					sen1State.state = q0;
  40243e:	4b28      	ldr	r3, [pc, #160]	; (4024e0 <SenParseFrame+0x1cc>)
  402440:	2200      	movs	r2, #0
  402442:	701a      	strb	r2, [r3, #0]
				}
				break;
  402444:	e048      	b.n	4024d8 <SenParseFrame+0x1c4>
			case q5:
				sen1State.ctr++;
  402446:	4b26      	ldr	r3, [pc, #152]	; (4024e0 <SenParseFrame+0x1cc>)
  402448:	789b      	ldrb	r3, [r3, #2]
  40244a:	3301      	adds	r3, #1
  40244c:	b2da      	uxtb	r2, r3
  40244e:	4b24      	ldr	r3, [pc, #144]	; (4024e0 <SenParseFrame+0x1cc>)
  402450:	709a      	strb	r2, [r3, #2]
				if(sen1State.ctr == sen1State.pIndex)
  402452:	4b23      	ldr	r3, [pc, #140]	; (4024e0 <SenParseFrame+0x1cc>)
  402454:	789a      	ldrb	r2, [r3, #2]
  402456:	4b22      	ldr	r3, [pc, #136]	; (4024e0 <SenParseFrame+0x1cc>)
  402458:	78db      	ldrb	r3, [r3, #3]
  40245a:	429a      	cmp	r2, r3
  40245c:	d120      	bne.n	4024a0 <SenParseFrame+0x18c>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen1Data.pleathBuff, data);
  40245e:	79bb      	ldrb	r3, [r7, #6]
  402460:	4619      	mov	r1, r3
  402462:	4822      	ldr	r0, [pc, #136]	; (4024ec <SenParseFrame+0x1d8>)
  402464:	4b22      	ldr	r3, [pc, #136]	; (4024f0 <SenParseFrame+0x1dc>)
  402466:	4798      	blx	r3
					//CBuffWriteByte(&trigBuff, data);

					if ((!trigFound) && (GetTrigger(data)))
  402468:	4b22      	ldr	r3, [pc, #136]	; (4024f4 <SenParseFrame+0x1e0>)
  40246a:	781b      	ldrb	r3, [r3, #0]
  40246c:	2b00      	cmp	r3, #0
  40246e:	d10c      	bne.n	40248a <SenParseFrame+0x176>
  402470:	79bb      	ldrb	r3, [r7, #6]
  402472:	4618      	mov	r0, r3
  402474:	4b20      	ldr	r3, [pc, #128]	; (4024f8 <SenParseFrame+0x1e4>)
  402476:	4798      	blx	r3
  402478:	4603      	mov	r3, r0
  40247a:	2b00      	cmp	r3, #0
  40247c:	d005      	beq.n	40248a <SenParseFrame+0x176>
					{
						/* Write data value to trigger circular buffer */
						CBuffWriteByte(&trigBuff, data);
  40247e:	79bb      	ldrb	r3, [r7, #6]
  402480:	4619      	mov	r1, r3
  402482:	481e      	ldr	r0, [pc, #120]	; (4024fc <SenParseFrame+0x1e8>)
  402484:	4b1a      	ldr	r3, [pc, #104]	; (4024f0 <SenParseFrame+0x1dc>)
  402486:	4798      	blx	r3
  402488:	e003      	b.n	402492 <SenParseFrame+0x17e>
					}
					else
					{
						/* Write 0 to trigger circular buffer */
						CBuffWriteByte(&trigBuff, 0);
  40248a:	2100      	movs	r1, #0
  40248c:	481b      	ldr	r0, [pc, #108]	; (4024fc <SenParseFrame+0x1e8>)
  40248e:	4b18      	ldr	r3, [pc, #96]	; (4024f0 <SenParseFrame+0x1dc>)
  402490:	4798      	blx	r3
					}
					sen1State.pIndex += 5;
  402492:	4b13      	ldr	r3, [pc, #76]	; (4024e0 <SenParseFrame+0x1cc>)
  402494:	78db      	ldrb	r3, [r3, #3]
  402496:	3305      	adds	r3, #5
  402498:	b2da      	uxtb	r2, r3
  40249a:	4b11      	ldr	r3, [pc, #68]	; (4024e0 <SenParseFrame+0x1cc>)
  40249c:	70da      	strb	r2, [r3, #3]
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  40249e:	e01a      	b.n	4024d6 <SenParseFrame+0x1c2>
						/* Write 0 to trigger circular buffer */
						CBuffWriteByte(&trigBuff, 0);
					}
					sen1State.pIndex += 5;
				}
				else if(sen1State.ctr == 4)
  4024a0:	4b0f      	ldr	r3, [pc, #60]	; (4024e0 <SenParseFrame+0x1cc>)
  4024a2:	789b      	ldrb	r3, [r3, #2]
  4024a4:	2b04      	cmp	r3, #4
  4024a6:	d103      	bne.n	4024b0 <SenParseFrame+0x19c>
				{
					sen1Data.hrLsb = data;
  4024a8:	4a0f      	ldr	r2, [pc, #60]	; (4024e8 <SenParseFrame+0x1d4>)
  4024aa:	79bb      	ldrb	r3, [r7, #6]
  4024ac:	7053      	strb	r3, [r2, #1]
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  4024ae:	e012      	b.n	4024d6 <SenParseFrame+0x1c2>
				else if(sen1State.ctr == 4)
				{
					sen1Data.hrLsb = data;
					//hrtRate |= data;
				}
				else if(sen1State.ctr == 9)
  4024b0:	4b0b      	ldr	r3, [pc, #44]	; (4024e0 <SenParseFrame+0x1cc>)
  4024b2:	789b      	ldrb	r3, [r3, #2]
  4024b4:	2b09      	cmp	r3, #9
  4024b6:	d103      	bne.n	4024c0 <SenParseFrame+0x1ac>
				{
					sen1Data.spo2 = data;
  4024b8:	4a0b      	ldr	r2, [pc, #44]	; (4024e8 <SenParseFrame+0x1d4>)
  4024ba:	79bb      	ldrb	r3, [r7, #6]
  4024bc:	7093      	strb	r3, [r2, #2]
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  4024be:	e00a      	b.n	4024d6 <SenParseFrame+0x1c2>
				{
					sen1Data.spo2 = data;
					//spo2 = data;
					//disp = 1;
				}
				else if(sen1State.ctr==120)
  4024c0:	4b07      	ldr	r3, [pc, #28]	; (4024e0 <SenParseFrame+0x1cc>)
  4024c2:	789b      	ldrb	r3, [r3, #2]
  4024c4:	2b78      	cmp	r3, #120	; 0x78
  4024c6:	d106      	bne.n	4024d6 <SenParseFrame+0x1c2>
				{
					sen1State.state = q0;					
  4024c8:	4b05      	ldr	r3, [pc, #20]	; (4024e0 <SenParseFrame+0x1cc>)
  4024ca:	2200      	movs	r2, #0
  4024cc:	701a      	strb	r2, [r3, #0]
				}
				break;
  4024ce:	bf00      	nop
  4024d0:	e001      	b.n	4024d6 <SenParseFrame+0x1c2>
				if(data==0x01)
				{
					sen1State.state = q1;
					sen1State.sum = 0x01;
				}
				break;
  4024d2:	bf00      	nop
  4024d4:	e000      	b.n	4024d8 <SenParseFrame+0x1c4>
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  4024d6:	bf00      	nop
	}
	else
	{
		
	}
}
  4024d8:	bf00      	nop
  4024da:	3708      	adds	r7, #8
  4024dc:	46bd      	mov	sp, r7
  4024de:	bd80      	pop	{r7, pc}
  4024e0:	20000cb8 	.word	0x20000cb8
  4024e4:	20000a76 	.word	0x20000a76
  4024e8:	20000b40 	.word	0x20000b40
  4024ec:	20000b43 	.word	0x20000b43
  4024f0:	004001cd 	.word	0x004001cd
  4024f4:	20000a74 	.word	0x20000a74
  4024f8:	00402501 	.word	0x00402501
  4024fc:	20000c44 	.word	0x20000c44

00402500 <GetTrigger>:

uint8_t GetTrigger(uint8_t currPleath)
{
  402500:	b480      	push	{r7}
  402502:	b085      	sub	sp, #20
  402504:	af00      	add	r7, sp, #0
  402506:	4603      	mov	r3, r0
  402508:	71fb      	strb	r3, [r7, #7]
	int8_t diff = (int8_t)prevPleath - (int8_t)currPleath;
  40250a:	4b23      	ldr	r3, [pc, #140]	; (402598 <GetTrigger+0x98>)
  40250c:	781a      	ldrb	r2, [r3, #0]
  40250e:	79fb      	ldrb	r3, [r7, #7]
  402510:	1ad3      	subs	r3, r2, r3
  402512:	b2db      	uxtb	r3, r3
  402514:	73fb      	strb	r3, [r7, #15]
	static uint8_t ctr = 0;
	
	//if (!trigFound)
	{
		/* Find trigger during rising ppg signal */
		if(rising)
  402516:	4b21      	ldr	r3, [pc, #132]	; (40259c <GetTrigger+0x9c>)
  402518:	781b      	ldrb	r3, [r3, #0]
  40251a:	2b00      	cmp	r3, #0
  40251c:	d024      	beq.n	402568 <GetTrigger+0x68>
		{
			if ((diff <= -PLEATH_DIFF_THRESHOLD) && (!trigFound))
  40251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402522:	f113 0f02 	cmn.w	r3, #2
  402526:	da0a      	bge.n	40253e <GetTrigger+0x3e>
  402528:	4b1d      	ldr	r3, [pc, #116]	; (4025a0 <GetTrigger+0xa0>)
  40252a:	781b      	ldrb	r3, [r3, #0]
  40252c:	2b00      	cmp	r3, #0
  40252e:	d106      	bne.n	40253e <GetTrigger+0x3e>
			{
				ctr+=1;
  402530:	4b1c      	ldr	r3, [pc, #112]	; (4025a4 <GetTrigger+0xa4>)
  402532:	781b      	ldrb	r3, [r3, #0]
  402534:	3301      	adds	r3, #1
  402536:	b2da      	uxtb	r2, r3
  402538:	4b1a      	ldr	r3, [pc, #104]	; (4025a4 <GetTrigger+0xa4>)
  40253a:	701a      	strb	r2, [r3, #0]
  40253c:	e002      	b.n	402544 <GetTrigger+0x44>
			}
			else
			{
				ctr = 0;
  40253e:	4b19      	ldr	r3, [pc, #100]	; (4025a4 <GetTrigger+0xa4>)
  402540:	2200      	movs	r2, #0
  402542:	701a      	strb	r2, [r3, #0]
			}

			if((ctr>=PLEATH_DIFF_CYCLES) && (!trigFound))
  402544:	4b17      	ldr	r3, [pc, #92]	; (4025a4 <GetTrigger+0xa4>)
  402546:	781b      	ldrb	r3, [r3, #0]
  402548:	2b01      	cmp	r3, #1
  40254a:	d91b      	bls.n	402584 <GetTrigger+0x84>
  40254c:	4b14      	ldr	r3, [pc, #80]	; (4025a0 <GetTrigger+0xa0>)
  40254e:	781b      	ldrb	r3, [r3, #0]
  402550:	2b00      	cmp	r3, #0
  402552:	d117      	bne.n	402584 <GetTrigger+0x84>
			{
				/* This flag will be reset in the pressure control loop */
				trigFound = 1;
  402554:	4b12      	ldr	r3, [pc, #72]	; (4025a0 <GetTrigger+0xa0>)
  402556:	2201      	movs	r2, #1
  402558:	701a      	strb	r2, [r3, #0]
				rising = 0;
  40255a:	4b10      	ldr	r3, [pc, #64]	; (40259c <GetTrigger+0x9c>)
  40255c:	2200      	movs	r2, #0
  40255e:	701a      	strb	r2, [r3, #0]
				ctr = 0;
  402560:	4b10      	ldr	r3, [pc, #64]	; (4025a4 <GetTrigger+0xa4>)
  402562:	2200      	movs	r2, #0
  402564:	701a      	strb	r2, [r3, #0]
  402566:	e00d      	b.n	402584 <GetTrigger+0x84>
			}
		}
		else
		{
			/* Once trigFound flag is reset, wait till next rising cycle */
			if((diff >= 0) && (diff <= PLEATH_DIFF_THRESHOLD))
  402568:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40256c:	2b00      	cmp	r3, #0
  40256e:	db09      	blt.n	402584 <GetTrigger+0x84>
  402570:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402574:	2b03      	cmp	r3, #3
  402576:	dc05      	bgt.n	402584 <GetTrigger+0x84>
			{
				rising = 1;
  402578:	4b08      	ldr	r3, [pc, #32]	; (40259c <GetTrigger+0x9c>)
  40257a:	2201      	movs	r2, #1
  40257c:	701a      	strb	r2, [r3, #0]
				ctr = 0;
  40257e:	4b09      	ldr	r3, [pc, #36]	; (4025a4 <GetTrigger+0xa4>)
  402580:	2200      	movs	r2, #0
  402582:	701a      	strb	r2, [r3, #0]
			}
		}
		prevPleath = currPleath;
  402584:	4a04      	ldr	r2, [pc, #16]	; (402598 <GetTrigger+0x98>)
  402586:	79fb      	ldrb	r3, [r7, #7]
  402588:	7013      	strb	r3, [r2, #0]
	}
	return trigFound;
  40258a:	4b05      	ldr	r3, [pc, #20]	; (4025a0 <GetTrigger+0xa0>)
  40258c:	781b      	ldrb	r3, [r3, #0]
}
  40258e:	4618      	mov	r0, r3
  402590:	3714      	adds	r7, #20
  402592:	46bd      	mov	sp, r7
  402594:	bc80      	pop	{r7}
  402596:	4770      	bx	lr
  402598:	20000a75 	.word	0x20000a75
  40259c:	20000004 	.word	0x20000004
  4025a0:	20000a74 	.word	0x20000a74
  4025a4:	20000a7c 	.word	0x20000a7c

004025a8 <ActivateValves>:

void ActivateValves(void)
{
  4025a8:	b480      	push	{r7}
  4025aa:	af00      	add	r7, sp, #0
	if(trigFound)
  4025ac:	4b11      	ldr	r3, [pc, #68]	; (4025f4 <ActivateValves+0x4c>)
  4025ae:	781b      	ldrb	r3, [r3, #0]
  4025b0:	2b00      	cmp	r3, #0
  4025b2:	d01b      	beq.n	4025ec <ActivateValves+0x44>
	{
		switch(ctrlState)
  4025b4:	4b10      	ldr	r3, [pc, #64]	; (4025f8 <ActivateValves+0x50>)
  4025b6:	781b      	ldrb	r3, [r3, #0]
  4025b8:	2b00      	cmp	r3, #0
  4025ba:	d002      	beq.n	4025c2 <ActivateValves+0x1a>
  4025bc:	2b01      	cmp	r3, #1
  4025be:	d007      	beq.n	4025d0 <ActivateValves+0x28>
					trigFound = 0;
					ctrlState = allOff;
				}
				break;
			default:
				break;
  4025c0:	e014      	b.n	4025ec <ActivateValves+0x44>
	if(trigFound)
	{
		switch(ctrlState)
		{
			case allOff:
				tickCount = 0;
  4025c2:	4b0e      	ldr	r3, [pc, #56]	; (4025fc <ActivateValves+0x54>)
  4025c4:	2200      	movs	r2, #0
  4025c6:	601a      	str	r2, [r3, #0]
				ctrlState = trigWait;
  4025c8:	4b0b      	ldr	r3, [pc, #44]	; (4025f8 <ActivateValves+0x50>)
  4025ca:	2201      	movs	r2, #1
  4025cc:	701a      	strb	r2, [r3, #0]
				break;
  4025ce:	e00d      	b.n	4025ec <ActivateValves+0x44>
			case trigWait:
				/* If 200 ms elapsed */
				if(tickCount>=200)
  4025d0:	4b0a      	ldr	r3, [pc, #40]	; (4025fc <ActivateValves+0x54>)
  4025d2:	681b      	ldr	r3, [r3, #0]
  4025d4:	2bc7      	cmp	r3, #199	; 0xc7
  4025d6:	d908      	bls.n	4025ea <ActivateValves+0x42>
				{
					tickCount = 0;
  4025d8:	4b08      	ldr	r3, [pc, #32]	; (4025fc <ActivateValves+0x54>)
  4025da:	2200      	movs	r2, #0
  4025dc:	601a      	str	r2, [r3, #0]
					trigFound = 0;
  4025de:	4b05      	ldr	r3, [pc, #20]	; (4025f4 <ActivateValves+0x4c>)
  4025e0:	2200      	movs	r2, #0
  4025e2:	701a      	strb	r2, [r3, #0]
					ctrlState = allOff;
  4025e4:	4b04      	ldr	r3, [pc, #16]	; (4025f8 <ActivateValves+0x50>)
  4025e6:	2200      	movs	r2, #0
  4025e8:	701a      	strb	r2, [r3, #0]
				}
				break;
  4025ea:	bf00      	nop
			default:
				break;
		}
	}
}
  4025ec:	bf00      	nop
  4025ee:	46bd      	mov	sp, r7
  4025f0:	bc80      	pop	{r7}
  4025f2:	4770      	bx	lr
  4025f4:	20000a74 	.word	0x20000a74
  4025f8:	20000a77 	.word	0x20000a77
  4025fc:	20000a78 	.word	0x20000a78

00402600 <SendDispData>:

void SendDispData(void)
{
  402600:	b580      	push	{r7, lr}
  402602:	b082      	sub	sp, #8
  402604:	af00      	add	r7, sp, #0
	uint8_t readS2 = 0;
  402606:	2300      	movs	r3, #0
  402608:	71fb      	strb	r3, [r7, #7]

	/* If previous transfer not complete, return */
	if (!(uart_get_status(DISP_UART) & UART_SR_ENDTX)) 
  40260a:	48a5      	ldr	r0, [pc, #660]	; (4028a0 <SendDispData+0x2a0>)
  40260c:	4ba5      	ldr	r3, [pc, #660]	; (4028a4 <SendDispData+0x2a4>)
  40260e:	4798      	blx	r3
  402610:	4603      	mov	r3, r0
  402612:	f003 0310 	and.w	r3, r3, #16
  402616:	2b00      	cmp	r3, #0
  402618:	f000 8525 	beq.w	403066 <SendDispData+0xa66>
	{
		return;
	}

	if(CBuffGetRxBytes(&sen2Data.pleathBuff) >= 25)
  40261c:	48a2      	ldr	r0, [pc, #648]	; (4028a8 <SendDispData+0x2a8>)
  40261e:	4ba3      	ldr	r3, [pc, #652]	; (4028ac <SendDispData+0x2ac>)
  402620:	4798      	blx	r3
  402622:	4603      	mov	r3, r0
  402624:	2b18      	cmp	r3, #24
  402626:	d901      	bls.n	40262c <SendDispData+0x2c>
	{
		readS2 = 1;
  402628:	2301      	movs	r3, #1
  40262a:	71fb      	strb	r3, [r7, #7]
	}

	/* Check if data in sen1Pleath buff >= 25 */
	if(CBuffGetRxBytes(&sen1Data.pleathBuff) > 25 && CBuffGetRxBytes(&trigBuff) > 25)
  40262c:	48a0      	ldr	r0, [pc, #640]	; (4028b0 <SendDispData+0x2b0>)
  40262e:	4b9f      	ldr	r3, [pc, #636]	; (4028ac <SendDispData+0x2ac>)
  402630:	4798      	blx	r3
  402632:	4603      	mov	r3, r0
  402634:	2b19      	cmp	r3, #25
  402636:	f240 8517 	bls.w	403068 <SendDispData+0xa68>
  40263a:	489e      	ldr	r0, [pc, #632]	; (4028b4 <SendDispData+0x2b4>)
  40263c:	4b9b      	ldr	r3, [pc, #620]	; (4028ac <SendDispData+0x2ac>)
  40263e:	4798      	blx	r3
  402640:	4603      	mov	r3, r0
  402642:	2b19      	cmp	r3, #25
  402644:	f240 8510 	bls.w	403068 <SendDispData+0xa68>
	{
		/* Frame 1*/
		dispPkt[0] = '$';
  402648:	4b9b      	ldr	r3, [pc, #620]	; (4028b8 <SendDispData+0x2b8>)
  40264a:	2224      	movs	r2, #36	; 0x24
  40264c:	701a      	strb	r2, [r3, #0]
		/* Sensor Status */
		dispPkt[1] = '1';
  40264e:	4b9a      	ldr	r3, [pc, #616]	; (4028b8 <SendDispData+0x2b8>)
  402650:	2231      	movs	r2, #49	; 0x31
  402652:	705a      	strb	r2, [r3, #1]
		/* Sensor 1 Pleath Data */
		dispPkt[2] = CBuffReadByte(&sen1Data.pleathBuff);
  402654:	4896      	ldr	r0, [pc, #600]	; (4028b0 <SendDispData+0x2b0>)
  402656:	4b99      	ldr	r3, [pc, #612]	; (4028bc <SendDispData+0x2bc>)
  402658:	4798      	blx	r3
  40265a:	4603      	mov	r3, r0
  40265c:	461a      	mov	r2, r3
  40265e:	4b96      	ldr	r3, [pc, #600]	; (4028b8 <SendDispData+0x2b8>)
  402660:	709a      	strb	r2, [r3, #2]
		/* Trigger Data */
		dispPkt[3] = CBuffReadByte(&trigBuff);
  402662:	4894      	ldr	r0, [pc, #592]	; (4028b4 <SendDispData+0x2b4>)
  402664:	4b95      	ldr	r3, [pc, #596]	; (4028bc <SendDispData+0x2bc>)
  402666:	4798      	blx	r3
  402668:	4603      	mov	r3, r0
  40266a:	461a      	mov	r2, r3
  40266c:	4b92      	ldr	r3, [pc, #584]	; (4028b8 <SendDispData+0x2b8>)
  40266e:	70da      	strb	r2, [r3, #3]
		/* Sensor 2 Pleath Data */
		if(readS2)
  402670:	79fb      	ldrb	r3, [r7, #7]
  402672:	2b00      	cmp	r3, #0
  402674:	d007      	beq.n	402686 <SendDispData+0x86>
			dispPkt[4] = CBuffReadByte(&sen2Data.pleathBuff);
  402676:	488c      	ldr	r0, [pc, #560]	; (4028a8 <SendDispData+0x2a8>)
  402678:	4b90      	ldr	r3, [pc, #576]	; (4028bc <SendDispData+0x2bc>)
  40267a:	4798      	blx	r3
  40267c:	4603      	mov	r3, r0
  40267e:	461a      	mov	r2, r3
  402680:	4b8d      	ldr	r3, [pc, #564]	; (4028b8 <SendDispData+0x2b8>)
  402682:	711a      	strb	r2, [r3, #4]
  402684:	e002      	b.n	40268c <SendDispData+0x8c>
		else
			dispPkt[4] = 0;
  402686:	4b8c      	ldr	r3, [pc, #560]	; (4028b8 <SendDispData+0x2b8>)
  402688:	2200      	movs	r2, #0
  40268a:	711a      	strb	r2, [r3, #4]
		/* Checksum */
		dispPkt[5] = CalcChkSum(&dispPkt[0],5);
  40268c:	2105      	movs	r1, #5
  40268e:	488a      	ldr	r0, [pc, #552]	; (4028b8 <SendDispData+0x2b8>)
  402690:	4b8b      	ldr	r3, [pc, #556]	; (4028c0 <SendDispData+0x2c0>)
  402692:	4798      	blx	r3
  402694:	4603      	mov	r3, r0
  402696:	461a      	mov	r2, r3
  402698:	4b87      	ldr	r3, [pc, #540]	; (4028b8 <SendDispData+0x2b8>)
  40269a:	715a      	strb	r2, [r3, #5]

		/* Frame 2*/
		dispPkt[6] = '$';
  40269c:	4b86      	ldr	r3, [pc, #536]	; (4028b8 <SendDispData+0x2b8>)
  40269e:	2224      	movs	r2, #36	; 0x24
  4026a0:	719a      	strb	r2, [r3, #6]
		/* S1 Heart Rate MSB */
		dispPkt[7] = sen1Data.hrMsb;
  4026a2:	4b88      	ldr	r3, [pc, #544]	; (4028c4 <SendDispData+0x2c4>)
  4026a4:	781a      	ldrb	r2, [r3, #0]
  4026a6:	4b84      	ldr	r3, [pc, #528]	; (4028b8 <SendDispData+0x2b8>)
  4026a8:	71da      	strb	r2, [r3, #7]
		/* Sensor 1 Pleath Data */
		dispPkt[8] = CBuffReadByte(&sen1Data.pleathBuff);
  4026aa:	4881      	ldr	r0, [pc, #516]	; (4028b0 <SendDispData+0x2b0>)
  4026ac:	4b83      	ldr	r3, [pc, #524]	; (4028bc <SendDispData+0x2bc>)
  4026ae:	4798      	blx	r3
  4026b0:	4603      	mov	r3, r0
  4026b2:	461a      	mov	r2, r3
  4026b4:	4b80      	ldr	r3, [pc, #512]	; (4028b8 <SendDispData+0x2b8>)
  4026b6:	721a      	strb	r2, [r3, #8]
		/* Trigger Data */
		dispPkt[9] = CBuffReadByte(&trigBuff);
  4026b8:	487e      	ldr	r0, [pc, #504]	; (4028b4 <SendDispData+0x2b4>)
  4026ba:	4b80      	ldr	r3, [pc, #512]	; (4028bc <SendDispData+0x2bc>)
  4026bc:	4798      	blx	r3
  4026be:	4603      	mov	r3, r0
  4026c0:	461a      	mov	r2, r3
  4026c2:	4b7d      	ldr	r3, [pc, #500]	; (4028b8 <SendDispData+0x2b8>)
  4026c4:	725a      	strb	r2, [r3, #9]
		/* Sensor 2 Pleath Data */
		if(readS2)
  4026c6:	79fb      	ldrb	r3, [r7, #7]
  4026c8:	2b00      	cmp	r3, #0
  4026ca:	d007      	beq.n	4026dc <SendDispData+0xdc>
			dispPkt[10] = CBuffReadByte(&sen2Data.pleathBuff);
  4026cc:	4876      	ldr	r0, [pc, #472]	; (4028a8 <SendDispData+0x2a8>)
  4026ce:	4b7b      	ldr	r3, [pc, #492]	; (4028bc <SendDispData+0x2bc>)
  4026d0:	4798      	blx	r3
  4026d2:	4603      	mov	r3, r0
  4026d4:	461a      	mov	r2, r3
  4026d6:	4b78      	ldr	r3, [pc, #480]	; (4028b8 <SendDispData+0x2b8>)
  4026d8:	729a      	strb	r2, [r3, #10]
  4026da:	e002      	b.n	4026e2 <SendDispData+0xe2>
		else
			dispPkt[10] = 0;
  4026dc:	4b76      	ldr	r3, [pc, #472]	; (4028b8 <SendDispData+0x2b8>)
  4026de:	2200      	movs	r2, #0
  4026e0:	729a      	strb	r2, [r3, #10]
		/* Checksum */
		dispPkt[11] = CalcChkSum(&dispPkt[6],5);
  4026e2:	2105      	movs	r1, #5
  4026e4:	4878      	ldr	r0, [pc, #480]	; (4028c8 <SendDispData+0x2c8>)
  4026e6:	4b76      	ldr	r3, [pc, #472]	; (4028c0 <SendDispData+0x2c0>)
  4026e8:	4798      	blx	r3
  4026ea:	4603      	mov	r3, r0
  4026ec:	461a      	mov	r2, r3
  4026ee:	4b72      	ldr	r3, [pc, #456]	; (4028b8 <SendDispData+0x2b8>)
  4026f0:	72da      	strb	r2, [r3, #11]

		/* Frame 3*/
		dispPkt[12] = '$';
  4026f2:	4b71      	ldr	r3, [pc, #452]	; (4028b8 <SendDispData+0x2b8>)
  4026f4:	2224      	movs	r2, #36	; 0x24
  4026f6:	731a      	strb	r2, [r3, #12]
		/* S1 Heart Rate LSB */
		dispPkt[13] = sen1Data.hrLsb;
  4026f8:	4b72      	ldr	r3, [pc, #456]	; (4028c4 <SendDispData+0x2c4>)
  4026fa:	785a      	ldrb	r2, [r3, #1]
  4026fc:	4b6e      	ldr	r3, [pc, #440]	; (4028b8 <SendDispData+0x2b8>)
  4026fe:	735a      	strb	r2, [r3, #13]
		/* Sensor 1 Pleath Data */
		dispPkt[14] = CBuffReadByte(&sen1Data.pleathBuff);
  402700:	486b      	ldr	r0, [pc, #428]	; (4028b0 <SendDispData+0x2b0>)
  402702:	4b6e      	ldr	r3, [pc, #440]	; (4028bc <SendDispData+0x2bc>)
  402704:	4798      	blx	r3
  402706:	4603      	mov	r3, r0
  402708:	461a      	mov	r2, r3
  40270a:	4b6b      	ldr	r3, [pc, #428]	; (4028b8 <SendDispData+0x2b8>)
  40270c:	739a      	strb	r2, [r3, #14]
		/* Trigger Data */
		dispPkt[15] = CBuffReadByte(&trigBuff);
  40270e:	4869      	ldr	r0, [pc, #420]	; (4028b4 <SendDispData+0x2b4>)
  402710:	4b6a      	ldr	r3, [pc, #424]	; (4028bc <SendDispData+0x2bc>)
  402712:	4798      	blx	r3
  402714:	4603      	mov	r3, r0
  402716:	461a      	mov	r2, r3
  402718:	4b67      	ldr	r3, [pc, #412]	; (4028b8 <SendDispData+0x2b8>)
  40271a:	73da      	strb	r2, [r3, #15]
		/* Sensor 2 Pleath Data */
		if(readS2)
  40271c:	79fb      	ldrb	r3, [r7, #7]
  40271e:	2b00      	cmp	r3, #0
  402720:	d007      	beq.n	402732 <SendDispData+0x132>
			dispPkt[16] = CBuffReadByte(&sen2Data.pleathBuff);
  402722:	4861      	ldr	r0, [pc, #388]	; (4028a8 <SendDispData+0x2a8>)
  402724:	4b65      	ldr	r3, [pc, #404]	; (4028bc <SendDispData+0x2bc>)
  402726:	4798      	blx	r3
  402728:	4603      	mov	r3, r0
  40272a:	461a      	mov	r2, r3
  40272c:	4b62      	ldr	r3, [pc, #392]	; (4028b8 <SendDispData+0x2b8>)
  40272e:	741a      	strb	r2, [r3, #16]
  402730:	e002      	b.n	402738 <SendDispData+0x138>
		else
			dispPkt[16] = 0;
  402732:	4b61      	ldr	r3, [pc, #388]	; (4028b8 <SendDispData+0x2b8>)
  402734:	2200      	movs	r2, #0
  402736:	741a      	strb	r2, [r3, #16]
		/* Checksum */
		dispPkt[17] = CalcChkSum(&dispPkt[12],5);
  402738:	2105      	movs	r1, #5
  40273a:	4864      	ldr	r0, [pc, #400]	; (4028cc <SendDispData+0x2cc>)
  40273c:	4b60      	ldr	r3, [pc, #384]	; (4028c0 <SendDispData+0x2c0>)
  40273e:	4798      	blx	r3
  402740:	4603      	mov	r3, r0
  402742:	461a      	mov	r2, r3
  402744:	4b5c      	ldr	r3, [pc, #368]	; (4028b8 <SendDispData+0x2b8>)
  402746:	745a      	strb	r2, [r3, #17]

		/* Frame 4*/
		dispPkt[18] = '$';
  402748:	4b5b      	ldr	r3, [pc, #364]	; (4028b8 <SendDispData+0x2b8>)
  40274a:	2224      	movs	r2, #36	; 0x24
  40274c:	749a      	strb	r2, [r3, #18]
		/* S1 SpO2 */
		dispPkt[19] = sen1Data.spo2;
  40274e:	4b5d      	ldr	r3, [pc, #372]	; (4028c4 <SendDispData+0x2c4>)
  402750:	789a      	ldrb	r2, [r3, #2]
  402752:	4b59      	ldr	r3, [pc, #356]	; (4028b8 <SendDispData+0x2b8>)
  402754:	74da      	strb	r2, [r3, #19]
		/* Sensor 1 Pleath Data */
		dispPkt[20] = CBuffReadByte(&sen1Data.pleathBuff);
  402756:	4856      	ldr	r0, [pc, #344]	; (4028b0 <SendDispData+0x2b0>)
  402758:	4b58      	ldr	r3, [pc, #352]	; (4028bc <SendDispData+0x2bc>)
  40275a:	4798      	blx	r3
  40275c:	4603      	mov	r3, r0
  40275e:	461a      	mov	r2, r3
  402760:	4b55      	ldr	r3, [pc, #340]	; (4028b8 <SendDispData+0x2b8>)
  402762:	751a      	strb	r2, [r3, #20]
		/* Trigger Data */
		dispPkt[21] = CBuffReadByte(&trigBuff);
  402764:	4853      	ldr	r0, [pc, #332]	; (4028b4 <SendDispData+0x2b4>)
  402766:	4b55      	ldr	r3, [pc, #340]	; (4028bc <SendDispData+0x2bc>)
  402768:	4798      	blx	r3
  40276a:	4603      	mov	r3, r0
  40276c:	461a      	mov	r2, r3
  40276e:	4b52      	ldr	r3, [pc, #328]	; (4028b8 <SendDispData+0x2b8>)
  402770:	755a      	strb	r2, [r3, #21]
		/* Sensor 2 Pleath Data */
		if(readS2)
  402772:	79fb      	ldrb	r3, [r7, #7]
  402774:	2b00      	cmp	r3, #0
  402776:	d007      	beq.n	402788 <SendDispData+0x188>
			dispPkt[22] = CBuffReadByte(&sen2Data.pleathBuff);
  402778:	484b      	ldr	r0, [pc, #300]	; (4028a8 <SendDispData+0x2a8>)
  40277a:	4b50      	ldr	r3, [pc, #320]	; (4028bc <SendDispData+0x2bc>)
  40277c:	4798      	blx	r3
  40277e:	4603      	mov	r3, r0
  402780:	461a      	mov	r2, r3
  402782:	4b4d      	ldr	r3, [pc, #308]	; (4028b8 <SendDispData+0x2b8>)
  402784:	759a      	strb	r2, [r3, #22]
  402786:	e002      	b.n	40278e <SendDispData+0x18e>
		else
			dispPkt[22] = 0;
  402788:	4b4b      	ldr	r3, [pc, #300]	; (4028b8 <SendDispData+0x2b8>)
  40278a:	2200      	movs	r2, #0
  40278c:	759a      	strb	r2, [r3, #22]
		/* Checksum */
		dispPkt[23] = CalcChkSum(&dispPkt[18],5);
  40278e:	2105      	movs	r1, #5
  402790:	484f      	ldr	r0, [pc, #316]	; (4028d0 <SendDispData+0x2d0>)
  402792:	4b4b      	ldr	r3, [pc, #300]	; (4028c0 <SendDispData+0x2c0>)
  402794:	4798      	blx	r3
  402796:	4603      	mov	r3, r0
  402798:	461a      	mov	r2, r3
  40279a:	4b47      	ldr	r3, [pc, #284]	; (4028b8 <SendDispData+0x2b8>)
  40279c:	75da      	strb	r2, [r3, #23]

		/* Frame 5*/
		dispPkt[24] = '$';
  40279e:	4b46      	ldr	r3, [pc, #280]	; (4028b8 <SendDispData+0x2b8>)
  4027a0:	2224      	movs	r2, #36	; 0x24
  4027a2:	761a      	strb	r2, [r3, #24]
		/* S2 Heart Rate MSB */
		dispPkt[25] = sen2Data.hrMsb;
  4027a4:	4b4b      	ldr	r3, [pc, #300]	; (4028d4 <SendDispData+0x2d4>)
  4027a6:	781a      	ldrb	r2, [r3, #0]
  4027a8:	4b43      	ldr	r3, [pc, #268]	; (4028b8 <SendDispData+0x2b8>)
  4027aa:	765a      	strb	r2, [r3, #25]
		/* Sensor 1 Pleath Data */
		dispPkt[26] = CBuffReadByte(&sen1Data.pleathBuff);
  4027ac:	4840      	ldr	r0, [pc, #256]	; (4028b0 <SendDispData+0x2b0>)
  4027ae:	4b43      	ldr	r3, [pc, #268]	; (4028bc <SendDispData+0x2bc>)
  4027b0:	4798      	blx	r3
  4027b2:	4603      	mov	r3, r0
  4027b4:	461a      	mov	r2, r3
  4027b6:	4b40      	ldr	r3, [pc, #256]	; (4028b8 <SendDispData+0x2b8>)
  4027b8:	769a      	strb	r2, [r3, #26]
		/* Trigger Data */
		dispPkt[27] = CBuffReadByte(&trigBuff);
  4027ba:	483e      	ldr	r0, [pc, #248]	; (4028b4 <SendDispData+0x2b4>)
  4027bc:	4b3f      	ldr	r3, [pc, #252]	; (4028bc <SendDispData+0x2bc>)
  4027be:	4798      	blx	r3
  4027c0:	4603      	mov	r3, r0
  4027c2:	461a      	mov	r2, r3
  4027c4:	4b3c      	ldr	r3, [pc, #240]	; (4028b8 <SendDispData+0x2b8>)
  4027c6:	76da      	strb	r2, [r3, #27]
		/* Sensor 2 Pleath Data */
		if(readS2)
  4027c8:	79fb      	ldrb	r3, [r7, #7]
  4027ca:	2b00      	cmp	r3, #0
  4027cc:	d007      	beq.n	4027de <SendDispData+0x1de>
			dispPkt[28] = CBuffReadByte(&sen2Data.pleathBuff);
  4027ce:	4836      	ldr	r0, [pc, #216]	; (4028a8 <SendDispData+0x2a8>)
  4027d0:	4b3a      	ldr	r3, [pc, #232]	; (4028bc <SendDispData+0x2bc>)
  4027d2:	4798      	blx	r3
  4027d4:	4603      	mov	r3, r0
  4027d6:	461a      	mov	r2, r3
  4027d8:	4b37      	ldr	r3, [pc, #220]	; (4028b8 <SendDispData+0x2b8>)
  4027da:	771a      	strb	r2, [r3, #28]
  4027dc:	e002      	b.n	4027e4 <SendDispData+0x1e4>
		else
			dispPkt[28] = 0;
  4027de:	4b36      	ldr	r3, [pc, #216]	; (4028b8 <SendDispData+0x2b8>)
  4027e0:	2200      	movs	r2, #0
  4027e2:	771a      	strb	r2, [r3, #28]
		/* Checksum */
		dispPkt[29] = CalcChkSum(&dispPkt[24],5);
  4027e4:	2105      	movs	r1, #5
  4027e6:	483c      	ldr	r0, [pc, #240]	; (4028d8 <SendDispData+0x2d8>)
  4027e8:	4b35      	ldr	r3, [pc, #212]	; (4028c0 <SendDispData+0x2c0>)
  4027ea:	4798      	blx	r3
  4027ec:	4603      	mov	r3, r0
  4027ee:	461a      	mov	r2, r3
  4027f0:	4b31      	ldr	r3, [pc, #196]	; (4028b8 <SendDispData+0x2b8>)
  4027f2:	775a      	strb	r2, [r3, #29]

		/* Frame 6*/
		dispPkt[30] = '$';
  4027f4:	4b30      	ldr	r3, [pc, #192]	; (4028b8 <SendDispData+0x2b8>)
  4027f6:	2224      	movs	r2, #36	; 0x24
  4027f8:	779a      	strb	r2, [r3, #30]
		/* S2 Heart Rate LSB */
		dispPkt[31] = sen2Data.hrLsb;
  4027fa:	4b36      	ldr	r3, [pc, #216]	; (4028d4 <SendDispData+0x2d4>)
  4027fc:	785a      	ldrb	r2, [r3, #1]
  4027fe:	4b2e      	ldr	r3, [pc, #184]	; (4028b8 <SendDispData+0x2b8>)
  402800:	77da      	strb	r2, [r3, #31]
		/* Sensor 1 Pleath Data */
		dispPkt[32] = CBuffReadByte(&sen1Data.pleathBuff);
  402802:	482b      	ldr	r0, [pc, #172]	; (4028b0 <SendDispData+0x2b0>)
  402804:	4b2d      	ldr	r3, [pc, #180]	; (4028bc <SendDispData+0x2bc>)
  402806:	4798      	blx	r3
  402808:	4603      	mov	r3, r0
  40280a:	461a      	mov	r2, r3
  40280c:	4b2a      	ldr	r3, [pc, #168]	; (4028b8 <SendDispData+0x2b8>)
  40280e:	f883 2020 	strb.w	r2, [r3, #32]
		/* Trigger Data */
		dispPkt[33] = CBuffReadByte(&trigBuff);
  402812:	4828      	ldr	r0, [pc, #160]	; (4028b4 <SendDispData+0x2b4>)
  402814:	4b29      	ldr	r3, [pc, #164]	; (4028bc <SendDispData+0x2bc>)
  402816:	4798      	blx	r3
  402818:	4603      	mov	r3, r0
  40281a:	461a      	mov	r2, r3
  40281c:	4b26      	ldr	r3, [pc, #152]	; (4028b8 <SendDispData+0x2b8>)
  40281e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		/* Sensor 2 Pleath Data */
		if(readS2)
  402822:	79fb      	ldrb	r3, [r7, #7]
  402824:	2b00      	cmp	r3, #0
  402826:	d008      	beq.n	40283a <SendDispData+0x23a>
			dispPkt[34] = CBuffReadByte(&sen2Data.pleathBuff);
  402828:	481f      	ldr	r0, [pc, #124]	; (4028a8 <SendDispData+0x2a8>)
  40282a:	4b24      	ldr	r3, [pc, #144]	; (4028bc <SendDispData+0x2bc>)
  40282c:	4798      	blx	r3
  40282e:	4603      	mov	r3, r0
  402830:	461a      	mov	r2, r3
  402832:	4b21      	ldr	r3, [pc, #132]	; (4028b8 <SendDispData+0x2b8>)
  402834:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  402838:	e003      	b.n	402842 <SendDispData+0x242>
		else
			dispPkt[34] = 0;
  40283a:	4b1f      	ldr	r3, [pc, #124]	; (4028b8 <SendDispData+0x2b8>)
  40283c:	2200      	movs	r2, #0
  40283e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		/* Checksum */
		dispPkt[35] = CalcChkSum(&dispPkt[30],5);
  402842:	2105      	movs	r1, #5
  402844:	4825      	ldr	r0, [pc, #148]	; (4028dc <SendDispData+0x2dc>)
  402846:	4b1e      	ldr	r3, [pc, #120]	; (4028c0 <SendDispData+0x2c0>)
  402848:	4798      	blx	r3
  40284a:	4603      	mov	r3, r0
  40284c:	461a      	mov	r2, r3
  40284e:	4b1a      	ldr	r3, [pc, #104]	; (4028b8 <SendDispData+0x2b8>)
  402850:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		/* Frame 7*/
		dispPkt[36] = '$';
  402854:	4b18      	ldr	r3, [pc, #96]	; (4028b8 <SendDispData+0x2b8>)
  402856:	2224      	movs	r2, #36	; 0x24
  402858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		/* S2 SpO2 */
		dispPkt[37] = sen2Data.spo2;
  40285c:	4b1d      	ldr	r3, [pc, #116]	; (4028d4 <SendDispData+0x2d4>)
  40285e:	789a      	ldrb	r2, [r3, #2]
  402860:	4b15      	ldr	r3, [pc, #84]	; (4028b8 <SendDispData+0x2b8>)
  402862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		/* Sensor 1 Pleath Data */
		dispPkt[38] = CBuffReadByte(&sen1Data.pleathBuff);
  402866:	4812      	ldr	r0, [pc, #72]	; (4028b0 <SendDispData+0x2b0>)
  402868:	4b14      	ldr	r3, [pc, #80]	; (4028bc <SendDispData+0x2bc>)
  40286a:	4798      	blx	r3
  40286c:	4603      	mov	r3, r0
  40286e:	461a      	mov	r2, r3
  402870:	4b11      	ldr	r3, [pc, #68]	; (4028b8 <SendDispData+0x2b8>)
  402872:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		/* Trigger Data */
		dispPkt[39] = CBuffReadByte(&trigBuff);
  402876:	480f      	ldr	r0, [pc, #60]	; (4028b4 <SendDispData+0x2b4>)
  402878:	4b10      	ldr	r3, [pc, #64]	; (4028bc <SendDispData+0x2bc>)
  40287a:	4798      	blx	r3
  40287c:	4603      	mov	r3, r0
  40287e:	461a      	mov	r2, r3
  402880:	4b0d      	ldr	r3, [pc, #52]	; (4028b8 <SendDispData+0x2b8>)
  402882:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		/* Sensor 2 Pleath Data */
		if(readS2)
  402886:	79fb      	ldrb	r3, [r7, #7]
  402888:	2b00      	cmp	r3, #0
  40288a:	d029      	beq.n	4028e0 <SendDispData+0x2e0>
			dispPkt[40] = CBuffReadByte(&sen2Data.pleathBuff);
  40288c:	4806      	ldr	r0, [pc, #24]	; (4028a8 <SendDispData+0x2a8>)
  40288e:	4b0b      	ldr	r3, [pc, #44]	; (4028bc <SendDispData+0x2bc>)
  402890:	4798      	blx	r3
  402892:	4603      	mov	r3, r0
  402894:	461a      	mov	r2, r3
  402896:	4b08      	ldr	r3, [pc, #32]	; (4028b8 <SendDispData+0x2b8>)
  402898:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  40289c:	e024      	b.n	4028e8 <SendDispData+0x2e8>
  40289e:	bf00      	nop
  4028a0:	400e0800 	.word	0x400e0800
  4028a4:	00400815 	.word	0x00400815
  4028a8:	20000ad7 	.word	0x20000ad7
  4028ac:	00400129 	.word	0x00400129
  4028b0:	20000b43 	.word	0x20000b43
  4028b4:	20000c44 	.word	0x20000c44
  4028b8:	20000bac 	.word	0x20000bac
  4028bc:	0040018d 	.word	0x0040018d
  4028c0:	004030a9 	.word	0x004030a9
  4028c4:	20000b40 	.word	0x20000b40
  4028c8:	20000bb2 	.word	0x20000bb2
  4028cc:	20000bb8 	.word	0x20000bb8
  4028d0:	20000bbe 	.word	0x20000bbe
  4028d4:	20000ad4 	.word	0x20000ad4
  4028d8:	20000bc4 	.word	0x20000bc4
  4028dc:	20000bca 	.word	0x20000bca
		else
			dispPkt[40] = 0;
  4028e0:	4bab      	ldr	r3, [pc, #684]	; (402b90 <SendDispData+0x590>)
  4028e2:	2200      	movs	r2, #0
  4028e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		/* Checksum */
		dispPkt[41] = CalcChkSum(&dispPkt[36],5);
  4028e8:	2105      	movs	r1, #5
  4028ea:	48aa      	ldr	r0, [pc, #680]	; (402b94 <SendDispData+0x594>)
  4028ec:	4baa      	ldr	r3, [pc, #680]	; (402b98 <SendDispData+0x598>)
  4028ee:	4798      	blx	r3
  4028f0:	4603      	mov	r3, r0
  4028f2:	461a      	mov	r2, r3
  4028f4:	4ba6      	ldr	r3, [pc, #664]	; (402b90 <SendDispData+0x590>)
  4028f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

		/* Frame 8*/
		dispPkt[42] = '$';
  4028fa:	4ba5      	ldr	r3, [pc, #660]	; (402b90 <SendDispData+0x590>)
  4028fc:	2224      	movs	r2, #36	; 0x24
  4028fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		/* Pressure Set Point */
		dispPkt[43] = '0';
  402902:	4ba3      	ldr	r3, [pc, #652]	; (402b90 <SendDispData+0x590>)
  402904:	2230      	movs	r2, #48	; 0x30
  402906:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		/* Sensor 1 Pleath Data */
		dispPkt[44] = CBuffReadByte(&sen1Data.pleathBuff);
  40290a:	48a4      	ldr	r0, [pc, #656]	; (402b9c <SendDispData+0x59c>)
  40290c:	4ba4      	ldr	r3, [pc, #656]	; (402ba0 <SendDispData+0x5a0>)
  40290e:	4798      	blx	r3
  402910:	4603      	mov	r3, r0
  402912:	461a      	mov	r2, r3
  402914:	4b9e      	ldr	r3, [pc, #632]	; (402b90 <SendDispData+0x590>)
  402916:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		/* Trigger Data */
		dispPkt[45] = CBuffReadByte(&trigBuff);
  40291a:	48a2      	ldr	r0, [pc, #648]	; (402ba4 <SendDispData+0x5a4>)
  40291c:	4ba0      	ldr	r3, [pc, #640]	; (402ba0 <SendDispData+0x5a0>)
  40291e:	4798      	blx	r3
  402920:	4603      	mov	r3, r0
  402922:	461a      	mov	r2, r3
  402924:	4b9a      	ldr	r3, [pc, #616]	; (402b90 <SendDispData+0x590>)
  402926:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		/* Sensor 2 Pleath Data */
		if(readS2)
  40292a:	79fb      	ldrb	r3, [r7, #7]
  40292c:	2b00      	cmp	r3, #0
  40292e:	d008      	beq.n	402942 <SendDispData+0x342>
			dispPkt[46] = CBuffReadByte(&sen2Data.pleathBuff);
  402930:	489d      	ldr	r0, [pc, #628]	; (402ba8 <SendDispData+0x5a8>)
  402932:	4b9b      	ldr	r3, [pc, #620]	; (402ba0 <SendDispData+0x5a0>)
  402934:	4798      	blx	r3
  402936:	4603      	mov	r3, r0
  402938:	461a      	mov	r2, r3
  40293a:	4b95      	ldr	r3, [pc, #596]	; (402b90 <SendDispData+0x590>)
  40293c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  402940:	e003      	b.n	40294a <SendDispData+0x34a>
		else
			dispPkt[46] = 0;
  402942:	4b93      	ldr	r3, [pc, #588]	; (402b90 <SendDispData+0x590>)
  402944:	2200      	movs	r2, #0
  402946:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		/* Checksum */
		dispPkt[47] = CalcChkSum(&dispPkt[42],5);
  40294a:	2105      	movs	r1, #5
  40294c:	4897      	ldr	r0, [pc, #604]	; (402bac <SendDispData+0x5ac>)
  40294e:	4b92      	ldr	r3, [pc, #584]	; (402b98 <SendDispData+0x598>)
  402950:	4798      	blx	r3
  402952:	4603      	mov	r3, r0
  402954:	461a      	mov	r2, r3
  402956:	4b8e      	ldr	r3, [pc, #568]	; (402b90 <SendDispData+0x590>)
  402958:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		/* Frame 9*/
		dispPkt[48] = '$';
  40295c:	4b8c      	ldr	r3, [pc, #560]	; (402b90 <SendDispData+0x590>)
  40295e:	2224      	movs	r2, #36	; 0x24
  402960:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		/* Trigger Delay */
		dispPkt[49] = '0';
  402964:	4b8a      	ldr	r3, [pc, #552]	; (402b90 <SendDispData+0x590>)
  402966:	2230      	movs	r2, #48	; 0x30
  402968:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		/* Sensor 1 Pleath Data */
		dispPkt[50] = CBuffReadByte(&sen1Data.pleathBuff);
  40296c:	488b      	ldr	r0, [pc, #556]	; (402b9c <SendDispData+0x59c>)
  40296e:	4b8c      	ldr	r3, [pc, #560]	; (402ba0 <SendDispData+0x5a0>)
  402970:	4798      	blx	r3
  402972:	4603      	mov	r3, r0
  402974:	461a      	mov	r2, r3
  402976:	4b86      	ldr	r3, [pc, #536]	; (402b90 <SendDispData+0x590>)
  402978:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		/* Trigger Data */
		dispPkt[51] = CBuffReadByte(&trigBuff);
  40297c:	4889      	ldr	r0, [pc, #548]	; (402ba4 <SendDispData+0x5a4>)
  40297e:	4b88      	ldr	r3, [pc, #544]	; (402ba0 <SendDispData+0x5a0>)
  402980:	4798      	blx	r3
  402982:	4603      	mov	r3, r0
  402984:	461a      	mov	r2, r3
  402986:	4b82      	ldr	r3, [pc, #520]	; (402b90 <SendDispData+0x590>)
  402988:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		/* Sensor 2 Pleath Data */
		if(readS2)
  40298c:	79fb      	ldrb	r3, [r7, #7]
  40298e:	2b00      	cmp	r3, #0
  402990:	d008      	beq.n	4029a4 <SendDispData+0x3a4>
			dispPkt[52] = CBuffReadByte(&sen2Data.pleathBuff);
  402992:	4885      	ldr	r0, [pc, #532]	; (402ba8 <SendDispData+0x5a8>)
  402994:	4b82      	ldr	r3, [pc, #520]	; (402ba0 <SendDispData+0x5a0>)
  402996:	4798      	blx	r3
  402998:	4603      	mov	r3, r0
  40299a:	461a      	mov	r2, r3
  40299c:	4b7c      	ldr	r3, [pc, #496]	; (402b90 <SendDispData+0x590>)
  40299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  4029a2:	e003      	b.n	4029ac <SendDispData+0x3ac>
		else
			dispPkt[52] = 0;
  4029a4:	4b7a      	ldr	r3, [pc, #488]	; (402b90 <SendDispData+0x590>)
  4029a6:	2200      	movs	r2, #0
  4029a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		/* Checksum */
		dispPkt[53] = CalcChkSum(&dispPkt[48],5);
  4029ac:	2105      	movs	r1, #5
  4029ae:	4880      	ldr	r0, [pc, #512]	; (402bb0 <SendDispData+0x5b0>)
  4029b0:	4b79      	ldr	r3, [pc, #484]	; (402b98 <SendDispData+0x598>)
  4029b2:	4798      	blx	r3
  4029b4:	4603      	mov	r3, r0
  4029b6:	461a      	mov	r2, r3
  4029b8:	4b75      	ldr	r3, [pc, #468]	; (402b90 <SendDispData+0x590>)
  4029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		/* Frame 10 */
		dispPkt[54] = '$';
  4029be:	4b74      	ldr	r3, [pc, #464]	; (402b90 <SendDispData+0x590>)
  4029c0:	2224      	movs	r2, #36	; 0x24
  4029c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		/* Cuff Hold Duration */
		dispPkt[55] = '0';
  4029c6:	4b72      	ldr	r3, [pc, #456]	; (402b90 <SendDispData+0x590>)
  4029c8:	2230      	movs	r2, #48	; 0x30
  4029ca:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		/* Sensor 1 Pleath Data */
		dispPkt[56] = CBuffReadByte(&sen1Data.pleathBuff);
  4029ce:	4873      	ldr	r0, [pc, #460]	; (402b9c <SendDispData+0x59c>)
  4029d0:	4b73      	ldr	r3, [pc, #460]	; (402ba0 <SendDispData+0x5a0>)
  4029d2:	4798      	blx	r3
  4029d4:	4603      	mov	r3, r0
  4029d6:	461a      	mov	r2, r3
  4029d8:	4b6d      	ldr	r3, [pc, #436]	; (402b90 <SendDispData+0x590>)
  4029da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		/* Trigger Data */
		dispPkt[57] = CBuffReadByte(&trigBuff);
  4029de:	4871      	ldr	r0, [pc, #452]	; (402ba4 <SendDispData+0x5a4>)
  4029e0:	4b6f      	ldr	r3, [pc, #444]	; (402ba0 <SendDispData+0x5a0>)
  4029e2:	4798      	blx	r3
  4029e4:	4603      	mov	r3, r0
  4029e6:	461a      	mov	r2, r3
  4029e8:	4b69      	ldr	r3, [pc, #420]	; (402b90 <SendDispData+0x590>)
  4029ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		/* Sensor 2 Pleath Data */
		if(readS2)
  4029ee:	79fb      	ldrb	r3, [r7, #7]
  4029f0:	2b00      	cmp	r3, #0
  4029f2:	d008      	beq.n	402a06 <SendDispData+0x406>
			dispPkt[58] = CBuffReadByte(&sen2Data.pleathBuff);
  4029f4:	486c      	ldr	r0, [pc, #432]	; (402ba8 <SendDispData+0x5a8>)
  4029f6:	4b6a      	ldr	r3, [pc, #424]	; (402ba0 <SendDispData+0x5a0>)
  4029f8:	4798      	blx	r3
  4029fa:	4603      	mov	r3, r0
  4029fc:	461a      	mov	r2, r3
  4029fe:	4b64      	ldr	r3, [pc, #400]	; (402b90 <SendDispData+0x590>)
  402a00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  402a04:	e003      	b.n	402a0e <SendDispData+0x40e>
		else
			dispPkt[58] = 0;
  402a06:	4b62      	ldr	r3, [pc, #392]	; (402b90 <SendDispData+0x590>)
  402a08:	2200      	movs	r2, #0
  402a0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		/* Checksum */
		dispPkt[59] = CalcChkSum(&dispPkt[54],5);
  402a0e:	2105      	movs	r1, #5
  402a10:	4868      	ldr	r0, [pc, #416]	; (402bb4 <SendDispData+0x5b4>)
  402a12:	4b61      	ldr	r3, [pc, #388]	; (402b98 <SendDispData+0x598>)
  402a14:	4798      	blx	r3
  402a16:	4603      	mov	r3, r0
  402a18:	461a      	mov	r2, r3
  402a1a:	4b5d      	ldr	r3, [pc, #372]	; (402b90 <SendDispData+0x590>)
  402a1c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

		/* Frame 11 */
		dispPkt[60] = '$';
  402a20:	4b5b      	ldr	r3, [pc, #364]	; (402b90 <SendDispData+0x590>)
  402a22:	2224      	movs	r2, #36	; 0x24
  402a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		/* Cuff Pressure MSB */
		dispPkt[61] = '0';
  402a28:	4b59      	ldr	r3, [pc, #356]	; (402b90 <SendDispData+0x590>)
  402a2a:	2230      	movs	r2, #48	; 0x30
  402a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		/* Sensor 1 Pleath Data */
		dispPkt[62] = CBuffReadByte(&sen1Data.pleathBuff);
  402a30:	485a      	ldr	r0, [pc, #360]	; (402b9c <SendDispData+0x59c>)
  402a32:	4b5b      	ldr	r3, [pc, #364]	; (402ba0 <SendDispData+0x5a0>)
  402a34:	4798      	blx	r3
  402a36:	4603      	mov	r3, r0
  402a38:	461a      	mov	r2, r3
  402a3a:	4b55      	ldr	r3, [pc, #340]	; (402b90 <SendDispData+0x590>)
  402a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		/* Trigger Data */
		dispPkt[63] = CBuffReadByte(&trigBuff);
  402a40:	4858      	ldr	r0, [pc, #352]	; (402ba4 <SendDispData+0x5a4>)
  402a42:	4b57      	ldr	r3, [pc, #348]	; (402ba0 <SendDispData+0x5a0>)
  402a44:	4798      	blx	r3
  402a46:	4603      	mov	r3, r0
  402a48:	461a      	mov	r2, r3
  402a4a:	4b51      	ldr	r3, [pc, #324]	; (402b90 <SendDispData+0x590>)
  402a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		/* Sensor 2 Pleath Data */
		if(readS2)
  402a50:	79fb      	ldrb	r3, [r7, #7]
  402a52:	2b00      	cmp	r3, #0
  402a54:	d008      	beq.n	402a68 <SendDispData+0x468>
			dispPkt[64] = CBuffReadByte(&sen2Data.pleathBuff);
  402a56:	4854      	ldr	r0, [pc, #336]	; (402ba8 <SendDispData+0x5a8>)
  402a58:	4b51      	ldr	r3, [pc, #324]	; (402ba0 <SendDispData+0x5a0>)
  402a5a:	4798      	blx	r3
  402a5c:	4603      	mov	r3, r0
  402a5e:	461a      	mov	r2, r3
  402a60:	4b4b      	ldr	r3, [pc, #300]	; (402b90 <SendDispData+0x590>)
  402a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  402a66:	e003      	b.n	402a70 <SendDispData+0x470>
		else
			dispPkt[64] = 0;
  402a68:	4b49      	ldr	r3, [pc, #292]	; (402b90 <SendDispData+0x590>)
  402a6a:	2200      	movs	r2, #0
  402a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		/* Checksum */
		dispPkt[65] = CalcChkSum(&dispPkt[60],5);
  402a70:	2105      	movs	r1, #5
  402a72:	4851      	ldr	r0, [pc, #324]	; (402bb8 <SendDispData+0x5b8>)
  402a74:	4b48      	ldr	r3, [pc, #288]	; (402b98 <SendDispData+0x598>)
  402a76:	4798      	blx	r3
  402a78:	4603      	mov	r3, r0
  402a7a:	461a      	mov	r2, r3
  402a7c:	4b44      	ldr	r3, [pc, #272]	; (402b90 <SendDispData+0x590>)
  402a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		/* Frame 12 */
		dispPkt[66] = '$';
  402a82:	4b43      	ldr	r3, [pc, #268]	; (402b90 <SendDispData+0x590>)
  402a84:	2224      	movs	r2, #36	; 0x24
  402a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		/* Cuff Pressure LSB */
		dispPkt[67] = '0';
  402a8a:	4b41      	ldr	r3, [pc, #260]	; (402b90 <SendDispData+0x590>)
  402a8c:	2230      	movs	r2, #48	; 0x30
  402a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		/* Sensor 1 Pleath Data */
		dispPkt[68] = CBuffReadByte(&sen1Data.pleathBuff);
  402a92:	4842      	ldr	r0, [pc, #264]	; (402b9c <SendDispData+0x59c>)
  402a94:	4b42      	ldr	r3, [pc, #264]	; (402ba0 <SendDispData+0x5a0>)
  402a96:	4798      	blx	r3
  402a98:	4603      	mov	r3, r0
  402a9a:	461a      	mov	r2, r3
  402a9c:	4b3c      	ldr	r3, [pc, #240]	; (402b90 <SendDispData+0x590>)
  402a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		/* Trigger Data */
		dispPkt[69] = CBuffReadByte(&trigBuff);
  402aa2:	4840      	ldr	r0, [pc, #256]	; (402ba4 <SendDispData+0x5a4>)
  402aa4:	4b3e      	ldr	r3, [pc, #248]	; (402ba0 <SendDispData+0x5a0>)
  402aa6:	4798      	blx	r3
  402aa8:	4603      	mov	r3, r0
  402aaa:	461a      	mov	r2, r3
  402aac:	4b38      	ldr	r3, [pc, #224]	; (402b90 <SendDispData+0x590>)
  402aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		/* Sensor 2 Pleath Data */
		if(readS2)
  402ab2:	79fb      	ldrb	r3, [r7, #7]
  402ab4:	2b00      	cmp	r3, #0
  402ab6:	d008      	beq.n	402aca <SendDispData+0x4ca>
			dispPkt[70] = CBuffReadByte(&sen2Data.pleathBuff);
  402ab8:	483b      	ldr	r0, [pc, #236]	; (402ba8 <SendDispData+0x5a8>)
  402aba:	4b39      	ldr	r3, [pc, #228]	; (402ba0 <SendDispData+0x5a0>)
  402abc:	4798      	blx	r3
  402abe:	4603      	mov	r3, r0
  402ac0:	461a      	mov	r2, r3
  402ac2:	4b33      	ldr	r3, [pc, #204]	; (402b90 <SendDispData+0x590>)
  402ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  402ac8:	e003      	b.n	402ad2 <SendDispData+0x4d2>
		else
			dispPkt[70] = 0;
  402aca:	4b31      	ldr	r3, [pc, #196]	; (402b90 <SendDispData+0x590>)
  402acc:	2200      	movs	r2, #0
  402ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		/* Checksum */
		dispPkt[71] = CalcChkSum(&dispPkt[66],5);
  402ad2:	2105      	movs	r1, #5
  402ad4:	4839      	ldr	r0, [pc, #228]	; (402bbc <SendDispData+0x5bc>)
  402ad6:	4b30      	ldr	r3, [pc, #192]	; (402b98 <SendDispData+0x598>)
  402ad8:	4798      	blx	r3
  402ada:	4603      	mov	r3, r0
  402adc:	461a      	mov	r2, r3
  402ade:	4b2c      	ldr	r3, [pc, #176]	; (402b90 <SendDispData+0x590>)
  402ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

		/* Frame 13 */
		dispPkt[72] = '$';
  402ae4:	4b2a      	ldr	r3, [pc, #168]	; (402b90 <SendDispData+0x590>)
  402ae6:	2224      	movs	r2, #36	; 0x24
  402ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		/* Reservoir Pressure MSB */
		dispPkt[73] = '0';
  402aec:	4b28      	ldr	r3, [pc, #160]	; (402b90 <SendDispData+0x590>)
  402aee:	2230      	movs	r2, #48	; 0x30
  402af0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		/* Sensor 1 Pleath Data */
		dispPkt[74] = CBuffReadByte(&sen1Data.pleathBuff);
  402af4:	4829      	ldr	r0, [pc, #164]	; (402b9c <SendDispData+0x59c>)
  402af6:	4b2a      	ldr	r3, [pc, #168]	; (402ba0 <SendDispData+0x5a0>)
  402af8:	4798      	blx	r3
  402afa:	4603      	mov	r3, r0
  402afc:	461a      	mov	r2, r3
  402afe:	4b24      	ldr	r3, [pc, #144]	; (402b90 <SendDispData+0x590>)
  402b00:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		/* Trigger Data */
		dispPkt[75] = CBuffReadByte(&trigBuff);
  402b04:	4827      	ldr	r0, [pc, #156]	; (402ba4 <SendDispData+0x5a4>)
  402b06:	4b26      	ldr	r3, [pc, #152]	; (402ba0 <SendDispData+0x5a0>)
  402b08:	4798      	blx	r3
  402b0a:	4603      	mov	r3, r0
  402b0c:	461a      	mov	r2, r3
  402b0e:	4b20      	ldr	r3, [pc, #128]	; (402b90 <SendDispData+0x590>)
  402b10:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		/* Sensor 2 Pleath Data */
		if(readS2)
  402b14:	79fb      	ldrb	r3, [r7, #7]
  402b16:	2b00      	cmp	r3, #0
  402b18:	d008      	beq.n	402b2c <SendDispData+0x52c>
			dispPkt[76] = CBuffReadByte(&sen2Data.pleathBuff);
  402b1a:	4823      	ldr	r0, [pc, #140]	; (402ba8 <SendDispData+0x5a8>)
  402b1c:	4b20      	ldr	r3, [pc, #128]	; (402ba0 <SendDispData+0x5a0>)
  402b1e:	4798      	blx	r3
  402b20:	4603      	mov	r3, r0
  402b22:	461a      	mov	r2, r3
  402b24:	4b1a      	ldr	r3, [pc, #104]	; (402b90 <SendDispData+0x590>)
  402b26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  402b2a:	e003      	b.n	402b34 <SendDispData+0x534>
		else
			dispPkt[76] = 0;
  402b2c:	4b18      	ldr	r3, [pc, #96]	; (402b90 <SendDispData+0x590>)
  402b2e:	2200      	movs	r2, #0
  402b30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		/* Checksum */
		dispPkt[77] = CalcChkSum(&dispPkt[72],5);
  402b34:	2105      	movs	r1, #5
  402b36:	4822      	ldr	r0, [pc, #136]	; (402bc0 <SendDispData+0x5c0>)
  402b38:	4b17      	ldr	r3, [pc, #92]	; (402b98 <SendDispData+0x598>)
  402b3a:	4798      	blx	r3
  402b3c:	4603      	mov	r3, r0
  402b3e:	461a      	mov	r2, r3
  402b40:	4b13      	ldr	r3, [pc, #76]	; (402b90 <SendDispData+0x590>)
  402b42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

		/* Frame 14 */
		dispPkt[78] = '$';
  402b46:	4b12      	ldr	r3, [pc, #72]	; (402b90 <SendDispData+0x590>)
  402b48:	2224      	movs	r2, #36	; 0x24
  402b4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		/* Reservoir Pressure LSB */
		dispPkt[79] = '0';
  402b4e:	4b10      	ldr	r3, [pc, #64]	; (402b90 <SendDispData+0x590>)
  402b50:	2230      	movs	r2, #48	; 0x30
  402b52:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		/* Sensor 1 Pleath Data */
		dispPkt[80] = CBuffReadByte(&sen1Data.pleathBuff);
  402b56:	4811      	ldr	r0, [pc, #68]	; (402b9c <SendDispData+0x59c>)
  402b58:	4b11      	ldr	r3, [pc, #68]	; (402ba0 <SendDispData+0x5a0>)
  402b5a:	4798      	blx	r3
  402b5c:	4603      	mov	r3, r0
  402b5e:	461a      	mov	r2, r3
  402b60:	4b0b      	ldr	r3, [pc, #44]	; (402b90 <SendDispData+0x590>)
  402b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		/* Trigger Data */
		dispPkt[81] = CBuffReadByte(&trigBuff);
  402b66:	480f      	ldr	r0, [pc, #60]	; (402ba4 <SendDispData+0x5a4>)
  402b68:	4b0d      	ldr	r3, [pc, #52]	; (402ba0 <SendDispData+0x5a0>)
  402b6a:	4798      	blx	r3
  402b6c:	4603      	mov	r3, r0
  402b6e:	461a      	mov	r2, r3
  402b70:	4b07      	ldr	r3, [pc, #28]	; (402b90 <SendDispData+0x590>)
  402b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		/* Sensor 2 Pleath Data */
		if(readS2)
  402b76:	79fb      	ldrb	r3, [r7, #7]
  402b78:	2b00      	cmp	r3, #0
  402b7a:	d023      	beq.n	402bc4 <SendDispData+0x5c4>
			dispPkt[82] = CBuffReadByte(&sen2Data.pleathBuff);
  402b7c:	480a      	ldr	r0, [pc, #40]	; (402ba8 <SendDispData+0x5a8>)
  402b7e:	4b08      	ldr	r3, [pc, #32]	; (402ba0 <SendDispData+0x5a0>)
  402b80:	4798      	blx	r3
  402b82:	4603      	mov	r3, r0
  402b84:	461a      	mov	r2, r3
  402b86:	4b02      	ldr	r3, [pc, #8]	; (402b90 <SendDispData+0x590>)
  402b88:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  402b8c:	e01e      	b.n	402bcc <SendDispData+0x5cc>
  402b8e:	bf00      	nop
  402b90:	20000bac 	.word	0x20000bac
  402b94:	20000bd0 	.word	0x20000bd0
  402b98:	004030a9 	.word	0x004030a9
  402b9c:	20000b43 	.word	0x20000b43
  402ba0:	0040018d 	.word	0x0040018d
  402ba4:	20000c44 	.word	0x20000c44
  402ba8:	20000ad7 	.word	0x20000ad7
  402bac:	20000bd6 	.word	0x20000bd6
  402bb0:	20000bdc 	.word	0x20000bdc
  402bb4:	20000be2 	.word	0x20000be2
  402bb8:	20000be8 	.word	0x20000be8
  402bbc:	20000bee 	.word	0x20000bee
  402bc0:	20000bf4 	.word	0x20000bf4
		else
			dispPkt[82] = 0;
  402bc4:	4bab      	ldr	r3, [pc, #684]	; (402e74 <SendDispData+0x874>)
  402bc6:	2200      	movs	r2, #0
  402bc8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		/* Checksum */
		dispPkt[83] = CalcChkSum(&dispPkt[78],5);
  402bcc:	2105      	movs	r1, #5
  402bce:	48aa      	ldr	r0, [pc, #680]	; (402e78 <SendDispData+0x878>)
  402bd0:	4baa      	ldr	r3, [pc, #680]	; (402e7c <SendDispData+0x87c>)
  402bd2:	4798      	blx	r3
  402bd4:	4603      	mov	r3, r0
  402bd6:	461a      	mov	r2, r3
  402bd8:	4ba6      	ldr	r3, [pc, #664]	; (402e74 <SendDispData+0x874>)
  402bda:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

		/* Frame 15 */
		dispPkt[84] = '$';
  402bde:	4ba5      	ldr	r3, [pc, #660]	; (402e74 <SendDispData+0x874>)
  402be0:	2224      	movs	r2, #36	; 0x24
  402be2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		/* Blank */
		dispPkt[85] = '0';
  402be6:	4ba3      	ldr	r3, [pc, #652]	; (402e74 <SendDispData+0x874>)
  402be8:	2230      	movs	r2, #48	; 0x30
  402bea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		/* Sensor 1 Pleath Data */
		dispPkt[86] = CBuffReadByte(&sen1Data.pleathBuff);
  402bee:	48a4      	ldr	r0, [pc, #656]	; (402e80 <SendDispData+0x880>)
  402bf0:	4ba4      	ldr	r3, [pc, #656]	; (402e84 <SendDispData+0x884>)
  402bf2:	4798      	blx	r3
  402bf4:	4603      	mov	r3, r0
  402bf6:	461a      	mov	r2, r3
  402bf8:	4b9e      	ldr	r3, [pc, #632]	; (402e74 <SendDispData+0x874>)
  402bfa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		/* Trigger Data */
		dispPkt[87] = CBuffReadByte(&trigBuff);
  402bfe:	48a2      	ldr	r0, [pc, #648]	; (402e88 <SendDispData+0x888>)
  402c00:	4ba0      	ldr	r3, [pc, #640]	; (402e84 <SendDispData+0x884>)
  402c02:	4798      	blx	r3
  402c04:	4603      	mov	r3, r0
  402c06:	461a      	mov	r2, r3
  402c08:	4b9a      	ldr	r3, [pc, #616]	; (402e74 <SendDispData+0x874>)
  402c0a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		/* Sensor 2 Pleath Data */
		if(readS2)
  402c0e:	79fb      	ldrb	r3, [r7, #7]
  402c10:	2b00      	cmp	r3, #0
  402c12:	d008      	beq.n	402c26 <SendDispData+0x626>
			dispPkt[88] = CBuffReadByte(&sen2Data.pleathBuff);
  402c14:	489d      	ldr	r0, [pc, #628]	; (402e8c <SendDispData+0x88c>)
  402c16:	4b9b      	ldr	r3, [pc, #620]	; (402e84 <SendDispData+0x884>)
  402c18:	4798      	blx	r3
  402c1a:	4603      	mov	r3, r0
  402c1c:	461a      	mov	r2, r3
  402c1e:	4b95      	ldr	r3, [pc, #596]	; (402e74 <SendDispData+0x874>)
  402c20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  402c24:	e003      	b.n	402c2e <SendDispData+0x62e>
		else
			dispPkt[88] = 0;
  402c26:	4b93      	ldr	r3, [pc, #588]	; (402e74 <SendDispData+0x874>)
  402c28:	2200      	movs	r2, #0
  402c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		/* Checksum */
		dispPkt[89] = CalcChkSum(&dispPkt[84],5);
  402c2e:	2105      	movs	r1, #5
  402c30:	4897      	ldr	r0, [pc, #604]	; (402e90 <SendDispData+0x890>)
  402c32:	4b92      	ldr	r3, [pc, #584]	; (402e7c <SendDispData+0x87c>)
  402c34:	4798      	blx	r3
  402c36:	4603      	mov	r3, r0
  402c38:	461a      	mov	r2, r3
  402c3a:	4b8e      	ldr	r3, [pc, #568]	; (402e74 <SendDispData+0x874>)
  402c3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

		/* Frame 16 */
		dispPkt[90] = '$';
  402c40:	4b8c      	ldr	r3, [pc, #560]	; (402e74 <SendDispData+0x874>)
  402c42:	2224      	movs	r2, #36	; 0x24
  402c44:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		/* Blank */
		dispPkt[91] = '0';
  402c48:	4b8a      	ldr	r3, [pc, #552]	; (402e74 <SendDispData+0x874>)
  402c4a:	2230      	movs	r2, #48	; 0x30
  402c4c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		/* Sensor 1 Pleath Data */
		dispPkt[92] = CBuffReadByte(&sen1Data.pleathBuff);
  402c50:	488b      	ldr	r0, [pc, #556]	; (402e80 <SendDispData+0x880>)
  402c52:	4b8c      	ldr	r3, [pc, #560]	; (402e84 <SendDispData+0x884>)
  402c54:	4798      	blx	r3
  402c56:	4603      	mov	r3, r0
  402c58:	461a      	mov	r2, r3
  402c5a:	4b86      	ldr	r3, [pc, #536]	; (402e74 <SendDispData+0x874>)
  402c5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		/* Trigger Data */
		dispPkt[93] = CBuffReadByte(&trigBuff);
  402c60:	4889      	ldr	r0, [pc, #548]	; (402e88 <SendDispData+0x888>)
  402c62:	4b88      	ldr	r3, [pc, #544]	; (402e84 <SendDispData+0x884>)
  402c64:	4798      	blx	r3
  402c66:	4603      	mov	r3, r0
  402c68:	461a      	mov	r2, r3
  402c6a:	4b82      	ldr	r3, [pc, #520]	; (402e74 <SendDispData+0x874>)
  402c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		/* Sensor 2 Pleath Data */
		if(readS2)
  402c70:	79fb      	ldrb	r3, [r7, #7]
  402c72:	2b00      	cmp	r3, #0
  402c74:	d008      	beq.n	402c88 <SendDispData+0x688>
			dispPkt[94] = CBuffReadByte(&sen2Data.pleathBuff);
  402c76:	4885      	ldr	r0, [pc, #532]	; (402e8c <SendDispData+0x88c>)
  402c78:	4b82      	ldr	r3, [pc, #520]	; (402e84 <SendDispData+0x884>)
  402c7a:	4798      	blx	r3
  402c7c:	4603      	mov	r3, r0
  402c7e:	461a      	mov	r2, r3
  402c80:	4b7c      	ldr	r3, [pc, #496]	; (402e74 <SendDispData+0x874>)
  402c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  402c86:	e003      	b.n	402c90 <SendDispData+0x690>
		else
			dispPkt[94] = 0;
  402c88:	4b7a      	ldr	r3, [pc, #488]	; (402e74 <SendDispData+0x874>)
  402c8a:	2200      	movs	r2, #0
  402c8c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		/* Checksum */
		dispPkt[95] = CalcChkSum(&dispPkt[90],5);
  402c90:	2105      	movs	r1, #5
  402c92:	4880      	ldr	r0, [pc, #512]	; (402e94 <SendDispData+0x894>)
  402c94:	4b79      	ldr	r3, [pc, #484]	; (402e7c <SendDispData+0x87c>)
  402c96:	4798      	blx	r3
  402c98:	4603      	mov	r3, r0
  402c9a:	461a      	mov	r2, r3
  402c9c:	4b75      	ldr	r3, [pc, #468]	; (402e74 <SendDispData+0x874>)
  402c9e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

		/* Frame 17 */
		dispPkt[96] = '$';
  402ca2:	4b74      	ldr	r3, [pc, #464]	; (402e74 <SendDispData+0x874>)
  402ca4:	2224      	movs	r2, #36	; 0x24
  402ca6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		/* Blank */
		dispPkt[97] = '0';
  402caa:	4b72      	ldr	r3, [pc, #456]	; (402e74 <SendDispData+0x874>)
  402cac:	2230      	movs	r2, #48	; 0x30
  402cae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		/* Sensor 1 Pleath Data */
		dispPkt[98] = CBuffReadByte(&sen1Data.pleathBuff);
  402cb2:	4873      	ldr	r0, [pc, #460]	; (402e80 <SendDispData+0x880>)
  402cb4:	4b73      	ldr	r3, [pc, #460]	; (402e84 <SendDispData+0x884>)
  402cb6:	4798      	blx	r3
  402cb8:	4603      	mov	r3, r0
  402cba:	461a      	mov	r2, r3
  402cbc:	4b6d      	ldr	r3, [pc, #436]	; (402e74 <SendDispData+0x874>)
  402cbe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		/* Trigger Data */
		dispPkt[99] = CBuffReadByte(&trigBuff);
  402cc2:	4871      	ldr	r0, [pc, #452]	; (402e88 <SendDispData+0x888>)
  402cc4:	4b6f      	ldr	r3, [pc, #444]	; (402e84 <SendDispData+0x884>)
  402cc6:	4798      	blx	r3
  402cc8:	4603      	mov	r3, r0
  402cca:	461a      	mov	r2, r3
  402ccc:	4b69      	ldr	r3, [pc, #420]	; (402e74 <SendDispData+0x874>)
  402cce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		/* Sensor 2 Pleath Data */
		if(readS2)
  402cd2:	79fb      	ldrb	r3, [r7, #7]
  402cd4:	2b00      	cmp	r3, #0
  402cd6:	d008      	beq.n	402cea <SendDispData+0x6ea>
			dispPkt[100] = CBuffReadByte(&sen2Data.pleathBuff);
  402cd8:	486c      	ldr	r0, [pc, #432]	; (402e8c <SendDispData+0x88c>)
  402cda:	4b6a      	ldr	r3, [pc, #424]	; (402e84 <SendDispData+0x884>)
  402cdc:	4798      	blx	r3
  402cde:	4603      	mov	r3, r0
  402ce0:	461a      	mov	r2, r3
  402ce2:	4b64      	ldr	r3, [pc, #400]	; (402e74 <SendDispData+0x874>)
  402ce4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  402ce8:	e003      	b.n	402cf2 <SendDispData+0x6f2>
		else
			dispPkt[100] = 0;
  402cea:	4b62      	ldr	r3, [pc, #392]	; (402e74 <SendDispData+0x874>)
  402cec:	2200      	movs	r2, #0
  402cee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		/* Checksum */
		dispPkt[101] = CalcChkSum(&dispPkt[96],5);
  402cf2:	2105      	movs	r1, #5
  402cf4:	4868      	ldr	r0, [pc, #416]	; (402e98 <SendDispData+0x898>)
  402cf6:	4b61      	ldr	r3, [pc, #388]	; (402e7c <SendDispData+0x87c>)
  402cf8:	4798      	blx	r3
  402cfa:	4603      	mov	r3, r0
  402cfc:	461a      	mov	r2, r3
  402cfe:	4b5d      	ldr	r3, [pc, #372]	; (402e74 <SendDispData+0x874>)
  402d00:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

		/* Frame 18 */
		dispPkt[102] = '$';
  402d04:	4b5b      	ldr	r3, [pc, #364]	; (402e74 <SendDispData+0x874>)
  402d06:	2224      	movs	r2, #36	; 0x24
  402d08:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		/* Blank */
		dispPkt[103] = '0';
  402d0c:	4b59      	ldr	r3, [pc, #356]	; (402e74 <SendDispData+0x874>)
  402d0e:	2230      	movs	r2, #48	; 0x30
  402d10:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		/* Sensor 1 Pleath Data */
		dispPkt[104] = CBuffReadByte(&sen1Data.pleathBuff);
  402d14:	485a      	ldr	r0, [pc, #360]	; (402e80 <SendDispData+0x880>)
  402d16:	4b5b      	ldr	r3, [pc, #364]	; (402e84 <SendDispData+0x884>)
  402d18:	4798      	blx	r3
  402d1a:	4603      	mov	r3, r0
  402d1c:	461a      	mov	r2, r3
  402d1e:	4b55      	ldr	r3, [pc, #340]	; (402e74 <SendDispData+0x874>)
  402d20:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		/* Trigger Data */
		dispPkt[105] = CBuffReadByte(&trigBuff);
  402d24:	4858      	ldr	r0, [pc, #352]	; (402e88 <SendDispData+0x888>)
  402d26:	4b57      	ldr	r3, [pc, #348]	; (402e84 <SendDispData+0x884>)
  402d28:	4798      	blx	r3
  402d2a:	4603      	mov	r3, r0
  402d2c:	461a      	mov	r2, r3
  402d2e:	4b51      	ldr	r3, [pc, #324]	; (402e74 <SendDispData+0x874>)
  402d30:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		/* Sensor 2 Pleath Data */
		if(readS2)
  402d34:	79fb      	ldrb	r3, [r7, #7]
  402d36:	2b00      	cmp	r3, #0
  402d38:	d008      	beq.n	402d4c <SendDispData+0x74c>
			dispPkt[106] = CBuffReadByte(&sen2Data.pleathBuff);
  402d3a:	4854      	ldr	r0, [pc, #336]	; (402e8c <SendDispData+0x88c>)
  402d3c:	4b51      	ldr	r3, [pc, #324]	; (402e84 <SendDispData+0x884>)
  402d3e:	4798      	blx	r3
  402d40:	4603      	mov	r3, r0
  402d42:	461a      	mov	r2, r3
  402d44:	4b4b      	ldr	r3, [pc, #300]	; (402e74 <SendDispData+0x874>)
  402d46:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  402d4a:	e003      	b.n	402d54 <SendDispData+0x754>
		else
			dispPkt[106] = 0;
  402d4c:	4b49      	ldr	r3, [pc, #292]	; (402e74 <SendDispData+0x874>)
  402d4e:	2200      	movs	r2, #0
  402d50:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		/* Checksum */
		dispPkt[107] = CalcChkSum(&dispPkt[102],5);
  402d54:	2105      	movs	r1, #5
  402d56:	4851      	ldr	r0, [pc, #324]	; (402e9c <SendDispData+0x89c>)
  402d58:	4b48      	ldr	r3, [pc, #288]	; (402e7c <SendDispData+0x87c>)
  402d5a:	4798      	blx	r3
  402d5c:	4603      	mov	r3, r0
  402d5e:	461a      	mov	r2, r3
  402d60:	4b44      	ldr	r3, [pc, #272]	; (402e74 <SendDispData+0x874>)
  402d62:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

		/* Frame 19 */
		dispPkt[108] = '$';
  402d66:	4b43      	ldr	r3, [pc, #268]	; (402e74 <SendDispData+0x874>)
  402d68:	2224      	movs	r2, #36	; 0x24
  402d6a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		/* Blank */
		dispPkt[109] = '0';
  402d6e:	4b41      	ldr	r3, [pc, #260]	; (402e74 <SendDispData+0x874>)
  402d70:	2230      	movs	r2, #48	; 0x30
  402d72:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		/* Sensor 1 Pleath Data */
		dispPkt[110] = CBuffReadByte(&sen1Data.pleathBuff);
  402d76:	4842      	ldr	r0, [pc, #264]	; (402e80 <SendDispData+0x880>)
  402d78:	4b42      	ldr	r3, [pc, #264]	; (402e84 <SendDispData+0x884>)
  402d7a:	4798      	blx	r3
  402d7c:	4603      	mov	r3, r0
  402d7e:	461a      	mov	r2, r3
  402d80:	4b3c      	ldr	r3, [pc, #240]	; (402e74 <SendDispData+0x874>)
  402d82:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		/* Trigger Data */
		dispPkt[111] = CBuffReadByte(&trigBuff);
  402d86:	4840      	ldr	r0, [pc, #256]	; (402e88 <SendDispData+0x888>)
  402d88:	4b3e      	ldr	r3, [pc, #248]	; (402e84 <SendDispData+0x884>)
  402d8a:	4798      	blx	r3
  402d8c:	4603      	mov	r3, r0
  402d8e:	461a      	mov	r2, r3
  402d90:	4b38      	ldr	r3, [pc, #224]	; (402e74 <SendDispData+0x874>)
  402d92:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
		/* Sensor 2 Pleath Data */
		if(readS2)
  402d96:	79fb      	ldrb	r3, [r7, #7]
  402d98:	2b00      	cmp	r3, #0
  402d9a:	d008      	beq.n	402dae <SendDispData+0x7ae>
			dispPkt[112] = CBuffReadByte(&sen2Data.pleathBuff);
  402d9c:	483b      	ldr	r0, [pc, #236]	; (402e8c <SendDispData+0x88c>)
  402d9e:	4b39      	ldr	r3, [pc, #228]	; (402e84 <SendDispData+0x884>)
  402da0:	4798      	blx	r3
  402da2:	4603      	mov	r3, r0
  402da4:	461a      	mov	r2, r3
  402da6:	4b33      	ldr	r3, [pc, #204]	; (402e74 <SendDispData+0x874>)
  402da8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  402dac:	e003      	b.n	402db6 <SendDispData+0x7b6>
		else
			dispPkt[112] = 0;
  402dae:	4b31      	ldr	r3, [pc, #196]	; (402e74 <SendDispData+0x874>)
  402db0:	2200      	movs	r2, #0
  402db2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		/* Checksum */
		dispPkt[113] = CalcChkSum(&dispPkt[108],5);
  402db6:	2105      	movs	r1, #5
  402db8:	4839      	ldr	r0, [pc, #228]	; (402ea0 <SendDispData+0x8a0>)
  402dba:	4b30      	ldr	r3, [pc, #192]	; (402e7c <SendDispData+0x87c>)
  402dbc:	4798      	blx	r3
  402dbe:	4603      	mov	r3, r0
  402dc0:	461a      	mov	r2, r3
  402dc2:	4b2c      	ldr	r3, [pc, #176]	; (402e74 <SendDispData+0x874>)
  402dc4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

		/* Frame 20 */
		dispPkt[114] = '$';
  402dc8:	4b2a      	ldr	r3, [pc, #168]	; (402e74 <SendDispData+0x874>)
  402dca:	2224      	movs	r2, #36	; 0x24
  402dcc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		/* Blank */
		dispPkt[115] = '0';
  402dd0:	4b28      	ldr	r3, [pc, #160]	; (402e74 <SendDispData+0x874>)
  402dd2:	2230      	movs	r2, #48	; 0x30
  402dd4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		/* Sensor 1 Pleath Data */
		dispPkt[116] = CBuffReadByte(&sen1Data.pleathBuff);
  402dd8:	4829      	ldr	r0, [pc, #164]	; (402e80 <SendDispData+0x880>)
  402dda:	4b2a      	ldr	r3, [pc, #168]	; (402e84 <SendDispData+0x884>)
  402ddc:	4798      	blx	r3
  402dde:	4603      	mov	r3, r0
  402de0:	461a      	mov	r2, r3
  402de2:	4b24      	ldr	r3, [pc, #144]	; (402e74 <SendDispData+0x874>)
  402de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		/* Trigger Data */
		dispPkt[117] = CBuffReadByte(&trigBuff);
  402de8:	4827      	ldr	r0, [pc, #156]	; (402e88 <SendDispData+0x888>)
  402dea:	4b26      	ldr	r3, [pc, #152]	; (402e84 <SendDispData+0x884>)
  402dec:	4798      	blx	r3
  402dee:	4603      	mov	r3, r0
  402df0:	461a      	mov	r2, r3
  402df2:	4b20      	ldr	r3, [pc, #128]	; (402e74 <SendDispData+0x874>)
  402df4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		/* Sensor 2 Pleath Data */
		if(readS2)
  402df8:	79fb      	ldrb	r3, [r7, #7]
  402dfa:	2b00      	cmp	r3, #0
  402dfc:	d008      	beq.n	402e10 <SendDispData+0x810>
			dispPkt[118] = CBuffReadByte(&sen2Data.pleathBuff);
  402dfe:	4823      	ldr	r0, [pc, #140]	; (402e8c <SendDispData+0x88c>)
  402e00:	4b20      	ldr	r3, [pc, #128]	; (402e84 <SendDispData+0x884>)
  402e02:	4798      	blx	r3
  402e04:	4603      	mov	r3, r0
  402e06:	461a      	mov	r2, r3
  402e08:	4b1a      	ldr	r3, [pc, #104]	; (402e74 <SendDispData+0x874>)
  402e0a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  402e0e:	e003      	b.n	402e18 <SendDispData+0x818>
		else
			dispPkt[118] = 0;
  402e10:	4b18      	ldr	r3, [pc, #96]	; (402e74 <SendDispData+0x874>)
  402e12:	2200      	movs	r2, #0
  402e14:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		/* Checksum */
		dispPkt[119] = CalcChkSum(&dispPkt[114],5);
  402e18:	2105      	movs	r1, #5
  402e1a:	4822      	ldr	r0, [pc, #136]	; (402ea4 <SendDispData+0x8a4>)
  402e1c:	4b17      	ldr	r3, [pc, #92]	; (402e7c <SendDispData+0x87c>)
  402e1e:	4798      	blx	r3
  402e20:	4603      	mov	r3, r0
  402e22:	461a      	mov	r2, r3
  402e24:	4b13      	ldr	r3, [pc, #76]	; (402e74 <SendDispData+0x874>)
  402e26:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77

		/* Frame 21 */
		dispPkt[120] = '$';
  402e2a:	4b12      	ldr	r3, [pc, #72]	; (402e74 <SendDispData+0x874>)
  402e2c:	2224      	movs	r2, #36	; 0x24
  402e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		/* Blank */
		dispPkt[121] = '0';
  402e32:	4b10      	ldr	r3, [pc, #64]	; (402e74 <SendDispData+0x874>)
  402e34:	2230      	movs	r2, #48	; 0x30
  402e36:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		/* Sensor 1 Pleath Data */
		dispPkt[122] = CBuffReadByte(&sen1Data.pleathBuff);
  402e3a:	4811      	ldr	r0, [pc, #68]	; (402e80 <SendDispData+0x880>)
  402e3c:	4b11      	ldr	r3, [pc, #68]	; (402e84 <SendDispData+0x884>)
  402e3e:	4798      	blx	r3
  402e40:	4603      	mov	r3, r0
  402e42:	461a      	mov	r2, r3
  402e44:	4b0b      	ldr	r3, [pc, #44]	; (402e74 <SendDispData+0x874>)
  402e46:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		/* Trigger Data */
		dispPkt[123] = CBuffReadByte(&trigBuff);
  402e4a:	480f      	ldr	r0, [pc, #60]	; (402e88 <SendDispData+0x888>)
  402e4c:	4b0d      	ldr	r3, [pc, #52]	; (402e84 <SendDispData+0x884>)
  402e4e:	4798      	blx	r3
  402e50:	4603      	mov	r3, r0
  402e52:	461a      	mov	r2, r3
  402e54:	4b07      	ldr	r3, [pc, #28]	; (402e74 <SendDispData+0x874>)
  402e56:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		/* Sensor 2 Pleath Data */
		if(readS2)
  402e5a:	79fb      	ldrb	r3, [r7, #7]
  402e5c:	2b00      	cmp	r3, #0
  402e5e:	d023      	beq.n	402ea8 <SendDispData+0x8a8>
			dispPkt[124] = CBuffReadByte(&sen2Data.pleathBuff);
  402e60:	480a      	ldr	r0, [pc, #40]	; (402e8c <SendDispData+0x88c>)
  402e62:	4b08      	ldr	r3, [pc, #32]	; (402e84 <SendDispData+0x884>)
  402e64:	4798      	blx	r3
  402e66:	4603      	mov	r3, r0
  402e68:	461a      	mov	r2, r3
  402e6a:	4b02      	ldr	r3, [pc, #8]	; (402e74 <SendDispData+0x874>)
  402e6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  402e70:	e01e      	b.n	402eb0 <SendDispData+0x8b0>
  402e72:	bf00      	nop
  402e74:	20000bac 	.word	0x20000bac
  402e78:	20000bfa 	.word	0x20000bfa
  402e7c:	004030a9 	.word	0x004030a9
  402e80:	20000b43 	.word	0x20000b43
  402e84:	0040018d 	.word	0x0040018d
  402e88:	20000c44 	.word	0x20000c44
  402e8c:	20000ad7 	.word	0x20000ad7
  402e90:	20000c00 	.word	0x20000c00
  402e94:	20000c06 	.word	0x20000c06
  402e98:	20000c0c 	.word	0x20000c0c
  402e9c:	20000c12 	.word	0x20000c12
  402ea0:	20000c18 	.word	0x20000c18
  402ea4:	20000c1e 	.word	0x20000c1e
		else
			dispPkt[124] = 0;
  402ea8:	4b71      	ldr	r3, [pc, #452]	; (403070 <SendDispData+0xa70>)
  402eaa:	2200      	movs	r2, #0
  402eac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		/* Checksum */
		dispPkt[125] = CalcChkSum(&dispPkt[120],5);
  402eb0:	2105      	movs	r1, #5
  402eb2:	4870      	ldr	r0, [pc, #448]	; (403074 <SendDispData+0xa74>)
  402eb4:	4b70      	ldr	r3, [pc, #448]	; (403078 <SendDispData+0xa78>)
  402eb6:	4798      	blx	r3
  402eb8:	4603      	mov	r3, r0
  402eba:	461a      	mov	r2, r3
  402ebc:	4b6c      	ldr	r3, [pc, #432]	; (403070 <SendDispData+0xa70>)
  402ebe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

		/* Frame 22 */
		dispPkt[126] = '$';
  402ec2:	4b6b      	ldr	r3, [pc, #428]	; (403070 <SendDispData+0xa70>)
  402ec4:	2224      	movs	r2, #36	; 0x24
  402ec6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		/* Blank */
		dispPkt[127] = '0';
  402eca:	4b69      	ldr	r3, [pc, #420]	; (403070 <SendDispData+0xa70>)
  402ecc:	2230      	movs	r2, #48	; 0x30
  402ece:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		/* Sensor 1 Pleath Data */
		dispPkt[128] = CBuffReadByte(&sen1Data.pleathBuff);
  402ed2:	486a      	ldr	r0, [pc, #424]	; (40307c <SendDispData+0xa7c>)
  402ed4:	4b6a      	ldr	r3, [pc, #424]	; (403080 <SendDispData+0xa80>)
  402ed6:	4798      	blx	r3
  402ed8:	4603      	mov	r3, r0
  402eda:	461a      	mov	r2, r3
  402edc:	4b64      	ldr	r3, [pc, #400]	; (403070 <SendDispData+0xa70>)
  402ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		/* Trigger Data */
		dispPkt[129] = CBuffReadByte(&trigBuff);
  402ee2:	4868      	ldr	r0, [pc, #416]	; (403084 <SendDispData+0xa84>)
  402ee4:	4b66      	ldr	r3, [pc, #408]	; (403080 <SendDispData+0xa80>)
  402ee6:	4798      	blx	r3
  402ee8:	4603      	mov	r3, r0
  402eea:	461a      	mov	r2, r3
  402eec:	4b60      	ldr	r3, [pc, #384]	; (403070 <SendDispData+0xa70>)
  402eee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		/* Sensor 2 Pleath Data */
		if(readS2)
  402ef2:	79fb      	ldrb	r3, [r7, #7]
  402ef4:	2b00      	cmp	r3, #0
  402ef6:	d008      	beq.n	402f0a <SendDispData+0x90a>
			dispPkt[130] = CBuffReadByte(&sen2Data.pleathBuff);
  402ef8:	4863      	ldr	r0, [pc, #396]	; (403088 <SendDispData+0xa88>)
  402efa:	4b61      	ldr	r3, [pc, #388]	; (403080 <SendDispData+0xa80>)
  402efc:	4798      	blx	r3
  402efe:	4603      	mov	r3, r0
  402f00:	461a      	mov	r2, r3
  402f02:	4b5b      	ldr	r3, [pc, #364]	; (403070 <SendDispData+0xa70>)
  402f04:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  402f08:	e003      	b.n	402f12 <SendDispData+0x912>
		else
			dispPkt[130] = 0;
  402f0a:	4b59      	ldr	r3, [pc, #356]	; (403070 <SendDispData+0xa70>)
  402f0c:	2200      	movs	r2, #0
  402f0e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		/* Checksum */
		dispPkt[131] = CalcChkSum(&dispPkt[126],5);
  402f12:	2105      	movs	r1, #5
  402f14:	485d      	ldr	r0, [pc, #372]	; (40308c <SendDispData+0xa8c>)
  402f16:	4b58      	ldr	r3, [pc, #352]	; (403078 <SendDispData+0xa78>)
  402f18:	4798      	blx	r3
  402f1a:	4603      	mov	r3, r0
  402f1c:	461a      	mov	r2, r3
  402f1e:	4b54      	ldr	r3, [pc, #336]	; (403070 <SendDispData+0xa70>)
  402f20:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

		/* Frame 23 */
		dispPkt[132] = '$';
  402f24:	4b52      	ldr	r3, [pc, #328]	; (403070 <SendDispData+0xa70>)
  402f26:	2224      	movs	r2, #36	; 0x24
  402f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		/* Blank */
		dispPkt[133] = '0';
  402f2c:	4b50      	ldr	r3, [pc, #320]	; (403070 <SendDispData+0xa70>)
  402f2e:	2230      	movs	r2, #48	; 0x30
  402f30:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		/* Sensor 1 Pleath Data */
		dispPkt[134] = CBuffReadByte(&sen1Data.pleathBuff);
  402f34:	4851      	ldr	r0, [pc, #324]	; (40307c <SendDispData+0xa7c>)
  402f36:	4b52      	ldr	r3, [pc, #328]	; (403080 <SendDispData+0xa80>)
  402f38:	4798      	blx	r3
  402f3a:	4603      	mov	r3, r0
  402f3c:	461a      	mov	r2, r3
  402f3e:	4b4c      	ldr	r3, [pc, #304]	; (403070 <SendDispData+0xa70>)
  402f40:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		/* Trigger Data */
		dispPkt[135] = CBuffReadByte(&trigBuff);
  402f44:	484f      	ldr	r0, [pc, #316]	; (403084 <SendDispData+0xa84>)
  402f46:	4b4e      	ldr	r3, [pc, #312]	; (403080 <SendDispData+0xa80>)
  402f48:	4798      	blx	r3
  402f4a:	4603      	mov	r3, r0
  402f4c:	461a      	mov	r2, r3
  402f4e:	4b48      	ldr	r3, [pc, #288]	; (403070 <SendDispData+0xa70>)
  402f50:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		/* Sensor 2 Pleath Data */
		if(readS2)
  402f54:	79fb      	ldrb	r3, [r7, #7]
  402f56:	2b00      	cmp	r3, #0
  402f58:	d008      	beq.n	402f6c <SendDispData+0x96c>
			dispPkt[136] = CBuffReadByte(&sen2Data.pleathBuff);
  402f5a:	484b      	ldr	r0, [pc, #300]	; (403088 <SendDispData+0xa88>)
  402f5c:	4b48      	ldr	r3, [pc, #288]	; (403080 <SendDispData+0xa80>)
  402f5e:	4798      	blx	r3
  402f60:	4603      	mov	r3, r0
  402f62:	461a      	mov	r2, r3
  402f64:	4b42      	ldr	r3, [pc, #264]	; (403070 <SendDispData+0xa70>)
  402f66:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  402f6a:	e003      	b.n	402f74 <SendDispData+0x974>
		else
			dispPkt[136] = 0;
  402f6c:	4b40      	ldr	r3, [pc, #256]	; (403070 <SendDispData+0xa70>)
  402f6e:	2200      	movs	r2, #0
  402f70:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		/* Checksum */
		dispPkt[137] = CalcChkSum(&dispPkt[132],5);
  402f74:	2105      	movs	r1, #5
  402f76:	4846      	ldr	r0, [pc, #280]	; (403090 <SendDispData+0xa90>)
  402f78:	4b3f      	ldr	r3, [pc, #252]	; (403078 <SendDispData+0xa78>)
  402f7a:	4798      	blx	r3
  402f7c:	4603      	mov	r3, r0
  402f7e:	461a      	mov	r2, r3
  402f80:	4b3b      	ldr	r3, [pc, #236]	; (403070 <SendDispData+0xa70>)
  402f82:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		
		/* Frame 24 */
		dispPkt[138] = '$';
  402f86:	4b3a      	ldr	r3, [pc, #232]	; (403070 <SendDispData+0xa70>)
  402f88:	2224      	movs	r2, #36	; 0x24
  402f8a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		/* Blank */
		dispPkt[139] = '0';
  402f8e:	4b38      	ldr	r3, [pc, #224]	; (403070 <SendDispData+0xa70>)
  402f90:	2230      	movs	r2, #48	; 0x30
  402f92:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
		/* Sensor 1 Pleath Data */
		dispPkt[140] = CBuffReadByte(&sen1Data.pleathBuff);
  402f96:	4839      	ldr	r0, [pc, #228]	; (40307c <SendDispData+0xa7c>)
  402f98:	4b39      	ldr	r3, [pc, #228]	; (403080 <SendDispData+0xa80>)
  402f9a:	4798      	blx	r3
  402f9c:	4603      	mov	r3, r0
  402f9e:	461a      	mov	r2, r3
  402fa0:	4b33      	ldr	r3, [pc, #204]	; (403070 <SendDispData+0xa70>)
  402fa2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		/* Trigger Data */
		dispPkt[141] = CBuffReadByte(&trigBuff);
  402fa6:	4837      	ldr	r0, [pc, #220]	; (403084 <SendDispData+0xa84>)
  402fa8:	4b35      	ldr	r3, [pc, #212]	; (403080 <SendDispData+0xa80>)
  402faa:	4798      	blx	r3
  402fac:	4603      	mov	r3, r0
  402fae:	461a      	mov	r2, r3
  402fb0:	4b2f      	ldr	r3, [pc, #188]	; (403070 <SendDispData+0xa70>)
  402fb2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		/* Sensor 2 Pleath Data */
		if(readS2)
  402fb6:	79fb      	ldrb	r3, [r7, #7]
  402fb8:	2b00      	cmp	r3, #0
  402fba:	d008      	beq.n	402fce <SendDispData+0x9ce>
			dispPkt[142] = CBuffReadByte(&sen2Data.pleathBuff);
  402fbc:	4832      	ldr	r0, [pc, #200]	; (403088 <SendDispData+0xa88>)
  402fbe:	4b30      	ldr	r3, [pc, #192]	; (403080 <SendDispData+0xa80>)
  402fc0:	4798      	blx	r3
  402fc2:	4603      	mov	r3, r0
  402fc4:	461a      	mov	r2, r3
  402fc6:	4b2a      	ldr	r3, [pc, #168]	; (403070 <SendDispData+0xa70>)
  402fc8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  402fcc:	e003      	b.n	402fd6 <SendDispData+0x9d6>
		else
			dispPkt[142] = 0;
  402fce:	4b28      	ldr	r3, [pc, #160]	; (403070 <SendDispData+0xa70>)
  402fd0:	2200      	movs	r2, #0
  402fd2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		/* Checksum */
		dispPkt[143] = CalcChkSum(&dispPkt[138],5);
  402fd6:	2105      	movs	r1, #5
  402fd8:	482e      	ldr	r0, [pc, #184]	; (403094 <SendDispData+0xa94>)
  402fda:	4b27      	ldr	r3, [pc, #156]	; (403078 <SendDispData+0xa78>)
  402fdc:	4798      	blx	r3
  402fde:	4603      	mov	r3, r0
  402fe0:	461a      	mov	r2, r3
  402fe2:	4b23      	ldr	r3, [pc, #140]	; (403070 <SendDispData+0xa70>)
  402fe4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f

		/* Frame 25 */
		dispPkt[144] = '$';
  402fe8:	4b21      	ldr	r3, [pc, #132]	; (403070 <SendDispData+0xa70>)
  402fea:	2224      	movs	r2, #36	; 0x24
  402fec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		/* Blank */
		dispPkt[145] = '0';
  402ff0:	4b1f      	ldr	r3, [pc, #124]	; (403070 <SendDispData+0xa70>)
  402ff2:	2230      	movs	r2, #48	; 0x30
  402ff4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		/* Sensor 1 Pleath Data */
		dispPkt[146] = CBuffReadByte(&sen1Data.pleathBuff);
  402ff8:	4820      	ldr	r0, [pc, #128]	; (40307c <SendDispData+0xa7c>)
  402ffa:	4b21      	ldr	r3, [pc, #132]	; (403080 <SendDispData+0xa80>)
  402ffc:	4798      	blx	r3
  402ffe:	4603      	mov	r3, r0
  403000:	461a      	mov	r2, r3
  403002:	4b1b      	ldr	r3, [pc, #108]	; (403070 <SendDispData+0xa70>)
  403004:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
		/* Trigger Data */
		dispPkt[147] = CBuffReadByte(&trigBuff);
  403008:	481e      	ldr	r0, [pc, #120]	; (403084 <SendDispData+0xa84>)
  40300a:	4b1d      	ldr	r3, [pc, #116]	; (403080 <SendDispData+0xa80>)
  40300c:	4798      	blx	r3
  40300e:	4603      	mov	r3, r0
  403010:	461a      	mov	r2, r3
  403012:	4b17      	ldr	r3, [pc, #92]	; (403070 <SendDispData+0xa70>)
  403014:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		/* Sensor 2 Pleath Data */
		if(readS2)
  403018:	79fb      	ldrb	r3, [r7, #7]
  40301a:	2b00      	cmp	r3, #0
  40301c:	d008      	beq.n	403030 <SendDispData+0xa30>
			dispPkt[148] = CBuffReadByte(&sen2Data.pleathBuff);
  40301e:	481a      	ldr	r0, [pc, #104]	; (403088 <SendDispData+0xa88>)
  403020:	4b17      	ldr	r3, [pc, #92]	; (403080 <SendDispData+0xa80>)
  403022:	4798      	blx	r3
  403024:	4603      	mov	r3, r0
  403026:	461a      	mov	r2, r3
  403028:	4b11      	ldr	r3, [pc, #68]	; (403070 <SendDispData+0xa70>)
  40302a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  40302e:	e003      	b.n	403038 <SendDispData+0xa38>
		else
			dispPkt[148] = 0;
  403030:	4b0f      	ldr	r3, [pc, #60]	; (403070 <SendDispData+0xa70>)
  403032:	2200      	movs	r2, #0
  403034:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		/* Checksum */
		dispPkt[149] = CalcChkSum(&dispPkt[144],5);
  403038:	2105      	movs	r1, #5
  40303a:	4817      	ldr	r0, [pc, #92]	; (403098 <SendDispData+0xa98>)
  40303c:	4b0e      	ldr	r3, [pc, #56]	; (403078 <SendDispData+0xa78>)
  40303e:	4798      	blx	r3
  403040:	4603      	mov	r3, r0
  403042:	461a      	mov	r2, r3
  403044:	4b0a      	ldr	r3, [pc, #40]	; (403070 <SendDispData+0xa70>)
  403046:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		
		/* Initiate PDC Transfer for 150 bytes */
		dispPdcPkt.ul_addr = (uint32_t) dispPkt;
  40304a:	4a09      	ldr	r2, [pc, #36]	; (403070 <SendDispData+0xa70>)
  40304c:	4b13      	ldr	r3, [pc, #76]	; (40309c <SendDispData+0xa9c>)
  40304e:	601a      	str	r2, [r3, #0]
		dispPdcPkt.ul_size = 150;
  403050:	4b12      	ldr	r3, [pc, #72]	; (40309c <SendDispData+0xa9c>)
  403052:	2296      	movs	r2, #150	; 0x96
  403054:	605a      	str	r2, [r3, #4]
		pdc_tx_init(dispUartPdcBase, &dispPdcPkt, NULL);
  403056:	4b12      	ldr	r3, [pc, #72]	; (4030a0 <SendDispData+0xaa0>)
  403058:	681b      	ldr	r3, [r3, #0]
  40305a:	2200      	movs	r2, #0
  40305c:	490f      	ldr	r1, [pc, #60]	; (40309c <SendDispData+0xa9c>)
  40305e:	4618      	mov	r0, r3
  403060:	4b10      	ldr	r3, [pc, #64]	; (4030a4 <SendDispData+0xaa4>)
  403062:	4798      	blx	r3
  403064:	e000      	b.n	403068 <SendDispData+0xa68>
	uint8_t readS2 = 0;

	/* If previous transfer not complete, return */
	if (!(uart_get_status(DISP_UART) & UART_SR_ENDTX)) 
	{
		return;
  403066:	bf00      	nop
		/* Initiate PDC Transfer for 150 bytes */
		dispPdcPkt.ul_addr = (uint32_t) dispPkt;
		dispPdcPkt.ul_size = 150;
		pdc_tx_init(dispUartPdcBase, &dispPdcPkt, NULL);
	}
}
  403068:	3708      	adds	r7, #8
  40306a:	46bd      	mov	sp, r7
  40306c:	bd80      	pop	{r7, pc}
  40306e:	bf00      	nop
  403070:	20000bac 	.word	0x20000bac
  403074:	20000c24 	.word	0x20000c24
  403078:	004030a9 	.word	0x004030a9
  40307c:	20000b43 	.word	0x20000b43
  403080:	0040018d 	.word	0x0040018d
  403084:	20000c44 	.word	0x20000c44
  403088:	20000ad7 	.word	0x20000ad7
  40308c:	20000c2a 	.word	0x20000c2a
  403090:	20000c30 	.word	0x20000c30
  403094:	20000c36 	.word	0x20000c36
  403098:	20000c3c 	.word	0x20000c3c
  40309c:	20000cac 	.word	0x20000cac
  4030a0:	20000cbc 	.word	0x20000cbc
  4030a4:	00400f25 	.word	0x00400f25

004030a8 <CalcChkSum>:

uint8_t CalcChkSum (uint8_t * buff, uint8_t len)
{
  4030a8:	b480      	push	{r7}
  4030aa:	b085      	sub	sp, #20
  4030ac:	af00      	add	r7, sp, #0
  4030ae:	6078      	str	r0, [r7, #4]
  4030b0:	460b      	mov	r3, r1
  4030b2:	70fb      	strb	r3, [r7, #3]
	uint8_t sum = buff[0], i;
  4030b4:	687b      	ldr	r3, [r7, #4]
  4030b6:	781b      	ldrb	r3, [r3, #0]
  4030b8:	73fb      	strb	r3, [r7, #15]
	for (i = 1; i < len; i++)
  4030ba:	2301      	movs	r3, #1
  4030bc:	73bb      	strb	r3, [r7, #14]
  4030be:	e009      	b.n	4030d4 <CalcChkSum+0x2c>
	{
		sum += buff[i];
  4030c0:	7bbb      	ldrb	r3, [r7, #14]
  4030c2:	687a      	ldr	r2, [r7, #4]
  4030c4:	4413      	add	r3, r2
  4030c6:	781a      	ldrb	r2, [r3, #0]
  4030c8:	7bfb      	ldrb	r3, [r7, #15]
  4030ca:	4413      	add	r3, r2
  4030cc:	73fb      	strb	r3, [r7, #15]
}

uint8_t CalcChkSum (uint8_t * buff, uint8_t len)
{
	uint8_t sum = buff[0], i;
	for (i = 1; i < len; i++)
  4030ce:	7bbb      	ldrb	r3, [r7, #14]
  4030d0:	3301      	adds	r3, #1
  4030d2:	73bb      	strb	r3, [r7, #14]
  4030d4:	7bba      	ldrb	r2, [r7, #14]
  4030d6:	78fb      	ldrb	r3, [r7, #3]
  4030d8:	429a      	cmp	r2, r3
  4030da:	d3f1      	bcc.n	4030c0 <CalcChkSum+0x18>
	{
		sum += buff[i];
	}
	return sum;	
  4030dc:	7bfb      	ldrb	r3, [r7, #15]
  4030de:	4618      	mov	r0, r3
  4030e0:	3714      	adds	r7, #20
  4030e2:	46bd      	mov	sp, r7
  4030e4:	bc80      	pop	{r7}
  4030e6:	4770      	bx	lr

004030e8 <__libc_init_array>:
  4030e8:	b570      	push	{r4, r5, r6, lr}
  4030ea:	4e0f      	ldr	r6, [pc, #60]	; (403128 <__libc_init_array+0x40>)
  4030ec:	4d0f      	ldr	r5, [pc, #60]	; (40312c <__libc_init_array+0x44>)
  4030ee:	1b76      	subs	r6, r6, r5
  4030f0:	10b6      	asrs	r6, r6, #2
  4030f2:	bf18      	it	ne
  4030f4:	2400      	movne	r4, #0
  4030f6:	d005      	beq.n	403104 <__libc_init_array+0x1c>
  4030f8:	3401      	adds	r4, #1
  4030fa:	f855 3b04 	ldr.w	r3, [r5], #4
  4030fe:	4798      	blx	r3
  403100:	42a6      	cmp	r6, r4
  403102:	d1f9      	bne.n	4030f8 <__libc_init_array+0x10>
  403104:	4e0a      	ldr	r6, [pc, #40]	; (403130 <__libc_init_array+0x48>)
  403106:	4d0b      	ldr	r5, [pc, #44]	; (403134 <__libc_init_array+0x4c>)
  403108:	1b76      	subs	r6, r6, r5
  40310a:	f001 f82f 	bl	40416c <_init>
  40310e:	10b6      	asrs	r6, r6, #2
  403110:	bf18      	it	ne
  403112:	2400      	movne	r4, #0
  403114:	d006      	beq.n	403124 <__libc_init_array+0x3c>
  403116:	3401      	adds	r4, #1
  403118:	f855 3b04 	ldr.w	r3, [r5], #4
  40311c:	4798      	blx	r3
  40311e:	42a6      	cmp	r6, r4
  403120:	d1f9      	bne.n	403116 <__libc_init_array+0x2e>
  403122:	bd70      	pop	{r4, r5, r6, pc}
  403124:	bd70      	pop	{r4, r5, r6, pc}
  403126:	bf00      	nop
  403128:	00404178 	.word	0x00404178
  40312c:	00404178 	.word	0x00404178
  403130:	00404180 	.word	0x00404180
  403134:	00404178 	.word	0x00404178

00403138 <memset>:
  403138:	b470      	push	{r4, r5, r6}
  40313a:	0784      	lsls	r4, r0, #30
  40313c:	d046      	beq.n	4031cc <memset+0x94>
  40313e:	1e54      	subs	r4, r2, #1
  403140:	2a00      	cmp	r2, #0
  403142:	d041      	beq.n	4031c8 <memset+0x90>
  403144:	b2cd      	uxtb	r5, r1
  403146:	4603      	mov	r3, r0
  403148:	e002      	b.n	403150 <memset+0x18>
  40314a:	1e62      	subs	r2, r4, #1
  40314c:	b3e4      	cbz	r4, 4031c8 <memset+0x90>
  40314e:	4614      	mov	r4, r2
  403150:	f803 5b01 	strb.w	r5, [r3], #1
  403154:	079a      	lsls	r2, r3, #30
  403156:	d1f8      	bne.n	40314a <memset+0x12>
  403158:	2c03      	cmp	r4, #3
  40315a:	d92e      	bls.n	4031ba <memset+0x82>
  40315c:	b2cd      	uxtb	r5, r1
  40315e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403162:	2c0f      	cmp	r4, #15
  403164:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403168:	d919      	bls.n	40319e <memset+0x66>
  40316a:	f103 0210 	add.w	r2, r3, #16
  40316e:	4626      	mov	r6, r4
  403170:	3e10      	subs	r6, #16
  403172:	2e0f      	cmp	r6, #15
  403174:	f842 5c10 	str.w	r5, [r2, #-16]
  403178:	f842 5c0c 	str.w	r5, [r2, #-12]
  40317c:	f842 5c08 	str.w	r5, [r2, #-8]
  403180:	f842 5c04 	str.w	r5, [r2, #-4]
  403184:	f102 0210 	add.w	r2, r2, #16
  403188:	d8f2      	bhi.n	403170 <memset+0x38>
  40318a:	f1a4 0210 	sub.w	r2, r4, #16
  40318e:	f022 020f 	bic.w	r2, r2, #15
  403192:	f004 040f 	and.w	r4, r4, #15
  403196:	3210      	adds	r2, #16
  403198:	2c03      	cmp	r4, #3
  40319a:	4413      	add	r3, r2
  40319c:	d90d      	bls.n	4031ba <memset+0x82>
  40319e:	461e      	mov	r6, r3
  4031a0:	4622      	mov	r2, r4
  4031a2:	3a04      	subs	r2, #4
  4031a4:	2a03      	cmp	r2, #3
  4031a6:	f846 5b04 	str.w	r5, [r6], #4
  4031aa:	d8fa      	bhi.n	4031a2 <memset+0x6a>
  4031ac:	1f22      	subs	r2, r4, #4
  4031ae:	f022 0203 	bic.w	r2, r2, #3
  4031b2:	3204      	adds	r2, #4
  4031b4:	4413      	add	r3, r2
  4031b6:	f004 0403 	and.w	r4, r4, #3
  4031ba:	b12c      	cbz	r4, 4031c8 <memset+0x90>
  4031bc:	b2c9      	uxtb	r1, r1
  4031be:	441c      	add	r4, r3
  4031c0:	f803 1b01 	strb.w	r1, [r3], #1
  4031c4:	42a3      	cmp	r3, r4
  4031c6:	d1fb      	bne.n	4031c0 <memset+0x88>
  4031c8:	bc70      	pop	{r4, r5, r6}
  4031ca:	4770      	bx	lr
  4031cc:	4614      	mov	r4, r2
  4031ce:	4603      	mov	r3, r0
  4031d0:	e7c2      	b.n	403158 <memset+0x20>
  4031d2:	bf00      	nop

004031d4 <setbuf>:
  4031d4:	2900      	cmp	r1, #0
  4031d6:	bf0c      	ite	eq
  4031d8:	2202      	moveq	r2, #2
  4031da:	2200      	movne	r2, #0
  4031dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4031e0:	f000 b800 	b.w	4031e4 <setvbuf>

004031e4 <setvbuf>:
  4031e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4031e8:	4c51      	ldr	r4, [pc, #324]	; (403330 <setvbuf+0x14c>)
  4031ea:	6825      	ldr	r5, [r4, #0]
  4031ec:	b083      	sub	sp, #12
  4031ee:	4604      	mov	r4, r0
  4031f0:	460f      	mov	r7, r1
  4031f2:	4690      	mov	r8, r2
  4031f4:	461e      	mov	r6, r3
  4031f6:	b115      	cbz	r5, 4031fe <setvbuf+0x1a>
  4031f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4031fa:	2b00      	cmp	r3, #0
  4031fc:	d079      	beq.n	4032f2 <setvbuf+0x10e>
  4031fe:	f1b8 0f02 	cmp.w	r8, #2
  403202:	d004      	beq.n	40320e <setvbuf+0x2a>
  403204:	f1b8 0f01 	cmp.w	r8, #1
  403208:	d87f      	bhi.n	40330a <setvbuf+0x126>
  40320a:	2e00      	cmp	r6, #0
  40320c:	db7d      	blt.n	40330a <setvbuf+0x126>
  40320e:	4621      	mov	r1, r4
  403210:	4628      	mov	r0, r5
  403212:	f000 f943 	bl	40349c <_fflush_r>
  403216:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403218:	b141      	cbz	r1, 40322c <setvbuf+0x48>
  40321a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40321e:	4299      	cmp	r1, r3
  403220:	d002      	beq.n	403228 <setvbuf+0x44>
  403222:	4628      	mov	r0, r5
  403224:	f000 fa3a 	bl	40369c <_free_r>
  403228:	2300      	movs	r3, #0
  40322a:	6323      	str	r3, [r4, #48]	; 0x30
  40322c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403230:	2200      	movs	r2, #0
  403232:	61a2      	str	r2, [r4, #24]
  403234:	6062      	str	r2, [r4, #4]
  403236:	061a      	lsls	r2, r3, #24
  403238:	d454      	bmi.n	4032e4 <setvbuf+0x100>
  40323a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40323e:	f023 0303 	bic.w	r3, r3, #3
  403242:	f1b8 0f02 	cmp.w	r8, #2
  403246:	81a3      	strh	r3, [r4, #12]
  403248:	d039      	beq.n	4032be <setvbuf+0xda>
  40324a:	ab01      	add	r3, sp, #4
  40324c:	466a      	mov	r2, sp
  40324e:	4621      	mov	r1, r4
  403250:	4628      	mov	r0, r5
  403252:	f000 fb35 	bl	4038c0 <__swhatbuf_r>
  403256:	89a3      	ldrh	r3, [r4, #12]
  403258:	4318      	orrs	r0, r3
  40325a:	81a0      	strh	r0, [r4, #12]
  40325c:	b326      	cbz	r6, 4032a8 <setvbuf+0xc4>
  40325e:	b327      	cbz	r7, 4032aa <setvbuf+0xc6>
  403260:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403262:	2b00      	cmp	r3, #0
  403264:	d04d      	beq.n	403302 <setvbuf+0x11e>
  403266:	9b00      	ldr	r3, [sp, #0]
  403268:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  40326c:	6027      	str	r7, [r4, #0]
  40326e:	429e      	cmp	r6, r3
  403270:	bf1c      	itt	ne
  403272:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  403276:	81a0      	strhne	r0, [r4, #12]
  403278:	f1b8 0f01 	cmp.w	r8, #1
  40327c:	bf08      	it	eq
  40327e:	f040 0001 	orreq.w	r0, r0, #1
  403282:	b283      	uxth	r3, r0
  403284:	bf08      	it	eq
  403286:	81a0      	strheq	r0, [r4, #12]
  403288:	f003 0008 	and.w	r0, r3, #8
  40328c:	b280      	uxth	r0, r0
  40328e:	6127      	str	r7, [r4, #16]
  403290:	6166      	str	r6, [r4, #20]
  403292:	b318      	cbz	r0, 4032dc <setvbuf+0xf8>
  403294:	f013 0001 	ands.w	r0, r3, #1
  403298:	d02f      	beq.n	4032fa <setvbuf+0x116>
  40329a:	2000      	movs	r0, #0
  40329c:	4276      	negs	r6, r6
  40329e:	61a6      	str	r6, [r4, #24]
  4032a0:	60a0      	str	r0, [r4, #8]
  4032a2:	b003      	add	sp, #12
  4032a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4032a8:	9e00      	ldr	r6, [sp, #0]
  4032aa:	4630      	mov	r0, r6
  4032ac:	f000 fb38 	bl	403920 <malloc>
  4032b0:	4607      	mov	r7, r0
  4032b2:	b368      	cbz	r0, 403310 <setvbuf+0x12c>
  4032b4:	89a3      	ldrh	r3, [r4, #12]
  4032b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4032ba:	81a3      	strh	r3, [r4, #12]
  4032bc:	e7d0      	b.n	403260 <setvbuf+0x7c>
  4032be:	2000      	movs	r0, #0
  4032c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4032c4:	f043 0302 	orr.w	r3, r3, #2
  4032c8:	2500      	movs	r5, #0
  4032ca:	2101      	movs	r1, #1
  4032cc:	81a3      	strh	r3, [r4, #12]
  4032ce:	60a5      	str	r5, [r4, #8]
  4032d0:	6022      	str	r2, [r4, #0]
  4032d2:	6122      	str	r2, [r4, #16]
  4032d4:	6161      	str	r1, [r4, #20]
  4032d6:	b003      	add	sp, #12
  4032d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4032dc:	60a0      	str	r0, [r4, #8]
  4032de:	b003      	add	sp, #12
  4032e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4032e4:	6921      	ldr	r1, [r4, #16]
  4032e6:	4628      	mov	r0, r5
  4032e8:	f000 f9d8 	bl	40369c <_free_r>
  4032ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032f0:	e7a3      	b.n	40323a <setvbuf+0x56>
  4032f2:	4628      	mov	r0, r5
  4032f4:	f000 f966 	bl	4035c4 <__sinit>
  4032f8:	e781      	b.n	4031fe <setvbuf+0x1a>
  4032fa:	60a6      	str	r6, [r4, #8]
  4032fc:	b003      	add	sp, #12
  4032fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403302:	4628      	mov	r0, r5
  403304:	f000 f95e 	bl	4035c4 <__sinit>
  403308:	e7ad      	b.n	403266 <setvbuf+0x82>
  40330a:	f04f 30ff 	mov.w	r0, #4294967295
  40330e:	e7e2      	b.n	4032d6 <setvbuf+0xf2>
  403310:	f8dd 9000 	ldr.w	r9, [sp]
  403314:	45b1      	cmp	r9, r6
  403316:	d006      	beq.n	403326 <setvbuf+0x142>
  403318:	4648      	mov	r0, r9
  40331a:	f000 fb01 	bl	403920 <malloc>
  40331e:	4607      	mov	r7, r0
  403320:	b108      	cbz	r0, 403326 <setvbuf+0x142>
  403322:	464e      	mov	r6, r9
  403324:	e7c6      	b.n	4032b4 <setvbuf+0xd0>
  403326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40332a:	f04f 30ff 	mov.w	r0, #4294967295
  40332e:	e7c7      	b.n	4032c0 <setvbuf+0xdc>
  403330:	20000430 	.word	0x20000430

00403334 <register_fini>:
  403334:	4b02      	ldr	r3, [pc, #8]	; (403340 <register_fini+0xc>)
  403336:	b113      	cbz	r3, 40333e <register_fini+0xa>
  403338:	4802      	ldr	r0, [pc, #8]	; (403344 <register_fini+0x10>)
  40333a:	f000 b805 	b.w	403348 <atexit>
  40333e:	4770      	bx	lr
  403340:	00000000 	.word	0x00000000
  403344:	004035d9 	.word	0x004035d9

00403348 <atexit>:
  403348:	2300      	movs	r3, #0
  40334a:	4601      	mov	r1, r0
  40334c:	461a      	mov	r2, r3
  40334e:	4618      	mov	r0, r3
  403350:	f000 be16 	b.w	403f80 <__register_exitproc>

00403354 <__sflush_r>:
  403354:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403358:	b29a      	uxth	r2, r3
  40335a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40335e:	460d      	mov	r5, r1
  403360:	0711      	lsls	r1, r2, #28
  403362:	4680      	mov	r8, r0
  403364:	d43c      	bmi.n	4033e0 <__sflush_r+0x8c>
  403366:	686a      	ldr	r2, [r5, #4]
  403368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40336c:	2a00      	cmp	r2, #0
  40336e:	81ab      	strh	r3, [r5, #12]
  403370:	dd73      	ble.n	40345a <__sflush_r+0x106>
  403372:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403374:	2c00      	cmp	r4, #0
  403376:	d04b      	beq.n	403410 <__sflush_r+0xbc>
  403378:	b29b      	uxth	r3, r3
  40337a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40337e:	2100      	movs	r1, #0
  403380:	b292      	uxth	r2, r2
  403382:	f8d8 6000 	ldr.w	r6, [r8]
  403386:	f8c8 1000 	str.w	r1, [r8]
  40338a:	2a00      	cmp	r2, #0
  40338c:	d069      	beq.n	403462 <__sflush_r+0x10e>
  40338e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403390:	075f      	lsls	r7, r3, #29
  403392:	d505      	bpl.n	4033a0 <__sflush_r+0x4c>
  403394:	6869      	ldr	r1, [r5, #4]
  403396:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403398:	1a52      	subs	r2, r2, r1
  40339a:	b10b      	cbz	r3, 4033a0 <__sflush_r+0x4c>
  40339c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40339e:	1ad2      	subs	r2, r2, r3
  4033a0:	2300      	movs	r3, #0
  4033a2:	69e9      	ldr	r1, [r5, #28]
  4033a4:	4640      	mov	r0, r8
  4033a6:	47a0      	blx	r4
  4033a8:	1c44      	adds	r4, r0, #1
  4033aa:	d03c      	beq.n	403426 <__sflush_r+0xd2>
  4033ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4033b0:	692a      	ldr	r2, [r5, #16]
  4033b2:	602a      	str	r2, [r5, #0]
  4033b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4033b8:	2200      	movs	r2, #0
  4033ba:	81ab      	strh	r3, [r5, #12]
  4033bc:	04db      	lsls	r3, r3, #19
  4033be:	606a      	str	r2, [r5, #4]
  4033c0:	d449      	bmi.n	403456 <__sflush_r+0x102>
  4033c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4033c4:	f8c8 6000 	str.w	r6, [r8]
  4033c8:	b311      	cbz	r1, 403410 <__sflush_r+0xbc>
  4033ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4033ce:	4299      	cmp	r1, r3
  4033d0:	d002      	beq.n	4033d8 <__sflush_r+0x84>
  4033d2:	4640      	mov	r0, r8
  4033d4:	f000 f962 	bl	40369c <_free_r>
  4033d8:	2000      	movs	r0, #0
  4033da:	6328      	str	r0, [r5, #48]	; 0x30
  4033dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4033e0:	692e      	ldr	r6, [r5, #16]
  4033e2:	b1ae      	cbz	r6, 403410 <__sflush_r+0xbc>
  4033e4:	682c      	ldr	r4, [r5, #0]
  4033e6:	602e      	str	r6, [r5, #0]
  4033e8:	0790      	lsls	r0, r2, #30
  4033ea:	bf0c      	ite	eq
  4033ec:	696b      	ldreq	r3, [r5, #20]
  4033ee:	2300      	movne	r3, #0
  4033f0:	1ba4      	subs	r4, r4, r6
  4033f2:	60ab      	str	r3, [r5, #8]
  4033f4:	e00a      	b.n	40340c <__sflush_r+0xb8>
  4033f6:	4623      	mov	r3, r4
  4033f8:	4632      	mov	r2, r6
  4033fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4033fc:	69e9      	ldr	r1, [r5, #28]
  4033fe:	4640      	mov	r0, r8
  403400:	47b8      	blx	r7
  403402:	2800      	cmp	r0, #0
  403404:	eba4 0400 	sub.w	r4, r4, r0
  403408:	4406      	add	r6, r0
  40340a:	dd04      	ble.n	403416 <__sflush_r+0xc2>
  40340c:	2c00      	cmp	r4, #0
  40340e:	dcf2      	bgt.n	4033f6 <__sflush_r+0xa2>
  403410:	2000      	movs	r0, #0
  403412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403416:	89ab      	ldrh	r3, [r5, #12]
  403418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40341c:	81ab      	strh	r3, [r5, #12]
  40341e:	f04f 30ff 	mov.w	r0, #4294967295
  403422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403426:	f8d8 2000 	ldr.w	r2, [r8]
  40342a:	2a1d      	cmp	r2, #29
  40342c:	d8f3      	bhi.n	403416 <__sflush_r+0xc2>
  40342e:	4b1a      	ldr	r3, [pc, #104]	; (403498 <__sflush_r+0x144>)
  403430:	40d3      	lsrs	r3, r2
  403432:	f003 0301 	and.w	r3, r3, #1
  403436:	f083 0401 	eor.w	r4, r3, #1
  40343a:	2b00      	cmp	r3, #0
  40343c:	d0eb      	beq.n	403416 <__sflush_r+0xc2>
  40343e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403442:	6929      	ldr	r1, [r5, #16]
  403444:	6029      	str	r1, [r5, #0]
  403446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40344a:	04d9      	lsls	r1, r3, #19
  40344c:	606c      	str	r4, [r5, #4]
  40344e:	81ab      	strh	r3, [r5, #12]
  403450:	d5b7      	bpl.n	4033c2 <__sflush_r+0x6e>
  403452:	2a00      	cmp	r2, #0
  403454:	d1b5      	bne.n	4033c2 <__sflush_r+0x6e>
  403456:	6528      	str	r0, [r5, #80]	; 0x50
  403458:	e7b3      	b.n	4033c2 <__sflush_r+0x6e>
  40345a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40345c:	2a00      	cmp	r2, #0
  40345e:	dc88      	bgt.n	403372 <__sflush_r+0x1e>
  403460:	e7d6      	b.n	403410 <__sflush_r+0xbc>
  403462:	2301      	movs	r3, #1
  403464:	69e9      	ldr	r1, [r5, #28]
  403466:	4640      	mov	r0, r8
  403468:	47a0      	blx	r4
  40346a:	1c43      	adds	r3, r0, #1
  40346c:	4602      	mov	r2, r0
  40346e:	d002      	beq.n	403476 <__sflush_r+0x122>
  403470:	89ab      	ldrh	r3, [r5, #12]
  403472:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403474:	e78c      	b.n	403390 <__sflush_r+0x3c>
  403476:	f8d8 3000 	ldr.w	r3, [r8]
  40347a:	2b00      	cmp	r3, #0
  40347c:	d0f8      	beq.n	403470 <__sflush_r+0x11c>
  40347e:	2b1d      	cmp	r3, #29
  403480:	d001      	beq.n	403486 <__sflush_r+0x132>
  403482:	2b16      	cmp	r3, #22
  403484:	d102      	bne.n	40348c <__sflush_r+0x138>
  403486:	f8c8 6000 	str.w	r6, [r8]
  40348a:	e7c1      	b.n	403410 <__sflush_r+0xbc>
  40348c:	89ab      	ldrh	r3, [r5, #12]
  40348e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403492:	81ab      	strh	r3, [r5, #12]
  403494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403498:	20400001 	.word	0x20400001

0040349c <_fflush_r>:
  40349c:	b510      	push	{r4, lr}
  40349e:	4604      	mov	r4, r0
  4034a0:	b082      	sub	sp, #8
  4034a2:	b108      	cbz	r0, 4034a8 <_fflush_r+0xc>
  4034a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4034a6:	b153      	cbz	r3, 4034be <_fflush_r+0x22>
  4034a8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4034ac:	b908      	cbnz	r0, 4034b2 <_fflush_r+0x16>
  4034ae:	b002      	add	sp, #8
  4034b0:	bd10      	pop	{r4, pc}
  4034b2:	4620      	mov	r0, r4
  4034b4:	b002      	add	sp, #8
  4034b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4034ba:	f7ff bf4b 	b.w	403354 <__sflush_r>
  4034be:	9101      	str	r1, [sp, #4]
  4034c0:	f000 f880 	bl	4035c4 <__sinit>
  4034c4:	9901      	ldr	r1, [sp, #4]
  4034c6:	e7ef      	b.n	4034a8 <_fflush_r+0xc>

004034c8 <_cleanup_r>:
  4034c8:	4901      	ldr	r1, [pc, #4]	; (4034d0 <_cleanup_r+0x8>)
  4034ca:	f000 b9cf 	b.w	40386c <_fwalk_reent>
  4034ce:	bf00      	nop
  4034d0:	00404049 	.word	0x00404049

004034d4 <__sinit.part.1>:
  4034d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034d8:	4b35      	ldr	r3, [pc, #212]	; (4035b0 <__sinit.part.1+0xdc>)
  4034da:	6845      	ldr	r5, [r0, #4]
  4034dc:	63c3      	str	r3, [r0, #60]	; 0x3c
  4034de:	2400      	movs	r4, #0
  4034e0:	4607      	mov	r7, r0
  4034e2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4034e6:	2304      	movs	r3, #4
  4034e8:	2103      	movs	r1, #3
  4034ea:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4034ee:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4034f2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4034f6:	b083      	sub	sp, #12
  4034f8:	602c      	str	r4, [r5, #0]
  4034fa:	606c      	str	r4, [r5, #4]
  4034fc:	60ac      	str	r4, [r5, #8]
  4034fe:	666c      	str	r4, [r5, #100]	; 0x64
  403500:	81ec      	strh	r4, [r5, #14]
  403502:	612c      	str	r4, [r5, #16]
  403504:	616c      	str	r4, [r5, #20]
  403506:	61ac      	str	r4, [r5, #24]
  403508:	81ab      	strh	r3, [r5, #12]
  40350a:	4621      	mov	r1, r4
  40350c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403510:	2208      	movs	r2, #8
  403512:	f7ff fe11 	bl	403138 <memset>
  403516:	68be      	ldr	r6, [r7, #8]
  403518:	f8df b098 	ldr.w	fp, [pc, #152]	; 4035b4 <__sinit.part.1+0xe0>
  40351c:	f8df a098 	ldr.w	sl, [pc, #152]	; 4035b8 <__sinit.part.1+0xe4>
  403520:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4035bc <__sinit.part.1+0xe8>
  403524:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4035c0 <__sinit.part.1+0xec>
  403528:	f8c5 b020 	str.w	fp, [r5, #32]
  40352c:	2301      	movs	r3, #1
  40352e:	2209      	movs	r2, #9
  403530:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403534:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403538:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40353c:	61ed      	str	r5, [r5, #28]
  40353e:	4621      	mov	r1, r4
  403540:	81f3      	strh	r3, [r6, #14]
  403542:	81b2      	strh	r2, [r6, #12]
  403544:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  403548:	6034      	str	r4, [r6, #0]
  40354a:	6074      	str	r4, [r6, #4]
  40354c:	60b4      	str	r4, [r6, #8]
  40354e:	6674      	str	r4, [r6, #100]	; 0x64
  403550:	6134      	str	r4, [r6, #16]
  403552:	6174      	str	r4, [r6, #20]
  403554:	61b4      	str	r4, [r6, #24]
  403556:	2208      	movs	r2, #8
  403558:	9301      	str	r3, [sp, #4]
  40355a:	f7ff fded 	bl	403138 <memset>
  40355e:	68fd      	ldr	r5, [r7, #12]
  403560:	61f6      	str	r6, [r6, #28]
  403562:	2012      	movs	r0, #18
  403564:	2202      	movs	r2, #2
  403566:	f8c6 b020 	str.w	fp, [r6, #32]
  40356a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40356e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  403572:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  403576:	4621      	mov	r1, r4
  403578:	81a8      	strh	r0, [r5, #12]
  40357a:	81ea      	strh	r2, [r5, #14]
  40357c:	602c      	str	r4, [r5, #0]
  40357e:	606c      	str	r4, [r5, #4]
  403580:	60ac      	str	r4, [r5, #8]
  403582:	666c      	str	r4, [r5, #100]	; 0x64
  403584:	612c      	str	r4, [r5, #16]
  403586:	616c      	str	r4, [r5, #20]
  403588:	61ac      	str	r4, [r5, #24]
  40358a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40358e:	2208      	movs	r2, #8
  403590:	f7ff fdd2 	bl	403138 <memset>
  403594:	9b01      	ldr	r3, [sp, #4]
  403596:	61ed      	str	r5, [r5, #28]
  403598:	f8c5 b020 	str.w	fp, [r5, #32]
  40359c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4035a0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4035a4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4035a8:	63bb      	str	r3, [r7, #56]	; 0x38
  4035aa:	b003      	add	sp, #12
  4035ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035b0:	004034c9 	.word	0x004034c9
  4035b4:	00403ecd 	.word	0x00403ecd
  4035b8:	00403ef1 	.word	0x00403ef1
  4035bc:	00403f2d 	.word	0x00403f2d
  4035c0:	00403f4d 	.word	0x00403f4d

004035c4 <__sinit>:
  4035c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4035c6:	b103      	cbz	r3, 4035ca <__sinit+0x6>
  4035c8:	4770      	bx	lr
  4035ca:	f7ff bf83 	b.w	4034d4 <__sinit.part.1>
  4035ce:	bf00      	nop

004035d0 <__sfp_lock_acquire>:
  4035d0:	4770      	bx	lr
  4035d2:	bf00      	nop

004035d4 <__sfp_lock_release>:
  4035d4:	4770      	bx	lr
  4035d6:	bf00      	nop

004035d8 <__libc_fini_array>:
  4035d8:	b538      	push	{r3, r4, r5, lr}
  4035da:	4d07      	ldr	r5, [pc, #28]	; (4035f8 <__libc_fini_array+0x20>)
  4035dc:	4c07      	ldr	r4, [pc, #28]	; (4035fc <__libc_fini_array+0x24>)
  4035de:	1b2c      	subs	r4, r5, r4
  4035e0:	10a4      	asrs	r4, r4, #2
  4035e2:	d005      	beq.n	4035f0 <__libc_fini_array+0x18>
  4035e4:	3c01      	subs	r4, #1
  4035e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4035ea:	4798      	blx	r3
  4035ec:	2c00      	cmp	r4, #0
  4035ee:	d1f9      	bne.n	4035e4 <__libc_fini_array+0xc>
  4035f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4035f4:	f000 bdc4 	b.w	404180 <_fini>
  4035f8:	00404190 	.word	0x00404190
  4035fc:	0040418c 	.word	0x0040418c

00403600 <_malloc_trim_r>:
  403600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403602:	4f23      	ldr	r7, [pc, #140]	; (403690 <_malloc_trim_r+0x90>)
  403604:	460c      	mov	r4, r1
  403606:	4606      	mov	r6, r0
  403608:	f000 fc4a 	bl	403ea0 <__malloc_lock>
  40360c:	68bb      	ldr	r3, [r7, #8]
  40360e:	685d      	ldr	r5, [r3, #4]
  403610:	f025 0503 	bic.w	r5, r5, #3
  403614:	1b29      	subs	r1, r5, r4
  403616:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40361a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40361e:	f021 010f 	bic.w	r1, r1, #15
  403622:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403626:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40362a:	db07      	blt.n	40363c <_malloc_trim_r+0x3c>
  40362c:	2100      	movs	r1, #0
  40362e:	4630      	mov	r0, r6
  403630:	f000 fc3a 	bl	403ea8 <_sbrk_r>
  403634:	68bb      	ldr	r3, [r7, #8]
  403636:	442b      	add	r3, r5
  403638:	4298      	cmp	r0, r3
  40363a:	d004      	beq.n	403646 <_malloc_trim_r+0x46>
  40363c:	4630      	mov	r0, r6
  40363e:	f000 fc31 	bl	403ea4 <__malloc_unlock>
  403642:	2000      	movs	r0, #0
  403644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403646:	4261      	negs	r1, r4
  403648:	4630      	mov	r0, r6
  40364a:	f000 fc2d 	bl	403ea8 <_sbrk_r>
  40364e:	3001      	adds	r0, #1
  403650:	d00d      	beq.n	40366e <_malloc_trim_r+0x6e>
  403652:	4b10      	ldr	r3, [pc, #64]	; (403694 <_malloc_trim_r+0x94>)
  403654:	68ba      	ldr	r2, [r7, #8]
  403656:	6819      	ldr	r1, [r3, #0]
  403658:	1b2d      	subs	r5, r5, r4
  40365a:	f045 0501 	orr.w	r5, r5, #1
  40365e:	4630      	mov	r0, r6
  403660:	1b09      	subs	r1, r1, r4
  403662:	6055      	str	r5, [r2, #4]
  403664:	6019      	str	r1, [r3, #0]
  403666:	f000 fc1d 	bl	403ea4 <__malloc_unlock>
  40366a:	2001      	movs	r0, #1
  40366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40366e:	2100      	movs	r1, #0
  403670:	4630      	mov	r0, r6
  403672:	f000 fc19 	bl	403ea8 <_sbrk_r>
  403676:	68ba      	ldr	r2, [r7, #8]
  403678:	1a83      	subs	r3, r0, r2
  40367a:	2b0f      	cmp	r3, #15
  40367c:	ddde      	ble.n	40363c <_malloc_trim_r+0x3c>
  40367e:	4c06      	ldr	r4, [pc, #24]	; (403698 <_malloc_trim_r+0x98>)
  403680:	4904      	ldr	r1, [pc, #16]	; (403694 <_malloc_trim_r+0x94>)
  403682:	6824      	ldr	r4, [r4, #0]
  403684:	f043 0301 	orr.w	r3, r3, #1
  403688:	1b00      	subs	r0, r0, r4
  40368a:	6053      	str	r3, [r2, #4]
  40368c:	6008      	str	r0, [r1, #0]
  40368e:	e7d5      	b.n	40363c <_malloc_trim_r+0x3c>
  403690:	20000434 	.word	0x20000434
  403694:	20000a8c 	.word	0x20000a8c
  403698:	20000840 	.word	0x20000840

0040369c <_free_r>:
  40369c:	2900      	cmp	r1, #0
  40369e:	d045      	beq.n	40372c <_free_r+0x90>
  4036a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4036a4:	460d      	mov	r5, r1
  4036a6:	4680      	mov	r8, r0
  4036a8:	f000 fbfa 	bl	403ea0 <__malloc_lock>
  4036ac:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4036b0:	496a      	ldr	r1, [pc, #424]	; (40385c <_free_r+0x1c0>)
  4036b2:	f027 0301 	bic.w	r3, r7, #1
  4036b6:	f1a5 0408 	sub.w	r4, r5, #8
  4036ba:	18e2      	adds	r2, r4, r3
  4036bc:	688e      	ldr	r6, [r1, #8]
  4036be:	6850      	ldr	r0, [r2, #4]
  4036c0:	42b2      	cmp	r2, r6
  4036c2:	f020 0003 	bic.w	r0, r0, #3
  4036c6:	d062      	beq.n	40378e <_free_r+0xf2>
  4036c8:	07fe      	lsls	r6, r7, #31
  4036ca:	6050      	str	r0, [r2, #4]
  4036cc:	d40b      	bmi.n	4036e6 <_free_r+0x4a>
  4036ce:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4036d2:	1be4      	subs	r4, r4, r7
  4036d4:	f101 0e08 	add.w	lr, r1, #8
  4036d8:	68a5      	ldr	r5, [r4, #8]
  4036da:	4575      	cmp	r5, lr
  4036dc:	443b      	add	r3, r7
  4036de:	d06f      	beq.n	4037c0 <_free_r+0x124>
  4036e0:	68e7      	ldr	r7, [r4, #12]
  4036e2:	60ef      	str	r7, [r5, #12]
  4036e4:	60bd      	str	r5, [r7, #8]
  4036e6:	1815      	adds	r5, r2, r0
  4036e8:	686d      	ldr	r5, [r5, #4]
  4036ea:	07ed      	lsls	r5, r5, #31
  4036ec:	d542      	bpl.n	403774 <_free_r+0xd8>
  4036ee:	f043 0201 	orr.w	r2, r3, #1
  4036f2:	6062      	str	r2, [r4, #4]
  4036f4:	50e3      	str	r3, [r4, r3]
  4036f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4036fa:	d218      	bcs.n	40372e <_free_r+0x92>
  4036fc:	08db      	lsrs	r3, r3, #3
  4036fe:	1c5a      	adds	r2, r3, #1
  403700:	684d      	ldr	r5, [r1, #4]
  403702:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  403706:	60a7      	str	r7, [r4, #8]
  403708:	2001      	movs	r0, #1
  40370a:	109b      	asrs	r3, r3, #2
  40370c:	fa00 f303 	lsl.w	r3, r0, r3
  403710:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  403714:	431d      	orrs	r5, r3
  403716:	3808      	subs	r0, #8
  403718:	60e0      	str	r0, [r4, #12]
  40371a:	604d      	str	r5, [r1, #4]
  40371c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  403720:	60fc      	str	r4, [r7, #12]
  403722:	4640      	mov	r0, r8
  403724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403728:	f000 bbbc 	b.w	403ea4 <__malloc_unlock>
  40372c:	4770      	bx	lr
  40372e:	0a5a      	lsrs	r2, r3, #9
  403730:	2a04      	cmp	r2, #4
  403732:	d853      	bhi.n	4037dc <_free_r+0x140>
  403734:	099a      	lsrs	r2, r3, #6
  403736:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40373a:	007f      	lsls	r7, r7, #1
  40373c:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403740:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  403744:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  403748:	4944      	ldr	r1, [pc, #272]	; (40385c <_free_r+0x1c0>)
  40374a:	3808      	subs	r0, #8
  40374c:	4290      	cmp	r0, r2
  40374e:	d04d      	beq.n	4037ec <_free_r+0x150>
  403750:	6851      	ldr	r1, [r2, #4]
  403752:	f021 0103 	bic.w	r1, r1, #3
  403756:	428b      	cmp	r3, r1
  403758:	d202      	bcs.n	403760 <_free_r+0xc4>
  40375a:	6892      	ldr	r2, [r2, #8]
  40375c:	4290      	cmp	r0, r2
  40375e:	d1f7      	bne.n	403750 <_free_r+0xb4>
  403760:	68d0      	ldr	r0, [r2, #12]
  403762:	60e0      	str	r0, [r4, #12]
  403764:	60a2      	str	r2, [r4, #8]
  403766:	6084      	str	r4, [r0, #8]
  403768:	60d4      	str	r4, [r2, #12]
  40376a:	4640      	mov	r0, r8
  40376c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403770:	f000 bb98 	b.w	403ea4 <__malloc_unlock>
  403774:	6895      	ldr	r5, [r2, #8]
  403776:	4f3a      	ldr	r7, [pc, #232]	; (403860 <_free_r+0x1c4>)
  403778:	42bd      	cmp	r5, r7
  40377a:	4403      	add	r3, r0
  40377c:	d03f      	beq.n	4037fe <_free_r+0x162>
  40377e:	68d0      	ldr	r0, [r2, #12]
  403780:	60e8      	str	r0, [r5, #12]
  403782:	f043 0201 	orr.w	r2, r3, #1
  403786:	6085      	str	r5, [r0, #8]
  403788:	6062      	str	r2, [r4, #4]
  40378a:	50e3      	str	r3, [r4, r3]
  40378c:	e7b3      	b.n	4036f6 <_free_r+0x5a>
  40378e:	07ff      	lsls	r7, r7, #31
  403790:	4403      	add	r3, r0
  403792:	d407      	bmi.n	4037a4 <_free_r+0x108>
  403794:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403798:	1aa4      	subs	r4, r4, r2
  40379a:	4413      	add	r3, r2
  40379c:	68a0      	ldr	r0, [r4, #8]
  40379e:	68e2      	ldr	r2, [r4, #12]
  4037a0:	60c2      	str	r2, [r0, #12]
  4037a2:	6090      	str	r0, [r2, #8]
  4037a4:	4a2f      	ldr	r2, [pc, #188]	; (403864 <_free_r+0x1c8>)
  4037a6:	6812      	ldr	r2, [r2, #0]
  4037a8:	f043 0001 	orr.w	r0, r3, #1
  4037ac:	4293      	cmp	r3, r2
  4037ae:	6060      	str	r0, [r4, #4]
  4037b0:	608c      	str	r4, [r1, #8]
  4037b2:	d3b6      	bcc.n	403722 <_free_r+0x86>
  4037b4:	4b2c      	ldr	r3, [pc, #176]	; (403868 <_free_r+0x1cc>)
  4037b6:	4640      	mov	r0, r8
  4037b8:	6819      	ldr	r1, [r3, #0]
  4037ba:	f7ff ff21 	bl	403600 <_malloc_trim_r>
  4037be:	e7b0      	b.n	403722 <_free_r+0x86>
  4037c0:	1811      	adds	r1, r2, r0
  4037c2:	6849      	ldr	r1, [r1, #4]
  4037c4:	07c9      	lsls	r1, r1, #31
  4037c6:	d444      	bmi.n	403852 <_free_r+0x1b6>
  4037c8:	6891      	ldr	r1, [r2, #8]
  4037ca:	68d2      	ldr	r2, [r2, #12]
  4037cc:	60ca      	str	r2, [r1, #12]
  4037ce:	4403      	add	r3, r0
  4037d0:	f043 0001 	orr.w	r0, r3, #1
  4037d4:	6091      	str	r1, [r2, #8]
  4037d6:	6060      	str	r0, [r4, #4]
  4037d8:	50e3      	str	r3, [r4, r3]
  4037da:	e7a2      	b.n	403722 <_free_r+0x86>
  4037dc:	2a14      	cmp	r2, #20
  4037de:	d817      	bhi.n	403810 <_free_r+0x174>
  4037e0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4037e4:	007f      	lsls	r7, r7, #1
  4037e6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4037ea:	e7a9      	b.n	403740 <_free_r+0xa4>
  4037ec:	10aa      	asrs	r2, r5, #2
  4037ee:	684b      	ldr	r3, [r1, #4]
  4037f0:	2501      	movs	r5, #1
  4037f2:	fa05 f202 	lsl.w	r2, r5, r2
  4037f6:	4313      	orrs	r3, r2
  4037f8:	604b      	str	r3, [r1, #4]
  4037fa:	4602      	mov	r2, r0
  4037fc:	e7b1      	b.n	403762 <_free_r+0xc6>
  4037fe:	f043 0201 	orr.w	r2, r3, #1
  403802:	614c      	str	r4, [r1, #20]
  403804:	610c      	str	r4, [r1, #16]
  403806:	60e5      	str	r5, [r4, #12]
  403808:	60a5      	str	r5, [r4, #8]
  40380a:	6062      	str	r2, [r4, #4]
  40380c:	50e3      	str	r3, [r4, r3]
  40380e:	e788      	b.n	403722 <_free_r+0x86>
  403810:	2a54      	cmp	r2, #84	; 0x54
  403812:	d806      	bhi.n	403822 <_free_r+0x186>
  403814:	0b1a      	lsrs	r2, r3, #12
  403816:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40381a:	007f      	lsls	r7, r7, #1
  40381c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403820:	e78e      	b.n	403740 <_free_r+0xa4>
  403822:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403826:	d806      	bhi.n	403836 <_free_r+0x19a>
  403828:	0bda      	lsrs	r2, r3, #15
  40382a:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40382e:	007f      	lsls	r7, r7, #1
  403830:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403834:	e784      	b.n	403740 <_free_r+0xa4>
  403836:	f240 5054 	movw	r0, #1364	; 0x554
  40383a:	4282      	cmp	r2, r0
  40383c:	d806      	bhi.n	40384c <_free_r+0x1b0>
  40383e:	0c9a      	lsrs	r2, r3, #18
  403840:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403844:	007f      	lsls	r7, r7, #1
  403846:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40384a:	e779      	b.n	403740 <_free_r+0xa4>
  40384c:	27fe      	movs	r7, #254	; 0xfe
  40384e:	257e      	movs	r5, #126	; 0x7e
  403850:	e776      	b.n	403740 <_free_r+0xa4>
  403852:	f043 0201 	orr.w	r2, r3, #1
  403856:	6062      	str	r2, [r4, #4]
  403858:	50e3      	str	r3, [r4, r3]
  40385a:	e762      	b.n	403722 <_free_r+0x86>
  40385c:	20000434 	.word	0x20000434
  403860:	2000043c 	.word	0x2000043c
  403864:	2000083c 	.word	0x2000083c
  403868:	20000a88 	.word	0x20000a88

0040386c <_fwalk_reent>:
  40386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403870:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403874:	d01f      	beq.n	4038b6 <_fwalk_reent+0x4a>
  403876:	4688      	mov	r8, r1
  403878:	4606      	mov	r6, r0
  40387a:	f04f 0900 	mov.w	r9, #0
  40387e:	687d      	ldr	r5, [r7, #4]
  403880:	68bc      	ldr	r4, [r7, #8]
  403882:	3d01      	subs	r5, #1
  403884:	d411      	bmi.n	4038aa <_fwalk_reent+0x3e>
  403886:	89a3      	ldrh	r3, [r4, #12]
  403888:	2b01      	cmp	r3, #1
  40388a:	f105 35ff 	add.w	r5, r5, #4294967295
  40388e:	d908      	bls.n	4038a2 <_fwalk_reent+0x36>
  403890:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403894:	3301      	adds	r3, #1
  403896:	4621      	mov	r1, r4
  403898:	4630      	mov	r0, r6
  40389a:	d002      	beq.n	4038a2 <_fwalk_reent+0x36>
  40389c:	47c0      	blx	r8
  40389e:	ea49 0900 	orr.w	r9, r9, r0
  4038a2:	1c6b      	adds	r3, r5, #1
  4038a4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4038a8:	d1ed      	bne.n	403886 <_fwalk_reent+0x1a>
  4038aa:	683f      	ldr	r7, [r7, #0]
  4038ac:	2f00      	cmp	r7, #0
  4038ae:	d1e6      	bne.n	40387e <_fwalk_reent+0x12>
  4038b0:	4648      	mov	r0, r9
  4038b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4038b6:	46b9      	mov	r9, r7
  4038b8:	4648      	mov	r0, r9
  4038ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4038be:	bf00      	nop

004038c0 <__swhatbuf_r>:
  4038c0:	b570      	push	{r4, r5, r6, lr}
  4038c2:	460d      	mov	r5, r1
  4038c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4038c8:	2900      	cmp	r1, #0
  4038ca:	b090      	sub	sp, #64	; 0x40
  4038cc:	4614      	mov	r4, r2
  4038ce:	461e      	mov	r6, r3
  4038d0:	db14      	blt.n	4038fc <__swhatbuf_r+0x3c>
  4038d2:	aa01      	add	r2, sp, #4
  4038d4:	f000 fbfa 	bl	4040cc <_fstat_r>
  4038d8:	2800      	cmp	r0, #0
  4038da:	db0f      	blt.n	4038fc <__swhatbuf_r+0x3c>
  4038dc:	9a02      	ldr	r2, [sp, #8]
  4038de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4038e2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4038e6:	fab2 f282 	clz	r2, r2
  4038ea:	0952      	lsrs	r2, r2, #5
  4038ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4038f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4038f4:	6032      	str	r2, [r6, #0]
  4038f6:	6023      	str	r3, [r4, #0]
  4038f8:	b010      	add	sp, #64	; 0x40
  4038fa:	bd70      	pop	{r4, r5, r6, pc}
  4038fc:	89a8      	ldrh	r0, [r5, #12]
  4038fe:	f000 0080 	and.w	r0, r0, #128	; 0x80
  403902:	b282      	uxth	r2, r0
  403904:	2000      	movs	r0, #0
  403906:	6030      	str	r0, [r6, #0]
  403908:	b11a      	cbz	r2, 403912 <__swhatbuf_r+0x52>
  40390a:	2340      	movs	r3, #64	; 0x40
  40390c:	6023      	str	r3, [r4, #0]
  40390e:	b010      	add	sp, #64	; 0x40
  403910:	bd70      	pop	{r4, r5, r6, pc}
  403912:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403916:	4610      	mov	r0, r2
  403918:	6023      	str	r3, [r4, #0]
  40391a:	b010      	add	sp, #64	; 0x40
  40391c:	bd70      	pop	{r4, r5, r6, pc}
  40391e:	bf00      	nop

00403920 <malloc>:
  403920:	4b02      	ldr	r3, [pc, #8]	; (40392c <malloc+0xc>)
  403922:	4601      	mov	r1, r0
  403924:	6818      	ldr	r0, [r3, #0]
  403926:	f000 b803 	b.w	403930 <_malloc_r>
  40392a:	bf00      	nop
  40392c:	20000430 	.word	0x20000430

00403930 <_malloc_r>:
  403930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403934:	f101 050b 	add.w	r5, r1, #11
  403938:	2d16      	cmp	r5, #22
  40393a:	b083      	sub	sp, #12
  40393c:	4606      	mov	r6, r0
  40393e:	f240 809f 	bls.w	403a80 <_malloc_r+0x150>
  403942:	f035 0507 	bics.w	r5, r5, #7
  403946:	f100 80bf 	bmi.w	403ac8 <_malloc_r+0x198>
  40394a:	42a9      	cmp	r1, r5
  40394c:	f200 80bc 	bhi.w	403ac8 <_malloc_r+0x198>
  403950:	f000 faa6 	bl	403ea0 <__malloc_lock>
  403954:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  403958:	f0c0 829c 	bcc.w	403e94 <_malloc_r+0x564>
  40395c:	0a6b      	lsrs	r3, r5, #9
  40395e:	f000 80ba 	beq.w	403ad6 <_malloc_r+0x1a6>
  403962:	2b04      	cmp	r3, #4
  403964:	f200 8183 	bhi.w	403c6e <_malloc_r+0x33e>
  403968:	09a8      	lsrs	r0, r5, #6
  40396a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40396e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403972:	3038      	adds	r0, #56	; 0x38
  403974:	4fc4      	ldr	r7, [pc, #784]	; (403c88 <_malloc_r+0x358>)
  403976:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40397a:	f1a3 0108 	sub.w	r1, r3, #8
  40397e:	685c      	ldr	r4, [r3, #4]
  403980:	42a1      	cmp	r1, r4
  403982:	d107      	bne.n	403994 <_malloc_r+0x64>
  403984:	e0ac      	b.n	403ae0 <_malloc_r+0x1b0>
  403986:	2a00      	cmp	r2, #0
  403988:	f280 80ac 	bge.w	403ae4 <_malloc_r+0x1b4>
  40398c:	68e4      	ldr	r4, [r4, #12]
  40398e:	42a1      	cmp	r1, r4
  403990:	f000 80a6 	beq.w	403ae0 <_malloc_r+0x1b0>
  403994:	6863      	ldr	r3, [r4, #4]
  403996:	f023 0303 	bic.w	r3, r3, #3
  40399a:	1b5a      	subs	r2, r3, r5
  40399c:	2a0f      	cmp	r2, #15
  40399e:	ddf2      	ble.n	403986 <_malloc_r+0x56>
  4039a0:	49b9      	ldr	r1, [pc, #740]	; (403c88 <_malloc_r+0x358>)
  4039a2:	693c      	ldr	r4, [r7, #16]
  4039a4:	f101 0e08 	add.w	lr, r1, #8
  4039a8:	4574      	cmp	r4, lr
  4039aa:	f000 81b3 	beq.w	403d14 <_malloc_r+0x3e4>
  4039ae:	6863      	ldr	r3, [r4, #4]
  4039b0:	f023 0303 	bic.w	r3, r3, #3
  4039b4:	1b5a      	subs	r2, r3, r5
  4039b6:	2a0f      	cmp	r2, #15
  4039b8:	f300 8199 	bgt.w	403cee <_malloc_r+0x3be>
  4039bc:	2a00      	cmp	r2, #0
  4039be:	f8c1 e014 	str.w	lr, [r1, #20]
  4039c2:	f8c1 e010 	str.w	lr, [r1, #16]
  4039c6:	f280 809e 	bge.w	403b06 <_malloc_r+0x1d6>
  4039ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4039ce:	f080 8167 	bcs.w	403ca0 <_malloc_r+0x370>
  4039d2:	08db      	lsrs	r3, r3, #3
  4039d4:	f103 0c01 	add.w	ip, r3, #1
  4039d8:	2201      	movs	r2, #1
  4039da:	109b      	asrs	r3, r3, #2
  4039dc:	fa02 f303 	lsl.w	r3, r2, r3
  4039e0:	684a      	ldr	r2, [r1, #4]
  4039e2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4039e6:	f8c4 8008 	str.w	r8, [r4, #8]
  4039ea:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4039ee:	431a      	orrs	r2, r3
  4039f0:	f1a9 0308 	sub.w	r3, r9, #8
  4039f4:	60e3      	str	r3, [r4, #12]
  4039f6:	604a      	str	r2, [r1, #4]
  4039f8:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4039fc:	f8c8 400c 	str.w	r4, [r8, #12]
  403a00:	1083      	asrs	r3, r0, #2
  403a02:	2401      	movs	r4, #1
  403a04:	409c      	lsls	r4, r3
  403a06:	4294      	cmp	r4, r2
  403a08:	f200 808a 	bhi.w	403b20 <_malloc_r+0x1f0>
  403a0c:	4214      	tst	r4, r2
  403a0e:	d106      	bne.n	403a1e <_malloc_r+0xee>
  403a10:	f020 0003 	bic.w	r0, r0, #3
  403a14:	0064      	lsls	r4, r4, #1
  403a16:	4214      	tst	r4, r2
  403a18:	f100 0004 	add.w	r0, r0, #4
  403a1c:	d0fa      	beq.n	403a14 <_malloc_r+0xe4>
  403a1e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403a22:	46cc      	mov	ip, r9
  403a24:	4680      	mov	r8, r0
  403a26:	f8dc 100c 	ldr.w	r1, [ip, #12]
  403a2a:	458c      	cmp	ip, r1
  403a2c:	d107      	bne.n	403a3e <_malloc_r+0x10e>
  403a2e:	e173      	b.n	403d18 <_malloc_r+0x3e8>
  403a30:	2a00      	cmp	r2, #0
  403a32:	f280 8181 	bge.w	403d38 <_malloc_r+0x408>
  403a36:	68c9      	ldr	r1, [r1, #12]
  403a38:	458c      	cmp	ip, r1
  403a3a:	f000 816d 	beq.w	403d18 <_malloc_r+0x3e8>
  403a3e:	684b      	ldr	r3, [r1, #4]
  403a40:	f023 0303 	bic.w	r3, r3, #3
  403a44:	1b5a      	subs	r2, r3, r5
  403a46:	2a0f      	cmp	r2, #15
  403a48:	ddf2      	ble.n	403a30 <_malloc_r+0x100>
  403a4a:	460c      	mov	r4, r1
  403a4c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403a50:	f854 8f08 	ldr.w	r8, [r4, #8]!
  403a54:	194b      	adds	r3, r1, r5
  403a56:	f045 0501 	orr.w	r5, r5, #1
  403a5a:	604d      	str	r5, [r1, #4]
  403a5c:	f042 0101 	orr.w	r1, r2, #1
  403a60:	f8c8 c00c 	str.w	ip, [r8, #12]
  403a64:	4630      	mov	r0, r6
  403a66:	f8cc 8008 	str.w	r8, [ip, #8]
  403a6a:	617b      	str	r3, [r7, #20]
  403a6c:	613b      	str	r3, [r7, #16]
  403a6e:	f8c3 e00c 	str.w	lr, [r3, #12]
  403a72:	f8c3 e008 	str.w	lr, [r3, #8]
  403a76:	6059      	str	r1, [r3, #4]
  403a78:	509a      	str	r2, [r3, r2]
  403a7a:	f000 fa13 	bl	403ea4 <__malloc_unlock>
  403a7e:	e01f      	b.n	403ac0 <_malloc_r+0x190>
  403a80:	2910      	cmp	r1, #16
  403a82:	d821      	bhi.n	403ac8 <_malloc_r+0x198>
  403a84:	f000 fa0c 	bl	403ea0 <__malloc_lock>
  403a88:	2510      	movs	r5, #16
  403a8a:	2306      	movs	r3, #6
  403a8c:	2002      	movs	r0, #2
  403a8e:	4f7e      	ldr	r7, [pc, #504]	; (403c88 <_malloc_r+0x358>)
  403a90:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403a94:	f1a3 0208 	sub.w	r2, r3, #8
  403a98:	685c      	ldr	r4, [r3, #4]
  403a9a:	4294      	cmp	r4, r2
  403a9c:	f000 8145 	beq.w	403d2a <_malloc_r+0x3fa>
  403aa0:	6863      	ldr	r3, [r4, #4]
  403aa2:	68e1      	ldr	r1, [r4, #12]
  403aa4:	68a5      	ldr	r5, [r4, #8]
  403aa6:	f023 0303 	bic.w	r3, r3, #3
  403aaa:	4423      	add	r3, r4
  403aac:	4630      	mov	r0, r6
  403aae:	685a      	ldr	r2, [r3, #4]
  403ab0:	60e9      	str	r1, [r5, #12]
  403ab2:	f042 0201 	orr.w	r2, r2, #1
  403ab6:	608d      	str	r5, [r1, #8]
  403ab8:	605a      	str	r2, [r3, #4]
  403aba:	f000 f9f3 	bl	403ea4 <__malloc_unlock>
  403abe:	3408      	adds	r4, #8
  403ac0:	4620      	mov	r0, r4
  403ac2:	b003      	add	sp, #12
  403ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ac8:	2400      	movs	r4, #0
  403aca:	230c      	movs	r3, #12
  403acc:	4620      	mov	r0, r4
  403ace:	6033      	str	r3, [r6, #0]
  403ad0:	b003      	add	sp, #12
  403ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ad6:	2380      	movs	r3, #128	; 0x80
  403ad8:	f04f 0e40 	mov.w	lr, #64	; 0x40
  403adc:	203f      	movs	r0, #63	; 0x3f
  403ade:	e749      	b.n	403974 <_malloc_r+0x44>
  403ae0:	4670      	mov	r0, lr
  403ae2:	e75d      	b.n	4039a0 <_malloc_r+0x70>
  403ae4:	4423      	add	r3, r4
  403ae6:	68e1      	ldr	r1, [r4, #12]
  403ae8:	685a      	ldr	r2, [r3, #4]
  403aea:	68a5      	ldr	r5, [r4, #8]
  403aec:	f042 0201 	orr.w	r2, r2, #1
  403af0:	60e9      	str	r1, [r5, #12]
  403af2:	4630      	mov	r0, r6
  403af4:	608d      	str	r5, [r1, #8]
  403af6:	605a      	str	r2, [r3, #4]
  403af8:	f000 f9d4 	bl	403ea4 <__malloc_unlock>
  403afc:	3408      	adds	r4, #8
  403afe:	4620      	mov	r0, r4
  403b00:	b003      	add	sp, #12
  403b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b06:	4423      	add	r3, r4
  403b08:	4630      	mov	r0, r6
  403b0a:	685a      	ldr	r2, [r3, #4]
  403b0c:	f042 0201 	orr.w	r2, r2, #1
  403b10:	605a      	str	r2, [r3, #4]
  403b12:	f000 f9c7 	bl	403ea4 <__malloc_unlock>
  403b16:	3408      	adds	r4, #8
  403b18:	4620      	mov	r0, r4
  403b1a:	b003      	add	sp, #12
  403b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b20:	68bc      	ldr	r4, [r7, #8]
  403b22:	6863      	ldr	r3, [r4, #4]
  403b24:	f023 0803 	bic.w	r8, r3, #3
  403b28:	45a8      	cmp	r8, r5
  403b2a:	d304      	bcc.n	403b36 <_malloc_r+0x206>
  403b2c:	ebc5 0308 	rsb	r3, r5, r8
  403b30:	2b0f      	cmp	r3, #15
  403b32:	f300 808c 	bgt.w	403c4e <_malloc_r+0x31e>
  403b36:	4b55      	ldr	r3, [pc, #340]	; (403c8c <_malloc_r+0x35c>)
  403b38:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403c9c <_malloc_r+0x36c>
  403b3c:	681a      	ldr	r2, [r3, #0]
  403b3e:	f8d9 3000 	ldr.w	r3, [r9]
  403b42:	3301      	adds	r3, #1
  403b44:	442a      	add	r2, r5
  403b46:	eb04 0a08 	add.w	sl, r4, r8
  403b4a:	f000 8160 	beq.w	403e0e <_malloc_r+0x4de>
  403b4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  403b52:	320f      	adds	r2, #15
  403b54:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403b58:	f022 020f 	bic.w	r2, r2, #15
  403b5c:	4611      	mov	r1, r2
  403b5e:	4630      	mov	r0, r6
  403b60:	9201      	str	r2, [sp, #4]
  403b62:	f000 f9a1 	bl	403ea8 <_sbrk_r>
  403b66:	f1b0 3fff 	cmp.w	r0, #4294967295
  403b6a:	4683      	mov	fp, r0
  403b6c:	9a01      	ldr	r2, [sp, #4]
  403b6e:	f000 8158 	beq.w	403e22 <_malloc_r+0x4f2>
  403b72:	4582      	cmp	sl, r0
  403b74:	f200 80fc 	bhi.w	403d70 <_malloc_r+0x440>
  403b78:	4b45      	ldr	r3, [pc, #276]	; (403c90 <_malloc_r+0x360>)
  403b7a:	6819      	ldr	r1, [r3, #0]
  403b7c:	45da      	cmp	sl, fp
  403b7e:	4411      	add	r1, r2
  403b80:	6019      	str	r1, [r3, #0]
  403b82:	f000 8153 	beq.w	403e2c <_malloc_r+0x4fc>
  403b86:	f8d9 0000 	ldr.w	r0, [r9]
  403b8a:	f8df e110 	ldr.w	lr, [pc, #272]	; 403c9c <_malloc_r+0x36c>
  403b8e:	3001      	adds	r0, #1
  403b90:	bf1b      	ittet	ne
  403b92:	ebca 0a0b 	rsbne	sl, sl, fp
  403b96:	4451      	addne	r1, sl
  403b98:	f8ce b000 	streq.w	fp, [lr]
  403b9c:	6019      	strne	r1, [r3, #0]
  403b9e:	f01b 0107 	ands.w	r1, fp, #7
  403ba2:	f000 8117 	beq.w	403dd4 <_malloc_r+0x4a4>
  403ba6:	f1c1 0008 	rsb	r0, r1, #8
  403baa:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403bae:	4483      	add	fp, r0
  403bb0:	3108      	adds	r1, #8
  403bb2:	445a      	add	r2, fp
  403bb4:	f3c2 020b 	ubfx	r2, r2, #0, #12
  403bb8:	ebc2 0901 	rsb	r9, r2, r1
  403bbc:	4649      	mov	r1, r9
  403bbe:	4630      	mov	r0, r6
  403bc0:	9301      	str	r3, [sp, #4]
  403bc2:	f000 f971 	bl	403ea8 <_sbrk_r>
  403bc6:	1c43      	adds	r3, r0, #1
  403bc8:	9b01      	ldr	r3, [sp, #4]
  403bca:	f000 813f 	beq.w	403e4c <_malloc_r+0x51c>
  403bce:	ebcb 0200 	rsb	r2, fp, r0
  403bd2:	444a      	add	r2, r9
  403bd4:	f042 0201 	orr.w	r2, r2, #1
  403bd8:	6819      	ldr	r1, [r3, #0]
  403bda:	f8c7 b008 	str.w	fp, [r7, #8]
  403bde:	4449      	add	r1, r9
  403be0:	42bc      	cmp	r4, r7
  403be2:	f8cb 2004 	str.w	r2, [fp, #4]
  403be6:	6019      	str	r1, [r3, #0]
  403be8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 403c90 <_malloc_r+0x360>
  403bec:	d016      	beq.n	403c1c <_malloc_r+0x2ec>
  403bee:	f1b8 0f0f 	cmp.w	r8, #15
  403bf2:	f240 80fd 	bls.w	403df0 <_malloc_r+0x4c0>
  403bf6:	6862      	ldr	r2, [r4, #4]
  403bf8:	f1a8 030c 	sub.w	r3, r8, #12
  403bfc:	f023 0307 	bic.w	r3, r3, #7
  403c00:	18e0      	adds	r0, r4, r3
  403c02:	f002 0201 	and.w	r2, r2, #1
  403c06:	f04f 0e05 	mov.w	lr, #5
  403c0a:	431a      	orrs	r2, r3
  403c0c:	2b0f      	cmp	r3, #15
  403c0e:	6062      	str	r2, [r4, #4]
  403c10:	f8c0 e004 	str.w	lr, [r0, #4]
  403c14:	f8c0 e008 	str.w	lr, [r0, #8]
  403c18:	f200 811c 	bhi.w	403e54 <_malloc_r+0x524>
  403c1c:	4b1d      	ldr	r3, [pc, #116]	; (403c94 <_malloc_r+0x364>)
  403c1e:	68bc      	ldr	r4, [r7, #8]
  403c20:	681a      	ldr	r2, [r3, #0]
  403c22:	4291      	cmp	r1, r2
  403c24:	bf88      	it	hi
  403c26:	6019      	strhi	r1, [r3, #0]
  403c28:	4b1b      	ldr	r3, [pc, #108]	; (403c98 <_malloc_r+0x368>)
  403c2a:	681a      	ldr	r2, [r3, #0]
  403c2c:	4291      	cmp	r1, r2
  403c2e:	6862      	ldr	r2, [r4, #4]
  403c30:	bf88      	it	hi
  403c32:	6019      	strhi	r1, [r3, #0]
  403c34:	f022 0203 	bic.w	r2, r2, #3
  403c38:	4295      	cmp	r5, r2
  403c3a:	eba2 0305 	sub.w	r3, r2, r5
  403c3e:	d801      	bhi.n	403c44 <_malloc_r+0x314>
  403c40:	2b0f      	cmp	r3, #15
  403c42:	dc04      	bgt.n	403c4e <_malloc_r+0x31e>
  403c44:	4630      	mov	r0, r6
  403c46:	f000 f92d 	bl	403ea4 <__malloc_unlock>
  403c4a:	2400      	movs	r4, #0
  403c4c:	e738      	b.n	403ac0 <_malloc_r+0x190>
  403c4e:	1962      	adds	r2, r4, r5
  403c50:	f043 0301 	orr.w	r3, r3, #1
  403c54:	f045 0501 	orr.w	r5, r5, #1
  403c58:	6065      	str	r5, [r4, #4]
  403c5a:	4630      	mov	r0, r6
  403c5c:	60ba      	str	r2, [r7, #8]
  403c5e:	6053      	str	r3, [r2, #4]
  403c60:	f000 f920 	bl	403ea4 <__malloc_unlock>
  403c64:	3408      	adds	r4, #8
  403c66:	4620      	mov	r0, r4
  403c68:	b003      	add	sp, #12
  403c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c6e:	2b14      	cmp	r3, #20
  403c70:	d971      	bls.n	403d56 <_malloc_r+0x426>
  403c72:	2b54      	cmp	r3, #84	; 0x54
  403c74:	f200 80a4 	bhi.w	403dc0 <_malloc_r+0x490>
  403c78:	0b28      	lsrs	r0, r5, #12
  403c7a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  403c7e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403c82:	306e      	adds	r0, #110	; 0x6e
  403c84:	e676      	b.n	403974 <_malloc_r+0x44>
  403c86:	bf00      	nop
  403c88:	20000434 	.word	0x20000434
  403c8c:	20000a88 	.word	0x20000a88
  403c90:	20000a8c 	.word	0x20000a8c
  403c94:	20000a84 	.word	0x20000a84
  403c98:	20000a80 	.word	0x20000a80
  403c9c:	20000840 	.word	0x20000840
  403ca0:	0a5a      	lsrs	r2, r3, #9
  403ca2:	2a04      	cmp	r2, #4
  403ca4:	d95e      	bls.n	403d64 <_malloc_r+0x434>
  403ca6:	2a14      	cmp	r2, #20
  403ca8:	f200 80b3 	bhi.w	403e12 <_malloc_r+0x4e2>
  403cac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403cb0:	0049      	lsls	r1, r1, #1
  403cb2:	325b      	adds	r2, #91	; 0x5b
  403cb4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  403cb8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  403cbc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 403e9c <_malloc_r+0x56c>
  403cc0:	f1ac 0c08 	sub.w	ip, ip, #8
  403cc4:	458c      	cmp	ip, r1
  403cc6:	f000 8088 	beq.w	403dda <_malloc_r+0x4aa>
  403cca:	684a      	ldr	r2, [r1, #4]
  403ccc:	f022 0203 	bic.w	r2, r2, #3
  403cd0:	4293      	cmp	r3, r2
  403cd2:	d202      	bcs.n	403cda <_malloc_r+0x3aa>
  403cd4:	6889      	ldr	r1, [r1, #8]
  403cd6:	458c      	cmp	ip, r1
  403cd8:	d1f7      	bne.n	403cca <_malloc_r+0x39a>
  403cda:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403cde:	687a      	ldr	r2, [r7, #4]
  403ce0:	f8c4 c00c 	str.w	ip, [r4, #12]
  403ce4:	60a1      	str	r1, [r4, #8]
  403ce6:	f8cc 4008 	str.w	r4, [ip, #8]
  403cea:	60cc      	str	r4, [r1, #12]
  403cec:	e688      	b.n	403a00 <_malloc_r+0xd0>
  403cee:	1963      	adds	r3, r4, r5
  403cf0:	f042 0701 	orr.w	r7, r2, #1
  403cf4:	f045 0501 	orr.w	r5, r5, #1
  403cf8:	6065      	str	r5, [r4, #4]
  403cfa:	4630      	mov	r0, r6
  403cfc:	614b      	str	r3, [r1, #20]
  403cfe:	610b      	str	r3, [r1, #16]
  403d00:	f8c3 e00c 	str.w	lr, [r3, #12]
  403d04:	f8c3 e008 	str.w	lr, [r3, #8]
  403d08:	605f      	str	r7, [r3, #4]
  403d0a:	509a      	str	r2, [r3, r2]
  403d0c:	3408      	adds	r4, #8
  403d0e:	f000 f8c9 	bl	403ea4 <__malloc_unlock>
  403d12:	e6d5      	b.n	403ac0 <_malloc_r+0x190>
  403d14:	684a      	ldr	r2, [r1, #4]
  403d16:	e673      	b.n	403a00 <_malloc_r+0xd0>
  403d18:	f108 0801 	add.w	r8, r8, #1
  403d1c:	f018 0f03 	tst.w	r8, #3
  403d20:	f10c 0c08 	add.w	ip, ip, #8
  403d24:	f47f ae7f 	bne.w	403a26 <_malloc_r+0xf6>
  403d28:	e030      	b.n	403d8c <_malloc_r+0x45c>
  403d2a:	68dc      	ldr	r4, [r3, #12]
  403d2c:	42a3      	cmp	r3, r4
  403d2e:	bf08      	it	eq
  403d30:	3002      	addeq	r0, #2
  403d32:	f43f ae35 	beq.w	4039a0 <_malloc_r+0x70>
  403d36:	e6b3      	b.n	403aa0 <_malloc_r+0x170>
  403d38:	440b      	add	r3, r1
  403d3a:	460c      	mov	r4, r1
  403d3c:	685a      	ldr	r2, [r3, #4]
  403d3e:	68c9      	ldr	r1, [r1, #12]
  403d40:	f854 5f08 	ldr.w	r5, [r4, #8]!
  403d44:	f042 0201 	orr.w	r2, r2, #1
  403d48:	605a      	str	r2, [r3, #4]
  403d4a:	4630      	mov	r0, r6
  403d4c:	60e9      	str	r1, [r5, #12]
  403d4e:	608d      	str	r5, [r1, #8]
  403d50:	f000 f8a8 	bl	403ea4 <__malloc_unlock>
  403d54:	e6b4      	b.n	403ac0 <_malloc_r+0x190>
  403d56:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  403d5a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  403d5e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403d62:	e607      	b.n	403974 <_malloc_r+0x44>
  403d64:	099a      	lsrs	r2, r3, #6
  403d66:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403d6a:	0049      	lsls	r1, r1, #1
  403d6c:	3238      	adds	r2, #56	; 0x38
  403d6e:	e7a1      	b.n	403cb4 <_malloc_r+0x384>
  403d70:	42bc      	cmp	r4, r7
  403d72:	4b4a      	ldr	r3, [pc, #296]	; (403e9c <_malloc_r+0x56c>)
  403d74:	f43f af00 	beq.w	403b78 <_malloc_r+0x248>
  403d78:	689c      	ldr	r4, [r3, #8]
  403d7a:	6862      	ldr	r2, [r4, #4]
  403d7c:	f022 0203 	bic.w	r2, r2, #3
  403d80:	e75a      	b.n	403c38 <_malloc_r+0x308>
  403d82:	f859 3908 	ldr.w	r3, [r9], #-8
  403d86:	4599      	cmp	r9, r3
  403d88:	f040 8082 	bne.w	403e90 <_malloc_r+0x560>
  403d8c:	f010 0f03 	tst.w	r0, #3
  403d90:	f100 30ff 	add.w	r0, r0, #4294967295
  403d94:	d1f5      	bne.n	403d82 <_malloc_r+0x452>
  403d96:	687b      	ldr	r3, [r7, #4]
  403d98:	ea23 0304 	bic.w	r3, r3, r4
  403d9c:	607b      	str	r3, [r7, #4]
  403d9e:	0064      	lsls	r4, r4, #1
  403da0:	429c      	cmp	r4, r3
  403da2:	f63f aebd 	bhi.w	403b20 <_malloc_r+0x1f0>
  403da6:	2c00      	cmp	r4, #0
  403da8:	f43f aeba 	beq.w	403b20 <_malloc_r+0x1f0>
  403dac:	421c      	tst	r4, r3
  403dae:	4640      	mov	r0, r8
  403db0:	f47f ae35 	bne.w	403a1e <_malloc_r+0xee>
  403db4:	0064      	lsls	r4, r4, #1
  403db6:	421c      	tst	r4, r3
  403db8:	f100 0004 	add.w	r0, r0, #4
  403dbc:	d0fa      	beq.n	403db4 <_malloc_r+0x484>
  403dbe:	e62e      	b.n	403a1e <_malloc_r+0xee>
  403dc0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403dc4:	d818      	bhi.n	403df8 <_malloc_r+0x4c8>
  403dc6:	0be8      	lsrs	r0, r5, #15
  403dc8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  403dcc:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403dd0:	3077      	adds	r0, #119	; 0x77
  403dd2:	e5cf      	b.n	403974 <_malloc_r+0x44>
  403dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403dd8:	e6eb      	b.n	403bb2 <_malloc_r+0x282>
  403dda:	2101      	movs	r1, #1
  403ddc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403de0:	1092      	asrs	r2, r2, #2
  403de2:	fa01 f202 	lsl.w	r2, r1, r2
  403de6:	431a      	orrs	r2, r3
  403de8:	f8c8 2004 	str.w	r2, [r8, #4]
  403dec:	4661      	mov	r1, ip
  403dee:	e777      	b.n	403ce0 <_malloc_r+0x3b0>
  403df0:	2301      	movs	r3, #1
  403df2:	f8cb 3004 	str.w	r3, [fp, #4]
  403df6:	e725      	b.n	403c44 <_malloc_r+0x314>
  403df8:	f240 5254 	movw	r2, #1364	; 0x554
  403dfc:	4293      	cmp	r3, r2
  403dfe:	d820      	bhi.n	403e42 <_malloc_r+0x512>
  403e00:	0ca8      	lsrs	r0, r5, #18
  403e02:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  403e06:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403e0a:	307c      	adds	r0, #124	; 0x7c
  403e0c:	e5b2      	b.n	403974 <_malloc_r+0x44>
  403e0e:	3210      	adds	r2, #16
  403e10:	e6a4      	b.n	403b5c <_malloc_r+0x22c>
  403e12:	2a54      	cmp	r2, #84	; 0x54
  403e14:	d826      	bhi.n	403e64 <_malloc_r+0x534>
  403e16:	0b1a      	lsrs	r2, r3, #12
  403e18:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403e1c:	0049      	lsls	r1, r1, #1
  403e1e:	326e      	adds	r2, #110	; 0x6e
  403e20:	e748      	b.n	403cb4 <_malloc_r+0x384>
  403e22:	68bc      	ldr	r4, [r7, #8]
  403e24:	6862      	ldr	r2, [r4, #4]
  403e26:	f022 0203 	bic.w	r2, r2, #3
  403e2a:	e705      	b.n	403c38 <_malloc_r+0x308>
  403e2c:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403e30:	2800      	cmp	r0, #0
  403e32:	f47f aea8 	bne.w	403b86 <_malloc_r+0x256>
  403e36:	4442      	add	r2, r8
  403e38:	68bb      	ldr	r3, [r7, #8]
  403e3a:	f042 0201 	orr.w	r2, r2, #1
  403e3e:	605a      	str	r2, [r3, #4]
  403e40:	e6ec      	b.n	403c1c <_malloc_r+0x2ec>
  403e42:	23fe      	movs	r3, #254	; 0xfe
  403e44:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  403e48:	207e      	movs	r0, #126	; 0x7e
  403e4a:	e593      	b.n	403974 <_malloc_r+0x44>
  403e4c:	2201      	movs	r2, #1
  403e4e:	f04f 0900 	mov.w	r9, #0
  403e52:	e6c1      	b.n	403bd8 <_malloc_r+0x2a8>
  403e54:	f104 0108 	add.w	r1, r4, #8
  403e58:	4630      	mov	r0, r6
  403e5a:	f7ff fc1f 	bl	40369c <_free_r>
  403e5e:	f8d9 1000 	ldr.w	r1, [r9]
  403e62:	e6db      	b.n	403c1c <_malloc_r+0x2ec>
  403e64:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403e68:	d805      	bhi.n	403e76 <_malloc_r+0x546>
  403e6a:	0bda      	lsrs	r2, r3, #15
  403e6c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403e70:	0049      	lsls	r1, r1, #1
  403e72:	3277      	adds	r2, #119	; 0x77
  403e74:	e71e      	b.n	403cb4 <_malloc_r+0x384>
  403e76:	f240 5154 	movw	r1, #1364	; 0x554
  403e7a:	428a      	cmp	r2, r1
  403e7c:	d805      	bhi.n	403e8a <_malloc_r+0x55a>
  403e7e:	0c9a      	lsrs	r2, r3, #18
  403e80:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403e84:	0049      	lsls	r1, r1, #1
  403e86:	327c      	adds	r2, #124	; 0x7c
  403e88:	e714      	b.n	403cb4 <_malloc_r+0x384>
  403e8a:	21fe      	movs	r1, #254	; 0xfe
  403e8c:	227e      	movs	r2, #126	; 0x7e
  403e8e:	e711      	b.n	403cb4 <_malloc_r+0x384>
  403e90:	687b      	ldr	r3, [r7, #4]
  403e92:	e784      	b.n	403d9e <_malloc_r+0x46e>
  403e94:	08e8      	lsrs	r0, r5, #3
  403e96:	1c43      	adds	r3, r0, #1
  403e98:	005b      	lsls	r3, r3, #1
  403e9a:	e5f8      	b.n	403a8e <_malloc_r+0x15e>
  403e9c:	20000434 	.word	0x20000434

00403ea0 <__malloc_lock>:
  403ea0:	4770      	bx	lr
  403ea2:	bf00      	nop

00403ea4 <__malloc_unlock>:
  403ea4:	4770      	bx	lr
  403ea6:	bf00      	nop

00403ea8 <_sbrk_r>:
  403ea8:	b538      	push	{r3, r4, r5, lr}
  403eaa:	4c07      	ldr	r4, [pc, #28]	; (403ec8 <_sbrk_r+0x20>)
  403eac:	2300      	movs	r3, #0
  403eae:	4605      	mov	r5, r0
  403eb0:	4608      	mov	r0, r1
  403eb2:	6023      	str	r3, [r4, #0]
  403eb4:	f7fd fec6 	bl	401c44 <_sbrk>
  403eb8:	1c43      	adds	r3, r0, #1
  403eba:	d000      	beq.n	403ebe <_sbrk_r+0x16>
  403ebc:	bd38      	pop	{r3, r4, r5, pc}
  403ebe:	6823      	ldr	r3, [r4, #0]
  403ec0:	2b00      	cmp	r3, #0
  403ec2:	d0fb      	beq.n	403ebc <_sbrk_r+0x14>
  403ec4:	602b      	str	r3, [r5, #0]
  403ec6:	bd38      	pop	{r3, r4, r5, pc}
  403ec8:	20000cc0 	.word	0x20000cc0

00403ecc <__sread>:
  403ecc:	b510      	push	{r4, lr}
  403ece:	460c      	mov	r4, r1
  403ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ed4:	f000 f924 	bl	404120 <_read_r>
  403ed8:	2800      	cmp	r0, #0
  403eda:	db03      	blt.n	403ee4 <__sread+0x18>
  403edc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403ede:	4403      	add	r3, r0
  403ee0:	6523      	str	r3, [r4, #80]	; 0x50
  403ee2:	bd10      	pop	{r4, pc}
  403ee4:	89a3      	ldrh	r3, [r4, #12]
  403ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403eea:	81a3      	strh	r3, [r4, #12]
  403eec:	bd10      	pop	{r4, pc}
  403eee:	bf00      	nop

00403ef0 <__swrite>:
  403ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ef4:	4616      	mov	r6, r2
  403ef6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403efa:	461f      	mov	r7, r3
  403efc:	05d3      	lsls	r3, r2, #23
  403efe:	460c      	mov	r4, r1
  403f00:	4605      	mov	r5, r0
  403f02:	d507      	bpl.n	403f14 <__swrite+0x24>
  403f04:	2200      	movs	r2, #0
  403f06:	2302      	movs	r3, #2
  403f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f0c:	f000 f8f2 	bl	4040f4 <_lseek_r>
  403f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403f18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403f1c:	81a2      	strh	r2, [r4, #12]
  403f1e:	463b      	mov	r3, r7
  403f20:	4632      	mov	r2, r6
  403f22:	4628      	mov	r0, r5
  403f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403f28:	f000 b814 	b.w	403f54 <_write_r>

00403f2c <__sseek>:
  403f2c:	b510      	push	{r4, lr}
  403f2e:	460c      	mov	r4, r1
  403f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f34:	f000 f8de 	bl	4040f4 <_lseek_r>
  403f38:	89a3      	ldrh	r3, [r4, #12]
  403f3a:	1c42      	adds	r2, r0, #1
  403f3c:	bf0e      	itee	eq
  403f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403f46:	6520      	strne	r0, [r4, #80]	; 0x50
  403f48:	81a3      	strh	r3, [r4, #12]
  403f4a:	bd10      	pop	{r4, pc}

00403f4c <__sclose>:
  403f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f50:	f000 b868 	b.w	404024 <_close_r>

00403f54 <_write_r>:
  403f54:	b570      	push	{r4, r5, r6, lr}
  403f56:	460d      	mov	r5, r1
  403f58:	4c08      	ldr	r4, [pc, #32]	; (403f7c <_write_r+0x28>)
  403f5a:	4611      	mov	r1, r2
  403f5c:	4606      	mov	r6, r0
  403f5e:	461a      	mov	r2, r3
  403f60:	4628      	mov	r0, r5
  403f62:	2300      	movs	r3, #0
  403f64:	6023      	str	r3, [r4, #0]
  403f66:	f7fc fb49 	bl	4005fc <_write>
  403f6a:	1c43      	adds	r3, r0, #1
  403f6c:	d000      	beq.n	403f70 <_write_r+0x1c>
  403f6e:	bd70      	pop	{r4, r5, r6, pc}
  403f70:	6823      	ldr	r3, [r4, #0]
  403f72:	2b00      	cmp	r3, #0
  403f74:	d0fb      	beq.n	403f6e <_write_r+0x1a>
  403f76:	6033      	str	r3, [r6, #0]
  403f78:	bd70      	pop	{r4, r5, r6, pc}
  403f7a:	bf00      	nop
  403f7c:	20000cc0 	.word	0x20000cc0

00403f80 <__register_exitproc>:
  403f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403f84:	4c25      	ldr	r4, [pc, #148]	; (40401c <__register_exitproc+0x9c>)
  403f86:	6825      	ldr	r5, [r4, #0]
  403f88:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403f8c:	4606      	mov	r6, r0
  403f8e:	4688      	mov	r8, r1
  403f90:	4692      	mov	sl, r2
  403f92:	4699      	mov	r9, r3
  403f94:	b3c4      	cbz	r4, 404008 <__register_exitproc+0x88>
  403f96:	6860      	ldr	r0, [r4, #4]
  403f98:	281f      	cmp	r0, #31
  403f9a:	dc17      	bgt.n	403fcc <__register_exitproc+0x4c>
  403f9c:	1c43      	adds	r3, r0, #1
  403f9e:	b176      	cbz	r6, 403fbe <__register_exitproc+0x3e>
  403fa0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403fa4:	2201      	movs	r2, #1
  403fa6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403faa:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403fae:	4082      	lsls	r2, r0
  403fb0:	4311      	orrs	r1, r2
  403fb2:	2e02      	cmp	r6, #2
  403fb4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403fb8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403fbc:	d01e      	beq.n	403ffc <__register_exitproc+0x7c>
  403fbe:	3002      	adds	r0, #2
  403fc0:	6063      	str	r3, [r4, #4]
  403fc2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403fc6:	2000      	movs	r0, #0
  403fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403fcc:	4b14      	ldr	r3, [pc, #80]	; (404020 <__register_exitproc+0xa0>)
  403fce:	b303      	cbz	r3, 404012 <__register_exitproc+0x92>
  403fd0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403fd4:	f7ff fca4 	bl	403920 <malloc>
  403fd8:	4604      	mov	r4, r0
  403fda:	b1d0      	cbz	r0, 404012 <__register_exitproc+0x92>
  403fdc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403fe0:	2700      	movs	r7, #0
  403fe2:	e880 0088 	stmia.w	r0, {r3, r7}
  403fe6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403fea:	4638      	mov	r0, r7
  403fec:	2301      	movs	r3, #1
  403fee:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403ff2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403ff6:	2e00      	cmp	r6, #0
  403ff8:	d0e1      	beq.n	403fbe <__register_exitproc+0x3e>
  403ffa:	e7d1      	b.n	403fa0 <__register_exitproc+0x20>
  403ffc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404000:	430a      	orrs	r2, r1
  404002:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  404006:	e7da      	b.n	403fbe <__register_exitproc+0x3e>
  404008:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40400c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404010:	e7c1      	b.n	403f96 <__register_exitproc+0x16>
  404012:	f04f 30ff 	mov.w	r0, #4294967295
  404016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40401a:	bf00      	nop
  40401c:	00404168 	.word	0x00404168
  404020:	00403921 	.word	0x00403921

00404024 <_close_r>:
  404024:	b538      	push	{r3, r4, r5, lr}
  404026:	4c07      	ldr	r4, [pc, #28]	; (404044 <_close_r+0x20>)
  404028:	2300      	movs	r3, #0
  40402a:	4605      	mov	r5, r0
  40402c:	4608      	mov	r0, r1
  40402e:	6023      	str	r3, [r4, #0]
  404030:	f7fd fe34 	bl	401c9c <_close>
  404034:	1c43      	adds	r3, r0, #1
  404036:	d000      	beq.n	40403a <_close_r+0x16>
  404038:	bd38      	pop	{r3, r4, r5, pc}
  40403a:	6823      	ldr	r3, [r4, #0]
  40403c:	2b00      	cmp	r3, #0
  40403e:	d0fb      	beq.n	404038 <_close_r+0x14>
  404040:	602b      	str	r3, [r5, #0]
  404042:	bd38      	pop	{r3, r4, r5, pc}
  404044:	20000cc0 	.word	0x20000cc0

00404048 <_fclose_r>:
  404048:	2900      	cmp	r1, #0
  40404a:	d03d      	beq.n	4040c8 <_fclose_r+0x80>
  40404c:	b570      	push	{r4, r5, r6, lr}
  40404e:	4605      	mov	r5, r0
  404050:	460c      	mov	r4, r1
  404052:	b108      	cbz	r0, 404058 <_fclose_r+0x10>
  404054:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404056:	b37b      	cbz	r3, 4040b8 <_fclose_r+0x70>
  404058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40405c:	b90b      	cbnz	r3, 404062 <_fclose_r+0x1a>
  40405e:	2000      	movs	r0, #0
  404060:	bd70      	pop	{r4, r5, r6, pc}
  404062:	4621      	mov	r1, r4
  404064:	4628      	mov	r0, r5
  404066:	f7ff f975 	bl	403354 <__sflush_r>
  40406a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40406c:	4606      	mov	r6, r0
  40406e:	b133      	cbz	r3, 40407e <_fclose_r+0x36>
  404070:	69e1      	ldr	r1, [r4, #28]
  404072:	4628      	mov	r0, r5
  404074:	4798      	blx	r3
  404076:	2800      	cmp	r0, #0
  404078:	bfb8      	it	lt
  40407a:	f04f 36ff 	movlt.w	r6, #4294967295
  40407e:	89a3      	ldrh	r3, [r4, #12]
  404080:	061b      	lsls	r3, r3, #24
  404082:	d41c      	bmi.n	4040be <_fclose_r+0x76>
  404084:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404086:	b141      	cbz	r1, 40409a <_fclose_r+0x52>
  404088:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40408c:	4299      	cmp	r1, r3
  40408e:	d002      	beq.n	404096 <_fclose_r+0x4e>
  404090:	4628      	mov	r0, r5
  404092:	f7ff fb03 	bl	40369c <_free_r>
  404096:	2300      	movs	r3, #0
  404098:	6323      	str	r3, [r4, #48]	; 0x30
  40409a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40409c:	b121      	cbz	r1, 4040a8 <_fclose_r+0x60>
  40409e:	4628      	mov	r0, r5
  4040a0:	f7ff fafc 	bl	40369c <_free_r>
  4040a4:	2300      	movs	r3, #0
  4040a6:	6463      	str	r3, [r4, #68]	; 0x44
  4040a8:	f7ff fa92 	bl	4035d0 <__sfp_lock_acquire>
  4040ac:	2300      	movs	r3, #0
  4040ae:	81a3      	strh	r3, [r4, #12]
  4040b0:	f7ff fa90 	bl	4035d4 <__sfp_lock_release>
  4040b4:	4630      	mov	r0, r6
  4040b6:	bd70      	pop	{r4, r5, r6, pc}
  4040b8:	f7ff fa84 	bl	4035c4 <__sinit>
  4040bc:	e7cc      	b.n	404058 <_fclose_r+0x10>
  4040be:	6921      	ldr	r1, [r4, #16]
  4040c0:	4628      	mov	r0, r5
  4040c2:	f7ff faeb 	bl	40369c <_free_r>
  4040c6:	e7dd      	b.n	404084 <_fclose_r+0x3c>
  4040c8:	2000      	movs	r0, #0
  4040ca:	4770      	bx	lr

004040cc <_fstat_r>:
  4040cc:	b538      	push	{r3, r4, r5, lr}
  4040ce:	460b      	mov	r3, r1
  4040d0:	4c07      	ldr	r4, [pc, #28]	; (4040f0 <_fstat_r+0x24>)
  4040d2:	4605      	mov	r5, r0
  4040d4:	4611      	mov	r1, r2
  4040d6:	4618      	mov	r0, r3
  4040d8:	2300      	movs	r3, #0
  4040da:	6023      	str	r3, [r4, #0]
  4040dc:	f7fd fdea 	bl	401cb4 <_fstat>
  4040e0:	1c43      	adds	r3, r0, #1
  4040e2:	d000      	beq.n	4040e6 <_fstat_r+0x1a>
  4040e4:	bd38      	pop	{r3, r4, r5, pc}
  4040e6:	6823      	ldr	r3, [r4, #0]
  4040e8:	2b00      	cmp	r3, #0
  4040ea:	d0fb      	beq.n	4040e4 <_fstat_r+0x18>
  4040ec:	602b      	str	r3, [r5, #0]
  4040ee:	bd38      	pop	{r3, r4, r5, pc}
  4040f0:	20000cc0 	.word	0x20000cc0

004040f4 <_lseek_r>:
  4040f4:	b570      	push	{r4, r5, r6, lr}
  4040f6:	460d      	mov	r5, r1
  4040f8:	4c08      	ldr	r4, [pc, #32]	; (40411c <_lseek_r+0x28>)
  4040fa:	4611      	mov	r1, r2
  4040fc:	4606      	mov	r6, r0
  4040fe:	461a      	mov	r2, r3
  404100:	4628      	mov	r0, r5
  404102:	2300      	movs	r3, #0
  404104:	6023      	str	r3, [r4, #0]
  404106:	f7fd fde5 	bl	401cd4 <_lseek>
  40410a:	1c43      	adds	r3, r0, #1
  40410c:	d000      	beq.n	404110 <_lseek_r+0x1c>
  40410e:	bd70      	pop	{r4, r5, r6, pc}
  404110:	6823      	ldr	r3, [r4, #0]
  404112:	2b00      	cmp	r3, #0
  404114:	d0fb      	beq.n	40410e <_lseek_r+0x1a>
  404116:	6033      	str	r3, [r6, #0]
  404118:	bd70      	pop	{r4, r5, r6, pc}
  40411a:	bf00      	nop
  40411c:	20000cc0 	.word	0x20000cc0

00404120 <_read_r>:
  404120:	b570      	push	{r4, r5, r6, lr}
  404122:	460d      	mov	r5, r1
  404124:	4c08      	ldr	r4, [pc, #32]	; (404148 <_read_r+0x28>)
  404126:	4611      	mov	r1, r2
  404128:	4606      	mov	r6, r0
  40412a:	461a      	mov	r2, r3
  40412c:	4628      	mov	r0, r5
  40412e:	2300      	movs	r3, #0
  404130:	6023      	str	r3, [r4, #0]
  404132:	f7fc fa39 	bl	4005a8 <_read>
  404136:	1c43      	adds	r3, r0, #1
  404138:	d000      	beq.n	40413c <_read_r+0x1c>
  40413a:	bd70      	pop	{r4, r5, r6, pc}
  40413c:	6823      	ldr	r3, [r4, #0]
  40413e:	2b00      	cmp	r3, #0
  404140:	d0fb      	beq.n	40413a <_read_r+0x1a>
  404142:	6033      	str	r3, [r6, #0]
  404144:	bd70      	pop	{r4, r5, r6, pc}
  404146:	bf00      	nop
  404148:	20000cc0 	.word	0x20000cc0
  40414c:	00002580 	.word	0x00002580
  404150:	000000c0 	.word	0x000000c0
  404154:	00000800 	.word	0x00000800
	...
  404164:	00000043 	.word	0x00000043

00404168 <_global_impure_ptr>:
  404168:	20000008                                ... 

0040416c <_init>:
  40416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40416e:	bf00      	nop
  404170:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404172:	bc08      	pop	{r3}
  404174:	469e      	mov	lr, r3
  404176:	4770      	bx	lr

00404178 <__init_array_start>:
  404178:	00403335 	.word	0x00403335

0040417c <__frame_dummy_init_array_entry>:
  40417c:	004000f1                                ..@.

00404180 <_fini>:
  404180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404182:	bf00      	nop
  404184:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404186:	bc08      	pop	{r3}
  404188:	469e      	mov	lr, r3
  40418a:	4770      	bx	lr

0040418c <__fini_array_start>:
  40418c:	004000cd 	.word	0x004000cd
