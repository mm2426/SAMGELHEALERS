
SAMGELHEALERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005120  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405120  00405120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20000000  00405128  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000008d0  2000086c  00405994  0002086c  2**2
                  ALLOC
  4 .stack        00003004  2000113c  00406264  0002086c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020896  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000a12c  00000000  00000000  000208ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001985  00000000  00000000  0002aa1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005f74  00000000  00000000  0002c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a60  00000000  00000000  00032314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000970  00000000  00000000  00032d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000135a7  00000000  00000000  000336e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b81a  00000000  00000000  00046c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f632  00000000  00000000  000524a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000037d8  00000000  00000000  000a1ad8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20004140 	.word	0x20004140
  400004:	00401639 	.word	0x00401639
  400008:	00401701 	.word	0x00401701
  40000c:	00401701 	.word	0x00401701
  400010:	00401701 	.word	0x00401701
  400014:	00401701 	.word	0x00401701
  400018:	00401701 	.word	0x00401701
	...
  40002c:	00401701 	.word	0x00401701
  400030:	00401701 	.word	0x00401701
  400034:	00000000 	.word	0x00000000
  400038:	00401701 	.word	0x00401701
  40003c:	00401701 	.word	0x00401701
  400040:	00401701 	.word	0x00401701
  400044:	00401701 	.word	0x00401701
  400048:	00401701 	.word	0x00401701
  40004c:	00401701 	.word	0x00401701
  400050:	00401701 	.word	0x00401701
  400054:	00401701 	.word	0x00401701
  400058:	00401701 	.word	0x00401701
  40005c:	00401701 	.word	0x00401701
  400060:	00401701 	.word	0x00401701
  400064:	00401701 	.word	0x00401701
  400068:	00000000 	.word	0x00000000
  40006c:	00400589 	.word	0x00400589
  400070:	004005a1 	.word	0x004005a1
  400074:	004005b9 	.word	0x004005b9
  400078:	00401701 	.word	0x00401701
  40007c:	00401701 	.word	0x00401701
	...
  400088:	00401701 	.word	0x00401701
  40008c:	00401701 	.word	0x00401701
  400090:	00401701 	.word	0x00401701
  400094:	00401701 	.word	0x00401701
  400098:	00401701 	.word	0x00401701
  40009c:	00401701 	.word	0x00401701
  4000a0:	00401701 	.word	0x00401701
  4000a4:	00401701 	.word	0x00401701
  4000a8:	00401701 	.word	0x00401701
  4000ac:	00401701 	.word	0x00401701
  4000b0:	00401701 	.word	0x00401701
  4000b4:	00401701 	.word	0x00401701
  4000b8:	00401701 	.word	0x00401701
  4000bc:	00401701 	.word	0x00401701
  4000c0:	00401701 	.word	0x00401701
  4000c4:	00401701 	.word	0x00401701
  4000c8:	00401701 	.word	0x00401701

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000086c 	.word	0x2000086c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00405128 	.word	0x00405128

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000870 	.word	0x20000870
  40011c:	00405128 	.word	0x00405128
  400120:	00405128 	.word	0x00405128
  400124:	00000000 	.word	0x00000000

00400128 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400128:	b480      	push	{r7}
  40012a:	b083      	sub	sp, #12
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	2b07      	cmp	r3, #7
  400134:	d825      	bhi.n	400182 <osc_get_rate+0x5a>
  400136:	a201      	add	r2, pc, #4	; (adr r2, 40013c <osc_get_rate+0x14>)
  400138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40013c:	0040015d 	.word	0x0040015d
  400140:	00400163 	.word	0x00400163
  400144:	00400169 	.word	0x00400169
  400148:	0040016f 	.word	0x0040016f
  40014c:	00400173 	.word	0x00400173
  400150:	00400177 	.word	0x00400177
  400154:	0040017b 	.word	0x0040017b
  400158:	0040017f 	.word	0x0040017f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40015c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400160:	e010      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400166:	e00d      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40016c:	e00a      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40016e:	4b08      	ldr	r3, [pc, #32]	; (400190 <osc_get_rate+0x68>)
  400170:	e008      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400172:	4b08      	ldr	r3, [pc, #32]	; (400194 <osc_get_rate+0x6c>)
  400174:	e006      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400176:	4b08      	ldr	r3, [pc, #32]	; (400198 <osc_get_rate+0x70>)
  400178:	e004      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <osc_get_rate+0x70>)
  40017c:	e002      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40017e:	4b06      	ldr	r3, [pc, #24]	; (400198 <osc_get_rate+0x70>)
  400180:	e000      	b.n	400184 <osc_get_rate+0x5c>
	}

	return 0;
  400182:	2300      	movs	r3, #0
}
  400184:	4618      	mov	r0, r3
  400186:	370c      	adds	r7, #12
  400188:	46bd      	mov	sp, r7
  40018a:	bc80      	pop	{r7}
  40018c:	4770      	bx	lr
  40018e:	bf00      	nop
  400190:	003d0900 	.word	0x003d0900
  400194:	007a1200 	.word	0x007a1200
  400198:	00b71b00 	.word	0x00b71b00

0040019c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001a0:	2006      	movs	r0, #6
  4001a2:	4b04      	ldr	r3, [pc, #16]	; (4001b4 <sysclk_get_main_hz+0x18>)
  4001a4:	4798      	blx	r3
  4001a6:	4602      	mov	r2, r0
  4001a8:	4613      	mov	r3, r2
  4001aa:	009b      	lsls	r3, r3, #2
  4001ac:	4413      	add	r3, r2
  4001ae:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001b0:	4618      	mov	r0, r3
  4001b2:	bd80      	pop	{r7, pc}
  4001b4:	00400129 	.word	0x00400129

004001b8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4001b8:	b580      	push	{r7, lr}
  4001ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4001bc:	4b02      	ldr	r3, [pc, #8]	; (4001c8 <sysclk_get_peripheral_hz+0x10>)
  4001be:	4798      	blx	r3
  4001c0:	4603      	mov	r3, r0
  4001c2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4001c4:	4618      	mov	r0, r3
  4001c6:	bd80      	pop	{r7, pc}
  4001c8:	0040019d 	.word	0x0040019d

004001cc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4001cc:	b580      	push	{r7, lr}
  4001ce:	b082      	sub	sp, #8
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4001d4:	6878      	ldr	r0, [r7, #4]
  4001d6:	4b03      	ldr	r3, [pc, #12]	; (4001e4 <sysclk_enable_peripheral_clock+0x18>)
  4001d8:	4798      	blx	r3
}
  4001da:	bf00      	nop
  4001dc:	3708      	adds	r7, #8
  4001de:	46bd      	mov	sp, r7
  4001e0:	bd80      	pop	{r7, pc}
  4001e2:	bf00      	nop
  4001e4:	00401539 	.word	0x00401539

004001e8 <SenInitUsart>:
 pdc_packet_t pdcPkt;// pdcPkt2;
 /* Pointer to PDC register base. */
 Pdc *sen1PdcBase, *sen2PdcBase;

 void SenInitUsart(void)
 {
  4001e8:	b5b0      	push	{r4, r5, r7, lr}
  4001ea:	b086      	sub	sp, #24
  4001ec:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  4001ee:	4b1c      	ldr	r3, [pc, #112]	; (400260 <SenInitUsart+0x78>)
  4001f0:	463c      	mov	r4, r7
  4001f2:	461d      	mov	r5, r3
  4001f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4001f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4001f8:	e895 0003 	ldmia.w	r5, {r0, r1}
  4001fc:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(SEN1_USART_ID);
  400200:	200f      	movs	r0, #15
  400202:	4b18      	ldr	r3, [pc, #96]	; (400264 <SenInitUsart+0x7c>)
  400204:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs232(SEN1_USART, &usart_console_settings,
  400206:	4b18      	ldr	r3, [pc, #96]	; (400268 <SenInitUsart+0x80>)
  400208:	4798      	blx	r3
  40020a:	4602      	mov	r2, r0
  40020c:	463b      	mov	r3, r7
  40020e:	4619      	mov	r1, r3
  400210:	4816      	ldr	r0, [pc, #88]	; (40026c <SenInitUsart+0x84>)
  400212:	4b17      	ldr	r3, [pc, #92]	; (400270 <SenInitUsart+0x88>)
  400214:	4798      	blx	r3
	 // 	/* Configure USART in RS485 mode. */
	 // 	usart_init_rs232(SEN2_USART, &usart_console_settings,
	 // 	sysclk_get_peripheral_hz());

	 /* Enable RX function. */
	 usart_disable_tx(SEN1_USART);
  400216:	4815      	ldr	r0, [pc, #84]	; (40026c <SenInitUsart+0x84>)
  400218:	4b16      	ldr	r3, [pc, #88]	; (400274 <SenInitUsart+0x8c>)
  40021a:	4798      	blx	r3
	 usart_enable_rx(SEN1_USART);
  40021c:	4813      	ldr	r0, [pc, #76]	; (40026c <SenInitUsart+0x84>)
  40021e:	4b16      	ldr	r3, [pc, #88]	; (400278 <SenInitUsart+0x90>)
  400220:	4798      	blx	r3
// 	 usart_disable_tx(SEN2_USART);
// 	 usart_enable_rx(SEN2_USART);

	/* Get board USART PDC base address and enable receiver and transmitter. */
	sen1PdcBase = usart_get_pdc_base(SEN1_USART);
  400222:	4812      	ldr	r0, [pc, #72]	; (40026c <SenInitUsart+0x84>)
  400224:	4b15      	ldr	r3, [pc, #84]	; (40027c <SenInitUsart+0x94>)
  400226:	4798      	blx	r3
  400228:	4602      	mov	r2, r0
  40022a:	4b15      	ldr	r3, [pc, #84]	; (400280 <SenInitUsart+0x98>)
  40022c:	601a      	str	r2, [r3, #0]
	pdc_enable_transfer(sen1PdcBase, PERIPH_PTCR_RXTEN);
  40022e:	4b14      	ldr	r3, [pc, #80]	; (400280 <SenInitUsart+0x98>)
  400230:	681b      	ldr	r3, [r3, #0]
  400232:	2101      	movs	r1, #1
  400234:	4618      	mov	r0, r3
  400236:	4b13      	ldr	r3, [pc, #76]	; (400284 <SenInitUsart+0x9c>)
  400238:	4798      	blx	r3

// 	sen2PdcBase = usart_get_pdc_base(SEN2_USART);
// 	pdc_enable_transfer(sen2PdcBase, PERIPH_PTCR_RXTEN);
	
	pdcPkt.ul_addr = (uint32_t) sen1Buff;
  40023a:	4a13      	ldr	r2, [pc, #76]	; (400288 <SenInitUsart+0xa0>)
  40023c:	4b13      	ldr	r3, [pc, #76]	; (40028c <SenInitUsart+0xa4>)
  40023e:	601a      	str	r2, [r3, #0]
	pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  400240:	4b12      	ldr	r3, [pc, #72]	; (40028c <SenInitUsart+0xa4>)
  400242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400246:	605a      	str	r2, [r3, #4]
	//For circular buffer operation
	pdc_rx_init(sen1PdcBase, &pdcPkt, &pdcPkt);
  400248:	4b0d      	ldr	r3, [pc, #52]	; (400280 <SenInitUsart+0x98>)
  40024a:	681b      	ldr	r3, [r3, #0]
  40024c:	4a0f      	ldr	r2, [pc, #60]	; (40028c <SenInitUsart+0xa4>)
  40024e:	490f      	ldr	r1, [pc, #60]	; (40028c <SenInitUsart+0xa4>)
  400250:	4618      	mov	r0, r3
  400252:	4b0f      	ldr	r3, [pc, #60]	; (400290 <SenInitUsart+0xa8>)
  400254:	4798      	blx	r3
// 	pdcPkt1.ul_size = SEN_USART_BUFF_SIZE;
// 	pdcPkt2.ul_addr = (uint32_t) sen2Buff2;
// 	pdcPkt2.ul_size = SEN_USART_BUFF_SIZE;
// 	pdc_rx_init(sen2PdcBase, &pdcPkt1, &pdcPkt2);

 }
  400256:	bf00      	nop
  400258:	3718      	adds	r7, #24
  40025a:	46bd      	mov	sp, r7
  40025c:	bdb0      	pop	{r4, r5, r7, pc}
  40025e:	bf00      	nop
  400260:	0040506c 	.word	0x0040506c
  400264:	004001cd 	.word	0x004001cd
  400268:	004001b9 	.word	0x004001b9
  40026c:	40028000 	.word	0x40028000
  400270:	00400779 	.word	0x00400779
  400274:	00400815 	.word	0x00400815
  400278:	00400845 	.word	0x00400845
  40027c:	0040092d 	.word	0x0040092d
  400280:	20001120 	.word	0x20001120
  400284:	00400d31 	.word	0x00400d31
  400288:	20000888 	.word	0x20000888
  40028c:	20001114 	.word	0x20001114
  400290:	00400ced 	.word	0x00400ced

00400294 <SenPdcManageBuff>:

 void SenPdcManageBuff(void)
 {
  400294:	b580      	push	{r7, lr}
  400296:	af00      	add	r7, sp, #0
	/* If PDC receive next pointer is 0 */
	if(pdc_read_rx_next_counter(sen1PdcBase)==0)
  400298:	4b12      	ldr	r3, [pc, #72]	; (4002e4 <SenPdcManageBuff+0x50>)
  40029a:	681b      	ldr	r3, [r3, #0]
  40029c:	4618      	mov	r0, r3
  40029e:	4b12      	ldr	r3, [pc, #72]	; (4002e8 <SenPdcManageBuff+0x54>)
  4002a0:	4798      	blx	r3
  4002a2:	4603      	mov	r3, r0
  4002a4:	2b00      	cmp	r3, #0
  4002a6:	d10d      	bne.n	4002c4 <SenPdcManageBuff+0x30>
	{
		/* If code reaches here it means current buffer is full and 
		next buffer ptr is assigned to current buffer ptr by PDC. */
		pdcPkt.ul_addr = (uint32_t) sen1Buff;
  4002a8:	4a10      	ldr	r2, [pc, #64]	; (4002ec <SenPdcManageBuff+0x58>)
  4002aa:	4b11      	ldr	r3, [pc, #68]	; (4002f0 <SenPdcManageBuff+0x5c>)
  4002ac:	601a      	str	r2, [r3, #0]
		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  4002ae:	4b10      	ldr	r3, [pc, #64]	; (4002f0 <SenPdcManageBuff+0x5c>)
  4002b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4002b4:	605a      	str	r2, [r3, #4]
		//For circular buffer operation infinitely
		pdc_rx_init(sen1PdcBase, NULL, &pdcPkt);
  4002b6:	4b0b      	ldr	r3, [pc, #44]	; (4002e4 <SenPdcManageBuff+0x50>)
  4002b8:	681b      	ldr	r3, [r3, #0]
  4002ba:	4a0d      	ldr	r2, [pc, #52]	; (4002f0 <SenPdcManageBuff+0x5c>)
  4002bc:	2100      	movs	r1, #0
  4002be:	4618      	mov	r0, r3
  4002c0:	4b0c      	ldr	r3, [pc, #48]	; (4002f4 <SenPdcManageBuff+0x60>)
  4002c2:	4798      	blx	r3
	}
	sen1Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen1PdcBase);
  4002c4:	4b07      	ldr	r3, [pc, #28]	; (4002e4 <SenPdcManageBuff+0x50>)
  4002c6:	681b      	ldr	r3, [r3, #0]
  4002c8:	4618      	mov	r0, r3
  4002ca:	4b0b      	ldr	r3, [pc, #44]	; (4002f8 <SenPdcManageBuff+0x64>)
  4002cc:	4798      	blx	r3
  4002ce:	4603      	mov	r3, r0
  4002d0:	b2da      	uxtb	r2, r3
  4002d2:	f06f 0317 	mvn.w	r3, #23
  4002d6:	1a9b      	subs	r3, r3, r2
  4002d8:	b2da      	uxtb	r2, r3
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <SenPdcManageBuff+0x68>)
  4002dc:	701a      	strb	r2, [r3, #0]
// 		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
// 		//For circular buffer operation infinitely
// 		pdc_rx_init(sen2PdcBase, NULL, &pdcPkt);
// 	}
// 	sen2Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen2PdcBase);
 }
  4002de:	bf00      	nop
  4002e0:	bd80      	pop	{r7, pc}
  4002e2:	bf00      	nop
  4002e4:	20001120 	.word	0x20001120
  4002e8:	00400d69 	.word	0x00400d69
  4002ec:	20000888 	.word	0x20000888
  4002f0:	20001114 	.word	0x20001114
  4002f4:	00400ced 	.word	0x00400ced
  4002f8:	00400d51 	.word	0x00400d51
  4002fc:	2000105a 	.word	0x2000105a

00400300 <SenGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t SenGetRxBytes(uint8_t senNo)
 {
  400300:	b480      	push	{r7}
  400302:	b085      	sub	sp, #20
  400304:	af00      	add	r7, sp, #0
  400306:	4603      	mov	r3, r0
  400308:	71fb      	strb	r3, [r7, #7]
	uint32_t recvdBytes;
	if(senNo == 1)
  40030a:	79fb      	ldrb	r3, [r7, #7]
  40030c:	2b01      	cmp	r3, #1
  40030e:	d11b      	bne.n	400348 <SenGetRxBytes+0x48>
	{
		if(sen1Wptr>sen1Rptr)
  400310:	4b1e      	ldr	r3, [pc, #120]	; (40038c <SenGetRxBytes+0x8c>)
  400312:	781a      	ldrb	r2, [r3, #0]
  400314:	4b1e      	ldr	r3, [pc, #120]	; (400390 <SenGetRxBytes+0x90>)
  400316:	781b      	ldrb	r3, [r3, #0]
  400318:	429a      	cmp	r2, r3
  40031a:	d903      	bls.n	400324 <SenGetRxBytes+0x24>
		{
			recvdBytes = sen1Wptr;
  40031c:	4b1b      	ldr	r3, [pc, #108]	; (40038c <SenGetRxBytes+0x8c>)
  40031e:	781b      	ldrb	r3, [r3, #0]
  400320:	60fb      	str	r3, [r7, #12]
  400322:	e02c      	b.n	40037e <SenGetRxBytes+0x7e>
		}
		else if(sen1Wptr<sen1Rptr)
  400324:	4b19      	ldr	r3, [pc, #100]	; (40038c <SenGetRxBytes+0x8c>)
  400326:	781a      	ldrb	r2, [r3, #0]
  400328:	4b19      	ldr	r3, [pc, #100]	; (400390 <SenGetRxBytes+0x90>)
  40032a:	781b      	ldrb	r3, [r3, #0]
  40032c:	429a      	cmp	r2, r3
  40032e:	d208      	bcs.n	400342 <SenGetRxBytes+0x42>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen1Rptr) + sen1Wptr;
  400330:	4b17      	ldr	r3, [pc, #92]	; (400390 <SenGetRxBytes+0x90>)
  400332:	781b      	ldrb	r3, [r3, #0]
  400334:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
  400338:	4a14      	ldr	r2, [pc, #80]	; (40038c <SenGetRxBytes+0x8c>)
  40033a:	7812      	ldrb	r2, [r2, #0]
  40033c:	4413      	add	r3, r2
  40033e:	60fb      	str	r3, [r7, #12]
  400340:	e01d      	b.n	40037e <SenGetRxBytes+0x7e>
		}
		else
		{
			recvdBytes = 0;
  400342:	2300      	movs	r3, #0
  400344:	60fb      	str	r3, [r7, #12]
  400346:	e01a      	b.n	40037e <SenGetRxBytes+0x7e>
		}
	}
	else
	{
		if(sen2Wptr>sen2Rptr)
  400348:	4b12      	ldr	r3, [pc, #72]	; (400394 <SenGetRxBytes+0x94>)
  40034a:	781a      	ldrb	r2, [r3, #0]
  40034c:	4b12      	ldr	r3, [pc, #72]	; (400398 <SenGetRxBytes+0x98>)
  40034e:	781b      	ldrb	r3, [r3, #0]
  400350:	429a      	cmp	r2, r3
  400352:	d903      	bls.n	40035c <SenGetRxBytes+0x5c>
		{
			recvdBytes = sen2Wptr;
  400354:	4b0f      	ldr	r3, [pc, #60]	; (400394 <SenGetRxBytes+0x94>)
  400356:	781b      	ldrb	r3, [r3, #0]
  400358:	60fb      	str	r3, [r7, #12]
  40035a:	e010      	b.n	40037e <SenGetRxBytes+0x7e>
		}
		else if(sen2Wptr<sen2Rptr)
  40035c:	4b0d      	ldr	r3, [pc, #52]	; (400394 <SenGetRxBytes+0x94>)
  40035e:	781a      	ldrb	r2, [r3, #0]
  400360:	4b0d      	ldr	r3, [pc, #52]	; (400398 <SenGetRxBytes+0x98>)
  400362:	781b      	ldrb	r3, [r3, #0]
  400364:	429a      	cmp	r2, r3
  400366:	d208      	bcs.n	40037a <SenGetRxBytes+0x7a>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen2Rptr) + sen2Wptr;
  400368:	4b0b      	ldr	r3, [pc, #44]	; (400398 <SenGetRxBytes+0x98>)
  40036a:	781b      	ldrb	r3, [r3, #0]
  40036c:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
  400370:	4a08      	ldr	r2, [pc, #32]	; (400394 <SenGetRxBytes+0x94>)
  400372:	7812      	ldrb	r2, [r2, #0]
  400374:	4413      	add	r3, r2
  400376:	60fb      	str	r3, [r7, #12]
  400378:	e001      	b.n	40037e <SenGetRxBytes+0x7e>
		}
		else
		{
			recvdBytes = 0;
  40037a:	2300      	movs	r3, #0
  40037c:	60fb      	str	r3, [r7, #12]
		}
	}
	
	return recvdBytes;
  40037e:	68fb      	ldr	r3, [r7, #12]
 }
  400380:	4618      	mov	r0, r3
  400382:	3714      	adds	r7, #20
  400384:	46bd      	mov	sp, r7
  400386:	bc80      	pop	{r7}
  400388:	4770      	bx	lr
  40038a:	bf00      	nop
  40038c:	2000105a 	.word	0x2000105a
  400390:	20001058 	.word	0x20001058
  400394:	2000105b 	.word	0x2000105b
  400398:	20001059 	.word	0x20001059

0040039c <SenGetByte>:

 uint8_t SenGetByte(uint8_t senNo)
 {
  40039c:	b480      	push	{r7}
  40039e:	b085      	sub	sp, #20
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	4603      	mov	r3, r0
  4003a4:	71fb      	strb	r3, [r7, #7]
	uint8_t dataByte;
	if(senNo==1)
  4003a6:	79fb      	ldrb	r3, [r7, #7]
  4003a8:	2b01      	cmp	r3, #1
  4003aa:	d10a      	bne.n	4003c2 <SenGetByte+0x26>
	{
		dataByte = sen1Buff[sen1Rptr++];
  4003ac:	4b0d      	ldr	r3, [pc, #52]	; (4003e4 <SenGetByte+0x48>)
  4003ae:	781b      	ldrb	r3, [r3, #0]
  4003b0:	1c5a      	adds	r2, r3, #1
  4003b2:	b2d1      	uxtb	r1, r2
  4003b4:	4a0b      	ldr	r2, [pc, #44]	; (4003e4 <SenGetByte+0x48>)
  4003b6:	7011      	strb	r1, [r2, #0]
  4003b8:	461a      	mov	r2, r3
  4003ba:	4b0b      	ldr	r3, [pc, #44]	; (4003e8 <SenGetByte+0x4c>)
  4003bc:	5c9b      	ldrb	r3, [r3, r2]
  4003be:	73fb      	strb	r3, [r7, #15]
  4003c0:	e009      	b.n	4003d6 <SenGetByte+0x3a>
		if(sen1Rptr>=SEN_USART_BUFF_SIZE)
			sen1Rptr = 0;
	}
	else
	{
		dataByte = sen2Buff[sen2Rptr++];
  4003c2:	4b0a      	ldr	r3, [pc, #40]	; (4003ec <SenGetByte+0x50>)
  4003c4:	781b      	ldrb	r3, [r3, #0]
  4003c6:	1c5a      	adds	r2, r3, #1
  4003c8:	b2d1      	uxtb	r1, r2
  4003ca:	4a08      	ldr	r2, [pc, #32]	; (4003ec <SenGetByte+0x50>)
  4003cc:	7011      	strb	r1, [r2, #0]
  4003ce:	461a      	mov	r2, r3
  4003d0:	4b07      	ldr	r3, [pc, #28]	; (4003f0 <SenGetByte+0x54>)
  4003d2:	5c9b      	ldrb	r3, [r3, r2]
  4003d4:	73fb      	strb	r3, [r7, #15]
		if(sen2Rptr>=SEN_USART_BUFF_SIZE)
			sen2Rptr = 0;
	}
	return dataByte;
  4003d6:	7bfb      	ldrb	r3, [r7, #15]
  4003d8:	4618      	mov	r0, r3
  4003da:	3714      	adds	r7, #20
  4003dc:	46bd      	mov	sp, r7
  4003de:	bc80      	pop	{r7}
  4003e0:	4770      	bx	lr
  4003e2:	bf00      	nop
  4003e4:	20001058 	.word	0x20001058
  4003e8:	20000888 	.word	0x20000888
  4003ec:	20001059 	.word	0x20001059
  4003f0:	20000c70 	.word	0x20000c70

004003f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4003f4:	b580      	push	{r7, lr}
  4003f6:	b086      	sub	sp, #24
  4003f8:	af00      	add	r7, sp, #0
  4003fa:	60f8      	str	r0, [r7, #12]
  4003fc:	60b9      	str	r1, [r7, #8]
  4003fe:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400400:	2300      	movs	r3, #0
  400402:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400404:	68fb      	ldr	r3, [r7, #12]
  400406:	2b00      	cmp	r3, #0
  400408:	d012      	beq.n	400430 <_read+0x3c>
		return -1;
  40040a:	f04f 33ff 	mov.w	r3, #4294967295
  40040e:	e013      	b.n	400438 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400410:	4b0b      	ldr	r3, [pc, #44]	; (400440 <_read+0x4c>)
  400412:	681b      	ldr	r3, [r3, #0]
  400414:	4a0b      	ldr	r2, [pc, #44]	; (400444 <_read+0x50>)
  400416:	6812      	ldr	r2, [r2, #0]
  400418:	68b9      	ldr	r1, [r7, #8]
  40041a:	4610      	mov	r0, r2
  40041c:	4798      	blx	r3
		ptr++;
  40041e:	68bb      	ldr	r3, [r7, #8]
  400420:	3301      	adds	r3, #1
  400422:	60bb      	str	r3, [r7, #8]
		nChars++;
  400424:	697b      	ldr	r3, [r7, #20]
  400426:	3301      	adds	r3, #1
  400428:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40042a:	687b      	ldr	r3, [r7, #4]
  40042c:	3b01      	subs	r3, #1
  40042e:	607b      	str	r3, [r7, #4]
  400430:	687b      	ldr	r3, [r7, #4]
  400432:	2b00      	cmp	r3, #0
  400434:	dcec      	bgt.n	400410 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400436:	697b      	ldr	r3, [r7, #20]
}
  400438:	4618      	mov	r0, r3
  40043a:	3718      	adds	r7, #24
  40043c:	46bd      	mov	sp, r7
  40043e:	bd80      	pop	{r7, pc}
  400440:	20001124 	.word	0x20001124
  400444:	2000112c 	.word	0x2000112c

00400448 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400448:	b580      	push	{r7, lr}
  40044a:	b086      	sub	sp, #24
  40044c:	af00      	add	r7, sp, #0
  40044e:	60f8      	str	r0, [r7, #12]
  400450:	60b9      	str	r1, [r7, #8]
  400452:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400454:	2300      	movs	r3, #0
  400456:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400458:	68fb      	ldr	r3, [r7, #12]
  40045a:	2b01      	cmp	r3, #1
  40045c:	d01e      	beq.n	40049c <_write+0x54>
  40045e:	68fb      	ldr	r3, [r7, #12]
  400460:	2b02      	cmp	r3, #2
  400462:	d01b      	beq.n	40049c <_write+0x54>
  400464:	68fb      	ldr	r3, [r7, #12]
  400466:	2b03      	cmp	r3, #3
  400468:	d018      	beq.n	40049c <_write+0x54>
		return -1;
  40046a:	f04f 33ff 	mov.w	r3, #4294967295
  40046e:	e019      	b.n	4004a4 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400470:	4b0e      	ldr	r3, [pc, #56]	; (4004ac <_write+0x64>)
  400472:	681a      	ldr	r2, [r3, #0]
  400474:	4b0e      	ldr	r3, [pc, #56]	; (4004b0 <_write+0x68>)
  400476:	6818      	ldr	r0, [r3, #0]
  400478:	68bb      	ldr	r3, [r7, #8]
  40047a:	1c59      	adds	r1, r3, #1
  40047c:	60b9      	str	r1, [r7, #8]
  40047e:	781b      	ldrb	r3, [r3, #0]
  400480:	4619      	mov	r1, r3
  400482:	4790      	blx	r2
  400484:	4603      	mov	r3, r0
  400486:	2b00      	cmp	r3, #0
  400488:	da02      	bge.n	400490 <_write+0x48>
			return -1;
  40048a:	f04f 33ff 	mov.w	r3, #4294967295
  40048e:	e009      	b.n	4004a4 <_write+0x5c>
		}
		++nChars;
  400490:	697b      	ldr	r3, [r7, #20]
  400492:	3301      	adds	r3, #1
  400494:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400496:	687b      	ldr	r3, [r7, #4]
  400498:	3b01      	subs	r3, #1
  40049a:	607b      	str	r3, [r7, #4]
  40049c:	687b      	ldr	r3, [r7, #4]
  40049e:	2b00      	cmp	r3, #0
  4004a0:	d1e6      	bne.n	400470 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4004a2:	697b      	ldr	r3, [r7, #20]
}
  4004a4:	4618      	mov	r0, r3
  4004a6:	3718      	adds	r7, #24
  4004a8:	46bd      	mov	sp, r7
  4004aa:	bd80      	pop	{r7, pc}
  4004ac:	20001128 	.word	0x20001128
  4004b0:	2000112c 	.word	0x2000112c

004004b4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4004b4:	b580      	push	{r7, lr}
  4004b6:	b084      	sub	sp, #16
  4004b8:	af00      	add	r7, sp, #0
  4004ba:	6078      	str	r0, [r7, #4]
  4004bc:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4004be:	6878      	ldr	r0, [r7, #4]
  4004c0:	4b2c      	ldr	r3, [pc, #176]	; (400574 <pio_handler_process+0xc0>)
  4004c2:	4798      	blx	r3
  4004c4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4004c6:	6878      	ldr	r0, [r7, #4]
  4004c8:	4b2b      	ldr	r3, [pc, #172]	; (400578 <pio_handler_process+0xc4>)
  4004ca:	4798      	blx	r3
  4004cc:	4602      	mov	r2, r0
  4004ce:	68fb      	ldr	r3, [r7, #12]
  4004d0:	4013      	ands	r3, r2
  4004d2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4004d4:	68fb      	ldr	r3, [r7, #12]
  4004d6:	2b00      	cmp	r3, #0
  4004d8:	d03c      	beq.n	400554 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4004da:	2300      	movs	r3, #0
  4004dc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4004de:	e034      	b.n	40054a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4004e0:	4a26      	ldr	r2, [pc, #152]	; (40057c <pio_handler_process+0xc8>)
  4004e2:	68bb      	ldr	r3, [r7, #8]
  4004e4:	011b      	lsls	r3, r3, #4
  4004e6:	4413      	add	r3, r2
  4004e8:	681a      	ldr	r2, [r3, #0]
  4004ea:	683b      	ldr	r3, [r7, #0]
  4004ec:	429a      	cmp	r2, r3
  4004ee:	d126      	bne.n	40053e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004f0:	4a22      	ldr	r2, [pc, #136]	; (40057c <pio_handler_process+0xc8>)
  4004f2:	68bb      	ldr	r3, [r7, #8]
  4004f4:	011b      	lsls	r3, r3, #4
  4004f6:	4413      	add	r3, r2
  4004f8:	3304      	adds	r3, #4
  4004fa:	681a      	ldr	r2, [r3, #0]
  4004fc:	68fb      	ldr	r3, [r7, #12]
  4004fe:	4013      	ands	r3, r2
  400500:	2b00      	cmp	r3, #0
  400502:	d01c      	beq.n	40053e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400504:	4a1d      	ldr	r2, [pc, #116]	; (40057c <pio_handler_process+0xc8>)
  400506:	68bb      	ldr	r3, [r7, #8]
  400508:	011b      	lsls	r3, r3, #4
  40050a:	4413      	add	r3, r2
  40050c:	330c      	adds	r3, #12
  40050e:	681b      	ldr	r3, [r3, #0]
  400510:	491a      	ldr	r1, [pc, #104]	; (40057c <pio_handler_process+0xc8>)
  400512:	68ba      	ldr	r2, [r7, #8]
  400514:	0112      	lsls	r2, r2, #4
  400516:	440a      	add	r2, r1
  400518:	6810      	ldr	r0, [r2, #0]
  40051a:	4918      	ldr	r1, [pc, #96]	; (40057c <pio_handler_process+0xc8>)
  40051c:	68ba      	ldr	r2, [r7, #8]
  40051e:	0112      	lsls	r2, r2, #4
  400520:	440a      	add	r2, r1
  400522:	3204      	adds	r2, #4
  400524:	6812      	ldr	r2, [r2, #0]
  400526:	4611      	mov	r1, r2
  400528:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40052a:	4a14      	ldr	r2, [pc, #80]	; (40057c <pio_handler_process+0xc8>)
  40052c:	68bb      	ldr	r3, [r7, #8]
  40052e:	011b      	lsls	r3, r3, #4
  400530:	4413      	add	r3, r2
  400532:	3304      	adds	r3, #4
  400534:	681b      	ldr	r3, [r3, #0]
  400536:	43db      	mvns	r3, r3
  400538:	68fa      	ldr	r2, [r7, #12]
  40053a:	4013      	ands	r3, r2
  40053c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40053e:	68bb      	ldr	r3, [r7, #8]
  400540:	3301      	adds	r3, #1
  400542:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400544:	68bb      	ldr	r3, [r7, #8]
  400546:	2b06      	cmp	r3, #6
  400548:	d803      	bhi.n	400552 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40054a:	68fb      	ldr	r3, [r7, #12]
  40054c:	2b00      	cmp	r3, #0
  40054e:	d1c7      	bne.n	4004e0 <pio_handler_process+0x2c>
  400550:	e000      	b.n	400554 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400552:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400554:	4b0a      	ldr	r3, [pc, #40]	; (400580 <pio_handler_process+0xcc>)
  400556:	681b      	ldr	r3, [r3, #0]
  400558:	2b00      	cmp	r3, #0
  40055a:	d007      	beq.n	40056c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  40055c:	4b09      	ldr	r3, [pc, #36]	; (400584 <pio_handler_process+0xd0>)
  40055e:	681b      	ldr	r3, [r3, #0]
  400560:	2b00      	cmp	r3, #0
  400562:	d003      	beq.n	40056c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400564:	4b07      	ldr	r3, [pc, #28]	; (400584 <pio_handler_process+0xd0>)
  400566:	681b      	ldr	r3, [r3, #0]
  400568:	6878      	ldr	r0, [r7, #4]
  40056a:	4798      	blx	r3
		}
	}
#endif
}
  40056c:	bf00      	nop
  40056e:	3710      	adds	r7, #16
  400570:	46bd      	mov	sp, r7
  400572:	bd80      	pop	{r7, pc}
  400574:	00400fbd 	.word	0x00400fbd
  400578:	00400fd5 	.word	0x00400fd5
  40057c:	2000105c 	.word	0x2000105c
  400580:	20001130 	.word	0x20001130
  400584:	200010cc 	.word	0x200010cc

00400588 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400588:	b580      	push	{r7, lr}
  40058a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40058c:	210b      	movs	r1, #11
  40058e:	4802      	ldr	r0, [pc, #8]	; (400598 <PIOA_Handler+0x10>)
  400590:	4b02      	ldr	r3, [pc, #8]	; (40059c <PIOA_Handler+0x14>)
  400592:	4798      	blx	r3
}
  400594:	bf00      	nop
  400596:	bd80      	pop	{r7, pc}
  400598:	400e0e00 	.word	0x400e0e00
  40059c:	004004b5 	.word	0x004004b5

004005a0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005a0:	b580      	push	{r7, lr}
  4005a2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4005a4:	210c      	movs	r1, #12
  4005a6:	4802      	ldr	r0, [pc, #8]	; (4005b0 <PIOB_Handler+0x10>)
  4005a8:	4b02      	ldr	r3, [pc, #8]	; (4005b4 <PIOB_Handler+0x14>)
  4005aa:	4798      	blx	r3
}
  4005ac:	bf00      	nop
  4005ae:	bd80      	pop	{r7, pc}
  4005b0:	400e1000 	.word	0x400e1000
  4005b4:	004004b5 	.word	0x004004b5

004005b8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005b8:	b580      	push	{r7, lr}
  4005ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4005bc:	210d      	movs	r1, #13
  4005be:	4802      	ldr	r0, [pc, #8]	; (4005c8 <PIOC_Handler+0x10>)
  4005c0:	4b02      	ldr	r3, [pc, #8]	; (4005cc <PIOC_Handler+0x14>)
  4005c2:	4798      	blx	r3
}
  4005c4:	bf00      	nop
  4005c6:	bd80      	pop	{r7, pc}
  4005c8:	400e1200 	.word	0x400e1200
  4005cc:	004004b5 	.word	0x004004b5

004005d0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4005d0:	b480      	push	{r7}
  4005d2:	b085      	sub	sp, #20
  4005d4:	af00      	add	r7, sp, #0
  4005d6:	6078      	str	r0, [r7, #4]
  4005d8:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4005da:	2300      	movs	r3, #0
  4005dc:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4005de:	687b      	ldr	r3, [r7, #4]
  4005e0:	22ac      	movs	r2, #172	; 0xac
  4005e2:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4005e4:	683b      	ldr	r3, [r7, #0]
  4005e6:	681a      	ldr	r2, [r3, #0]
  4005e8:	683b      	ldr	r3, [r7, #0]
  4005ea:	685b      	ldr	r3, [r3, #4]
  4005ec:	fbb2 f3f3 	udiv	r3, r2, r3
  4005f0:	091b      	lsrs	r3, r3, #4
  4005f2:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4005f4:	68fb      	ldr	r3, [r7, #12]
  4005f6:	2b00      	cmp	r3, #0
  4005f8:	d003      	beq.n	400602 <uart_init+0x32>
  4005fa:	68fb      	ldr	r3, [r7, #12]
  4005fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400600:	d301      	bcc.n	400606 <uart_init+0x36>
		return 1;
  400602:	2301      	movs	r3, #1
  400604:	e00f      	b.n	400626 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  400606:	687b      	ldr	r3, [r7, #4]
  400608:	68fa      	ldr	r2, [r7, #12]
  40060a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40060c:	683b      	ldr	r3, [r7, #0]
  40060e:	689a      	ldr	r2, [r3, #8]
  400610:	687b      	ldr	r3, [r7, #4]
  400612:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400614:	687b      	ldr	r3, [r7, #4]
  400616:	f240 2202 	movw	r2, #514	; 0x202
  40061a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40061e:	687b      	ldr	r3, [r7, #4]
  400620:	2250      	movs	r2, #80	; 0x50
  400622:	601a      	str	r2, [r3, #0]

	return 0;
  400624:	2300      	movs	r3, #0
}
  400626:	4618      	mov	r0, r3
  400628:	3714      	adds	r7, #20
  40062a:	46bd      	mov	sp, r7
  40062c:	bc80      	pop	{r7}
  40062e:	4770      	bx	lr

00400630 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  400630:	b480      	push	{r7}
  400632:	b083      	sub	sp, #12
  400634:	af00      	add	r7, sp, #0
  400636:	6078      	str	r0, [r7, #4]
  400638:	460b      	mov	r3, r1
  40063a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	695b      	ldr	r3, [r3, #20]
  400640:	f003 0302 	and.w	r3, r3, #2
  400644:	2b00      	cmp	r3, #0
  400646:	d101      	bne.n	40064c <uart_write+0x1c>
		return 1;
  400648:	2301      	movs	r3, #1
  40064a:	e003      	b.n	400654 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  40064c:	78fa      	ldrb	r2, [r7, #3]
  40064e:	687b      	ldr	r3, [r7, #4]
  400650:	61da      	str	r2, [r3, #28]
	return 0;
  400652:	2300      	movs	r3, #0
}
  400654:	4618      	mov	r0, r3
  400656:	370c      	adds	r7, #12
  400658:	46bd      	mov	sp, r7
  40065a:	bc80      	pop	{r7}
  40065c:	4770      	bx	lr
  40065e:	bf00      	nop

00400660 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  400660:	b480      	push	{r7}
  400662:	b083      	sub	sp, #12
  400664:	af00      	add	r7, sp, #0
  400666:	6078      	str	r0, [r7, #4]
  400668:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40066a:	687b      	ldr	r3, [r7, #4]
  40066c:	695b      	ldr	r3, [r3, #20]
  40066e:	f003 0301 	and.w	r3, r3, #1
  400672:	2b00      	cmp	r3, #0
  400674:	d101      	bne.n	40067a <uart_read+0x1a>
		return 1;
  400676:	2301      	movs	r3, #1
  400678:	e005      	b.n	400686 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40067a:	687b      	ldr	r3, [r7, #4]
  40067c:	699b      	ldr	r3, [r3, #24]
  40067e:	b2da      	uxtb	r2, r3
  400680:	683b      	ldr	r3, [r7, #0]
  400682:	701a      	strb	r2, [r3, #0]
	return 0;
  400684:	2300      	movs	r3, #0
}
  400686:	4618      	mov	r0, r3
  400688:	370c      	adds	r7, #12
  40068a:	46bd      	mov	sp, r7
  40068c:	bc80      	pop	{r7}
  40068e:	4770      	bx	lr

00400690 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400690:	b480      	push	{r7}
  400692:	b089      	sub	sp, #36	; 0x24
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40069c:	68bb      	ldr	r3, [r7, #8]
  40069e:	011a      	lsls	r2, r3, #4
  4006a0:	687b      	ldr	r3, [r7, #4]
  4006a2:	429a      	cmp	r2, r3
  4006a4:	d802      	bhi.n	4006ac <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4006a6:	2310      	movs	r3, #16
  4006a8:	61fb      	str	r3, [r7, #28]
  4006aa:	e001      	b.n	4006b0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4006ac:	2308      	movs	r3, #8
  4006ae:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	00da      	lsls	r2, r3, #3
  4006b4:	69fb      	ldr	r3, [r7, #28]
  4006b6:	68b9      	ldr	r1, [r7, #8]
  4006b8:	fb01 f303 	mul.w	r3, r1, r3
  4006bc:	085b      	lsrs	r3, r3, #1
  4006be:	441a      	add	r2, r3
  4006c0:	69fb      	ldr	r3, [r7, #28]
  4006c2:	68b9      	ldr	r1, [r7, #8]
  4006c4:	fb01 f303 	mul.w	r3, r1, r3
  4006c8:	fbb2 f3f3 	udiv	r3, r2, r3
  4006cc:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4006ce:	69bb      	ldr	r3, [r7, #24]
  4006d0:	08db      	lsrs	r3, r3, #3
  4006d2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4006d4:	69bb      	ldr	r3, [r7, #24]
  4006d6:	f003 0307 	and.w	r3, r3, #7
  4006da:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4006dc:	697b      	ldr	r3, [r7, #20]
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d003      	beq.n	4006ea <usart_set_async_baudrate+0x5a>
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4006e8:	d301      	bcc.n	4006ee <usart_set_async_baudrate+0x5e>
		return 1;
  4006ea:	2301      	movs	r3, #1
  4006ec:	e00f      	b.n	40070e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4006ee:	69fb      	ldr	r3, [r7, #28]
  4006f0:	2b08      	cmp	r3, #8
  4006f2:	d105      	bne.n	400700 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4006f4:	68fb      	ldr	r3, [r7, #12]
  4006f6:	685b      	ldr	r3, [r3, #4]
  4006f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4006fc:	68fb      	ldr	r3, [r7, #12]
  4006fe:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400700:	693b      	ldr	r3, [r7, #16]
  400702:	041a      	lsls	r2, r3, #16
  400704:	697b      	ldr	r3, [r7, #20]
  400706:	431a      	orrs	r2, r3
  400708:	68fb      	ldr	r3, [r7, #12]
  40070a:	621a      	str	r2, [r3, #32]

	return 0;
  40070c:	2300      	movs	r3, #0
}
  40070e:	4618      	mov	r0, r3
  400710:	3724      	adds	r7, #36	; 0x24
  400712:	46bd      	mov	sp, r7
  400714:	bc80      	pop	{r7}
  400716:	4770      	bx	lr

00400718 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400718:	b580      	push	{r7, lr}
  40071a:	b082      	sub	sp, #8
  40071c:	af00      	add	r7, sp, #0
  40071e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400720:	6878      	ldr	r0, [r7, #4]
  400722:	4b0f      	ldr	r3, [pc, #60]	; (400760 <usart_reset+0x48>)
  400724:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400726:	687b      	ldr	r3, [r7, #4]
  400728:	2200      	movs	r2, #0
  40072a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40072c:	687b      	ldr	r3, [r7, #4]
  40072e:	2200      	movs	r2, #0
  400730:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400732:	687b      	ldr	r3, [r7, #4]
  400734:	2200      	movs	r2, #0
  400736:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400738:	6878      	ldr	r0, [r7, #4]
  40073a:	4b0a      	ldr	r3, [pc, #40]	; (400764 <usart_reset+0x4c>)
  40073c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40073e:	6878      	ldr	r0, [r7, #4]
  400740:	4b09      	ldr	r3, [pc, #36]	; (400768 <usart_reset+0x50>)
  400742:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400744:	6878      	ldr	r0, [r7, #4]
  400746:	4b09      	ldr	r3, [pc, #36]	; (40076c <usart_reset+0x54>)
  400748:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40074a:	6878      	ldr	r0, [r7, #4]
  40074c:	4b08      	ldr	r3, [pc, #32]	; (400770 <usart_reset+0x58>)
  40074e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400750:	6878      	ldr	r0, [r7, #4]
  400752:	4b08      	ldr	r3, [pc, #32]	; (400774 <usart_reset+0x5c>)
  400754:	4798      	blx	r3
#endif
}
  400756:	bf00      	nop
  400758:	3708      	adds	r7, #8
  40075a:	46bd      	mov	sp, r7
  40075c:	bd80      	pop	{r7, pc}
  40075e:	bf00      	nop
  400760:	00400975 	.word	0x00400975
  400764:	0040082d 	.word	0x0040082d
  400768:	0040085d 	.word	0x0040085d
  40076c:	00400875 	.word	0x00400875
  400770:	004008ad 	.word	0x004008ad
  400774:	00400891 	.word	0x00400891

00400778 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400778:	b580      	push	{r7, lr}
  40077a:	b084      	sub	sp, #16
  40077c:	af00      	add	r7, sp, #0
  40077e:	60f8      	str	r0, [r7, #12]
  400780:	60b9      	str	r1, [r7, #8]
  400782:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400784:	68f8      	ldr	r0, [r7, #12]
  400786:	4b1a      	ldr	r3, [pc, #104]	; (4007f0 <usart_init_rs232+0x78>)
  400788:	4798      	blx	r3

	ul_reg_val = 0;
  40078a:	4b1a      	ldr	r3, [pc, #104]	; (4007f4 <usart_init_rs232+0x7c>)
  40078c:	2200      	movs	r2, #0
  40078e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400790:	68bb      	ldr	r3, [r7, #8]
  400792:	2b00      	cmp	r3, #0
  400794:	d009      	beq.n	4007aa <usart_init_rs232+0x32>
  400796:	68bb      	ldr	r3, [r7, #8]
  400798:	681b      	ldr	r3, [r3, #0]
  40079a:	687a      	ldr	r2, [r7, #4]
  40079c:	4619      	mov	r1, r3
  40079e:	68f8      	ldr	r0, [r7, #12]
  4007a0:	4b15      	ldr	r3, [pc, #84]	; (4007f8 <usart_init_rs232+0x80>)
  4007a2:	4798      	blx	r3
  4007a4:	4603      	mov	r3, r0
  4007a6:	2b00      	cmp	r3, #0
  4007a8:	d001      	beq.n	4007ae <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4007aa:	2301      	movs	r3, #1
  4007ac:	e01b      	b.n	4007e6 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007ae:	68bb      	ldr	r3, [r7, #8]
  4007b0:	685a      	ldr	r2, [r3, #4]
  4007b2:	68bb      	ldr	r3, [r7, #8]
  4007b4:	689b      	ldr	r3, [r3, #8]
  4007b6:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007b8:	68bb      	ldr	r3, [r7, #8]
  4007ba:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007bc:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007be:	68bb      	ldr	r3, [r7, #8]
  4007c0:	68db      	ldr	r3, [r3, #12]
  4007c2:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007c4:	4b0b      	ldr	r3, [pc, #44]	; (4007f4 <usart_init_rs232+0x7c>)
  4007c6:	681b      	ldr	r3, [r3, #0]
  4007c8:	4313      	orrs	r3, r2
  4007ca:	4a0a      	ldr	r2, [pc, #40]	; (4007f4 <usart_init_rs232+0x7c>)
  4007cc:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4007ce:	4b09      	ldr	r3, [pc, #36]	; (4007f4 <usart_init_rs232+0x7c>)
  4007d0:	681b      	ldr	r3, [r3, #0]
  4007d2:	4a08      	ldr	r2, [pc, #32]	; (4007f4 <usart_init_rs232+0x7c>)
  4007d4:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4007d6:	68fb      	ldr	r3, [r7, #12]
  4007d8:	685a      	ldr	r2, [r3, #4]
  4007da:	4b06      	ldr	r3, [pc, #24]	; (4007f4 <usart_init_rs232+0x7c>)
  4007dc:	681b      	ldr	r3, [r3, #0]
  4007de:	431a      	orrs	r2, r3
  4007e0:	68fb      	ldr	r3, [r7, #12]
  4007e2:	605a      	str	r2, [r3, #4]

	return 0;
  4007e4:	2300      	movs	r3, #0
}
  4007e6:	4618      	mov	r0, r3
  4007e8:	3710      	adds	r7, #16
  4007ea:	46bd      	mov	sp, r7
  4007ec:	bd80      	pop	{r7, pc}
  4007ee:	bf00      	nop
  4007f0:	00400719 	.word	0x00400719
  4007f4:	200010d0 	.word	0x200010d0
  4007f8:	00400691 	.word	0x00400691

004007fc <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4007fc:	b480      	push	{r7}
  4007fe:	b083      	sub	sp, #12
  400800:	af00      	add	r7, sp, #0
  400802:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400804:	687b      	ldr	r3, [r7, #4]
  400806:	2240      	movs	r2, #64	; 0x40
  400808:	601a      	str	r2, [r3, #0]
}
  40080a:	bf00      	nop
  40080c:	370c      	adds	r7, #12
  40080e:	46bd      	mov	sp, r7
  400810:	bc80      	pop	{r7}
  400812:	4770      	bx	lr

00400814 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  400814:	b480      	push	{r7}
  400816:	b083      	sub	sp, #12
  400818:	af00      	add	r7, sp, #0
  40081a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  40081c:	687b      	ldr	r3, [r7, #4]
  40081e:	2280      	movs	r2, #128	; 0x80
  400820:	601a      	str	r2, [r3, #0]
}
  400822:	bf00      	nop
  400824:	370c      	adds	r7, #12
  400826:	46bd      	mov	sp, r7
  400828:	bc80      	pop	{r7}
  40082a:	4770      	bx	lr

0040082c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40082c:	b480      	push	{r7}
  40082e:	b083      	sub	sp, #12
  400830:	af00      	add	r7, sp, #0
  400832:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400834:	687b      	ldr	r3, [r7, #4]
  400836:	2288      	movs	r2, #136	; 0x88
  400838:	601a      	str	r2, [r3, #0]
}
  40083a:	bf00      	nop
  40083c:	370c      	adds	r7, #12
  40083e:	46bd      	mov	sp, r7
  400840:	bc80      	pop	{r7}
  400842:	4770      	bx	lr

00400844 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400844:	b480      	push	{r7}
  400846:	b083      	sub	sp, #12
  400848:	af00      	add	r7, sp, #0
  40084a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40084c:	687b      	ldr	r3, [r7, #4]
  40084e:	2210      	movs	r2, #16
  400850:	601a      	str	r2, [r3, #0]
}
  400852:	bf00      	nop
  400854:	370c      	adds	r7, #12
  400856:	46bd      	mov	sp, r7
  400858:	bc80      	pop	{r7}
  40085a:	4770      	bx	lr

0040085c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40085c:	b480      	push	{r7}
  40085e:	b083      	sub	sp, #12
  400860:	af00      	add	r7, sp, #0
  400862:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400864:	687b      	ldr	r3, [r7, #4]
  400866:	2224      	movs	r2, #36	; 0x24
  400868:	601a      	str	r2, [r3, #0]
}
  40086a:	bf00      	nop
  40086c:	370c      	adds	r7, #12
  40086e:	46bd      	mov	sp, r7
  400870:	bc80      	pop	{r7}
  400872:	4770      	bx	lr

00400874 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400874:	b480      	push	{r7}
  400876:	b083      	sub	sp, #12
  400878:	af00      	add	r7, sp, #0
  40087a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40087c:	687b      	ldr	r3, [r7, #4]
  40087e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400882:	601a      	str	r2, [r3, #0]
}
  400884:	bf00      	nop
  400886:	370c      	adds	r7, #12
  400888:	46bd      	mov	sp, r7
  40088a:	bc80      	pop	{r7}
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop

00400890 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400890:	b480      	push	{r7}
  400892:	b083      	sub	sp, #12
  400894:	af00      	add	r7, sp, #0
  400896:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400898:	687b      	ldr	r3, [r7, #4]
  40089a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40089e:	601a      	str	r2, [r3, #0]
}
  4008a0:	bf00      	nop
  4008a2:	370c      	adds	r7, #12
  4008a4:	46bd      	mov	sp, r7
  4008a6:	bc80      	pop	{r7}
  4008a8:	4770      	bx	lr
  4008aa:	bf00      	nop

004008ac <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b083      	sub	sp, #12
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4008b4:	687b      	ldr	r3, [r7, #4]
  4008b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4008ba:	601a      	str	r2, [r3, #0]
}
  4008bc:	bf00      	nop
  4008be:	370c      	adds	r7, #12
  4008c0:	46bd      	mov	sp, r7
  4008c2:	bc80      	pop	{r7}
  4008c4:	4770      	bx	lr
  4008c6:	bf00      	nop

004008c8 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4008c8:	b480      	push	{r7}
  4008ca:	b083      	sub	sp, #12
  4008cc:	af00      	add	r7, sp, #0
  4008ce:	6078      	str	r0, [r7, #4]
  4008d0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4008d2:	687b      	ldr	r3, [r7, #4]
  4008d4:	695b      	ldr	r3, [r3, #20]
  4008d6:	f003 0302 	and.w	r3, r3, #2
  4008da:	2b00      	cmp	r3, #0
  4008dc:	d101      	bne.n	4008e2 <usart_write+0x1a>
		return 1;
  4008de:	2301      	movs	r3, #1
  4008e0:	e005      	b.n	4008ee <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4008e2:	683b      	ldr	r3, [r7, #0]
  4008e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4008e8:	687b      	ldr	r3, [r7, #4]
  4008ea:	61da      	str	r2, [r3, #28]
	return 0;
  4008ec:	2300      	movs	r3, #0
}
  4008ee:	4618      	mov	r0, r3
  4008f0:	370c      	adds	r7, #12
  4008f2:	46bd      	mov	sp, r7
  4008f4:	bc80      	pop	{r7}
  4008f6:	4770      	bx	lr

004008f8 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4008f8:	b480      	push	{r7}
  4008fa:	b083      	sub	sp, #12
  4008fc:	af00      	add	r7, sp, #0
  4008fe:	6078      	str	r0, [r7, #4]
  400900:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400902:	687b      	ldr	r3, [r7, #4]
  400904:	695b      	ldr	r3, [r3, #20]
  400906:	f003 0301 	and.w	r3, r3, #1
  40090a:	2b00      	cmp	r3, #0
  40090c:	d101      	bne.n	400912 <usart_read+0x1a>
		return 1;
  40090e:	2301      	movs	r3, #1
  400910:	e006      	b.n	400920 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400912:	687b      	ldr	r3, [r7, #4]
  400914:	699b      	ldr	r3, [r3, #24]
  400916:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40091a:	683b      	ldr	r3, [r7, #0]
  40091c:	601a      	str	r2, [r3, #0]

	return 0;
  40091e:	2300      	movs	r3, #0
}
  400920:	4618      	mov	r0, r3
  400922:	370c      	adds	r7, #12
  400924:	46bd      	mov	sp, r7
  400926:	bc80      	pop	{r7}
  400928:	4770      	bx	lr
  40092a:	bf00      	nop

0040092c <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  40092c:	b480      	push	{r7}
  40092e:	b085      	sub	sp, #20
  400930:	af00      	add	r7, sp, #0
  400932:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  400934:	2300      	movs	r3, #0
  400936:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  400938:	687b      	ldr	r3, [r7, #4]
  40093a:	4a0a      	ldr	r2, [pc, #40]	; (400964 <usart_get_pdc_base+0x38>)
  40093c:	4293      	cmp	r3, r2
  40093e:	d103      	bne.n	400948 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  400940:	4b09      	ldr	r3, [pc, #36]	; (400968 <usart_get_pdc_base+0x3c>)
  400942:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400944:	68fb      	ldr	r3, [r7, #12]
  400946:	e008      	b.n	40095a <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	4a08      	ldr	r2, [pc, #32]	; (40096c <usart_get_pdc_base+0x40>)
  40094c:	4293      	cmp	r3, r2
  40094e:	d103      	bne.n	400958 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  400950:	4b07      	ldr	r3, [pc, #28]	; (400970 <usart_get_pdc_base+0x44>)
  400952:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400954:	68fb      	ldr	r3, [r7, #12]
  400956:	e000      	b.n	40095a <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  400958:	68fb      	ldr	r3, [r7, #12]
}
  40095a:	4618      	mov	r0, r3
  40095c:	3714      	adds	r7, #20
  40095e:	46bd      	mov	sp, r7
  400960:	bc80      	pop	{r7}
  400962:	4770      	bx	lr
  400964:	40024000 	.word	0x40024000
  400968:	40024100 	.word	0x40024100
  40096c:	40028000 	.word	0x40028000
  400970:	40028100 	.word	0x40028100

00400974 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400974:	b480      	push	{r7}
  400976:	b083      	sub	sp, #12
  400978:	af00      	add	r7, sp, #0
  40097a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40097c:	687b      	ldr	r3, [r7, #4]
  40097e:	4a04      	ldr	r2, [pc, #16]	; (400990 <usart_disable_writeprotect+0x1c>)
  400980:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400984:	bf00      	nop
  400986:	370c      	adds	r7, #12
  400988:	46bd      	mov	sp, r7
  40098a:	bc80      	pop	{r7}
  40098c:	4770      	bx	lr
  40098e:	bf00      	nop
  400990:	55534100 	.word	0x55534100

00400994 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400994:	b580      	push	{r7, lr}
  400996:	b082      	sub	sp, #8
  400998:	af00      	add	r7, sp, #0
  40099a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40099c:	687b      	ldr	r3, [r7, #4]
  40099e:	2b07      	cmp	r3, #7
  4009a0:	d831      	bhi.n	400a06 <osc_enable+0x72>
  4009a2:	a201      	add	r2, pc, #4	; (adr r2, 4009a8 <osc_enable+0x14>)
  4009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009a8:	00400a05 	.word	0x00400a05
  4009ac:	004009c9 	.word	0x004009c9
  4009b0:	004009d1 	.word	0x004009d1
  4009b4:	004009d9 	.word	0x004009d9
  4009b8:	004009e1 	.word	0x004009e1
  4009bc:	004009e9 	.word	0x004009e9
  4009c0:	004009f1 	.word	0x004009f1
  4009c4:	004009fb 	.word	0x004009fb
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4009c8:	2000      	movs	r0, #0
  4009ca:	4b11      	ldr	r3, [pc, #68]	; (400a10 <osc_enable+0x7c>)
  4009cc:	4798      	blx	r3
		break;
  4009ce:	e01a      	b.n	400a06 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4009d0:	2001      	movs	r0, #1
  4009d2:	4b0f      	ldr	r3, [pc, #60]	; (400a10 <osc_enable+0x7c>)
  4009d4:	4798      	blx	r3
		break;
  4009d6:	e016      	b.n	400a06 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4009d8:	2000      	movs	r0, #0
  4009da:	4b0e      	ldr	r3, [pc, #56]	; (400a14 <osc_enable+0x80>)
  4009dc:	4798      	blx	r3
		break;
  4009de:	e012      	b.n	400a06 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4009e0:	2010      	movs	r0, #16
  4009e2:	4b0c      	ldr	r3, [pc, #48]	; (400a14 <osc_enable+0x80>)
  4009e4:	4798      	blx	r3
		break;
  4009e6:	e00e      	b.n	400a06 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4009e8:	2020      	movs	r0, #32
  4009ea:	4b0a      	ldr	r3, [pc, #40]	; (400a14 <osc_enable+0x80>)
  4009ec:	4798      	blx	r3
		break;
  4009ee:	e00a      	b.n	400a06 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4009f0:	213e      	movs	r1, #62	; 0x3e
  4009f2:	2000      	movs	r0, #0
  4009f4:	4b08      	ldr	r3, [pc, #32]	; (400a18 <osc_enable+0x84>)
  4009f6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4009f8:	e005      	b.n	400a06 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4009fa:	213e      	movs	r1, #62	; 0x3e
  4009fc:	2001      	movs	r0, #1
  4009fe:	4b06      	ldr	r3, [pc, #24]	; (400a18 <osc_enable+0x84>)
  400a00:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400a02:	e000      	b.n	400a06 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  400a04:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  400a06:	bf00      	nop
  400a08:	3708      	adds	r7, #8
  400a0a:	46bd      	mov	sp, r7
  400a0c:	bd80      	pop	{r7, pc}
  400a0e:	bf00      	nop
  400a10:	0040136d 	.word	0x0040136d
  400a14:	004013d9 	.word	0x004013d9
  400a18:	00401449 	.word	0x00401449

00400a1c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400a1c:	b580      	push	{r7, lr}
  400a1e:	b082      	sub	sp, #8
  400a20:	af00      	add	r7, sp, #0
  400a22:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a24:	687b      	ldr	r3, [r7, #4]
  400a26:	2b07      	cmp	r3, #7
  400a28:	d826      	bhi.n	400a78 <osc_is_ready+0x5c>
  400a2a:	a201      	add	r2, pc, #4	; (adr r2, 400a30 <osc_is_ready+0x14>)
  400a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a30:	00400a51 	.word	0x00400a51
  400a34:	00400a55 	.word	0x00400a55
  400a38:	00400a55 	.word	0x00400a55
  400a3c:	00400a67 	.word	0x00400a67
  400a40:	00400a67 	.word	0x00400a67
  400a44:	00400a67 	.word	0x00400a67
  400a48:	00400a67 	.word	0x00400a67
  400a4c:	00400a67 	.word	0x00400a67
	case OSC_SLCK_32K_RC:
		return 1;
  400a50:	2301      	movs	r3, #1
  400a52:	e012      	b.n	400a7a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400a54:	4b0b      	ldr	r3, [pc, #44]	; (400a84 <osc_is_ready+0x68>)
  400a56:	4798      	blx	r3
  400a58:	4603      	mov	r3, r0
  400a5a:	2b00      	cmp	r3, #0
  400a5c:	bf14      	ite	ne
  400a5e:	2301      	movne	r3, #1
  400a60:	2300      	moveq	r3, #0
  400a62:	b2db      	uxtb	r3, r3
  400a64:	e009      	b.n	400a7a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a66:	4b08      	ldr	r3, [pc, #32]	; (400a88 <osc_is_ready+0x6c>)
  400a68:	4798      	blx	r3
  400a6a:	4603      	mov	r3, r0
  400a6c:	2b00      	cmp	r3, #0
  400a6e:	bf14      	ite	ne
  400a70:	2301      	movne	r3, #1
  400a72:	2300      	moveq	r3, #0
  400a74:	b2db      	uxtb	r3, r3
  400a76:	e000      	b.n	400a7a <osc_is_ready+0x5e>
	}

	return 0;
  400a78:	2300      	movs	r3, #0
}
  400a7a:	4618      	mov	r0, r3
  400a7c:	3708      	adds	r7, #8
  400a7e:	46bd      	mov	sp, r7
  400a80:	bd80      	pop	{r7, pc}
  400a82:	bf00      	nop
  400a84:	004013a5 	.word	0x004013a5
  400a88:	004014c1 	.word	0x004014c1

00400a8c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400a8c:	b480      	push	{r7}
  400a8e:	b083      	sub	sp, #12
  400a90:	af00      	add	r7, sp, #0
  400a92:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a94:	687b      	ldr	r3, [r7, #4]
  400a96:	2b07      	cmp	r3, #7
  400a98:	d825      	bhi.n	400ae6 <osc_get_rate+0x5a>
  400a9a:	a201      	add	r2, pc, #4	; (adr r2, 400aa0 <osc_get_rate+0x14>)
  400a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400aa0:	00400ac1 	.word	0x00400ac1
  400aa4:	00400ac7 	.word	0x00400ac7
  400aa8:	00400acd 	.word	0x00400acd
  400aac:	00400ad3 	.word	0x00400ad3
  400ab0:	00400ad7 	.word	0x00400ad7
  400ab4:	00400adb 	.word	0x00400adb
  400ab8:	00400adf 	.word	0x00400adf
  400abc:	00400ae3 	.word	0x00400ae3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400ac0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400ac4:	e010      	b.n	400ae8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400aca:	e00d      	b.n	400ae8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ad0:	e00a      	b.n	400ae8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400ad2:	4b08      	ldr	r3, [pc, #32]	; (400af4 <osc_get_rate+0x68>)
  400ad4:	e008      	b.n	400ae8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400ad6:	4b08      	ldr	r3, [pc, #32]	; (400af8 <osc_get_rate+0x6c>)
  400ad8:	e006      	b.n	400ae8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400ada:	4b08      	ldr	r3, [pc, #32]	; (400afc <osc_get_rate+0x70>)
  400adc:	e004      	b.n	400ae8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400ade:	4b07      	ldr	r3, [pc, #28]	; (400afc <osc_get_rate+0x70>)
  400ae0:	e002      	b.n	400ae8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400ae2:	4b06      	ldr	r3, [pc, #24]	; (400afc <osc_get_rate+0x70>)
  400ae4:	e000      	b.n	400ae8 <osc_get_rate+0x5c>
	}

	return 0;
  400ae6:	2300      	movs	r3, #0
}
  400ae8:	4618      	mov	r0, r3
  400aea:	370c      	adds	r7, #12
  400aec:	46bd      	mov	sp, r7
  400aee:	bc80      	pop	{r7}
  400af0:	4770      	bx	lr
  400af2:	bf00      	nop
  400af4:	003d0900 	.word	0x003d0900
  400af8:	007a1200 	.word	0x007a1200
  400afc:	00b71b00 	.word	0x00b71b00

00400b00 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400b00:	b580      	push	{r7, lr}
  400b02:	b082      	sub	sp, #8
  400b04:	af00      	add	r7, sp, #0
  400b06:	4603      	mov	r3, r0
  400b08:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400b0a:	bf00      	nop
  400b0c:	79fb      	ldrb	r3, [r7, #7]
  400b0e:	4618      	mov	r0, r3
  400b10:	4b05      	ldr	r3, [pc, #20]	; (400b28 <osc_wait_ready+0x28>)
  400b12:	4798      	blx	r3
  400b14:	4603      	mov	r3, r0
  400b16:	f083 0301 	eor.w	r3, r3, #1
  400b1a:	b2db      	uxtb	r3, r3
  400b1c:	2b00      	cmp	r3, #0
  400b1e:	d1f5      	bne.n	400b0c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400b20:	bf00      	nop
  400b22:	3708      	adds	r7, #8
  400b24:	46bd      	mov	sp, r7
  400b26:	bd80      	pop	{r7, pc}
  400b28:	00400a1d 	.word	0x00400a1d

00400b2c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400b2c:	b580      	push	{r7, lr}
  400b2e:	b086      	sub	sp, #24
  400b30:	af00      	add	r7, sp, #0
  400b32:	60f8      	str	r0, [r7, #12]
  400b34:	607a      	str	r2, [r7, #4]
  400b36:	603b      	str	r3, [r7, #0]
  400b38:	460b      	mov	r3, r1
  400b3a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400b3c:	7afb      	ldrb	r3, [r7, #11]
  400b3e:	4618      	mov	r0, r3
  400b40:	4b0d      	ldr	r3, [pc, #52]	; (400b78 <pll_config_init+0x4c>)
  400b42:	4798      	blx	r3
  400b44:	4602      	mov	r2, r0
  400b46:	687b      	ldr	r3, [r7, #4]
  400b48:	fbb2 f3f3 	udiv	r3, r2, r3
  400b4c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400b4e:	697b      	ldr	r3, [r7, #20]
  400b50:	683a      	ldr	r2, [r7, #0]
  400b52:	fb02 f303 	mul.w	r3, r2, r3
  400b56:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400b58:	683b      	ldr	r3, [r7, #0]
  400b5a:	3b01      	subs	r3, #1
  400b5c:	041a      	lsls	r2, r3, #16
  400b5e:	4b07      	ldr	r3, [pc, #28]	; (400b7c <pll_config_init+0x50>)
  400b60:	4013      	ands	r3, r2
  400b62:	687a      	ldr	r2, [r7, #4]
  400b64:	b2d2      	uxtb	r2, r2
  400b66:	4313      	orrs	r3, r2
  400b68:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400b6c:	68fb      	ldr	r3, [r7, #12]
  400b6e:	601a      	str	r2, [r3, #0]
}
  400b70:	bf00      	nop
  400b72:	3718      	adds	r7, #24
  400b74:	46bd      	mov	sp, r7
  400b76:	bd80      	pop	{r7, pc}
  400b78:	00400a8d 	.word	0x00400a8d
  400b7c:	07ff0000 	.word	0x07ff0000

00400b80 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400b80:	b580      	push	{r7, lr}
  400b82:	b082      	sub	sp, #8
  400b84:	af00      	add	r7, sp, #0
  400b86:	6078      	str	r0, [r7, #4]
  400b88:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400b8a:	683b      	ldr	r3, [r7, #0]
  400b8c:	2b00      	cmp	r3, #0
  400b8e:	d108      	bne.n	400ba2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400b90:	4b09      	ldr	r3, [pc, #36]	; (400bb8 <pll_enable+0x38>)
  400b92:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400b94:	4a09      	ldr	r2, [pc, #36]	; (400bbc <pll_enable+0x3c>)
  400b96:	687b      	ldr	r3, [r7, #4]
  400b98:	681b      	ldr	r3, [r3, #0]
  400b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400b9e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400ba0:	e005      	b.n	400bae <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400ba2:	4b07      	ldr	r3, [pc, #28]	; (400bc0 <pll_enable+0x40>)
  400ba4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400ba6:	4a05      	ldr	r2, [pc, #20]	; (400bbc <pll_enable+0x3c>)
  400ba8:	687b      	ldr	r3, [r7, #4]
  400baa:	681b      	ldr	r3, [r3, #0]
  400bac:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  400bae:	bf00      	nop
  400bb0:	3708      	adds	r7, #8
  400bb2:	46bd      	mov	sp, r7
  400bb4:	bd80      	pop	{r7, pc}
  400bb6:	bf00      	nop
  400bb8:	004014d9 	.word	0x004014d9
  400bbc:	400e0400 	.word	0x400e0400
  400bc0:	00401509 	.word	0x00401509

00400bc4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400bc4:	b580      	push	{r7, lr}
  400bc6:	b082      	sub	sp, #8
  400bc8:	af00      	add	r7, sp, #0
  400bca:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400bcc:	687b      	ldr	r3, [r7, #4]
  400bce:	2b00      	cmp	r3, #0
  400bd0:	d103      	bne.n	400bda <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400bd2:	4b05      	ldr	r3, [pc, #20]	; (400be8 <pll_is_locked+0x24>)
  400bd4:	4798      	blx	r3
  400bd6:	4603      	mov	r3, r0
  400bd8:	e002      	b.n	400be0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400bda:	4b04      	ldr	r3, [pc, #16]	; (400bec <pll_is_locked+0x28>)
  400bdc:	4798      	blx	r3
  400bde:	4603      	mov	r3, r0
	}
}
  400be0:	4618      	mov	r0, r3
  400be2:	3708      	adds	r7, #8
  400be4:	46bd      	mov	sp, r7
  400be6:	bd80      	pop	{r7, pc}
  400be8:	004014f1 	.word	0x004014f1
  400bec:	00401521 	.word	0x00401521

00400bf0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400bf0:	b580      	push	{r7, lr}
  400bf2:	b082      	sub	sp, #8
  400bf4:	af00      	add	r7, sp, #0
  400bf6:	4603      	mov	r3, r0
  400bf8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400bfa:	79fb      	ldrb	r3, [r7, #7]
  400bfc:	3b03      	subs	r3, #3
  400bfe:	2b04      	cmp	r3, #4
  400c00:	d808      	bhi.n	400c14 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400c02:	79fb      	ldrb	r3, [r7, #7]
  400c04:	4618      	mov	r0, r3
  400c06:	4b06      	ldr	r3, [pc, #24]	; (400c20 <pll_enable_source+0x30>)
  400c08:	4798      	blx	r3
		osc_wait_ready(e_src);
  400c0a:	79fb      	ldrb	r3, [r7, #7]
  400c0c:	4618      	mov	r0, r3
  400c0e:	4b05      	ldr	r3, [pc, #20]	; (400c24 <pll_enable_source+0x34>)
  400c10:	4798      	blx	r3
		break;
  400c12:	e000      	b.n	400c16 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400c14:	bf00      	nop
	}
}
  400c16:	bf00      	nop
  400c18:	3708      	adds	r7, #8
  400c1a:	46bd      	mov	sp, r7
  400c1c:	bd80      	pop	{r7, pc}
  400c1e:	bf00      	nop
  400c20:	00400995 	.word	0x00400995
  400c24:	00400b01 	.word	0x00400b01

00400c28 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400c28:	b580      	push	{r7, lr}
  400c2a:	b082      	sub	sp, #8
  400c2c:	af00      	add	r7, sp, #0
  400c2e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400c30:	bf00      	nop
  400c32:	6878      	ldr	r0, [r7, #4]
  400c34:	4b04      	ldr	r3, [pc, #16]	; (400c48 <pll_wait_for_lock+0x20>)
  400c36:	4798      	blx	r3
  400c38:	4603      	mov	r3, r0
  400c3a:	2b00      	cmp	r3, #0
  400c3c:	d0f9      	beq.n	400c32 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400c3e:	2300      	movs	r3, #0
}
  400c40:	4618      	mov	r0, r3
  400c42:	3708      	adds	r7, #8
  400c44:	46bd      	mov	sp, r7
  400c46:	bd80      	pop	{r7, pc}
  400c48:	00400bc5 	.word	0x00400bc5

00400c4c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400c4c:	b580      	push	{r7, lr}
  400c4e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400c50:	2006      	movs	r0, #6
  400c52:	4b04      	ldr	r3, [pc, #16]	; (400c64 <sysclk_get_main_hz+0x18>)
  400c54:	4798      	blx	r3
  400c56:	4602      	mov	r2, r0
  400c58:	4613      	mov	r3, r2
  400c5a:	009b      	lsls	r3, r3, #2
  400c5c:	4413      	add	r3, r2
  400c5e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400c60:	4618      	mov	r0, r3
  400c62:	bd80      	pop	{r7, pc}
  400c64:	00400a8d 	.word	0x00400a8d

00400c68 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400c68:	b580      	push	{r7, lr}
  400c6a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400c6c:	4b02      	ldr	r3, [pc, #8]	; (400c78 <sysclk_get_cpu_hz+0x10>)
  400c6e:	4798      	blx	r3
  400c70:	4603      	mov	r3, r0
  400c72:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400c74:	4618      	mov	r0, r3
  400c76:	bd80      	pop	{r7, pc}
  400c78:	00400c4d 	.word	0x00400c4d

00400c7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400c7c:	b590      	push	{r4, r7, lr}
  400c7e:	b083      	sub	sp, #12
  400c80:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400c82:	4811      	ldr	r0, [pc, #68]	; (400cc8 <sysclk_init+0x4c>)
  400c84:	4b11      	ldr	r3, [pc, #68]	; (400ccc <sysclk_init+0x50>)
  400c86:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400c88:	2006      	movs	r0, #6
  400c8a:	4b11      	ldr	r3, [pc, #68]	; (400cd0 <sysclk_init+0x54>)
  400c8c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400c8e:	1d38      	adds	r0, r7, #4
  400c90:	2314      	movs	r3, #20
  400c92:	2201      	movs	r2, #1
  400c94:	2106      	movs	r1, #6
  400c96:	4c0f      	ldr	r4, [pc, #60]	; (400cd4 <sysclk_init+0x58>)
  400c98:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400c9a:	1d3b      	adds	r3, r7, #4
  400c9c:	2100      	movs	r1, #0
  400c9e:	4618      	mov	r0, r3
  400ca0:	4b0d      	ldr	r3, [pc, #52]	; (400cd8 <sysclk_init+0x5c>)
  400ca2:	4798      	blx	r3
		pll_wait_for_lock(0);
  400ca4:	2000      	movs	r0, #0
  400ca6:	4b0d      	ldr	r3, [pc, #52]	; (400cdc <sysclk_init+0x60>)
  400ca8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400caa:	2010      	movs	r0, #16
  400cac:	4b0c      	ldr	r3, [pc, #48]	; (400ce0 <sysclk_init+0x64>)
  400cae:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400cb0:	4b0c      	ldr	r3, [pc, #48]	; (400ce4 <sysclk_init+0x68>)
  400cb2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400cb4:	4b0c      	ldr	r3, [pc, #48]	; (400ce8 <sysclk_init+0x6c>)
  400cb6:	4798      	blx	r3
  400cb8:	4603      	mov	r3, r0
  400cba:	4618      	mov	r0, r3
  400cbc:	4b03      	ldr	r3, [pc, #12]	; (400ccc <sysclk_init+0x50>)
  400cbe:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400cc0:	bf00      	nop
  400cc2:	370c      	adds	r7, #12
  400cc4:	46bd      	mov	sp, r7
  400cc6:	bd90      	pop	{r4, r7, pc}
  400cc8:	07270e00 	.word	0x07270e00
  400ccc:	004018a5 	.word	0x004018a5
  400cd0:	00400bf1 	.word	0x00400bf1
  400cd4:	00400b2d 	.word	0x00400b2d
  400cd8:	00400b81 	.word	0x00400b81
  400cdc:	00400c29 	.word	0x00400c29
  400ce0:	004012ed 	.word	0x004012ed
  400ce4:	00401709 	.word	0x00401709
  400ce8:	00400c69 	.word	0x00400c69

00400cec <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  400cec:	b480      	push	{r7}
  400cee:	b085      	sub	sp, #20
  400cf0:	af00      	add	r7, sp, #0
  400cf2:	60f8      	str	r0, [r7, #12]
  400cf4:	60b9      	str	r1, [r7, #8]
  400cf6:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400cf8:	68bb      	ldr	r3, [r7, #8]
  400cfa:	2b00      	cmp	r3, #0
  400cfc:	d007      	beq.n	400d0e <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  400cfe:	68bb      	ldr	r3, [r7, #8]
  400d00:	681a      	ldr	r2, [r3, #0]
  400d02:	68fb      	ldr	r3, [r7, #12]
  400d04:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  400d06:	68bb      	ldr	r3, [r7, #8]
  400d08:	685a      	ldr	r2, [r3, #4]
  400d0a:	68fb      	ldr	r3, [r7, #12]
  400d0c:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  400d0e:	687b      	ldr	r3, [r7, #4]
  400d10:	2b00      	cmp	r3, #0
  400d12:	d007      	beq.n	400d24 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  400d14:	687b      	ldr	r3, [r7, #4]
  400d16:	681a      	ldr	r2, [r3, #0]
  400d18:	68fb      	ldr	r3, [r7, #12]
  400d1a:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400d1c:	687b      	ldr	r3, [r7, #4]
  400d1e:	685a      	ldr	r2, [r3, #4]
  400d20:	68fb      	ldr	r3, [r7, #12]
  400d22:	615a      	str	r2, [r3, #20]
	}
}
  400d24:	bf00      	nop
  400d26:	3714      	adds	r7, #20
  400d28:	46bd      	mov	sp, r7
  400d2a:	bc80      	pop	{r7}
  400d2c:	4770      	bx	lr
  400d2e:	bf00      	nop

00400d30 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  400d30:	b480      	push	{r7}
  400d32:	b083      	sub	sp, #12
  400d34:	af00      	add	r7, sp, #0
  400d36:	6078      	str	r0, [r7, #4]
  400d38:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400d3a:	683a      	ldr	r2, [r7, #0]
  400d3c:	f240 1301 	movw	r3, #257	; 0x101
  400d40:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400d42:	687a      	ldr	r2, [r7, #4]
  400d44:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  400d46:	bf00      	nop
  400d48:	370c      	adds	r7, #12
  400d4a:	46bd      	mov	sp, r7
  400d4c:	bc80      	pop	{r7}
  400d4e:	4770      	bx	lr

00400d50 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  400d50:	b480      	push	{r7}
  400d52:	b083      	sub	sp, #12
  400d54:	af00      	add	r7, sp, #0
  400d56:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  400d58:	687b      	ldr	r3, [r7, #4]
  400d5a:	685b      	ldr	r3, [r3, #4]
}
  400d5c:	4618      	mov	r0, r3
  400d5e:	370c      	adds	r7, #12
  400d60:	46bd      	mov	sp, r7
  400d62:	bc80      	pop	{r7}
  400d64:	4770      	bx	lr
  400d66:	bf00      	nop

00400d68 <pdc_read_rx_next_counter>:
 *
 * \return Receive Next Counter Register value.
 */
uint32_t pdc_read_rx_next_counter(
		Pdc *p_pdc)
{
  400d68:	b480      	push	{r7}
  400d6a:	b083      	sub	sp, #12
  400d6c:	af00      	add	r7, sp, #0
  400d6e:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RNCR;
  400d70:	687b      	ldr	r3, [r7, #4]
  400d72:	695b      	ldr	r3, [r3, #20]
}
  400d74:	4618      	mov	r0, r3
  400d76:	370c      	adds	r7, #12
  400d78:	46bd      	mov	sp, r7
  400d7a:	bc80      	pop	{r7}
  400d7c:	4770      	bx	lr
  400d7e:	bf00      	nop

00400d80 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400d80:	b480      	push	{r7}
  400d82:	b085      	sub	sp, #20
  400d84:	af00      	add	r7, sp, #0
  400d86:	60f8      	str	r0, [r7, #12]
  400d88:	60b9      	str	r1, [r7, #8]
  400d8a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d8c:	687b      	ldr	r3, [r7, #4]
  400d8e:	2b00      	cmp	r3, #0
  400d90:	d003      	beq.n	400d9a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400d92:	68fb      	ldr	r3, [r7, #12]
  400d94:	68ba      	ldr	r2, [r7, #8]
  400d96:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400d98:	e002      	b.n	400da0 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d9a:	68fb      	ldr	r3, [r7, #12]
  400d9c:	68ba      	ldr	r2, [r7, #8]
  400d9e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  400da0:	bf00      	nop
  400da2:	3714      	adds	r7, #20
  400da4:	46bd      	mov	sp, r7
  400da6:	bc80      	pop	{r7}
  400da8:	4770      	bx	lr
  400daa:	bf00      	nop

00400dac <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400dac:	b480      	push	{r7}
  400dae:	b087      	sub	sp, #28
  400db0:	af00      	add	r7, sp, #0
  400db2:	60f8      	str	r0, [r7, #12]
  400db4:	60b9      	str	r1, [r7, #8]
  400db6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400db8:	68fb      	ldr	r3, [r7, #12]
  400dba:	687a      	ldr	r2, [r7, #4]
  400dbc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400dbe:	68bb      	ldr	r3, [r7, #8]
  400dc0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400dc4:	d04a      	beq.n	400e5c <pio_set_peripheral+0xb0>
  400dc6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400dca:	d808      	bhi.n	400dde <pio_set_peripheral+0x32>
  400dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400dd0:	d016      	beq.n	400e00 <pio_set_peripheral+0x54>
  400dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400dd6:	d02c      	beq.n	400e32 <pio_set_peripheral+0x86>
  400dd8:	2b00      	cmp	r3, #0
  400dda:	d069      	beq.n	400eb0 <pio_set_peripheral+0x104>
  400ddc:	e064      	b.n	400ea8 <pio_set_peripheral+0xfc>
  400dde:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400de2:	d065      	beq.n	400eb0 <pio_set_peripheral+0x104>
  400de4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400de8:	d803      	bhi.n	400df2 <pio_set_peripheral+0x46>
  400dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400dee:	d04a      	beq.n	400e86 <pio_set_peripheral+0xda>
  400df0:	e05a      	b.n	400ea8 <pio_set_peripheral+0xfc>
  400df2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400df6:	d05b      	beq.n	400eb0 <pio_set_peripheral+0x104>
  400df8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400dfc:	d058      	beq.n	400eb0 <pio_set_peripheral+0x104>
  400dfe:	e053      	b.n	400ea8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e00:	68fb      	ldr	r3, [r7, #12]
  400e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e04:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e06:	68fb      	ldr	r3, [r7, #12]
  400e08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e0a:	687b      	ldr	r3, [r7, #4]
  400e0c:	43d9      	mvns	r1, r3
  400e0e:	697b      	ldr	r3, [r7, #20]
  400e10:	400b      	ands	r3, r1
  400e12:	401a      	ands	r2, r3
  400e14:	68fb      	ldr	r3, [r7, #12]
  400e16:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e18:	68fb      	ldr	r3, [r7, #12]
  400e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400e1c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e1e:	68fb      	ldr	r3, [r7, #12]
  400e20:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e22:	687b      	ldr	r3, [r7, #4]
  400e24:	43d9      	mvns	r1, r3
  400e26:	697b      	ldr	r3, [r7, #20]
  400e28:	400b      	ands	r3, r1
  400e2a:	401a      	ands	r2, r3
  400e2c:	68fb      	ldr	r3, [r7, #12]
  400e2e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400e30:	e03a      	b.n	400ea8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e32:	68fb      	ldr	r3, [r7, #12]
  400e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e36:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e38:	687a      	ldr	r2, [r7, #4]
  400e3a:	697b      	ldr	r3, [r7, #20]
  400e3c:	431a      	orrs	r2, r3
  400e3e:	68fb      	ldr	r3, [r7, #12]
  400e40:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e42:	68fb      	ldr	r3, [r7, #12]
  400e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400e46:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e48:	68fb      	ldr	r3, [r7, #12]
  400e4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e4c:	687b      	ldr	r3, [r7, #4]
  400e4e:	43d9      	mvns	r1, r3
  400e50:	697b      	ldr	r3, [r7, #20]
  400e52:	400b      	ands	r3, r1
  400e54:	401a      	ands	r2, r3
  400e56:	68fb      	ldr	r3, [r7, #12]
  400e58:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400e5a:	e025      	b.n	400ea8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e5c:	68fb      	ldr	r3, [r7, #12]
  400e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e60:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e62:	68fb      	ldr	r3, [r7, #12]
  400e64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e66:	687b      	ldr	r3, [r7, #4]
  400e68:	43d9      	mvns	r1, r3
  400e6a:	697b      	ldr	r3, [r7, #20]
  400e6c:	400b      	ands	r3, r1
  400e6e:	401a      	ands	r2, r3
  400e70:	68fb      	ldr	r3, [r7, #12]
  400e72:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e74:	68fb      	ldr	r3, [r7, #12]
  400e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400e78:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e7a:	687a      	ldr	r2, [r7, #4]
  400e7c:	697b      	ldr	r3, [r7, #20]
  400e7e:	431a      	orrs	r2, r3
  400e80:	68fb      	ldr	r3, [r7, #12]
  400e82:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400e84:	e010      	b.n	400ea8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e86:	68fb      	ldr	r3, [r7, #12]
  400e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e8a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e8c:	687a      	ldr	r2, [r7, #4]
  400e8e:	697b      	ldr	r3, [r7, #20]
  400e90:	431a      	orrs	r2, r3
  400e92:	68fb      	ldr	r3, [r7, #12]
  400e94:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e96:	68fb      	ldr	r3, [r7, #12]
  400e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400e9a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e9c:	687a      	ldr	r2, [r7, #4]
  400e9e:	697b      	ldr	r3, [r7, #20]
  400ea0:	431a      	orrs	r2, r3
  400ea2:	68fb      	ldr	r3, [r7, #12]
  400ea4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400ea6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400ea8:	68fb      	ldr	r3, [r7, #12]
  400eaa:	687a      	ldr	r2, [r7, #4]
  400eac:	605a      	str	r2, [r3, #4]
  400eae:	e000      	b.n	400eb2 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  400eb0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  400eb2:	371c      	adds	r7, #28
  400eb4:	46bd      	mov	sp, r7
  400eb6:	bc80      	pop	{r7}
  400eb8:	4770      	bx	lr
  400eba:	bf00      	nop

00400ebc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400ebc:	b580      	push	{r7, lr}
  400ebe:	b084      	sub	sp, #16
  400ec0:	af00      	add	r7, sp, #0
  400ec2:	60f8      	str	r0, [r7, #12]
  400ec4:	60b9      	str	r1, [r7, #8]
  400ec6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400ec8:	68b9      	ldr	r1, [r7, #8]
  400eca:	68f8      	ldr	r0, [r7, #12]
  400ecc:	4b19      	ldr	r3, [pc, #100]	; (400f34 <pio_set_input+0x78>)
  400ece:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400ed0:	687b      	ldr	r3, [r7, #4]
  400ed2:	f003 0301 	and.w	r3, r3, #1
  400ed6:	461a      	mov	r2, r3
  400ed8:	68b9      	ldr	r1, [r7, #8]
  400eda:	68f8      	ldr	r0, [r7, #12]
  400edc:	4b16      	ldr	r3, [pc, #88]	; (400f38 <pio_set_input+0x7c>)
  400ede:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400ee0:	687b      	ldr	r3, [r7, #4]
  400ee2:	f003 030a 	and.w	r3, r3, #10
  400ee6:	2b00      	cmp	r3, #0
  400ee8:	d003      	beq.n	400ef2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400eea:	68fb      	ldr	r3, [r7, #12]
  400eec:	68ba      	ldr	r2, [r7, #8]
  400eee:	621a      	str	r2, [r3, #32]
  400ef0:	e002      	b.n	400ef8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400ef2:	68fb      	ldr	r3, [r7, #12]
  400ef4:	68ba      	ldr	r2, [r7, #8]
  400ef6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400ef8:	687b      	ldr	r3, [r7, #4]
  400efa:	f003 0302 	and.w	r3, r3, #2
  400efe:	2b00      	cmp	r3, #0
  400f00:	d004      	beq.n	400f0c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400f02:	68fb      	ldr	r3, [r7, #12]
  400f04:	68ba      	ldr	r2, [r7, #8]
  400f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400f0a:	e008      	b.n	400f1e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400f0c:	687b      	ldr	r3, [r7, #4]
  400f0e:	f003 0308 	and.w	r3, r3, #8
  400f12:	2b00      	cmp	r3, #0
  400f14:	d003      	beq.n	400f1e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400f16:	68fb      	ldr	r3, [r7, #12]
  400f18:	68ba      	ldr	r2, [r7, #8]
  400f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400f1e:	68fb      	ldr	r3, [r7, #12]
  400f20:	68ba      	ldr	r2, [r7, #8]
  400f22:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	68ba      	ldr	r2, [r7, #8]
  400f28:	601a      	str	r2, [r3, #0]
}
  400f2a:	bf00      	nop
  400f2c:	3710      	adds	r7, #16
  400f2e:	46bd      	mov	sp, r7
  400f30:	bd80      	pop	{r7, pc}
  400f32:	bf00      	nop
  400f34:	00400fa1 	.word	0x00400fa1
  400f38:	00400d81 	.word	0x00400d81

00400f3c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400f3c:	b580      	push	{r7, lr}
  400f3e:	b084      	sub	sp, #16
  400f40:	af00      	add	r7, sp, #0
  400f42:	60f8      	str	r0, [r7, #12]
  400f44:	60b9      	str	r1, [r7, #8]
  400f46:	607a      	str	r2, [r7, #4]
  400f48:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400f4a:	68b9      	ldr	r1, [r7, #8]
  400f4c:	68f8      	ldr	r0, [r7, #12]
  400f4e:	4b12      	ldr	r3, [pc, #72]	; (400f98 <pio_set_output+0x5c>)
  400f50:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400f52:	69ba      	ldr	r2, [r7, #24]
  400f54:	68b9      	ldr	r1, [r7, #8]
  400f56:	68f8      	ldr	r0, [r7, #12]
  400f58:	4b10      	ldr	r3, [pc, #64]	; (400f9c <pio_set_output+0x60>)
  400f5a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400f5c:	683b      	ldr	r3, [r7, #0]
  400f5e:	2b00      	cmp	r3, #0
  400f60:	d003      	beq.n	400f6a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400f62:	68fb      	ldr	r3, [r7, #12]
  400f64:	68ba      	ldr	r2, [r7, #8]
  400f66:	651a      	str	r2, [r3, #80]	; 0x50
  400f68:	e002      	b.n	400f70 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400f6a:	68fb      	ldr	r3, [r7, #12]
  400f6c:	68ba      	ldr	r2, [r7, #8]
  400f6e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400f70:	687b      	ldr	r3, [r7, #4]
  400f72:	2b00      	cmp	r3, #0
  400f74:	d003      	beq.n	400f7e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400f76:	68fb      	ldr	r3, [r7, #12]
  400f78:	68ba      	ldr	r2, [r7, #8]
  400f7a:	631a      	str	r2, [r3, #48]	; 0x30
  400f7c:	e002      	b.n	400f84 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400f7e:	68fb      	ldr	r3, [r7, #12]
  400f80:	68ba      	ldr	r2, [r7, #8]
  400f82:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400f84:	68fb      	ldr	r3, [r7, #12]
  400f86:	68ba      	ldr	r2, [r7, #8]
  400f88:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400f8a:	68fb      	ldr	r3, [r7, #12]
  400f8c:	68ba      	ldr	r2, [r7, #8]
  400f8e:	601a      	str	r2, [r3, #0]
}
  400f90:	bf00      	nop
  400f92:	3710      	adds	r7, #16
  400f94:	46bd      	mov	sp, r7
  400f96:	bd80      	pop	{r7, pc}
  400f98:	00400fa1 	.word	0x00400fa1
  400f9c:	00400d81 	.word	0x00400d81

00400fa0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400fa0:	b480      	push	{r7}
  400fa2:	b083      	sub	sp, #12
  400fa4:	af00      	add	r7, sp, #0
  400fa6:	6078      	str	r0, [r7, #4]
  400fa8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	683a      	ldr	r2, [r7, #0]
  400fae:	645a      	str	r2, [r3, #68]	; 0x44
}
  400fb0:	bf00      	nop
  400fb2:	370c      	adds	r7, #12
  400fb4:	46bd      	mov	sp, r7
  400fb6:	bc80      	pop	{r7}
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop

00400fbc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400fbc:	b480      	push	{r7}
  400fbe:	b083      	sub	sp, #12
  400fc0:	af00      	add	r7, sp, #0
  400fc2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400fc8:	4618      	mov	r0, r3
  400fca:	370c      	adds	r7, #12
  400fcc:	46bd      	mov	sp, r7
  400fce:	bc80      	pop	{r7}
  400fd0:	4770      	bx	lr
  400fd2:	bf00      	nop

00400fd4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400fd4:	b480      	push	{r7}
  400fd6:	b083      	sub	sp, #12
  400fd8:	af00      	add	r7, sp, #0
  400fda:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400fdc:	687b      	ldr	r3, [r7, #4]
  400fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400fe0:	4618      	mov	r0, r3
  400fe2:	370c      	adds	r7, #12
  400fe4:	46bd      	mov	sp, r7
  400fe6:	bc80      	pop	{r7}
  400fe8:	4770      	bx	lr
  400fea:	bf00      	nop

00400fec <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400fec:	b590      	push	{r4, r7, lr}
  400fee:	b087      	sub	sp, #28
  400ff0:	af02      	add	r7, sp, #8
  400ff2:	6078      	str	r0, [r7, #4]
  400ff4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400ff6:	6878      	ldr	r0, [r7, #4]
  400ff8:	4b63      	ldr	r3, [pc, #396]	; (401188 <pio_configure_pin+0x19c>)
  400ffa:	4798      	blx	r3
  400ffc:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400ffe:	683b      	ldr	r3, [r7, #0]
  401000:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401008:	d067      	beq.n	4010da <pio_configure_pin+0xee>
  40100a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40100e:	d809      	bhi.n	401024 <pio_configure_pin+0x38>
  401010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401014:	d02b      	beq.n	40106e <pio_configure_pin+0x82>
  401016:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40101a:	d043      	beq.n	4010a4 <pio_configure_pin+0xb8>
  40101c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401020:	d00a      	beq.n	401038 <pio_configure_pin+0x4c>
  401022:	e0a9      	b.n	401178 <pio_configure_pin+0x18c>
  401024:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401028:	d07e      	beq.n	401128 <pio_configure_pin+0x13c>
  40102a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40102e:	d07b      	beq.n	401128 <pio_configure_pin+0x13c>
  401030:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401034:	d06c      	beq.n	401110 <pio_configure_pin+0x124>
  401036:	e09f      	b.n	401178 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401038:	687b      	ldr	r3, [r7, #4]
  40103a:	f003 031f 	and.w	r3, r3, #31
  40103e:	2201      	movs	r2, #1
  401040:	fa02 f303 	lsl.w	r3, r2, r3
  401044:	461a      	mov	r2, r3
  401046:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40104a:	68f8      	ldr	r0, [r7, #12]
  40104c:	4b4f      	ldr	r3, [pc, #316]	; (40118c <pio_configure_pin+0x1a0>)
  40104e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401050:	687b      	ldr	r3, [r7, #4]
  401052:	f003 031f 	and.w	r3, r3, #31
  401056:	2201      	movs	r2, #1
  401058:	fa02 f303 	lsl.w	r3, r2, r3
  40105c:	4619      	mov	r1, r3
  40105e:	683b      	ldr	r3, [r7, #0]
  401060:	f003 0301 	and.w	r3, r3, #1
  401064:	461a      	mov	r2, r3
  401066:	68f8      	ldr	r0, [r7, #12]
  401068:	4b49      	ldr	r3, [pc, #292]	; (401190 <pio_configure_pin+0x1a4>)
  40106a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40106c:	e086      	b.n	40117c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40106e:	687b      	ldr	r3, [r7, #4]
  401070:	f003 031f 	and.w	r3, r3, #31
  401074:	2201      	movs	r2, #1
  401076:	fa02 f303 	lsl.w	r3, r2, r3
  40107a:	461a      	mov	r2, r3
  40107c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401080:	68f8      	ldr	r0, [r7, #12]
  401082:	4b42      	ldr	r3, [pc, #264]	; (40118c <pio_configure_pin+0x1a0>)
  401084:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401086:	687b      	ldr	r3, [r7, #4]
  401088:	f003 031f 	and.w	r3, r3, #31
  40108c:	2201      	movs	r2, #1
  40108e:	fa02 f303 	lsl.w	r3, r2, r3
  401092:	4619      	mov	r1, r3
  401094:	683b      	ldr	r3, [r7, #0]
  401096:	f003 0301 	and.w	r3, r3, #1
  40109a:	461a      	mov	r2, r3
  40109c:	68f8      	ldr	r0, [r7, #12]
  40109e:	4b3c      	ldr	r3, [pc, #240]	; (401190 <pio_configure_pin+0x1a4>)
  4010a0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010a2:	e06b      	b.n	40117c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4010a4:	687b      	ldr	r3, [r7, #4]
  4010a6:	f003 031f 	and.w	r3, r3, #31
  4010aa:	2201      	movs	r2, #1
  4010ac:	fa02 f303 	lsl.w	r3, r2, r3
  4010b0:	461a      	mov	r2, r3
  4010b2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4010b6:	68f8      	ldr	r0, [r7, #12]
  4010b8:	4b34      	ldr	r3, [pc, #208]	; (40118c <pio_configure_pin+0x1a0>)
  4010ba:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	f003 031f 	and.w	r3, r3, #31
  4010c2:	2201      	movs	r2, #1
  4010c4:	fa02 f303 	lsl.w	r3, r2, r3
  4010c8:	4619      	mov	r1, r3
  4010ca:	683b      	ldr	r3, [r7, #0]
  4010cc:	f003 0301 	and.w	r3, r3, #1
  4010d0:	461a      	mov	r2, r3
  4010d2:	68f8      	ldr	r0, [r7, #12]
  4010d4:	4b2e      	ldr	r3, [pc, #184]	; (401190 <pio_configure_pin+0x1a4>)
  4010d6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010d8:	e050      	b.n	40117c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4010da:	687b      	ldr	r3, [r7, #4]
  4010dc:	f003 031f 	and.w	r3, r3, #31
  4010e0:	2201      	movs	r2, #1
  4010e2:	fa02 f303 	lsl.w	r3, r2, r3
  4010e6:	461a      	mov	r2, r3
  4010e8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4010ec:	68f8      	ldr	r0, [r7, #12]
  4010ee:	4b27      	ldr	r3, [pc, #156]	; (40118c <pio_configure_pin+0x1a0>)
  4010f0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4010f2:	687b      	ldr	r3, [r7, #4]
  4010f4:	f003 031f 	and.w	r3, r3, #31
  4010f8:	2201      	movs	r2, #1
  4010fa:	fa02 f303 	lsl.w	r3, r2, r3
  4010fe:	4619      	mov	r1, r3
  401100:	683b      	ldr	r3, [r7, #0]
  401102:	f003 0301 	and.w	r3, r3, #1
  401106:	461a      	mov	r2, r3
  401108:	68f8      	ldr	r0, [r7, #12]
  40110a:	4b21      	ldr	r3, [pc, #132]	; (401190 <pio_configure_pin+0x1a4>)
  40110c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40110e:	e035      	b.n	40117c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401110:	687b      	ldr	r3, [r7, #4]
  401112:	f003 031f 	and.w	r3, r3, #31
  401116:	2201      	movs	r2, #1
  401118:	fa02 f303 	lsl.w	r3, r2, r3
  40111c:	683a      	ldr	r2, [r7, #0]
  40111e:	4619      	mov	r1, r3
  401120:	68f8      	ldr	r0, [r7, #12]
  401122:	4b1c      	ldr	r3, [pc, #112]	; (401194 <pio_configure_pin+0x1a8>)
  401124:	4798      	blx	r3
		break;
  401126:	e029      	b.n	40117c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401128:	687b      	ldr	r3, [r7, #4]
  40112a:	f003 031f 	and.w	r3, r3, #31
  40112e:	2201      	movs	r2, #1
  401130:	fa02 f303 	lsl.w	r3, r2, r3
  401134:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401136:	683b      	ldr	r3, [r7, #0]
  401138:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40113c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401140:	bf0c      	ite	eq
  401142:	2301      	moveq	r3, #1
  401144:	2300      	movne	r3, #0
  401146:	b2db      	uxtb	r3, r3
  401148:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40114a:	683b      	ldr	r3, [r7, #0]
  40114c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401150:	2b00      	cmp	r3, #0
  401152:	bf14      	ite	ne
  401154:	2301      	movne	r3, #1
  401156:	2300      	moveq	r3, #0
  401158:	b2db      	uxtb	r3, r3
  40115a:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40115c:	683b      	ldr	r3, [r7, #0]
  40115e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401162:	2b00      	cmp	r3, #0
  401164:	bf14      	ite	ne
  401166:	2301      	movne	r3, #1
  401168:	2300      	moveq	r3, #0
  40116a:	b2db      	uxtb	r3, r3
  40116c:	9300      	str	r3, [sp, #0]
  40116e:	4603      	mov	r3, r0
  401170:	68f8      	ldr	r0, [r7, #12]
  401172:	4c09      	ldr	r4, [pc, #36]	; (401198 <pio_configure_pin+0x1ac>)
  401174:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401176:	e001      	b.n	40117c <pio_configure_pin+0x190>

	default:
		return 0;
  401178:	2300      	movs	r3, #0
  40117a:	e000      	b.n	40117e <pio_configure_pin+0x192>
	}

	return 1;
  40117c:	2301      	movs	r3, #1
}
  40117e:	4618      	mov	r0, r3
  401180:	3714      	adds	r7, #20
  401182:	46bd      	mov	sp, r7
  401184:	bd90      	pop	{r4, r7, pc}
  401186:	bf00      	nop
  401188:	004012c9 	.word	0x004012c9
  40118c:	00400dad 	.word	0x00400dad
  401190:	00400d81 	.word	0x00400d81
  401194:	00400ebd 	.word	0x00400ebd
  401198:	00400f3d 	.word	0x00400f3d

0040119c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40119c:	b590      	push	{r4, r7, lr}
  40119e:	b087      	sub	sp, #28
  4011a0:	af02      	add	r7, sp, #8
  4011a2:	60f8      	str	r0, [r7, #12]
  4011a4:	60b9      	str	r1, [r7, #8]
  4011a6:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4011a8:	687b      	ldr	r3, [r7, #4]
  4011aa:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4011ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4011b2:	d043      	beq.n	40123c <pio_configure_pin_group+0xa0>
  4011b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4011b8:	d809      	bhi.n	4011ce <pio_configure_pin_group+0x32>
  4011ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4011be:	d01f      	beq.n	401200 <pio_configure_pin_group+0x64>
  4011c0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4011c4:	d02b      	beq.n	40121e <pio_configure_pin_group+0x82>
  4011c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4011ca:	d00a      	beq.n	4011e2 <pio_configure_pin_group+0x46>
  4011cc:	e06d      	b.n	4012aa <pio_configure_pin_group+0x10e>
  4011ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4011d2:	d048      	beq.n	401266 <pio_configure_pin_group+0xca>
  4011d4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4011d8:	d045      	beq.n	401266 <pio_configure_pin_group+0xca>
  4011da:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4011de:	d03c      	beq.n	40125a <pio_configure_pin_group+0xbe>
  4011e0:	e063      	b.n	4012aa <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4011e2:	68ba      	ldr	r2, [r7, #8]
  4011e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4011e8:	68f8      	ldr	r0, [r7, #12]
  4011ea:	4b33      	ldr	r3, [pc, #204]	; (4012b8 <pio_configure_pin_group+0x11c>)
  4011ec:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4011ee:	687b      	ldr	r3, [r7, #4]
  4011f0:	f003 0301 	and.w	r3, r3, #1
  4011f4:	461a      	mov	r2, r3
  4011f6:	68b9      	ldr	r1, [r7, #8]
  4011f8:	68f8      	ldr	r0, [r7, #12]
  4011fa:	4b30      	ldr	r3, [pc, #192]	; (4012bc <pio_configure_pin_group+0x120>)
  4011fc:	4798      	blx	r3
		break;
  4011fe:	e056      	b.n	4012ae <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401200:	68ba      	ldr	r2, [r7, #8]
  401202:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401206:	68f8      	ldr	r0, [r7, #12]
  401208:	4b2b      	ldr	r3, [pc, #172]	; (4012b8 <pio_configure_pin_group+0x11c>)
  40120a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40120c:	687b      	ldr	r3, [r7, #4]
  40120e:	f003 0301 	and.w	r3, r3, #1
  401212:	461a      	mov	r2, r3
  401214:	68b9      	ldr	r1, [r7, #8]
  401216:	68f8      	ldr	r0, [r7, #12]
  401218:	4b28      	ldr	r3, [pc, #160]	; (4012bc <pio_configure_pin_group+0x120>)
  40121a:	4798      	blx	r3
		break;
  40121c:	e047      	b.n	4012ae <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40121e:	68ba      	ldr	r2, [r7, #8]
  401220:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401224:	68f8      	ldr	r0, [r7, #12]
  401226:	4b24      	ldr	r3, [pc, #144]	; (4012b8 <pio_configure_pin_group+0x11c>)
  401228:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40122a:	687b      	ldr	r3, [r7, #4]
  40122c:	f003 0301 	and.w	r3, r3, #1
  401230:	461a      	mov	r2, r3
  401232:	68b9      	ldr	r1, [r7, #8]
  401234:	68f8      	ldr	r0, [r7, #12]
  401236:	4b21      	ldr	r3, [pc, #132]	; (4012bc <pio_configure_pin_group+0x120>)
  401238:	4798      	blx	r3
		break;
  40123a:	e038      	b.n	4012ae <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40123c:	68ba      	ldr	r2, [r7, #8]
  40123e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401242:	68f8      	ldr	r0, [r7, #12]
  401244:	4b1c      	ldr	r3, [pc, #112]	; (4012b8 <pio_configure_pin_group+0x11c>)
  401246:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401248:	687b      	ldr	r3, [r7, #4]
  40124a:	f003 0301 	and.w	r3, r3, #1
  40124e:	461a      	mov	r2, r3
  401250:	68b9      	ldr	r1, [r7, #8]
  401252:	68f8      	ldr	r0, [r7, #12]
  401254:	4b19      	ldr	r3, [pc, #100]	; (4012bc <pio_configure_pin_group+0x120>)
  401256:	4798      	blx	r3
		break;
  401258:	e029      	b.n	4012ae <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40125a:	687a      	ldr	r2, [r7, #4]
  40125c:	68b9      	ldr	r1, [r7, #8]
  40125e:	68f8      	ldr	r0, [r7, #12]
  401260:	4b17      	ldr	r3, [pc, #92]	; (4012c0 <pio_configure_pin_group+0x124>)
  401262:	4798      	blx	r3
		break;
  401264:	e023      	b.n	4012ae <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401266:	687b      	ldr	r3, [r7, #4]
  401268:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40126c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401270:	bf0c      	ite	eq
  401272:	2301      	moveq	r3, #1
  401274:	2300      	movne	r3, #0
  401276:	b2db      	uxtb	r3, r3
  401278:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40127a:	687b      	ldr	r3, [r7, #4]
  40127c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401280:	2b00      	cmp	r3, #0
  401282:	bf14      	ite	ne
  401284:	2301      	movne	r3, #1
  401286:	2300      	moveq	r3, #0
  401288:	b2db      	uxtb	r3, r3
  40128a:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40128c:	687b      	ldr	r3, [r7, #4]
  40128e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401292:	2b00      	cmp	r3, #0
  401294:	bf14      	ite	ne
  401296:	2301      	movne	r3, #1
  401298:	2300      	moveq	r3, #0
  40129a:	b2db      	uxtb	r3, r3
  40129c:	9300      	str	r3, [sp, #0]
  40129e:	460b      	mov	r3, r1
  4012a0:	68b9      	ldr	r1, [r7, #8]
  4012a2:	68f8      	ldr	r0, [r7, #12]
  4012a4:	4c07      	ldr	r4, [pc, #28]	; (4012c4 <pio_configure_pin_group+0x128>)
  4012a6:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4012a8:	e001      	b.n	4012ae <pio_configure_pin_group+0x112>

	default:
		return 0;
  4012aa:	2300      	movs	r3, #0
  4012ac:	e000      	b.n	4012b0 <pio_configure_pin_group+0x114>
	}

	return 1;
  4012ae:	2301      	movs	r3, #1
}
  4012b0:	4618      	mov	r0, r3
  4012b2:	3714      	adds	r7, #20
  4012b4:	46bd      	mov	sp, r7
  4012b6:	bd90      	pop	{r4, r7, pc}
  4012b8:	00400dad 	.word	0x00400dad
  4012bc:	00400d81 	.word	0x00400d81
  4012c0:	00400ebd 	.word	0x00400ebd
  4012c4:	00400f3d 	.word	0x00400f3d

004012c8 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4012c8:	b480      	push	{r7}
  4012ca:	b085      	sub	sp, #20
  4012cc:	af00      	add	r7, sp, #0
  4012ce:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4012d0:	687b      	ldr	r3, [r7, #4]
  4012d2:	095b      	lsrs	r3, r3, #5
  4012d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4012d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4012dc:	025b      	lsls	r3, r3, #9
  4012de:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4012e0:	68fb      	ldr	r3, [r7, #12]
}
  4012e2:	4618      	mov	r0, r3
  4012e4:	3714      	adds	r7, #20
  4012e6:	46bd      	mov	sp, r7
  4012e8:	bc80      	pop	{r7}
  4012ea:	4770      	bx	lr

004012ec <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4012ec:	b480      	push	{r7}
  4012ee:	b085      	sub	sp, #20
  4012f0:	af00      	add	r7, sp, #0
  4012f2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4012f4:	491c      	ldr	r1, [pc, #112]	; (401368 <pmc_switch_mck_to_pllack+0x7c>)
  4012f6:	4b1c      	ldr	r3, [pc, #112]	; (401368 <pmc_switch_mck_to_pllack+0x7c>)
  4012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4012fe:	687b      	ldr	r3, [r7, #4]
  401300:	4313      	orrs	r3, r2
  401302:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401304:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401308:	60fb      	str	r3, [r7, #12]
  40130a:	e007      	b.n	40131c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40130c:	68fb      	ldr	r3, [r7, #12]
  40130e:	2b00      	cmp	r3, #0
  401310:	d101      	bne.n	401316 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401312:	2301      	movs	r3, #1
  401314:	e023      	b.n	40135e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401316:	68fb      	ldr	r3, [r7, #12]
  401318:	3b01      	subs	r3, #1
  40131a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40131c:	4b12      	ldr	r3, [pc, #72]	; (401368 <pmc_switch_mck_to_pllack+0x7c>)
  40131e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401320:	f003 0308 	and.w	r3, r3, #8
  401324:	2b00      	cmp	r3, #0
  401326:	d0f1      	beq.n	40130c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401328:	4a0f      	ldr	r2, [pc, #60]	; (401368 <pmc_switch_mck_to_pllack+0x7c>)
  40132a:	4b0f      	ldr	r3, [pc, #60]	; (401368 <pmc_switch_mck_to_pllack+0x7c>)
  40132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40132e:	f023 0303 	bic.w	r3, r3, #3
  401332:	f043 0302 	orr.w	r3, r3, #2
  401336:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401338:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40133c:	60fb      	str	r3, [r7, #12]
  40133e:	e007      	b.n	401350 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401340:	68fb      	ldr	r3, [r7, #12]
  401342:	2b00      	cmp	r3, #0
  401344:	d101      	bne.n	40134a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401346:	2301      	movs	r3, #1
  401348:	e009      	b.n	40135e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40134a:	68fb      	ldr	r3, [r7, #12]
  40134c:	3b01      	subs	r3, #1
  40134e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401350:	4b05      	ldr	r3, [pc, #20]	; (401368 <pmc_switch_mck_to_pllack+0x7c>)
  401352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401354:	f003 0308 	and.w	r3, r3, #8
  401358:	2b00      	cmp	r3, #0
  40135a:	d0f1      	beq.n	401340 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40135c:	2300      	movs	r3, #0
}
  40135e:	4618      	mov	r0, r3
  401360:	3714      	adds	r7, #20
  401362:	46bd      	mov	sp, r7
  401364:	bc80      	pop	{r7}
  401366:	4770      	bx	lr
  401368:	400e0400 	.word	0x400e0400

0040136c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40136c:	b480      	push	{r7}
  40136e:	b083      	sub	sp, #12
  401370:	af00      	add	r7, sp, #0
  401372:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401374:	687b      	ldr	r3, [r7, #4]
  401376:	2b01      	cmp	r3, #1
  401378:	d107      	bne.n	40138a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40137a:	4a08      	ldr	r2, [pc, #32]	; (40139c <pmc_switch_sclk_to_32kxtal+0x30>)
  40137c:	4b07      	ldr	r3, [pc, #28]	; (40139c <pmc_switch_sclk_to_32kxtal+0x30>)
  40137e:	689b      	ldr	r3, [r3, #8]
  401380:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401388:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40138a:	4b04      	ldr	r3, [pc, #16]	; (40139c <pmc_switch_sclk_to_32kxtal+0x30>)
  40138c:	4a04      	ldr	r2, [pc, #16]	; (4013a0 <pmc_switch_sclk_to_32kxtal+0x34>)
  40138e:	601a      	str	r2, [r3, #0]
}
  401390:	bf00      	nop
  401392:	370c      	adds	r7, #12
  401394:	46bd      	mov	sp, r7
  401396:	bc80      	pop	{r7}
  401398:	4770      	bx	lr
  40139a:	bf00      	nop
  40139c:	400e1410 	.word	0x400e1410
  4013a0:	a5000008 	.word	0xa5000008

004013a4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4013a4:	b480      	push	{r7}
  4013a6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4013a8:	4b09      	ldr	r3, [pc, #36]	; (4013d0 <pmc_osc_is_ready_32kxtal+0x2c>)
  4013aa:	695b      	ldr	r3, [r3, #20]
  4013ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4013b0:	2b00      	cmp	r3, #0
  4013b2:	d007      	beq.n	4013c4 <pmc_osc_is_ready_32kxtal+0x20>
  4013b4:	4b07      	ldr	r3, [pc, #28]	; (4013d4 <pmc_osc_is_ready_32kxtal+0x30>)
  4013b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4013bc:	2b00      	cmp	r3, #0
  4013be:	d001      	beq.n	4013c4 <pmc_osc_is_ready_32kxtal+0x20>
  4013c0:	2301      	movs	r3, #1
  4013c2:	e000      	b.n	4013c6 <pmc_osc_is_ready_32kxtal+0x22>
  4013c4:	2300      	movs	r3, #0
}
  4013c6:	4618      	mov	r0, r3
  4013c8:	46bd      	mov	sp, r7
  4013ca:	bc80      	pop	{r7}
  4013cc:	4770      	bx	lr
  4013ce:	bf00      	nop
  4013d0:	400e1410 	.word	0x400e1410
  4013d4:	400e0400 	.word	0x400e0400

004013d8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4013d8:	b480      	push	{r7}
  4013da:	b083      	sub	sp, #12
  4013dc:	af00      	add	r7, sp, #0
  4013de:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4013e0:	4a18      	ldr	r2, [pc, #96]	; (401444 <pmc_switch_mainck_to_fastrc+0x6c>)
  4013e2:	4b18      	ldr	r3, [pc, #96]	; (401444 <pmc_switch_mainck_to_fastrc+0x6c>)
  4013e4:	6a1b      	ldr	r3, [r3, #32]
  4013e6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013ea:	f043 0308 	orr.w	r3, r3, #8
  4013ee:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4013f0:	bf00      	nop
  4013f2:	4b14      	ldr	r3, [pc, #80]	; (401444 <pmc_switch_mainck_to_fastrc+0x6c>)
  4013f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	d0f9      	beq.n	4013f2 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4013fe:	4911      	ldr	r1, [pc, #68]	; (401444 <pmc_switch_mainck_to_fastrc+0x6c>)
  401400:	4b10      	ldr	r3, [pc, #64]	; (401444 <pmc_switch_mainck_to_fastrc+0x6c>)
  401402:	6a1b      	ldr	r3, [r3, #32]
  401404:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40140c:	687a      	ldr	r2, [r7, #4]
  40140e:	4313      	orrs	r3, r2
  401410:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401414:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401416:	bf00      	nop
  401418:	4b0a      	ldr	r3, [pc, #40]	; (401444 <pmc_switch_mainck_to_fastrc+0x6c>)
  40141a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401420:	2b00      	cmp	r3, #0
  401422:	d0f9      	beq.n	401418 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401424:	4a07      	ldr	r2, [pc, #28]	; (401444 <pmc_switch_mainck_to_fastrc+0x6c>)
  401426:	4b07      	ldr	r3, [pc, #28]	; (401444 <pmc_switch_mainck_to_fastrc+0x6c>)
  401428:	6a1b      	ldr	r3, [r3, #32]
  40142a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40142e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401432:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401436:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401438:	bf00      	nop
  40143a:	370c      	adds	r7, #12
  40143c:	46bd      	mov	sp, r7
  40143e:	bc80      	pop	{r7}
  401440:	4770      	bx	lr
  401442:	bf00      	nop
  401444:	400e0400 	.word	0x400e0400

00401448 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401448:	b480      	push	{r7}
  40144a:	b083      	sub	sp, #12
  40144c:	af00      	add	r7, sp, #0
  40144e:	6078      	str	r0, [r7, #4]
  401450:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401452:	687b      	ldr	r3, [r7, #4]
  401454:	2b00      	cmp	r3, #0
  401456:	d008      	beq.n	40146a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401458:	4916      	ldr	r1, [pc, #88]	; (4014b4 <pmc_switch_mainck_to_xtal+0x6c>)
  40145a:	4b16      	ldr	r3, [pc, #88]	; (4014b4 <pmc_switch_mainck_to_xtal+0x6c>)
  40145c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40145e:	4a16      	ldr	r2, [pc, #88]	; (4014b8 <pmc_switch_mainck_to_xtal+0x70>)
  401460:	401a      	ands	r2, r3
  401462:	4b16      	ldr	r3, [pc, #88]	; (4014bc <pmc_switch_mainck_to_xtal+0x74>)
  401464:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401466:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401468:	e01e      	b.n	4014a8 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40146a:	4912      	ldr	r1, [pc, #72]	; (4014b4 <pmc_switch_mainck_to_xtal+0x6c>)
  40146c:	4b11      	ldr	r3, [pc, #68]	; (4014b4 <pmc_switch_mainck_to_xtal+0x6c>)
  40146e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401470:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401474:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401478:	683a      	ldr	r2, [r7, #0]
  40147a:	0212      	lsls	r2, r2, #8
  40147c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40147e:	4313      	orrs	r3, r2
  401480:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401484:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401488:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40148a:	bf00      	nop
  40148c:	4b09      	ldr	r3, [pc, #36]	; (4014b4 <pmc_switch_mainck_to_xtal+0x6c>)
  40148e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401490:	f003 0301 	and.w	r3, r3, #1
  401494:	2b00      	cmp	r3, #0
  401496:	d0f9      	beq.n	40148c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401498:	4a06      	ldr	r2, [pc, #24]	; (4014b4 <pmc_switch_mainck_to_xtal+0x6c>)
  40149a:	4b06      	ldr	r3, [pc, #24]	; (4014b4 <pmc_switch_mainck_to_xtal+0x6c>)
  40149c:	6a1b      	ldr	r3, [r3, #32]
  40149e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4014a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4014a6:	6213      	str	r3, [r2, #32]
	}
}
  4014a8:	bf00      	nop
  4014aa:	370c      	adds	r7, #12
  4014ac:	46bd      	mov	sp, r7
  4014ae:	bc80      	pop	{r7}
  4014b0:	4770      	bx	lr
  4014b2:	bf00      	nop
  4014b4:	400e0400 	.word	0x400e0400
  4014b8:	fec8fffc 	.word	0xfec8fffc
  4014bc:	01370002 	.word	0x01370002

004014c0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4014c0:	b480      	push	{r7}
  4014c2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4014c4:	4b03      	ldr	r3, [pc, #12]	; (4014d4 <pmc_osc_is_ready_mainck+0x14>)
  4014c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4014cc:	4618      	mov	r0, r3
  4014ce:	46bd      	mov	sp, r7
  4014d0:	bc80      	pop	{r7}
  4014d2:	4770      	bx	lr
  4014d4:	400e0400 	.word	0x400e0400

004014d8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4014d8:	b480      	push	{r7}
  4014da:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4014dc:	4b03      	ldr	r3, [pc, #12]	; (4014ec <pmc_disable_pllack+0x14>)
  4014de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4014e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4014e4:	bf00      	nop
  4014e6:	46bd      	mov	sp, r7
  4014e8:	bc80      	pop	{r7}
  4014ea:	4770      	bx	lr
  4014ec:	400e0400 	.word	0x400e0400

004014f0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4014f0:	b480      	push	{r7}
  4014f2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4014f4:	4b03      	ldr	r3, [pc, #12]	; (401504 <pmc_is_locked_pllack+0x14>)
  4014f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014f8:	f003 0302 	and.w	r3, r3, #2
}
  4014fc:	4618      	mov	r0, r3
  4014fe:	46bd      	mov	sp, r7
  401500:	bc80      	pop	{r7}
  401502:	4770      	bx	lr
  401504:	400e0400 	.word	0x400e0400

00401508 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401508:	b480      	push	{r7}
  40150a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40150c:	4b03      	ldr	r3, [pc, #12]	; (40151c <pmc_disable_pllbck+0x14>)
  40150e:	2200      	movs	r2, #0
  401510:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401512:	bf00      	nop
  401514:	46bd      	mov	sp, r7
  401516:	bc80      	pop	{r7}
  401518:	4770      	bx	lr
  40151a:	bf00      	nop
  40151c:	400e0400 	.word	0x400e0400

00401520 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401520:	b480      	push	{r7}
  401522:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401524:	4b03      	ldr	r3, [pc, #12]	; (401534 <pmc_is_locked_pllbck+0x14>)
  401526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401528:	f003 0304 	and.w	r3, r3, #4
}
  40152c:	4618      	mov	r0, r3
  40152e:	46bd      	mov	sp, r7
  401530:	bc80      	pop	{r7}
  401532:	4770      	bx	lr
  401534:	400e0400 	.word	0x400e0400

00401538 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401538:	b480      	push	{r7}
  40153a:	b083      	sub	sp, #12
  40153c:	af00      	add	r7, sp, #0
  40153e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401540:	687b      	ldr	r3, [r7, #4]
  401542:	2b22      	cmp	r3, #34	; 0x22
  401544:	d901      	bls.n	40154a <pmc_enable_periph_clk+0x12>
		return 1;
  401546:	2301      	movs	r3, #1
  401548:	e02f      	b.n	4015aa <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40154a:	687b      	ldr	r3, [r7, #4]
  40154c:	2b1f      	cmp	r3, #31
  40154e:	d813      	bhi.n	401578 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401550:	4b18      	ldr	r3, [pc, #96]	; (4015b4 <pmc_enable_periph_clk+0x7c>)
  401552:	699a      	ldr	r2, [r3, #24]
  401554:	2101      	movs	r1, #1
  401556:	687b      	ldr	r3, [r7, #4]
  401558:	fa01 f303 	lsl.w	r3, r1, r3
  40155c:	401a      	ands	r2, r3
  40155e:	2101      	movs	r1, #1
  401560:	687b      	ldr	r3, [r7, #4]
  401562:	fa01 f303 	lsl.w	r3, r1, r3
  401566:	429a      	cmp	r2, r3
  401568:	d01e      	beq.n	4015a8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40156a:	4a12      	ldr	r2, [pc, #72]	; (4015b4 <pmc_enable_periph_clk+0x7c>)
  40156c:	2101      	movs	r1, #1
  40156e:	687b      	ldr	r3, [r7, #4]
  401570:	fa01 f303 	lsl.w	r3, r1, r3
  401574:	6113      	str	r3, [r2, #16]
  401576:	e017      	b.n	4015a8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401578:	687b      	ldr	r3, [r7, #4]
  40157a:	3b20      	subs	r3, #32
  40157c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40157e:	4b0d      	ldr	r3, [pc, #52]	; (4015b4 <pmc_enable_periph_clk+0x7c>)
  401580:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401584:	2101      	movs	r1, #1
  401586:	687b      	ldr	r3, [r7, #4]
  401588:	fa01 f303 	lsl.w	r3, r1, r3
  40158c:	401a      	ands	r2, r3
  40158e:	2101      	movs	r1, #1
  401590:	687b      	ldr	r3, [r7, #4]
  401592:	fa01 f303 	lsl.w	r3, r1, r3
  401596:	429a      	cmp	r2, r3
  401598:	d006      	beq.n	4015a8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40159a:	4a06      	ldr	r2, [pc, #24]	; (4015b4 <pmc_enable_periph_clk+0x7c>)
  40159c:	2101      	movs	r1, #1
  40159e:	687b      	ldr	r3, [r7, #4]
  4015a0:	fa01 f303 	lsl.w	r3, r1, r3
  4015a4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4015a8:	2300      	movs	r3, #0
}
  4015aa:	4618      	mov	r0, r3
  4015ac:	370c      	adds	r7, #12
  4015ae:	46bd      	mov	sp, r7
  4015b0:	bc80      	pop	{r7}
  4015b2:	4770      	bx	lr
  4015b4:	400e0400 	.word	0x400e0400

004015b8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4015b8:	b580      	push	{r7, lr}
  4015ba:	b082      	sub	sp, #8
  4015bc:	af00      	add	r7, sp, #0
  4015be:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4015c0:	6878      	ldr	r0, [r7, #4]
  4015c2:	4b03      	ldr	r3, [pc, #12]	; (4015d0 <sysclk_enable_peripheral_clock+0x18>)
  4015c4:	4798      	blx	r3
}
  4015c6:	bf00      	nop
  4015c8:	3708      	adds	r7, #8
  4015ca:	46bd      	mov	sp, r7
  4015cc:	bd80      	pop	{r7, pc}
  4015ce:	bf00      	nop
  4015d0:	00401539 	.word	0x00401539

004015d4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4015d4:	b580      	push	{r7, lr}
  4015d6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4015d8:	200b      	movs	r0, #11
  4015da:	4b05      	ldr	r3, [pc, #20]	; (4015f0 <ioport_init+0x1c>)
  4015dc:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4015de:	200c      	movs	r0, #12
  4015e0:	4b03      	ldr	r3, [pc, #12]	; (4015f0 <ioport_init+0x1c>)
  4015e2:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4015e4:	200d      	movs	r0, #13
  4015e6:	4b02      	ldr	r3, [pc, #8]	; (4015f0 <ioport_init+0x1c>)
  4015e8:	4798      	blx	r3
	arch_ioport_init();
}
  4015ea:	bf00      	nop
  4015ec:	bd80      	pop	{r7, pc}
  4015ee:	bf00      	nop
  4015f0:	004015b9 	.word	0x004015b9

004015f4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4015f4:	b580      	push	{r7, lr}
  4015f6:	af00      	add	r7, sp, #0
	/* Init IO Port service to enable configuring pins */
	ioport_init();
  4015f8:	4b0b      	ldr	r3, [pc, #44]	; (401628 <board_init+0x34>)
  4015fa:	4798      	blx	r3

	/* Configure UART1 pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4015fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401600:	210c      	movs	r1, #12
  401602:	480a      	ldr	r0, [pc, #40]	; (40162c <board_init+0x38>)
  401604:	4b0a      	ldr	r3, [pc, #40]	; (401630 <board_init+0x3c>)
  401606:	4798      	blx	r3

	/* Configure USART0 pins */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  401608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40160c:	2160      	movs	r1, #96	; 0x60
  40160e:	4809      	ldr	r0, [pc, #36]	; (401634 <board_init+0x40>)
  401610:	4b07      	ldr	r3, [pc, #28]	; (401630 <board_init+0x3c>)
  401612:	4798      	blx	r3

	/* Configure USART1 pins */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  401614:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401618:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
  40161c:	4805      	ldr	r0, [pc, #20]	; (401634 <board_init+0x40>)
  40161e:	4b04      	ldr	r3, [pc, #16]	; (401630 <board_init+0x3c>)
  401620:	4798      	blx	r3
}
  401622:	bf00      	nop
  401624:	bd80      	pop	{r7, pc}
  401626:	bf00      	nop
  401628:	004015d5 	.word	0x004015d5
  40162c:	400e1000 	.word	0x400e1000
  401630:	0040119d 	.word	0x0040119d
  401634:	400e0e00 	.word	0x400e0e00

00401638 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401638:	b580      	push	{r7, lr}
  40163a:	b084      	sub	sp, #16
  40163c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40163e:	4b27      	ldr	r3, [pc, #156]	; (4016dc <Reset_Handler+0xa4>)
  401640:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401642:	4b27      	ldr	r3, [pc, #156]	; (4016e0 <Reset_Handler+0xa8>)
  401644:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401646:	68fa      	ldr	r2, [r7, #12]
  401648:	68bb      	ldr	r3, [r7, #8]
  40164a:	429a      	cmp	r2, r3
  40164c:	d90d      	bls.n	40166a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40164e:	e007      	b.n	401660 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401650:	68bb      	ldr	r3, [r7, #8]
  401652:	1d1a      	adds	r2, r3, #4
  401654:	60ba      	str	r2, [r7, #8]
  401656:	68fa      	ldr	r2, [r7, #12]
  401658:	1d11      	adds	r1, r2, #4
  40165a:	60f9      	str	r1, [r7, #12]
  40165c:	6812      	ldr	r2, [r2, #0]
  40165e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401660:	68bb      	ldr	r3, [r7, #8]
  401662:	4a20      	ldr	r2, [pc, #128]	; (4016e4 <Reset_Handler+0xac>)
  401664:	4293      	cmp	r3, r2
  401666:	d3f3      	bcc.n	401650 <Reset_Handler+0x18>
  401668:	e020      	b.n	4016ac <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40166a:	68fa      	ldr	r2, [r7, #12]
  40166c:	68bb      	ldr	r3, [r7, #8]
  40166e:	429a      	cmp	r2, r3
  401670:	d21c      	bcs.n	4016ac <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401672:	4a1c      	ldr	r2, [pc, #112]	; (4016e4 <Reset_Handler+0xac>)
  401674:	4b1a      	ldr	r3, [pc, #104]	; (4016e0 <Reset_Handler+0xa8>)
  401676:	1ad3      	subs	r3, r2, r3
  401678:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40167a:	68fa      	ldr	r2, [r7, #12]
  40167c:	687b      	ldr	r3, [r7, #4]
  40167e:	4413      	add	r3, r2
  401680:	3b04      	subs	r3, #4
  401682:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401684:	68ba      	ldr	r2, [r7, #8]
  401686:	687b      	ldr	r3, [r7, #4]
  401688:	4413      	add	r3, r2
  40168a:	3b04      	subs	r3, #4
  40168c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40168e:	e00a      	b.n	4016a6 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401690:	68bb      	ldr	r3, [r7, #8]
  401692:	1f1a      	subs	r2, r3, #4
  401694:	60ba      	str	r2, [r7, #8]
  401696:	68fa      	ldr	r2, [r7, #12]
  401698:	1f11      	subs	r1, r2, #4
  40169a:	60f9      	str	r1, [r7, #12]
  40169c:	6812      	ldr	r2, [r2, #0]
  40169e:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4016a0:	687b      	ldr	r3, [r7, #4]
  4016a2:	3b04      	subs	r3, #4
  4016a4:	607b      	str	r3, [r7, #4]
  4016a6:	687b      	ldr	r3, [r7, #4]
  4016a8:	2b00      	cmp	r3, #0
  4016aa:	d1f1      	bne.n	401690 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4016ac:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4016ae:	4b0e      	ldr	r3, [pc, #56]	; (4016e8 <Reset_Handler+0xb0>)
  4016b0:	60bb      	str	r3, [r7, #8]
  4016b2:	e004      	b.n	4016be <Reset_Handler+0x86>
		*pDest++ = 0;
  4016b4:	68bb      	ldr	r3, [r7, #8]
  4016b6:	1d1a      	adds	r2, r3, #4
  4016b8:	60ba      	str	r2, [r7, #8]
  4016ba:	2200      	movs	r2, #0
  4016bc:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4016be:	68bb      	ldr	r3, [r7, #8]
  4016c0:	4a0a      	ldr	r2, [pc, #40]	; (4016ec <Reset_Handler+0xb4>)
  4016c2:	4293      	cmp	r3, r2
  4016c4:	d3f6      	bcc.n	4016b4 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4016c6:	4b0a      	ldr	r3, [pc, #40]	; (4016f0 <Reset_Handler+0xb8>)
  4016c8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4016ca:	4a0a      	ldr	r2, [pc, #40]	; (4016f4 <Reset_Handler+0xbc>)
  4016cc:	68fb      	ldr	r3, [r7, #12]
  4016ce:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4016d0:	4b09      	ldr	r3, [pc, #36]	; (4016f8 <Reset_Handler+0xc0>)
  4016d2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4016d4:	4b09      	ldr	r3, [pc, #36]	; (4016fc <Reset_Handler+0xc4>)
  4016d6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4016d8:	e7fe      	b.n	4016d8 <Reset_Handler+0xa0>
  4016da:	bf00      	nop
  4016dc:	00405128 	.word	0x00405128
  4016e0:	20000000 	.word	0x20000000
  4016e4:	2000086c 	.word	0x2000086c
  4016e8:	2000086c 	.word	0x2000086c
  4016ec:	2000113c 	.word	0x2000113c
  4016f0:	00400000 	.word	0x00400000
  4016f4:	e000ed00 	.word	0xe000ed00
  4016f8:	0040201d 	.word	0x0040201d
  4016fc:	00401d91 	.word	0x00401d91

00401700 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401700:	b480      	push	{r7}
  401702:	af00      	add	r7, sp, #0
	while (1) {
	}
  401704:	e7fe      	b.n	401704 <Dummy_Handler+0x4>
  401706:	bf00      	nop

00401708 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  401708:	b480      	push	{r7}
  40170a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40170c:	4b5d      	ldr	r3, [pc, #372]	; (401884 <SystemCoreClockUpdate+0x17c>)
  40170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401710:	f003 0303 	and.w	r3, r3, #3
  401714:	2b03      	cmp	r3, #3
  401716:	f200 8096 	bhi.w	401846 <SystemCoreClockUpdate+0x13e>
  40171a:	a201      	add	r2, pc, #4	; (adr r2, 401720 <SystemCoreClockUpdate+0x18>)
  40171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401720:	00401731 	.word	0x00401731
  401724:	00401751 	.word	0x00401751
  401728:	0040179b 	.word	0x0040179b
  40172c:	0040179b 	.word	0x0040179b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401730:	4b55      	ldr	r3, [pc, #340]	; (401888 <SystemCoreClockUpdate+0x180>)
  401732:	695b      	ldr	r3, [r3, #20]
  401734:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401738:	2b00      	cmp	r3, #0
  40173a:	d004      	beq.n	401746 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40173c:	4b53      	ldr	r3, [pc, #332]	; (40188c <SystemCoreClockUpdate+0x184>)
  40173e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401742:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401744:	e080      	b.n	401848 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401746:	4b51      	ldr	r3, [pc, #324]	; (40188c <SystemCoreClockUpdate+0x184>)
  401748:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40174c:	601a      	str	r2, [r3, #0]
			}
		break;
  40174e:	e07b      	b.n	401848 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401750:	4b4c      	ldr	r3, [pc, #304]	; (401884 <SystemCoreClockUpdate+0x17c>)
  401752:	6a1b      	ldr	r3, [r3, #32]
  401754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401758:	2b00      	cmp	r3, #0
  40175a:	d003      	beq.n	401764 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40175c:	4b4b      	ldr	r3, [pc, #300]	; (40188c <SystemCoreClockUpdate+0x184>)
  40175e:	4a4c      	ldr	r2, [pc, #304]	; (401890 <SystemCoreClockUpdate+0x188>)
  401760:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401762:	e071      	b.n	401848 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401764:	4b49      	ldr	r3, [pc, #292]	; (40188c <SystemCoreClockUpdate+0x184>)
  401766:	4a4b      	ldr	r2, [pc, #300]	; (401894 <SystemCoreClockUpdate+0x18c>)
  401768:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40176a:	4b46      	ldr	r3, [pc, #280]	; (401884 <SystemCoreClockUpdate+0x17c>)
  40176c:	6a1b      	ldr	r3, [r3, #32]
  40176e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401772:	2b10      	cmp	r3, #16
  401774:	d008      	beq.n	401788 <SystemCoreClockUpdate+0x80>
  401776:	2b20      	cmp	r3, #32
  401778:	d00a      	beq.n	401790 <SystemCoreClockUpdate+0x88>
  40177a:	2b00      	cmp	r3, #0
  40177c:	d000      	beq.n	401780 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40177e:	e00b      	b.n	401798 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401780:	4b42      	ldr	r3, [pc, #264]	; (40188c <SystemCoreClockUpdate+0x184>)
  401782:	4a44      	ldr	r2, [pc, #272]	; (401894 <SystemCoreClockUpdate+0x18c>)
  401784:	601a      	str	r2, [r3, #0]
			break;
  401786:	e007      	b.n	401798 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401788:	4b40      	ldr	r3, [pc, #256]	; (40188c <SystemCoreClockUpdate+0x184>)
  40178a:	4a43      	ldr	r2, [pc, #268]	; (401898 <SystemCoreClockUpdate+0x190>)
  40178c:	601a      	str	r2, [r3, #0]
			break;
  40178e:	e003      	b.n	401798 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401790:	4b3e      	ldr	r3, [pc, #248]	; (40188c <SystemCoreClockUpdate+0x184>)
  401792:	4a3f      	ldr	r2, [pc, #252]	; (401890 <SystemCoreClockUpdate+0x188>)
  401794:	601a      	str	r2, [r3, #0]
			break;
  401796:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  401798:	e056      	b.n	401848 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40179a:	4b3a      	ldr	r3, [pc, #232]	; (401884 <SystemCoreClockUpdate+0x17c>)
  40179c:	6a1b      	ldr	r3, [r3, #32]
  40179e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4017a2:	2b00      	cmp	r3, #0
  4017a4:	d003      	beq.n	4017ae <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4017a6:	4b39      	ldr	r3, [pc, #228]	; (40188c <SystemCoreClockUpdate+0x184>)
  4017a8:	4a39      	ldr	r2, [pc, #228]	; (401890 <SystemCoreClockUpdate+0x188>)
  4017aa:	601a      	str	r2, [r3, #0]
  4017ac:	e019      	b.n	4017e2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017ae:	4b37      	ldr	r3, [pc, #220]	; (40188c <SystemCoreClockUpdate+0x184>)
  4017b0:	4a38      	ldr	r2, [pc, #224]	; (401894 <SystemCoreClockUpdate+0x18c>)
  4017b2:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4017b4:	4b33      	ldr	r3, [pc, #204]	; (401884 <SystemCoreClockUpdate+0x17c>)
  4017b6:	6a1b      	ldr	r3, [r3, #32]
  4017b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017bc:	2b10      	cmp	r3, #16
  4017be:	d008      	beq.n	4017d2 <SystemCoreClockUpdate+0xca>
  4017c0:	2b20      	cmp	r3, #32
  4017c2:	d00a      	beq.n	4017da <SystemCoreClockUpdate+0xd2>
  4017c4:	2b00      	cmp	r3, #0
  4017c6:	d000      	beq.n	4017ca <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4017c8:	e00b      	b.n	4017e2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017ca:	4b30      	ldr	r3, [pc, #192]	; (40188c <SystemCoreClockUpdate+0x184>)
  4017cc:	4a31      	ldr	r2, [pc, #196]	; (401894 <SystemCoreClockUpdate+0x18c>)
  4017ce:	601a      	str	r2, [r3, #0]
					break;
  4017d0:	e007      	b.n	4017e2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4017d2:	4b2e      	ldr	r3, [pc, #184]	; (40188c <SystemCoreClockUpdate+0x184>)
  4017d4:	4a30      	ldr	r2, [pc, #192]	; (401898 <SystemCoreClockUpdate+0x190>)
  4017d6:	601a      	str	r2, [r3, #0]
					break;
  4017d8:	e003      	b.n	4017e2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4017da:	4b2c      	ldr	r3, [pc, #176]	; (40188c <SystemCoreClockUpdate+0x184>)
  4017dc:	4a2c      	ldr	r2, [pc, #176]	; (401890 <SystemCoreClockUpdate+0x188>)
  4017de:	601a      	str	r2, [r3, #0]
					break;
  4017e0:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4017e2:	4b28      	ldr	r3, [pc, #160]	; (401884 <SystemCoreClockUpdate+0x17c>)
  4017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017e6:	f003 0303 	and.w	r3, r3, #3
  4017ea:	2b02      	cmp	r3, #2
  4017ec:	d115      	bne.n	40181a <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4017ee:	4b25      	ldr	r3, [pc, #148]	; (401884 <SystemCoreClockUpdate+0x17c>)
  4017f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4017f2:	4b2a      	ldr	r3, [pc, #168]	; (40189c <SystemCoreClockUpdate+0x194>)
  4017f4:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4017f6:	0c1b      	lsrs	r3, r3, #16
  4017f8:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4017fa:	4a24      	ldr	r2, [pc, #144]	; (40188c <SystemCoreClockUpdate+0x184>)
  4017fc:	6812      	ldr	r2, [r2, #0]
  4017fe:	fb02 f303 	mul.w	r3, r2, r3
  401802:	4a22      	ldr	r2, [pc, #136]	; (40188c <SystemCoreClockUpdate+0x184>)
  401804:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401806:	4b1f      	ldr	r3, [pc, #124]	; (401884 <SystemCoreClockUpdate+0x17c>)
  401808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40180a:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40180c:	4a1f      	ldr	r2, [pc, #124]	; (40188c <SystemCoreClockUpdate+0x184>)
  40180e:	6812      	ldr	r2, [r2, #0]
  401810:	fbb2 f3f3 	udiv	r3, r2, r3
  401814:	4a1d      	ldr	r2, [pc, #116]	; (40188c <SystemCoreClockUpdate+0x184>)
  401816:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401818:	e016      	b.n	401848 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40181a:	4b1a      	ldr	r3, [pc, #104]	; (401884 <SystemCoreClockUpdate+0x17c>)
  40181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40181e:	4b1f      	ldr	r3, [pc, #124]	; (40189c <SystemCoreClockUpdate+0x194>)
  401820:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401822:	0c1b      	lsrs	r3, r3, #16
  401824:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401826:	4a19      	ldr	r2, [pc, #100]	; (40188c <SystemCoreClockUpdate+0x184>)
  401828:	6812      	ldr	r2, [r2, #0]
  40182a:	fb02 f303 	mul.w	r3, r2, r3
  40182e:	4a17      	ldr	r2, [pc, #92]	; (40188c <SystemCoreClockUpdate+0x184>)
  401830:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401832:	4b14      	ldr	r3, [pc, #80]	; (401884 <SystemCoreClockUpdate+0x17c>)
  401834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  401836:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401838:	4a14      	ldr	r2, [pc, #80]	; (40188c <SystemCoreClockUpdate+0x184>)
  40183a:	6812      	ldr	r2, [r2, #0]
  40183c:	fbb2 f3f3 	udiv	r3, r2, r3
  401840:	4a12      	ldr	r2, [pc, #72]	; (40188c <SystemCoreClockUpdate+0x184>)
  401842:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401844:	e000      	b.n	401848 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  401846:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401848:	4b0e      	ldr	r3, [pc, #56]	; (401884 <SystemCoreClockUpdate+0x17c>)
  40184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40184c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401850:	2b70      	cmp	r3, #112	; 0x70
  401852:	d108      	bne.n	401866 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401854:	4b0d      	ldr	r3, [pc, #52]	; (40188c <SystemCoreClockUpdate+0x184>)
  401856:	681b      	ldr	r3, [r3, #0]
  401858:	4a11      	ldr	r2, [pc, #68]	; (4018a0 <SystemCoreClockUpdate+0x198>)
  40185a:	fba2 2303 	umull	r2, r3, r2, r3
  40185e:	085b      	lsrs	r3, r3, #1
  401860:	4a0a      	ldr	r2, [pc, #40]	; (40188c <SystemCoreClockUpdate+0x184>)
  401862:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401864:	e00a      	b.n	40187c <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401866:	4b07      	ldr	r3, [pc, #28]	; (401884 <SystemCoreClockUpdate+0x17c>)
  401868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40186a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40186e:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401870:	4a06      	ldr	r2, [pc, #24]	; (40188c <SystemCoreClockUpdate+0x184>)
  401872:	6812      	ldr	r2, [r2, #0]
  401874:	fa22 f303 	lsr.w	r3, r2, r3
  401878:	4a04      	ldr	r2, [pc, #16]	; (40188c <SystemCoreClockUpdate+0x184>)
  40187a:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  40187c:	bf00      	nop
  40187e:	46bd      	mov	sp, r7
  401880:	bc80      	pop	{r7}
  401882:	4770      	bx	lr
  401884:	400e0400 	.word	0x400e0400
  401888:	400e1410 	.word	0x400e1410
  40188c:	20000000 	.word	0x20000000
  401890:	00b71b00 	.word	0x00b71b00
  401894:	003d0900 	.word	0x003d0900
  401898:	007a1200 	.word	0x007a1200
  40189c:	07ff0000 	.word	0x07ff0000
  4018a0:	aaaaaaab 	.word	0xaaaaaaab

004018a4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4018a4:	b480      	push	{r7}
  4018a6:	b083      	sub	sp, #12
  4018a8:	af00      	add	r7, sp, #0
  4018aa:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4018ac:	687b      	ldr	r3, [r7, #4]
  4018ae:	4a22      	ldr	r2, [pc, #136]	; (401938 <system_init_flash+0x94>)
  4018b0:	4293      	cmp	r3, r2
  4018b2:	d808      	bhi.n	4018c6 <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018b4:	4b21      	ldr	r3, [pc, #132]	; (40193c <system_init_flash+0x98>)
  4018b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018ba:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018bc:	4b20      	ldr	r3, [pc, #128]	; (401940 <system_init_flash+0x9c>)
  4018be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018c2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4018c4:	e033      	b.n	40192e <system_init_flash+0x8a>
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4018c6:	687b      	ldr	r3, [r7, #4]
  4018c8:	4a1e      	ldr	r2, [pc, #120]	; (401944 <system_init_flash+0xa0>)
  4018ca:	4293      	cmp	r3, r2
  4018cc:	d806      	bhi.n	4018dc <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018ce:	4b1b      	ldr	r3, [pc, #108]	; (40193c <system_init_flash+0x98>)
  4018d0:	4a1d      	ldr	r2, [pc, #116]	; (401948 <system_init_flash+0xa4>)
  4018d2:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018d4:	4b1a      	ldr	r3, [pc, #104]	; (401940 <system_init_flash+0x9c>)
  4018d6:	4a1c      	ldr	r2, [pc, #112]	; (401948 <system_init_flash+0xa4>)
  4018d8:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4018da:	e028      	b.n	40192e <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4018dc:	687b      	ldr	r3, [r7, #4]
  4018de:	4a1b      	ldr	r2, [pc, #108]	; (40194c <system_init_flash+0xa8>)
  4018e0:	4293      	cmp	r3, r2
  4018e2:	d806      	bhi.n	4018f2 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4018e4:	4b15      	ldr	r3, [pc, #84]	; (40193c <system_init_flash+0x98>)
  4018e6:	4a1a      	ldr	r2, [pc, #104]	; (401950 <system_init_flash+0xac>)
  4018e8:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4018ea:	4b15      	ldr	r3, [pc, #84]	; (401940 <system_init_flash+0x9c>)
  4018ec:	4a18      	ldr	r2, [pc, #96]	; (401950 <system_init_flash+0xac>)
  4018ee:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4018f0:	e01d      	b.n	40192e <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4018f2:	687b      	ldr	r3, [r7, #4]
  4018f4:	4a17      	ldr	r2, [pc, #92]	; (401954 <system_init_flash+0xb0>)
  4018f6:	4293      	cmp	r3, r2
  4018f8:	d806      	bhi.n	401908 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4018fa:	4b10      	ldr	r3, [pc, #64]	; (40193c <system_init_flash+0x98>)
  4018fc:	4a16      	ldr	r2, [pc, #88]	; (401958 <system_init_flash+0xb4>)
  4018fe:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401900:	4b0f      	ldr	r3, [pc, #60]	; (401940 <system_init_flash+0x9c>)
  401902:	4a15      	ldr	r2, [pc, #84]	; (401958 <system_init_flash+0xb4>)
  401904:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401906:	e012      	b.n	40192e <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401908:	687b      	ldr	r3, [r7, #4]
  40190a:	4a14      	ldr	r2, [pc, #80]	; (40195c <system_init_flash+0xb8>)
  40190c:	4293      	cmp	r3, r2
  40190e:	d808      	bhi.n	401922 <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401910:	4b0a      	ldr	r3, [pc, #40]	; (40193c <system_init_flash+0x98>)
  401912:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401916:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401918:	4b09      	ldr	r3, [pc, #36]	; (401940 <system_init_flash+0x9c>)
  40191a:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40191e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401920:	e005      	b.n	40192e <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401922:	4b06      	ldr	r3, [pc, #24]	; (40193c <system_init_flash+0x98>)
  401924:	4a0e      	ldr	r2, [pc, #56]	; (401960 <system_init_flash+0xbc>)
  401926:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401928:	4b05      	ldr	r3, [pc, #20]	; (401940 <system_init_flash+0x9c>)
  40192a:	4a0d      	ldr	r2, [pc, #52]	; (401960 <system_init_flash+0xbc>)
  40192c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40192e:	bf00      	nop
  401930:	370c      	adds	r7, #12
  401932:	46bd      	mov	sp, r7
  401934:	bc80      	pop	{r7}
  401936:	4770      	bx	lr
  401938:	01312cff 	.word	0x01312cff
  40193c:	400e0a00 	.word	0x400e0a00
  401940:	400e0c00 	.word	0x400e0c00
  401944:	026259ff 	.word	0x026259ff
  401948:	04000100 	.word	0x04000100
  40194c:	039386ff 	.word	0x039386ff
  401950:	04000200 	.word	0x04000200
  401954:	04c4b3ff 	.word	0x04c4b3ff
  401958:	04000300 	.word	0x04000300
  40195c:	05f5e0ff 	.word	0x05f5e0ff
  401960:	04000500 	.word	0x04000500

00401964 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401964:	b480      	push	{r7}
  401966:	b085      	sub	sp, #20
  401968:	af00      	add	r7, sp, #0
  40196a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40196c:	4b10      	ldr	r3, [pc, #64]	; (4019b0 <_sbrk+0x4c>)
  40196e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401970:	4b10      	ldr	r3, [pc, #64]	; (4019b4 <_sbrk+0x50>)
  401972:	681b      	ldr	r3, [r3, #0]
  401974:	2b00      	cmp	r3, #0
  401976:	d102      	bne.n	40197e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401978:	4b0e      	ldr	r3, [pc, #56]	; (4019b4 <_sbrk+0x50>)
  40197a:	4a0f      	ldr	r2, [pc, #60]	; (4019b8 <_sbrk+0x54>)
  40197c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40197e:	4b0d      	ldr	r3, [pc, #52]	; (4019b4 <_sbrk+0x50>)
  401980:	681b      	ldr	r3, [r3, #0]
  401982:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401984:	68ba      	ldr	r2, [r7, #8]
  401986:	687b      	ldr	r3, [r7, #4]
  401988:	441a      	add	r2, r3
  40198a:	68fb      	ldr	r3, [r7, #12]
  40198c:	429a      	cmp	r2, r3
  40198e:	dd02      	ble.n	401996 <_sbrk+0x32>
		return (caddr_t) -1;	
  401990:	f04f 33ff 	mov.w	r3, #4294967295
  401994:	e006      	b.n	4019a4 <_sbrk+0x40>
	}

	heap += incr;
  401996:	4b07      	ldr	r3, [pc, #28]	; (4019b4 <_sbrk+0x50>)
  401998:	681a      	ldr	r2, [r3, #0]
  40199a:	687b      	ldr	r3, [r7, #4]
  40199c:	4413      	add	r3, r2
  40199e:	4a05      	ldr	r2, [pc, #20]	; (4019b4 <_sbrk+0x50>)
  4019a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4019a2:	68bb      	ldr	r3, [r7, #8]
}
  4019a4:	4618      	mov	r0, r3
  4019a6:	3714      	adds	r7, #20
  4019a8:	46bd      	mov	sp, r7
  4019aa:	bc80      	pop	{r7}
  4019ac:	4770      	bx	lr
  4019ae:	bf00      	nop
  4019b0:	20027ffc 	.word	0x20027ffc
  4019b4:	200010d4 	.word	0x200010d4
  4019b8:	20004140 	.word	0x20004140

004019bc <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4019bc:	b480      	push	{r7}
  4019be:	b083      	sub	sp, #12
  4019c0:	af00      	add	r7, sp, #0
  4019c2:	6078      	str	r0, [r7, #4]
	return -1;
  4019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
  4019c8:	4618      	mov	r0, r3
  4019ca:	370c      	adds	r7, #12
  4019cc:	46bd      	mov	sp, r7
  4019ce:	bc80      	pop	{r7}
  4019d0:	4770      	bx	lr
  4019d2:	bf00      	nop

004019d4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4019d4:	b480      	push	{r7}
  4019d6:	b083      	sub	sp, #12
  4019d8:	af00      	add	r7, sp, #0
  4019da:	6078      	str	r0, [r7, #4]
  4019dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4019de:	683b      	ldr	r3, [r7, #0]
  4019e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4019e4:	605a      	str	r2, [r3, #4]

	return 0;
  4019e6:	2300      	movs	r3, #0
}
  4019e8:	4618      	mov	r0, r3
  4019ea:	370c      	adds	r7, #12
  4019ec:	46bd      	mov	sp, r7
  4019ee:	bc80      	pop	{r7}
  4019f0:	4770      	bx	lr
  4019f2:	bf00      	nop

004019f4 <_isatty>:

extern int _isatty(int file)
{
  4019f4:	b480      	push	{r7}
  4019f6:	b083      	sub	sp, #12
  4019f8:	af00      	add	r7, sp, #0
  4019fa:	6078      	str	r0, [r7, #4]
	return 1;
  4019fc:	2301      	movs	r3, #1
}
  4019fe:	4618      	mov	r0, r3
  401a00:	370c      	adds	r7, #12
  401a02:	46bd      	mov	sp, r7
  401a04:	bc80      	pop	{r7}
  401a06:	4770      	bx	lr

00401a08 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401a08:	b480      	push	{r7}
  401a0a:	b085      	sub	sp, #20
  401a0c:	af00      	add	r7, sp, #0
  401a0e:	60f8      	str	r0, [r7, #12]
  401a10:	60b9      	str	r1, [r7, #8]
  401a12:	607a      	str	r2, [r7, #4]
	return 0;
  401a14:	2300      	movs	r3, #0
}
  401a16:	4618      	mov	r0, r3
  401a18:	3714      	adds	r7, #20
  401a1a:	46bd      	mov	sp, r7
  401a1c:	bc80      	pop	{r7}
  401a1e:	4770      	bx	lr

00401a20 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401a20:	b480      	push	{r7}
  401a22:	b083      	sub	sp, #12
  401a24:	af00      	add	r7, sp, #0
  401a26:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401a28:	687b      	ldr	r3, [r7, #4]
  401a2a:	2b07      	cmp	r3, #7
  401a2c:	d825      	bhi.n	401a7a <osc_get_rate+0x5a>
  401a2e:	a201      	add	r2, pc, #4	; (adr r2, 401a34 <osc_get_rate+0x14>)
  401a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a34:	00401a55 	.word	0x00401a55
  401a38:	00401a5b 	.word	0x00401a5b
  401a3c:	00401a61 	.word	0x00401a61
  401a40:	00401a67 	.word	0x00401a67
  401a44:	00401a6b 	.word	0x00401a6b
  401a48:	00401a6f 	.word	0x00401a6f
  401a4c:	00401a73 	.word	0x00401a73
  401a50:	00401a77 	.word	0x00401a77
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401a54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401a58:	e010      	b.n	401a7c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a5e:	e00d      	b.n	401a7c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a64:	e00a      	b.n	401a7c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401a66:	4b08      	ldr	r3, [pc, #32]	; (401a88 <osc_get_rate+0x68>)
  401a68:	e008      	b.n	401a7c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401a6a:	4b08      	ldr	r3, [pc, #32]	; (401a8c <osc_get_rate+0x6c>)
  401a6c:	e006      	b.n	401a7c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401a6e:	4b08      	ldr	r3, [pc, #32]	; (401a90 <osc_get_rate+0x70>)
  401a70:	e004      	b.n	401a7c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401a72:	4b07      	ldr	r3, [pc, #28]	; (401a90 <osc_get_rate+0x70>)
  401a74:	e002      	b.n	401a7c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401a76:	4b06      	ldr	r3, [pc, #24]	; (401a90 <osc_get_rate+0x70>)
  401a78:	e000      	b.n	401a7c <osc_get_rate+0x5c>
	}

	return 0;
  401a7a:	2300      	movs	r3, #0
}
  401a7c:	4618      	mov	r0, r3
  401a7e:	370c      	adds	r7, #12
  401a80:	46bd      	mov	sp, r7
  401a82:	bc80      	pop	{r7}
  401a84:	4770      	bx	lr
  401a86:	bf00      	nop
  401a88:	003d0900 	.word	0x003d0900
  401a8c:	007a1200 	.word	0x007a1200
  401a90:	00b71b00 	.word	0x00b71b00

00401a94 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401a94:	b580      	push	{r7, lr}
  401a96:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401a98:	2006      	movs	r0, #6
  401a9a:	4b04      	ldr	r3, [pc, #16]	; (401aac <sysclk_get_main_hz+0x18>)
  401a9c:	4798      	blx	r3
  401a9e:	4602      	mov	r2, r0
  401aa0:	4613      	mov	r3, r2
  401aa2:	009b      	lsls	r3, r3, #2
  401aa4:	4413      	add	r3, r2
  401aa6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401aa8:	4618      	mov	r0, r3
  401aaa:	bd80      	pop	{r7, pc}
  401aac:	00401a21 	.word	0x00401a21

00401ab0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401ab0:	b580      	push	{r7, lr}
  401ab2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401ab4:	4b02      	ldr	r3, [pc, #8]	; (401ac0 <sysclk_get_peripheral_hz+0x10>)
  401ab6:	4798      	blx	r3
  401ab8:	4603      	mov	r3, r0
  401aba:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401abc:	4618      	mov	r0, r3
  401abe:	bd80      	pop	{r7, pc}
  401ac0:	00401a95 	.word	0x00401a95

00401ac4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401ac4:	b580      	push	{r7, lr}
  401ac6:	b082      	sub	sp, #8
  401ac8:	af00      	add	r7, sp, #0
  401aca:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401acc:	6878      	ldr	r0, [r7, #4]
  401ace:	4b03      	ldr	r3, [pc, #12]	; (401adc <sysclk_enable_peripheral_clock+0x18>)
  401ad0:	4798      	blx	r3
}
  401ad2:	bf00      	nop
  401ad4:	3708      	adds	r7, #8
  401ad6:	46bd      	mov	sp, r7
  401ad8:	bd80      	pop	{r7, pc}
  401ada:	bf00      	nop
  401adc:	00401539 	.word	0x00401539

00401ae0 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401ae0:	b580      	push	{r7, lr}
  401ae2:	b08c      	sub	sp, #48	; 0x30
  401ae4:	af00      	add	r7, sp, #0
  401ae6:	6078      	str	r0, [r7, #4]
  401ae8:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401aea:	4b31      	ldr	r3, [pc, #196]	; (401bb0 <usart_serial_init+0xd0>)
  401aec:	4798      	blx	r3
  401aee:	4603      	mov	r3, r0
  401af0:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401af2:	683b      	ldr	r3, [r7, #0]
  401af4:	681b      	ldr	r3, [r3, #0]
  401af6:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401af8:	683b      	ldr	r3, [r7, #0]
  401afa:	689b      	ldr	r3, [r3, #8]
  401afc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401afe:	683b      	ldr	r3, [r7, #0]
  401b00:	681b      	ldr	r3, [r3, #0]
  401b02:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401b04:	683b      	ldr	r3, [r7, #0]
  401b06:	685b      	ldr	r3, [r3, #4]
  401b08:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401b0a:	683b      	ldr	r3, [r7, #0]
  401b0c:	689b      	ldr	r3, [r3, #8]
  401b0e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401b10:	683b      	ldr	r3, [r7, #0]
  401b12:	68db      	ldr	r3, [r3, #12]
  401b14:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401b16:	2300      	movs	r3, #0
  401b18:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401b1a:	687b      	ldr	r3, [r7, #4]
  401b1c:	4a25      	ldr	r2, [pc, #148]	; (401bb4 <usart_serial_init+0xd4>)
  401b1e:	4293      	cmp	r3, r2
  401b20:	d108      	bne.n	401b34 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401b22:	2008      	movs	r0, #8
  401b24:	4b24      	ldr	r3, [pc, #144]	; (401bb8 <usart_serial_init+0xd8>)
  401b26:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401b2c:	4619      	mov	r1, r3
  401b2e:	6878      	ldr	r0, [r7, #4]
  401b30:	4b22      	ldr	r3, [pc, #136]	; (401bbc <usart_serial_init+0xdc>)
  401b32:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401b34:	687b      	ldr	r3, [r7, #4]
  401b36:	4a22      	ldr	r2, [pc, #136]	; (401bc0 <usart_serial_init+0xe0>)
  401b38:	4293      	cmp	r3, r2
  401b3a:	d108      	bne.n	401b4e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401b3c:	2009      	movs	r0, #9
  401b3e:	4b1e      	ldr	r3, [pc, #120]	; (401bb8 <usart_serial_init+0xd8>)
  401b40:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401b46:	4619      	mov	r1, r3
  401b48:	6878      	ldr	r0, [r7, #4]
  401b4a:	4b1c      	ldr	r3, [pc, #112]	; (401bbc <usart_serial_init+0xdc>)
  401b4c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401b4e:	687b      	ldr	r3, [r7, #4]
  401b50:	4a1c      	ldr	r2, [pc, #112]	; (401bc4 <usart_serial_init+0xe4>)
  401b52:	4293      	cmp	r3, r2
  401b54:	d111      	bne.n	401b7a <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401b56:	200e      	movs	r0, #14
  401b58:	4b17      	ldr	r3, [pc, #92]	; (401bb8 <usart_serial_init+0xd8>)
  401b5a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401b5c:	4b14      	ldr	r3, [pc, #80]	; (401bb0 <usart_serial_init+0xd0>)
  401b5e:	4798      	blx	r3
  401b60:	4602      	mov	r2, r0
  401b62:	f107 030c 	add.w	r3, r7, #12
  401b66:	4619      	mov	r1, r3
  401b68:	6878      	ldr	r0, [r7, #4]
  401b6a:	4b17      	ldr	r3, [pc, #92]	; (401bc8 <usart_serial_init+0xe8>)
  401b6c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401b6e:	6878      	ldr	r0, [r7, #4]
  401b70:	4b16      	ldr	r3, [pc, #88]	; (401bcc <usart_serial_init+0xec>)
  401b72:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401b74:	6878      	ldr	r0, [r7, #4]
  401b76:	4b16      	ldr	r3, [pc, #88]	; (401bd0 <usart_serial_init+0xf0>)
  401b78:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401b7a:	687b      	ldr	r3, [r7, #4]
  401b7c:	4a15      	ldr	r2, [pc, #84]	; (401bd4 <usart_serial_init+0xf4>)
  401b7e:	4293      	cmp	r3, r2
  401b80:	d111      	bne.n	401ba6 <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401b82:	200f      	movs	r0, #15
  401b84:	4b0c      	ldr	r3, [pc, #48]	; (401bb8 <usart_serial_init+0xd8>)
  401b86:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401b88:	4b09      	ldr	r3, [pc, #36]	; (401bb0 <usart_serial_init+0xd0>)
  401b8a:	4798      	blx	r3
  401b8c:	4602      	mov	r2, r0
  401b8e:	f107 030c 	add.w	r3, r7, #12
  401b92:	4619      	mov	r1, r3
  401b94:	6878      	ldr	r0, [r7, #4]
  401b96:	4b0c      	ldr	r3, [pc, #48]	; (401bc8 <usart_serial_init+0xe8>)
  401b98:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401b9a:	6878      	ldr	r0, [r7, #4]
  401b9c:	4b0b      	ldr	r3, [pc, #44]	; (401bcc <usart_serial_init+0xec>)
  401b9e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401ba0:	6878      	ldr	r0, [r7, #4]
  401ba2:	4b0b      	ldr	r3, [pc, #44]	; (401bd0 <usart_serial_init+0xf0>)
  401ba4:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401ba6:	bf00      	nop
  401ba8:	3730      	adds	r7, #48	; 0x30
  401baa:	46bd      	mov	sp, r7
  401bac:	bd80      	pop	{r7, pc}
  401bae:	bf00      	nop
  401bb0:	00401ab1 	.word	0x00401ab1
  401bb4:	400e0600 	.word	0x400e0600
  401bb8:	00401ac5 	.word	0x00401ac5
  401bbc:	004005d1 	.word	0x004005d1
  401bc0:	400e0800 	.word	0x400e0800
  401bc4:	40024000 	.word	0x40024000
  401bc8:	00400779 	.word	0x00400779
  401bcc:	004007fd 	.word	0x004007fd
  401bd0:	00400845 	.word	0x00400845
  401bd4:	40028000 	.word	0x40028000

00401bd8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401bd8:	b580      	push	{r7, lr}
  401bda:	b082      	sub	sp, #8
  401bdc:	af00      	add	r7, sp, #0
  401bde:	6078      	str	r0, [r7, #4]
  401be0:	460b      	mov	r3, r1
  401be2:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401be4:	687b      	ldr	r3, [r7, #4]
  401be6:	4a20      	ldr	r2, [pc, #128]	; (401c68 <usart_serial_putchar+0x90>)
  401be8:	4293      	cmp	r3, r2
  401bea:	d10a      	bne.n	401c02 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401bec:	bf00      	nop
  401bee:	78fb      	ldrb	r3, [r7, #3]
  401bf0:	4619      	mov	r1, r3
  401bf2:	6878      	ldr	r0, [r7, #4]
  401bf4:	4b1d      	ldr	r3, [pc, #116]	; (401c6c <usart_serial_putchar+0x94>)
  401bf6:	4798      	blx	r3
  401bf8:	4603      	mov	r3, r0
  401bfa:	2b00      	cmp	r3, #0
  401bfc:	d1f7      	bne.n	401bee <usart_serial_putchar+0x16>
		return 1;
  401bfe:	2301      	movs	r3, #1
  401c00:	e02d      	b.n	401c5e <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c02:	687b      	ldr	r3, [r7, #4]
  401c04:	4a1a      	ldr	r2, [pc, #104]	; (401c70 <usart_serial_putchar+0x98>)
  401c06:	4293      	cmp	r3, r2
  401c08:	d10a      	bne.n	401c20 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401c0a:	bf00      	nop
  401c0c:	78fb      	ldrb	r3, [r7, #3]
  401c0e:	4619      	mov	r1, r3
  401c10:	6878      	ldr	r0, [r7, #4]
  401c12:	4b16      	ldr	r3, [pc, #88]	; (401c6c <usart_serial_putchar+0x94>)
  401c14:	4798      	blx	r3
  401c16:	4603      	mov	r3, r0
  401c18:	2b00      	cmp	r3, #0
  401c1a:	d1f7      	bne.n	401c0c <usart_serial_putchar+0x34>
		return 1;
  401c1c:	2301      	movs	r3, #1
  401c1e:	e01e      	b.n	401c5e <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401c20:	687b      	ldr	r3, [r7, #4]
  401c22:	4a14      	ldr	r2, [pc, #80]	; (401c74 <usart_serial_putchar+0x9c>)
  401c24:	4293      	cmp	r3, r2
  401c26:	d10a      	bne.n	401c3e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  401c28:	bf00      	nop
  401c2a:	78fb      	ldrb	r3, [r7, #3]
  401c2c:	4619      	mov	r1, r3
  401c2e:	6878      	ldr	r0, [r7, #4]
  401c30:	4b11      	ldr	r3, [pc, #68]	; (401c78 <usart_serial_putchar+0xa0>)
  401c32:	4798      	blx	r3
  401c34:	4603      	mov	r3, r0
  401c36:	2b00      	cmp	r3, #0
  401c38:	d1f7      	bne.n	401c2a <usart_serial_putchar+0x52>
		return 1;
  401c3a:	2301      	movs	r3, #1
  401c3c:	e00f      	b.n	401c5e <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401c3e:	687b      	ldr	r3, [r7, #4]
  401c40:	4a0e      	ldr	r2, [pc, #56]	; (401c7c <usart_serial_putchar+0xa4>)
  401c42:	4293      	cmp	r3, r2
  401c44:	d10a      	bne.n	401c5c <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  401c46:	bf00      	nop
  401c48:	78fb      	ldrb	r3, [r7, #3]
  401c4a:	4619      	mov	r1, r3
  401c4c:	6878      	ldr	r0, [r7, #4]
  401c4e:	4b0a      	ldr	r3, [pc, #40]	; (401c78 <usart_serial_putchar+0xa0>)
  401c50:	4798      	blx	r3
  401c52:	4603      	mov	r3, r0
  401c54:	2b00      	cmp	r3, #0
  401c56:	d1f7      	bne.n	401c48 <usart_serial_putchar+0x70>
		return 1;
  401c58:	2301      	movs	r3, #1
  401c5a:	e000      	b.n	401c5e <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401c5c:	2300      	movs	r3, #0
}
  401c5e:	4618      	mov	r0, r3
  401c60:	3708      	adds	r7, #8
  401c62:	46bd      	mov	sp, r7
  401c64:	bd80      	pop	{r7, pc}
  401c66:	bf00      	nop
  401c68:	400e0600 	.word	0x400e0600
  401c6c:	00400631 	.word	0x00400631
  401c70:	400e0800 	.word	0x400e0800
  401c74:	40024000 	.word	0x40024000
  401c78:	004008c9 	.word	0x004008c9
  401c7c:	40028000 	.word	0x40028000

00401c80 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401c80:	b580      	push	{r7, lr}
  401c82:	b084      	sub	sp, #16
  401c84:	af00      	add	r7, sp, #0
  401c86:	6078      	str	r0, [r7, #4]
  401c88:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401c8a:	2300      	movs	r3, #0
  401c8c:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c8e:	687b      	ldr	r3, [r7, #4]
  401c90:	4a1f      	ldr	r2, [pc, #124]	; (401d10 <usart_serial_getchar+0x90>)
  401c92:	4293      	cmp	r3, r2
  401c94:	d107      	bne.n	401ca6 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401c96:	bf00      	nop
  401c98:	6839      	ldr	r1, [r7, #0]
  401c9a:	6878      	ldr	r0, [r7, #4]
  401c9c:	4b1d      	ldr	r3, [pc, #116]	; (401d14 <usart_serial_getchar+0x94>)
  401c9e:	4798      	blx	r3
  401ca0:	4603      	mov	r3, r0
  401ca2:	2b00      	cmp	r3, #0
  401ca4:	d1f8      	bne.n	401c98 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401ca6:	687b      	ldr	r3, [r7, #4]
  401ca8:	4a1b      	ldr	r2, [pc, #108]	; (401d18 <usart_serial_getchar+0x98>)
  401caa:	4293      	cmp	r3, r2
  401cac:	d107      	bne.n	401cbe <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401cae:	bf00      	nop
  401cb0:	6839      	ldr	r1, [r7, #0]
  401cb2:	6878      	ldr	r0, [r7, #4]
  401cb4:	4b17      	ldr	r3, [pc, #92]	; (401d14 <usart_serial_getchar+0x94>)
  401cb6:	4798      	blx	r3
  401cb8:	4603      	mov	r3, r0
  401cba:	2b00      	cmp	r3, #0
  401cbc:	d1f8      	bne.n	401cb0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401cbe:	687b      	ldr	r3, [r7, #4]
  401cc0:	4a16      	ldr	r2, [pc, #88]	; (401d1c <usart_serial_getchar+0x9c>)
  401cc2:	4293      	cmp	r3, r2
  401cc4:	d10d      	bne.n	401ce2 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  401cc6:	bf00      	nop
  401cc8:	f107 030c 	add.w	r3, r7, #12
  401ccc:	4619      	mov	r1, r3
  401cce:	6878      	ldr	r0, [r7, #4]
  401cd0:	4b13      	ldr	r3, [pc, #76]	; (401d20 <usart_serial_getchar+0xa0>)
  401cd2:	4798      	blx	r3
  401cd4:	4603      	mov	r3, r0
  401cd6:	2b00      	cmp	r3, #0
  401cd8:	d1f6      	bne.n	401cc8 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  401cda:	68fb      	ldr	r3, [r7, #12]
  401cdc:	b2da      	uxtb	r2, r3
  401cde:	683b      	ldr	r3, [r7, #0]
  401ce0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401ce2:	687b      	ldr	r3, [r7, #4]
  401ce4:	4a0f      	ldr	r2, [pc, #60]	; (401d24 <usart_serial_getchar+0xa4>)
  401ce6:	4293      	cmp	r3, r2
  401ce8:	d10d      	bne.n	401d06 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  401cea:	bf00      	nop
  401cec:	f107 030c 	add.w	r3, r7, #12
  401cf0:	4619      	mov	r1, r3
  401cf2:	6878      	ldr	r0, [r7, #4]
  401cf4:	4b0a      	ldr	r3, [pc, #40]	; (401d20 <usart_serial_getchar+0xa0>)
  401cf6:	4798      	blx	r3
  401cf8:	4603      	mov	r3, r0
  401cfa:	2b00      	cmp	r3, #0
  401cfc:	d1f6      	bne.n	401cec <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  401cfe:	68fb      	ldr	r3, [r7, #12]
  401d00:	b2da      	uxtb	r2, r3
  401d02:	683b      	ldr	r3, [r7, #0]
  401d04:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401d06:	bf00      	nop
  401d08:	3710      	adds	r7, #16
  401d0a:	46bd      	mov	sp, r7
  401d0c:	bd80      	pop	{r7, pc}
  401d0e:	bf00      	nop
  401d10:	400e0600 	.word	0x400e0600
  401d14:	00400661 	.word	0x00400661
  401d18:	400e0800 	.word	0x400e0800
  401d1c:	40024000 	.word	0x40024000
  401d20:	004008f9 	.word	0x004008f9
  401d24:	40028000 	.word	0x40028000

00401d28 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401d28:	b580      	push	{r7, lr}
  401d2a:	b082      	sub	sp, #8
  401d2c:	af00      	add	r7, sp, #0
  401d2e:	6078      	str	r0, [r7, #4]
  401d30:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401d32:	4a0f      	ldr	r2, [pc, #60]	; (401d70 <stdio_serial_init+0x48>)
  401d34:	687b      	ldr	r3, [r7, #4]
  401d36:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401d38:	4b0e      	ldr	r3, [pc, #56]	; (401d74 <stdio_serial_init+0x4c>)
  401d3a:	4a0f      	ldr	r2, [pc, #60]	; (401d78 <stdio_serial_init+0x50>)
  401d3c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401d3e:	4b0f      	ldr	r3, [pc, #60]	; (401d7c <stdio_serial_init+0x54>)
  401d40:	4a0f      	ldr	r2, [pc, #60]	; (401d80 <stdio_serial_init+0x58>)
  401d42:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401d44:	6839      	ldr	r1, [r7, #0]
  401d46:	6878      	ldr	r0, [r7, #4]
  401d48:	4b0e      	ldr	r3, [pc, #56]	; (401d84 <stdio_serial_init+0x5c>)
  401d4a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401d4c:	4b0e      	ldr	r3, [pc, #56]	; (401d88 <stdio_serial_init+0x60>)
  401d4e:	681b      	ldr	r3, [r3, #0]
  401d50:	689b      	ldr	r3, [r3, #8]
  401d52:	2100      	movs	r1, #0
  401d54:	4618      	mov	r0, r3
  401d56:	4b0d      	ldr	r3, [pc, #52]	; (401d8c <stdio_serial_init+0x64>)
  401d58:	4798      	blx	r3
	setbuf(stdin, NULL);
  401d5a:	4b0b      	ldr	r3, [pc, #44]	; (401d88 <stdio_serial_init+0x60>)
  401d5c:	681b      	ldr	r3, [r3, #0]
  401d5e:	685b      	ldr	r3, [r3, #4]
  401d60:	2100      	movs	r1, #0
  401d62:	4618      	mov	r0, r3
  401d64:	4b09      	ldr	r3, [pc, #36]	; (401d8c <stdio_serial_init+0x64>)
  401d66:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401d68:	bf00      	nop
  401d6a:	3708      	adds	r7, #8
  401d6c:	46bd      	mov	sp, r7
  401d6e:	bd80      	pop	{r7, pc}
  401d70:	2000112c 	.word	0x2000112c
  401d74:	20001128 	.word	0x20001128
  401d78:	00401bd9 	.word	0x00401bd9
  401d7c:	20001124 	.word	0x20001124
  401d80:	00401c81 	.word	0x00401c81
  401d84:	00401ae1 	.word	0x00401ae1
  401d88:	20000430 	.word	0x20000430
  401d8c:	00402131 	.word	0x00402131

00401d90 <main>:
uint8_t sen1Ctr = 0, sen2Ctr = 0;
uint16_t hrtRate = 0;
uint8_t disp = 0, spo2;

int main (void)
{
  401d90:	b580      	push	{r7, lr}
  401d92:	af00      	add	r7, sp, #0
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  401d94:	4b17      	ldr	r3, [pc, #92]	; (401df4 <main+0x64>)
  401d96:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  401d98:	4b17      	ldr	r3, [pc, #92]	; (401df8 <main+0x68>)
  401d9a:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	//LED PIN
	gpio_configure_pin(PIO_PC23_IDX, (PIO_OUTPUT_1 | PIO_DEFAULT));
  401d9c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401da0:	2057      	movs	r0, #87	; 0x57
  401da2:	4b16      	ldr	r3, [pc, #88]	; (401dfc <main+0x6c>)
  401da4:	4798      	blx	r3

	InitConUart();
  401da6:	4b16      	ldr	r3, [pc, #88]	; (401e00 <main+0x70>)
  401da8:	4798      	blx	r3
	SenInitUsart();
  401daa:	4b16      	ldr	r3, [pc, #88]	; (401e04 <main+0x74>)
  401dac:	4798      	blx	r3

	printf("RST\r\n");
  401dae:	4816      	ldr	r0, [pc, #88]	; (401e08 <main+0x78>)
  401db0:	4b16      	ldr	r3, [pc, #88]	; (401e0c <main+0x7c>)
  401db2:	4798      	blx	r3
	while (1)
	{
		//printf("%d\r\n", 90);

		//Call frequently to update next pointer in PDC
		SenPdcManageBuff();
  401db4:	4b16      	ldr	r3, [pc, #88]	; (401e10 <main+0x80>)
  401db6:	4798      	blx	r3

		if(SenGetRxBytes(1)>5)
  401db8:	2001      	movs	r0, #1
  401dba:	4b16      	ldr	r3, [pc, #88]	; (401e14 <main+0x84>)
  401dbc:	4798      	blx	r3
  401dbe:	4603      	mov	r3, r0
  401dc0:	2b05      	cmp	r3, #5
  401dc2:	d902      	bls.n	401dca <main+0x3a>
		{
			//Run trigger calculation algorithm
			SenProcessData(1);
  401dc4:	2001      	movs	r0, #1
  401dc6:	4b14      	ldr	r3, [pc, #80]	; (401e18 <main+0x88>)
  401dc8:	4798      	blx	r3
// 		{
// 			//Pass sen2 data to display
// 			SenProcessData(2);
// 		}

		if(disp)
  401dca:	4b14      	ldr	r3, [pc, #80]	; (401e1c <main+0x8c>)
  401dcc:	781b      	ldrb	r3, [r3, #0]
  401dce:	2b00      	cmp	r3, #0
  401dd0:	d0f0      	beq.n	401db4 <main+0x24>
		{
			//Send data on console UART
			printf("Hrt = %d\r\n", hrtRate);
  401dd2:	4b13      	ldr	r3, [pc, #76]	; (401e20 <main+0x90>)
  401dd4:	881b      	ldrh	r3, [r3, #0]
  401dd6:	4619      	mov	r1, r3
  401dd8:	4812      	ldr	r0, [pc, #72]	; (401e24 <main+0x94>)
  401dda:	4b0c      	ldr	r3, [pc, #48]	; (401e0c <main+0x7c>)
  401ddc:	4798      	blx	r3
			printf("Sp02 = %d\r\n", spo2);
  401dde:	4b12      	ldr	r3, [pc, #72]	; (401e28 <main+0x98>)
  401de0:	781b      	ldrb	r3, [r3, #0]
  401de2:	4619      	mov	r1, r3
  401de4:	4811      	ldr	r0, [pc, #68]	; (401e2c <main+0x9c>)
  401de6:	4b09      	ldr	r3, [pc, #36]	; (401e0c <main+0x7c>)
  401de8:	4798      	blx	r3
			disp = 0;
  401dea:	4b0c      	ldr	r3, [pc, #48]	; (401e1c <main+0x8c>)
  401dec:	2200      	movs	r2, #0
  401dee:	701a      	strb	r2, [r3, #0]
		}

		//delay_ms(1);
	}
  401df0:	e7e0      	b.n	401db4 <main+0x24>
  401df2:	bf00      	nop
  401df4:	00400c7d 	.word	0x00400c7d
  401df8:	004015f5 	.word	0x004015f5
  401dfc:	00400fed 	.word	0x00400fed
  401e00:	00401e31 	.word	0x00401e31
  401e04:	004001e9 	.word	0x004001e9
  401e08:	00405084 	.word	0x00405084
  401e0c:	0040206d 	.word	0x0040206d
  401e10:	00400295 	.word	0x00400295
  401e14:	00400301 	.word	0x00400301
  401e18:	00401e75 	.word	0x00401e75
  401e1c:	200010de 	.word	0x200010de
  401e20:	200010dc 	.word	0x200010dc
  401e24:	0040508c 	.word	0x0040508c
  401e28:	20001134 	.word	0x20001134
  401e2c:	00405098 	.word	0x00405098

00401e30 <InitConUart>:

/**
 *  Configure UART for debug message output.
 */
void InitConUart(void)
{
  401e30:	b580      	push	{r7, lr}
  401e32:	b084      	sub	sp, #16
  401e34:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  401e36:	463b      	mov	r3, r7
  401e38:	2200      	movs	r2, #0
  401e3a:	601a      	str	r2, [r3, #0]
  401e3c:	605a      	str	r2, [r3, #4]
  401e3e:	609a      	str	r2, [r3, #8]
  401e40:	60da      	str	r2, [r3, #12]
  401e42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401e46:	603b      	str	r3, [r7, #0]
  401e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401e4c:	60bb      	str	r3, [r7, #8]
		.baudrate = CONSOLE_UART_BAUDRATE,
		.paritytype = UART_MR_PAR_NO
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  401e4e:	2009      	movs	r0, #9
  401e50:	4b05      	ldr	r3, [pc, #20]	; (401e68 <InitConUart+0x38>)
  401e52:	4798      	blx	r3
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
  401e54:	463b      	mov	r3, r7
  401e56:	4619      	mov	r1, r3
  401e58:	4804      	ldr	r0, [pc, #16]	; (401e6c <InitConUart+0x3c>)
  401e5a:	4b05      	ldr	r3, [pc, #20]	; (401e70 <InitConUart+0x40>)
  401e5c:	4798      	blx	r3
}
  401e5e:	bf00      	nop
  401e60:	3710      	adds	r7, #16
  401e62:	46bd      	mov	sp, r7
  401e64:	bd80      	pop	{r7, pc}
  401e66:	bf00      	nop
  401e68:	00401ac5 	.word	0x00401ac5
  401e6c:	400e0800 	.word	0x400e0800
  401e70:	00401d29 	.word	0x00401d29

00401e74 <SenProcessData>:

void SenProcessData(uint8_t senNo)
{
  401e74:	b580      	push	{r7, lr}
  401e76:	b082      	sub	sp, #8
  401e78:	af00      	add	r7, sp, #0
  401e7a:	4603      	mov	r3, r0
  401e7c:	71fb      	strb	r3, [r7, #7]
	else
	{
		rxBytes = SenGetRxBytes(2);
	}*/

	while(SenGetRxBytes(senNo))
  401e7e:	e00a      	b.n	401e96 <SenProcessData+0x22>
	{
		SenParseFrame(senNo, SenGetByte(senNo));
  401e80:	79fb      	ldrb	r3, [r7, #7]
  401e82:	4618      	mov	r0, r3
  401e84:	4b09      	ldr	r3, [pc, #36]	; (401eac <SenProcessData+0x38>)
  401e86:	4798      	blx	r3
  401e88:	4603      	mov	r3, r0
  401e8a:	461a      	mov	r2, r3
  401e8c:	79fb      	ldrb	r3, [r7, #7]
  401e8e:	4611      	mov	r1, r2
  401e90:	4618      	mov	r0, r3
  401e92:	4b07      	ldr	r3, [pc, #28]	; (401eb0 <SenProcessData+0x3c>)
  401e94:	4798      	blx	r3
	else
	{
		rxBytes = SenGetRxBytes(2);
	}*/

	while(SenGetRxBytes(senNo))
  401e96:	79fb      	ldrb	r3, [r7, #7]
  401e98:	4618      	mov	r0, r3
  401e9a:	4b06      	ldr	r3, [pc, #24]	; (401eb4 <SenProcessData+0x40>)
  401e9c:	4798      	blx	r3
  401e9e:	4603      	mov	r3, r0
  401ea0:	2b00      	cmp	r3, #0
  401ea2:	d1ed      	bne.n	401e80 <SenProcessData+0xc>
	{
		SenParseFrame(senNo, SenGetByte(senNo));
		//rxBytes--;
	}
}
  401ea4:	bf00      	nop
  401ea6:	3708      	adds	r7, #8
  401ea8:	46bd      	mov	sp, r7
  401eaa:	bd80      	pop	{r7, pc}
  401eac:	0040039d 	.word	0x0040039d
  401eb0:	00401eb9 	.word	0x00401eb9
  401eb4:	00400301 	.word	0x00400301

00401eb8 <SenParseFrame>:

void SenParseFrame(uint8_t senNo, uint8_t data)
{
  401eb8:	b480      	push	{r7}
  401eba:	b083      	sub	sp, #12
  401ebc:	af00      	add	r7, sp, #0
  401ebe:	4603      	mov	r3, r0
  401ec0:	460a      	mov	r2, r1
  401ec2:	71fb      	strb	r3, [r7, #7]
  401ec4:	4613      	mov	r3, r2
  401ec6:	71bb      	strb	r3, [r7, #6]
	if(senNo == 1)
  401ec8:	79fb      	ldrb	r3, [r7, #7]
  401eca:	2b01      	cmp	r3, #1
  401ecc:	f040 8095 	bne.w	401ffa <SenParseFrame+0x142>
	{
		switch(sen1State)
  401ed0:	4b4c      	ldr	r3, [pc, #304]	; (402004 <SenParseFrame+0x14c>)
  401ed2:	781b      	ldrb	r3, [r3, #0]
  401ed4:	2b05      	cmp	r3, #5
  401ed6:	f200 8090 	bhi.w	401ffa <SenParseFrame+0x142>
  401eda:	a201      	add	r2, pc, #4	; (adr r2, 401ee0 <SenParseFrame+0x28>)
  401edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ee0:	00401ef9 	.word	0x00401ef9
  401ee4:	00401f0d 	.word	0x00401f0d
  401ee8:	00401f3d 	.word	0x00401f3d
  401eec:	00401f53 	.word	0x00401f53
  401ef0:	00401f87 	.word	0x00401f87
  401ef4:	00401fa7 	.word	0x00401fa7
		{
			case q0:
				if(data==0x01)
  401ef8:	79bb      	ldrb	r3, [r7, #6]
  401efa:	2b01      	cmp	r3, #1
  401efc:	d17a      	bne.n	401ff4 <SenParseFrame+0x13c>
				{
					sen1State = q1;
  401efe:	4b41      	ldr	r3, [pc, #260]	; (402004 <SenParseFrame+0x14c>)
  401f00:	2201      	movs	r2, #1
  401f02:	701a      	strb	r2, [r3, #0]
					sen1Sum = 0x01;
  401f04:	4b40      	ldr	r3, [pc, #256]	; (402008 <SenParseFrame+0x150>)
  401f06:	2201      	movs	r2, #1
  401f08:	701a      	strb	r2, [r3, #0]
				}
				break;
  401f0a:	e073      	b.n	401ff4 <SenParseFrame+0x13c>
			case q1:
				if((data>127)&&BIT_IS_SET(data,0))
  401f0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
  401f10:	2b00      	cmp	r3, #0
  401f12:	da0f      	bge.n	401f34 <SenParseFrame+0x7c>
  401f14:	79bb      	ldrb	r3, [r7, #6]
  401f16:	f003 0301 	and.w	r3, r3, #1
  401f1a:	2b00      	cmp	r3, #0
  401f1c:	d00a      	beq.n	401f34 <SenParseFrame+0x7c>
				{
					sen1State = q2;
  401f1e:	4b39      	ldr	r3, [pc, #228]	; (402004 <SenParseFrame+0x14c>)
  401f20:	2202      	movs	r2, #2
  401f22:	701a      	strb	r2, [r3, #0]
					sen1Sum += data;
  401f24:	4b38      	ldr	r3, [pc, #224]	; (402008 <SenParseFrame+0x150>)
  401f26:	781a      	ldrb	r2, [r3, #0]
  401f28:	79bb      	ldrb	r3, [r7, #6]
  401f2a:	4413      	add	r3, r2
  401f2c:	b2da      	uxtb	r2, r3
  401f2e:	4b36      	ldr	r3, [pc, #216]	; (402008 <SenParseFrame+0x150>)
  401f30:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sen1State = q0;
				}
				break;
  401f32:	e062      	b.n	401ffa <SenParseFrame+0x142>
					sen1State = q2;
					sen1Sum += data;
				}
				else
				{
					sen1State = q0;
  401f34:	4b33      	ldr	r3, [pc, #204]	; (402004 <SenParseFrame+0x14c>)
  401f36:	2200      	movs	r2, #0
  401f38:	701a      	strb	r2, [r3, #0]
				}
				break;
  401f3a:	e05e      	b.n	401ffa <SenParseFrame+0x142>
			case q2:
				//Pleath Reading
				sen1State = q3;
  401f3c:	4b31      	ldr	r3, [pc, #196]	; (402004 <SenParseFrame+0x14c>)
  401f3e:	2203      	movs	r2, #3
  401f40:	701a      	strb	r2, [r3, #0]
				sen1Sum += data;
  401f42:	4b31      	ldr	r3, [pc, #196]	; (402008 <SenParseFrame+0x150>)
  401f44:	781a      	ldrb	r2, [r3, #0]
  401f46:	79bb      	ldrb	r3, [r7, #6]
  401f48:	4413      	add	r3, r2
  401f4a:	b2da      	uxtb	r2, r3
  401f4c:	4b2e      	ldr	r3, [pc, #184]	; (402008 <SenParseFrame+0x150>)
  401f4e:	701a      	strb	r2, [r3, #0]
				break;
  401f50:	e053      	b.n	401ffa <SenParseFrame+0x142>
			case q3:
				if(data<127)
  401f52:	79bb      	ldrb	r3, [r7, #6]
  401f54:	2b7e      	cmp	r3, #126	; 0x7e
  401f56:	d812      	bhi.n	401f7e <SenParseFrame+0xc6>
				{
					//HRMSB
					hrtRate = ((uint16_t)(data&0x03))<<8;
  401f58:	79bb      	ldrb	r3, [r7, #6]
  401f5a:	021b      	lsls	r3, r3, #8
  401f5c:	b29b      	uxth	r3, r3
  401f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  401f62:	b29a      	uxth	r2, r3
  401f64:	4b29      	ldr	r3, [pc, #164]	; (40200c <SenParseFrame+0x154>)
  401f66:	801a      	strh	r2, [r3, #0]
					sen1State = q4;
  401f68:	4b26      	ldr	r3, [pc, #152]	; (402004 <SenParseFrame+0x14c>)
  401f6a:	2204      	movs	r2, #4
  401f6c:	701a      	strb	r2, [r3, #0]
					sen1Sum += data;
  401f6e:	4b26      	ldr	r3, [pc, #152]	; (402008 <SenParseFrame+0x150>)
  401f70:	781a      	ldrb	r2, [r3, #0]
  401f72:	79bb      	ldrb	r3, [r7, #6]
  401f74:	4413      	add	r3, r2
  401f76:	b2da      	uxtb	r2, r3
  401f78:	4b23      	ldr	r3, [pc, #140]	; (402008 <SenParseFrame+0x150>)
  401f7a:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sen1State = q0;
				}
				break;
  401f7c:	e03d      	b.n	401ffa <SenParseFrame+0x142>
					sen1State = q4;
					sen1Sum += data;
				}
				else
				{
					sen1State = q0;
  401f7e:	4b21      	ldr	r3, [pc, #132]	; (402004 <SenParseFrame+0x14c>)
  401f80:	2200      	movs	r2, #0
  401f82:	701a      	strb	r2, [r3, #0]
				}
				break;
  401f84:	e039      	b.n	401ffa <SenParseFrame+0x142>
			case q4:
				if(data==sen1Sum)
  401f86:	4b20      	ldr	r3, [pc, #128]	; (402008 <SenParseFrame+0x150>)
  401f88:	781b      	ldrb	r3, [r3, #0]
  401f8a:	79ba      	ldrb	r2, [r7, #6]
  401f8c:	429a      	cmp	r2, r3
  401f8e:	d106      	bne.n	401f9e <SenParseFrame+0xe6>
				{
					//Checksum matched
					sen1State = q5;
  401f90:	4b1c      	ldr	r3, [pc, #112]	; (402004 <SenParseFrame+0x14c>)
  401f92:	2205      	movs	r2, #5
  401f94:	701a      	strb	r2, [r3, #0]
					sen1Ctr = 0;
  401f96:	4b1e      	ldr	r3, [pc, #120]	; (402010 <SenParseFrame+0x158>)
  401f98:	2200      	movs	r2, #0
  401f9a:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sen1State = q0;
				}
				break;
  401f9c:	e02d      	b.n	401ffa <SenParseFrame+0x142>
					sen1State = q5;
					sen1Ctr = 0;
				}
				else
				{
					sen1State = q0;
  401f9e:	4b19      	ldr	r3, [pc, #100]	; (402004 <SenParseFrame+0x14c>)
  401fa0:	2200      	movs	r2, #0
  401fa2:	701a      	strb	r2, [r3, #0]
				}
				break;
  401fa4:	e029      	b.n	401ffa <SenParseFrame+0x142>
			case q5:
				sen1Ctr++;
  401fa6:	4b1a      	ldr	r3, [pc, #104]	; (402010 <SenParseFrame+0x158>)
  401fa8:	781b      	ldrb	r3, [r3, #0]
  401faa:	3301      	adds	r3, #1
  401fac:	b2da      	uxtb	r2, r3
  401fae:	4b18      	ldr	r3, [pc, #96]	; (402010 <SenParseFrame+0x158>)
  401fb0:	701a      	strb	r2, [r3, #0]
				if(sen1Ctr==4)
  401fb2:	4b17      	ldr	r3, [pc, #92]	; (402010 <SenParseFrame+0x158>)
  401fb4:	781b      	ldrb	r3, [r3, #0]
  401fb6:	2b04      	cmp	r3, #4
  401fb8:	d108      	bne.n	401fcc <SenParseFrame+0x114>
				{
					hrtRate |= data;
  401fba:	79bb      	ldrb	r3, [r7, #6]
  401fbc:	b29a      	uxth	r2, r3
  401fbe:	4b13      	ldr	r3, [pc, #76]	; (40200c <SenParseFrame+0x154>)
  401fc0:	881b      	ldrh	r3, [r3, #0]
  401fc2:	4313      	orrs	r3, r2
  401fc4:	b29a      	uxth	r2, r3
  401fc6:	4b11      	ldr	r3, [pc, #68]	; (40200c <SenParseFrame+0x154>)
  401fc8:	801a      	strh	r2, [r3, #0]
				}
				else if(sen1Ctr==120)
				{
					sen1State = q0;					
				}
				break;
  401fca:	e015      	b.n	401ff8 <SenParseFrame+0x140>
				sen1Ctr++;
				if(sen1Ctr==4)
				{
					hrtRate |= data;
				}
				else if(sen1Ctr == 9)
  401fcc:	4b10      	ldr	r3, [pc, #64]	; (402010 <SenParseFrame+0x158>)
  401fce:	781b      	ldrb	r3, [r3, #0]
  401fd0:	2b09      	cmp	r3, #9
  401fd2:	d106      	bne.n	401fe2 <SenParseFrame+0x12a>
				{
					spo2 = data;
  401fd4:	4a0f      	ldr	r2, [pc, #60]	; (402014 <SenParseFrame+0x15c>)
  401fd6:	79bb      	ldrb	r3, [r7, #6]
  401fd8:	7013      	strb	r3, [r2, #0]
					disp = 1;
  401fda:	4b0f      	ldr	r3, [pc, #60]	; (402018 <SenParseFrame+0x160>)
  401fdc:	2201      	movs	r2, #1
  401fde:	701a      	strb	r2, [r3, #0]
				}
				else if(sen1Ctr==120)
				{
					sen1State = q0;					
				}
				break;
  401fe0:	e00a      	b.n	401ff8 <SenParseFrame+0x140>
				else if(sen1Ctr == 9)
				{
					spo2 = data;
					disp = 1;
				}
				else if(sen1Ctr==120)
  401fe2:	4b0b      	ldr	r3, [pc, #44]	; (402010 <SenParseFrame+0x158>)
  401fe4:	781b      	ldrb	r3, [r3, #0]
  401fe6:	2b78      	cmp	r3, #120	; 0x78
  401fe8:	d106      	bne.n	401ff8 <SenParseFrame+0x140>
				{
					sen1State = q0;					
  401fea:	4b06      	ldr	r3, [pc, #24]	; (402004 <SenParseFrame+0x14c>)
  401fec:	2200      	movs	r2, #0
  401fee:	701a      	strb	r2, [r3, #0]
				}
				break;
  401ff0:	bf00      	nop
  401ff2:	e001      	b.n	401ff8 <SenParseFrame+0x140>
				if(data==0x01)
				{
					sen1State = q1;
					sen1Sum = 0x01;
				}
				break;
  401ff4:	bf00      	nop
  401ff6:	e000      	b.n	401ffa <SenParseFrame+0x142>
				}
				else if(sen1Ctr==120)
				{
					sen1State = q0;					
				}
				break;
  401ff8:	bf00      	nop
	}
	else
	{
		
	}
}
  401ffa:	bf00      	nop
  401ffc:	370c      	adds	r7, #12
  401ffe:	46bd      	mov	sp, r7
  402000:	bc80      	pop	{r7}
  402002:	4770      	bx	lr
  402004:	200010d8 	.word	0x200010d8
  402008:	200010d9 	.word	0x200010d9
  40200c:	200010dc 	.word	0x200010dc
  402010:	200010da 	.word	0x200010da
  402014:	20001134 	.word	0x20001134
  402018:	200010de 	.word	0x200010de

0040201c <__libc_init_array>:
  40201c:	b570      	push	{r4, r5, r6, lr}
  40201e:	4e0f      	ldr	r6, [pc, #60]	; (40205c <__libc_init_array+0x40>)
  402020:	4d0f      	ldr	r5, [pc, #60]	; (402060 <__libc_init_array+0x44>)
  402022:	1b76      	subs	r6, r6, r5
  402024:	10b6      	asrs	r6, r6, #2
  402026:	bf18      	it	ne
  402028:	2400      	movne	r4, #0
  40202a:	d005      	beq.n	402038 <__libc_init_array+0x1c>
  40202c:	3401      	adds	r4, #1
  40202e:	f855 3b04 	ldr.w	r3, [r5], #4
  402032:	4798      	blx	r3
  402034:	42a6      	cmp	r6, r4
  402036:	d1f9      	bne.n	40202c <__libc_init_array+0x10>
  402038:	4e0a      	ldr	r6, [pc, #40]	; (402064 <__libc_init_array+0x48>)
  40203a:	4d0b      	ldr	r5, [pc, #44]	; (402068 <__libc_init_array+0x4c>)
  40203c:	1b76      	subs	r6, r6, r5
  40203e:	f003 f85d 	bl	4050fc <_init>
  402042:	10b6      	asrs	r6, r6, #2
  402044:	bf18      	it	ne
  402046:	2400      	movne	r4, #0
  402048:	d006      	beq.n	402058 <__libc_init_array+0x3c>
  40204a:	3401      	adds	r4, #1
  40204c:	f855 3b04 	ldr.w	r3, [r5], #4
  402050:	4798      	blx	r3
  402052:	42a6      	cmp	r6, r4
  402054:	d1f9      	bne.n	40204a <__libc_init_array+0x2e>
  402056:	bd70      	pop	{r4, r5, r6, pc}
  402058:	bd70      	pop	{r4, r5, r6, pc}
  40205a:	bf00      	nop
  40205c:	00405108 	.word	0x00405108
  402060:	00405108 	.word	0x00405108
  402064:	00405110 	.word	0x00405110
  402068:	00405108 	.word	0x00405108

0040206c <iprintf>:
  40206c:	b40f      	push	{r0, r1, r2, r3}
  40206e:	b500      	push	{lr}
  402070:	4907      	ldr	r1, [pc, #28]	; (402090 <iprintf+0x24>)
  402072:	b083      	sub	sp, #12
  402074:	ab04      	add	r3, sp, #16
  402076:	6808      	ldr	r0, [r1, #0]
  402078:	f853 2b04 	ldr.w	r2, [r3], #4
  40207c:	6881      	ldr	r1, [r0, #8]
  40207e:	9301      	str	r3, [sp, #4]
  402080:	f000 f942 	bl	402308 <_vfiprintf_r>
  402084:	b003      	add	sp, #12
  402086:	f85d eb04 	ldr.w	lr, [sp], #4
  40208a:	b004      	add	sp, #16
  40208c:	4770      	bx	lr
  40208e:	bf00      	nop
  402090:	20000430 	.word	0x20000430

00402094 <memset>:
  402094:	b470      	push	{r4, r5, r6}
  402096:	0784      	lsls	r4, r0, #30
  402098:	d046      	beq.n	402128 <memset+0x94>
  40209a:	1e54      	subs	r4, r2, #1
  40209c:	2a00      	cmp	r2, #0
  40209e:	d041      	beq.n	402124 <memset+0x90>
  4020a0:	b2cd      	uxtb	r5, r1
  4020a2:	4603      	mov	r3, r0
  4020a4:	e002      	b.n	4020ac <memset+0x18>
  4020a6:	1e62      	subs	r2, r4, #1
  4020a8:	b3e4      	cbz	r4, 402124 <memset+0x90>
  4020aa:	4614      	mov	r4, r2
  4020ac:	f803 5b01 	strb.w	r5, [r3], #1
  4020b0:	079a      	lsls	r2, r3, #30
  4020b2:	d1f8      	bne.n	4020a6 <memset+0x12>
  4020b4:	2c03      	cmp	r4, #3
  4020b6:	d92e      	bls.n	402116 <memset+0x82>
  4020b8:	b2cd      	uxtb	r5, r1
  4020ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4020be:	2c0f      	cmp	r4, #15
  4020c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4020c4:	d919      	bls.n	4020fa <memset+0x66>
  4020c6:	f103 0210 	add.w	r2, r3, #16
  4020ca:	4626      	mov	r6, r4
  4020cc:	3e10      	subs	r6, #16
  4020ce:	2e0f      	cmp	r6, #15
  4020d0:	f842 5c10 	str.w	r5, [r2, #-16]
  4020d4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4020d8:	f842 5c08 	str.w	r5, [r2, #-8]
  4020dc:	f842 5c04 	str.w	r5, [r2, #-4]
  4020e0:	f102 0210 	add.w	r2, r2, #16
  4020e4:	d8f2      	bhi.n	4020cc <memset+0x38>
  4020e6:	f1a4 0210 	sub.w	r2, r4, #16
  4020ea:	f022 020f 	bic.w	r2, r2, #15
  4020ee:	f004 040f 	and.w	r4, r4, #15
  4020f2:	3210      	adds	r2, #16
  4020f4:	2c03      	cmp	r4, #3
  4020f6:	4413      	add	r3, r2
  4020f8:	d90d      	bls.n	402116 <memset+0x82>
  4020fa:	461e      	mov	r6, r3
  4020fc:	4622      	mov	r2, r4
  4020fe:	3a04      	subs	r2, #4
  402100:	2a03      	cmp	r2, #3
  402102:	f846 5b04 	str.w	r5, [r6], #4
  402106:	d8fa      	bhi.n	4020fe <memset+0x6a>
  402108:	1f22      	subs	r2, r4, #4
  40210a:	f022 0203 	bic.w	r2, r2, #3
  40210e:	3204      	adds	r2, #4
  402110:	4413      	add	r3, r2
  402112:	f004 0403 	and.w	r4, r4, #3
  402116:	b12c      	cbz	r4, 402124 <memset+0x90>
  402118:	b2c9      	uxtb	r1, r1
  40211a:	441c      	add	r4, r3
  40211c:	f803 1b01 	strb.w	r1, [r3], #1
  402120:	42a3      	cmp	r3, r4
  402122:	d1fb      	bne.n	40211c <memset+0x88>
  402124:	bc70      	pop	{r4, r5, r6}
  402126:	4770      	bx	lr
  402128:	4614      	mov	r4, r2
  40212a:	4603      	mov	r3, r0
  40212c:	e7c2      	b.n	4020b4 <memset+0x20>
  40212e:	bf00      	nop

00402130 <setbuf>:
  402130:	2900      	cmp	r1, #0
  402132:	bf0c      	ite	eq
  402134:	2202      	moveq	r2, #2
  402136:	2200      	movne	r2, #0
  402138:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40213c:	f000 b800 	b.w	402140 <setvbuf>

00402140 <setvbuf>:
  402140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402144:	4c51      	ldr	r4, [pc, #324]	; (40228c <setvbuf+0x14c>)
  402146:	6825      	ldr	r5, [r4, #0]
  402148:	b083      	sub	sp, #12
  40214a:	4604      	mov	r4, r0
  40214c:	460f      	mov	r7, r1
  40214e:	4690      	mov	r8, r2
  402150:	461e      	mov	r6, r3
  402152:	b115      	cbz	r5, 40215a <setvbuf+0x1a>
  402154:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402156:	2b00      	cmp	r3, #0
  402158:	d079      	beq.n	40224e <setvbuf+0x10e>
  40215a:	f1b8 0f02 	cmp.w	r8, #2
  40215e:	d004      	beq.n	40216a <setvbuf+0x2a>
  402160:	f1b8 0f01 	cmp.w	r8, #1
  402164:	d87f      	bhi.n	402266 <setvbuf+0x126>
  402166:	2e00      	cmp	r6, #0
  402168:	db7d      	blt.n	402266 <setvbuf+0x126>
  40216a:	4621      	mov	r1, r4
  40216c:	4628      	mov	r0, r5
  40216e:	f001 f917 	bl	4033a0 <_fflush_r>
  402172:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402174:	b141      	cbz	r1, 402188 <setvbuf+0x48>
  402176:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40217a:	4299      	cmp	r1, r3
  40217c:	d002      	beq.n	402184 <setvbuf+0x44>
  40217e:	4628      	mov	r0, r5
  402180:	f001 fa6c 	bl	40365c <_free_r>
  402184:	2300      	movs	r3, #0
  402186:	6323      	str	r3, [r4, #48]	; 0x30
  402188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40218c:	2200      	movs	r2, #0
  40218e:	61a2      	str	r2, [r4, #24]
  402190:	6062      	str	r2, [r4, #4]
  402192:	061a      	lsls	r2, r3, #24
  402194:	d454      	bmi.n	402240 <setvbuf+0x100>
  402196:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40219a:	f023 0303 	bic.w	r3, r3, #3
  40219e:	f1b8 0f02 	cmp.w	r8, #2
  4021a2:	81a3      	strh	r3, [r4, #12]
  4021a4:	d039      	beq.n	40221a <setvbuf+0xda>
  4021a6:	ab01      	add	r3, sp, #4
  4021a8:	466a      	mov	r2, sp
  4021aa:	4621      	mov	r1, r4
  4021ac:	4628      	mov	r0, r5
  4021ae:	f001 fcf3 	bl	403b98 <__swhatbuf_r>
  4021b2:	89a3      	ldrh	r3, [r4, #12]
  4021b4:	4318      	orrs	r0, r3
  4021b6:	81a0      	strh	r0, [r4, #12]
  4021b8:	b326      	cbz	r6, 402204 <setvbuf+0xc4>
  4021ba:	b327      	cbz	r7, 402206 <setvbuf+0xc6>
  4021bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4021be:	2b00      	cmp	r3, #0
  4021c0:	d04d      	beq.n	40225e <setvbuf+0x11e>
  4021c2:	9b00      	ldr	r3, [sp, #0]
  4021c4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4021c8:	6027      	str	r7, [r4, #0]
  4021ca:	429e      	cmp	r6, r3
  4021cc:	bf1c      	itt	ne
  4021ce:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4021d2:	81a0      	strhne	r0, [r4, #12]
  4021d4:	f1b8 0f01 	cmp.w	r8, #1
  4021d8:	bf08      	it	eq
  4021da:	f040 0001 	orreq.w	r0, r0, #1
  4021de:	b283      	uxth	r3, r0
  4021e0:	bf08      	it	eq
  4021e2:	81a0      	strheq	r0, [r4, #12]
  4021e4:	f003 0008 	and.w	r0, r3, #8
  4021e8:	b280      	uxth	r0, r0
  4021ea:	6127      	str	r7, [r4, #16]
  4021ec:	6166      	str	r6, [r4, #20]
  4021ee:	b318      	cbz	r0, 402238 <setvbuf+0xf8>
  4021f0:	f013 0001 	ands.w	r0, r3, #1
  4021f4:	d02f      	beq.n	402256 <setvbuf+0x116>
  4021f6:	2000      	movs	r0, #0
  4021f8:	4276      	negs	r6, r6
  4021fa:	61a6      	str	r6, [r4, #24]
  4021fc:	60a0      	str	r0, [r4, #8]
  4021fe:	b003      	add	sp, #12
  402200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402204:	9e00      	ldr	r6, [sp, #0]
  402206:	4630      	mov	r0, r6
  402208:	f001 fd3a 	bl	403c80 <malloc>
  40220c:	4607      	mov	r7, r0
  40220e:	b368      	cbz	r0, 40226c <setvbuf+0x12c>
  402210:	89a3      	ldrh	r3, [r4, #12]
  402212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402216:	81a3      	strh	r3, [r4, #12]
  402218:	e7d0      	b.n	4021bc <setvbuf+0x7c>
  40221a:	2000      	movs	r0, #0
  40221c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402220:	f043 0302 	orr.w	r3, r3, #2
  402224:	2500      	movs	r5, #0
  402226:	2101      	movs	r1, #1
  402228:	81a3      	strh	r3, [r4, #12]
  40222a:	60a5      	str	r5, [r4, #8]
  40222c:	6022      	str	r2, [r4, #0]
  40222e:	6122      	str	r2, [r4, #16]
  402230:	6161      	str	r1, [r4, #20]
  402232:	b003      	add	sp, #12
  402234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402238:	60a0      	str	r0, [r4, #8]
  40223a:	b003      	add	sp, #12
  40223c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402240:	6921      	ldr	r1, [r4, #16]
  402242:	4628      	mov	r0, r5
  402244:	f001 fa0a 	bl	40365c <_free_r>
  402248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40224c:	e7a3      	b.n	402196 <setvbuf+0x56>
  40224e:	4628      	mov	r0, r5
  402250:	f001 f93a 	bl	4034c8 <__sinit>
  402254:	e781      	b.n	40215a <setvbuf+0x1a>
  402256:	60a6      	str	r6, [r4, #8]
  402258:	b003      	add	sp, #12
  40225a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40225e:	4628      	mov	r0, r5
  402260:	f001 f932 	bl	4034c8 <__sinit>
  402264:	e7ad      	b.n	4021c2 <setvbuf+0x82>
  402266:	f04f 30ff 	mov.w	r0, #4294967295
  40226a:	e7e2      	b.n	402232 <setvbuf+0xf2>
  40226c:	f8dd 9000 	ldr.w	r9, [sp]
  402270:	45b1      	cmp	r9, r6
  402272:	d006      	beq.n	402282 <setvbuf+0x142>
  402274:	4648      	mov	r0, r9
  402276:	f001 fd03 	bl	403c80 <malloc>
  40227a:	4607      	mov	r7, r0
  40227c:	b108      	cbz	r0, 402282 <setvbuf+0x142>
  40227e:	464e      	mov	r6, r9
  402280:	e7c6      	b.n	402210 <setvbuf+0xd0>
  402282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402286:	f04f 30ff 	mov.w	r0, #4294967295
  40228a:	e7c7      	b.n	40221c <setvbuf+0xdc>
  40228c:	20000430 	.word	0x20000430

00402290 <__sprint_r.part.0>:
  402290:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402296:	049c      	lsls	r4, r3, #18
  402298:	4692      	mov	sl, r2
  40229a:	d52c      	bpl.n	4022f6 <__sprint_r.part.0+0x66>
  40229c:	6893      	ldr	r3, [r2, #8]
  40229e:	6812      	ldr	r2, [r2, #0]
  4022a0:	b33b      	cbz	r3, 4022f2 <__sprint_r.part.0+0x62>
  4022a2:	460f      	mov	r7, r1
  4022a4:	4680      	mov	r8, r0
  4022a6:	f102 0908 	add.w	r9, r2, #8
  4022aa:	e919 0060 	ldmdb	r9, {r5, r6}
  4022ae:	08b6      	lsrs	r6, r6, #2
  4022b0:	d017      	beq.n	4022e2 <__sprint_r.part.0+0x52>
  4022b2:	3d04      	subs	r5, #4
  4022b4:	2400      	movs	r4, #0
  4022b6:	e001      	b.n	4022bc <__sprint_r.part.0+0x2c>
  4022b8:	42a6      	cmp	r6, r4
  4022ba:	d010      	beq.n	4022de <__sprint_r.part.0+0x4e>
  4022bc:	463a      	mov	r2, r7
  4022be:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4022c2:	4640      	mov	r0, r8
  4022c4:	f001 f96a 	bl	40359c <_fputwc_r>
  4022c8:	1c43      	adds	r3, r0, #1
  4022ca:	f104 0401 	add.w	r4, r4, #1
  4022ce:	d1f3      	bne.n	4022b8 <__sprint_r.part.0+0x28>
  4022d0:	2300      	movs	r3, #0
  4022d2:	f8ca 3008 	str.w	r3, [sl, #8]
  4022d6:	f8ca 3004 	str.w	r3, [sl, #4]
  4022da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022de:	f8da 3008 	ldr.w	r3, [sl, #8]
  4022e2:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4022e6:	f8ca 3008 	str.w	r3, [sl, #8]
  4022ea:	f109 0908 	add.w	r9, r9, #8
  4022ee:	2b00      	cmp	r3, #0
  4022f0:	d1db      	bne.n	4022aa <__sprint_r.part.0+0x1a>
  4022f2:	2000      	movs	r0, #0
  4022f4:	e7ec      	b.n	4022d0 <__sprint_r.part.0+0x40>
  4022f6:	f001 fa99 	bl	40382c <__sfvwrite_r>
  4022fa:	2300      	movs	r3, #0
  4022fc:	f8ca 3008 	str.w	r3, [sl, #8]
  402300:	f8ca 3004 	str.w	r3, [sl, #4]
  402304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402308 <_vfiprintf_r>:
  402308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40230c:	b0ab      	sub	sp, #172	; 0xac
  40230e:	461c      	mov	r4, r3
  402310:	9100      	str	r1, [sp, #0]
  402312:	4690      	mov	r8, r2
  402314:	9304      	str	r3, [sp, #16]
  402316:	9005      	str	r0, [sp, #20]
  402318:	b118      	cbz	r0, 402322 <_vfiprintf_r+0x1a>
  40231a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40231c:	2b00      	cmp	r3, #0
  40231e:	f000 80de 	beq.w	4024de <_vfiprintf_r+0x1d6>
  402322:	9800      	ldr	r0, [sp, #0]
  402324:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  402328:	b28a      	uxth	r2, r1
  40232a:	0495      	lsls	r5, r2, #18
  40232c:	d407      	bmi.n	40233e <_vfiprintf_r+0x36>
  40232e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  402330:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  402334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402338:	8182      	strh	r2, [r0, #12]
  40233a:	6643      	str	r3, [r0, #100]	; 0x64
  40233c:	b292      	uxth	r2, r2
  40233e:	0711      	lsls	r1, r2, #28
  402340:	f140 80b1 	bpl.w	4024a6 <_vfiprintf_r+0x19e>
  402344:	9b00      	ldr	r3, [sp, #0]
  402346:	691b      	ldr	r3, [r3, #16]
  402348:	2b00      	cmp	r3, #0
  40234a:	f000 80ac 	beq.w	4024a6 <_vfiprintf_r+0x19e>
  40234e:	f002 021a 	and.w	r2, r2, #26
  402352:	2a0a      	cmp	r2, #10
  402354:	f000 80b5 	beq.w	4024c2 <_vfiprintf_r+0x1ba>
  402358:	2300      	movs	r3, #0
  40235a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40235e:	9302      	str	r3, [sp, #8]
  402360:	930f      	str	r3, [sp, #60]	; 0x3c
  402362:	930e      	str	r3, [sp, #56]	; 0x38
  402364:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  402368:	46da      	mov	sl, fp
  40236a:	f898 3000 	ldrb.w	r3, [r8]
  40236e:	4644      	mov	r4, r8
  402370:	b1fb      	cbz	r3, 4023b2 <_vfiprintf_r+0xaa>
  402372:	2b25      	cmp	r3, #37	; 0x25
  402374:	d102      	bne.n	40237c <_vfiprintf_r+0x74>
  402376:	e01c      	b.n	4023b2 <_vfiprintf_r+0xaa>
  402378:	2b25      	cmp	r3, #37	; 0x25
  40237a:	d003      	beq.n	402384 <_vfiprintf_r+0x7c>
  40237c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402380:	2b00      	cmp	r3, #0
  402382:	d1f9      	bne.n	402378 <_vfiprintf_r+0x70>
  402384:	ebc8 0504 	rsb	r5, r8, r4
  402388:	b19d      	cbz	r5, 4023b2 <_vfiprintf_r+0xaa>
  40238a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40238c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40238e:	f8ca 8000 	str.w	r8, [sl]
  402392:	3301      	adds	r3, #1
  402394:	442a      	add	r2, r5
  402396:	2b07      	cmp	r3, #7
  402398:	f8ca 5004 	str.w	r5, [sl, #4]
  40239c:	920f      	str	r2, [sp, #60]	; 0x3c
  40239e:	930e      	str	r3, [sp, #56]	; 0x38
  4023a0:	dd7b      	ble.n	40249a <_vfiprintf_r+0x192>
  4023a2:	2a00      	cmp	r2, #0
  4023a4:	f040 8528 	bne.w	402df8 <_vfiprintf_r+0xaf0>
  4023a8:	9b02      	ldr	r3, [sp, #8]
  4023aa:	920e      	str	r2, [sp, #56]	; 0x38
  4023ac:	442b      	add	r3, r5
  4023ae:	46da      	mov	sl, fp
  4023b0:	9302      	str	r3, [sp, #8]
  4023b2:	7823      	ldrb	r3, [r4, #0]
  4023b4:	2b00      	cmp	r3, #0
  4023b6:	f000 843e 	beq.w	402c36 <_vfiprintf_r+0x92e>
  4023ba:	2100      	movs	r1, #0
  4023bc:	f04f 0300 	mov.w	r3, #0
  4023c0:	f04f 32ff 	mov.w	r2, #4294967295
  4023c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4023c8:	f104 0801 	add.w	r8, r4, #1
  4023cc:	7863      	ldrb	r3, [r4, #1]
  4023ce:	9201      	str	r2, [sp, #4]
  4023d0:	4608      	mov	r0, r1
  4023d2:	460e      	mov	r6, r1
  4023d4:	460c      	mov	r4, r1
  4023d6:	f108 0801 	add.w	r8, r8, #1
  4023da:	f1a3 0220 	sub.w	r2, r3, #32
  4023de:	2a58      	cmp	r2, #88	; 0x58
  4023e0:	f200 8393 	bhi.w	402b0a <_vfiprintf_r+0x802>
  4023e4:	e8df f012 	tbh	[pc, r2, lsl #1]
  4023e8:	03910346 	.word	0x03910346
  4023ec:	034e0391 	.word	0x034e0391
  4023f0:	03910391 	.word	0x03910391
  4023f4:	03910391 	.word	0x03910391
  4023f8:	03910391 	.word	0x03910391
  4023fc:	02670289 	.word	0x02670289
  402400:	00800391 	.word	0x00800391
  402404:	0391026c 	.word	0x0391026c
  402408:	025901c6 	.word	0x025901c6
  40240c:	02590259 	.word	0x02590259
  402410:	02590259 	.word	0x02590259
  402414:	02590259 	.word	0x02590259
  402418:	02590259 	.word	0x02590259
  40241c:	03910391 	.word	0x03910391
  402420:	03910391 	.word	0x03910391
  402424:	03910391 	.word	0x03910391
  402428:	03910391 	.word	0x03910391
  40242c:	03910391 	.word	0x03910391
  402430:	039101cb 	.word	0x039101cb
  402434:	03910391 	.word	0x03910391
  402438:	03910391 	.word	0x03910391
  40243c:	03910391 	.word	0x03910391
  402440:	03910391 	.word	0x03910391
  402444:	02140391 	.word	0x02140391
  402448:	03910391 	.word	0x03910391
  40244c:	03910391 	.word	0x03910391
  402450:	02ee0391 	.word	0x02ee0391
  402454:	03910391 	.word	0x03910391
  402458:	03910311 	.word	0x03910311
  40245c:	03910391 	.word	0x03910391
  402460:	03910391 	.word	0x03910391
  402464:	03910391 	.word	0x03910391
  402468:	03910391 	.word	0x03910391
  40246c:	03340391 	.word	0x03340391
  402470:	0391038a 	.word	0x0391038a
  402474:	03910391 	.word	0x03910391
  402478:	038a0367 	.word	0x038a0367
  40247c:	03910391 	.word	0x03910391
  402480:	0391036c 	.word	0x0391036c
  402484:	02950379 	.word	0x02950379
  402488:	02e90085 	.word	0x02e90085
  40248c:	029b0391 	.word	0x029b0391
  402490:	02ba0391 	.word	0x02ba0391
  402494:	03910391 	.word	0x03910391
  402498:	0353      	.short	0x0353
  40249a:	f10a 0a08 	add.w	sl, sl, #8
  40249e:	9b02      	ldr	r3, [sp, #8]
  4024a0:	442b      	add	r3, r5
  4024a2:	9302      	str	r3, [sp, #8]
  4024a4:	e785      	b.n	4023b2 <_vfiprintf_r+0xaa>
  4024a6:	9900      	ldr	r1, [sp, #0]
  4024a8:	9805      	ldr	r0, [sp, #20]
  4024aa:	f000 fe61 	bl	403170 <__swsetup_r>
  4024ae:	2800      	cmp	r0, #0
  4024b0:	f040 8558 	bne.w	402f64 <_vfiprintf_r+0xc5c>
  4024b4:	9b00      	ldr	r3, [sp, #0]
  4024b6:	899a      	ldrh	r2, [r3, #12]
  4024b8:	f002 021a 	and.w	r2, r2, #26
  4024bc:	2a0a      	cmp	r2, #10
  4024be:	f47f af4b 	bne.w	402358 <_vfiprintf_r+0x50>
  4024c2:	9900      	ldr	r1, [sp, #0]
  4024c4:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4024c8:	2b00      	cmp	r3, #0
  4024ca:	f6ff af45 	blt.w	402358 <_vfiprintf_r+0x50>
  4024ce:	4623      	mov	r3, r4
  4024d0:	4642      	mov	r2, r8
  4024d2:	9805      	ldr	r0, [sp, #20]
  4024d4:	f000 fe16 	bl	403104 <__sbprintf>
  4024d8:	b02b      	add	sp, #172	; 0xac
  4024da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024de:	f000 fff3 	bl	4034c8 <__sinit>
  4024e2:	e71e      	b.n	402322 <_vfiprintf_r+0x1a>
  4024e4:	4264      	negs	r4, r4
  4024e6:	9304      	str	r3, [sp, #16]
  4024e8:	f046 0604 	orr.w	r6, r6, #4
  4024ec:	f898 3000 	ldrb.w	r3, [r8]
  4024f0:	e771      	b.n	4023d6 <_vfiprintf_r+0xce>
  4024f2:	2130      	movs	r1, #48	; 0x30
  4024f4:	9804      	ldr	r0, [sp, #16]
  4024f6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  4024fa:	9901      	ldr	r1, [sp, #4]
  4024fc:	9406      	str	r4, [sp, #24]
  4024fe:	f04f 0300 	mov.w	r3, #0
  402502:	2278      	movs	r2, #120	; 0x78
  402504:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402508:	2900      	cmp	r1, #0
  40250a:	4603      	mov	r3, r0
  40250c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  402510:	6804      	ldr	r4, [r0, #0]
  402512:	f103 0304 	add.w	r3, r3, #4
  402516:	f04f 0500 	mov.w	r5, #0
  40251a:	f046 0202 	orr.w	r2, r6, #2
  40251e:	f2c0 8525 	blt.w	402f6c <_vfiprintf_r+0xc64>
  402522:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402526:	ea54 0205 	orrs.w	r2, r4, r5
  40252a:	f046 0602 	orr.w	r6, r6, #2
  40252e:	9304      	str	r3, [sp, #16]
  402530:	f040 84bf 	bne.w	402eb2 <_vfiprintf_r+0xbaa>
  402534:	48b3      	ldr	r0, [pc, #716]	; (402804 <_vfiprintf_r+0x4fc>)
  402536:	9b01      	ldr	r3, [sp, #4]
  402538:	2b00      	cmp	r3, #0
  40253a:	f040 841c 	bne.w	402d76 <_vfiprintf_r+0xa6e>
  40253e:	4699      	mov	r9, r3
  402540:	2300      	movs	r3, #0
  402542:	9301      	str	r3, [sp, #4]
  402544:	9303      	str	r3, [sp, #12]
  402546:	465f      	mov	r7, fp
  402548:	9b01      	ldr	r3, [sp, #4]
  40254a:	9a03      	ldr	r2, [sp, #12]
  40254c:	4293      	cmp	r3, r2
  40254e:	bfb8      	it	lt
  402550:	4613      	movlt	r3, r2
  402552:	461d      	mov	r5, r3
  402554:	f1b9 0f00 	cmp.w	r9, #0
  402558:	d000      	beq.n	40255c <_vfiprintf_r+0x254>
  40255a:	3501      	adds	r5, #1
  40255c:	f016 0302 	ands.w	r3, r6, #2
  402560:	9307      	str	r3, [sp, #28]
  402562:	bf18      	it	ne
  402564:	3502      	addne	r5, #2
  402566:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  40256a:	9308      	str	r3, [sp, #32]
  40256c:	f040 82f1 	bne.w	402b52 <_vfiprintf_r+0x84a>
  402570:	9b06      	ldr	r3, [sp, #24]
  402572:	1b5c      	subs	r4, r3, r5
  402574:	2c00      	cmp	r4, #0
  402576:	f340 82ec 	ble.w	402b52 <_vfiprintf_r+0x84a>
  40257a:	2c10      	cmp	r4, #16
  40257c:	f340 8556 	ble.w	40302c <_vfiprintf_r+0xd24>
  402580:	f8df 9284 	ldr.w	r9, [pc, #644]	; 402808 <_vfiprintf_r+0x500>
  402584:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  402588:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40258a:	46d4      	mov	ip, sl
  40258c:	2310      	movs	r3, #16
  40258e:	46c2      	mov	sl, r8
  402590:	4670      	mov	r0, lr
  402592:	46a8      	mov	r8, r5
  402594:	464d      	mov	r5, r9
  402596:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40259a:	e007      	b.n	4025ac <_vfiprintf_r+0x2a4>
  40259c:	f100 0e02 	add.w	lr, r0, #2
  4025a0:	f10c 0c08 	add.w	ip, ip, #8
  4025a4:	4608      	mov	r0, r1
  4025a6:	3c10      	subs	r4, #16
  4025a8:	2c10      	cmp	r4, #16
  4025aa:	dd13      	ble.n	4025d4 <_vfiprintf_r+0x2cc>
  4025ac:	1c41      	adds	r1, r0, #1
  4025ae:	3210      	adds	r2, #16
  4025b0:	2907      	cmp	r1, #7
  4025b2:	920f      	str	r2, [sp, #60]	; 0x3c
  4025b4:	f8cc 5000 	str.w	r5, [ip]
  4025b8:	f8cc 3004 	str.w	r3, [ip, #4]
  4025bc:	910e      	str	r1, [sp, #56]	; 0x38
  4025be:	dded      	ble.n	40259c <_vfiprintf_r+0x294>
  4025c0:	2a00      	cmp	r2, #0
  4025c2:	f040 82b7 	bne.w	402b34 <_vfiprintf_r+0x82c>
  4025c6:	3c10      	subs	r4, #16
  4025c8:	2c10      	cmp	r4, #16
  4025ca:	4610      	mov	r0, r2
  4025cc:	f04f 0e01 	mov.w	lr, #1
  4025d0:	46dc      	mov	ip, fp
  4025d2:	dceb      	bgt.n	4025ac <_vfiprintf_r+0x2a4>
  4025d4:	46a9      	mov	r9, r5
  4025d6:	4670      	mov	r0, lr
  4025d8:	4645      	mov	r5, r8
  4025da:	46d0      	mov	r8, sl
  4025dc:	46e2      	mov	sl, ip
  4025de:	4422      	add	r2, r4
  4025e0:	2807      	cmp	r0, #7
  4025e2:	920f      	str	r2, [sp, #60]	; 0x3c
  4025e4:	f8ca 9000 	str.w	r9, [sl]
  4025e8:	f8ca 4004 	str.w	r4, [sl, #4]
  4025ec:	900e      	str	r0, [sp, #56]	; 0x38
  4025ee:	f300 8375 	bgt.w	402cdc <_vfiprintf_r+0x9d4>
  4025f2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4025f6:	f10a 0a08 	add.w	sl, sl, #8
  4025fa:	f100 0e01 	add.w	lr, r0, #1
  4025fe:	2b00      	cmp	r3, #0
  402600:	f040 82b0 	bne.w	402b64 <_vfiprintf_r+0x85c>
  402604:	9b07      	ldr	r3, [sp, #28]
  402606:	2b00      	cmp	r3, #0
  402608:	f000 82c3 	beq.w	402b92 <_vfiprintf_r+0x88a>
  40260c:	3202      	adds	r2, #2
  40260e:	a90c      	add	r1, sp, #48	; 0x30
  402610:	2302      	movs	r3, #2
  402612:	f1be 0f07 	cmp.w	lr, #7
  402616:	920f      	str	r2, [sp, #60]	; 0x3c
  402618:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40261c:	e88a 000a 	stmia.w	sl, {r1, r3}
  402620:	f340 8378 	ble.w	402d14 <_vfiprintf_r+0xa0c>
  402624:	2a00      	cmp	r2, #0
  402626:	f040 840a 	bne.w	402e3e <_vfiprintf_r+0xb36>
  40262a:	9b08      	ldr	r3, [sp, #32]
  40262c:	2b80      	cmp	r3, #128	; 0x80
  40262e:	f04f 0e01 	mov.w	lr, #1
  402632:	4610      	mov	r0, r2
  402634:	46da      	mov	sl, fp
  402636:	f040 82b0 	bne.w	402b9a <_vfiprintf_r+0x892>
  40263a:	9b06      	ldr	r3, [sp, #24]
  40263c:	1b5c      	subs	r4, r3, r5
  40263e:	2c00      	cmp	r4, #0
  402640:	f340 82ab 	ble.w	402b9a <_vfiprintf_r+0x892>
  402644:	2c10      	cmp	r4, #16
  402646:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 40280c <_vfiprintf_r+0x504>
  40264a:	f340 850b 	ble.w	403064 <_vfiprintf_r+0xd5c>
  40264e:	46d6      	mov	lr, sl
  402650:	2310      	movs	r3, #16
  402652:	46c2      	mov	sl, r8
  402654:	46a8      	mov	r8, r5
  402656:	464d      	mov	r5, r9
  402658:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40265c:	e007      	b.n	40266e <_vfiprintf_r+0x366>
  40265e:	f100 0c02 	add.w	ip, r0, #2
  402662:	f10e 0e08 	add.w	lr, lr, #8
  402666:	4608      	mov	r0, r1
  402668:	3c10      	subs	r4, #16
  40266a:	2c10      	cmp	r4, #16
  40266c:	dd13      	ble.n	402696 <_vfiprintf_r+0x38e>
  40266e:	1c41      	adds	r1, r0, #1
  402670:	3210      	adds	r2, #16
  402672:	2907      	cmp	r1, #7
  402674:	920f      	str	r2, [sp, #60]	; 0x3c
  402676:	f8ce 5000 	str.w	r5, [lr]
  40267a:	f8ce 3004 	str.w	r3, [lr, #4]
  40267e:	910e      	str	r1, [sp, #56]	; 0x38
  402680:	dded      	ble.n	40265e <_vfiprintf_r+0x356>
  402682:	2a00      	cmp	r2, #0
  402684:	f040 8315 	bne.w	402cb2 <_vfiprintf_r+0x9aa>
  402688:	3c10      	subs	r4, #16
  40268a:	2c10      	cmp	r4, #16
  40268c:	f04f 0c01 	mov.w	ip, #1
  402690:	4610      	mov	r0, r2
  402692:	46de      	mov	lr, fp
  402694:	dceb      	bgt.n	40266e <_vfiprintf_r+0x366>
  402696:	46a9      	mov	r9, r5
  402698:	4645      	mov	r5, r8
  40269a:	46d0      	mov	r8, sl
  40269c:	46f2      	mov	sl, lr
  40269e:	4422      	add	r2, r4
  4026a0:	f1bc 0f07 	cmp.w	ip, #7
  4026a4:	920f      	str	r2, [sp, #60]	; 0x3c
  4026a6:	f8ca 9000 	str.w	r9, [sl]
  4026aa:	f8ca 4004 	str.w	r4, [sl, #4]
  4026ae:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  4026b2:	f300 83d2 	bgt.w	402e5a <_vfiprintf_r+0xb52>
  4026b6:	9b01      	ldr	r3, [sp, #4]
  4026b8:	9903      	ldr	r1, [sp, #12]
  4026ba:	1a5c      	subs	r4, r3, r1
  4026bc:	2c00      	cmp	r4, #0
  4026be:	f10a 0a08 	add.w	sl, sl, #8
  4026c2:	f10c 0e01 	add.w	lr, ip, #1
  4026c6:	4660      	mov	r0, ip
  4026c8:	f300 826d 	bgt.w	402ba6 <_vfiprintf_r+0x89e>
  4026cc:	9903      	ldr	r1, [sp, #12]
  4026ce:	f8ca 7000 	str.w	r7, [sl]
  4026d2:	440a      	add	r2, r1
  4026d4:	f1be 0f07 	cmp.w	lr, #7
  4026d8:	920f      	str	r2, [sp, #60]	; 0x3c
  4026da:	f8ca 1004 	str.w	r1, [sl, #4]
  4026de:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4026e2:	f340 82ce 	ble.w	402c82 <_vfiprintf_r+0x97a>
  4026e6:	2a00      	cmp	r2, #0
  4026e8:	f040 833a 	bne.w	402d60 <_vfiprintf_r+0xa58>
  4026ec:	0770      	lsls	r0, r6, #29
  4026ee:	920e      	str	r2, [sp, #56]	; 0x38
  4026f0:	d538      	bpl.n	402764 <_vfiprintf_r+0x45c>
  4026f2:	9b06      	ldr	r3, [sp, #24]
  4026f4:	1b5c      	subs	r4, r3, r5
  4026f6:	2c00      	cmp	r4, #0
  4026f8:	dd34      	ble.n	402764 <_vfiprintf_r+0x45c>
  4026fa:	46da      	mov	sl, fp
  4026fc:	2c10      	cmp	r4, #16
  4026fe:	f340 84ab 	ble.w	403058 <_vfiprintf_r+0xd50>
  402702:	f8df 9104 	ldr.w	r9, [pc, #260]	; 402808 <_vfiprintf_r+0x500>
  402706:	990e      	ldr	r1, [sp, #56]	; 0x38
  402708:	464f      	mov	r7, r9
  40270a:	2610      	movs	r6, #16
  40270c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402710:	e006      	b.n	402720 <_vfiprintf_r+0x418>
  402712:	1c88      	adds	r0, r1, #2
  402714:	f10a 0a08 	add.w	sl, sl, #8
  402718:	4619      	mov	r1, r3
  40271a:	3c10      	subs	r4, #16
  40271c:	2c10      	cmp	r4, #16
  40271e:	dd13      	ble.n	402748 <_vfiprintf_r+0x440>
  402720:	1c4b      	adds	r3, r1, #1
  402722:	3210      	adds	r2, #16
  402724:	2b07      	cmp	r3, #7
  402726:	920f      	str	r2, [sp, #60]	; 0x3c
  402728:	f8ca 7000 	str.w	r7, [sl]
  40272c:	f8ca 6004 	str.w	r6, [sl, #4]
  402730:	930e      	str	r3, [sp, #56]	; 0x38
  402732:	ddee      	ble.n	402712 <_vfiprintf_r+0x40a>
  402734:	2a00      	cmp	r2, #0
  402736:	f040 828e 	bne.w	402c56 <_vfiprintf_r+0x94e>
  40273a:	3c10      	subs	r4, #16
  40273c:	2c10      	cmp	r4, #16
  40273e:	f04f 0001 	mov.w	r0, #1
  402742:	4611      	mov	r1, r2
  402744:	46da      	mov	sl, fp
  402746:	dceb      	bgt.n	402720 <_vfiprintf_r+0x418>
  402748:	46b9      	mov	r9, r7
  40274a:	4422      	add	r2, r4
  40274c:	2807      	cmp	r0, #7
  40274e:	920f      	str	r2, [sp, #60]	; 0x3c
  402750:	f8ca 9000 	str.w	r9, [sl]
  402754:	f8ca 4004 	str.w	r4, [sl, #4]
  402758:	900e      	str	r0, [sp, #56]	; 0x38
  40275a:	f340 829b 	ble.w	402c94 <_vfiprintf_r+0x98c>
  40275e:	2a00      	cmp	r2, #0
  402760:	f040 8425 	bne.w	402fae <_vfiprintf_r+0xca6>
  402764:	9b02      	ldr	r3, [sp, #8]
  402766:	9a06      	ldr	r2, [sp, #24]
  402768:	42aa      	cmp	r2, r5
  40276a:	bfac      	ite	ge
  40276c:	189b      	addge	r3, r3, r2
  40276e:	195b      	addlt	r3, r3, r5
  402770:	9302      	str	r3, [sp, #8]
  402772:	e299      	b.n	402ca8 <_vfiprintf_r+0x9a0>
  402774:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402778:	f898 3000 	ldrb.w	r3, [r8]
  40277c:	e62b      	b.n	4023d6 <_vfiprintf_r+0xce>
  40277e:	9406      	str	r4, [sp, #24]
  402780:	2900      	cmp	r1, #0
  402782:	f040 84af 	bne.w	4030e4 <_vfiprintf_r+0xddc>
  402786:	f046 0610 	orr.w	r6, r6, #16
  40278a:	06b3      	lsls	r3, r6, #26
  40278c:	f140 8312 	bpl.w	402db4 <_vfiprintf_r+0xaac>
  402790:	9904      	ldr	r1, [sp, #16]
  402792:	3107      	adds	r1, #7
  402794:	f021 0107 	bic.w	r1, r1, #7
  402798:	e9d1 2300 	ldrd	r2, r3, [r1]
  40279c:	3108      	adds	r1, #8
  40279e:	9104      	str	r1, [sp, #16]
  4027a0:	4614      	mov	r4, r2
  4027a2:	461d      	mov	r5, r3
  4027a4:	2a00      	cmp	r2, #0
  4027a6:	f173 0300 	sbcs.w	r3, r3, #0
  4027aa:	f2c0 8386 	blt.w	402eba <_vfiprintf_r+0xbb2>
  4027ae:	9b01      	ldr	r3, [sp, #4]
  4027b0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4027b4:	2b00      	cmp	r3, #0
  4027b6:	f2c0 831a 	blt.w	402dee <_vfiprintf_r+0xae6>
  4027ba:	ea54 0305 	orrs.w	r3, r4, r5
  4027be:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4027c2:	f000 80ed 	beq.w	4029a0 <_vfiprintf_r+0x698>
  4027c6:	2d00      	cmp	r5, #0
  4027c8:	bf08      	it	eq
  4027ca:	2c0a      	cmpeq	r4, #10
  4027cc:	f0c0 80ed 	bcc.w	4029aa <_vfiprintf_r+0x6a2>
  4027d0:	465f      	mov	r7, fp
  4027d2:	4620      	mov	r0, r4
  4027d4:	4629      	mov	r1, r5
  4027d6:	220a      	movs	r2, #10
  4027d8:	2300      	movs	r3, #0
  4027da:	f002 fabb 	bl	404d54 <__aeabi_uldivmod>
  4027de:	3230      	adds	r2, #48	; 0x30
  4027e0:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4027e4:	4620      	mov	r0, r4
  4027e6:	4629      	mov	r1, r5
  4027e8:	2300      	movs	r3, #0
  4027ea:	220a      	movs	r2, #10
  4027ec:	f002 fab2 	bl	404d54 <__aeabi_uldivmod>
  4027f0:	4604      	mov	r4, r0
  4027f2:	460d      	mov	r5, r1
  4027f4:	ea54 0305 	orrs.w	r3, r4, r5
  4027f8:	d1eb      	bne.n	4027d2 <_vfiprintf_r+0x4ca>
  4027fa:	ebc7 030b 	rsb	r3, r7, fp
  4027fe:	9303      	str	r3, [sp, #12]
  402800:	e6a2      	b.n	402548 <_vfiprintf_r+0x240>
  402802:	bf00      	nop
  402804:	004050d0 	.word	0x004050d0
  402808:	004050ec 	.word	0x004050ec
  40280c:	004050ac 	.word	0x004050ac
  402810:	9406      	str	r4, [sp, #24]
  402812:	2900      	cmp	r1, #0
  402814:	f040 8462 	bne.w	4030dc <_vfiprintf_r+0xdd4>
  402818:	f046 0610 	orr.w	r6, r6, #16
  40281c:	f016 0320 	ands.w	r3, r6, #32
  402820:	f000 82ae 	beq.w	402d80 <_vfiprintf_r+0xa78>
  402824:	9b04      	ldr	r3, [sp, #16]
  402826:	3307      	adds	r3, #7
  402828:	f023 0307 	bic.w	r3, r3, #7
  40282c:	f04f 0200 	mov.w	r2, #0
  402830:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402834:	e9d3 4500 	ldrd	r4, r5, [r3]
  402838:	f103 0208 	add.w	r2, r3, #8
  40283c:	9b01      	ldr	r3, [sp, #4]
  40283e:	9204      	str	r2, [sp, #16]
  402840:	2b00      	cmp	r3, #0
  402842:	f2c0 8174 	blt.w	402b2e <_vfiprintf_r+0x826>
  402846:	ea54 0305 	orrs.w	r3, r4, r5
  40284a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40284e:	f040 816e 	bne.w	402b2e <_vfiprintf_r+0x826>
  402852:	9b01      	ldr	r3, [sp, #4]
  402854:	2b00      	cmp	r3, #0
  402856:	f000 8430 	beq.w	4030ba <_vfiprintf_r+0xdb2>
  40285a:	f04f 0900 	mov.w	r9, #0
  40285e:	2400      	movs	r4, #0
  402860:	2500      	movs	r5, #0
  402862:	465f      	mov	r7, fp
  402864:	08e2      	lsrs	r2, r4, #3
  402866:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40286a:	08e9      	lsrs	r1, r5, #3
  40286c:	f004 0307 	and.w	r3, r4, #7
  402870:	460d      	mov	r5, r1
  402872:	4614      	mov	r4, r2
  402874:	3330      	adds	r3, #48	; 0x30
  402876:	ea54 0205 	orrs.w	r2, r4, r5
  40287a:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40287e:	d1f1      	bne.n	402864 <_vfiprintf_r+0x55c>
  402880:	07f4      	lsls	r4, r6, #31
  402882:	d5ba      	bpl.n	4027fa <_vfiprintf_r+0x4f2>
  402884:	2b30      	cmp	r3, #48	; 0x30
  402886:	d0b8      	beq.n	4027fa <_vfiprintf_r+0x4f2>
  402888:	2230      	movs	r2, #48	; 0x30
  40288a:	1e7b      	subs	r3, r7, #1
  40288c:	f807 2c01 	strb.w	r2, [r7, #-1]
  402890:	ebc3 020b 	rsb	r2, r3, fp
  402894:	9203      	str	r2, [sp, #12]
  402896:	461f      	mov	r7, r3
  402898:	e656      	b.n	402548 <_vfiprintf_r+0x240>
  40289a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40289e:	2400      	movs	r4, #0
  4028a0:	f818 3b01 	ldrb.w	r3, [r8], #1
  4028a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4028a8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4028ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4028b0:	2a09      	cmp	r2, #9
  4028b2:	d9f5      	bls.n	4028a0 <_vfiprintf_r+0x598>
  4028b4:	e591      	b.n	4023da <_vfiprintf_r+0xd2>
  4028b6:	f898 3000 	ldrb.w	r3, [r8]
  4028ba:	2101      	movs	r1, #1
  4028bc:	202b      	movs	r0, #43	; 0x2b
  4028be:	e58a      	b.n	4023d6 <_vfiprintf_r+0xce>
  4028c0:	f898 3000 	ldrb.w	r3, [r8]
  4028c4:	2b2a      	cmp	r3, #42	; 0x2a
  4028c6:	f108 0501 	add.w	r5, r8, #1
  4028ca:	f000 83dd 	beq.w	403088 <_vfiprintf_r+0xd80>
  4028ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4028d2:	2a09      	cmp	r2, #9
  4028d4:	46a8      	mov	r8, r5
  4028d6:	bf98      	it	ls
  4028d8:	2500      	movls	r5, #0
  4028da:	f200 83ce 	bhi.w	40307a <_vfiprintf_r+0xd72>
  4028de:	f818 3b01 	ldrb.w	r3, [r8], #1
  4028e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4028e6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4028ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4028ee:	2a09      	cmp	r2, #9
  4028f0:	d9f5      	bls.n	4028de <_vfiprintf_r+0x5d6>
  4028f2:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  4028f6:	9201      	str	r2, [sp, #4]
  4028f8:	e56f      	b.n	4023da <_vfiprintf_r+0xd2>
  4028fa:	9a04      	ldr	r2, [sp, #16]
  4028fc:	6814      	ldr	r4, [r2, #0]
  4028fe:	4613      	mov	r3, r2
  402900:	2c00      	cmp	r4, #0
  402902:	f103 0304 	add.w	r3, r3, #4
  402906:	f6ff aded 	blt.w	4024e4 <_vfiprintf_r+0x1dc>
  40290a:	9304      	str	r3, [sp, #16]
  40290c:	f898 3000 	ldrb.w	r3, [r8]
  402910:	e561      	b.n	4023d6 <_vfiprintf_r+0xce>
  402912:	9406      	str	r4, [sp, #24]
  402914:	2900      	cmp	r1, #0
  402916:	d081      	beq.n	40281c <_vfiprintf_r+0x514>
  402918:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40291c:	e77e      	b.n	40281c <_vfiprintf_r+0x514>
  40291e:	9a04      	ldr	r2, [sp, #16]
  402920:	9406      	str	r4, [sp, #24]
  402922:	6817      	ldr	r7, [r2, #0]
  402924:	f04f 0300 	mov.w	r3, #0
  402928:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40292c:	1d14      	adds	r4, r2, #4
  40292e:	9b01      	ldr	r3, [sp, #4]
  402930:	2f00      	cmp	r7, #0
  402932:	f000 8386 	beq.w	403042 <_vfiprintf_r+0xd3a>
  402936:	2b00      	cmp	r3, #0
  402938:	f2c0 835f 	blt.w	402ffa <_vfiprintf_r+0xcf2>
  40293c:	461a      	mov	r2, r3
  40293e:	2100      	movs	r1, #0
  402940:	4638      	mov	r0, r7
  402942:	f001 fc5d 	bl	404200 <memchr>
  402946:	2800      	cmp	r0, #0
  402948:	f000 838f 	beq.w	40306a <_vfiprintf_r+0xd62>
  40294c:	1bc3      	subs	r3, r0, r7
  40294e:	9303      	str	r3, [sp, #12]
  402950:	2300      	movs	r3, #0
  402952:	9404      	str	r4, [sp, #16]
  402954:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402958:	9301      	str	r3, [sp, #4]
  40295a:	e5f5      	b.n	402548 <_vfiprintf_r+0x240>
  40295c:	9406      	str	r4, [sp, #24]
  40295e:	2900      	cmp	r1, #0
  402960:	f040 83b9 	bne.w	4030d6 <_vfiprintf_r+0xdce>
  402964:	f016 0920 	ands.w	r9, r6, #32
  402968:	d135      	bne.n	4029d6 <_vfiprintf_r+0x6ce>
  40296a:	f016 0310 	ands.w	r3, r6, #16
  40296e:	d103      	bne.n	402978 <_vfiprintf_r+0x670>
  402970:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402974:	f040 832a 	bne.w	402fcc <_vfiprintf_r+0xcc4>
  402978:	9a04      	ldr	r2, [sp, #16]
  40297a:	4613      	mov	r3, r2
  40297c:	6814      	ldr	r4, [r2, #0]
  40297e:	9a01      	ldr	r2, [sp, #4]
  402980:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402984:	2a00      	cmp	r2, #0
  402986:	f103 0304 	add.w	r3, r3, #4
  40298a:	f04f 0500 	mov.w	r5, #0
  40298e:	f2c0 8332 	blt.w	402ff6 <_vfiprintf_r+0xcee>
  402992:	ea54 0205 	orrs.w	r2, r4, r5
  402996:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40299a:	9304      	str	r3, [sp, #16]
  40299c:	f47f af13 	bne.w	4027c6 <_vfiprintf_r+0x4be>
  4029a0:	9b01      	ldr	r3, [sp, #4]
  4029a2:	2b00      	cmp	r3, #0
  4029a4:	f43f adcc 	beq.w	402540 <_vfiprintf_r+0x238>
  4029a8:	2400      	movs	r4, #0
  4029aa:	af2a      	add	r7, sp, #168	; 0xa8
  4029ac:	3430      	adds	r4, #48	; 0x30
  4029ae:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4029b2:	ebc7 030b 	rsb	r3, r7, fp
  4029b6:	9303      	str	r3, [sp, #12]
  4029b8:	e5c6      	b.n	402548 <_vfiprintf_r+0x240>
  4029ba:	f046 0620 	orr.w	r6, r6, #32
  4029be:	f898 3000 	ldrb.w	r3, [r8]
  4029c2:	e508      	b.n	4023d6 <_vfiprintf_r+0xce>
  4029c4:	9406      	str	r4, [sp, #24]
  4029c6:	2900      	cmp	r1, #0
  4029c8:	f040 836e 	bne.w	4030a8 <_vfiprintf_r+0xda0>
  4029cc:	f046 0610 	orr.w	r6, r6, #16
  4029d0:	f016 0920 	ands.w	r9, r6, #32
  4029d4:	d0c9      	beq.n	40296a <_vfiprintf_r+0x662>
  4029d6:	9b04      	ldr	r3, [sp, #16]
  4029d8:	3307      	adds	r3, #7
  4029da:	f023 0307 	bic.w	r3, r3, #7
  4029de:	f04f 0200 	mov.w	r2, #0
  4029e2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4029e6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4029ea:	f103 0208 	add.w	r2, r3, #8
  4029ee:	9b01      	ldr	r3, [sp, #4]
  4029f0:	9204      	str	r2, [sp, #16]
  4029f2:	2b00      	cmp	r3, #0
  4029f4:	f2c0 81f9 	blt.w	402dea <_vfiprintf_r+0xae2>
  4029f8:	ea54 0305 	orrs.w	r3, r4, r5
  4029fc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402a00:	f04f 0900 	mov.w	r9, #0
  402a04:	f47f aedf 	bne.w	4027c6 <_vfiprintf_r+0x4be>
  402a08:	e7ca      	b.n	4029a0 <_vfiprintf_r+0x698>
  402a0a:	9406      	str	r4, [sp, #24]
  402a0c:	2900      	cmp	r1, #0
  402a0e:	f040 8351 	bne.w	4030b4 <_vfiprintf_r+0xdac>
  402a12:	06b2      	lsls	r2, r6, #26
  402a14:	48ae      	ldr	r0, [pc, #696]	; (402cd0 <_vfiprintf_r+0x9c8>)
  402a16:	d541      	bpl.n	402a9c <_vfiprintf_r+0x794>
  402a18:	9a04      	ldr	r2, [sp, #16]
  402a1a:	3207      	adds	r2, #7
  402a1c:	f022 0207 	bic.w	r2, r2, #7
  402a20:	e9d2 4500 	ldrd	r4, r5, [r2]
  402a24:	f102 0108 	add.w	r1, r2, #8
  402a28:	9104      	str	r1, [sp, #16]
  402a2a:	f016 0901 	ands.w	r9, r6, #1
  402a2e:	f000 8177 	beq.w	402d20 <_vfiprintf_r+0xa18>
  402a32:	ea54 0205 	orrs.w	r2, r4, r5
  402a36:	f040 8226 	bne.w	402e86 <_vfiprintf_r+0xb7e>
  402a3a:	f04f 0300 	mov.w	r3, #0
  402a3e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402a42:	9b01      	ldr	r3, [sp, #4]
  402a44:	2b00      	cmp	r3, #0
  402a46:	f2c0 8196 	blt.w	402d76 <_vfiprintf_r+0xa6e>
  402a4a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402a4e:	e572      	b.n	402536 <_vfiprintf_r+0x22e>
  402a50:	9a04      	ldr	r2, [sp, #16]
  402a52:	9406      	str	r4, [sp, #24]
  402a54:	6813      	ldr	r3, [r2, #0]
  402a56:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  402a5a:	4613      	mov	r3, r2
  402a5c:	f04f 0100 	mov.w	r1, #0
  402a60:	2501      	movs	r5, #1
  402a62:	3304      	adds	r3, #4
  402a64:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  402a68:	9304      	str	r3, [sp, #16]
  402a6a:	9503      	str	r5, [sp, #12]
  402a6c:	af10      	add	r7, sp, #64	; 0x40
  402a6e:	2300      	movs	r3, #0
  402a70:	9301      	str	r3, [sp, #4]
  402a72:	e573      	b.n	40255c <_vfiprintf_r+0x254>
  402a74:	f898 3000 	ldrb.w	r3, [r8]
  402a78:	2800      	cmp	r0, #0
  402a7a:	f47f acac 	bne.w	4023d6 <_vfiprintf_r+0xce>
  402a7e:	2101      	movs	r1, #1
  402a80:	2020      	movs	r0, #32
  402a82:	e4a8      	b.n	4023d6 <_vfiprintf_r+0xce>
  402a84:	f046 0601 	orr.w	r6, r6, #1
  402a88:	f898 3000 	ldrb.w	r3, [r8]
  402a8c:	e4a3      	b.n	4023d6 <_vfiprintf_r+0xce>
  402a8e:	9406      	str	r4, [sp, #24]
  402a90:	2900      	cmp	r1, #0
  402a92:	f040 830c 	bne.w	4030ae <_vfiprintf_r+0xda6>
  402a96:	06b2      	lsls	r2, r6, #26
  402a98:	488e      	ldr	r0, [pc, #568]	; (402cd4 <_vfiprintf_r+0x9cc>)
  402a9a:	d4bd      	bmi.n	402a18 <_vfiprintf_r+0x710>
  402a9c:	9904      	ldr	r1, [sp, #16]
  402a9e:	06f7      	lsls	r7, r6, #27
  402aa0:	460a      	mov	r2, r1
  402aa2:	f100 819d 	bmi.w	402de0 <_vfiprintf_r+0xad8>
  402aa6:	0675      	lsls	r5, r6, #25
  402aa8:	f140 819a 	bpl.w	402de0 <_vfiprintf_r+0xad8>
  402aac:	3204      	adds	r2, #4
  402aae:	880c      	ldrh	r4, [r1, #0]
  402ab0:	9204      	str	r2, [sp, #16]
  402ab2:	2500      	movs	r5, #0
  402ab4:	e7b9      	b.n	402a2a <_vfiprintf_r+0x722>
  402ab6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402aba:	f898 3000 	ldrb.w	r3, [r8]
  402abe:	e48a      	b.n	4023d6 <_vfiprintf_r+0xce>
  402ac0:	f898 3000 	ldrb.w	r3, [r8]
  402ac4:	2b6c      	cmp	r3, #108	; 0x6c
  402ac6:	bf03      	ittte	eq
  402ac8:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  402acc:	f046 0620 	orreq.w	r6, r6, #32
  402ad0:	f108 0801 	addeq.w	r8, r8, #1
  402ad4:	f046 0610 	orrne.w	r6, r6, #16
  402ad8:	e47d      	b.n	4023d6 <_vfiprintf_r+0xce>
  402ada:	2900      	cmp	r1, #0
  402adc:	f040 8309 	bne.w	4030f2 <_vfiprintf_r+0xdea>
  402ae0:	06b4      	lsls	r4, r6, #26
  402ae2:	f140 821c 	bpl.w	402f1e <_vfiprintf_r+0xc16>
  402ae6:	9a04      	ldr	r2, [sp, #16]
  402ae8:	9902      	ldr	r1, [sp, #8]
  402aea:	6813      	ldr	r3, [r2, #0]
  402aec:	17cd      	asrs	r5, r1, #31
  402aee:	4608      	mov	r0, r1
  402af0:	3204      	adds	r2, #4
  402af2:	4629      	mov	r1, r5
  402af4:	9204      	str	r2, [sp, #16]
  402af6:	e9c3 0100 	strd	r0, r1, [r3]
  402afa:	e436      	b.n	40236a <_vfiprintf_r+0x62>
  402afc:	9406      	str	r4, [sp, #24]
  402afe:	2900      	cmp	r1, #0
  402b00:	f43f ae43 	beq.w	40278a <_vfiprintf_r+0x482>
  402b04:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402b08:	e63f      	b.n	40278a <_vfiprintf_r+0x482>
  402b0a:	9406      	str	r4, [sp, #24]
  402b0c:	2900      	cmp	r1, #0
  402b0e:	f040 82ed 	bne.w	4030ec <_vfiprintf_r+0xde4>
  402b12:	2b00      	cmp	r3, #0
  402b14:	f000 808f 	beq.w	402c36 <_vfiprintf_r+0x92e>
  402b18:	2501      	movs	r5, #1
  402b1a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  402b1e:	f04f 0300 	mov.w	r3, #0
  402b22:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402b26:	9503      	str	r5, [sp, #12]
  402b28:	af10      	add	r7, sp, #64	; 0x40
  402b2a:	e7a0      	b.n	402a6e <_vfiprintf_r+0x766>
  402b2c:	9304      	str	r3, [sp, #16]
  402b2e:	f04f 0900 	mov.w	r9, #0
  402b32:	e696      	b.n	402862 <_vfiprintf_r+0x55a>
  402b34:	aa0d      	add	r2, sp, #52	; 0x34
  402b36:	9900      	ldr	r1, [sp, #0]
  402b38:	9309      	str	r3, [sp, #36]	; 0x24
  402b3a:	4648      	mov	r0, r9
  402b3c:	f7ff fba8 	bl	402290 <__sprint_r.part.0>
  402b40:	2800      	cmp	r0, #0
  402b42:	d17f      	bne.n	402c44 <_vfiprintf_r+0x93c>
  402b44:	980e      	ldr	r0, [sp, #56]	; 0x38
  402b46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402b4a:	f100 0e01 	add.w	lr, r0, #1
  402b4e:	46dc      	mov	ip, fp
  402b50:	e529      	b.n	4025a6 <_vfiprintf_r+0x29e>
  402b52:	980e      	ldr	r0, [sp, #56]	; 0x38
  402b54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402b56:	f100 0e01 	add.w	lr, r0, #1
  402b5a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402b5e:	2b00      	cmp	r3, #0
  402b60:	f43f ad50 	beq.w	402604 <_vfiprintf_r+0x2fc>
  402b64:	3201      	adds	r2, #1
  402b66:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  402b6a:	2301      	movs	r3, #1
  402b6c:	f1be 0f07 	cmp.w	lr, #7
  402b70:	920f      	str	r2, [sp, #60]	; 0x3c
  402b72:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402b76:	e88a 000a 	stmia.w	sl, {r1, r3}
  402b7a:	f340 80bf 	ble.w	402cfc <_vfiprintf_r+0x9f4>
  402b7e:	2a00      	cmp	r2, #0
  402b80:	f040 814e 	bne.w	402e20 <_vfiprintf_r+0xb18>
  402b84:	9907      	ldr	r1, [sp, #28]
  402b86:	2900      	cmp	r1, #0
  402b88:	f040 80be 	bne.w	402d08 <_vfiprintf_r+0xa00>
  402b8c:	469e      	mov	lr, r3
  402b8e:	4610      	mov	r0, r2
  402b90:	46da      	mov	sl, fp
  402b92:	9b08      	ldr	r3, [sp, #32]
  402b94:	2b80      	cmp	r3, #128	; 0x80
  402b96:	f43f ad50 	beq.w	40263a <_vfiprintf_r+0x332>
  402b9a:	9b01      	ldr	r3, [sp, #4]
  402b9c:	9903      	ldr	r1, [sp, #12]
  402b9e:	1a5c      	subs	r4, r3, r1
  402ba0:	2c00      	cmp	r4, #0
  402ba2:	f77f ad93 	ble.w	4026cc <_vfiprintf_r+0x3c4>
  402ba6:	2c10      	cmp	r4, #16
  402ba8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402cd8 <_vfiprintf_r+0x9d0>
  402bac:	dd25      	ble.n	402bfa <_vfiprintf_r+0x8f2>
  402bae:	46d4      	mov	ip, sl
  402bb0:	2310      	movs	r3, #16
  402bb2:	46c2      	mov	sl, r8
  402bb4:	46a8      	mov	r8, r5
  402bb6:	464d      	mov	r5, r9
  402bb8:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402bbc:	e007      	b.n	402bce <_vfiprintf_r+0x8c6>
  402bbe:	f100 0e02 	add.w	lr, r0, #2
  402bc2:	f10c 0c08 	add.w	ip, ip, #8
  402bc6:	4608      	mov	r0, r1
  402bc8:	3c10      	subs	r4, #16
  402bca:	2c10      	cmp	r4, #16
  402bcc:	dd11      	ble.n	402bf2 <_vfiprintf_r+0x8ea>
  402bce:	1c41      	adds	r1, r0, #1
  402bd0:	3210      	adds	r2, #16
  402bd2:	2907      	cmp	r1, #7
  402bd4:	920f      	str	r2, [sp, #60]	; 0x3c
  402bd6:	f8cc 5000 	str.w	r5, [ip]
  402bda:	f8cc 3004 	str.w	r3, [ip, #4]
  402bde:	910e      	str	r1, [sp, #56]	; 0x38
  402be0:	dded      	ble.n	402bbe <_vfiprintf_r+0x8b6>
  402be2:	b9d2      	cbnz	r2, 402c1a <_vfiprintf_r+0x912>
  402be4:	3c10      	subs	r4, #16
  402be6:	2c10      	cmp	r4, #16
  402be8:	f04f 0e01 	mov.w	lr, #1
  402bec:	4610      	mov	r0, r2
  402bee:	46dc      	mov	ip, fp
  402bf0:	dced      	bgt.n	402bce <_vfiprintf_r+0x8c6>
  402bf2:	46a9      	mov	r9, r5
  402bf4:	4645      	mov	r5, r8
  402bf6:	46d0      	mov	r8, sl
  402bf8:	46e2      	mov	sl, ip
  402bfa:	4422      	add	r2, r4
  402bfc:	f1be 0f07 	cmp.w	lr, #7
  402c00:	920f      	str	r2, [sp, #60]	; 0x3c
  402c02:	f8ca 9000 	str.w	r9, [sl]
  402c06:	f8ca 4004 	str.w	r4, [sl, #4]
  402c0a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402c0e:	dc2e      	bgt.n	402c6e <_vfiprintf_r+0x966>
  402c10:	f10a 0a08 	add.w	sl, sl, #8
  402c14:	f10e 0e01 	add.w	lr, lr, #1
  402c18:	e558      	b.n	4026cc <_vfiprintf_r+0x3c4>
  402c1a:	aa0d      	add	r2, sp, #52	; 0x34
  402c1c:	9900      	ldr	r1, [sp, #0]
  402c1e:	9301      	str	r3, [sp, #4]
  402c20:	4648      	mov	r0, r9
  402c22:	f7ff fb35 	bl	402290 <__sprint_r.part.0>
  402c26:	b968      	cbnz	r0, 402c44 <_vfiprintf_r+0x93c>
  402c28:	980e      	ldr	r0, [sp, #56]	; 0x38
  402c2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c2c:	9b01      	ldr	r3, [sp, #4]
  402c2e:	f100 0e01 	add.w	lr, r0, #1
  402c32:	46dc      	mov	ip, fp
  402c34:	e7c8      	b.n	402bc8 <_vfiprintf_r+0x8c0>
  402c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402c38:	b123      	cbz	r3, 402c44 <_vfiprintf_r+0x93c>
  402c3a:	9805      	ldr	r0, [sp, #20]
  402c3c:	9900      	ldr	r1, [sp, #0]
  402c3e:	aa0d      	add	r2, sp, #52	; 0x34
  402c40:	f7ff fb26 	bl	402290 <__sprint_r.part.0>
  402c44:	9b00      	ldr	r3, [sp, #0]
  402c46:	899b      	ldrh	r3, [r3, #12]
  402c48:	065a      	lsls	r2, r3, #25
  402c4a:	f100 818b 	bmi.w	402f64 <_vfiprintf_r+0xc5c>
  402c4e:	9802      	ldr	r0, [sp, #8]
  402c50:	b02b      	add	sp, #172	; 0xac
  402c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c56:	aa0d      	add	r2, sp, #52	; 0x34
  402c58:	9900      	ldr	r1, [sp, #0]
  402c5a:	4648      	mov	r0, r9
  402c5c:	f7ff fb18 	bl	402290 <__sprint_r.part.0>
  402c60:	2800      	cmp	r0, #0
  402c62:	d1ef      	bne.n	402c44 <_vfiprintf_r+0x93c>
  402c64:	990e      	ldr	r1, [sp, #56]	; 0x38
  402c66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c68:	1c48      	adds	r0, r1, #1
  402c6a:	46da      	mov	sl, fp
  402c6c:	e555      	b.n	40271a <_vfiprintf_r+0x412>
  402c6e:	2a00      	cmp	r2, #0
  402c70:	f040 80fb 	bne.w	402e6a <_vfiprintf_r+0xb62>
  402c74:	9a03      	ldr	r2, [sp, #12]
  402c76:	921b      	str	r2, [sp, #108]	; 0x6c
  402c78:	2301      	movs	r3, #1
  402c7a:	920f      	str	r2, [sp, #60]	; 0x3c
  402c7c:	971a      	str	r7, [sp, #104]	; 0x68
  402c7e:	930e      	str	r3, [sp, #56]	; 0x38
  402c80:	46da      	mov	sl, fp
  402c82:	f10a 0a08 	add.w	sl, sl, #8
  402c86:	0771      	lsls	r1, r6, #29
  402c88:	d504      	bpl.n	402c94 <_vfiprintf_r+0x98c>
  402c8a:	9b06      	ldr	r3, [sp, #24]
  402c8c:	1b5c      	subs	r4, r3, r5
  402c8e:	2c00      	cmp	r4, #0
  402c90:	f73f ad34 	bgt.w	4026fc <_vfiprintf_r+0x3f4>
  402c94:	9b02      	ldr	r3, [sp, #8]
  402c96:	9906      	ldr	r1, [sp, #24]
  402c98:	42a9      	cmp	r1, r5
  402c9a:	bfac      	ite	ge
  402c9c:	185b      	addge	r3, r3, r1
  402c9e:	195b      	addlt	r3, r3, r5
  402ca0:	9302      	str	r3, [sp, #8]
  402ca2:	2a00      	cmp	r2, #0
  402ca4:	f040 80b3 	bne.w	402e0e <_vfiprintf_r+0xb06>
  402ca8:	2300      	movs	r3, #0
  402caa:	930e      	str	r3, [sp, #56]	; 0x38
  402cac:	46da      	mov	sl, fp
  402cae:	f7ff bb5c 	b.w	40236a <_vfiprintf_r+0x62>
  402cb2:	aa0d      	add	r2, sp, #52	; 0x34
  402cb4:	9900      	ldr	r1, [sp, #0]
  402cb6:	9307      	str	r3, [sp, #28]
  402cb8:	4648      	mov	r0, r9
  402cba:	f7ff fae9 	bl	402290 <__sprint_r.part.0>
  402cbe:	2800      	cmp	r0, #0
  402cc0:	d1c0      	bne.n	402c44 <_vfiprintf_r+0x93c>
  402cc2:	980e      	ldr	r0, [sp, #56]	; 0x38
  402cc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402cc6:	9b07      	ldr	r3, [sp, #28]
  402cc8:	f100 0c01 	add.w	ip, r0, #1
  402ccc:	46de      	mov	lr, fp
  402cce:	e4cb      	b.n	402668 <_vfiprintf_r+0x360>
  402cd0:	004050bc 	.word	0x004050bc
  402cd4:	004050d0 	.word	0x004050d0
  402cd8:	004050ac 	.word	0x004050ac
  402cdc:	2a00      	cmp	r2, #0
  402cde:	f040 8133 	bne.w	402f48 <_vfiprintf_r+0xc40>
  402ce2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402ce6:	2b00      	cmp	r3, #0
  402ce8:	f000 80f5 	beq.w	402ed6 <_vfiprintf_r+0xbce>
  402cec:	2301      	movs	r3, #1
  402cee:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  402cf2:	461a      	mov	r2, r3
  402cf4:	931b      	str	r3, [sp, #108]	; 0x6c
  402cf6:	469e      	mov	lr, r3
  402cf8:	911a      	str	r1, [sp, #104]	; 0x68
  402cfa:	46da      	mov	sl, fp
  402cfc:	4670      	mov	r0, lr
  402cfe:	f10a 0a08 	add.w	sl, sl, #8
  402d02:	f10e 0e01 	add.w	lr, lr, #1
  402d06:	e47d      	b.n	402604 <_vfiprintf_r+0x2fc>
  402d08:	a90c      	add	r1, sp, #48	; 0x30
  402d0a:	2202      	movs	r2, #2
  402d0c:	469e      	mov	lr, r3
  402d0e:	911a      	str	r1, [sp, #104]	; 0x68
  402d10:	921b      	str	r2, [sp, #108]	; 0x6c
  402d12:	46da      	mov	sl, fp
  402d14:	4670      	mov	r0, lr
  402d16:	f10a 0a08 	add.w	sl, sl, #8
  402d1a:	f10e 0e01 	add.w	lr, lr, #1
  402d1e:	e738      	b.n	402b92 <_vfiprintf_r+0x88a>
  402d20:	9b01      	ldr	r3, [sp, #4]
  402d22:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402d26:	2b00      	cmp	r3, #0
  402d28:	f2c0 812a 	blt.w	402f80 <_vfiprintf_r+0xc78>
  402d2c:	ea54 0305 	orrs.w	r3, r4, r5
  402d30:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402d34:	f43f abff 	beq.w	402536 <_vfiprintf_r+0x22e>
  402d38:	465f      	mov	r7, fp
  402d3a:	0923      	lsrs	r3, r4, #4
  402d3c:	f004 010f 	and.w	r1, r4, #15
  402d40:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402d44:	092a      	lsrs	r2, r5, #4
  402d46:	461c      	mov	r4, r3
  402d48:	4615      	mov	r5, r2
  402d4a:	5c43      	ldrb	r3, [r0, r1]
  402d4c:	f807 3d01 	strb.w	r3, [r7, #-1]!
  402d50:	ea54 0305 	orrs.w	r3, r4, r5
  402d54:	d1f1      	bne.n	402d3a <_vfiprintf_r+0xa32>
  402d56:	ebc7 030b 	rsb	r3, r7, fp
  402d5a:	9303      	str	r3, [sp, #12]
  402d5c:	f7ff bbf4 	b.w	402548 <_vfiprintf_r+0x240>
  402d60:	aa0d      	add	r2, sp, #52	; 0x34
  402d62:	9900      	ldr	r1, [sp, #0]
  402d64:	9805      	ldr	r0, [sp, #20]
  402d66:	f7ff fa93 	bl	402290 <__sprint_r.part.0>
  402d6a:	2800      	cmp	r0, #0
  402d6c:	f47f af6a 	bne.w	402c44 <_vfiprintf_r+0x93c>
  402d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402d72:	46da      	mov	sl, fp
  402d74:	e787      	b.n	402c86 <_vfiprintf_r+0x97e>
  402d76:	f04f 0900 	mov.w	r9, #0
  402d7a:	2400      	movs	r4, #0
  402d7c:	2500      	movs	r5, #0
  402d7e:	e7db      	b.n	402d38 <_vfiprintf_r+0xa30>
  402d80:	f016 0210 	ands.w	r2, r6, #16
  402d84:	f000 80b2 	beq.w	402eec <_vfiprintf_r+0xbe4>
  402d88:	9904      	ldr	r1, [sp, #16]
  402d8a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402d8e:	460a      	mov	r2, r1
  402d90:	680c      	ldr	r4, [r1, #0]
  402d92:	9901      	ldr	r1, [sp, #4]
  402d94:	2900      	cmp	r1, #0
  402d96:	f102 0204 	add.w	r2, r2, #4
  402d9a:	f04f 0500 	mov.w	r5, #0
  402d9e:	f2c0 8159 	blt.w	403054 <_vfiprintf_r+0xd4c>
  402da2:	ea54 0105 	orrs.w	r1, r4, r5
  402da6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402daa:	9204      	str	r2, [sp, #16]
  402dac:	f43f ad51 	beq.w	402852 <_vfiprintf_r+0x54a>
  402db0:	4699      	mov	r9, r3
  402db2:	e556      	b.n	402862 <_vfiprintf_r+0x55a>
  402db4:	06f7      	lsls	r7, r6, #27
  402db6:	d40a      	bmi.n	402dce <_vfiprintf_r+0xac6>
  402db8:	0675      	lsls	r5, r6, #25
  402dba:	d508      	bpl.n	402dce <_vfiprintf_r+0xac6>
  402dbc:	9904      	ldr	r1, [sp, #16]
  402dbe:	f9b1 4000 	ldrsh.w	r4, [r1]
  402dc2:	3104      	adds	r1, #4
  402dc4:	17e5      	asrs	r5, r4, #31
  402dc6:	4622      	mov	r2, r4
  402dc8:	462b      	mov	r3, r5
  402dca:	9104      	str	r1, [sp, #16]
  402dcc:	e4ea      	b.n	4027a4 <_vfiprintf_r+0x49c>
  402dce:	9a04      	ldr	r2, [sp, #16]
  402dd0:	6814      	ldr	r4, [r2, #0]
  402dd2:	4613      	mov	r3, r2
  402dd4:	3304      	adds	r3, #4
  402dd6:	17e5      	asrs	r5, r4, #31
  402dd8:	9304      	str	r3, [sp, #16]
  402dda:	4622      	mov	r2, r4
  402ddc:	462b      	mov	r3, r5
  402dde:	e4e1      	b.n	4027a4 <_vfiprintf_r+0x49c>
  402de0:	6814      	ldr	r4, [r2, #0]
  402de2:	3204      	adds	r2, #4
  402de4:	9204      	str	r2, [sp, #16]
  402de6:	2500      	movs	r5, #0
  402de8:	e61f      	b.n	402a2a <_vfiprintf_r+0x722>
  402dea:	f04f 0900 	mov.w	r9, #0
  402dee:	ea54 0305 	orrs.w	r3, r4, r5
  402df2:	f47f ace8 	bne.w	4027c6 <_vfiprintf_r+0x4be>
  402df6:	e5d8      	b.n	4029aa <_vfiprintf_r+0x6a2>
  402df8:	aa0d      	add	r2, sp, #52	; 0x34
  402dfa:	9900      	ldr	r1, [sp, #0]
  402dfc:	9805      	ldr	r0, [sp, #20]
  402dfe:	f7ff fa47 	bl	402290 <__sprint_r.part.0>
  402e02:	2800      	cmp	r0, #0
  402e04:	f47f af1e 	bne.w	402c44 <_vfiprintf_r+0x93c>
  402e08:	46da      	mov	sl, fp
  402e0a:	f7ff bb48 	b.w	40249e <_vfiprintf_r+0x196>
  402e0e:	aa0d      	add	r2, sp, #52	; 0x34
  402e10:	9900      	ldr	r1, [sp, #0]
  402e12:	9805      	ldr	r0, [sp, #20]
  402e14:	f7ff fa3c 	bl	402290 <__sprint_r.part.0>
  402e18:	2800      	cmp	r0, #0
  402e1a:	f43f af45 	beq.w	402ca8 <_vfiprintf_r+0x9a0>
  402e1e:	e711      	b.n	402c44 <_vfiprintf_r+0x93c>
  402e20:	aa0d      	add	r2, sp, #52	; 0x34
  402e22:	9900      	ldr	r1, [sp, #0]
  402e24:	9805      	ldr	r0, [sp, #20]
  402e26:	f7ff fa33 	bl	402290 <__sprint_r.part.0>
  402e2a:	2800      	cmp	r0, #0
  402e2c:	f47f af0a 	bne.w	402c44 <_vfiprintf_r+0x93c>
  402e30:	980e      	ldr	r0, [sp, #56]	; 0x38
  402e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402e34:	f100 0e01 	add.w	lr, r0, #1
  402e38:	46da      	mov	sl, fp
  402e3a:	f7ff bbe3 	b.w	402604 <_vfiprintf_r+0x2fc>
  402e3e:	aa0d      	add	r2, sp, #52	; 0x34
  402e40:	9900      	ldr	r1, [sp, #0]
  402e42:	9805      	ldr	r0, [sp, #20]
  402e44:	f7ff fa24 	bl	402290 <__sprint_r.part.0>
  402e48:	2800      	cmp	r0, #0
  402e4a:	f47f aefb 	bne.w	402c44 <_vfiprintf_r+0x93c>
  402e4e:	980e      	ldr	r0, [sp, #56]	; 0x38
  402e50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402e52:	f100 0e01 	add.w	lr, r0, #1
  402e56:	46da      	mov	sl, fp
  402e58:	e69b      	b.n	402b92 <_vfiprintf_r+0x88a>
  402e5a:	2a00      	cmp	r2, #0
  402e5c:	f040 80d8 	bne.w	403010 <_vfiprintf_r+0xd08>
  402e60:	f04f 0e01 	mov.w	lr, #1
  402e64:	4610      	mov	r0, r2
  402e66:	46da      	mov	sl, fp
  402e68:	e697      	b.n	402b9a <_vfiprintf_r+0x892>
  402e6a:	aa0d      	add	r2, sp, #52	; 0x34
  402e6c:	9900      	ldr	r1, [sp, #0]
  402e6e:	9805      	ldr	r0, [sp, #20]
  402e70:	f7ff fa0e 	bl	402290 <__sprint_r.part.0>
  402e74:	2800      	cmp	r0, #0
  402e76:	f47f aee5 	bne.w	402c44 <_vfiprintf_r+0x93c>
  402e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402e7e:	f103 0e01 	add.w	lr, r3, #1
  402e82:	46da      	mov	sl, fp
  402e84:	e422      	b.n	4026cc <_vfiprintf_r+0x3c4>
  402e86:	2230      	movs	r2, #48	; 0x30
  402e88:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  402e8c:	9a01      	ldr	r2, [sp, #4]
  402e8e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  402e92:	2a00      	cmp	r2, #0
  402e94:	f04f 0300 	mov.w	r3, #0
  402e98:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402e9c:	f046 0302 	orr.w	r3, r6, #2
  402ea0:	f2c0 80cb 	blt.w	40303a <_vfiprintf_r+0xd32>
  402ea4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402ea8:	f046 0602 	orr.w	r6, r6, #2
  402eac:	f04f 0900 	mov.w	r9, #0
  402eb0:	e742      	b.n	402d38 <_vfiprintf_r+0xa30>
  402eb2:	f04f 0900 	mov.w	r9, #0
  402eb6:	4890      	ldr	r0, [pc, #576]	; (4030f8 <_vfiprintf_r+0xdf0>)
  402eb8:	e73e      	b.n	402d38 <_vfiprintf_r+0xa30>
  402eba:	9b01      	ldr	r3, [sp, #4]
  402ebc:	4264      	negs	r4, r4
  402ebe:	f04f 092d 	mov.w	r9, #45	; 0x2d
  402ec2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402ec6:	2b00      	cmp	r3, #0
  402ec8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402ecc:	f6ff ac7b 	blt.w	4027c6 <_vfiprintf_r+0x4be>
  402ed0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402ed4:	e477      	b.n	4027c6 <_vfiprintf_r+0x4be>
  402ed6:	9b07      	ldr	r3, [sp, #28]
  402ed8:	2b00      	cmp	r3, #0
  402eda:	d072      	beq.n	402fc2 <_vfiprintf_r+0xcba>
  402edc:	ab0c      	add	r3, sp, #48	; 0x30
  402ede:	2202      	movs	r2, #2
  402ee0:	931a      	str	r3, [sp, #104]	; 0x68
  402ee2:	921b      	str	r2, [sp, #108]	; 0x6c
  402ee4:	f04f 0e01 	mov.w	lr, #1
  402ee8:	46da      	mov	sl, fp
  402eea:	e713      	b.n	402d14 <_vfiprintf_r+0xa0c>
  402eec:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402ef0:	d048      	beq.n	402f84 <_vfiprintf_r+0xc7c>
  402ef2:	9904      	ldr	r1, [sp, #16]
  402ef4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402ef8:	460b      	mov	r3, r1
  402efa:	880c      	ldrh	r4, [r1, #0]
  402efc:	9901      	ldr	r1, [sp, #4]
  402efe:	2900      	cmp	r1, #0
  402f00:	f103 0304 	add.w	r3, r3, #4
  402f04:	f04f 0500 	mov.w	r5, #0
  402f08:	f6ff ae10 	blt.w	402b2c <_vfiprintf_r+0x824>
  402f0c:	ea54 0105 	orrs.w	r1, r4, r5
  402f10:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402f14:	9304      	str	r3, [sp, #16]
  402f16:	f43f ac9c 	beq.w	402852 <_vfiprintf_r+0x54a>
  402f1a:	4691      	mov	r9, r2
  402f1c:	e4a1      	b.n	402862 <_vfiprintf_r+0x55a>
  402f1e:	06f0      	lsls	r0, r6, #27
  402f20:	d40a      	bmi.n	402f38 <_vfiprintf_r+0xc30>
  402f22:	0671      	lsls	r1, r6, #25
  402f24:	d508      	bpl.n	402f38 <_vfiprintf_r+0xc30>
  402f26:	9a04      	ldr	r2, [sp, #16]
  402f28:	6813      	ldr	r3, [r2, #0]
  402f2a:	3204      	adds	r2, #4
  402f2c:	9204      	str	r2, [sp, #16]
  402f2e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  402f32:	801a      	strh	r2, [r3, #0]
  402f34:	f7ff ba19 	b.w	40236a <_vfiprintf_r+0x62>
  402f38:	9a04      	ldr	r2, [sp, #16]
  402f3a:	6813      	ldr	r3, [r2, #0]
  402f3c:	3204      	adds	r2, #4
  402f3e:	9204      	str	r2, [sp, #16]
  402f40:	9a02      	ldr	r2, [sp, #8]
  402f42:	601a      	str	r2, [r3, #0]
  402f44:	f7ff ba11 	b.w	40236a <_vfiprintf_r+0x62>
  402f48:	aa0d      	add	r2, sp, #52	; 0x34
  402f4a:	9900      	ldr	r1, [sp, #0]
  402f4c:	9805      	ldr	r0, [sp, #20]
  402f4e:	f7ff f99f 	bl	402290 <__sprint_r.part.0>
  402f52:	2800      	cmp	r0, #0
  402f54:	f47f ae76 	bne.w	402c44 <_vfiprintf_r+0x93c>
  402f58:	980e      	ldr	r0, [sp, #56]	; 0x38
  402f5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f5c:	f100 0e01 	add.w	lr, r0, #1
  402f60:	46da      	mov	sl, fp
  402f62:	e5fa      	b.n	402b5a <_vfiprintf_r+0x852>
  402f64:	f04f 30ff 	mov.w	r0, #4294967295
  402f68:	f7ff bab6 	b.w	4024d8 <_vfiprintf_r+0x1d0>
  402f6c:	4862      	ldr	r0, [pc, #392]	; (4030f8 <_vfiprintf_r+0xdf0>)
  402f6e:	4616      	mov	r6, r2
  402f70:	ea54 0205 	orrs.w	r2, r4, r5
  402f74:	9304      	str	r3, [sp, #16]
  402f76:	f04f 0900 	mov.w	r9, #0
  402f7a:	f47f aedd 	bne.w	402d38 <_vfiprintf_r+0xa30>
  402f7e:	e6fc      	b.n	402d7a <_vfiprintf_r+0xa72>
  402f80:	9b04      	ldr	r3, [sp, #16]
  402f82:	e7f5      	b.n	402f70 <_vfiprintf_r+0xc68>
  402f84:	9a04      	ldr	r2, [sp, #16]
  402f86:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402f8a:	4613      	mov	r3, r2
  402f8c:	6814      	ldr	r4, [r2, #0]
  402f8e:	9a01      	ldr	r2, [sp, #4]
  402f90:	2a00      	cmp	r2, #0
  402f92:	f103 0304 	add.w	r3, r3, #4
  402f96:	f04f 0500 	mov.w	r5, #0
  402f9a:	f6ff adc7 	blt.w	402b2c <_vfiprintf_r+0x824>
  402f9e:	ea54 0205 	orrs.w	r2, r4, r5
  402fa2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402fa6:	9304      	str	r3, [sp, #16]
  402fa8:	f47f ac5b 	bne.w	402862 <_vfiprintf_r+0x55a>
  402fac:	e451      	b.n	402852 <_vfiprintf_r+0x54a>
  402fae:	aa0d      	add	r2, sp, #52	; 0x34
  402fb0:	9900      	ldr	r1, [sp, #0]
  402fb2:	9805      	ldr	r0, [sp, #20]
  402fb4:	f7ff f96c 	bl	402290 <__sprint_r.part.0>
  402fb8:	2800      	cmp	r0, #0
  402fba:	f47f ae43 	bne.w	402c44 <_vfiprintf_r+0x93c>
  402fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402fc0:	e668      	b.n	402c94 <_vfiprintf_r+0x98c>
  402fc2:	4610      	mov	r0, r2
  402fc4:	f04f 0e01 	mov.w	lr, #1
  402fc8:	46da      	mov	sl, fp
  402fca:	e5e6      	b.n	402b9a <_vfiprintf_r+0x892>
  402fcc:	9904      	ldr	r1, [sp, #16]
  402fce:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402fd2:	460a      	mov	r2, r1
  402fd4:	880c      	ldrh	r4, [r1, #0]
  402fd6:	9901      	ldr	r1, [sp, #4]
  402fd8:	2900      	cmp	r1, #0
  402fda:	f102 0204 	add.w	r2, r2, #4
  402fde:	f04f 0500 	mov.w	r5, #0
  402fe2:	db4e      	blt.n	403082 <_vfiprintf_r+0xd7a>
  402fe4:	ea54 0105 	orrs.w	r1, r4, r5
  402fe8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402fec:	9204      	str	r2, [sp, #16]
  402fee:	4699      	mov	r9, r3
  402ff0:	f47f abe9 	bne.w	4027c6 <_vfiprintf_r+0x4be>
  402ff4:	e4d4      	b.n	4029a0 <_vfiprintf_r+0x698>
  402ff6:	9304      	str	r3, [sp, #16]
  402ff8:	e6f9      	b.n	402dee <_vfiprintf_r+0xae6>
  402ffa:	4638      	mov	r0, r7
  402ffc:	9404      	str	r4, [sp, #16]
  402ffe:	f001 fc9f 	bl	404940 <strlen>
  403002:	2300      	movs	r3, #0
  403004:	9003      	str	r0, [sp, #12]
  403006:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40300a:	9301      	str	r3, [sp, #4]
  40300c:	f7ff ba9c 	b.w	402548 <_vfiprintf_r+0x240>
  403010:	aa0d      	add	r2, sp, #52	; 0x34
  403012:	9900      	ldr	r1, [sp, #0]
  403014:	9805      	ldr	r0, [sp, #20]
  403016:	f7ff f93b 	bl	402290 <__sprint_r.part.0>
  40301a:	2800      	cmp	r0, #0
  40301c:	f47f ae12 	bne.w	402c44 <_vfiprintf_r+0x93c>
  403020:	980e      	ldr	r0, [sp, #56]	; 0x38
  403022:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403024:	f100 0e01 	add.w	lr, r0, #1
  403028:	46da      	mov	sl, fp
  40302a:	e5b6      	b.n	402b9a <_vfiprintf_r+0x892>
  40302c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40302e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403030:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 403100 <_vfiprintf_r+0xdf8>
  403034:	3001      	adds	r0, #1
  403036:	f7ff bad2 	b.w	4025de <_vfiprintf_r+0x2d6>
  40303a:	461e      	mov	r6, r3
  40303c:	f04f 0900 	mov.w	r9, #0
  403040:	e67a      	b.n	402d38 <_vfiprintf_r+0xa30>
  403042:	2b06      	cmp	r3, #6
  403044:	bf28      	it	cs
  403046:	2306      	movcs	r3, #6
  403048:	9303      	str	r3, [sp, #12]
  40304a:	9404      	str	r4, [sp, #16]
  40304c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  403050:	4f2a      	ldr	r7, [pc, #168]	; (4030fc <_vfiprintf_r+0xdf4>)
  403052:	e50c      	b.n	402a6e <_vfiprintf_r+0x766>
  403054:	9204      	str	r2, [sp, #16]
  403056:	e56a      	b.n	402b2e <_vfiprintf_r+0x826>
  403058:	980e      	ldr	r0, [sp, #56]	; 0x38
  40305a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 403100 <_vfiprintf_r+0xdf8>
  40305e:	3001      	adds	r0, #1
  403060:	f7ff bb73 	b.w	40274a <_vfiprintf_r+0x442>
  403064:	46f4      	mov	ip, lr
  403066:	f7ff bb1a 	b.w	40269e <_vfiprintf_r+0x396>
  40306a:	9b01      	ldr	r3, [sp, #4]
  40306c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  403070:	9303      	str	r3, [sp, #12]
  403072:	9404      	str	r4, [sp, #16]
  403074:	9001      	str	r0, [sp, #4]
  403076:	f7ff ba67 	b.w	402548 <_vfiprintf_r+0x240>
  40307a:	2200      	movs	r2, #0
  40307c:	9201      	str	r2, [sp, #4]
  40307e:	f7ff b9ac 	b.w	4023da <_vfiprintf_r+0xd2>
  403082:	9204      	str	r2, [sp, #16]
  403084:	4699      	mov	r9, r3
  403086:	e6b2      	b.n	402dee <_vfiprintf_r+0xae6>
  403088:	9a04      	ldr	r2, [sp, #16]
  40308a:	6813      	ldr	r3, [r2, #0]
  40308c:	9301      	str	r3, [sp, #4]
  40308e:	3204      	adds	r2, #4
  403090:	2b00      	cmp	r3, #0
  403092:	9204      	str	r2, [sp, #16]
  403094:	f898 3001 	ldrb.w	r3, [r8, #1]
  403098:	46a8      	mov	r8, r5
  40309a:	f6bf a99c 	bge.w	4023d6 <_vfiprintf_r+0xce>
  40309e:	f04f 32ff 	mov.w	r2, #4294967295
  4030a2:	9201      	str	r2, [sp, #4]
  4030a4:	f7ff b997 	b.w	4023d6 <_vfiprintf_r+0xce>
  4030a8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4030ac:	e48e      	b.n	4029cc <_vfiprintf_r+0x6c4>
  4030ae:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4030b2:	e4f0      	b.n	402a96 <_vfiprintf_r+0x78e>
  4030b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4030b8:	e4ab      	b.n	402a12 <_vfiprintf_r+0x70a>
  4030ba:	4699      	mov	r9, r3
  4030bc:	07f3      	lsls	r3, r6, #31
  4030be:	d505      	bpl.n	4030cc <_vfiprintf_r+0xdc4>
  4030c0:	af2a      	add	r7, sp, #168	; 0xa8
  4030c2:	2330      	movs	r3, #48	; 0x30
  4030c4:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4030c8:	f7ff bb97 	b.w	4027fa <_vfiprintf_r+0x4f2>
  4030cc:	9b01      	ldr	r3, [sp, #4]
  4030ce:	9303      	str	r3, [sp, #12]
  4030d0:	465f      	mov	r7, fp
  4030d2:	f7ff ba39 	b.w	402548 <_vfiprintf_r+0x240>
  4030d6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4030da:	e443      	b.n	402964 <_vfiprintf_r+0x65c>
  4030dc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4030e0:	f7ff bb9a 	b.w	402818 <_vfiprintf_r+0x510>
  4030e4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4030e8:	f7ff bb4d 	b.w	402786 <_vfiprintf_r+0x47e>
  4030ec:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4030f0:	e50f      	b.n	402b12 <_vfiprintf_r+0x80a>
  4030f2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4030f6:	e4f3      	b.n	402ae0 <_vfiprintf_r+0x7d8>
  4030f8:	004050d0 	.word	0x004050d0
  4030fc:	004050e4 	.word	0x004050e4
  403100:	004050ec 	.word	0x004050ec

00403104 <__sbprintf>:
  403104:	b5f0      	push	{r4, r5, r6, r7, lr}
  403106:	460c      	mov	r4, r1
  403108:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40310c:	8989      	ldrh	r1, [r1, #12]
  40310e:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403110:	89e5      	ldrh	r5, [r4, #14]
  403112:	9619      	str	r6, [sp, #100]	; 0x64
  403114:	f021 0102 	bic.w	r1, r1, #2
  403118:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40311a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40311e:	2500      	movs	r5, #0
  403120:	69e7      	ldr	r7, [r4, #28]
  403122:	f8ad 100c 	strh.w	r1, [sp, #12]
  403126:	9609      	str	r6, [sp, #36]	; 0x24
  403128:	9506      	str	r5, [sp, #24]
  40312a:	ae1a      	add	r6, sp, #104	; 0x68
  40312c:	f44f 6580 	mov.w	r5, #1024	; 0x400
  403130:	4669      	mov	r1, sp
  403132:	9600      	str	r6, [sp, #0]
  403134:	9604      	str	r6, [sp, #16]
  403136:	9502      	str	r5, [sp, #8]
  403138:	9505      	str	r5, [sp, #20]
  40313a:	9707      	str	r7, [sp, #28]
  40313c:	4606      	mov	r6, r0
  40313e:	f7ff f8e3 	bl	402308 <_vfiprintf_r>
  403142:	1e05      	subs	r5, r0, #0
  403144:	db07      	blt.n	403156 <__sbprintf+0x52>
  403146:	4630      	mov	r0, r6
  403148:	4669      	mov	r1, sp
  40314a:	f000 f929 	bl	4033a0 <_fflush_r>
  40314e:	2800      	cmp	r0, #0
  403150:	bf18      	it	ne
  403152:	f04f 35ff 	movne.w	r5, #4294967295
  403156:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40315a:	065b      	lsls	r3, r3, #25
  40315c:	d503      	bpl.n	403166 <__sbprintf+0x62>
  40315e:	89a3      	ldrh	r3, [r4, #12]
  403160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403164:	81a3      	strh	r3, [r4, #12]
  403166:	4628      	mov	r0, r5
  403168:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40316e:	bf00      	nop

00403170 <__swsetup_r>:
  403170:	b538      	push	{r3, r4, r5, lr}
  403172:	4b30      	ldr	r3, [pc, #192]	; (403234 <__swsetup_r+0xc4>)
  403174:	681b      	ldr	r3, [r3, #0]
  403176:	4605      	mov	r5, r0
  403178:	460c      	mov	r4, r1
  40317a:	b113      	cbz	r3, 403182 <__swsetup_r+0x12>
  40317c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40317e:	2a00      	cmp	r2, #0
  403180:	d038      	beq.n	4031f4 <__swsetup_r+0x84>
  403182:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403186:	b293      	uxth	r3, r2
  403188:	0718      	lsls	r0, r3, #28
  40318a:	d50c      	bpl.n	4031a6 <__swsetup_r+0x36>
  40318c:	6920      	ldr	r0, [r4, #16]
  40318e:	b1a8      	cbz	r0, 4031bc <__swsetup_r+0x4c>
  403190:	f013 0201 	ands.w	r2, r3, #1
  403194:	d01e      	beq.n	4031d4 <__swsetup_r+0x64>
  403196:	6963      	ldr	r3, [r4, #20]
  403198:	2200      	movs	r2, #0
  40319a:	425b      	negs	r3, r3
  40319c:	61a3      	str	r3, [r4, #24]
  40319e:	60a2      	str	r2, [r4, #8]
  4031a0:	b1f0      	cbz	r0, 4031e0 <__swsetup_r+0x70>
  4031a2:	2000      	movs	r0, #0
  4031a4:	bd38      	pop	{r3, r4, r5, pc}
  4031a6:	06d9      	lsls	r1, r3, #27
  4031a8:	d53c      	bpl.n	403224 <__swsetup_r+0xb4>
  4031aa:	0758      	lsls	r0, r3, #29
  4031ac:	d426      	bmi.n	4031fc <__swsetup_r+0x8c>
  4031ae:	6920      	ldr	r0, [r4, #16]
  4031b0:	f042 0308 	orr.w	r3, r2, #8
  4031b4:	81a3      	strh	r3, [r4, #12]
  4031b6:	b29b      	uxth	r3, r3
  4031b8:	2800      	cmp	r0, #0
  4031ba:	d1e9      	bne.n	403190 <__swsetup_r+0x20>
  4031bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4031c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4031c4:	d0e4      	beq.n	403190 <__swsetup_r+0x20>
  4031c6:	4628      	mov	r0, r5
  4031c8:	4621      	mov	r1, r4
  4031ca:	f000 fd15 	bl	403bf8 <__smakebuf_r>
  4031ce:	89a3      	ldrh	r3, [r4, #12]
  4031d0:	6920      	ldr	r0, [r4, #16]
  4031d2:	e7dd      	b.n	403190 <__swsetup_r+0x20>
  4031d4:	0799      	lsls	r1, r3, #30
  4031d6:	bf58      	it	pl
  4031d8:	6962      	ldrpl	r2, [r4, #20]
  4031da:	60a2      	str	r2, [r4, #8]
  4031dc:	2800      	cmp	r0, #0
  4031de:	d1e0      	bne.n	4031a2 <__swsetup_r+0x32>
  4031e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4031e4:	061a      	lsls	r2, r3, #24
  4031e6:	d5dd      	bpl.n	4031a4 <__swsetup_r+0x34>
  4031e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4031ec:	81a3      	strh	r3, [r4, #12]
  4031ee:	f04f 30ff 	mov.w	r0, #4294967295
  4031f2:	bd38      	pop	{r3, r4, r5, pc}
  4031f4:	4618      	mov	r0, r3
  4031f6:	f000 f967 	bl	4034c8 <__sinit>
  4031fa:	e7c2      	b.n	403182 <__swsetup_r+0x12>
  4031fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4031fe:	b151      	cbz	r1, 403216 <__swsetup_r+0xa6>
  403200:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403204:	4299      	cmp	r1, r3
  403206:	d004      	beq.n	403212 <__swsetup_r+0xa2>
  403208:	4628      	mov	r0, r5
  40320a:	f000 fa27 	bl	40365c <_free_r>
  40320e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403212:	2300      	movs	r3, #0
  403214:	6323      	str	r3, [r4, #48]	; 0x30
  403216:	2300      	movs	r3, #0
  403218:	6920      	ldr	r0, [r4, #16]
  40321a:	6063      	str	r3, [r4, #4]
  40321c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403220:	6020      	str	r0, [r4, #0]
  403222:	e7c5      	b.n	4031b0 <__swsetup_r+0x40>
  403224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403228:	2309      	movs	r3, #9
  40322a:	602b      	str	r3, [r5, #0]
  40322c:	f04f 30ff 	mov.w	r0, #4294967295
  403230:	81a2      	strh	r2, [r4, #12]
  403232:	bd38      	pop	{r3, r4, r5, pc}
  403234:	20000430 	.word	0x20000430

00403238 <register_fini>:
  403238:	4b02      	ldr	r3, [pc, #8]	; (403244 <register_fini+0xc>)
  40323a:	b113      	cbz	r3, 403242 <register_fini+0xa>
  40323c:	4802      	ldr	r0, [pc, #8]	; (403248 <register_fini+0x10>)
  40323e:	f000 b805 	b.w	40324c <atexit>
  403242:	4770      	bx	lr
  403244:	00000000 	.word	0x00000000
  403248:	004034dd 	.word	0x004034dd

0040324c <atexit>:
  40324c:	2300      	movs	r3, #0
  40324e:	4601      	mov	r1, r0
  403250:	461a      	mov	r2, r3
  403252:	4618      	mov	r0, r3
  403254:	f001 bc86 	b.w	404b64 <__register_exitproc>

00403258 <__sflush_r>:
  403258:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40325c:	b29a      	uxth	r2, r3
  40325e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403262:	460d      	mov	r5, r1
  403264:	0711      	lsls	r1, r2, #28
  403266:	4680      	mov	r8, r0
  403268:	d43c      	bmi.n	4032e4 <__sflush_r+0x8c>
  40326a:	686a      	ldr	r2, [r5, #4]
  40326c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403270:	2a00      	cmp	r2, #0
  403272:	81ab      	strh	r3, [r5, #12]
  403274:	dd73      	ble.n	40335e <__sflush_r+0x106>
  403276:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403278:	2c00      	cmp	r4, #0
  40327a:	d04b      	beq.n	403314 <__sflush_r+0xbc>
  40327c:	b29b      	uxth	r3, r3
  40327e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  403282:	2100      	movs	r1, #0
  403284:	b292      	uxth	r2, r2
  403286:	f8d8 6000 	ldr.w	r6, [r8]
  40328a:	f8c8 1000 	str.w	r1, [r8]
  40328e:	2a00      	cmp	r2, #0
  403290:	d069      	beq.n	403366 <__sflush_r+0x10e>
  403292:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403294:	075f      	lsls	r7, r3, #29
  403296:	d505      	bpl.n	4032a4 <__sflush_r+0x4c>
  403298:	6869      	ldr	r1, [r5, #4]
  40329a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40329c:	1a52      	subs	r2, r2, r1
  40329e:	b10b      	cbz	r3, 4032a4 <__sflush_r+0x4c>
  4032a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4032a2:	1ad2      	subs	r2, r2, r3
  4032a4:	2300      	movs	r3, #0
  4032a6:	69e9      	ldr	r1, [r5, #28]
  4032a8:	4640      	mov	r0, r8
  4032aa:	47a0      	blx	r4
  4032ac:	1c44      	adds	r4, r0, #1
  4032ae:	d03c      	beq.n	40332a <__sflush_r+0xd2>
  4032b0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4032b4:	692a      	ldr	r2, [r5, #16]
  4032b6:	602a      	str	r2, [r5, #0]
  4032b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4032bc:	2200      	movs	r2, #0
  4032be:	81ab      	strh	r3, [r5, #12]
  4032c0:	04db      	lsls	r3, r3, #19
  4032c2:	606a      	str	r2, [r5, #4]
  4032c4:	d449      	bmi.n	40335a <__sflush_r+0x102>
  4032c6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4032c8:	f8c8 6000 	str.w	r6, [r8]
  4032cc:	b311      	cbz	r1, 403314 <__sflush_r+0xbc>
  4032ce:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4032d2:	4299      	cmp	r1, r3
  4032d4:	d002      	beq.n	4032dc <__sflush_r+0x84>
  4032d6:	4640      	mov	r0, r8
  4032d8:	f000 f9c0 	bl	40365c <_free_r>
  4032dc:	2000      	movs	r0, #0
  4032de:	6328      	str	r0, [r5, #48]	; 0x30
  4032e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4032e4:	692e      	ldr	r6, [r5, #16]
  4032e6:	b1ae      	cbz	r6, 403314 <__sflush_r+0xbc>
  4032e8:	682c      	ldr	r4, [r5, #0]
  4032ea:	602e      	str	r6, [r5, #0]
  4032ec:	0790      	lsls	r0, r2, #30
  4032ee:	bf0c      	ite	eq
  4032f0:	696b      	ldreq	r3, [r5, #20]
  4032f2:	2300      	movne	r3, #0
  4032f4:	1ba4      	subs	r4, r4, r6
  4032f6:	60ab      	str	r3, [r5, #8]
  4032f8:	e00a      	b.n	403310 <__sflush_r+0xb8>
  4032fa:	4623      	mov	r3, r4
  4032fc:	4632      	mov	r2, r6
  4032fe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403300:	69e9      	ldr	r1, [r5, #28]
  403302:	4640      	mov	r0, r8
  403304:	47b8      	blx	r7
  403306:	2800      	cmp	r0, #0
  403308:	eba4 0400 	sub.w	r4, r4, r0
  40330c:	4406      	add	r6, r0
  40330e:	dd04      	ble.n	40331a <__sflush_r+0xc2>
  403310:	2c00      	cmp	r4, #0
  403312:	dcf2      	bgt.n	4032fa <__sflush_r+0xa2>
  403314:	2000      	movs	r0, #0
  403316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40331a:	89ab      	ldrh	r3, [r5, #12]
  40331c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403320:	81ab      	strh	r3, [r5, #12]
  403322:	f04f 30ff 	mov.w	r0, #4294967295
  403326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40332a:	f8d8 2000 	ldr.w	r2, [r8]
  40332e:	2a1d      	cmp	r2, #29
  403330:	d8f3      	bhi.n	40331a <__sflush_r+0xc2>
  403332:	4b1a      	ldr	r3, [pc, #104]	; (40339c <__sflush_r+0x144>)
  403334:	40d3      	lsrs	r3, r2
  403336:	f003 0301 	and.w	r3, r3, #1
  40333a:	f083 0401 	eor.w	r4, r3, #1
  40333e:	2b00      	cmp	r3, #0
  403340:	d0eb      	beq.n	40331a <__sflush_r+0xc2>
  403342:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403346:	6929      	ldr	r1, [r5, #16]
  403348:	6029      	str	r1, [r5, #0]
  40334a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40334e:	04d9      	lsls	r1, r3, #19
  403350:	606c      	str	r4, [r5, #4]
  403352:	81ab      	strh	r3, [r5, #12]
  403354:	d5b7      	bpl.n	4032c6 <__sflush_r+0x6e>
  403356:	2a00      	cmp	r2, #0
  403358:	d1b5      	bne.n	4032c6 <__sflush_r+0x6e>
  40335a:	6528      	str	r0, [r5, #80]	; 0x50
  40335c:	e7b3      	b.n	4032c6 <__sflush_r+0x6e>
  40335e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403360:	2a00      	cmp	r2, #0
  403362:	dc88      	bgt.n	403276 <__sflush_r+0x1e>
  403364:	e7d6      	b.n	403314 <__sflush_r+0xbc>
  403366:	2301      	movs	r3, #1
  403368:	69e9      	ldr	r1, [r5, #28]
  40336a:	4640      	mov	r0, r8
  40336c:	47a0      	blx	r4
  40336e:	1c43      	adds	r3, r0, #1
  403370:	4602      	mov	r2, r0
  403372:	d002      	beq.n	40337a <__sflush_r+0x122>
  403374:	89ab      	ldrh	r3, [r5, #12]
  403376:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403378:	e78c      	b.n	403294 <__sflush_r+0x3c>
  40337a:	f8d8 3000 	ldr.w	r3, [r8]
  40337e:	2b00      	cmp	r3, #0
  403380:	d0f8      	beq.n	403374 <__sflush_r+0x11c>
  403382:	2b1d      	cmp	r3, #29
  403384:	d001      	beq.n	40338a <__sflush_r+0x132>
  403386:	2b16      	cmp	r3, #22
  403388:	d102      	bne.n	403390 <__sflush_r+0x138>
  40338a:	f8c8 6000 	str.w	r6, [r8]
  40338e:	e7c1      	b.n	403314 <__sflush_r+0xbc>
  403390:	89ab      	ldrh	r3, [r5, #12]
  403392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403396:	81ab      	strh	r3, [r5, #12]
  403398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40339c:	20400001 	.word	0x20400001

004033a0 <_fflush_r>:
  4033a0:	b510      	push	{r4, lr}
  4033a2:	4604      	mov	r4, r0
  4033a4:	b082      	sub	sp, #8
  4033a6:	b108      	cbz	r0, 4033ac <_fflush_r+0xc>
  4033a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4033aa:	b153      	cbz	r3, 4033c2 <_fflush_r+0x22>
  4033ac:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4033b0:	b908      	cbnz	r0, 4033b6 <_fflush_r+0x16>
  4033b2:	b002      	add	sp, #8
  4033b4:	bd10      	pop	{r4, pc}
  4033b6:	4620      	mov	r0, r4
  4033b8:	b002      	add	sp, #8
  4033ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4033be:	f7ff bf4b 	b.w	403258 <__sflush_r>
  4033c2:	9101      	str	r1, [sp, #4]
  4033c4:	f000 f880 	bl	4034c8 <__sinit>
  4033c8:	9901      	ldr	r1, [sp, #4]
  4033ca:	e7ef      	b.n	4033ac <_fflush_r+0xc>

004033cc <_cleanup_r>:
  4033cc:	4901      	ldr	r1, [pc, #4]	; (4033d4 <_cleanup_r+0x8>)
  4033ce:	f000 bbaf 	b.w	403b30 <_fwalk_reent>
  4033d2:	bf00      	nop
  4033d4:	00404c2d 	.word	0x00404c2d

004033d8 <__sinit.part.1>:
  4033d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033dc:	4b35      	ldr	r3, [pc, #212]	; (4034b4 <__sinit.part.1+0xdc>)
  4033de:	6845      	ldr	r5, [r0, #4]
  4033e0:	63c3      	str	r3, [r0, #60]	; 0x3c
  4033e2:	2400      	movs	r4, #0
  4033e4:	4607      	mov	r7, r0
  4033e6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4033ea:	2304      	movs	r3, #4
  4033ec:	2103      	movs	r1, #3
  4033ee:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4033f2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4033f6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4033fa:	b083      	sub	sp, #12
  4033fc:	602c      	str	r4, [r5, #0]
  4033fe:	606c      	str	r4, [r5, #4]
  403400:	60ac      	str	r4, [r5, #8]
  403402:	666c      	str	r4, [r5, #100]	; 0x64
  403404:	81ec      	strh	r4, [r5, #14]
  403406:	612c      	str	r4, [r5, #16]
  403408:	616c      	str	r4, [r5, #20]
  40340a:	61ac      	str	r4, [r5, #24]
  40340c:	81ab      	strh	r3, [r5, #12]
  40340e:	4621      	mov	r1, r4
  403410:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403414:	2208      	movs	r2, #8
  403416:	f7fe fe3d 	bl	402094 <memset>
  40341a:	68be      	ldr	r6, [r7, #8]
  40341c:	f8df b098 	ldr.w	fp, [pc, #152]	; 4034b8 <__sinit.part.1+0xe0>
  403420:	f8df a098 	ldr.w	sl, [pc, #152]	; 4034bc <__sinit.part.1+0xe4>
  403424:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4034c0 <__sinit.part.1+0xe8>
  403428:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4034c4 <__sinit.part.1+0xec>
  40342c:	f8c5 b020 	str.w	fp, [r5, #32]
  403430:	2301      	movs	r3, #1
  403432:	2209      	movs	r2, #9
  403434:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403438:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40343c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403440:	61ed      	str	r5, [r5, #28]
  403442:	4621      	mov	r1, r4
  403444:	81f3      	strh	r3, [r6, #14]
  403446:	81b2      	strh	r2, [r6, #12]
  403448:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40344c:	6034      	str	r4, [r6, #0]
  40344e:	6074      	str	r4, [r6, #4]
  403450:	60b4      	str	r4, [r6, #8]
  403452:	6674      	str	r4, [r6, #100]	; 0x64
  403454:	6134      	str	r4, [r6, #16]
  403456:	6174      	str	r4, [r6, #20]
  403458:	61b4      	str	r4, [r6, #24]
  40345a:	2208      	movs	r2, #8
  40345c:	9301      	str	r3, [sp, #4]
  40345e:	f7fe fe19 	bl	402094 <memset>
  403462:	68fd      	ldr	r5, [r7, #12]
  403464:	61f6      	str	r6, [r6, #28]
  403466:	2012      	movs	r0, #18
  403468:	2202      	movs	r2, #2
  40346a:	f8c6 b020 	str.w	fp, [r6, #32]
  40346e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  403472:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  403476:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40347a:	4621      	mov	r1, r4
  40347c:	81a8      	strh	r0, [r5, #12]
  40347e:	81ea      	strh	r2, [r5, #14]
  403480:	602c      	str	r4, [r5, #0]
  403482:	606c      	str	r4, [r5, #4]
  403484:	60ac      	str	r4, [r5, #8]
  403486:	666c      	str	r4, [r5, #100]	; 0x64
  403488:	612c      	str	r4, [r5, #16]
  40348a:	616c      	str	r4, [r5, #20]
  40348c:	61ac      	str	r4, [r5, #24]
  40348e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403492:	2208      	movs	r2, #8
  403494:	f7fe fdfe 	bl	402094 <memset>
  403498:	9b01      	ldr	r3, [sp, #4]
  40349a:	61ed      	str	r5, [r5, #28]
  40349c:	f8c5 b020 	str.w	fp, [r5, #32]
  4034a0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4034a4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4034a8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4034ac:	63bb      	str	r3, [r7, #56]	; 0x38
  4034ae:	b003      	add	sp, #12
  4034b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034b4:	004033cd 	.word	0x004033cd
  4034b8:	004048a9 	.word	0x004048a9
  4034bc:	004048cd 	.word	0x004048cd
  4034c0:	00404909 	.word	0x00404909
  4034c4:	00404929 	.word	0x00404929

004034c8 <__sinit>:
  4034c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4034ca:	b103      	cbz	r3, 4034ce <__sinit+0x6>
  4034cc:	4770      	bx	lr
  4034ce:	f7ff bf83 	b.w	4033d8 <__sinit.part.1>
  4034d2:	bf00      	nop

004034d4 <__sfp_lock_acquire>:
  4034d4:	4770      	bx	lr
  4034d6:	bf00      	nop

004034d8 <__sfp_lock_release>:
  4034d8:	4770      	bx	lr
  4034da:	bf00      	nop

004034dc <__libc_fini_array>:
  4034dc:	b538      	push	{r3, r4, r5, lr}
  4034de:	4d07      	ldr	r5, [pc, #28]	; (4034fc <__libc_fini_array+0x20>)
  4034e0:	4c07      	ldr	r4, [pc, #28]	; (403500 <__libc_fini_array+0x24>)
  4034e2:	1b2c      	subs	r4, r5, r4
  4034e4:	10a4      	asrs	r4, r4, #2
  4034e6:	d005      	beq.n	4034f4 <__libc_fini_array+0x18>
  4034e8:	3c01      	subs	r4, #1
  4034ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4034ee:	4798      	blx	r3
  4034f0:	2c00      	cmp	r4, #0
  4034f2:	d1f9      	bne.n	4034e8 <__libc_fini_array+0xc>
  4034f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4034f8:	f001 be0a 	b.w	405110 <_fini>
  4034fc:	00405120 	.word	0x00405120
  403500:	0040511c 	.word	0x0040511c

00403504 <__fputwc>:
  403504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403508:	b082      	sub	sp, #8
  40350a:	4680      	mov	r8, r0
  40350c:	4689      	mov	r9, r1
  40350e:	4614      	mov	r4, r2
  403510:	f000 fb3c 	bl	403b8c <__locale_mb_cur_max>
  403514:	2801      	cmp	r0, #1
  403516:	d033      	beq.n	403580 <__fputwc+0x7c>
  403518:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40351c:	464a      	mov	r2, r9
  40351e:	a901      	add	r1, sp, #4
  403520:	4640      	mov	r0, r8
  403522:	f001 fad1 	bl	404ac8 <_wcrtomb_r>
  403526:	f1b0 3fff 	cmp.w	r0, #4294967295
  40352a:	4682      	mov	sl, r0
  40352c:	d021      	beq.n	403572 <__fputwc+0x6e>
  40352e:	b388      	cbz	r0, 403594 <__fputwc+0x90>
  403530:	f89d 6004 	ldrb.w	r6, [sp, #4]
  403534:	2500      	movs	r5, #0
  403536:	e008      	b.n	40354a <__fputwc+0x46>
  403538:	6823      	ldr	r3, [r4, #0]
  40353a:	1c5a      	adds	r2, r3, #1
  40353c:	6022      	str	r2, [r4, #0]
  40353e:	701e      	strb	r6, [r3, #0]
  403540:	3501      	adds	r5, #1
  403542:	4555      	cmp	r5, sl
  403544:	d226      	bcs.n	403594 <__fputwc+0x90>
  403546:	ab01      	add	r3, sp, #4
  403548:	5d5e      	ldrb	r6, [r3, r5]
  40354a:	68a3      	ldr	r3, [r4, #8]
  40354c:	3b01      	subs	r3, #1
  40354e:	2b00      	cmp	r3, #0
  403550:	60a3      	str	r3, [r4, #8]
  403552:	daf1      	bge.n	403538 <__fputwc+0x34>
  403554:	69a7      	ldr	r7, [r4, #24]
  403556:	42bb      	cmp	r3, r7
  403558:	4631      	mov	r1, r6
  40355a:	4622      	mov	r2, r4
  40355c:	4640      	mov	r0, r8
  40355e:	db01      	blt.n	403564 <__fputwc+0x60>
  403560:	2e0a      	cmp	r6, #10
  403562:	d1e9      	bne.n	403538 <__fputwc+0x34>
  403564:	f001 fa5a 	bl	404a1c <__swbuf_r>
  403568:	1c43      	adds	r3, r0, #1
  40356a:	d1e9      	bne.n	403540 <__fputwc+0x3c>
  40356c:	b002      	add	sp, #8
  40356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403572:	89a3      	ldrh	r3, [r4, #12]
  403574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403578:	81a3      	strh	r3, [r4, #12]
  40357a:	b002      	add	sp, #8
  40357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403580:	f109 33ff 	add.w	r3, r9, #4294967295
  403584:	2bfe      	cmp	r3, #254	; 0xfe
  403586:	d8c7      	bhi.n	403518 <__fputwc+0x14>
  403588:	fa5f f689 	uxtb.w	r6, r9
  40358c:	4682      	mov	sl, r0
  40358e:	f88d 6004 	strb.w	r6, [sp, #4]
  403592:	e7cf      	b.n	403534 <__fputwc+0x30>
  403594:	4648      	mov	r0, r9
  403596:	b002      	add	sp, #8
  403598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040359c <_fputwc_r>:
  40359c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4035a0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4035a4:	d10a      	bne.n	4035bc <_fputwc_r+0x20>
  4035a6:	b410      	push	{r4}
  4035a8:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4035aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4035ae:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4035b2:	6654      	str	r4, [r2, #100]	; 0x64
  4035b4:	8193      	strh	r3, [r2, #12]
  4035b6:	bc10      	pop	{r4}
  4035b8:	f7ff bfa4 	b.w	403504 <__fputwc>
  4035bc:	f7ff bfa2 	b.w	403504 <__fputwc>

004035c0 <_malloc_trim_r>:
  4035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4035c2:	4f23      	ldr	r7, [pc, #140]	; (403650 <_malloc_trim_r+0x90>)
  4035c4:	460c      	mov	r4, r1
  4035c6:	4606      	mov	r6, r0
  4035c8:	f000 ff68 	bl	40449c <__malloc_lock>
  4035cc:	68bb      	ldr	r3, [r7, #8]
  4035ce:	685d      	ldr	r5, [r3, #4]
  4035d0:	f025 0503 	bic.w	r5, r5, #3
  4035d4:	1b29      	subs	r1, r5, r4
  4035d6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4035da:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4035de:	f021 010f 	bic.w	r1, r1, #15
  4035e2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4035e6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4035ea:	db07      	blt.n	4035fc <_malloc_trim_r+0x3c>
  4035ec:	2100      	movs	r1, #0
  4035ee:	4630      	mov	r0, r6
  4035f0:	f001 f948 	bl	404884 <_sbrk_r>
  4035f4:	68bb      	ldr	r3, [r7, #8]
  4035f6:	442b      	add	r3, r5
  4035f8:	4298      	cmp	r0, r3
  4035fa:	d004      	beq.n	403606 <_malloc_trim_r+0x46>
  4035fc:	4630      	mov	r0, r6
  4035fe:	f000 ff4f 	bl	4044a0 <__malloc_unlock>
  403602:	2000      	movs	r0, #0
  403604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403606:	4261      	negs	r1, r4
  403608:	4630      	mov	r0, r6
  40360a:	f001 f93b 	bl	404884 <_sbrk_r>
  40360e:	3001      	adds	r0, #1
  403610:	d00d      	beq.n	40362e <_malloc_trim_r+0x6e>
  403612:	4b10      	ldr	r3, [pc, #64]	; (403654 <_malloc_trim_r+0x94>)
  403614:	68ba      	ldr	r2, [r7, #8]
  403616:	6819      	ldr	r1, [r3, #0]
  403618:	1b2d      	subs	r5, r5, r4
  40361a:	f045 0501 	orr.w	r5, r5, #1
  40361e:	4630      	mov	r0, r6
  403620:	1b09      	subs	r1, r1, r4
  403622:	6055      	str	r5, [r2, #4]
  403624:	6019      	str	r1, [r3, #0]
  403626:	f000 ff3b 	bl	4044a0 <__malloc_unlock>
  40362a:	2001      	movs	r0, #1
  40362c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40362e:	2100      	movs	r1, #0
  403630:	4630      	mov	r0, r6
  403632:	f001 f927 	bl	404884 <_sbrk_r>
  403636:	68ba      	ldr	r2, [r7, #8]
  403638:	1a83      	subs	r3, r0, r2
  40363a:	2b0f      	cmp	r3, #15
  40363c:	ddde      	ble.n	4035fc <_malloc_trim_r+0x3c>
  40363e:	4c06      	ldr	r4, [pc, #24]	; (403658 <_malloc_trim_r+0x98>)
  403640:	4904      	ldr	r1, [pc, #16]	; (403654 <_malloc_trim_r+0x94>)
  403642:	6824      	ldr	r4, [r4, #0]
  403644:	f043 0301 	orr.w	r3, r3, #1
  403648:	1b00      	subs	r0, r0, r4
  40364a:	6053      	str	r3, [r2, #4]
  40364c:	6008      	str	r0, [r1, #0]
  40364e:	e7d5      	b.n	4035fc <_malloc_trim_r+0x3c>
  403650:	20000458 	.word	0x20000458
  403654:	200010ec 	.word	0x200010ec
  403658:	20000864 	.word	0x20000864

0040365c <_free_r>:
  40365c:	2900      	cmp	r1, #0
  40365e:	d045      	beq.n	4036ec <_free_r+0x90>
  403660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403664:	460d      	mov	r5, r1
  403666:	4680      	mov	r8, r0
  403668:	f000 ff18 	bl	40449c <__malloc_lock>
  40366c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403670:	496a      	ldr	r1, [pc, #424]	; (40381c <_free_r+0x1c0>)
  403672:	f027 0301 	bic.w	r3, r7, #1
  403676:	f1a5 0408 	sub.w	r4, r5, #8
  40367a:	18e2      	adds	r2, r4, r3
  40367c:	688e      	ldr	r6, [r1, #8]
  40367e:	6850      	ldr	r0, [r2, #4]
  403680:	42b2      	cmp	r2, r6
  403682:	f020 0003 	bic.w	r0, r0, #3
  403686:	d062      	beq.n	40374e <_free_r+0xf2>
  403688:	07fe      	lsls	r6, r7, #31
  40368a:	6050      	str	r0, [r2, #4]
  40368c:	d40b      	bmi.n	4036a6 <_free_r+0x4a>
  40368e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403692:	1be4      	subs	r4, r4, r7
  403694:	f101 0e08 	add.w	lr, r1, #8
  403698:	68a5      	ldr	r5, [r4, #8]
  40369a:	4575      	cmp	r5, lr
  40369c:	443b      	add	r3, r7
  40369e:	d06f      	beq.n	403780 <_free_r+0x124>
  4036a0:	68e7      	ldr	r7, [r4, #12]
  4036a2:	60ef      	str	r7, [r5, #12]
  4036a4:	60bd      	str	r5, [r7, #8]
  4036a6:	1815      	adds	r5, r2, r0
  4036a8:	686d      	ldr	r5, [r5, #4]
  4036aa:	07ed      	lsls	r5, r5, #31
  4036ac:	d542      	bpl.n	403734 <_free_r+0xd8>
  4036ae:	f043 0201 	orr.w	r2, r3, #1
  4036b2:	6062      	str	r2, [r4, #4]
  4036b4:	50e3      	str	r3, [r4, r3]
  4036b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4036ba:	d218      	bcs.n	4036ee <_free_r+0x92>
  4036bc:	08db      	lsrs	r3, r3, #3
  4036be:	1c5a      	adds	r2, r3, #1
  4036c0:	684d      	ldr	r5, [r1, #4]
  4036c2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  4036c6:	60a7      	str	r7, [r4, #8]
  4036c8:	2001      	movs	r0, #1
  4036ca:	109b      	asrs	r3, r3, #2
  4036cc:	fa00 f303 	lsl.w	r3, r0, r3
  4036d0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4036d4:	431d      	orrs	r5, r3
  4036d6:	3808      	subs	r0, #8
  4036d8:	60e0      	str	r0, [r4, #12]
  4036da:	604d      	str	r5, [r1, #4]
  4036dc:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4036e0:	60fc      	str	r4, [r7, #12]
  4036e2:	4640      	mov	r0, r8
  4036e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4036e8:	f000 beda 	b.w	4044a0 <__malloc_unlock>
  4036ec:	4770      	bx	lr
  4036ee:	0a5a      	lsrs	r2, r3, #9
  4036f0:	2a04      	cmp	r2, #4
  4036f2:	d853      	bhi.n	40379c <_free_r+0x140>
  4036f4:	099a      	lsrs	r2, r3, #6
  4036f6:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4036fa:	007f      	lsls	r7, r7, #1
  4036fc:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403700:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  403704:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  403708:	4944      	ldr	r1, [pc, #272]	; (40381c <_free_r+0x1c0>)
  40370a:	3808      	subs	r0, #8
  40370c:	4290      	cmp	r0, r2
  40370e:	d04d      	beq.n	4037ac <_free_r+0x150>
  403710:	6851      	ldr	r1, [r2, #4]
  403712:	f021 0103 	bic.w	r1, r1, #3
  403716:	428b      	cmp	r3, r1
  403718:	d202      	bcs.n	403720 <_free_r+0xc4>
  40371a:	6892      	ldr	r2, [r2, #8]
  40371c:	4290      	cmp	r0, r2
  40371e:	d1f7      	bne.n	403710 <_free_r+0xb4>
  403720:	68d0      	ldr	r0, [r2, #12]
  403722:	60e0      	str	r0, [r4, #12]
  403724:	60a2      	str	r2, [r4, #8]
  403726:	6084      	str	r4, [r0, #8]
  403728:	60d4      	str	r4, [r2, #12]
  40372a:	4640      	mov	r0, r8
  40372c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403730:	f000 beb6 	b.w	4044a0 <__malloc_unlock>
  403734:	6895      	ldr	r5, [r2, #8]
  403736:	4f3a      	ldr	r7, [pc, #232]	; (403820 <_free_r+0x1c4>)
  403738:	42bd      	cmp	r5, r7
  40373a:	4403      	add	r3, r0
  40373c:	d03f      	beq.n	4037be <_free_r+0x162>
  40373e:	68d0      	ldr	r0, [r2, #12]
  403740:	60e8      	str	r0, [r5, #12]
  403742:	f043 0201 	orr.w	r2, r3, #1
  403746:	6085      	str	r5, [r0, #8]
  403748:	6062      	str	r2, [r4, #4]
  40374a:	50e3      	str	r3, [r4, r3]
  40374c:	e7b3      	b.n	4036b6 <_free_r+0x5a>
  40374e:	07ff      	lsls	r7, r7, #31
  403750:	4403      	add	r3, r0
  403752:	d407      	bmi.n	403764 <_free_r+0x108>
  403754:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403758:	1aa4      	subs	r4, r4, r2
  40375a:	4413      	add	r3, r2
  40375c:	68a0      	ldr	r0, [r4, #8]
  40375e:	68e2      	ldr	r2, [r4, #12]
  403760:	60c2      	str	r2, [r0, #12]
  403762:	6090      	str	r0, [r2, #8]
  403764:	4a2f      	ldr	r2, [pc, #188]	; (403824 <_free_r+0x1c8>)
  403766:	6812      	ldr	r2, [r2, #0]
  403768:	f043 0001 	orr.w	r0, r3, #1
  40376c:	4293      	cmp	r3, r2
  40376e:	6060      	str	r0, [r4, #4]
  403770:	608c      	str	r4, [r1, #8]
  403772:	d3b6      	bcc.n	4036e2 <_free_r+0x86>
  403774:	4b2c      	ldr	r3, [pc, #176]	; (403828 <_free_r+0x1cc>)
  403776:	4640      	mov	r0, r8
  403778:	6819      	ldr	r1, [r3, #0]
  40377a:	f7ff ff21 	bl	4035c0 <_malloc_trim_r>
  40377e:	e7b0      	b.n	4036e2 <_free_r+0x86>
  403780:	1811      	adds	r1, r2, r0
  403782:	6849      	ldr	r1, [r1, #4]
  403784:	07c9      	lsls	r1, r1, #31
  403786:	d444      	bmi.n	403812 <_free_r+0x1b6>
  403788:	6891      	ldr	r1, [r2, #8]
  40378a:	68d2      	ldr	r2, [r2, #12]
  40378c:	60ca      	str	r2, [r1, #12]
  40378e:	4403      	add	r3, r0
  403790:	f043 0001 	orr.w	r0, r3, #1
  403794:	6091      	str	r1, [r2, #8]
  403796:	6060      	str	r0, [r4, #4]
  403798:	50e3      	str	r3, [r4, r3]
  40379a:	e7a2      	b.n	4036e2 <_free_r+0x86>
  40379c:	2a14      	cmp	r2, #20
  40379e:	d817      	bhi.n	4037d0 <_free_r+0x174>
  4037a0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4037a4:	007f      	lsls	r7, r7, #1
  4037a6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4037aa:	e7a9      	b.n	403700 <_free_r+0xa4>
  4037ac:	10aa      	asrs	r2, r5, #2
  4037ae:	684b      	ldr	r3, [r1, #4]
  4037b0:	2501      	movs	r5, #1
  4037b2:	fa05 f202 	lsl.w	r2, r5, r2
  4037b6:	4313      	orrs	r3, r2
  4037b8:	604b      	str	r3, [r1, #4]
  4037ba:	4602      	mov	r2, r0
  4037bc:	e7b1      	b.n	403722 <_free_r+0xc6>
  4037be:	f043 0201 	orr.w	r2, r3, #1
  4037c2:	614c      	str	r4, [r1, #20]
  4037c4:	610c      	str	r4, [r1, #16]
  4037c6:	60e5      	str	r5, [r4, #12]
  4037c8:	60a5      	str	r5, [r4, #8]
  4037ca:	6062      	str	r2, [r4, #4]
  4037cc:	50e3      	str	r3, [r4, r3]
  4037ce:	e788      	b.n	4036e2 <_free_r+0x86>
  4037d0:	2a54      	cmp	r2, #84	; 0x54
  4037d2:	d806      	bhi.n	4037e2 <_free_r+0x186>
  4037d4:	0b1a      	lsrs	r2, r3, #12
  4037d6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4037da:	007f      	lsls	r7, r7, #1
  4037dc:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4037e0:	e78e      	b.n	403700 <_free_r+0xa4>
  4037e2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4037e6:	d806      	bhi.n	4037f6 <_free_r+0x19a>
  4037e8:	0bda      	lsrs	r2, r3, #15
  4037ea:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4037ee:	007f      	lsls	r7, r7, #1
  4037f0:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4037f4:	e784      	b.n	403700 <_free_r+0xa4>
  4037f6:	f240 5054 	movw	r0, #1364	; 0x554
  4037fa:	4282      	cmp	r2, r0
  4037fc:	d806      	bhi.n	40380c <_free_r+0x1b0>
  4037fe:	0c9a      	lsrs	r2, r3, #18
  403800:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403804:	007f      	lsls	r7, r7, #1
  403806:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40380a:	e779      	b.n	403700 <_free_r+0xa4>
  40380c:	27fe      	movs	r7, #254	; 0xfe
  40380e:	257e      	movs	r5, #126	; 0x7e
  403810:	e776      	b.n	403700 <_free_r+0xa4>
  403812:	f043 0201 	orr.w	r2, r3, #1
  403816:	6062      	str	r2, [r4, #4]
  403818:	50e3      	str	r3, [r4, r3]
  40381a:	e762      	b.n	4036e2 <_free_r+0x86>
  40381c:	20000458 	.word	0x20000458
  403820:	20000460 	.word	0x20000460
  403824:	20000860 	.word	0x20000860
  403828:	200010e8 	.word	0x200010e8

0040382c <__sfvwrite_r>:
  40382c:	6893      	ldr	r3, [r2, #8]
  40382e:	2b00      	cmp	r3, #0
  403830:	d076      	beq.n	403920 <__sfvwrite_r+0xf4>
  403832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403836:	898b      	ldrh	r3, [r1, #12]
  403838:	b085      	sub	sp, #20
  40383a:	460c      	mov	r4, r1
  40383c:	0719      	lsls	r1, r3, #28
  40383e:	9001      	str	r0, [sp, #4]
  403840:	4616      	mov	r6, r2
  403842:	d529      	bpl.n	403898 <__sfvwrite_r+0x6c>
  403844:	6922      	ldr	r2, [r4, #16]
  403846:	b33a      	cbz	r2, 403898 <__sfvwrite_r+0x6c>
  403848:	f003 0802 	and.w	r8, r3, #2
  40384c:	fa1f f088 	uxth.w	r0, r8
  403850:	6835      	ldr	r5, [r6, #0]
  403852:	2800      	cmp	r0, #0
  403854:	d02f      	beq.n	4038b6 <__sfvwrite_r+0x8a>
  403856:	f04f 0900 	mov.w	r9, #0
  40385a:	4fb4      	ldr	r7, [pc, #720]	; (403b2c <__sfvwrite_r+0x300>)
  40385c:	46c8      	mov	r8, r9
  40385e:	46b2      	mov	sl, r6
  403860:	45b8      	cmp	r8, r7
  403862:	4643      	mov	r3, r8
  403864:	464a      	mov	r2, r9
  403866:	bf28      	it	cs
  403868:	463b      	movcs	r3, r7
  40386a:	9801      	ldr	r0, [sp, #4]
  40386c:	f1b8 0f00 	cmp.w	r8, #0
  403870:	d050      	beq.n	403914 <__sfvwrite_r+0xe8>
  403872:	69e1      	ldr	r1, [r4, #28]
  403874:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403876:	47b0      	blx	r6
  403878:	2800      	cmp	r0, #0
  40387a:	dd71      	ble.n	403960 <__sfvwrite_r+0x134>
  40387c:	f8da 3008 	ldr.w	r3, [sl, #8]
  403880:	1a1b      	subs	r3, r3, r0
  403882:	4481      	add	r9, r0
  403884:	ebc0 0808 	rsb	r8, r0, r8
  403888:	f8ca 3008 	str.w	r3, [sl, #8]
  40388c:	2b00      	cmp	r3, #0
  40388e:	d1e7      	bne.n	403860 <__sfvwrite_r+0x34>
  403890:	2000      	movs	r0, #0
  403892:	b005      	add	sp, #20
  403894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403898:	4621      	mov	r1, r4
  40389a:	9801      	ldr	r0, [sp, #4]
  40389c:	f7ff fc68 	bl	403170 <__swsetup_r>
  4038a0:	2800      	cmp	r0, #0
  4038a2:	f040 813a 	bne.w	403b1a <__sfvwrite_r+0x2ee>
  4038a6:	89a3      	ldrh	r3, [r4, #12]
  4038a8:	6835      	ldr	r5, [r6, #0]
  4038aa:	f003 0802 	and.w	r8, r3, #2
  4038ae:	fa1f f088 	uxth.w	r0, r8
  4038b2:	2800      	cmp	r0, #0
  4038b4:	d1cf      	bne.n	403856 <__sfvwrite_r+0x2a>
  4038b6:	f013 0901 	ands.w	r9, r3, #1
  4038ba:	d15b      	bne.n	403974 <__sfvwrite_r+0x148>
  4038bc:	464f      	mov	r7, r9
  4038be:	9602      	str	r6, [sp, #8]
  4038c0:	b31f      	cbz	r7, 40390a <__sfvwrite_r+0xde>
  4038c2:	059a      	lsls	r2, r3, #22
  4038c4:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4038c8:	d52c      	bpl.n	403924 <__sfvwrite_r+0xf8>
  4038ca:	4547      	cmp	r7, r8
  4038cc:	46c2      	mov	sl, r8
  4038ce:	f0c0 80a4 	bcc.w	403a1a <__sfvwrite_r+0x1ee>
  4038d2:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4038d6:	f040 80b1 	bne.w	403a3c <__sfvwrite_r+0x210>
  4038da:	6820      	ldr	r0, [r4, #0]
  4038dc:	4652      	mov	r2, sl
  4038de:	4649      	mov	r1, r9
  4038e0:	f000 fd78 	bl	4043d4 <memmove>
  4038e4:	68a0      	ldr	r0, [r4, #8]
  4038e6:	6823      	ldr	r3, [r4, #0]
  4038e8:	ebc8 0000 	rsb	r0, r8, r0
  4038ec:	4453      	add	r3, sl
  4038ee:	60a0      	str	r0, [r4, #8]
  4038f0:	6023      	str	r3, [r4, #0]
  4038f2:	4638      	mov	r0, r7
  4038f4:	9a02      	ldr	r2, [sp, #8]
  4038f6:	6893      	ldr	r3, [r2, #8]
  4038f8:	1a1b      	subs	r3, r3, r0
  4038fa:	4481      	add	r9, r0
  4038fc:	1a3f      	subs	r7, r7, r0
  4038fe:	6093      	str	r3, [r2, #8]
  403900:	2b00      	cmp	r3, #0
  403902:	d0c5      	beq.n	403890 <__sfvwrite_r+0x64>
  403904:	89a3      	ldrh	r3, [r4, #12]
  403906:	2f00      	cmp	r7, #0
  403908:	d1db      	bne.n	4038c2 <__sfvwrite_r+0x96>
  40390a:	f8d5 9000 	ldr.w	r9, [r5]
  40390e:	686f      	ldr	r7, [r5, #4]
  403910:	3508      	adds	r5, #8
  403912:	e7d5      	b.n	4038c0 <__sfvwrite_r+0x94>
  403914:	f8d5 9000 	ldr.w	r9, [r5]
  403918:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40391c:	3508      	adds	r5, #8
  40391e:	e79f      	b.n	403860 <__sfvwrite_r+0x34>
  403920:	2000      	movs	r0, #0
  403922:	4770      	bx	lr
  403924:	6820      	ldr	r0, [r4, #0]
  403926:	6923      	ldr	r3, [r4, #16]
  403928:	4298      	cmp	r0, r3
  40392a:	d803      	bhi.n	403934 <__sfvwrite_r+0x108>
  40392c:	6961      	ldr	r1, [r4, #20]
  40392e:	428f      	cmp	r7, r1
  403930:	f080 80b7 	bcs.w	403aa2 <__sfvwrite_r+0x276>
  403934:	45b8      	cmp	r8, r7
  403936:	bf28      	it	cs
  403938:	46b8      	movcs	r8, r7
  40393a:	4642      	mov	r2, r8
  40393c:	4649      	mov	r1, r9
  40393e:	f000 fd49 	bl	4043d4 <memmove>
  403942:	68a3      	ldr	r3, [r4, #8]
  403944:	6822      	ldr	r2, [r4, #0]
  403946:	ebc8 0303 	rsb	r3, r8, r3
  40394a:	4442      	add	r2, r8
  40394c:	60a3      	str	r3, [r4, #8]
  40394e:	6022      	str	r2, [r4, #0]
  403950:	2b00      	cmp	r3, #0
  403952:	d149      	bne.n	4039e8 <__sfvwrite_r+0x1bc>
  403954:	4621      	mov	r1, r4
  403956:	9801      	ldr	r0, [sp, #4]
  403958:	f7ff fd22 	bl	4033a0 <_fflush_r>
  40395c:	2800      	cmp	r0, #0
  40395e:	d043      	beq.n	4039e8 <__sfvwrite_r+0x1bc>
  403960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403968:	f04f 30ff 	mov.w	r0, #4294967295
  40396c:	81a3      	strh	r3, [r4, #12]
  40396e:	b005      	add	sp, #20
  403970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403974:	4680      	mov	r8, r0
  403976:	9002      	str	r0, [sp, #8]
  403978:	4682      	mov	sl, r0
  40397a:	4681      	mov	r9, r0
  40397c:	f1b9 0f00 	cmp.w	r9, #0
  403980:	d02a      	beq.n	4039d8 <__sfvwrite_r+0x1ac>
  403982:	9b02      	ldr	r3, [sp, #8]
  403984:	2b00      	cmp	r3, #0
  403986:	d04c      	beq.n	403a22 <__sfvwrite_r+0x1f6>
  403988:	6820      	ldr	r0, [r4, #0]
  40398a:	6923      	ldr	r3, [r4, #16]
  40398c:	6962      	ldr	r2, [r4, #20]
  40398e:	45c8      	cmp	r8, r9
  403990:	46c3      	mov	fp, r8
  403992:	bf28      	it	cs
  403994:	46cb      	movcs	fp, r9
  403996:	4298      	cmp	r0, r3
  403998:	465f      	mov	r7, fp
  40399a:	d904      	bls.n	4039a6 <__sfvwrite_r+0x17a>
  40399c:	68a3      	ldr	r3, [r4, #8]
  40399e:	4413      	add	r3, r2
  4039a0:	459b      	cmp	fp, r3
  4039a2:	f300 8090 	bgt.w	403ac6 <__sfvwrite_r+0x29a>
  4039a6:	4593      	cmp	fp, r2
  4039a8:	db20      	blt.n	4039ec <__sfvwrite_r+0x1c0>
  4039aa:	4613      	mov	r3, r2
  4039ac:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4039ae:	69e1      	ldr	r1, [r4, #28]
  4039b0:	9801      	ldr	r0, [sp, #4]
  4039b2:	4652      	mov	r2, sl
  4039b4:	47b8      	blx	r7
  4039b6:	1e07      	subs	r7, r0, #0
  4039b8:	ddd2      	ble.n	403960 <__sfvwrite_r+0x134>
  4039ba:	ebb8 0807 	subs.w	r8, r8, r7
  4039be:	d023      	beq.n	403a08 <__sfvwrite_r+0x1dc>
  4039c0:	68b3      	ldr	r3, [r6, #8]
  4039c2:	1bdb      	subs	r3, r3, r7
  4039c4:	44ba      	add	sl, r7
  4039c6:	ebc7 0909 	rsb	r9, r7, r9
  4039ca:	60b3      	str	r3, [r6, #8]
  4039cc:	2b00      	cmp	r3, #0
  4039ce:	f43f af5f 	beq.w	403890 <__sfvwrite_r+0x64>
  4039d2:	f1b9 0f00 	cmp.w	r9, #0
  4039d6:	d1d4      	bne.n	403982 <__sfvwrite_r+0x156>
  4039d8:	2300      	movs	r3, #0
  4039da:	f8d5 a000 	ldr.w	sl, [r5]
  4039de:	f8d5 9004 	ldr.w	r9, [r5, #4]
  4039e2:	9302      	str	r3, [sp, #8]
  4039e4:	3508      	adds	r5, #8
  4039e6:	e7c9      	b.n	40397c <__sfvwrite_r+0x150>
  4039e8:	4640      	mov	r0, r8
  4039ea:	e783      	b.n	4038f4 <__sfvwrite_r+0xc8>
  4039ec:	465a      	mov	r2, fp
  4039ee:	4651      	mov	r1, sl
  4039f0:	f000 fcf0 	bl	4043d4 <memmove>
  4039f4:	68a2      	ldr	r2, [r4, #8]
  4039f6:	6823      	ldr	r3, [r4, #0]
  4039f8:	ebcb 0202 	rsb	r2, fp, r2
  4039fc:	445b      	add	r3, fp
  4039fe:	ebb8 0807 	subs.w	r8, r8, r7
  403a02:	60a2      	str	r2, [r4, #8]
  403a04:	6023      	str	r3, [r4, #0]
  403a06:	d1db      	bne.n	4039c0 <__sfvwrite_r+0x194>
  403a08:	4621      	mov	r1, r4
  403a0a:	9801      	ldr	r0, [sp, #4]
  403a0c:	f7ff fcc8 	bl	4033a0 <_fflush_r>
  403a10:	2800      	cmp	r0, #0
  403a12:	d1a5      	bne.n	403960 <__sfvwrite_r+0x134>
  403a14:	f8cd 8008 	str.w	r8, [sp, #8]
  403a18:	e7d2      	b.n	4039c0 <__sfvwrite_r+0x194>
  403a1a:	6820      	ldr	r0, [r4, #0]
  403a1c:	46b8      	mov	r8, r7
  403a1e:	46ba      	mov	sl, r7
  403a20:	e75c      	b.n	4038dc <__sfvwrite_r+0xb0>
  403a22:	464a      	mov	r2, r9
  403a24:	210a      	movs	r1, #10
  403a26:	4650      	mov	r0, sl
  403a28:	f000 fbea 	bl	404200 <memchr>
  403a2c:	2800      	cmp	r0, #0
  403a2e:	d06f      	beq.n	403b10 <__sfvwrite_r+0x2e4>
  403a30:	3001      	adds	r0, #1
  403a32:	2301      	movs	r3, #1
  403a34:	ebca 0800 	rsb	r8, sl, r0
  403a38:	9302      	str	r3, [sp, #8]
  403a3a:	e7a5      	b.n	403988 <__sfvwrite_r+0x15c>
  403a3c:	6962      	ldr	r2, [r4, #20]
  403a3e:	6820      	ldr	r0, [r4, #0]
  403a40:	6921      	ldr	r1, [r4, #16]
  403a42:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403a46:	ebc1 0a00 	rsb	sl, r1, r0
  403a4a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403a4e:	f10a 0001 	add.w	r0, sl, #1
  403a52:	ea4f 0868 	mov.w	r8, r8, asr #1
  403a56:	4438      	add	r0, r7
  403a58:	4540      	cmp	r0, r8
  403a5a:	4642      	mov	r2, r8
  403a5c:	bf84      	itt	hi
  403a5e:	4680      	movhi	r8, r0
  403a60:	4642      	movhi	r2, r8
  403a62:	055b      	lsls	r3, r3, #21
  403a64:	d542      	bpl.n	403aec <__sfvwrite_r+0x2c0>
  403a66:	4611      	mov	r1, r2
  403a68:	9801      	ldr	r0, [sp, #4]
  403a6a:	f000 f911 	bl	403c90 <_malloc_r>
  403a6e:	4683      	mov	fp, r0
  403a70:	2800      	cmp	r0, #0
  403a72:	d055      	beq.n	403b20 <__sfvwrite_r+0x2f4>
  403a74:	4652      	mov	r2, sl
  403a76:	6921      	ldr	r1, [r4, #16]
  403a78:	f000 fc12 	bl	4042a0 <memcpy>
  403a7c:	89a3      	ldrh	r3, [r4, #12]
  403a7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403a86:	81a3      	strh	r3, [r4, #12]
  403a88:	ebca 0308 	rsb	r3, sl, r8
  403a8c:	eb0b 000a 	add.w	r0, fp, sl
  403a90:	f8c4 8014 	str.w	r8, [r4, #20]
  403a94:	f8c4 b010 	str.w	fp, [r4, #16]
  403a98:	6020      	str	r0, [r4, #0]
  403a9a:	60a3      	str	r3, [r4, #8]
  403a9c:	46b8      	mov	r8, r7
  403a9e:	46ba      	mov	sl, r7
  403aa0:	e71c      	b.n	4038dc <__sfvwrite_r+0xb0>
  403aa2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  403aa6:	42bb      	cmp	r3, r7
  403aa8:	bf28      	it	cs
  403aaa:	463b      	movcs	r3, r7
  403aac:	464a      	mov	r2, r9
  403aae:	fb93 f3f1 	sdiv	r3, r3, r1
  403ab2:	9801      	ldr	r0, [sp, #4]
  403ab4:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403ab6:	fb01 f303 	mul.w	r3, r1, r3
  403aba:	69e1      	ldr	r1, [r4, #28]
  403abc:	47b0      	blx	r6
  403abe:	2800      	cmp	r0, #0
  403ac0:	f73f af18 	bgt.w	4038f4 <__sfvwrite_r+0xc8>
  403ac4:	e74c      	b.n	403960 <__sfvwrite_r+0x134>
  403ac6:	461a      	mov	r2, r3
  403ac8:	4651      	mov	r1, sl
  403aca:	9303      	str	r3, [sp, #12]
  403acc:	f000 fc82 	bl	4043d4 <memmove>
  403ad0:	6822      	ldr	r2, [r4, #0]
  403ad2:	9b03      	ldr	r3, [sp, #12]
  403ad4:	9801      	ldr	r0, [sp, #4]
  403ad6:	441a      	add	r2, r3
  403ad8:	6022      	str	r2, [r4, #0]
  403ada:	4621      	mov	r1, r4
  403adc:	f7ff fc60 	bl	4033a0 <_fflush_r>
  403ae0:	9b03      	ldr	r3, [sp, #12]
  403ae2:	2800      	cmp	r0, #0
  403ae4:	f47f af3c 	bne.w	403960 <__sfvwrite_r+0x134>
  403ae8:	461f      	mov	r7, r3
  403aea:	e766      	b.n	4039ba <__sfvwrite_r+0x18e>
  403aec:	9801      	ldr	r0, [sp, #4]
  403aee:	f000 fcd9 	bl	4044a4 <_realloc_r>
  403af2:	4683      	mov	fp, r0
  403af4:	2800      	cmp	r0, #0
  403af6:	d1c7      	bne.n	403a88 <__sfvwrite_r+0x25c>
  403af8:	9d01      	ldr	r5, [sp, #4]
  403afa:	6921      	ldr	r1, [r4, #16]
  403afc:	4628      	mov	r0, r5
  403afe:	f7ff fdad 	bl	40365c <_free_r>
  403b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b06:	220c      	movs	r2, #12
  403b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403b0c:	602a      	str	r2, [r5, #0]
  403b0e:	e729      	b.n	403964 <__sfvwrite_r+0x138>
  403b10:	2301      	movs	r3, #1
  403b12:	f109 0801 	add.w	r8, r9, #1
  403b16:	9302      	str	r3, [sp, #8]
  403b18:	e736      	b.n	403988 <__sfvwrite_r+0x15c>
  403b1a:	f04f 30ff 	mov.w	r0, #4294967295
  403b1e:	e6b8      	b.n	403892 <__sfvwrite_r+0x66>
  403b20:	9a01      	ldr	r2, [sp, #4]
  403b22:	230c      	movs	r3, #12
  403b24:	6013      	str	r3, [r2, #0]
  403b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b2a:	e71b      	b.n	403964 <__sfvwrite_r+0x138>
  403b2c:	7ffffc00 	.word	0x7ffffc00

00403b30 <_fwalk_reent>:
  403b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403b34:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403b38:	d01f      	beq.n	403b7a <_fwalk_reent+0x4a>
  403b3a:	4688      	mov	r8, r1
  403b3c:	4606      	mov	r6, r0
  403b3e:	f04f 0900 	mov.w	r9, #0
  403b42:	687d      	ldr	r5, [r7, #4]
  403b44:	68bc      	ldr	r4, [r7, #8]
  403b46:	3d01      	subs	r5, #1
  403b48:	d411      	bmi.n	403b6e <_fwalk_reent+0x3e>
  403b4a:	89a3      	ldrh	r3, [r4, #12]
  403b4c:	2b01      	cmp	r3, #1
  403b4e:	f105 35ff 	add.w	r5, r5, #4294967295
  403b52:	d908      	bls.n	403b66 <_fwalk_reent+0x36>
  403b54:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403b58:	3301      	adds	r3, #1
  403b5a:	4621      	mov	r1, r4
  403b5c:	4630      	mov	r0, r6
  403b5e:	d002      	beq.n	403b66 <_fwalk_reent+0x36>
  403b60:	47c0      	blx	r8
  403b62:	ea49 0900 	orr.w	r9, r9, r0
  403b66:	1c6b      	adds	r3, r5, #1
  403b68:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403b6c:	d1ed      	bne.n	403b4a <_fwalk_reent+0x1a>
  403b6e:	683f      	ldr	r7, [r7, #0]
  403b70:	2f00      	cmp	r7, #0
  403b72:	d1e6      	bne.n	403b42 <_fwalk_reent+0x12>
  403b74:	4648      	mov	r0, r9
  403b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403b7a:	46b9      	mov	r9, r7
  403b7c:	4648      	mov	r0, r9
  403b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403b82:	bf00      	nop

00403b84 <__locale_charset>:
  403b84:	4800      	ldr	r0, [pc, #0]	; (403b88 <__locale_charset+0x4>)
  403b86:	4770      	bx	lr
  403b88:	20000434 	.word	0x20000434

00403b8c <__locale_mb_cur_max>:
  403b8c:	4b01      	ldr	r3, [pc, #4]	; (403b94 <__locale_mb_cur_max+0x8>)
  403b8e:	6818      	ldr	r0, [r3, #0]
  403b90:	4770      	bx	lr
  403b92:	bf00      	nop
  403b94:	20000454 	.word	0x20000454

00403b98 <__swhatbuf_r>:
  403b98:	b570      	push	{r4, r5, r6, lr}
  403b9a:	460d      	mov	r5, r1
  403b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ba0:	2900      	cmp	r1, #0
  403ba2:	b090      	sub	sp, #64	; 0x40
  403ba4:	4614      	mov	r4, r2
  403ba6:	461e      	mov	r6, r3
  403ba8:	db14      	blt.n	403bd4 <__swhatbuf_r+0x3c>
  403baa:	aa01      	add	r2, sp, #4
  403bac:	f001 f880 	bl	404cb0 <_fstat_r>
  403bb0:	2800      	cmp	r0, #0
  403bb2:	db0f      	blt.n	403bd4 <__swhatbuf_r+0x3c>
  403bb4:	9a02      	ldr	r2, [sp, #8]
  403bb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403bba:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403bbe:	fab2 f282 	clz	r2, r2
  403bc2:	0952      	lsrs	r2, r2, #5
  403bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403bc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403bcc:	6032      	str	r2, [r6, #0]
  403bce:	6023      	str	r3, [r4, #0]
  403bd0:	b010      	add	sp, #64	; 0x40
  403bd2:	bd70      	pop	{r4, r5, r6, pc}
  403bd4:	89a8      	ldrh	r0, [r5, #12]
  403bd6:	f000 0080 	and.w	r0, r0, #128	; 0x80
  403bda:	b282      	uxth	r2, r0
  403bdc:	2000      	movs	r0, #0
  403bde:	6030      	str	r0, [r6, #0]
  403be0:	b11a      	cbz	r2, 403bea <__swhatbuf_r+0x52>
  403be2:	2340      	movs	r3, #64	; 0x40
  403be4:	6023      	str	r3, [r4, #0]
  403be6:	b010      	add	sp, #64	; 0x40
  403be8:	bd70      	pop	{r4, r5, r6, pc}
  403bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403bee:	4610      	mov	r0, r2
  403bf0:	6023      	str	r3, [r4, #0]
  403bf2:	b010      	add	sp, #64	; 0x40
  403bf4:	bd70      	pop	{r4, r5, r6, pc}
  403bf6:	bf00      	nop

00403bf8 <__smakebuf_r>:
  403bf8:	898a      	ldrh	r2, [r1, #12]
  403bfa:	0792      	lsls	r2, r2, #30
  403bfc:	460b      	mov	r3, r1
  403bfe:	d506      	bpl.n	403c0e <__smakebuf_r+0x16>
  403c00:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403c04:	2101      	movs	r1, #1
  403c06:	601a      	str	r2, [r3, #0]
  403c08:	611a      	str	r2, [r3, #16]
  403c0a:	6159      	str	r1, [r3, #20]
  403c0c:	4770      	bx	lr
  403c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403c10:	b083      	sub	sp, #12
  403c12:	ab01      	add	r3, sp, #4
  403c14:	466a      	mov	r2, sp
  403c16:	460c      	mov	r4, r1
  403c18:	4605      	mov	r5, r0
  403c1a:	f7ff ffbd 	bl	403b98 <__swhatbuf_r>
  403c1e:	9900      	ldr	r1, [sp, #0]
  403c20:	4606      	mov	r6, r0
  403c22:	4628      	mov	r0, r5
  403c24:	f000 f834 	bl	403c90 <_malloc_r>
  403c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c2c:	b1d0      	cbz	r0, 403c64 <__smakebuf_r+0x6c>
  403c2e:	9a01      	ldr	r2, [sp, #4]
  403c30:	4f12      	ldr	r7, [pc, #72]	; (403c7c <__smakebuf_r+0x84>)
  403c32:	9900      	ldr	r1, [sp, #0]
  403c34:	63ef      	str	r7, [r5, #60]	; 0x3c
  403c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403c3a:	81a3      	strh	r3, [r4, #12]
  403c3c:	6020      	str	r0, [r4, #0]
  403c3e:	6120      	str	r0, [r4, #16]
  403c40:	6161      	str	r1, [r4, #20]
  403c42:	b91a      	cbnz	r2, 403c4c <__smakebuf_r+0x54>
  403c44:	4333      	orrs	r3, r6
  403c46:	81a3      	strh	r3, [r4, #12]
  403c48:	b003      	add	sp, #12
  403c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c4c:	4628      	mov	r0, r5
  403c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403c52:	f001 f841 	bl	404cd8 <_isatty_r>
  403c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c5a:	2800      	cmp	r0, #0
  403c5c:	d0f2      	beq.n	403c44 <__smakebuf_r+0x4c>
  403c5e:	f043 0301 	orr.w	r3, r3, #1
  403c62:	e7ef      	b.n	403c44 <__smakebuf_r+0x4c>
  403c64:	059a      	lsls	r2, r3, #22
  403c66:	d4ef      	bmi.n	403c48 <__smakebuf_r+0x50>
  403c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403c6c:	f043 0302 	orr.w	r3, r3, #2
  403c70:	2101      	movs	r1, #1
  403c72:	81a3      	strh	r3, [r4, #12]
  403c74:	6022      	str	r2, [r4, #0]
  403c76:	6122      	str	r2, [r4, #16]
  403c78:	6161      	str	r1, [r4, #20]
  403c7a:	e7e5      	b.n	403c48 <__smakebuf_r+0x50>
  403c7c:	004033cd 	.word	0x004033cd

00403c80 <malloc>:
  403c80:	4b02      	ldr	r3, [pc, #8]	; (403c8c <malloc+0xc>)
  403c82:	4601      	mov	r1, r0
  403c84:	6818      	ldr	r0, [r3, #0]
  403c86:	f000 b803 	b.w	403c90 <_malloc_r>
  403c8a:	bf00      	nop
  403c8c:	20000430 	.word	0x20000430

00403c90 <_malloc_r>:
  403c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c94:	f101 050b 	add.w	r5, r1, #11
  403c98:	2d16      	cmp	r5, #22
  403c9a:	b083      	sub	sp, #12
  403c9c:	4606      	mov	r6, r0
  403c9e:	f240 809f 	bls.w	403de0 <_malloc_r+0x150>
  403ca2:	f035 0507 	bics.w	r5, r5, #7
  403ca6:	f100 80bf 	bmi.w	403e28 <_malloc_r+0x198>
  403caa:	42a9      	cmp	r1, r5
  403cac:	f200 80bc 	bhi.w	403e28 <_malloc_r+0x198>
  403cb0:	f000 fbf4 	bl	40449c <__malloc_lock>
  403cb4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  403cb8:	f0c0 829c 	bcc.w	4041f4 <_malloc_r+0x564>
  403cbc:	0a6b      	lsrs	r3, r5, #9
  403cbe:	f000 80ba 	beq.w	403e36 <_malloc_r+0x1a6>
  403cc2:	2b04      	cmp	r3, #4
  403cc4:	f200 8183 	bhi.w	403fce <_malloc_r+0x33e>
  403cc8:	09a8      	lsrs	r0, r5, #6
  403cca:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  403cce:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403cd2:	3038      	adds	r0, #56	; 0x38
  403cd4:	4fc4      	ldr	r7, [pc, #784]	; (403fe8 <_malloc_r+0x358>)
  403cd6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403cda:	f1a3 0108 	sub.w	r1, r3, #8
  403cde:	685c      	ldr	r4, [r3, #4]
  403ce0:	42a1      	cmp	r1, r4
  403ce2:	d107      	bne.n	403cf4 <_malloc_r+0x64>
  403ce4:	e0ac      	b.n	403e40 <_malloc_r+0x1b0>
  403ce6:	2a00      	cmp	r2, #0
  403ce8:	f280 80ac 	bge.w	403e44 <_malloc_r+0x1b4>
  403cec:	68e4      	ldr	r4, [r4, #12]
  403cee:	42a1      	cmp	r1, r4
  403cf0:	f000 80a6 	beq.w	403e40 <_malloc_r+0x1b0>
  403cf4:	6863      	ldr	r3, [r4, #4]
  403cf6:	f023 0303 	bic.w	r3, r3, #3
  403cfa:	1b5a      	subs	r2, r3, r5
  403cfc:	2a0f      	cmp	r2, #15
  403cfe:	ddf2      	ble.n	403ce6 <_malloc_r+0x56>
  403d00:	49b9      	ldr	r1, [pc, #740]	; (403fe8 <_malloc_r+0x358>)
  403d02:	693c      	ldr	r4, [r7, #16]
  403d04:	f101 0e08 	add.w	lr, r1, #8
  403d08:	4574      	cmp	r4, lr
  403d0a:	f000 81b3 	beq.w	404074 <_malloc_r+0x3e4>
  403d0e:	6863      	ldr	r3, [r4, #4]
  403d10:	f023 0303 	bic.w	r3, r3, #3
  403d14:	1b5a      	subs	r2, r3, r5
  403d16:	2a0f      	cmp	r2, #15
  403d18:	f300 8199 	bgt.w	40404e <_malloc_r+0x3be>
  403d1c:	2a00      	cmp	r2, #0
  403d1e:	f8c1 e014 	str.w	lr, [r1, #20]
  403d22:	f8c1 e010 	str.w	lr, [r1, #16]
  403d26:	f280 809e 	bge.w	403e66 <_malloc_r+0x1d6>
  403d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403d2e:	f080 8167 	bcs.w	404000 <_malloc_r+0x370>
  403d32:	08db      	lsrs	r3, r3, #3
  403d34:	f103 0c01 	add.w	ip, r3, #1
  403d38:	2201      	movs	r2, #1
  403d3a:	109b      	asrs	r3, r3, #2
  403d3c:	fa02 f303 	lsl.w	r3, r2, r3
  403d40:	684a      	ldr	r2, [r1, #4]
  403d42:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  403d46:	f8c4 8008 	str.w	r8, [r4, #8]
  403d4a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  403d4e:	431a      	orrs	r2, r3
  403d50:	f1a9 0308 	sub.w	r3, r9, #8
  403d54:	60e3      	str	r3, [r4, #12]
  403d56:	604a      	str	r2, [r1, #4]
  403d58:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  403d5c:	f8c8 400c 	str.w	r4, [r8, #12]
  403d60:	1083      	asrs	r3, r0, #2
  403d62:	2401      	movs	r4, #1
  403d64:	409c      	lsls	r4, r3
  403d66:	4294      	cmp	r4, r2
  403d68:	f200 808a 	bhi.w	403e80 <_malloc_r+0x1f0>
  403d6c:	4214      	tst	r4, r2
  403d6e:	d106      	bne.n	403d7e <_malloc_r+0xee>
  403d70:	f020 0003 	bic.w	r0, r0, #3
  403d74:	0064      	lsls	r4, r4, #1
  403d76:	4214      	tst	r4, r2
  403d78:	f100 0004 	add.w	r0, r0, #4
  403d7c:	d0fa      	beq.n	403d74 <_malloc_r+0xe4>
  403d7e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403d82:	46cc      	mov	ip, r9
  403d84:	4680      	mov	r8, r0
  403d86:	f8dc 100c 	ldr.w	r1, [ip, #12]
  403d8a:	458c      	cmp	ip, r1
  403d8c:	d107      	bne.n	403d9e <_malloc_r+0x10e>
  403d8e:	e173      	b.n	404078 <_malloc_r+0x3e8>
  403d90:	2a00      	cmp	r2, #0
  403d92:	f280 8181 	bge.w	404098 <_malloc_r+0x408>
  403d96:	68c9      	ldr	r1, [r1, #12]
  403d98:	458c      	cmp	ip, r1
  403d9a:	f000 816d 	beq.w	404078 <_malloc_r+0x3e8>
  403d9e:	684b      	ldr	r3, [r1, #4]
  403da0:	f023 0303 	bic.w	r3, r3, #3
  403da4:	1b5a      	subs	r2, r3, r5
  403da6:	2a0f      	cmp	r2, #15
  403da8:	ddf2      	ble.n	403d90 <_malloc_r+0x100>
  403daa:	460c      	mov	r4, r1
  403dac:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403db0:	f854 8f08 	ldr.w	r8, [r4, #8]!
  403db4:	194b      	adds	r3, r1, r5
  403db6:	f045 0501 	orr.w	r5, r5, #1
  403dba:	604d      	str	r5, [r1, #4]
  403dbc:	f042 0101 	orr.w	r1, r2, #1
  403dc0:	f8c8 c00c 	str.w	ip, [r8, #12]
  403dc4:	4630      	mov	r0, r6
  403dc6:	f8cc 8008 	str.w	r8, [ip, #8]
  403dca:	617b      	str	r3, [r7, #20]
  403dcc:	613b      	str	r3, [r7, #16]
  403dce:	f8c3 e00c 	str.w	lr, [r3, #12]
  403dd2:	f8c3 e008 	str.w	lr, [r3, #8]
  403dd6:	6059      	str	r1, [r3, #4]
  403dd8:	509a      	str	r2, [r3, r2]
  403dda:	f000 fb61 	bl	4044a0 <__malloc_unlock>
  403dde:	e01f      	b.n	403e20 <_malloc_r+0x190>
  403de0:	2910      	cmp	r1, #16
  403de2:	d821      	bhi.n	403e28 <_malloc_r+0x198>
  403de4:	f000 fb5a 	bl	40449c <__malloc_lock>
  403de8:	2510      	movs	r5, #16
  403dea:	2306      	movs	r3, #6
  403dec:	2002      	movs	r0, #2
  403dee:	4f7e      	ldr	r7, [pc, #504]	; (403fe8 <_malloc_r+0x358>)
  403df0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403df4:	f1a3 0208 	sub.w	r2, r3, #8
  403df8:	685c      	ldr	r4, [r3, #4]
  403dfa:	4294      	cmp	r4, r2
  403dfc:	f000 8145 	beq.w	40408a <_malloc_r+0x3fa>
  403e00:	6863      	ldr	r3, [r4, #4]
  403e02:	68e1      	ldr	r1, [r4, #12]
  403e04:	68a5      	ldr	r5, [r4, #8]
  403e06:	f023 0303 	bic.w	r3, r3, #3
  403e0a:	4423      	add	r3, r4
  403e0c:	4630      	mov	r0, r6
  403e0e:	685a      	ldr	r2, [r3, #4]
  403e10:	60e9      	str	r1, [r5, #12]
  403e12:	f042 0201 	orr.w	r2, r2, #1
  403e16:	608d      	str	r5, [r1, #8]
  403e18:	605a      	str	r2, [r3, #4]
  403e1a:	f000 fb41 	bl	4044a0 <__malloc_unlock>
  403e1e:	3408      	adds	r4, #8
  403e20:	4620      	mov	r0, r4
  403e22:	b003      	add	sp, #12
  403e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e28:	2400      	movs	r4, #0
  403e2a:	230c      	movs	r3, #12
  403e2c:	4620      	mov	r0, r4
  403e2e:	6033      	str	r3, [r6, #0]
  403e30:	b003      	add	sp, #12
  403e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e36:	2380      	movs	r3, #128	; 0x80
  403e38:	f04f 0e40 	mov.w	lr, #64	; 0x40
  403e3c:	203f      	movs	r0, #63	; 0x3f
  403e3e:	e749      	b.n	403cd4 <_malloc_r+0x44>
  403e40:	4670      	mov	r0, lr
  403e42:	e75d      	b.n	403d00 <_malloc_r+0x70>
  403e44:	4423      	add	r3, r4
  403e46:	68e1      	ldr	r1, [r4, #12]
  403e48:	685a      	ldr	r2, [r3, #4]
  403e4a:	68a5      	ldr	r5, [r4, #8]
  403e4c:	f042 0201 	orr.w	r2, r2, #1
  403e50:	60e9      	str	r1, [r5, #12]
  403e52:	4630      	mov	r0, r6
  403e54:	608d      	str	r5, [r1, #8]
  403e56:	605a      	str	r2, [r3, #4]
  403e58:	f000 fb22 	bl	4044a0 <__malloc_unlock>
  403e5c:	3408      	adds	r4, #8
  403e5e:	4620      	mov	r0, r4
  403e60:	b003      	add	sp, #12
  403e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e66:	4423      	add	r3, r4
  403e68:	4630      	mov	r0, r6
  403e6a:	685a      	ldr	r2, [r3, #4]
  403e6c:	f042 0201 	orr.w	r2, r2, #1
  403e70:	605a      	str	r2, [r3, #4]
  403e72:	f000 fb15 	bl	4044a0 <__malloc_unlock>
  403e76:	3408      	adds	r4, #8
  403e78:	4620      	mov	r0, r4
  403e7a:	b003      	add	sp, #12
  403e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e80:	68bc      	ldr	r4, [r7, #8]
  403e82:	6863      	ldr	r3, [r4, #4]
  403e84:	f023 0803 	bic.w	r8, r3, #3
  403e88:	45a8      	cmp	r8, r5
  403e8a:	d304      	bcc.n	403e96 <_malloc_r+0x206>
  403e8c:	ebc5 0308 	rsb	r3, r5, r8
  403e90:	2b0f      	cmp	r3, #15
  403e92:	f300 808c 	bgt.w	403fae <_malloc_r+0x31e>
  403e96:	4b55      	ldr	r3, [pc, #340]	; (403fec <_malloc_r+0x35c>)
  403e98:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403ffc <_malloc_r+0x36c>
  403e9c:	681a      	ldr	r2, [r3, #0]
  403e9e:	f8d9 3000 	ldr.w	r3, [r9]
  403ea2:	3301      	adds	r3, #1
  403ea4:	442a      	add	r2, r5
  403ea6:	eb04 0a08 	add.w	sl, r4, r8
  403eaa:	f000 8160 	beq.w	40416e <_malloc_r+0x4de>
  403eae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  403eb2:	320f      	adds	r2, #15
  403eb4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403eb8:	f022 020f 	bic.w	r2, r2, #15
  403ebc:	4611      	mov	r1, r2
  403ebe:	4630      	mov	r0, r6
  403ec0:	9201      	str	r2, [sp, #4]
  403ec2:	f000 fcdf 	bl	404884 <_sbrk_r>
  403ec6:	f1b0 3fff 	cmp.w	r0, #4294967295
  403eca:	4683      	mov	fp, r0
  403ecc:	9a01      	ldr	r2, [sp, #4]
  403ece:	f000 8158 	beq.w	404182 <_malloc_r+0x4f2>
  403ed2:	4582      	cmp	sl, r0
  403ed4:	f200 80fc 	bhi.w	4040d0 <_malloc_r+0x440>
  403ed8:	4b45      	ldr	r3, [pc, #276]	; (403ff0 <_malloc_r+0x360>)
  403eda:	6819      	ldr	r1, [r3, #0]
  403edc:	45da      	cmp	sl, fp
  403ede:	4411      	add	r1, r2
  403ee0:	6019      	str	r1, [r3, #0]
  403ee2:	f000 8153 	beq.w	40418c <_malloc_r+0x4fc>
  403ee6:	f8d9 0000 	ldr.w	r0, [r9]
  403eea:	f8df e110 	ldr.w	lr, [pc, #272]	; 403ffc <_malloc_r+0x36c>
  403eee:	3001      	adds	r0, #1
  403ef0:	bf1b      	ittet	ne
  403ef2:	ebca 0a0b 	rsbne	sl, sl, fp
  403ef6:	4451      	addne	r1, sl
  403ef8:	f8ce b000 	streq.w	fp, [lr]
  403efc:	6019      	strne	r1, [r3, #0]
  403efe:	f01b 0107 	ands.w	r1, fp, #7
  403f02:	f000 8117 	beq.w	404134 <_malloc_r+0x4a4>
  403f06:	f1c1 0008 	rsb	r0, r1, #8
  403f0a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403f0e:	4483      	add	fp, r0
  403f10:	3108      	adds	r1, #8
  403f12:	445a      	add	r2, fp
  403f14:	f3c2 020b 	ubfx	r2, r2, #0, #12
  403f18:	ebc2 0901 	rsb	r9, r2, r1
  403f1c:	4649      	mov	r1, r9
  403f1e:	4630      	mov	r0, r6
  403f20:	9301      	str	r3, [sp, #4]
  403f22:	f000 fcaf 	bl	404884 <_sbrk_r>
  403f26:	1c43      	adds	r3, r0, #1
  403f28:	9b01      	ldr	r3, [sp, #4]
  403f2a:	f000 813f 	beq.w	4041ac <_malloc_r+0x51c>
  403f2e:	ebcb 0200 	rsb	r2, fp, r0
  403f32:	444a      	add	r2, r9
  403f34:	f042 0201 	orr.w	r2, r2, #1
  403f38:	6819      	ldr	r1, [r3, #0]
  403f3a:	f8c7 b008 	str.w	fp, [r7, #8]
  403f3e:	4449      	add	r1, r9
  403f40:	42bc      	cmp	r4, r7
  403f42:	f8cb 2004 	str.w	r2, [fp, #4]
  403f46:	6019      	str	r1, [r3, #0]
  403f48:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 403ff0 <_malloc_r+0x360>
  403f4c:	d016      	beq.n	403f7c <_malloc_r+0x2ec>
  403f4e:	f1b8 0f0f 	cmp.w	r8, #15
  403f52:	f240 80fd 	bls.w	404150 <_malloc_r+0x4c0>
  403f56:	6862      	ldr	r2, [r4, #4]
  403f58:	f1a8 030c 	sub.w	r3, r8, #12
  403f5c:	f023 0307 	bic.w	r3, r3, #7
  403f60:	18e0      	adds	r0, r4, r3
  403f62:	f002 0201 	and.w	r2, r2, #1
  403f66:	f04f 0e05 	mov.w	lr, #5
  403f6a:	431a      	orrs	r2, r3
  403f6c:	2b0f      	cmp	r3, #15
  403f6e:	6062      	str	r2, [r4, #4]
  403f70:	f8c0 e004 	str.w	lr, [r0, #4]
  403f74:	f8c0 e008 	str.w	lr, [r0, #8]
  403f78:	f200 811c 	bhi.w	4041b4 <_malloc_r+0x524>
  403f7c:	4b1d      	ldr	r3, [pc, #116]	; (403ff4 <_malloc_r+0x364>)
  403f7e:	68bc      	ldr	r4, [r7, #8]
  403f80:	681a      	ldr	r2, [r3, #0]
  403f82:	4291      	cmp	r1, r2
  403f84:	bf88      	it	hi
  403f86:	6019      	strhi	r1, [r3, #0]
  403f88:	4b1b      	ldr	r3, [pc, #108]	; (403ff8 <_malloc_r+0x368>)
  403f8a:	681a      	ldr	r2, [r3, #0]
  403f8c:	4291      	cmp	r1, r2
  403f8e:	6862      	ldr	r2, [r4, #4]
  403f90:	bf88      	it	hi
  403f92:	6019      	strhi	r1, [r3, #0]
  403f94:	f022 0203 	bic.w	r2, r2, #3
  403f98:	4295      	cmp	r5, r2
  403f9a:	eba2 0305 	sub.w	r3, r2, r5
  403f9e:	d801      	bhi.n	403fa4 <_malloc_r+0x314>
  403fa0:	2b0f      	cmp	r3, #15
  403fa2:	dc04      	bgt.n	403fae <_malloc_r+0x31e>
  403fa4:	4630      	mov	r0, r6
  403fa6:	f000 fa7b 	bl	4044a0 <__malloc_unlock>
  403faa:	2400      	movs	r4, #0
  403fac:	e738      	b.n	403e20 <_malloc_r+0x190>
  403fae:	1962      	adds	r2, r4, r5
  403fb0:	f043 0301 	orr.w	r3, r3, #1
  403fb4:	f045 0501 	orr.w	r5, r5, #1
  403fb8:	6065      	str	r5, [r4, #4]
  403fba:	4630      	mov	r0, r6
  403fbc:	60ba      	str	r2, [r7, #8]
  403fbe:	6053      	str	r3, [r2, #4]
  403fc0:	f000 fa6e 	bl	4044a0 <__malloc_unlock>
  403fc4:	3408      	adds	r4, #8
  403fc6:	4620      	mov	r0, r4
  403fc8:	b003      	add	sp, #12
  403fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fce:	2b14      	cmp	r3, #20
  403fd0:	d971      	bls.n	4040b6 <_malloc_r+0x426>
  403fd2:	2b54      	cmp	r3, #84	; 0x54
  403fd4:	f200 80a4 	bhi.w	404120 <_malloc_r+0x490>
  403fd8:	0b28      	lsrs	r0, r5, #12
  403fda:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  403fde:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403fe2:	306e      	adds	r0, #110	; 0x6e
  403fe4:	e676      	b.n	403cd4 <_malloc_r+0x44>
  403fe6:	bf00      	nop
  403fe8:	20000458 	.word	0x20000458
  403fec:	200010e8 	.word	0x200010e8
  403ff0:	200010ec 	.word	0x200010ec
  403ff4:	200010e4 	.word	0x200010e4
  403ff8:	200010e0 	.word	0x200010e0
  403ffc:	20000864 	.word	0x20000864
  404000:	0a5a      	lsrs	r2, r3, #9
  404002:	2a04      	cmp	r2, #4
  404004:	d95e      	bls.n	4040c4 <_malloc_r+0x434>
  404006:	2a14      	cmp	r2, #20
  404008:	f200 80b3 	bhi.w	404172 <_malloc_r+0x4e2>
  40400c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404010:	0049      	lsls	r1, r1, #1
  404012:	325b      	adds	r2, #91	; 0x5b
  404014:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  404018:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  40401c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4041fc <_malloc_r+0x56c>
  404020:	f1ac 0c08 	sub.w	ip, ip, #8
  404024:	458c      	cmp	ip, r1
  404026:	f000 8088 	beq.w	40413a <_malloc_r+0x4aa>
  40402a:	684a      	ldr	r2, [r1, #4]
  40402c:	f022 0203 	bic.w	r2, r2, #3
  404030:	4293      	cmp	r3, r2
  404032:	d202      	bcs.n	40403a <_malloc_r+0x3aa>
  404034:	6889      	ldr	r1, [r1, #8]
  404036:	458c      	cmp	ip, r1
  404038:	d1f7      	bne.n	40402a <_malloc_r+0x39a>
  40403a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40403e:	687a      	ldr	r2, [r7, #4]
  404040:	f8c4 c00c 	str.w	ip, [r4, #12]
  404044:	60a1      	str	r1, [r4, #8]
  404046:	f8cc 4008 	str.w	r4, [ip, #8]
  40404a:	60cc      	str	r4, [r1, #12]
  40404c:	e688      	b.n	403d60 <_malloc_r+0xd0>
  40404e:	1963      	adds	r3, r4, r5
  404050:	f042 0701 	orr.w	r7, r2, #1
  404054:	f045 0501 	orr.w	r5, r5, #1
  404058:	6065      	str	r5, [r4, #4]
  40405a:	4630      	mov	r0, r6
  40405c:	614b      	str	r3, [r1, #20]
  40405e:	610b      	str	r3, [r1, #16]
  404060:	f8c3 e00c 	str.w	lr, [r3, #12]
  404064:	f8c3 e008 	str.w	lr, [r3, #8]
  404068:	605f      	str	r7, [r3, #4]
  40406a:	509a      	str	r2, [r3, r2]
  40406c:	3408      	adds	r4, #8
  40406e:	f000 fa17 	bl	4044a0 <__malloc_unlock>
  404072:	e6d5      	b.n	403e20 <_malloc_r+0x190>
  404074:	684a      	ldr	r2, [r1, #4]
  404076:	e673      	b.n	403d60 <_malloc_r+0xd0>
  404078:	f108 0801 	add.w	r8, r8, #1
  40407c:	f018 0f03 	tst.w	r8, #3
  404080:	f10c 0c08 	add.w	ip, ip, #8
  404084:	f47f ae7f 	bne.w	403d86 <_malloc_r+0xf6>
  404088:	e030      	b.n	4040ec <_malloc_r+0x45c>
  40408a:	68dc      	ldr	r4, [r3, #12]
  40408c:	42a3      	cmp	r3, r4
  40408e:	bf08      	it	eq
  404090:	3002      	addeq	r0, #2
  404092:	f43f ae35 	beq.w	403d00 <_malloc_r+0x70>
  404096:	e6b3      	b.n	403e00 <_malloc_r+0x170>
  404098:	440b      	add	r3, r1
  40409a:	460c      	mov	r4, r1
  40409c:	685a      	ldr	r2, [r3, #4]
  40409e:	68c9      	ldr	r1, [r1, #12]
  4040a0:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4040a4:	f042 0201 	orr.w	r2, r2, #1
  4040a8:	605a      	str	r2, [r3, #4]
  4040aa:	4630      	mov	r0, r6
  4040ac:	60e9      	str	r1, [r5, #12]
  4040ae:	608d      	str	r5, [r1, #8]
  4040b0:	f000 f9f6 	bl	4044a0 <__malloc_unlock>
  4040b4:	e6b4      	b.n	403e20 <_malloc_r+0x190>
  4040b6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4040ba:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4040be:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4040c2:	e607      	b.n	403cd4 <_malloc_r+0x44>
  4040c4:	099a      	lsrs	r2, r3, #6
  4040c6:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4040ca:	0049      	lsls	r1, r1, #1
  4040cc:	3238      	adds	r2, #56	; 0x38
  4040ce:	e7a1      	b.n	404014 <_malloc_r+0x384>
  4040d0:	42bc      	cmp	r4, r7
  4040d2:	4b4a      	ldr	r3, [pc, #296]	; (4041fc <_malloc_r+0x56c>)
  4040d4:	f43f af00 	beq.w	403ed8 <_malloc_r+0x248>
  4040d8:	689c      	ldr	r4, [r3, #8]
  4040da:	6862      	ldr	r2, [r4, #4]
  4040dc:	f022 0203 	bic.w	r2, r2, #3
  4040e0:	e75a      	b.n	403f98 <_malloc_r+0x308>
  4040e2:	f859 3908 	ldr.w	r3, [r9], #-8
  4040e6:	4599      	cmp	r9, r3
  4040e8:	f040 8082 	bne.w	4041f0 <_malloc_r+0x560>
  4040ec:	f010 0f03 	tst.w	r0, #3
  4040f0:	f100 30ff 	add.w	r0, r0, #4294967295
  4040f4:	d1f5      	bne.n	4040e2 <_malloc_r+0x452>
  4040f6:	687b      	ldr	r3, [r7, #4]
  4040f8:	ea23 0304 	bic.w	r3, r3, r4
  4040fc:	607b      	str	r3, [r7, #4]
  4040fe:	0064      	lsls	r4, r4, #1
  404100:	429c      	cmp	r4, r3
  404102:	f63f aebd 	bhi.w	403e80 <_malloc_r+0x1f0>
  404106:	2c00      	cmp	r4, #0
  404108:	f43f aeba 	beq.w	403e80 <_malloc_r+0x1f0>
  40410c:	421c      	tst	r4, r3
  40410e:	4640      	mov	r0, r8
  404110:	f47f ae35 	bne.w	403d7e <_malloc_r+0xee>
  404114:	0064      	lsls	r4, r4, #1
  404116:	421c      	tst	r4, r3
  404118:	f100 0004 	add.w	r0, r0, #4
  40411c:	d0fa      	beq.n	404114 <_malloc_r+0x484>
  40411e:	e62e      	b.n	403d7e <_malloc_r+0xee>
  404120:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404124:	d818      	bhi.n	404158 <_malloc_r+0x4c8>
  404126:	0be8      	lsrs	r0, r5, #15
  404128:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  40412c:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404130:	3077      	adds	r0, #119	; 0x77
  404132:	e5cf      	b.n	403cd4 <_malloc_r+0x44>
  404134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404138:	e6eb      	b.n	403f12 <_malloc_r+0x282>
  40413a:	2101      	movs	r1, #1
  40413c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  404140:	1092      	asrs	r2, r2, #2
  404142:	fa01 f202 	lsl.w	r2, r1, r2
  404146:	431a      	orrs	r2, r3
  404148:	f8c8 2004 	str.w	r2, [r8, #4]
  40414c:	4661      	mov	r1, ip
  40414e:	e777      	b.n	404040 <_malloc_r+0x3b0>
  404150:	2301      	movs	r3, #1
  404152:	f8cb 3004 	str.w	r3, [fp, #4]
  404156:	e725      	b.n	403fa4 <_malloc_r+0x314>
  404158:	f240 5254 	movw	r2, #1364	; 0x554
  40415c:	4293      	cmp	r3, r2
  40415e:	d820      	bhi.n	4041a2 <_malloc_r+0x512>
  404160:	0ca8      	lsrs	r0, r5, #18
  404162:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  404166:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40416a:	307c      	adds	r0, #124	; 0x7c
  40416c:	e5b2      	b.n	403cd4 <_malloc_r+0x44>
  40416e:	3210      	adds	r2, #16
  404170:	e6a4      	b.n	403ebc <_malloc_r+0x22c>
  404172:	2a54      	cmp	r2, #84	; 0x54
  404174:	d826      	bhi.n	4041c4 <_malloc_r+0x534>
  404176:	0b1a      	lsrs	r2, r3, #12
  404178:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40417c:	0049      	lsls	r1, r1, #1
  40417e:	326e      	adds	r2, #110	; 0x6e
  404180:	e748      	b.n	404014 <_malloc_r+0x384>
  404182:	68bc      	ldr	r4, [r7, #8]
  404184:	6862      	ldr	r2, [r4, #4]
  404186:	f022 0203 	bic.w	r2, r2, #3
  40418a:	e705      	b.n	403f98 <_malloc_r+0x308>
  40418c:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404190:	2800      	cmp	r0, #0
  404192:	f47f aea8 	bne.w	403ee6 <_malloc_r+0x256>
  404196:	4442      	add	r2, r8
  404198:	68bb      	ldr	r3, [r7, #8]
  40419a:	f042 0201 	orr.w	r2, r2, #1
  40419e:	605a      	str	r2, [r3, #4]
  4041a0:	e6ec      	b.n	403f7c <_malloc_r+0x2ec>
  4041a2:	23fe      	movs	r3, #254	; 0xfe
  4041a4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4041a8:	207e      	movs	r0, #126	; 0x7e
  4041aa:	e593      	b.n	403cd4 <_malloc_r+0x44>
  4041ac:	2201      	movs	r2, #1
  4041ae:	f04f 0900 	mov.w	r9, #0
  4041b2:	e6c1      	b.n	403f38 <_malloc_r+0x2a8>
  4041b4:	f104 0108 	add.w	r1, r4, #8
  4041b8:	4630      	mov	r0, r6
  4041ba:	f7ff fa4f 	bl	40365c <_free_r>
  4041be:	f8d9 1000 	ldr.w	r1, [r9]
  4041c2:	e6db      	b.n	403f7c <_malloc_r+0x2ec>
  4041c4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4041c8:	d805      	bhi.n	4041d6 <_malloc_r+0x546>
  4041ca:	0bda      	lsrs	r2, r3, #15
  4041cc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4041d0:	0049      	lsls	r1, r1, #1
  4041d2:	3277      	adds	r2, #119	; 0x77
  4041d4:	e71e      	b.n	404014 <_malloc_r+0x384>
  4041d6:	f240 5154 	movw	r1, #1364	; 0x554
  4041da:	428a      	cmp	r2, r1
  4041dc:	d805      	bhi.n	4041ea <_malloc_r+0x55a>
  4041de:	0c9a      	lsrs	r2, r3, #18
  4041e0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4041e4:	0049      	lsls	r1, r1, #1
  4041e6:	327c      	adds	r2, #124	; 0x7c
  4041e8:	e714      	b.n	404014 <_malloc_r+0x384>
  4041ea:	21fe      	movs	r1, #254	; 0xfe
  4041ec:	227e      	movs	r2, #126	; 0x7e
  4041ee:	e711      	b.n	404014 <_malloc_r+0x384>
  4041f0:	687b      	ldr	r3, [r7, #4]
  4041f2:	e784      	b.n	4040fe <_malloc_r+0x46e>
  4041f4:	08e8      	lsrs	r0, r5, #3
  4041f6:	1c43      	adds	r3, r0, #1
  4041f8:	005b      	lsls	r3, r3, #1
  4041fa:	e5f8      	b.n	403dee <_malloc_r+0x15e>
  4041fc:	20000458 	.word	0x20000458

00404200 <memchr>:
  404200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404204:	2a10      	cmp	r2, #16
  404206:	db2b      	blt.n	404260 <memchr+0x60>
  404208:	f010 0f07 	tst.w	r0, #7
  40420c:	d008      	beq.n	404220 <memchr+0x20>
  40420e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404212:	3a01      	subs	r2, #1
  404214:	428b      	cmp	r3, r1
  404216:	d02d      	beq.n	404274 <memchr+0x74>
  404218:	f010 0f07 	tst.w	r0, #7
  40421c:	b342      	cbz	r2, 404270 <memchr+0x70>
  40421e:	d1f6      	bne.n	40420e <memchr+0xe>
  404220:	b4f0      	push	{r4, r5, r6, r7}
  404222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40422a:	f022 0407 	bic.w	r4, r2, #7
  40422e:	f07f 0700 	mvns.w	r7, #0
  404232:	2300      	movs	r3, #0
  404234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404238:	3c08      	subs	r4, #8
  40423a:	ea85 0501 	eor.w	r5, r5, r1
  40423e:	ea86 0601 	eor.w	r6, r6, r1
  404242:	fa85 f547 	uadd8	r5, r5, r7
  404246:	faa3 f587 	sel	r5, r3, r7
  40424a:	fa86 f647 	uadd8	r6, r6, r7
  40424e:	faa5 f687 	sel	r6, r5, r7
  404252:	b98e      	cbnz	r6, 404278 <memchr+0x78>
  404254:	d1ee      	bne.n	404234 <memchr+0x34>
  404256:	bcf0      	pop	{r4, r5, r6, r7}
  404258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40425c:	f002 0207 	and.w	r2, r2, #7
  404260:	b132      	cbz	r2, 404270 <memchr+0x70>
  404262:	f810 3b01 	ldrb.w	r3, [r0], #1
  404266:	3a01      	subs	r2, #1
  404268:	ea83 0301 	eor.w	r3, r3, r1
  40426c:	b113      	cbz	r3, 404274 <memchr+0x74>
  40426e:	d1f8      	bne.n	404262 <memchr+0x62>
  404270:	2000      	movs	r0, #0
  404272:	4770      	bx	lr
  404274:	3801      	subs	r0, #1
  404276:	4770      	bx	lr
  404278:	2d00      	cmp	r5, #0
  40427a:	bf06      	itte	eq
  40427c:	4635      	moveq	r5, r6
  40427e:	3803      	subeq	r0, #3
  404280:	3807      	subne	r0, #7
  404282:	f015 0f01 	tst.w	r5, #1
  404286:	d107      	bne.n	404298 <memchr+0x98>
  404288:	3001      	adds	r0, #1
  40428a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40428e:	bf02      	ittt	eq
  404290:	3001      	addeq	r0, #1
  404292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404296:	3001      	addeq	r0, #1
  404298:	bcf0      	pop	{r4, r5, r6, r7}
  40429a:	3801      	subs	r0, #1
  40429c:	4770      	bx	lr
  40429e:	bf00      	nop

004042a0 <memcpy>:
  4042a0:	4684      	mov	ip, r0
  4042a2:	ea41 0300 	orr.w	r3, r1, r0
  4042a6:	f013 0303 	ands.w	r3, r3, #3
  4042aa:	d16d      	bne.n	404388 <memcpy+0xe8>
  4042ac:	3a40      	subs	r2, #64	; 0x40
  4042ae:	d341      	bcc.n	404334 <memcpy+0x94>
  4042b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042b4:	f840 3b04 	str.w	r3, [r0], #4
  4042b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042bc:	f840 3b04 	str.w	r3, [r0], #4
  4042c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042c4:	f840 3b04 	str.w	r3, [r0], #4
  4042c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042cc:	f840 3b04 	str.w	r3, [r0], #4
  4042d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042d4:	f840 3b04 	str.w	r3, [r0], #4
  4042d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042dc:	f840 3b04 	str.w	r3, [r0], #4
  4042e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042e4:	f840 3b04 	str.w	r3, [r0], #4
  4042e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042ec:	f840 3b04 	str.w	r3, [r0], #4
  4042f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042f4:	f840 3b04 	str.w	r3, [r0], #4
  4042f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042fc:	f840 3b04 	str.w	r3, [r0], #4
  404300:	f851 3b04 	ldr.w	r3, [r1], #4
  404304:	f840 3b04 	str.w	r3, [r0], #4
  404308:	f851 3b04 	ldr.w	r3, [r1], #4
  40430c:	f840 3b04 	str.w	r3, [r0], #4
  404310:	f851 3b04 	ldr.w	r3, [r1], #4
  404314:	f840 3b04 	str.w	r3, [r0], #4
  404318:	f851 3b04 	ldr.w	r3, [r1], #4
  40431c:	f840 3b04 	str.w	r3, [r0], #4
  404320:	f851 3b04 	ldr.w	r3, [r1], #4
  404324:	f840 3b04 	str.w	r3, [r0], #4
  404328:	f851 3b04 	ldr.w	r3, [r1], #4
  40432c:	f840 3b04 	str.w	r3, [r0], #4
  404330:	3a40      	subs	r2, #64	; 0x40
  404332:	d2bd      	bcs.n	4042b0 <memcpy+0x10>
  404334:	3230      	adds	r2, #48	; 0x30
  404336:	d311      	bcc.n	40435c <memcpy+0xbc>
  404338:	f851 3b04 	ldr.w	r3, [r1], #4
  40433c:	f840 3b04 	str.w	r3, [r0], #4
  404340:	f851 3b04 	ldr.w	r3, [r1], #4
  404344:	f840 3b04 	str.w	r3, [r0], #4
  404348:	f851 3b04 	ldr.w	r3, [r1], #4
  40434c:	f840 3b04 	str.w	r3, [r0], #4
  404350:	f851 3b04 	ldr.w	r3, [r1], #4
  404354:	f840 3b04 	str.w	r3, [r0], #4
  404358:	3a10      	subs	r2, #16
  40435a:	d2ed      	bcs.n	404338 <memcpy+0x98>
  40435c:	320c      	adds	r2, #12
  40435e:	d305      	bcc.n	40436c <memcpy+0xcc>
  404360:	f851 3b04 	ldr.w	r3, [r1], #4
  404364:	f840 3b04 	str.w	r3, [r0], #4
  404368:	3a04      	subs	r2, #4
  40436a:	d2f9      	bcs.n	404360 <memcpy+0xc0>
  40436c:	3204      	adds	r2, #4
  40436e:	d008      	beq.n	404382 <memcpy+0xe2>
  404370:	07d2      	lsls	r2, r2, #31
  404372:	bf1c      	itt	ne
  404374:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404378:	f800 3b01 	strbne.w	r3, [r0], #1
  40437c:	d301      	bcc.n	404382 <memcpy+0xe2>
  40437e:	880b      	ldrh	r3, [r1, #0]
  404380:	8003      	strh	r3, [r0, #0]
  404382:	4660      	mov	r0, ip
  404384:	4770      	bx	lr
  404386:	bf00      	nop
  404388:	2a08      	cmp	r2, #8
  40438a:	d313      	bcc.n	4043b4 <memcpy+0x114>
  40438c:	078b      	lsls	r3, r1, #30
  40438e:	d08d      	beq.n	4042ac <memcpy+0xc>
  404390:	f010 0303 	ands.w	r3, r0, #3
  404394:	d08a      	beq.n	4042ac <memcpy+0xc>
  404396:	f1c3 0304 	rsb	r3, r3, #4
  40439a:	1ad2      	subs	r2, r2, r3
  40439c:	07db      	lsls	r3, r3, #31
  40439e:	bf1c      	itt	ne
  4043a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4043a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4043a8:	d380      	bcc.n	4042ac <memcpy+0xc>
  4043aa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4043ae:	f820 3b02 	strh.w	r3, [r0], #2
  4043b2:	e77b      	b.n	4042ac <memcpy+0xc>
  4043b4:	3a04      	subs	r2, #4
  4043b6:	d3d9      	bcc.n	40436c <memcpy+0xcc>
  4043b8:	3a01      	subs	r2, #1
  4043ba:	f811 3b01 	ldrb.w	r3, [r1], #1
  4043be:	f800 3b01 	strb.w	r3, [r0], #1
  4043c2:	d2f9      	bcs.n	4043b8 <memcpy+0x118>
  4043c4:	780b      	ldrb	r3, [r1, #0]
  4043c6:	7003      	strb	r3, [r0, #0]
  4043c8:	784b      	ldrb	r3, [r1, #1]
  4043ca:	7043      	strb	r3, [r0, #1]
  4043cc:	788b      	ldrb	r3, [r1, #2]
  4043ce:	7083      	strb	r3, [r0, #2]
  4043d0:	4660      	mov	r0, ip
  4043d2:	4770      	bx	lr

004043d4 <memmove>:
  4043d4:	4288      	cmp	r0, r1
  4043d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4043d8:	d90d      	bls.n	4043f6 <memmove+0x22>
  4043da:	188b      	adds	r3, r1, r2
  4043dc:	4298      	cmp	r0, r3
  4043de:	d20a      	bcs.n	4043f6 <memmove+0x22>
  4043e0:	1881      	adds	r1, r0, r2
  4043e2:	2a00      	cmp	r2, #0
  4043e4:	d051      	beq.n	40448a <memmove+0xb6>
  4043e6:	1a9a      	subs	r2, r3, r2
  4043e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4043ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4043f0:	4293      	cmp	r3, r2
  4043f2:	d1f9      	bne.n	4043e8 <memmove+0x14>
  4043f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4043f6:	2a0f      	cmp	r2, #15
  4043f8:	d948      	bls.n	40448c <memmove+0xb8>
  4043fa:	ea41 0300 	orr.w	r3, r1, r0
  4043fe:	079b      	lsls	r3, r3, #30
  404400:	d146      	bne.n	404490 <memmove+0xbc>
  404402:	f100 0410 	add.w	r4, r0, #16
  404406:	f101 0310 	add.w	r3, r1, #16
  40440a:	4615      	mov	r5, r2
  40440c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404410:	f844 6c10 	str.w	r6, [r4, #-16]
  404414:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404418:	f844 6c0c 	str.w	r6, [r4, #-12]
  40441c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404420:	f844 6c08 	str.w	r6, [r4, #-8]
  404424:	3d10      	subs	r5, #16
  404426:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40442a:	f844 6c04 	str.w	r6, [r4, #-4]
  40442e:	2d0f      	cmp	r5, #15
  404430:	f103 0310 	add.w	r3, r3, #16
  404434:	f104 0410 	add.w	r4, r4, #16
  404438:	d8e8      	bhi.n	40440c <memmove+0x38>
  40443a:	f1a2 0310 	sub.w	r3, r2, #16
  40443e:	f023 030f 	bic.w	r3, r3, #15
  404442:	f002 0e0f 	and.w	lr, r2, #15
  404446:	3310      	adds	r3, #16
  404448:	f1be 0f03 	cmp.w	lr, #3
  40444c:	4419      	add	r1, r3
  40444e:	4403      	add	r3, r0
  404450:	d921      	bls.n	404496 <memmove+0xc2>
  404452:	1f1e      	subs	r6, r3, #4
  404454:	460d      	mov	r5, r1
  404456:	4674      	mov	r4, lr
  404458:	3c04      	subs	r4, #4
  40445a:	f855 7b04 	ldr.w	r7, [r5], #4
  40445e:	f846 7f04 	str.w	r7, [r6, #4]!
  404462:	2c03      	cmp	r4, #3
  404464:	d8f8      	bhi.n	404458 <memmove+0x84>
  404466:	f1ae 0404 	sub.w	r4, lr, #4
  40446a:	f024 0403 	bic.w	r4, r4, #3
  40446e:	3404      	adds	r4, #4
  404470:	4423      	add	r3, r4
  404472:	4421      	add	r1, r4
  404474:	f002 0203 	and.w	r2, r2, #3
  404478:	b162      	cbz	r2, 404494 <memmove+0xc0>
  40447a:	3b01      	subs	r3, #1
  40447c:	440a      	add	r2, r1
  40447e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404482:	f803 4f01 	strb.w	r4, [r3, #1]!
  404486:	428a      	cmp	r2, r1
  404488:	d1f9      	bne.n	40447e <memmove+0xaa>
  40448a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40448c:	4603      	mov	r3, r0
  40448e:	e7f3      	b.n	404478 <memmove+0xa4>
  404490:	4603      	mov	r3, r0
  404492:	e7f2      	b.n	40447a <memmove+0xa6>
  404494:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404496:	4672      	mov	r2, lr
  404498:	e7ee      	b.n	404478 <memmove+0xa4>
  40449a:	bf00      	nop

0040449c <__malloc_lock>:
  40449c:	4770      	bx	lr
  40449e:	bf00      	nop

004044a0 <__malloc_unlock>:
  4044a0:	4770      	bx	lr
  4044a2:	bf00      	nop

004044a4 <_realloc_r>:
  4044a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044a8:	4617      	mov	r7, r2
  4044aa:	b083      	sub	sp, #12
  4044ac:	2900      	cmp	r1, #0
  4044ae:	f000 80c1 	beq.w	404634 <_realloc_r+0x190>
  4044b2:	460e      	mov	r6, r1
  4044b4:	4681      	mov	r9, r0
  4044b6:	f107 050b 	add.w	r5, r7, #11
  4044ba:	f7ff ffef 	bl	40449c <__malloc_lock>
  4044be:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4044c2:	2d16      	cmp	r5, #22
  4044c4:	f02e 0403 	bic.w	r4, lr, #3
  4044c8:	f1a6 0808 	sub.w	r8, r6, #8
  4044cc:	d840      	bhi.n	404550 <_realloc_r+0xac>
  4044ce:	2210      	movs	r2, #16
  4044d0:	4615      	mov	r5, r2
  4044d2:	42af      	cmp	r7, r5
  4044d4:	d841      	bhi.n	40455a <_realloc_r+0xb6>
  4044d6:	4294      	cmp	r4, r2
  4044d8:	da75      	bge.n	4045c6 <_realloc_r+0x122>
  4044da:	4bc9      	ldr	r3, [pc, #804]	; (404800 <_realloc_r+0x35c>)
  4044dc:	6899      	ldr	r1, [r3, #8]
  4044de:	eb08 0004 	add.w	r0, r8, r4
  4044e2:	4288      	cmp	r0, r1
  4044e4:	6841      	ldr	r1, [r0, #4]
  4044e6:	f000 80d9 	beq.w	40469c <_realloc_r+0x1f8>
  4044ea:	f021 0301 	bic.w	r3, r1, #1
  4044ee:	4403      	add	r3, r0
  4044f0:	685b      	ldr	r3, [r3, #4]
  4044f2:	07db      	lsls	r3, r3, #31
  4044f4:	d57d      	bpl.n	4045f2 <_realloc_r+0x14e>
  4044f6:	f01e 0f01 	tst.w	lr, #1
  4044fa:	d035      	beq.n	404568 <_realloc_r+0xc4>
  4044fc:	4639      	mov	r1, r7
  4044fe:	4648      	mov	r0, r9
  404500:	f7ff fbc6 	bl	403c90 <_malloc_r>
  404504:	4607      	mov	r7, r0
  404506:	b1e0      	cbz	r0, 404542 <_realloc_r+0x9e>
  404508:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40450c:	f023 0301 	bic.w	r3, r3, #1
  404510:	4443      	add	r3, r8
  404512:	f1a0 0208 	sub.w	r2, r0, #8
  404516:	429a      	cmp	r2, r3
  404518:	f000 8144 	beq.w	4047a4 <_realloc_r+0x300>
  40451c:	1f22      	subs	r2, r4, #4
  40451e:	2a24      	cmp	r2, #36	; 0x24
  404520:	f200 8131 	bhi.w	404786 <_realloc_r+0x2e2>
  404524:	2a13      	cmp	r2, #19
  404526:	f200 8104 	bhi.w	404732 <_realloc_r+0x28e>
  40452a:	4603      	mov	r3, r0
  40452c:	4632      	mov	r2, r6
  40452e:	6811      	ldr	r1, [r2, #0]
  404530:	6019      	str	r1, [r3, #0]
  404532:	6851      	ldr	r1, [r2, #4]
  404534:	6059      	str	r1, [r3, #4]
  404536:	6892      	ldr	r2, [r2, #8]
  404538:	609a      	str	r2, [r3, #8]
  40453a:	4631      	mov	r1, r6
  40453c:	4648      	mov	r0, r9
  40453e:	f7ff f88d 	bl	40365c <_free_r>
  404542:	4648      	mov	r0, r9
  404544:	f7ff ffac 	bl	4044a0 <__malloc_unlock>
  404548:	4638      	mov	r0, r7
  40454a:	b003      	add	sp, #12
  40454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404550:	f025 0507 	bic.w	r5, r5, #7
  404554:	2d00      	cmp	r5, #0
  404556:	462a      	mov	r2, r5
  404558:	dabb      	bge.n	4044d2 <_realloc_r+0x2e>
  40455a:	230c      	movs	r3, #12
  40455c:	2000      	movs	r0, #0
  40455e:	f8c9 3000 	str.w	r3, [r9]
  404562:	b003      	add	sp, #12
  404564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404568:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40456c:	ebc3 0a08 	rsb	sl, r3, r8
  404570:	f8da 3004 	ldr.w	r3, [sl, #4]
  404574:	f023 0c03 	bic.w	ip, r3, #3
  404578:	eb04 030c 	add.w	r3, r4, ip
  40457c:	4293      	cmp	r3, r2
  40457e:	dbbd      	blt.n	4044fc <_realloc_r+0x58>
  404580:	4657      	mov	r7, sl
  404582:	f8da 100c 	ldr.w	r1, [sl, #12]
  404586:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40458a:	1f22      	subs	r2, r4, #4
  40458c:	2a24      	cmp	r2, #36	; 0x24
  40458e:	60c1      	str	r1, [r0, #12]
  404590:	6088      	str	r0, [r1, #8]
  404592:	f200 8117 	bhi.w	4047c4 <_realloc_r+0x320>
  404596:	2a13      	cmp	r2, #19
  404598:	f240 8112 	bls.w	4047c0 <_realloc_r+0x31c>
  40459c:	6831      	ldr	r1, [r6, #0]
  40459e:	f8ca 1008 	str.w	r1, [sl, #8]
  4045a2:	6871      	ldr	r1, [r6, #4]
  4045a4:	f8ca 100c 	str.w	r1, [sl, #12]
  4045a8:	2a1b      	cmp	r2, #27
  4045aa:	f200 812b 	bhi.w	404804 <_realloc_r+0x360>
  4045ae:	3608      	adds	r6, #8
  4045b0:	f10a 0210 	add.w	r2, sl, #16
  4045b4:	6831      	ldr	r1, [r6, #0]
  4045b6:	6011      	str	r1, [r2, #0]
  4045b8:	6871      	ldr	r1, [r6, #4]
  4045ba:	6051      	str	r1, [r2, #4]
  4045bc:	68b1      	ldr	r1, [r6, #8]
  4045be:	6091      	str	r1, [r2, #8]
  4045c0:	463e      	mov	r6, r7
  4045c2:	461c      	mov	r4, r3
  4045c4:	46d0      	mov	r8, sl
  4045c6:	1b63      	subs	r3, r4, r5
  4045c8:	2b0f      	cmp	r3, #15
  4045ca:	d81d      	bhi.n	404608 <_realloc_r+0x164>
  4045cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4045d0:	f003 0301 	and.w	r3, r3, #1
  4045d4:	4323      	orrs	r3, r4
  4045d6:	4444      	add	r4, r8
  4045d8:	f8c8 3004 	str.w	r3, [r8, #4]
  4045dc:	6863      	ldr	r3, [r4, #4]
  4045de:	f043 0301 	orr.w	r3, r3, #1
  4045e2:	6063      	str	r3, [r4, #4]
  4045e4:	4648      	mov	r0, r9
  4045e6:	f7ff ff5b 	bl	4044a0 <__malloc_unlock>
  4045ea:	4630      	mov	r0, r6
  4045ec:	b003      	add	sp, #12
  4045ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045f2:	f021 0103 	bic.w	r1, r1, #3
  4045f6:	4421      	add	r1, r4
  4045f8:	4291      	cmp	r1, r2
  4045fa:	db21      	blt.n	404640 <_realloc_r+0x19c>
  4045fc:	68c3      	ldr	r3, [r0, #12]
  4045fe:	6882      	ldr	r2, [r0, #8]
  404600:	460c      	mov	r4, r1
  404602:	60d3      	str	r3, [r2, #12]
  404604:	609a      	str	r2, [r3, #8]
  404606:	e7de      	b.n	4045c6 <_realloc_r+0x122>
  404608:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40460c:	eb08 0105 	add.w	r1, r8, r5
  404610:	f002 0201 	and.w	r2, r2, #1
  404614:	4315      	orrs	r5, r2
  404616:	f043 0201 	orr.w	r2, r3, #1
  40461a:	440b      	add	r3, r1
  40461c:	f8c8 5004 	str.w	r5, [r8, #4]
  404620:	604a      	str	r2, [r1, #4]
  404622:	685a      	ldr	r2, [r3, #4]
  404624:	f042 0201 	orr.w	r2, r2, #1
  404628:	3108      	adds	r1, #8
  40462a:	605a      	str	r2, [r3, #4]
  40462c:	4648      	mov	r0, r9
  40462e:	f7ff f815 	bl	40365c <_free_r>
  404632:	e7d7      	b.n	4045e4 <_realloc_r+0x140>
  404634:	4611      	mov	r1, r2
  404636:	b003      	add	sp, #12
  404638:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40463c:	f7ff bb28 	b.w	403c90 <_malloc_r>
  404640:	f01e 0f01 	tst.w	lr, #1
  404644:	f47f af5a 	bne.w	4044fc <_realloc_r+0x58>
  404648:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40464c:	ebc3 0a08 	rsb	sl, r3, r8
  404650:	f8da 3004 	ldr.w	r3, [sl, #4]
  404654:	f023 0c03 	bic.w	ip, r3, #3
  404658:	eb01 0e0c 	add.w	lr, r1, ip
  40465c:	4596      	cmp	lr, r2
  40465e:	db8b      	blt.n	404578 <_realloc_r+0xd4>
  404660:	68c3      	ldr	r3, [r0, #12]
  404662:	6882      	ldr	r2, [r0, #8]
  404664:	4657      	mov	r7, sl
  404666:	60d3      	str	r3, [r2, #12]
  404668:	609a      	str	r2, [r3, #8]
  40466a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40466e:	f8da 300c 	ldr.w	r3, [sl, #12]
  404672:	60cb      	str	r3, [r1, #12]
  404674:	1f22      	subs	r2, r4, #4
  404676:	2a24      	cmp	r2, #36	; 0x24
  404678:	6099      	str	r1, [r3, #8]
  40467a:	f200 8099 	bhi.w	4047b0 <_realloc_r+0x30c>
  40467e:	2a13      	cmp	r2, #19
  404680:	d962      	bls.n	404748 <_realloc_r+0x2a4>
  404682:	6833      	ldr	r3, [r6, #0]
  404684:	f8ca 3008 	str.w	r3, [sl, #8]
  404688:	6873      	ldr	r3, [r6, #4]
  40468a:	f8ca 300c 	str.w	r3, [sl, #12]
  40468e:	2a1b      	cmp	r2, #27
  404690:	f200 80a0 	bhi.w	4047d4 <_realloc_r+0x330>
  404694:	3608      	adds	r6, #8
  404696:	f10a 0310 	add.w	r3, sl, #16
  40469a:	e056      	b.n	40474a <_realloc_r+0x2a6>
  40469c:	f021 0b03 	bic.w	fp, r1, #3
  4046a0:	44a3      	add	fp, r4
  4046a2:	f105 0010 	add.w	r0, r5, #16
  4046a6:	4583      	cmp	fp, r0
  4046a8:	da59      	bge.n	40475e <_realloc_r+0x2ba>
  4046aa:	f01e 0f01 	tst.w	lr, #1
  4046ae:	f47f af25 	bne.w	4044fc <_realloc_r+0x58>
  4046b2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4046b6:	ebc1 0a08 	rsb	sl, r1, r8
  4046ba:	f8da 1004 	ldr.w	r1, [sl, #4]
  4046be:	f021 0c03 	bic.w	ip, r1, #3
  4046c2:	44e3      	add	fp, ip
  4046c4:	4558      	cmp	r0, fp
  4046c6:	f73f af57 	bgt.w	404578 <_realloc_r+0xd4>
  4046ca:	4657      	mov	r7, sl
  4046cc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4046d0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4046d4:	1f22      	subs	r2, r4, #4
  4046d6:	2a24      	cmp	r2, #36	; 0x24
  4046d8:	60c1      	str	r1, [r0, #12]
  4046da:	6088      	str	r0, [r1, #8]
  4046dc:	f200 80b4 	bhi.w	404848 <_realloc_r+0x3a4>
  4046e0:	2a13      	cmp	r2, #19
  4046e2:	f240 80a5 	bls.w	404830 <_realloc_r+0x38c>
  4046e6:	6831      	ldr	r1, [r6, #0]
  4046e8:	f8ca 1008 	str.w	r1, [sl, #8]
  4046ec:	6871      	ldr	r1, [r6, #4]
  4046ee:	f8ca 100c 	str.w	r1, [sl, #12]
  4046f2:	2a1b      	cmp	r2, #27
  4046f4:	f200 80af 	bhi.w	404856 <_realloc_r+0x3b2>
  4046f8:	3608      	adds	r6, #8
  4046fa:	f10a 0210 	add.w	r2, sl, #16
  4046fe:	6831      	ldr	r1, [r6, #0]
  404700:	6011      	str	r1, [r2, #0]
  404702:	6871      	ldr	r1, [r6, #4]
  404704:	6051      	str	r1, [r2, #4]
  404706:	68b1      	ldr	r1, [r6, #8]
  404708:	6091      	str	r1, [r2, #8]
  40470a:	eb0a 0105 	add.w	r1, sl, r5
  40470e:	ebc5 020b 	rsb	r2, r5, fp
  404712:	f042 0201 	orr.w	r2, r2, #1
  404716:	6099      	str	r1, [r3, #8]
  404718:	604a      	str	r2, [r1, #4]
  40471a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40471e:	f003 0301 	and.w	r3, r3, #1
  404722:	431d      	orrs	r5, r3
  404724:	4648      	mov	r0, r9
  404726:	f8ca 5004 	str.w	r5, [sl, #4]
  40472a:	f7ff feb9 	bl	4044a0 <__malloc_unlock>
  40472e:	4638      	mov	r0, r7
  404730:	e75c      	b.n	4045ec <_realloc_r+0x148>
  404732:	6833      	ldr	r3, [r6, #0]
  404734:	6003      	str	r3, [r0, #0]
  404736:	6873      	ldr	r3, [r6, #4]
  404738:	6043      	str	r3, [r0, #4]
  40473a:	2a1b      	cmp	r2, #27
  40473c:	d827      	bhi.n	40478e <_realloc_r+0x2ea>
  40473e:	f100 0308 	add.w	r3, r0, #8
  404742:	f106 0208 	add.w	r2, r6, #8
  404746:	e6f2      	b.n	40452e <_realloc_r+0x8a>
  404748:	463b      	mov	r3, r7
  40474a:	6832      	ldr	r2, [r6, #0]
  40474c:	601a      	str	r2, [r3, #0]
  40474e:	6872      	ldr	r2, [r6, #4]
  404750:	605a      	str	r2, [r3, #4]
  404752:	68b2      	ldr	r2, [r6, #8]
  404754:	609a      	str	r2, [r3, #8]
  404756:	463e      	mov	r6, r7
  404758:	4674      	mov	r4, lr
  40475a:	46d0      	mov	r8, sl
  40475c:	e733      	b.n	4045c6 <_realloc_r+0x122>
  40475e:	eb08 0105 	add.w	r1, r8, r5
  404762:	ebc5 0b0b 	rsb	fp, r5, fp
  404766:	f04b 0201 	orr.w	r2, fp, #1
  40476a:	6099      	str	r1, [r3, #8]
  40476c:	604a      	str	r2, [r1, #4]
  40476e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  404772:	f003 0301 	and.w	r3, r3, #1
  404776:	431d      	orrs	r5, r3
  404778:	4648      	mov	r0, r9
  40477a:	f846 5c04 	str.w	r5, [r6, #-4]
  40477e:	f7ff fe8f 	bl	4044a0 <__malloc_unlock>
  404782:	4630      	mov	r0, r6
  404784:	e732      	b.n	4045ec <_realloc_r+0x148>
  404786:	4631      	mov	r1, r6
  404788:	f7ff fe24 	bl	4043d4 <memmove>
  40478c:	e6d5      	b.n	40453a <_realloc_r+0x96>
  40478e:	68b3      	ldr	r3, [r6, #8]
  404790:	6083      	str	r3, [r0, #8]
  404792:	68f3      	ldr	r3, [r6, #12]
  404794:	60c3      	str	r3, [r0, #12]
  404796:	2a24      	cmp	r2, #36	; 0x24
  404798:	d028      	beq.n	4047ec <_realloc_r+0x348>
  40479a:	f100 0310 	add.w	r3, r0, #16
  40479e:	f106 0210 	add.w	r2, r6, #16
  4047a2:	e6c4      	b.n	40452e <_realloc_r+0x8a>
  4047a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4047a8:	f023 0303 	bic.w	r3, r3, #3
  4047ac:	441c      	add	r4, r3
  4047ae:	e70a      	b.n	4045c6 <_realloc_r+0x122>
  4047b0:	4631      	mov	r1, r6
  4047b2:	4638      	mov	r0, r7
  4047b4:	4674      	mov	r4, lr
  4047b6:	46d0      	mov	r8, sl
  4047b8:	f7ff fe0c 	bl	4043d4 <memmove>
  4047bc:	463e      	mov	r6, r7
  4047be:	e702      	b.n	4045c6 <_realloc_r+0x122>
  4047c0:	463a      	mov	r2, r7
  4047c2:	e6f7      	b.n	4045b4 <_realloc_r+0x110>
  4047c4:	4631      	mov	r1, r6
  4047c6:	4638      	mov	r0, r7
  4047c8:	461c      	mov	r4, r3
  4047ca:	46d0      	mov	r8, sl
  4047cc:	f7ff fe02 	bl	4043d4 <memmove>
  4047d0:	463e      	mov	r6, r7
  4047d2:	e6f8      	b.n	4045c6 <_realloc_r+0x122>
  4047d4:	68b3      	ldr	r3, [r6, #8]
  4047d6:	f8ca 3010 	str.w	r3, [sl, #16]
  4047da:	68f3      	ldr	r3, [r6, #12]
  4047dc:	f8ca 3014 	str.w	r3, [sl, #20]
  4047e0:	2a24      	cmp	r2, #36	; 0x24
  4047e2:	d01b      	beq.n	40481c <_realloc_r+0x378>
  4047e4:	3610      	adds	r6, #16
  4047e6:	f10a 0318 	add.w	r3, sl, #24
  4047ea:	e7ae      	b.n	40474a <_realloc_r+0x2a6>
  4047ec:	6933      	ldr	r3, [r6, #16]
  4047ee:	6103      	str	r3, [r0, #16]
  4047f0:	6973      	ldr	r3, [r6, #20]
  4047f2:	6143      	str	r3, [r0, #20]
  4047f4:	f106 0218 	add.w	r2, r6, #24
  4047f8:	f100 0318 	add.w	r3, r0, #24
  4047fc:	e697      	b.n	40452e <_realloc_r+0x8a>
  4047fe:	bf00      	nop
  404800:	20000458 	.word	0x20000458
  404804:	68b1      	ldr	r1, [r6, #8]
  404806:	f8ca 1010 	str.w	r1, [sl, #16]
  40480a:	68f1      	ldr	r1, [r6, #12]
  40480c:	f8ca 1014 	str.w	r1, [sl, #20]
  404810:	2a24      	cmp	r2, #36	; 0x24
  404812:	d00f      	beq.n	404834 <_realloc_r+0x390>
  404814:	3610      	adds	r6, #16
  404816:	f10a 0218 	add.w	r2, sl, #24
  40481a:	e6cb      	b.n	4045b4 <_realloc_r+0x110>
  40481c:	6933      	ldr	r3, [r6, #16]
  40481e:	f8ca 3018 	str.w	r3, [sl, #24]
  404822:	6973      	ldr	r3, [r6, #20]
  404824:	f8ca 301c 	str.w	r3, [sl, #28]
  404828:	3618      	adds	r6, #24
  40482a:	f10a 0320 	add.w	r3, sl, #32
  40482e:	e78c      	b.n	40474a <_realloc_r+0x2a6>
  404830:	463a      	mov	r2, r7
  404832:	e764      	b.n	4046fe <_realloc_r+0x25a>
  404834:	6932      	ldr	r2, [r6, #16]
  404836:	f8ca 2018 	str.w	r2, [sl, #24]
  40483a:	6972      	ldr	r2, [r6, #20]
  40483c:	f8ca 201c 	str.w	r2, [sl, #28]
  404840:	3618      	adds	r6, #24
  404842:	f10a 0220 	add.w	r2, sl, #32
  404846:	e6b5      	b.n	4045b4 <_realloc_r+0x110>
  404848:	4631      	mov	r1, r6
  40484a:	4638      	mov	r0, r7
  40484c:	9301      	str	r3, [sp, #4]
  40484e:	f7ff fdc1 	bl	4043d4 <memmove>
  404852:	9b01      	ldr	r3, [sp, #4]
  404854:	e759      	b.n	40470a <_realloc_r+0x266>
  404856:	68b1      	ldr	r1, [r6, #8]
  404858:	f8ca 1010 	str.w	r1, [sl, #16]
  40485c:	68f1      	ldr	r1, [r6, #12]
  40485e:	f8ca 1014 	str.w	r1, [sl, #20]
  404862:	2a24      	cmp	r2, #36	; 0x24
  404864:	d003      	beq.n	40486e <_realloc_r+0x3ca>
  404866:	3610      	adds	r6, #16
  404868:	f10a 0218 	add.w	r2, sl, #24
  40486c:	e747      	b.n	4046fe <_realloc_r+0x25a>
  40486e:	6932      	ldr	r2, [r6, #16]
  404870:	f8ca 2018 	str.w	r2, [sl, #24]
  404874:	6972      	ldr	r2, [r6, #20]
  404876:	f8ca 201c 	str.w	r2, [sl, #28]
  40487a:	3618      	adds	r6, #24
  40487c:	f10a 0220 	add.w	r2, sl, #32
  404880:	e73d      	b.n	4046fe <_realloc_r+0x25a>
  404882:	bf00      	nop

00404884 <_sbrk_r>:
  404884:	b538      	push	{r3, r4, r5, lr}
  404886:	4c07      	ldr	r4, [pc, #28]	; (4048a4 <_sbrk_r+0x20>)
  404888:	2300      	movs	r3, #0
  40488a:	4605      	mov	r5, r0
  40488c:	4608      	mov	r0, r1
  40488e:	6023      	str	r3, [r4, #0]
  404890:	f7fd f868 	bl	401964 <_sbrk>
  404894:	1c43      	adds	r3, r0, #1
  404896:	d000      	beq.n	40489a <_sbrk_r+0x16>
  404898:	bd38      	pop	{r3, r4, r5, pc}
  40489a:	6823      	ldr	r3, [r4, #0]
  40489c:	2b00      	cmp	r3, #0
  40489e:	d0fb      	beq.n	404898 <_sbrk_r+0x14>
  4048a0:	602b      	str	r3, [r5, #0]
  4048a2:	bd38      	pop	{r3, r4, r5, pc}
  4048a4:	20001138 	.word	0x20001138

004048a8 <__sread>:
  4048a8:	b510      	push	{r4, lr}
  4048aa:	460c      	mov	r4, r1
  4048ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4048b0:	f000 fa3a 	bl	404d28 <_read_r>
  4048b4:	2800      	cmp	r0, #0
  4048b6:	db03      	blt.n	4048c0 <__sread+0x18>
  4048b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4048ba:	4403      	add	r3, r0
  4048bc:	6523      	str	r3, [r4, #80]	; 0x50
  4048be:	bd10      	pop	{r4, pc}
  4048c0:	89a3      	ldrh	r3, [r4, #12]
  4048c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4048c6:	81a3      	strh	r3, [r4, #12]
  4048c8:	bd10      	pop	{r4, pc}
  4048ca:	bf00      	nop

004048cc <__swrite>:
  4048cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4048d0:	4616      	mov	r6, r2
  4048d2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4048d6:	461f      	mov	r7, r3
  4048d8:	05d3      	lsls	r3, r2, #23
  4048da:	460c      	mov	r4, r1
  4048dc:	4605      	mov	r5, r0
  4048de:	d507      	bpl.n	4048f0 <__swrite+0x24>
  4048e0:	2200      	movs	r2, #0
  4048e2:	2302      	movs	r3, #2
  4048e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4048e8:	f000 fa08 	bl	404cfc <_lseek_r>
  4048ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4048f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4048f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4048f8:	81a2      	strh	r2, [r4, #12]
  4048fa:	463b      	mov	r3, r7
  4048fc:	4632      	mov	r2, r6
  4048fe:	4628      	mov	r0, r5
  404900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404904:	f000 b918 	b.w	404b38 <_write_r>

00404908 <__sseek>:
  404908:	b510      	push	{r4, lr}
  40490a:	460c      	mov	r4, r1
  40490c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404910:	f000 f9f4 	bl	404cfc <_lseek_r>
  404914:	89a3      	ldrh	r3, [r4, #12]
  404916:	1c42      	adds	r2, r0, #1
  404918:	bf0e      	itee	eq
  40491a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40491e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404922:	6520      	strne	r0, [r4, #80]	; 0x50
  404924:	81a3      	strh	r3, [r4, #12]
  404926:	bd10      	pop	{r4, pc}

00404928 <__sclose>:
  404928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40492c:	f000 b96c 	b.w	404c08 <_close_r>
	...

00404940 <strlen>:
  404940:	f890 f000 	pld	[r0]
  404944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404948:	f020 0107 	bic.w	r1, r0, #7
  40494c:	f06f 0c00 	mvn.w	ip, #0
  404950:	f010 0407 	ands.w	r4, r0, #7
  404954:	f891 f020 	pld	[r1, #32]
  404958:	f040 8049 	bne.w	4049ee <strlen+0xae>
  40495c:	f04f 0400 	mov.w	r4, #0
  404960:	f06f 0007 	mvn.w	r0, #7
  404964:	e9d1 2300 	ldrd	r2, r3, [r1]
  404968:	f891 f040 	pld	[r1, #64]	; 0x40
  40496c:	f100 0008 	add.w	r0, r0, #8
  404970:	fa82 f24c 	uadd8	r2, r2, ip
  404974:	faa4 f28c 	sel	r2, r4, ip
  404978:	fa83 f34c 	uadd8	r3, r3, ip
  40497c:	faa2 f38c 	sel	r3, r2, ip
  404980:	bb4b      	cbnz	r3, 4049d6 <strlen+0x96>
  404982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404986:	fa82 f24c 	uadd8	r2, r2, ip
  40498a:	f100 0008 	add.w	r0, r0, #8
  40498e:	faa4 f28c 	sel	r2, r4, ip
  404992:	fa83 f34c 	uadd8	r3, r3, ip
  404996:	faa2 f38c 	sel	r3, r2, ip
  40499a:	b9e3      	cbnz	r3, 4049d6 <strlen+0x96>
  40499c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4049a0:	fa82 f24c 	uadd8	r2, r2, ip
  4049a4:	f100 0008 	add.w	r0, r0, #8
  4049a8:	faa4 f28c 	sel	r2, r4, ip
  4049ac:	fa83 f34c 	uadd8	r3, r3, ip
  4049b0:	faa2 f38c 	sel	r3, r2, ip
  4049b4:	b97b      	cbnz	r3, 4049d6 <strlen+0x96>
  4049b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4049ba:	f101 0120 	add.w	r1, r1, #32
  4049be:	fa82 f24c 	uadd8	r2, r2, ip
  4049c2:	f100 0008 	add.w	r0, r0, #8
  4049c6:	faa4 f28c 	sel	r2, r4, ip
  4049ca:	fa83 f34c 	uadd8	r3, r3, ip
  4049ce:	faa2 f38c 	sel	r3, r2, ip
  4049d2:	2b00      	cmp	r3, #0
  4049d4:	d0c6      	beq.n	404964 <strlen+0x24>
  4049d6:	2a00      	cmp	r2, #0
  4049d8:	bf04      	itt	eq
  4049da:	3004      	addeq	r0, #4
  4049dc:	461a      	moveq	r2, r3
  4049de:	ba12      	rev	r2, r2
  4049e0:	fab2 f282 	clz	r2, r2
  4049e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4049e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4049ec:	4770      	bx	lr
  4049ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4049f2:	f004 0503 	and.w	r5, r4, #3
  4049f6:	f1c4 0000 	rsb	r0, r4, #0
  4049fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4049fe:	f014 0f04 	tst.w	r4, #4
  404a02:	f891 f040 	pld	[r1, #64]	; 0x40
  404a06:	fa0c f505 	lsl.w	r5, ip, r5
  404a0a:	ea62 0205 	orn	r2, r2, r5
  404a0e:	bf1c      	itt	ne
  404a10:	ea63 0305 	ornne	r3, r3, r5
  404a14:	4662      	movne	r2, ip
  404a16:	f04f 0400 	mov.w	r4, #0
  404a1a:	e7a9      	b.n	404970 <strlen+0x30>

00404a1c <__swbuf_r>:
  404a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404a1e:	460e      	mov	r6, r1
  404a20:	4614      	mov	r4, r2
  404a22:	4607      	mov	r7, r0
  404a24:	b110      	cbz	r0, 404a2c <__swbuf_r+0x10>
  404a26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404a28:	2b00      	cmp	r3, #0
  404a2a:	d04a      	beq.n	404ac2 <__swbuf_r+0xa6>
  404a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a30:	69a3      	ldr	r3, [r4, #24]
  404a32:	60a3      	str	r3, [r4, #8]
  404a34:	b291      	uxth	r1, r2
  404a36:	0708      	lsls	r0, r1, #28
  404a38:	d538      	bpl.n	404aac <__swbuf_r+0x90>
  404a3a:	6923      	ldr	r3, [r4, #16]
  404a3c:	2b00      	cmp	r3, #0
  404a3e:	d035      	beq.n	404aac <__swbuf_r+0x90>
  404a40:	0489      	lsls	r1, r1, #18
  404a42:	b2f5      	uxtb	r5, r6
  404a44:	d515      	bpl.n	404a72 <__swbuf_r+0x56>
  404a46:	6822      	ldr	r2, [r4, #0]
  404a48:	6961      	ldr	r1, [r4, #20]
  404a4a:	1ad3      	subs	r3, r2, r3
  404a4c:	428b      	cmp	r3, r1
  404a4e:	da1c      	bge.n	404a8a <__swbuf_r+0x6e>
  404a50:	3301      	adds	r3, #1
  404a52:	68a1      	ldr	r1, [r4, #8]
  404a54:	1c50      	adds	r0, r2, #1
  404a56:	3901      	subs	r1, #1
  404a58:	60a1      	str	r1, [r4, #8]
  404a5a:	6020      	str	r0, [r4, #0]
  404a5c:	7016      	strb	r6, [r2, #0]
  404a5e:	6962      	ldr	r2, [r4, #20]
  404a60:	429a      	cmp	r2, r3
  404a62:	d01a      	beq.n	404a9a <__swbuf_r+0x7e>
  404a64:	89a3      	ldrh	r3, [r4, #12]
  404a66:	07db      	lsls	r3, r3, #31
  404a68:	d501      	bpl.n	404a6e <__swbuf_r+0x52>
  404a6a:	2d0a      	cmp	r5, #10
  404a6c:	d015      	beq.n	404a9a <__swbuf_r+0x7e>
  404a6e:	4628      	mov	r0, r5
  404a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404a72:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404a78:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404a7c:	81a2      	strh	r2, [r4, #12]
  404a7e:	6822      	ldr	r2, [r4, #0]
  404a80:	6661      	str	r1, [r4, #100]	; 0x64
  404a82:	6961      	ldr	r1, [r4, #20]
  404a84:	1ad3      	subs	r3, r2, r3
  404a86:	428b      	cmp	r3, r1
  404a88:	dbe2      	blt.n	404a50 <__swbuf_r+0x34>
  404a8a:	4621      	mov	r1, r4
  404a8c:	4638      	mov	r0, r7
  404a8e:	f7fe fc87 	bl	4033a0 <_fflush_r>
  404a92:	b940      	cbnz	r0, 404aa6 <__swbuf_r+0x8a>
  404a94:	6822      	ldr	r2, [r4, #0]
  404a96:	2301      	movs	r3, #1
  404a98:	e7db      	b.n	404a52 <__swbuf_r+0x36>
  404a9a:	4621      	mov	r1, r4
  404a9c:	4638      	mov	r0, r7
  404a9e:	f7fe fc7f 	bl	4033a0 <_fflush_r>
  404aa2:	2800      	cmp	r0, #0
  404aa4:	d0e3      	beq.n	404a6e <__swbuf_r+0x52>
  404aa6:	f04f 30ff 	mov.w	r0, #4294967295
  404aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404aac:	4621      	mov	r1, r4
  404aae:	4638      	mov	r0, r7
  404ab0:	f7fe fb5e 	bl	403170 <__swsetup_r>
  404ab4:	2800      	cmp	r0, #0
  404ab6:	d1f6      	bne.n	404aa6 <__swbuf_r+0x8a>
  404ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404abc:	6923      	ldr	r3, [r4, #16]
  404abe:	b291      	uxth	r1, r2
  404ac0:	e7be      	b.n	404a40 <__swbuf_r+0x24>
  404ac2:	f7fe fd01 	bl	4034c8 <__sinit>
  404ac6:	e7b1      	b.n	404a2c <__swbuf_r+0x10>

00404ac8 <_wcrtomb_r>:
  404ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404acc:	4605      	mov	r5, r0
  404ace:	b086      	sub	sp, #24
  404ad0:	461e      	mov	r6, r3
  404ad2:	460c      	mov	r4, r1
  404ad4:	b1a1      	cbz	r1, 404b00 <_wcrtomb_r+0x38>
  404ad6:	4b10      	ldr	r3, [pc, #64]	; (404b18 <_wcrtomb_r+0x50>)
  404ad8:	4617      	mov	r7, r2
  404ada:	f8d3 8000 	ldr.w	r8, [r3]
  404ade:	f7ff f851 	bl	403b84 <__locale_charset>
  404ae2:	9600      	str	r6, [sp, #0]
  404ae4:	4603      	mov	r3, r0
  404ae6:	463a      	mov	r2, r7
  404ae8:	4621      	mov	r1, r4
  404aea:	4628      	mov	r0, r5
  404aec:	47c0      	blx	r8
  404aee:	1c43      	adds	r3, r0, #1
  404af0:	d103      	bne.n	404afa <_wcrtomb_r+0x32>
  404af2:	2200      	movs	r2, #0
  404af4:	238a      	movs	r3, #138	; 0x8a
  404af6:	6032      	str	r2, [r6, #0]
  404af8:	602b      	str	r3, [r5, #0]
  404afa:	b006      	add	sp, #24
  404afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b00:	4b05      	ldr	r3, [pc, #20]	; (404b18 <_wcrtomb_r+0x50>)
  404b02:	681f      	ldr	r7, [r3, #0]
  404b04:	f7ff f83e 	bl	403b84 <__locale_charset>
  404b08:	9600      	str	r6, [sp, #0]
  404b0a:	4603      	mov	r3, r0
  404b0c:	4622      	mov	r2, r4
  404b0e:	a903      	add	r1, sp, #12
  404b10:	4628      	mov	r0, r5
  404b12:	47b8      	blx	r7
  404b14:	e7eb      	b.n	404aee <_wcrtomb_r+0x26>
  404b16:	bf00      	nop
  404b18:	20000868 	.word	0x20000868

00404b1c <__ascii_wctomb>:
  404b1c:	b121      	cbz	r1, 404b28 <__ascii_wctomb+0xc>
  404b1e:	2aff      	cmp	r2, #255	; 0xff
  404b20:	d804      	bhi.n	404b2c <__ascii_wctomb+0x10>
  404b22:	700a      	strb	r2, [r1, #0]
  404b24:	2001      	movs	r0, #1
  404b26:	4770      	bx	lr
  404b28:	4608      	mov	r0, r1
  404b2a:	4770      	bx	lr
  404b2c:	238a      	movs	r3, #138	; 0x8a
  404b2e:	6003      	str	r3, [r0, #0]
  404b30:	f04f 30ff 	mov.w	r0, #4294967295
  404b34:	4770      	bx	lr
  404b36:	bf00      	nop

00404b38 <_write_r>:
  404b38:	b570      	push	{r4, r5, r6, lr}
  404b3a:	460d      	mov	r5, r1
  404b3c:	4c08      	ldr	r4, [pc, #32]	; (404b60 <_write_r+0x28>)
  404b3e:	4611      	mov	r1, r2
  404b40:	4606      	mov	r6, r0
  404b42:	461a      	mov	r2, r3
  404b44:	4628      	mov	r0, r5
  404b46:	2300      	movs	r3, #0
  404b48:	6023      	str	r3, [r4, #0]
  404b4a:	f7fb fc7d 	bl	400448 <_write>
  404b4e:	1c43      	adds	r3, r0, #1
  404b50:	d000      	beq.n	404b54 <_write_r+0x1c>
  404b52:	bd70      	pop	{r4, r5, r6, pc}
  404b54:	6823      	ldr	r3, [r4, #0]
  404b56:	2b00      	cmp	r3, #0
  404b58:	d0fb      	beq.n	404b52 <_write_r+0x1a>
  404b5a:	6033      	str	r3, [r6, #0]
  404b5c:	bd70      	pop	{r4, r5, r6, pc}
  404b5e:	bf00      	nop
  404b60:	20001138 	.word	0x20001138

00404b64 <__register_exitproc>:
  404b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404b68:	4c25      	ldr	r4, [pc, #148]	; (404c00 <__register_exitproc+0x9c>)
  404b6a:	6825      	ldr	r5, [r4, #0]
  404b6c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404b70:	4606      	mov	r6, r0
  404b72:	4688      	mov	r8, r1
  404b74:	4692      	mov	sl, r2
  404b76:	4699      	mov	r9, r3
  404b78:	b3c4      	cbz	r4, 404bec <__register_exitproc+0x88>
  404b7a:	6860      	ldr	r0, [r4, #4]
  404b7c:	281f      	cmp	r0, #31
  404b7e:	dc17      	bgt.n	404bb0 <__register_exitproc+0x4c>
  404b80:	1c43      	adds	r3, r0, #1
  404b82:	b176      	cbz	r6, 404ba2 <__register_exitproc+0x3e>
  404b84:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  404b88:	2201      	movs	r2, #1
  404b8a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  404b8e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  404b92:	4082      	lsls	r2, r0
  404b94:	4311      	orrs	r1, r2
  404b96:	2e02      	cmp	r6, #2
  404b98:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  404b9c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  404ba0:	d01e      	beq.n	404be0 <__register_exitproc+0x7c>
  404ba2:	3002      	adds	r0, #2
  404ba4:	6063      	str	r3, [r4, #4]
  404ba6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  404baa:	2000      	movs	r0, #0
  404bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404bb0:	4b14      	ldr	r3, [pc, #80]	; (404c04 <__register_exitproc+0xa0>)
  404bb2:	b303      	cbz	r3, 404bf6 <__register_exitproc+0x92>
  404bb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404bb8:	f7ff f862 	bl	403c80 <malloc>
  404bbc:	4604      	mov	r4, r0
  404bbe:	b1d0      	cbz	r0, 404bf6 <__register_exitproc+0x92>
  404bc0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404bc4:	2700      	movs	r7, #0
  404bc6:	e880 0088 	stmia.w	r0, {r3, r7}
  404bca:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404bce:	4638      	mov	r0, r7
  404bd0:	2301      	movs	r3, #1
  404bd2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  404bd6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  404bda:	2e00      	cmp	r6, #0
  404bdc:	d0e1      	beq.n	404ba2 <__register_exitproc+0x3e>
  404bde:	e7d1      	b.n	404b84 <__register_exitproc+0x20>
  404be0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404be4:	430a      	orrs	r2, r1
  404be6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  404bea:	e7da      	b.n	404ba2 <__register_exitproc+0x3e>
  404bec:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404bf0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404bf4:	e7c1      	b.n	404b7a <__register_exitproc+0x16>
  404bf6:	f04f 30ff 	mov.w	r0, #4294967295
  404bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404bfe:	bf00      	nop
  404c00:	004050a8 	.word	0x004050a8
  404c04:	00403c81 	.word	0x00403c81

00404c08 <_close_r>:
  404c08:	b538      	push	{r3, r4, r5, lr}
  404c0a:	4c07      	ldr	r4, [pc, #28]	; (404c28 <_close_r+0x20>)
  404c0c:	2300      	movs	r3, #0
  404c0e:	4605      	mov	r5, r0
  404c10:	4608      	mov	r0, r1
  404c12:	6023      	str	r3, [r4, #0]
  404c14:	f7fc fed2 	bl	4019bc <_close>
  404c18:	1c43      	adds	r3, r0, #1
  404c1a:	d000      	beq.n	404c1e <_close_r+0x16>
  404c1c:	bd38      	pop	{r3, r4, r5, pc}
  404c1e:	6823      	ldr	r3, [r4, #0]
  404c20:	2b00      	cmp	r3, #0
  404c22:	d0fb      	beq.n	404c1c <_close_r+0x14>
  404c24:	602b      	str	r3, [r5, #0]
  404c26:	bd38      	pop	{r3, r4, r5, pc}
  404c28:	20001138 	.word	0x20001138

00404c2c <_fclose_r>:
  404c2c:	2900      	cmp	r1, #0
  404c2e:	d03d      	beq.n	404cac <_fclose_r+0x80>
  404c30:	b570      	push	{r4, r5, r6, lr}
  404c32:	4605      	mov	r5, r0
  404c34:	460c      	mov	r4, r1
  404c36:	b108      	cbz	r0, 404c3c <_fclose_r+0x10>
  404c38:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c3a:	b37b      	cbz	r3, 404c9c <_fclose_r+0x70>
  404c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c40:	b90b      	cbnz	r3, 404c46 <_fclose_r+0x1a>
  404c42:	2000      	movs	r0, #0
  404c44:	bd70      	pop	{r4, r5, r6, pc}
  404c46:	4621      	mov	r1, r4
  404c48:	4628      	mov	r0, r5
  404c4a:	f7fe fb05 	bl	403258 <__sflush_r>
  404c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404c50:	4606      	mov	r6, r0
  404c52:	b133      	cbz	r3, 404c62 <_fclose_r+0x36>
  404c54:	69e1      	ldr	r1, [r4, #28]
  404c56:	4628      	mov	r0, r5
  404c58:	4798      	blx	r3
  404c5a:	2800      	cmp	r0, #0
  404c5c:	bfb8      	it	lt
  404c5e:	f04f 36ff 	movlt.w	r6, #4294967295
  404c62:	89a3      	ldrh	r3, [r4, #12]
  404c64:	061b      	lsls	r3, r3, #24
  404c66:	d41c      	bmi.n	404ca2 <_fclose_r+0x76>
  404c68:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404c6a:	b141      	cbz	r1, 404c7e <_fclose_r+0x52>
  404c6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404c70:	4299      	cmp	r1, r3
  404c72:	d002      	beq.n	404c7a <_fclose_r+0x4e>
  404c74:	4628      	mov	r0, r5
  404c76:	f7fe fcf1 	bl	40365c <_free_r>
  404c7a:	2300      	movs	r3, #0
  404c7c:	6323      	str	r3, [r4, #48]	; 0x30
  404c7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404c80:	b121      	cbz	r1, 404c8c <_fclose_r+0x60>
  404c82:	4628      	mov	r0, r5
  404c84:	f7fe fcea 	bl	40365c <_free_r>
  404c88:	2300      	movs	r3, #0
  404c8a:	6463      	str	r3, [r4, #68]	; 0x44
  404c8c:	f7fe fc22 	bl	4034d4 <__sfp_lock_acquire>
  404c90:	2300      	movs	r3, #0
  404c92:	81a3      	strh	r3, [r4, #12]
  404c94:	f7fe fc20 	bl	4034d8 <__sfp_lock_release>
  404c98:	4630      	mov	r0, r6
  404c9a:	bd70      	pop	{r4, r5, r6, pc}
  404c9c:	f7fe fc14 	bl	4034c8 <__sinit>
  404ca0:	e7cc      	b.n	404c3c <_fclose_r+0x10>
  404ca2:	6921      	ldr	r1, [r4, #16]
  404ca4:	4628      	mov	r0, r5
  404ca6:	f7fe fcd9 	bl	40365c <_free_r>
  404caa:	e7dd      	b.n	404c68 <_fclose_r+0x3c>
  404cac:	2000      	movs	r0, #0
  404cae:	4770      	bx	lr

00404cb0 <_fstat_r>:
  404cb0:	b538      	push	{r3, r4, r5, lr}
  404cb2:	460b      	mov	r3, r1
  404cb4:	4c07      	ldr	r4, [pc, #28]	; (404cd4 <_fstat_r+0x24>)
  404cb6:	4605      	mov	r5, r0
  404cb8:	4611      	mov	r1, r2
  404cba:	4618      	mov	r0, r3
  404cbc:	2300      	movs	r3, #0
  404cbe:	6023      	str	r3, [r4, #0]
  404cc0:	f7fc fe88 	bl	4019d4 <_fstat>
  404cc4:	1c43      	adds	r3, r0, #1
  404cc6:	d000      	beq.n	404cca <_fstat_r+0x1a>
  404cc8:	bd38      	pop	{r3, r4, r5, pc}
  404cca:	6823      	ldr	r3, [r4, #0]
  404ccc:	2b00      	cmp	r3, #0
  404cce:	d0fb      	beq.n	404cc8 <_fstat_r+0x18>
  404cd0:	602b      	str	r3, [r5, #0]
  404cd2:	bd38      	pop	{r3, r4, r5, pc}
  404cd4:	20001138 	.word	0x20001138

00404cd8 <_isatty_r>:
  404cd8:	b538      	push	{r3, r4, r5, lr}
  404cda:	4c07      	ldr	r4, [pc, #28]	; (404cf8 <_isatty_r+0x20>)
  404cdc:	2300      	movs	r3, #0
  404cde:	4605      	mov	r5, r0
  404ce0:	4608      	mov	r0, r1
  404ce2:	6023      	str	r3, [r4, #0]
  404ce4:	f7fc fe86 	bl	4019f4 <_isatty>
  404ce8:	1c43      	adds	r3, r0, #1
  404cea:	d000      	beq.n	404cee <_isatty_r+0x16>
  404cec:	bd38      	pop	{r3, r4, r5, pc}
  404cee:	6823      	ldr	r3, [r4, #0]
  404cf0:	2b00      	cmp	r3, #0
  404cf2:	d0fb      	beq.n	404cec <_isatty_r+0x14>
  404cf4:	602b      	str	r3, [r5, #0]
  404cf6:	bd38      	pop	{r3, r4, r5, pc}
  404cf8:	20001138 	.word	0x20001138

00404cfc <_lseek_r>:
  404cfc:	b570      	push	{r4, r5, r6, lr}
  404cfe:	460d      	mov	r5, r1
  404d00:	4c08      	ldr	r4, [pc, #32]	; (404d24 <_lseek_r+0x28>)
  404d02:	4611      	mov	r1, r2
  404d04:	4606      	mov	r6, r0
  404d06:	461a      	mov	r2, r3
  404d08:	4628      	mov	r0, r5
  404d0a:	2300      	movs	r3, #0
  404d0c:	6023      	str	r3, [r4, #0]
  404d0e:	f7fc fe7b 	bl	401a08 <_lseek>
  404d12:	1c43      	adds	r3, r0, #1
  404d14:	d000      	beq.n	404d18 <_lseek_r+0x1c>
  404d16:	bd70      	pop	{r4, r5, r6, pc}
  404d18:	6823      	ldr	r3, [r4, #0]
  404d1a:	2b00      	cmp	r3, #0
  404d1c:	d0fb      	beq.n	404d16 <_lseek_r+0x1a>
  404d1e:	6033      	str	r3, [r6, #0]
  404d20:	bd70      	pop	{r4, r5, r6, pc}
  404d22:	bf00      	nop
  404d24:	20001138 	.word	0x20001138

00404d28 <_read_r>:
  404d28:	b570      	push	{r4, r5, r6, lr}
  404d2a:	460d      	mov	r5, r1
  404d2c:	4c08      	ldr	r4, [pc, #32]	; (404d50 <_read_r+0x28>)
  404d2e:	4611      	mov	r1, r2
  404d30:	4606      	mov	r6, r0
  404d32:	461a      	mov	r2, r3
  404d34:	4628      	mov	r0, r5
  404d36:	2300      	movs	r3, #0
  404d38:	6023      	str	r3, [r4, #0]
  404d3a:	f7fb fb5b 	bl	4003f4 <_read>
  404d3e:	1c43      	adds	r3, r0, #1
  404d40:	d000      	beq.n	404d44 <_read_r+0x1c>
  404d42:	bd70      	pop	{r4, r5, r6, pc}
  404d44:	6823      	ldr	r3, [r4, #0]
  404d46:	2b00      	cmp	r3, #0
  404d48:	d0fb      	beq.n	404d42 <_read_r+0x1a>
  404d4a:	6033      	str	r3, [r6, #0]
  404d4c:	bd70      	pop	{r4, r5, r6, pc}
  404d4e:	bf00      	nop
  404d50:	20001138 	.word	0x20001138

00404d54 <__aeabi_uldivmod>:
  404d54:	b953      	cbnz	r3, 404d6c <__aeabi_uldivmod+0x18>
  404d56:	b94a      	cbnz	r2, 404d6c <__aeabi_uldivmod+0x18>
  404d58:	2900      	cmp	r1, #0
  404d5a:	bf08      	it	eq
  404d5c:	2800      	cmpeq	r0, #0
  404d5e:	bf1c      	itt	ne
  404d60:	f04f 31ff 	movne.w	r1, #4294967295
  404d64:	f04f 30ff 	movne.w	r0, #4294967295
  404d68:	f000 b97e 	b.w	405068 <__aeabi_idiv0>
  404d6c:	f1ad 0c08 	sub.w	ip, sp, #8
  404d70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404d74:	f000 f806 	bl	404d84 <__udivmoddi4>
  404d78:	f8dd e004 	ldr.w	lr, [sp, #4]
  404d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404d80:	b004      	add	sp, #16
  404d82:	4770      	bx	lr

00404d84 <__udivmoddi4>:
  404d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404d88:	468c      	mov	ip, r1
  404d8a:	460e      	mov	r6, r1
  404d8c:	4604      	mov	r4, r0
  404d8e:	9d08      	ldr	r5, [sp, #32]
  404d90:	2b00      	cmp	r3, #0
  404d92:	d150      	bne.n	404e36 <__udivmoddi4+0xb2>
  404d94:	428a      	cmp	r2, r1
  404d96:	4617      	mov	r7, r2
  404d98:	d96c      	bls.n	404e74 <__udivmoddi4+0xf0>
  404d9a:	fab2 fe82 	clz	lr, r2
  404d9e:	f1be 0f00 	cmp.w	lr, #0
  404da2:	d00b      	beq.n	404dbc <__udivmoddi4+0x38>
  404da4:	f1ce 0420 	rsb	r4, lr, #32
  404da8:	fa20 f404 	lsr.w	r4, r0, r4
  404dac:	fa01 f60e 	lsl.w	r6, r1, lr
  404db0:	ea44 0c06 	orr.w	ip, r4, r6
  404db4:	fa02 f70e 	lsl.w	r7, r2, lr
  404db8:	fa00 f40e 	lsl.w	r4, r0, lr
  404dbc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  404dc0:	0c22      	lsrs	r2, r4, #16
  404dc2:	fbbc f0f9 	udiv	r0, ip, r9
  404dc6:	fa1f f887 	uxth.w	r8, r7
  404dca:	fb09 c610 	mls	r6, r9, r0, ip
  404dce:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  404dd2:	fb00 f308 	mul.w	r3, r0, r8
  404dd6:	42b3      	cmp	r3, r6
  404dd8:	d909      	bls.n	404dee <__udivmoddi4+0x6a>
  404dda:	19f6      	adds	r6, r6, r7
  404ddc:	f100 32ff 	add.w	r2, r0, #4294967295
  404de0:	f080 8122 	bcs.w	405028 <__udivmoddi4+0x2a4>
  404de4:	42b3      	cmp	r3, r6
  404de6:	f240 811f 	bls.w	405028 <__udivmoddi4+0x2a4>
  404dea:	3802      	subs	r0, #2
  404dec:	443e      	add	r6, r7
  404dee:	1af6      	subs	r6, r6, r3
  404df0:	b2a2      	uxth	r2, r4
  404df2:	fbb6 f3f9 	udiv	r3, r6, r9
  404df6:	fb09 6613 	mls	r6, r9, r3, r6
  404dfa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  404dfe:	fb03 f808 	mul.w	r8, r3, r8
  404e02:	45a0      	cmp	r8, r4
  404e04:	d909      	bls.n	404e1a <__udivmoddi4+0x96>
  404e06:	19e4      	adds	r4, r4, r7
  404e08:	f103 32ff 	add.w	r2, r3, #4294967295
  404e0c:	f080 810a 	bcs.w	405024 <__udivmoddi4+0x2a0>
  404e10:	45a0      	cmp	r8, r4
  404e12:	f240 8107 	bls.w	405024 <__udivmoddi4+0x2a0>
  404e16:	3b02      	subs	r3, #2
  404e18:	443c      	add	r4, r7
  404e1a:	ebc8 0404 	rsb	r4, r8, r4
  404e1e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  404e22:	2100      	movs	r1, #0
  404e24:	2d00      	cmp	r5, #0
  404e26:	d062      	beq.n	404eee <__udivmoddi4+0x16a>
  404e28:	fa24 f40e 	lsr.w	r4, r4, lr
  404e2c:	2300      	movs	r3, #0
  404e2e:	602c      	str	r4, [r5, #0]
  404e30:	606b      	str	r3, [r5, #4]
  404e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e36:	428b      	cmp	r3, r1
  404e38:	d907      	bls.n	404e4a <__udivmoddi4+0xc6>
  404e3a:	2d00      	cmp	r5, #0
  404e3c:	d055      	beq.n	404eea <__udivmoddi4+0x166>
  404e3e:	2100      	movs	r1, #0
  404e40:	e885 0041 	stmia.w	r5, {r0, r6}
  404e44:	4608      	mov	r0, r1
  404e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e4a:	fab3 f183 	clz	r1, r3
  404e4e:	2900      	cmp	r1, #0
  404e50:	f040 8090 	bne.w	404f74 <__udivmoddi4+0x1f0>
  404e54:	42b3      	cmp	r3, r6
  404e56:	d302      	bcc.n	404e5e <__udivmoddi4+0xda>
  404e58:	4282      	cmp	r2, r0
  404e5a:	f200 80f8 	bhi.w	40504e <__udivmoddi4+0x2ca>
  404e5e:	1a84      	subs	r4, r0, r2
  404e60:	eb66 0603 	sbc.w	r6, r6, r3
  404e64:	2001      	movs	r0, #1
  404e66:	46b4      	mov	ip, r6
  404e68:	2d00      	cmp	r5, #0
  404e6a:	d040      	beq.n	404eee <__udivmoddi4+0x16a>
  404e6c:	e885 1010 	stmia.w	r5, {r4, ip}
  404e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e74:	b912      	cbnz	r2, 404e7c <__udivmoddi4+0xf8>
  404e76:	2701      	movs	r7, #1
  404e78:	fbb7 f7f2 	udiv	r7, r7, r2
  404e7c:	fab7 fe87 	clz	lr, r7
  404e80:	f1be 0f00 	cmp.w	lr, #0
  404e84:	d135      	bne.n	404ef2 <__udivmoddi4+0x16e>
  404e86:	1bf3      	subs	r3, r6, r7
  404e88:	ea4f 4817 	mov.w	r8, r7, lsr #16
  404e8c:	fa1f fc87 	uxth.w	ip, r7
  404e90:	2101      	movs	r1, #1
  404e92:	fbb3 f0f8 	udiv	r0, r3, r8
  404e96:	0c22      	lsrs	r2, r4, #16
  404e98:	fb08 3610 	mls	r6, r8, r0, r3
  404e9c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  404ea0:	fb0c f300 	mul.w	r3, ip, r0
  404ea4:	42b3      	cmp	r3, r6
  404ea6:	d907      	bls.n	404eb8 <__udivmoddi4+0x134>
  404ea8:	19f6      	adds	r6, r6, r7
  404eaa:	f100 32ff 	add.w	r2, r0, #4294967295
  404eae:	d202      	bcs.n	404eb6 <__udivmoddi4+0x132>
  404eb0:	42b3      	cmp	r3, r6
  404eb2:	f200 80ce 	bhi.w	405052 <__udivmoddi4+0x2ce>
  404eb6:	4610      	mov	r0, r2
  404eb8:	1af6      	subs	r6, r6, r3
  404eba:	b2a2      	uxth	r2, r4
  404ebc:	fbb6 f3f8 	udiv	r3, r6, r8
  404ec0:	fb08 6613 	mls	r6, r8, r3, r6
  404ec4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  404ec8:	fb0c fc03 	mul.w	ip, ip, r3
  404ecc:	45a4      	cmp	ip, r4
  404ece:	d907      	bls.n	404ee0 <__udivmoddi4+0x15c>
  404ed0:	19e4      	adds	r4, r4, r7
  404ed2:	f103 32ff 	add.w	r2, r3, #4294967295
  404ed6:	d202      	bcs.n	404ede <__udivmoddi4+0x15a>
  404ed8:	45a4      	cmp	ip, r4
  404eda:	f200 80b5 	bhi.w	405048 <__udivmoddi4+0x2c4>
  404ede:	4613      	mov	r3, r2
  404ee0:	ebcc 0404 	rsb	r4, ip, r4
  404ee4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  404ee8:	e79c      	b.n	404e24 <__udivmoddi4+0xa0>
  404eea:	4629      	mov	r1, r5
  404eec:	4628      	mov	r0, r5
  404eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404ef2:	f1ce 0120 	rsb	r1, lr, #32
  404ef6:	fa06 f30e 	lsl.w	r3, r6, lr
  404efa:	fa07 f70e 	lsl.w	r7, r7, lr
  404efe:	fa20 f901 	lsr.w	r9, r0, r1
  404f02:	ea4f 4817 	mov.w	r8, r7, lsr #16
  404f06:	40ce      	lsrs	r6, r1
  404f08:	ea49 0903 	orr.w	r9, r9, r3
  404f0c:	fbb6 faf8 	udiv	sl, r6, r8
  404f10:	ea4f 4419 	mov.w	r4, r9, lsr #16
  404f14:	fb08 661a 	mls	r6, r8, sl, r6
  404f18:	fa1f fc87 	uxth.w	ip, r7
  404f1c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  404f20:	fb0a f20c 	mul.w	r2, sl, ip
  404f24:	429a      	cmp	r2, r3
  404f26:	fa00 f40e 	lsl.w	r4, r0, lr
  404f2a:	d90a      	bls.n	404f42 <__udivmoddi4+0x1be>
  404f2c:	19db      	adds	r3, r3, r7
  404f2e:	f10a 31ff 	add.w	r1, sl, #4294967295
  404f32:	f080 8087 	bcs.w	405044 <__udivmoddi4+0x2c0>
  404f36:	429a      	cmp	r2, r3
  404f38:	f240 8084 	bls.w	405044 <__udivmoddi4+0x2c0>
  404f3c:	f1aa 0a02 	sub.w	sl, sl, #2
  404f40:	443b      	add	r3, r7
  404f42:	1a9b      	subs	r3, r3, r2
  404f44:	fa1f f989 	uxth.w	r9, r9
  404f48:	fbb3 f1f8 	udiv	r1, r3, r8
  404f4c:	fb08 3311 	mls	r3, r8, r1, r3
  404f50:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  404f54:	fb01 f60c 	mul.w	r6, r1, ip
  404f58:	429e      	cmp	r6, r3
  404f5a:	d907      	bls.n	404f6c <__udivmoddi4+0x1e8>
  404f5c:	19db      	adds	r3, r3, r7
  404f5e:	f101 32ff 	add.w	r2, r1, #4294967295
  404f62:	d26b      	bcs.n	40503c <__udivmoddi4+0x2b8>
  404f64:	429e      	cmp	r6, r3
  404f66:	d969      	bls.n	40503c <__udivmoddi4+0x2b8>
  404f68:	3902      	subs	r1, #2
  404f6a:	443b      	add	r3, r7
  404f6c:	1b9b      	subs	r3, r3, r6
  404f6e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  404f72:	e78e      	b.n	404e92 <__udivmoddi4+0x10e>
  404f74:	f1c1 0e20 	rsb	lr, r1, #32
  404f78:	fa22 f40e 	lsr.w	r4, r2, lr
  404f7c:	408b      	lsls	r3, r1
  404f7e:	4323      	orrs	r3, r4
  404f80:	fa20 f70e 	lsr.w	r7, r0, lr
  404f84:	fa06 f401 	lsl.w	r4, r6, r1
  404f88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404f8c:	fa26 f60e 	lsr.w	r6, r6, lr
  404f90:	433c      	orrs	r4, r7
  404f92:	fbb6 f9fc 	udiv	r9, r6, ip
  404f96:	0c27      	lsrs	r7, r4, #16
  404f98:	fb0c 6619 	mls	r6, ip, r9, r6
  404f9c:	fa1f f883 	uxth.w	r8, r3
  404fa0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  404fa4:	fb09 f708 	mul.w	r7, r9, r8
  404fa8:	42b7      	cmp	r7, r6
  404faa:	fa02 f201 	lsl.w	r2, r2, r1
  404fae:	fa00 fa01 	lsl.w	sl, r0, r1
  404fb2:	d908      	bls.n	404fc6 <__udivmoddi4+0x242>
  404fb4:	18f6      	adds	r6, r6, r3
  404fb6:	f109 30ff 	add.w	r0, r9, #4294967295
  404fba:	d241      	bcs.n	405040 <__udivmoddi4+0x2bc>
  404fbc:	42b7      	cmp	r7, r6
  404fbe:	d93f      	bls.n	405040 <__udivmoddi4+0x2bc>
  404fc0:	f1a9 0902 	sub.w	r9, r9, #2
  404fc4:	441e      	add	r6, r3
  404fc6:	1bf6      	subs	r6, r6, r7
  404fc8:	b2a0      	uxth	r0, r4
  404fca:	fbb6 f4fc 	udiv	r4, r6, ip
  404fce:	fb0c 6614 	mls	r6, ip, r4, r6
  404fd2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  404fd6:	fb04 f808 	mul.w	r8, r4, r8
  404fda:	45b8      	cmp	r8, r7
  404fdc:	d907      	bls.n	404fee <__udivmoddi4+0x26a>
  404fde:	18ff      	adds	r7, r7, r3
  404fe0:	f104 30ff 	add.w	r0, r4, #4294967295
  404fe4:	d228      	bcs.n	405038 <__udivmoddi4+0x2b4>
  404fe6:	45b8      	cmp	r8, r7
  404fe8:	d926      	bls.n	405038 <__udivmoddi4+0x2b4>
  404fea:	3c02      	subs	r4, #2
  404fec:	441f      	add	r7, r3
  404fee:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  404ff2:	ebc8 0707 	rsb	r7, r8, r7
  404ff6:	fba0 8902 	umull	r8, r9, r0, r2
  404ffa:	454f      	cmp	r7, r9
  404ffc:	4644      	mov	r4, r8
  404ffe:	464e      	mov	r6, r9
  405000:	d314      	bcc.n	40502c <__udivmoddi4+0x2a8>
  405002:	d029      	beq.n	405058 <__udivmoddi4+0x2d4>
  405004:	b365      	cbz	r5, 405060 <__udivmoddi4+0x2dc>
  405006:	ebba 0304 	subs.w	r3, sl, r4
  40500a:	eb67 0706 	sbc.w	r7, r7, r6
  40500e:	fa07 fe0e 	lsl.w	lr, r7, lr
  405012:	40cb      	lsrs	r3, r1
  405014:	40cf      	lsrs	r7, r1
  405016:	ea4e 0303 	orr.w	r3, lr, r3
  40501a:	e885 0088 	stmia.w	r5, {r3, r7}
  40501e:	2100      	movs	r1, #0
  405020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405024:	4613      	mov	r3, r2
  405026:	e6f8      	b.n	404e1a <__udivmoddi4+0x96>
  405028:	4610      	mov	r0, r2
  40502a:	e6e0      	b.n	404dee <__udivmoddi4+0x6a>
  40502c:	ebb8 0402 	subs.w	r4, r8, r2
  405030:	eb69 0603 	sbc.w	r6, r9, r3
  405034:	3801      	subs	r0, #1
  405036:	e7e5      	b.n	405004 <__udivmoddi4+0x280>
  405038:	4604      	mov	r4, r0
  40503a:	e7d8      	b.n	404fee <__udivmoddi4+0x26a>
  40503c:	4611      	mov	r1, r2
  40503e:	e795      	b.n	404f6c <__udivmoddi4+0x1e8>
  405040:	4681      	mov	r9, r0
  405042:	e7c0      	b.n	404fc6 <__udivmoddi4+0x242>
  405044:	468a      	mov	sl, r1
  405046:	e77c      	b.n	404f42 <__udivmoddi4+0x1be>
  405048:	3b02      	subs	r3, #2
  40504a:	443c      	add	r4, r7
  40504c:	e748      	b.n	404ee0 <__udivmoddi4+0x15c>
  40504e:	4608      	mov	r0, r1
  405050:	e70a      	b.n	404e68 <__udivmoddi4+0xe4>
  405052:	3802      	subs	r0, #2
  405054:	443e      	add	r6, r7
  405056:	e72f      	b.n	404eb8 <__udivmoddi4+0x134>
  405058:	45c2      	cmp	sl, r8
  40505a:	d3e7      	bcc.n	40502c <__udivmoddi4+0x2a8>
  40505c:	463e      	mov	r6, r7
  40505e:	e7d1      	b.n	405004 <__udivmoddi4+0x280>
  405060:	4629      	mov	r1, r5
  405062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405066:	bf00      	nop

00405068 <__aeabi_idiv0>:
  405068:	4770      	bx	lr
  40506a:	bf00      	nop
  40506c:	00002580 	.word	0x00002580
  405070:	000000c0 	.word	0x000000c0
  405074:	00000800 	.word	0x00000800
	...
  405084:	0d545352 	.word	0x0d545352
  405088:	0000000a 	.word	0x0000000a
  40508c:	20747248 	.word	0x20747248
  405090:	6425203d 	.word	0x6425203d
  405094:	00000a0d 	.word	0x00000a0d
  405098:	32307053 	.word	0x32307053
  40509c:	25203d20 	.word	0x25203d20
  4050a0:	000a0d64 	.word	0x000a0d64
  4050a4:	00000043 	.word	0x00000043

004050a8 <_global_impure_ptr>:
  4050a8:	20000008                                ... 

004050ac <zeroes.6993>:
  4050ac:	30303030 30303030 30303030 30303030     0000000000000000
  4050bc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4050cc:	00000000 33323130 37363534 62613938     ....0123456789ab
  4050dc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

004050ec <blanks.6992>:
  4050ec:	20202020 20202020 20202020 20202020                     

004050fc <_init>:
  4050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4050fe:	bf00      	nop
  405100:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405102:	bc08      	pop	{r3}
  405104:	469e      	mov	lr, r3
  405106:	4770      	bx	lr

00405108 <__init_array_start>:
  405108:	00403239 	.word	0x00403239

0040510c <__frame_dummy_init_array_entry>:
  40510c:	004000f1                                ..@.

00405110 <_fini>:
  405110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405112:	bf00      	nop
  405114:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405116:	bc08      	pop	{r3}
  405118:	469e      	mov	lr, r3
  40511a:	4770      	bx	lr

0040511c <__fini_array_start>:
  40511c:	004000cd 	.word	0x004000cd
