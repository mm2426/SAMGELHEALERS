
SAMGELHEALERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000363c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040363c  0040363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000084c  20000000  00403644  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000470  2000084c  00403e90  0002084c  2**2
                  ALLOC
  4 .stack        00003004  20000cbc  00404300  0002084c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020876  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000b866  00000000  00000000  000208cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cf9  00000000  00000000  0002c135  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006aca  00000000  00000000  0002de2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ba8  00000000  00000000  000348f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a98  00000000  00000000  000354a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000057cb  00000000  00000000  00035f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c9c9  00000000  00000000  0003b703  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004c858  00000000  00000000  000480cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003888  00000000  00000000  00094924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003cc0 	.word	0x20003cc0
  400004:	00401a89 	.word	0x00401a89
  400008:	00401b51 	.word	0x00401b51
  40000c:	00401b51 	.word	0x00401b51
  400010:	00401b51 	.word	0x00401b51
  400014:	00401b51 	.word	0x00401b51
  400018:	00401b51 	.word	0x00401b51
	...
  40002c:	00401b51 	.word	0x00401b51
  400030:	00401b51 	.word	0x00401b51
  400034:	00000000 	.word	0x00000000
  400038:	00401b51 	.word	0x00401b51
  40003c:	00402115 	.word	0x00402115
  400040:	00401b51 	.word	0x00401b51
  400044:	00401b51 	.word	0x00401b51
  400048:	00401b51 	.word	0x00401b51
  40004c:	00401b51 	.word	0x00401b51
  400050:	00401b51 	.word	0x00401b51
  400054:	00401b51 	.word	0x00401b51
  400058:	00401b51 	.word	0x00401b51
  40005c:	00000000 	.word	0x00000000
  400060:	00401b51 	.word	0x00401b51
  400064:	00401b51 	.word	0x00401b51
  400068:	00000000 	.word	0x00000000
  40006c:	0040075d 	.word	0x0040075d
  400070:	00400775 	.word	0x00400775
  400074:	00000000 	.word	0x00000000
  400078:	00401b51 	.word	0x00401b51
  40007c:	00401b51 	.word	0x00401b51
	...
  400088:	00401b51 	.word	0x00401b51
  40008c:	00401b51 	.word	0x00401b51
  400090:	00401b51 	.word	0x00401b51
  400094:	00401b51 	.word	0x00401b51
  400098:	00401b51 	.word	0x00401b51
  40009c:	00401b51 	.word	0x00401b51
  4000a0:	00401b51 	.word	0x00401b51
  4000a4:	00401b51 	.word	0x00401b51
	...
  4000b4:	00401b51 	.word	0x00401b51
  4000b8:	00401b51 	.word	0x00401b51
  4000bc:	00401b51 	.word	0x00401b51
  4000c0:	00401b51 	.word	0x00401b51
  4000c4:	00401b51 	.word	0x00401b51
  4000c8:	00401b51 	.word	0x00401b51

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000084c 	.word	0x2000084c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403644 	.word	0x00403644

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000850 	.word	0x20000850
  40011c:	00403644 	.word	0x00403644
  400120:	00403644 	.word	0x00403644
  400124:	00000000 	.word	0x00000000

00400128 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400128:	b480      	push	{r7}
  40012a:	b083      	sub	sp, #12
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	2b07      	cmp	r3, #7
  400134:	d825      	bhi.n	400182 <osc_get_rate+0x5a>
  400136:	a201      	add	r2, pc, #4	; (adr r2, 40013c <osc_get_rate+0x14>)
  400138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40013c:	0040015d 	.word	0x0040015d
  400140:	00400163 	.word	0x00400163
  400144:	00400169 	.word	0x00400169
  400148:	0040016f 	.word	0x0040016f
  40014c:	00400173 	.word	0x00400173
  400150:	00400177 	.word	0x00400177
  400154:	0040017b 	.word	0x0040017b
  400158:	0040017f 	.word	0x0040017f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40015c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400160:	e010      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400166:	e00d      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40016c:	e00a      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40016e:	4b08      	ldr	r3, [pc, #32]	; (400190 <osc_get_rate+0x68>)
  400170:	e008      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400172:	4b08      	ldr	r3, [pc, #32]	; (400194 <osc_get_rate+0x6c>)
  400174:	e006      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400176:	4b08      	ldr	r3, [pc, #32]	; (400198 <osc_get_rate+0x70>)
  400178:	e004      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <osc_get_rate+0x70>)
  40017c:	e002      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40017e:	4b06      	ldr	r3, [pc, #24]	; (400198 <osc_get_rate+0x70>)
  400180:	e000      	b.n	400184 <osc_get_rate+0x5c>
	}

	return 0;
  400182:	2300      	movs	r3, #0
}
  400184:	4618      	mov	r0, r3
  400186:	370c      	adds	r7, #12
  400188:	46bd      	mov	sp, r7
  40018a:	bc80      	pop	{r7}
  40018c:	4770      	bx	lr
  40018e:	bf00      	nop
  400190:	003d0900 	.word	0x003d0900
  400194:	007a1200 	.word	0x007a1200
  400198:	00b71b00 	.word	0x00b71b00

0040019c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001a0:	2006      	movs	r0, #6
  4001a2:	4b04      	ldr	r3, [pc, #16]	; (4001b4 <sysclk_get_main_hz+0x18>)
  4001a4:	4798      	blx	r3
  4001a6:	4602      	mov	r2, r0
  4001a8:	4613      	mov	r3, r2
  4001aa:	009b      	lsls	r3, r3, #2
  4001ac:	4413      	add	r3, r2
  4001ae:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001b0:	4618      	mov	r0, r3
  4001b2:	bd80      	pop	{r7, pc}
  4001b4:	00400129 	.word	0x00400129

004001b8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4001b8:	b580      	push	{r7, lr}
  4001ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4001bc:	4b02      	ldr	r3, [pc, #8]	; (4001c8 <sysclk_get_peripheral_hz+0x10>)
  4001be:	4798      	blx	r3
  4001c0:	4603      	mov	r3, r0
  4001c2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4001c4:	4618      	mov	r0, r3
  4001c6:	bd80      	pop	{r7, pc}
  4001c8:	0040019d 	.word	0x0040019d

004001cc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4001cc:	b580      	push	{r7, lr}
  4001ce:	b082      	sub	sp, #8
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4001d4:	6878      	ldr	r0, [r7, #4]
  4001d6:	4b03      	ldr	r3, [pc, #12]	; (4001e4 <sysclk_enable_peripheral_clock+0x18>)
  4001d8:	4798      	blx	r3
}
  4001da:	bf00      	nop
  4001dc:	3708      	adds	r7, #8
  4001de:	46bd      	mov	sp, r7
  4001e0:	bd80      	pop	{r7, pc}
  4001e2:	bf00      	nop
  4001e4:	00401941 	.word	0x00401941

004001e8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4001e8:	b580      	push	{r7, lr}
  4001ea:	b08c      	sub	sp, #48	; 0x30
  4001ec:	af00      	add	r7, sp, #0
  4001ee:	6078      	str	r0, [r7, #4]
  4001f0:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4001f2:	4b31      	ldr	r3, [pc, #196]	; (4002b8 <usart_serial_init+0xd0>)
  4001f4:	4798      	blx	r3
  4001f6:	4603      	mov	r3, r0
  4001f8:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  4001fa:	683b      	ldr	r3, [r7, #0]
  4001fc:	681b      	ldr	r3, [r3, #0]
  4001fe:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  400200:	683b      	ldr	r3, [r7, #0]
  400202:	689b      	ldr	r3, [r3, #8]
  400204:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  400206:	683b      	ldr	r3, [r7, #0]
  400208:	681b      	ldr	r3, [r3, #0]
  40020a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40020c:	683b      	ldr	r3, [r7, #0]
  40020e:	685b      	ldr	r3, [r3, #4]
  400210:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  400212:	683b      	ldr	r3, [r7, #0]
  400214:	689b      	ldr	r3, [r3, #8]
  400216:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  400218:	683b      	ldr	r3, [r7, #0]
  40021a:	68db      	ldr	r3, [r3, #12]
  40021c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40021e:	2300      	movs	r3, #0
  400220:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400222:	687b      	ldr	r3, [r7, #4]
  400224:	4a25      	ldr	r2, [pc, #148]	; (4002bc <usart_serial_init+0xd4>)
  400226:	4293      	cmp	r3, r2
  400228:	d108      	bne.n	40023c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40022a:	2008      	movs	r0, #8
  40022c:	4b24      	ldr	r3, [pc, #144]	; (4002c0 <usart_serial_init+0xd8>)
  40022e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400230:	f107 0324 	add.w	r3, r7, #36	; 0x24
  400234:	4619      	mov	r1, r3
  400236:	6878      	ldr	r0, [r7, #4]
  400238:	4b22      	ldr	r3, [pc, #136]	; (4002c4 <usart_serial_init+0xdc>)
  40023a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	4a22      	ldr	r2, [pc, #136]	; (4002c8 <usart_serial_init+0xe0>)
  400240:	4293      	cmp	r3, r2
  400242:	d108      	bne.n	400256 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  400244:	2009      	movs	r0, #9
  400246:	4b1e      	ldr	r3, [pc, #120]	; (4002c0 <usart_serial_init+0xd8>)
  400248:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40024a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40024e:	4619      	mov	r1, r3
  400250:	6878      	ldr	r0, [r7, #4]
  400252:	4b1c      	ldr	r3, [pc, #112]	; (4002c4 <usart_serial_init+0xdc>)
  400254:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400256:	687b      	ldr	r3, [r7, #4]
  400258:	4a1c      	ldr	r2, [pc, #112]	; (4002cc <usart_serial_init+0xe4>)
  40025a:	4293      	cmp	r3, r2
  40025c:	d111      	bne.n	400282 <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40025e:	200e      	movs	r0, #14
  400260:	4b17      	ldr	r3, [pc, #92]	; (4002c0 <usart_serial_init+0xd8>)
  400262:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  400264:	4b14      	ldr	r3, [pc, #80]	; (4002b8 <usart_serial_init+0xd0>)
  400266:	4798      	blx	r3
  400268:	4602      	mov	r2, r0
  40026a:	f107 030c 	add.w	r3, r7, #12
  40026e:	4619      	mov	r1, r3
  400270:	6878      	ldr	r0, [r7, #4]
  400272:	4b17      	ldr	r3, [pc, #92]	; (4002d0 <usart_serial_init+0xe8>)
  400274:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  400276:	6878      	ldr	r0, [r7, #4]
  400278:	4b16      	ldr	r3, [pc, #88]	; (4002d4 <usart_serial_init+0xec>)
  40027a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40027c:	6878      	ldr	r0, [r7, #4]
  40027e:	4b16      	ldr	r3, [pc, #88]	; (4002d8 <usart_serial_init+0xf0>)
  400280:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400282:	687b      	ldr	r3, [r7, #4]
  400284:	4a15      	ldr	r2, [pc, #84]	; (4002dc <usart_serial_init+0xf4>)
  400286:	4293      	cmp	r3, r2
  400288:	d111      	bne.n	4002ae <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  40028a:	200f      	movs	r0, #15
  40028c:	4b0c      	ldr	r3, [pc, #48]	; (4002c0 <usart_serial_init+0xd8>)
  40028e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  400290:	4b09      	ldr	r3, [pc, #36]	; (4002b8 <usart_serial_init+0xd0>)
  400292:	4798      	blx	r3
  400294:	4602      	mov	r2, r0
  400296:	f107 030c 	add.w	r3, r7, #12
  40029a:	4619      	mov	r1, r3
  40029c:	6878      	ldr	r0, [r7, #4]
  40029e:	4b0c      	ldr	r3, [pc, #48]	; (4002d0 <usart_serial_init+0xe8>)
  4002a0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002a2:	6878      	ldr	r0, [r7, #4]
  4002a4:	4b0b      	ldr	r3, [pc, #44]	; (4002d4 <usart_serial_init+0xec>)
  4002a6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4002a8:	6878      	ldr	r0, [r7, #4]
  4002aa:	4b0b      	ldr	r3, [pc, #44]	; (4002d8 <usart_serial_init+0xf0>)
  4002ac:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4002ae:	bf00      	nop
  4002b0:	3730      	adds	r7, #48	; 0x30
  4002b2:	46bd      	mov	sp, r7
  4002b4:	bd80      	pop	{r7, pc}
  4002b6:	bf00      	nop
  4002b8:	004001b9 	.word	0x004001b9
  4002bc:	400e0600 	.word	0x400e0600
  4002c0:	004001cd 	.word	0x004001cd
  4002c4:	00400925 	.word	0x00400925
  4002c8:	400e0800 	.word	0x400e0800
  4002cc:	40024000 	.word	0x40024000
  4002d0:	00400b39 	.word	0x00400b39
  4002d4:	00400bbd 	.word	0x00400bbd
  4002d8:	00400c05 	.word	0x00400c05
  4002dc:	40028000 	.word	0x40028000

004002e0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4002e0:	b580      	push	{r7, lr}
  4002e2:	b082      	sub	sp, #8
  4002e4:	af00      	add	r7, sp, #0
  4002e6:	6078      	str	r0, [r7, #4]
  4002e8:	460b      	mov	r3, r1
  4002ea:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	4a20      	ldr	r2, [pc, #128]	; (400370 <usart_serial_putchar+0x90>)
  4002f0:	4293      	cmp	r3, r2
  4002f2:	d10a      	bne.n	40030a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002f4:	bf00      	nop
  4002f6:	78fb      	ldrb	r3, [r7, #3]
  4002f8:	4619      	mov	r1, r3
  4002fa:	6878      	ldr	r0, [r7, #4]
  4002fc:	4b1d      	ldr	r3, [pc, #116]	; (400374 <usart_serial_putchar+0x94>)
  4002fe:	4798      	blx	r3
  400300:	4603      	mov	r3, r0
  400302:	2b00      	cmp	r3, #0
  400304:	d1f7      	bne.n	4002f6 <usart_serial_putchar+0x16>
		return 1;
  400306:	2301      	movs	r3, #1
  400308:	e02d      	b.n	400366 <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40030a:	687b      	ldr	r3, [r7, #4]
  40030c:	4a1a      	ldr	r2, [pc, #104]	; (400378 <usart_serial_putchar+0x98>)
  40030e:	4293      	cmp	r3, r2
  400310:	d10a      	bne.n	400328 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  400312:	bf00      	nop
  400314:	78fb      	ldrb	r3, [r7, #3]
  400316:	4619      	mov	r1, r3
  400318:	6878      	ldr	r0, [r7, #4]
  40031a:	4b16      	ldr	r3, [pc, #88]	; (400374 <usart_serial_putchar+0x94>)
  40031c:	4798      	blx	r3
  40031e:	4603      	mov	r3, r0
  400320:	2b00      	cmp	r3, #0
  400322:	d1f7      	bne.n	400314 <usart_serial_putchar+0x34>
		return 1;
  400324:	2301      	movs	r3, #1
  400326:	e01e      	b.n	400366 <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400328:	687b      	ldr	r3, [r7, #4]
  40032a:	4a14      	ldr	r2, [pc, #80]	; (40037c <usart_serial_putchar+0x9c>)
  40032c:	4293      	cmp	r3, r2
  40032e:	d10a      	bne.n	400346 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  400330:	bf00      	nop
  400332:	78fb      	ldrb	r3, [r7, #3]
  400334:	4619      	mov	r1, r3
  400336:	6878      	ldr	r0, [r7, #4]
  400338:	4b11      	ldr	r3, [pc, #68]	; (400380 <usart_serial_putchar+0xa0>)
  40033a:	4798      	blx	r3
  40033c:	4603      	mov	r3, r0
  40033e:	2b00      	cmp	r3, #0
  400340:	d1f7      	bne.n	400332 <usart_serial_putchar+0x52>
		return 1;
  400342:	2301      	movs	r3, #1
  400344:	e00f      	b.n	400366 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400346:	687b      	ldr	r3, [r7, #4]
  400348:	4a0e      	ldr	r2, [pc, #56]	; (400384 <usart_serial_putchar+0xa4>)
  40034a:	4293      	cmp	r3, r2
  40034c:	d10a      	bne.n	400364 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  40034e:	bf00      	nop
  400350:	78fb      	ldrb	r3, [r7, #3]
  400352:	4619      	mov	r1, r3
  400354:	6878      	ldr	r0, [r7, #4]
  400356:	4b0a      	ldr	r3, [pc, #40]	; (400380 <usart_serial_putchar+0xa0>)
  400358:	4798      	blx	r3
  40035a:	4603      	mov	r3, r0
  40035c:	2b00      	cmp	r3, #0
  40035e:	d1f7      	bne.n	400350 <usart_serial_putchar+0x70>
		return 1;
  400360:	2301      	movs	r3, #1
  400362:	e000      	b.n	400366 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400364:	2300      	movs	r3, #0
}
  400366:	4618      	mov	r0, r3
  400368:	3708      	adds	r7, #8
  40036a:	46bd      	mov	sp, r7
  40036c:	bd80      	pop	{r7, pc}
  40036e:	bf00      	nop
  400370:	400e0600 	.word	0x400e0600
  400374:	004009b5 	.word	0x004009b5
  400378:	400e0800 	.word	0x400e0800
  40037c:	40024000 	.word	0x40024000
  400380:	00400ca1 	.word	0x00400ca1
  400384:	40028000 	.word	0x40028000

00400388 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400388:	b580      	push	{r7, lr}
  40038a:	b084      	sub	sp, #16
  40038c:	af00      	add	r7, sp, #0
  40038e:	6078      	str	r0, [r7, #4]
  400390:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  400392:	2300      	movs	r3, #0
  400394:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400396:	687b      	ldr	r3, [r7, #4]
  400398:	4a1f      	ldr	r2, [pc, #124]	; (400418 <usart_serial_getchar+0x90>)
  40039a:	4293      	cmp	r3, r2
  40039c:	d107      	bne.n	4003ae <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  40039e:	bf00      	nop
  4003a0:	6839      	ldr	r1, [r7, #0]
  4003a2:	6878      	ldr	r0, [r7, #4]
  4003a4:	4b1d      	ldr	r3, [pc, #116]	; (40041c <usart_serial_getchar+0x94>)
  4003a6:	4798      	blx	r3
  4003a8:	4603      	mov	r3, r0
  4003aa:	2b00      	cmp	r3, #0
  4003ac:	d1f8      	bne.n	4003a0 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4003ae:	687b      	ldr	r3, [r7, #4]
  4003b0:	4a1b      	ldr	r2, [pc, #108]	; (400420 <usart_serial_getchar+0x98>)
  4003b2:	4293      	cmp	r3, r2
  4003b4:	d107      	bne.n	4003c6 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4003b6:	bf00      	nop
  4003b8:	6839      	ldr	r1, [r7, #0]
  4003ba:	6878      	ldr	r0, [r7, #4]
  4003bc:	4b17      	ldr	r3, [pc, #92]	; (40041c <usart_serial_getchar+0x94>)
  4003be:	4798      	blx	r3
  4003c0:	4603      	mov	r3, r0
  4003c2:	2b00      	cmp	r3, #0
  4003c4:	d1f8      	bne.n	4003b8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	4a16      	ldr	r2, [pc, #88]	; (400424 <usart_serial_getchar+0x9c>)
  4003ca:	4293      	cmp	r3, r2
  4003cc:	d10d      	bne.n	4003ea <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  4003ce:	bf00      	nop
  4003d0:	f107 030c 	add.w	r3, r7, #12
  4003d4:	4619      	mov	r1, r3
  4003d6:	6878      	ldr	r0, [r7, #4]
  4003d8:	4b13      	ldr	r3, [pc, #76]	; (400428 <usart_serial_getchar+0xa0>)
  4003da:	4798      	blx	r3
  4003dc:	4603      	mov	r3, r0
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d1f6      	bne.n	4003d0 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  4003e2:	68fb      	ldr	r3, [r7, #12]
  4003e4:	b2da      	uxtb	r2, r3
  4003e6:	683b      	ldr	r3, [r7, #0]
  4003e8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4003ea:	687b      	ldr	r3, [r7, #4]
  4003ec:	4a0f      	ldr	r2, [pc, #60]	; (40042c <usart_serial_getchar+0xa4>)
  4003ee:	4293      	cmp	r3, r2
  4003f0:	d10d      	bne.n	40040e <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  4003f2:	bf00      	nop
  4003f4:	f107 030c 	add.w	r3, r7, #12
  4003f8:	4619      	mov	r1, r3
  4003fa:	6878      	ldr	r0, [r7, #4]
  4003fc:	4b0a      	ldr	r3, [pc, #40]	; (400428 <usart_serial_getchar+0xa0>)
  4003fe:	4798      	blx	r3
  400400:	4603      	mov	r3, r0
  400402:	2b00      	cmp	r3, #0
  400404:	d1f6      	bne.n	4003f4 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400406:	68fb      	ldr	r3, [r7, #12]
  400408:	b2da      	uxtb	r2, r3
  40040a:	683b      	ldr	r3, [r7, #0]
  40040c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40040e:	bf00      	nop
  400410:	3710      	adds	r7, #16
  400412:	46bd      	mov	sp, r7
  400414:	bd80      	pop	{r7, pc}
  400416:	bf00      	nop
  400418:	400e0600 	.word	0x400e0600
  40041c:	004009e5 	.word	0x004009e5
  400420:	400e0800 	.word	0x400e0800
  400424:	40024000 	.word	0x40024000
  400428:	00400cd1 	.word	0x00400cd1
  40042c:	40028000 	.word	0x40028000

00400430 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  400430:	b580      	push	{r7, lr}
  400432:	b082      	sub	sp, #8
  400434:	af00      	add	r7, sp, #0
  400436:	6078      	str	r0, [r7, #4]
  400438:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  40043a:	4a0f      	ldr	r2, [pc, #60]	; (400478 <stdio_serial_init+0x48>)
  40043c:	687b      	ldr	r3, [r7, #4]
  40043e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400440:	4b0e      	ldr	r3, [pc, #56]	; (40047c <stdio_serial_init+0x4c>)
  400442:	4a0f      	ldr	r2, [pc, #60]	; (400480 <stdio_serial_init+0x50>)
  400444:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400446:	4b0f      	ldr	r3, [pc, #60]	; (400484 <stdio_serial_init+0x54>)
  400448:	4a0f      	ldr	r2, [pc, #60]	; (400488 <stdio_serial_init+0x58>)
  40044a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  40044c:	6839      	ldr	r1, [r7, #0]
  40044e:	6878      	ldr	r0, [r7, #4]
  400450:	4b0e      	ldr	r3, [pc, #56]	; (40048c <stdio_serial_init+0x5c>)
  400452:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400454:	4b0e      	ldr	r3, [pc, #56]	; (400490 <stdio_serial_init+0x60>)
  400456:	681b      	ldr	r3, [r3, #0]
  400458:	689b      	ldr	r3, [r3, #8]
  40045a:	2100      	movs	r1, #0
  40045c:	4618      	mov	r0, r3
  40045e:	4b0d      	ldr	r3, [pc, #52]	; (400494 <stdio_serial_init+0x64>)
  400460:	4798      	blx	r3
	setbuf(stdin, NULL);
  400462:	4b0b      	ldr	r3, [pc, #44]	; (400490 <stdio_serial_init+0x60>)
  400464:	681b      	ldr	r3, [r3, #0]
  400466:	685b      	ldr	r3, [r3, #4]
  400468:	2100      	movs	r1, #0
  40046a:	4618      	mov	r0, r3
  40046c:	4b09      	ldr	r3, [pc, #36]	; (400494 <stdio_serial_init+0x64>)
  40046e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  400470:	bf00      	nop
  400472:	3708      	adds	r7, #8
  400474:	46bd      	mov	sp, r7
  400476:	bd80      	pop	{r7, pc}
  400478:	20000ac4 	.word	0x20000ac4
  40047c:	20000ac0 	.word	0x20000ac0
  400480:	004002e1 	.word	0x004002e1
  400484:	20000abc 	.word	0x20000abc
  400488:	00400389 	.word	0x00400389
  40048c:	004001e9 	.word	0x004001e9
  400490:	20000438 	.word	0x20000438
  400494:	00402669 	.word	0x00402669

00400498 <SenInitUsart>:
 pdc_packet_t pdcPkt;// pdcPkt2;
 /* Pointer to PDC register base. */
 Pdc *sen1PdcBase, *sen2PdcBase;

 void SenInitUsart(void)
 {
  400498:	b5b0      	push	{r4, r5, r7, lr}
  40049a:	b08a      	sub	sp, #40	; 0x28
  40049c:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  40049e:	4b36      	ldr	r3, [pc, #216]	; (400578 <SenInitUsart+0xe0>)
  4004a0:	f107 0410 	add.w	r4, r7, #16
  4004a4:	461d      	mov	r5, r3
  4004a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4004a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4004aa:	e895 0003 	ldmia.w	r5, {r0, r1}
  4004ae:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(SEN1_USART_ID);
  4004b2:	200e      	movs	r0, #14
  4004b4:	4b31      	ldr	r3, [pc, #196]	; (40057c <SenInitUsart+0xe4>)
  4004b6:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs232(SEN1_USART, &usart_console_settings,
  4004b8:	4b31      	ldr	r3, [pc, #196]	; (400580 <SenInitUsart+0xe8>)
  4004ba:	4798      	blx	r3
  4004bc:	4602      	mov	r2, r0
  4004be:	f107 0310 	add.w	r3, r7, #16
  4004c2:	4619      	mov	r1, r3
  4004c4:	482f      	ldr	r0, [pc, #188]	; (400584 <SenInitUsart+0xec>)
  4004c6:	4b30      	ldr	r3, [pc, #192]	; (400588 <SenInitUsart+0xf0>)
  4004c8:	4798      	blx	r3
	 sysclk_get_peripheral_hz());

	 /* Enable RX function. */
	 usart_disable_tx(SEN1_USART);
  4004ca:	482e      	ldr	r0, [pc, #184]	; (400584 <SenInitUsart+0xec>)
  4004cc:	4b2f      	ldr	r3, [pc, #188]	; (40058c <SenInitUsart+0xf4>)
  4004ce:	4798      	blx	r3
	 usart_enable_rx(SEN1_USART);
  4004d0:	482c      	ldr	r0, [pc, #176]	; (400584 <SenInitUsart+0xec>)
  4004d2:	4b2f      	ldr	r3, [pc, #188]	; (400590 <SenInitUsart+0xf8>)
  4004d4:	4798      	blx	r3

	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 sen1PdcBase = usart_get_pdc_base(SEN1_USART);
  4004d6:	482b      	ldr	r0, [pc, #172]	; (400584 <SenInitUsart+0xec>)
  4004d8:	4b2e      	ldr	r3, [pc, #184]	; (400594 <SenInitUsart+0xfc>)
  4004da:	4798      	blx	r3
  4004dc:	4602      	mov	r2, r0
  4004de:	4b2e      	ldr	r3, [pc, #184]	; (400598 <SenInitUsart+0x100>)
  4004e0:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(sen1PdcBase, PERIPH_PTCR_RXTEN);
  4004e2:	4b2d      	ldr	r3, [pc, #180]	; (400598 <SenInitUsart+0x100>)
  4004e4:	681b      	ldr	r3, [r3, #0]
  4004e6:	2101      	movs	r1, #1
  4004e8:	4618      	mov	r0, r3
  4004ea:	4b2c      	ldr	r3, [pc, #176]	; (40059c <SenInitUsart+0x104>)
  4004ec:	4798      	blx	r3

	 pdcPkt.ul_addr = (uint32_t) sen1Buff;
  4004ee:	4a2c      	ldr	r2, [pc, #176]	; (4005a0 <SenInitUsart+0x108>)
  4004f0:	4b2c      	ldr	r3, [pc, #176]	; (4005a4 <SenInitUsart+0x10c>)
  4004f2:	601a      	str	r2, [r3, #0]
	 pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  4004f4:	4b2b      	ldr	r3, [pc, #172]	; (4005a4 <SenInitUsart+0x10c>)
  4004f6:	22c8      	movs	r2, #200	; 0xc8
  4004f8:	605a      	str	r2, [r3, #4]
	 //For circular buffer operation
	 pdc_rx_init(sen1PdcBase, &pdcPkt, &pdcPkt);
  4004fa:	4b27      	ldr	r3, [pc, #156]	; (400598 <SenInitUsart+0x100>)
  4004fc:	681b      	ldr	r3, [r3, #0]
  4004fe:	4a29      	ldr	r2, [pc, #164]	; (4005a4 <SenInitUsart+0x10c>)
  400500:	4928      	ldr	r1, [pc, #160]	; (4005a4 <SenInitUsart+0x10c>)
  400502:	4618      	mov	r0, r3
  400504:	4b28      	ldr	r3, [pc, #160]	; (4005a8 <SenInitUsart+0x110>)
  400506:	4798      	blx	r3
		 usart_disable_tx(SEN2_USART);
		 usart_enable_rx(SEN2_USART);

		sen2PdcBase = usart_get_pdc_base(SEN2_USART);
	#elif defined(BOARD_NIRA91)
		const usart_serial_options_t uart_serial_options = {
  400508:	463b      	mov	r3, r7
  40050a:	2200      	movs	r2, #0
  40050c:	601a      	str	r2, [r3, #0]
  40050e:	605a      	str	r2, [r3, #4]
  400510:	609a      	str	r2, [r3, #8]
  400512:	60da      	str	r2, [r3, #12]
  400514:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  400518:	603b      	str	r3, [r7, #0]
  40051a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40051e:	60bb      	str	r3, [r7, #8]
			.baudrate = SEN2_BAUDRATE,
			.paritytype = UART_MR_PAR_NO
		};

		sysclk_enable_peripheral_clock(SEN2_UART_ID);
  400520:	2008      	movs	r0, #8
  400522:	4b16      	ldr	r3, [pc, #88]	; (40057c <SenInitUsart+0xe4>)
  400524:	4798      	blx	r3
		stdio_serial_init(SEN2_UART, &uart_serial_options);
  400526:	463b      	mov	r3, r7
  400528:	4619      	mov	r1, r3
  40052a:	4820      	ldr	r0, [pc, #128]	; (4005ac <SenInitUsart+0x114>)
  40052c:	4b20      	ldr	r3, [pc, #128]	; (4005b0 <SenInitUsart+0x118>)
  40052e:	4798      	blx	r3
		
		uart_enable_rx(SEN2_UART);
  400530:	481e      	ldr	r0, [pc, #120]	; (4005ac <SenInitUsart+0x114>)
  400532:	4b20      	ldr	r3, [pc, #128]	; (4005b4 <SenInitUsart+0x11c>)
  400534:	4798      	blx	r3
		uart_disable_tx(SEN2_UART);
  400536:	481d      	ldr	r0, [pc, #116]	; (4005ac <SenInitUsart+0x114>)
  400538:	4b1f      	ldr	r3, [pc, #124]	; (4005b8 <SenInitUsart+0x120>)
  40053a:	4798      	blx	r3

		sen2PdcBase = uart_get_pdc_base(SEN2_UART);
  40053c:	481b      	ldr	r0, [pc, #108]	; (4005ac <SenInitUsart+0x114>)
  40053e:	4b1f      	ldr	r3, [pc, #124]	; (4005bc <SenInitUsart+0x124>)
  400540:	4798      	blx	r3
  400542:	4602      	mov	r2, r0
  400544:	4b1e      	ldr	r3, [pc, #120]	; (4005c0 <SenInitUsart+0x128>)
  400546:	601a      	str	r2, [r3, #0]
	#endif

	pdc_enable_transfer(sen2PdcBase, PERIPH_PTCR_RXTEN);
  400548:	4b1d      	ldr	r3, [pc, #116]	; (4005c0 <SenInitUsart+0x128>)
  40054a:	681b      	ldr	r3, [r3, #0]
  40054c:	2101      	movs	r1, #1
  40054e:	4618      	mov	r0, r3
  400550:	4b12      	ldr	r3, [pc, #72]	; (40059c <SenInitUsart+0x104>)
  400552:	4798      	blx	r3

	pdcPkt.ul_addr = (uint32_t) sen2Buff;
  400554:	4a1b      	ldr	r2, [pc, #108]	; (4005c4 <SenInitUsart+0x12c>)
  400556:	4b13      	ldr	r3, [pc, #76]	; (4005a4 <SenInitUsart+0x10c>)
  400558:	601a      	str	r2, [r3, #0]
	pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  40055a:	4b12      	ldr	r3, [pc, #72]	; (4005a4 <SenInitUsart+0x10c>)
  40055c:	22c8      	movs	r2, #200	; 0xc8
  40055e:	605a      	str	r2, [r3, #4]
	//For circular buffer operation
	pdc_rx_init(sen2PdcBase, &pdcPkt, &pdcPkt);
  400560:	4b17      	ldr	r3, [pc, #92]	; (4005c0 <SenInitUsart+0x128>)
  400562:	681b      	ldr	r3, [r3, #0]
  400564:	4a0f      	ldr	r2, [pc, #60]	; (4005a4 <SenInitUsart+0x10c>)
  400566:	490f      	ldr	r1, [pc, #60]	; (4005a4 <SenInitUsart+0x10c>)
  400568:	4618      	mov	r0, r3
  40056a:	4b0f      	ldr	r3, [pc, #60]	; (4005a8 <SenInitUsart+0x110>)
  40056c:	4798      	blx	r3
 }
  40056e:	bf00      	nop
  400570:	3728      	adds	r7, #40	; 0x28
  400572:	46bd      	mov	sp, r7
  400574:	bdb0      	pop	{r4, r5, r7, pc}
  400576:	bf00      	nop
  400578:	004035e0 	.word	0x004035e0
  40057c:	004001cd 	.word	0x004001cd
  400580:	004001b9 	.word	0x004001b9
  400584:	40024000 	.word	0x40024000
  400588:	00400b39 	.word	0x00400b39
  40058c:	00400bd5 	.word	0x00400bd5
  400590:	00400c05 	.word	0x00400c05
  400594:	00400d05 	.word	0x00400d05
  400598:	20000ab8 	.word	0x20000ab8
  40059c:	00401109 	.word	0x00401109
  4005a0:	20000868 	.word	0x20000868
  4005a4:	20000aac 	.word	0x20000aac
  4005a8:	004010c5 	.word	0x004010c5
  4005ac:	400e0600 	.word	0x400e0600
  4005b0:	00400431 	.word	0x00400431
  4005b4:	0040099d 	.word	0x0040099d
  4005b8:	00400985 	.word	0x00400985
  4005bc:	00400a15 	.word	0x00400a15
  4005c0:	20000ab4 	.word	0x20000ab4
  4005c4:	20000930 	.word	0x20000930

004005c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4005c8:	b580      	push	{r7, lr}
  4005ca:	b086      	sub	sp, #24
  4005cc:	af00      	add	r7, sp, #0
  4005ce:	60f8      	str	r0, [r7, #12]
  4005d0:	60b9      	str	r1, [r7, #8]
  4005d2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4005d4:	2300      	movs	r3, #0
  4005d6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4005d8:	68fb      	ldr	r3, [r7, #12]
  4005da:	2b00      	cmp	r3, #0
  4005dc:	d012      	beq.n	400604 <_read+0x3c>
		return -1;
  4005de:	f04f 33ff 	mov.w	r3, #4294967295
  4005e2:	e013      	b.n	40060c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4005e4:	4b0b      	ldr	r3, [pc, #44]	; (400614 <_read+0x4c>)
  4005e6:	681b      	ldr	r3, [r3, #0]
  4005e8:	4a0b      	ldr	r2, [pc, #44]	; (400618 <_read+0x50>)
  4005ea:	6812      	ldr	r2, [r2, #0]
  4005ec:	68b9      	ldr	r1, [r7, #8]
  4005ee:	4610      	mov	r0, r2
  4005f0:	4798      	blx	r3
		ptr++;
  4005f2:	68bb      	ldr	r3, [r7, #8]
  4005f4:	3301      	adds	r3, #1
  4005f6:	60bb      	str	r3, [r7, #8]
		nChars++;
  4005f8:	697b      	ldr	r3, [r7, #20]
  4005fa:	3301      	adds	r3, #1
  4005fc:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4005fe:	687b      	ldr	r3, [r7, #4]
  400600:	3b01      	subs	r3, #1
  400602:	607b      	str	r3, [r7, #4]
  400604:	687b      	ldr	r3, [r7, #4]
  400606:	2b00      	cmp	r3, #0
  400608:	dcec      	bgt.n	4005e4 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40060a:	697b      	ldr	r3, [r7, #20]
}
  40060c:	4618      	mov	r0, r3
  40060e:	3718      	adds	r7, #24
  400610:	46bd      	mov	sp, r7
  400612:	bd80      	pop	{r7, pc}
  400614:	20000abc 	.word	0x20000abc
  400618:	20000ac4 	.word	0x20000ac4

0040061c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40061c:	b580      	push	{r7, lr}
  40061e:	b086      	sub	sp, #24
  400620:	af00      	add	r7, sp, #0
  400622:	60f8      	str	r0, [r7, #12]
  400624:	60b9      	str	r1, [r7, #8]
  400626:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400628:	2300      	movs	r3, #0
  40062a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40062c:	68fb      	ldr	r3, [r7, #12]
  40062e:	2b01      	cmp	r3, #1
  400630:	d01e      	beq.n	400670 <_write+0x54>
  400632:	68fb      	ldr	r3, [r7, #12]
  400634:	2b02      	cmp	r3, #2
  400636:	d01b      	beq.n	400670 <_write+0x54>
  400638:	68fb      	ldr	r3, [r7, #12]
  40063a:	2b03      	cmp	r3, #3
  40063c:	d018      	beq.n	400670 <_write+0x54>
		return -1;
  40063e:	f04f 33ff 	mov.w	r3, #4294967295
  400642:	e019      	b.n	400678 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400644:	4b0e      	ldr	r3, [pc, #56]	; (400680 <_write+0x64>)
  400646:	681a      	ldr	r2, [r3, #0]
  400648:	4b0e      	ldr	r3, [pc, #56]	; (400684 <_write+0x68>)
  40064a:	6818      	ldr	r0, [r3, #0]
  40064c:	68bb      	ldr	r3, [r7, #8]
  40064e:	1c59      	adds	r1, r3, #1
  400650:	60b9      	str	r1, [r7, #8]
  400652:	781b      	ldrb	r3, [r3, #0]
  400654:	4619      	mov	r1, r3
  400656:	4790      	blx	r2
  400658:	4603      	mov	r3, r0
  40065a:	2b00      	cmp	r3, #0
  40065c:	da02      	bge.n	400664 <_write+0x48>
			return -1;
  40065e:	f04f 33ff 	mov.w	r3, #4294967295
  400662:	e009      	b.n	400678 <_write+0x5c>
		}
		++nChars;
  400664:	697b      	ldr	r3, [r7, #20]
  400666:	3301      	adds	r3, #1
  400668:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40066a:	687b      	ldr	r3, [r7, #4]
  40066c:	3b01      	subs	r3, #1
  40066e:	607b      	str	r3, [r7, #4]
  400670:	687b      	ldr	r3, [r7, #4]
  400672:	2b00      	cmp	r3, #0
  400674:	d1e6      	bne.n	400644 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  400676:	697b      	ldr	r3, [r7, #20]
}
  400678:	4618      	mov	r0, r3
  40067a:	3718      	adds	r7, #24
  40067c:	46bd      	mov	sp, r7
  40067e:	bd80      	pop	{r7, pc}
  400680:	20000ac0 	.word	0x20000ac0
  400684:	20000ac4 	.word	0x20000ac4

00400688 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400688:	b580      	push	{r7, lr}
  40068a:	b084      	sub	sp, #16
  40068c:	af00      	add	r7, sp, #0
  40068e:	6078      	str	r0, [r7, #4]
  400690:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400692:	6878      	ldr	r0, [r7, #4]
  400694:	4b2c      	ldr	r3, [pc, #176]	; (400748 <pio_handler_process+0xc0>)
  400696:	4798      	blx	r3
  400698:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40069a:	6878      	ldr	r0, [r7, #4]
  40069c:	4b2b      	ldr	r3, [pc, #172]	; (40074c <pio_handler_process+0xc4>)
  40069e:	4798      	blx	r3
  4006a0:	4602      	mov	r2, r0
  4006a2:	68fb      	ldr	r3, [r7, #12]
  4006a4:	4013      	ands	r3, r2
  4006a6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4006a8:	68fb      	ldr	r3, [r7, #12]
  4006aa:	2b00      	cmp	r3, #0
  4006ac:	d03c      	beq.n	400728 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4006ae:	2300      	movs	r3, #0
  4006b0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4006b2:	e034      	b.n	40071e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4006b4:	4a26      	ldr	r2, [pc, #152]	; (400750 <pio_handler_process+0xc8>)
  4006b6:	68bb      	ldr	r3, [r7, #8]
  4006b8:	011b      	lsls	r3, r3, #4
  4006ba:	4413      	add	r3, r2
  4006bc:	681a      	ldr	r2, [r3, #0]
  4006be:	683b      	ldr	r3, [r7, #0]
  4006c0:	429a      	cmp	r2, r3
  4006c2:	d126      	bne.n	400712 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4006c4:	4a22      	ldr	r2, [pc, #136]	; (400750 <pio_handler_process+0xc8>)
  4006c6:	68bb      	ldr	r3, [r7, #8]
  4006c8:	011b      	lsls	r3, r3, #4
  4006ca:	4413      	add	r3, r2
  4006cc:	3304      	adds	r3, #4
  4006ce:	681a      	ldr	r2, [r3, #0]
  4006d0:	68fb      	ldr	r3, [r7, #12]
  4006d2:	4013      	ands	r3, r2
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d01c      	beq.n	400712 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4006d8:	4a1d      	ldr	r2, [pc, #116]	; (400750 <pio_handler_process+0xc8>)
  4006da:	68bb      	ldr	r3, [r7, #8]
  4006dc:	011b      	lsls	r3, r3, #4
  4006de:	4413      	add	r3, r2
  4006e0:	330c      	adds	r3, #12
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	491a      	ldr	r1, [pc, #104]	; (400750 <pio_handler_process+0xc8>)
  4006e6:	68ba      	ldr	r2, [r7, #8]
  4006e8:	0112      	lsls	r2, r2, #4
  4006ea:	440a      	add	r2, r1
  4006ec:	6810      	ldr	r0, [r2, #0]
  4006ee:	4918      	ldr	r1, [pc, #96]	; (400750 <pio_handler_process+0xc8>)
  4006f0:	68ba      	ldr	r2, [r7, #8]
  4006f2:	0112      	lsls	r2, r2, #4
  4006f4:	440a      	add	r2, r1
  4006f6:	3204      	adds	r2, #4
  4006f8:	6812      	ldr	r2, [r2, #0]
  4006fa:	4611      	mov	r1, r2
  4006fc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4006fe:	4a14      	ldr	r2, [pc, #80]	; (400750 <pio_handler_process+0xc8>)
  400700:	68bb      	ldr	r3, [r7, #8]
  400702:	011b      	lsls	r3, r3, #4
  400704:	4413      	add	r3, r2
  400706:	3304      	adds	r3, #4
  400708:	681b      	ldr	r3, [r3, #0]
  40070a:	43db      	mvns	r3, r3
  40070c:	68fa      	ldr	r2, [r7, #12]
  40070e:	4013      	ands	r3, r2
  400710:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400712:	68bb      	ldr	r3, [r7, #8]
  400714:	3301      	adds	r3, #1
  400716:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400718:	68bb      	ldr	r3, [r7, #8]
  40071a:	2b06      	cmp	r3, #6
  40071c:	d803      	bhi.n	400726 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40071e:	68fb      	ldr	r3, [r7, #12]
  400720:	2b00      	cmp	r3, #0
  400722:	d1c7      	bne.n	4006b4 <pio_handler_process+0x2c>
  400724:	e000      	b.n	400728 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400726:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400728:	4b0a      	ldr	r3, [pc, #40]	; (400754 <pio_handler_process+0xcc>)
  40072a:	681b      	ldr	r3, [r3, #0]
  40072c:	2b00      	cmp	r3, #0
  40072e:	d007      	beq.n	400740 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400730:	4b09      	ldr	r3, [pc, #36]	; (400758 <pio_handler_process+0xd0>)
  400732:	681b      	ldr	r3, [r3, #0]
  400734:	2b00      	cmp	r3, #0
  400736:	d003      	beq.n	400740 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400738:	4b07      	ldr	r3, [pc, #28]	; (400758 <pio_handler_process+0xd0>)
  40073a:	681b      	ldr	r3, [r3, #0]
  40073c:	6878      	ldr	r0, [r7, #4]
  40073e:	4798      	blx	r3
		}
	}
#endif
}
  400740:	bf00      	nop
  400742:	3710      	adds	r7, #16
  400744:	46bd      	mov	sp, r7
  400746:	bd80      	pop	{r7, pc}
  400748:	00401365 	.word	0x00401365
  40074c:	0040137d 	.word	0x0040137d
  400750:	200009f8 	.word	0x200009f8
  400754:	20000ac8 	.word	0x20000ac8
  400758:	20000a68 	.word	0x20000a68

0040075c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40075c:	b580      	push	{r7, lr}
  40075e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400760:	210b      	movs	r1, #11
  400762:	4802      	ldr	r0, [pc, #8]	; (40076c <PIOA_Handler+0x10>)
  400764:	4b02      	ldr	r3, [pc, #8]	; (400770 <PIOA_Handler+0x14>)
  400766:	4798      	blx	r3
}
  400768:	bf00      	nop
  40076a:	bd80      	pop	{r7, pc}
  40076c:	400e0e00 	.word	0x400e0e00
  400770:	00400689 	.word	0x00400689

00400774 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400774:	b580      	push	{r7, lr}
  400776:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400778:	210c      	movs	r1, #12
  40077a:	4802      	ldr	r0, [pc, #8]	; (400784 <PIOB_Handler+0x10>)
  40077c:	4b02      	ldr	r3, [pc, #8]	; (400788 <PIOB_Handler+0x14>)
  40077e:	4798      	blx	r3
}
  400780:	bf00      	nop
  400782:	bd80      	pop	{r7, pc}
  400784:	400e1000 	.word	0x400e1000
  400788:	00400689 	.word	0x00400689

0040078c <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  40078c:	b480      	push	{r7}
  40078e:	b083      	sub	sp, #12
  400790:	af00      	add	r7, sp, #0
  400792:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400794:	687b      	ldr	r3, [r7, #4]
  400796:	2208      	movs	r2, #8
  400798:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	2220      	movs	r2, #32
  40079e:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4007a0:	687b      	ldr	r3, [r7, #4]
  4007a2:	2204      	movs	r2, #4
  4007a4:	601a      	str	r2, [r3, #0]
}
  4007a6:	bf00      	nop
  4007a8:	370c      	adds	r7, #12
  4007aa:	46bd      	mov	sp, r7
  4007ac:	bc80      	pop	{r7}
  4007ae:	4770      	bx	lr

004007b0 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4007b0:	b580      	push	{r7, lr}
  4007b2:	b084      	sub	sp, #16
  4007b4:	af00      	add	r7, sp, #0
  4007b6:	6078      	str	r0, [r7, #4]
  4007b8:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  4007ba:	2300      	movs	r3, #0
  4007bc:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4007be:	687b      	ldr	r3, [r7, #4]
  4007c0:	f04f 32ff 	mov.w	r2, #4294967295
  4007c4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4007c6:	687b      	ldr	r3, [r7, #4]
  4007c8:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  4007ca:	6878      	ldr	r0, [r7, #4]
  4007cc:	4b0e      	ldr	r3, [pc, #56]	; (400808 <twi_master_init+0x58>)
  4007ce:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  4007d0:	6878      	ldr	r0, [r7, #4]
  4007d2:	4b0e      	ldr	r3, [pc, #56]	; (40080c <twi_master_init+0x5c>)
  4007d4:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4007d6:	683b      	ldr	r3, [r7, #0]
  4007d8:	6859      	ldr	r1, [r3, #4]
  4007da:	683b      	ldr	r3, [r7, #0]
  4007dc:	681b      	ldr	r3, [r3, #0]
  4007de:	461a      	mov	r2, r3
  4007e0:	6878      	ldr	r0, [r7, #4]
  4007e2:	4b0b      	ldr	r3, [pc, #44]	; (400810 <twi_master_init+0x60>)
  4007e4:	4798      	blx	r3
  4007e6:	4603      	mov	r3, r0
  4007e8:	2b01      	cmp	r3, #1
  4007ea:	d101      	bne.n	4007f0 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  4007ec:	2301      	movs	r3, #1
  4007ee:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  4007f0:	683b      	ldr	r3, [r7, #0]
  4007f2:	7a5b      	ldrb	r3, [r3, #9]
  4007f4:	2b01      	cmp	r3, #1
  4007f6:	d102      	bne.n	4007fe <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  4007f8:	687b      	ldr	r3, [r7, #4]
  4007fa:	2240      	movs	r2, #64	; 0x40
  4007fc:	601a      	str	r2, [r3, #0]
	}

	return status;
  4007fe:	68fb      	ldr	r3, [r7, #12]
}
  400800:	4618      	mov	r0, r3
  400802:	3710      	adds	r7, #16
  400804:	46bd      	mov	sp, r7
  400806:	bd80      	pop	{r7, pc}
  400808:	00400909 	.word	0x00400909
  40080c:	0040078d 	.word	0x0040078d
  400810:	00400815 	.word	0x00400815

00400814 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400814:	b480      	push	{r7}
  400816:	b089      	sub	sp, #36	; 0x24
  400818:	af00      	add	r7, sp, #0
  40081a:	60f8      	str	r0, [r7, #12]
  40081c:	60b9      	str	r1, [r7, #8]
  40081e:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  400820:	2300      	movs	r3, #0
  400822:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400824:	68bb      	ldr	r3, [r7, #8]
  400826:	4a34      	ldr	r2, [pc, #208]	; (4008f8 <twi_set_speed+0xe4>)
  400828:	4293      	cmp	r3, r2
  40082a:	d901      	bls.n	400830 <twi_set_speed+0x1c>
		return FAIL;
  40082c:	2301      	movs	r3, #1
  40082e:	e05d      	b.n	4008ec <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400830:	68bb      	ldr	r3, [r7, #8]
  400832:	4a32      	ldr	r2, [pc, #200]	; (4008fc <twi_set_speed+0xe8>)
  400834:	4293      	cmp	r3, r2
  400836:	d937      	bls.n	4008a8 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400838:	687b      	ldr	r3, [r7, #4]
  40083a:	4a31      	ldr	r2, [pc, #196]	; (400900 <twi_set_speed+0xec>)
  40083c:	fba2 2303 	umull	r2, r3, r2, r3
  400840:	0b9b      	lsrs	r3, r3, #14
  400842:	3b04      	subs	r3, #4
  400844:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400846:	68ba      	ldr	r2, [r7, #8]
  400848:	4b2e      	ldr	r3, [pc, #184]	; (400904 <twi_set_speed+0xf0>)
  40084a:	4413      	add	r3, r2
  40084c:	009b      	lsls	r3, r3, #2
  40084e:	687a      	ldr	r2, [r7, #4]
  400850:	fbb2 f3f3 	udiv	r3, r2, r3
  400854:	3b04      	subs	r3, #4
  400856:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400858:	e005      	b.n	400866 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  40085a:	69fb      	ldr	r3, [r7, #28]
  40085c:	3301      	adds	r3, #1
  40085e:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400860:	697b      	ldr	r3, [r7, #20]
  400862:	085b      	lsrs	r3, r3, #1
  400864:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400866:	697b      	ldr	r3, [r7, #20]
  400868:	2bff      	cmp	r3, #255	; 0xff
  40086a:	d909      	bls.n	400880 <twi_set_speed+0x6c>
  40086c:	69fb      	ldr	r3, [r7, #28]
  40086e:	2b06      	cmp	r3, #6
  400870:	d9f3      	bls.n	40085a <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400872:	e005      	b.n	400880 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  400874:	69fb      	ldr	r3, [r7, #28]
  400876:	3301      	adds	r3, #1
  400878:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40087a:	693b      	ldr	r3, [r7, #16]
  40087c:	085b      	lsrs	r3, r3, #1
  40087e:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400880:	693b      	ldr	r3, [r7, #16]
  400882:	2bff      	cmp	r3, #255	; 0xff
  400884:	d902      	bls.n	40088c <twi_set_speed+0x78>
  400886:	69fb      	ldr	r3, [r7, #28]
  400888:	2b06      	cmp	r3, #6
  40088a:	d9f3      	bls.n	400874 <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  40088c:	697b      	ldr	r3, [r7, #20]
  40088e:	b2da      	uxtb	r2, r3
  400890:	693b      	ldr	r3, [r7, #16]
  400892:	021b      	lsls	r3, r3, #8
  400894:	b29b      	uxth	r3, r3
  400896:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  400898:	69fb      	ldr	r3, [r7, #28]
  40089a:	041b      	lsls	r3, r3, #16
  40089c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4008a0:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4008a2:	68fb      	ldr	r3, [r7, #12]
  4008a4:	611a      	str	r2, [r3, #16]
  4008a6:	e020      	b.n	4008ea <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4008a8:	68bb      	ldr	r3, [r7, #8]
  4008aa:	005b      	lsls	r3, r3, #1
  4008ac:	687a      	ldr	r2, [r7, #4]
  4008ae:	fbb2 f3f3 	udiv	r3, r2, r3
  4008b2:	3b04      	subs	r3, #4
  4008b4:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4008b6:	e005      	b.n	4008c4 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  4008b8:	69fb      	ldr	r3, [r7, #28]
  4008ba:	3301      	adds	r3, #1
  4008bc:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4008be:	69bb      	ldr	r3, [r7, #24]
  4008c0:	085b      	lsrs	r3, r3, #1
  4008c2:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4008c4:	69bb      	ldr	r3, [r7, #24]
  4008c6:	2bff      	cmp	r3, #255	; 0xff
  4008c8:	d902      	bls.n	4008d0 <twi_set_speed+0xbc>
  4008ca:	69fb      	ldr	r3, [r7, #28]
  4008cc:	2b06      	cmp	r3, #6
  4008ce:	d9f3      	bls.n	4008b8 <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4008d0:	69bb      	ldr	r3, [r7, #24]
  4008d2:	b2da      	uxtb	r2, r3
  4008d4:	69bb      	ldr	r3, [r7, #24]
  4008d6:	021b      	lsls	r3, r3, #8
  4008d8:	b29b      	uxth	r3, r3
  4008da:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  4008dc:	69fb      	ldr	r3, [r7, #28]
  4008de:	041b      	lsls	r3, r3, #16
  4008e0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4008e4:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4008e6:	68fb      	ldr	r3, [r7, #12]
  4008e8:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4008ea:	2300      	movs	r3, #0
}
  4008ec:	4618      	mov	r0, r3
  4008ee:	3724      	adds	r7, #36	; 0x24
  4008f0:	46bd      	mov	sp, r7
  4008f2:	bc80      	pop	{r7}
  4008f4:	4770      	bx	lr
  4008f6:	bf00      	nop
  4008f8:	00061a80 	.word	0x00061a80
  4008fc:	0005dc00 	.word	0x0005dc00
  400900:	057619f1 	.word	0x057619f1
  400904:	3ffd1200 	.word	0x3ffd1200

00400908 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  400908:	b480      	push	{r7}
  40090a:	b083      	sub	sp, #12
  40090c:	af00      	add	r7, sp, #0
  40090e:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400910:	687b      	ldr	r3, [r7, #4]
  400912:	2280      	movs	r2, #128	; 0x80
  400914:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  400916:	687b      	ldr	r3, [r7, #4]
  400918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  40091a:	bf00      	nop
  40091c:	370c      	adds	r7, #12
  40091e:	46bd      	mov	sp, r7
  400920:	bc80      	pop	{r7}
  400922:	4770      	bx	lr

00400924 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400924:	b480      	push	{r7}
  400926:	b085      	sub	sp, #20
  400928:	af00      	add	r7, sp, #0
  40092a:	6078      	str	r0, [r7, #4]
  40092c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40092e:	2300      	movs	r3, #0
  400930:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400932:	687b      	ldr	r3, [r7, #4]
  400934:	22ac      	movs	r2, #172	; 0xac
  400936:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400938:	683b      	ldr	r3, [r7, #0]
  40093a:	681a      	ldr	r2, [r3, #0]
  40093c:	683b      	ldr	r3, [r7, #0]
  40093e:	685b      	ldr	r3, [r3, #4]
  400940:	fbb2 f3f3 	udiv	r3, r2, r3
  400944:	091b      	lsrs	r3, r3, #4
  400946:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400948:	68fb      	ldr	r3, [r7, #12]
  40094a:	2b00      	cmp	r3, #0
  40094c:	d003      	beq.n	400956 <uart_init+0x32>
  40094e:	68fb      	ldr	r3, [r7, #12]
  400950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400954:	d301      	bcc.n	40095a <uart_init+0x36>
		return 1;
  400956:	2301      	movs	r3, #1
  400958:	e00f      	b.n	40097a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  40095a:	687b      	ldr	r3, [r7, #4]
  40095c:	68fa      	ldr	r2, [r7, #12]
  40095e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400960:	683b      	ldr	r3, [r7, #0]
  400962:	689a      	ldr	r2, [r3, #8]
  400964:	687b      	ldr	r3, [r7, #4]
  400966:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	f240 2202 	movw	r2, #514	; 0x202
  40096e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400972:	687b      	ldr	r3, [r7, #4]
  400974:	2250      	movs	r2, #80	; 0x50
  400976:	601a      	str	r2, [r3, #0]

	return 0;
  400978:	2300      	movs	r3, #0
}
  40097a:	4618      	mov	r0, r3
  40097c:	3714      	adds	r7, #20
  40097e:	46bd      	mov	sp, r7
  400980:	bc80      	pop	{r7}
  400982:	4770      	bx	lr

00400984 <uart_disable_tx>:
 * \brief Disable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable_tx(Uart *p_uart)
{
  400984:	b480      	push	{r7}
  400986:	b083      	sub	sp, #12
  400988:	af00      	add	r7, sp, #0
  40098a:	6078      	str	r0, [r7, #4]
	/* Disable transmitter */
	p_uart->UART_CR = UART_CR_TXDIS;
  40098c:	687b      	ldr	r3, [r7, #4]
  40098e:	2280      	movs	r2, #128	; 0x80
  400990:	601a      	str	r2, [r3, #0]
}
  400992:	bf00      	nop
  400994:	370c      	adds	r7, #12
  400996:	46bd      	mov	sp, r7
  400998:	bc80      	pop	{r7}
  40099a:	4770      	bx	lr

0040099c <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
  40099c:	b480      	push	{r7}
  40099e:	b083      	sub	sp, #12
  4009a0:	af00      	add	r7, sp, #0
  4009a2:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  4009a4:	687b      	ldr	r3, [r7, #4]
  4009a6:	2210      	movs	r2, #16
  4009a8:	601a      	str	r2, [r3, #0]
}
  4009aa:	bf00      	nop
  4009ac:	370c      	adds	r7, #12
  4009ae:	46bd      	mov	sp, r7
  4009b0:	bc80      	pop	{r7}
  4009b2:	4770      	bx	lr

004009b4 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4009b4:	b480      	push	{r7}
  4009b6:	b083      	sub	sp, #12
  4009b8:	af00      	add	r7, sp, #0
  4009ba:	6078      	str	r0, [r7, #4]
  4009bc:	460b      	mov	r3, r1
  4009be:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4009c0:	687b      	ldr	r3, [r7, #4]
  4009c2:	695b      	ldr	r3, [r3, #20]
  4009c4:	f003 0302 	and.w	r3, r3, #2
  4009c8:	2b00      	cmp	r3, #0
  4009ca:	d101      	bne.n	4009d0 <uart_write+0x1c>
		return 1;
  4009cc:	2301      	movs	r3, #1
  4009ce:	e003      	b.n	4009d8 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4009d0:	78fa      	ldrb	r2, [r7, #3]
  4009d2:	687b      	ldr	r3, [r7, #4]
  4009d4:	61da      	str	r2, [r3, #28]
	return 0;
  4009d6:	2300      	movs	r3, #0
}
  4009d8:	4618      	mov	r0, r3
  4009da:	370c      	adds	r7, #12
  4009dc:	46bd      	mov	sp, r7
  4009de:	bc80      	pop	{r7}
  4009e0:	4770      	bx	lr
  4009e2:	bf00      	nop

004009e4 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  4009e4:	b480      	push	{r7}
  4009e6:	b083      	sub	sp, #12
  4009e8:	af00      	add	r7, sp, #0
  4009ea:	6078      	str	r0, [r7, #4]
  4009ec:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4009ee:	687b      	ldr	r3, [r7, #4]
  4009f0:	695b      	ldr	r3, [r3, #20]
  4009f2:	f003 0301 	and.w	r3, r3, #1
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	d101      	bne.n	4009fe <uart_read+0x1a>
		return 1;
  4009fa:	2301      	movs	r3, #1
  4009fc:	e005      	b.n	400a0a <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4009fe:	687b      	ldr	r3, [r7, #4]
  400a00:	699b      	ldr	r3, [r3, #24]
  400a02:	b2da      	uxtb	r2, r3
  400a04:	683b      	ldr	r3, [r7, #0]
  400a06:	701a      	strb	r2, [r3, #0]
	return 0;
  400a08:	2300      	movs	r3, #0
}
  400a0a:	4618      	mov	r0, r3
  400a0c:	370c      	adds	r7, #12
  400a0e:	46bd      	mov	sp, r7
  400a10:	bc80      	pop	{r7}
  400a12:	4770      	bx	lr

00400a14 <uart_get_pdc_base>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return UART PDC registers base for PDC driver to access.
 */
Pdc *uart_get_pdc_base(Uart *p_uart)
{
  400a14:	b480      	push	{r7}
  400a16:	b085      	sub	sp, #20
  400a18:	af00      	add	r7, sp, #0
  400a1a:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART0)
  400a1c:	687b      	ldr	r3, [r7, #4]
  400a1e:	4a08      	ldr	r2, [pc, #32]	; (400a40 <uart_get_pdc_base+0x2c>)
  400a20:	4293      	cmp	r3, r2
  400a22:	d101      	bne.n	400a28 <uart_get_pdc_base+0x14>
		p_pdc_base = PDC_UART0;
  400a24:	4b07      	ldr	r3, [pc, #28]	; (400a44 <uart_get_pdc_base+0x30>)
  400a26:	60fb      	str	r3, [r7, #12]
#else
#error "Unsupported device"
#endif

#if (SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART1)
  400a28:	687b      	ldr	r3, [r7, #4]
  400a2a:	4a07      	ldr	r2, [pc, #28]	; (400a48 <uart_get_pdc_base+0x34>)
  400a2c:	4293      	cmp	r3, r2
  400a2e:	d101      	bne.n	400a34 <uart_get_pdc_base+0x20>
		p_pdc_base = PDC_UART1;
  400a30:	4b06      	ldr	r3, [pc, #24]	; (400a4c <uart_get_pdc_base+0x38>)
  400a32:	60fb      	str	r3, [r7, #12]
#if (SAM4N)
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
  400a34:	68fb      	ldr	r3, [r7, #12]
}
  400a36:	4618      	mov	r0, r3
  400a38:	3714      	adds	r7, #20
  400a3a:	46bd      	mov	sp, r7
  400a3c:	bc80      	pop	{r7}
  400a3e:	4770      	bx	lr
  400a40:	400e0600 	.word	0x400e0600
  400a44:	400e0700 	.word	0x400e0700
  400a48:	400e0800 	.word	0x400e0800
  400a4c:	400e0900 	.word	0x400e0900

00400a50 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400a50:	b480      	push	{r7}
  400a52:	b089      	sub	sp, #36	; 0x24
  400a54:	af00      	add	r7, sp, #0
  400a56:	60f8      	str	r0, [r7, #12]
  400a58:	60b9      	str	r1, [r7, #8]
  400a5a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400a5c:	68bb      	ldr	r3, [r7, #8]
  400a5e:	011a      	lsls	r2, r3, #4
  400a60:	687b      	ldr	r3, [r7, #4]
  400a62:	429a      	cmp	r2, r3
  400a64:	d802      	bhi.n	400a6c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400a66:	2310      	movs	r3, #16
  400a68:	61fb      	str	r3, [r7, #28]
  400a6a:	e001      	b.n	400a70 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400a6c:	2308      	movs	r3, #8
  400a6e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a70:	687b      	ldr	r3, [r7, #4]
  400a72:	00da      	lsls	r2, r3, #3
  400a74:	69fb      	ldr	r3, [r7, #28]
  400a76:	68b9      	ldr	r1, [r7, #8]
  400a78:	fb01 f303 	mul.w	r3, r1, r3
  400a7c:	085b      	lsrs	r3, r3, #1
  400a7e:	441a      	add	r2, r3
  400a80:	69fb      	ldr	r3, [r7, #28]
  400a82:	68b9      	ldr	r1, [r7, #8]
  400a84:	fb01 f303 	mul.w	r3, r1, r3
  400a88:	fbb2 f3f3 	udiv	r3, r2, r3
  400a8c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400a8e:	69bb      	ldr	r3, [r7, #24]
  400a90:	08db      	lsrs	r3, r3, #3
  400a92:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400a94:	69bb      	ldr	r3, [r7, #24]
  400a96:	f003 0307 	and.w	r3, r3, #7
  400a9a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a9c:	697b      	ldr	r3, [r7, #20]
  400a9e:	2b00      	cmp	r3, #0
  400aa0:	d003      	beq.n	400aaa <usart_set_async_baudrate+0x5a>
  400aa2:	697b      	ldr	r3, [r7, #20]
  400aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400aa8:	d301      	bcc.n	400aae <usart_set_async_baudrate+0x5e>
		return 1;
  400aaa:	2301      	movs	r3, #1
  400aac:	e00f      	b.n	400ace <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400aae:	69fb      	ldr	r3, [r7, #28]
  400ab0:	2b08      	cmp	r3, #8
  400ab2:	d105      	bne.n	400ac0 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400ab4:	68fb      	ldr	r3, [r7, #12]
  400ab6:	685b      	ldr	r3, [r3, #4]
  400ab8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400abc:	68fb      	ldr	r3, [r7, #12]
  400abe:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400ac0:	693b      	ldr	r3, [r7, #16]
  400ac2:	041a      	lsls	r2, r3, #16
  400ac4:	697b      	ldr	r3, [r7, #20]
  400ac6:	431a      	orrs	r2, r3
  400ac8:	68fb      	ldr	r3, [r7, #12]
  400aca:	621a      	str	r2, [r3, #32]

	return 0;
  400acc:	2300      	movs	r3, #0
}
  400ace:	4618      	mov	r0, r3
  400ad0:	3724      	adds	r7, #36	; 0x24
  400ad2:	46bd      	mov	sp, r7
  400ad4:	bc80      	pop	{r7}
  400ad6:	4770      	bx	lr

00400ad8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400ad8:	b580      	push	{r7, lr}
  400ada:	b082      	sub	sp, #8
  400adc:	af00      	add	r7, sp, #0
  400ade:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400ae0:	6878      	ldr	r0, [r7, #4]
  400ae2:	4b0f      	ldr	r3, [pc, #60]	; (400b20 <usart_reset+0x48>)
  400ae4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400ae6:	687b      	ldr	r3, [r7, #4]
  400ae8:	2200      	movs	r2, #0
  400aea:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400aec:	687b      	ldr	r3, [r7, #4]
  400aee:	2200      	movs	r2, #0
  400af0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400af2:	687b      	ldr	r3, [r7, #4]
  400af4:	2200      	movs	r2, #0
  400af6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400af8:	6878      	ldr	r0, [r7, #4]
  400afa:	4b0a      	ldr	r3, [pc, #40]	; (400b24 <usart_reset+0x4c>)
  400afc:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400afe:	6878      	ldr	r0, [r7, #4]
  400b00:	4b09      	ldr	r3, [pc, #36]	; (400b28 <usart_reset+0x50>)
  400b02:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400b04:	6878      	ldr	r0, [r7, #4]
  400b06:	4b09      	ldr	r3, [pc, #36]	; (400b2c <usart_reset+0x54>)
  400b08:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400b0a:	6878      	ldr	r0, [r7, #4]
  400b0c:	4b08      	ldr	r3, [pc, #32]	; (400b30 <usart_reset+0x58>)
  400b0e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400b10:	6878      	ldr	r0, [r7, #4]
  400b12:	4b08      	ldr	r3, [pc, #32]	; (400b34 <usart_reset+0x5c>)
  400b14:	4798      	blx	r3
#endif
}
  400b16:	bf00      	nop
  400b18:	3708      	adds	r7, #8
  400b1a:	46bd      	mov	sp, r7
  400b1c:	bd80      	pop	{r7, pc}
  400b1e:	bf00      	nop
  400b20:	00400d4d 	.word	0x00400d4d
  400b24:	00400bed 	.word	0x00400bed
  400b28:	00400c35 	.word	0x00400c35
  400b2c:	00400c4d 	.word	0x00400c4d
  400b30:	00400c85 	.word	0x00400c85
  400b34:	00400c69 	.word	0x00400c69

00400b38 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400b38:	b580      	push	{r7, lr}
  400b3a:	b084      	sub	sp, #16
  400b3c:	af00      	add	r7, sp, #0
  400b3e:	60f8      	str	r0, [r7, #12]
  400b40:	60b9      	str	r1, [r7, #8]
  400b42:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400b44:	68f8      	ldr	r0, [r7, #12]
  400b46:	4b1a      	ldr	r3, [pc, #104]	; (400bb0 <usart_init_rs232+0x78>)
  400b48:	4798      	blx	r3

	ul_reg_val = 0;
  400b4a:	4b1a      	ldr	r3, [pc, #104]	; (400bb4 <usart_init_rs232+0x7c>)
  400b4c:	2200      	movs	r2, #0
  400b4e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400b50:	68bb      	ldr	r3, [r7, #8]
  400b52:	2b00      	cmp	r3, #0
  400b54:	d009      	beq.n	400b6a <usart_init_rs232+0x32>
  400b56:	68bb      	ldr	r3, [r7, #8]
  400b58:	681b      	ldr	r3, [r3, #0]
  400b5a:	687a      	ldr	r2, [r7, #4]
  400b5c:	4619      	mov	r1, r3
  400b5e:	68f8      	ldr	r0, [r7, #12]
  400b60:	4b15      	ldr	r3, [pc, #84]	; (400bb8 <usart_init_rs232+0x80>)
  400b62:	4798      	blx	r3
  400b64:	4603      	mov	r3, r0
  400b66:	2b00      	cmp	r3, #0
  400b68:	d001      	beq.n	400b6e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400b6a:	2301      	movs	r3, #1
  400b6c:	e01b      	b.n	400ba6 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b6e:	68bb      	ldr	r3, [r7, #8]
  400b70:	685a      	ldr	r2, [r3, #4]
  400b72:	68bb      	ldr	r3, [r7, #8]
  400b74:	689b      	ldr	r3, [r3, #8]
  400b76:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b78:	68bb      	ldr	r3, [r7, #8]
  400b7a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b7c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b7e:	68bb      	ldr	r3, [r7, #8]
  400b80:	68db      	ldr	r3, [r3, #12]
  400b82:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b84:	4b0b      	ldr	r3, [pc, #44]	; (400bb4 <usart_init_rs232+0x7c>)
  400b86:	681b      	ldr	r3, [r3, #0]
  400b88:	4313      	orrs	r3, r2
  400b8a:	4a0a      	ldr	r2, [pc, #40]	; (400bb4 <usart_init_rs232+0x7c>)
  400b8c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400b8e:	4b09      	ldr	r3, [pc, #36]	; (400bb4 <usart_init_rs232+0x7c>)
  400b90:	681b      	ldr	r3, [r3, #0]
  400b92:	4a08      	ldr	r2, [pc, #32]	; (400bb4 <usart_init_rs232+0x7c>)
  400b94:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400b96:	68fb      	ldr	r3, [r7, #12]
  400b98:	685a      	ldr	r2, [r3, #4]
  400b9a:	4b06      	ldr	r3, [pc, #24]	; (400bb4 <usart_init_rs232+0x7c>)
  400b9c:	681b      	ldr	r3, [r3, #0]
  400b9e:	431a      	orrs	r2, r3
  400ba0:	68fb      	ldr	r3, [r7, #12]
  400ba2:	605a      	str	r2, [r3, #4]

	return 0;
  400ba4:	2300      	movs	r3, #0
}
  400ba6:	4618      	mov	r0, r3
  400ba8:	3710      	adds	r7, #16
  400baa:	46bd      	mov	sp, r7
  400bac:	bd80      	pop	{r7, pc}
  400bae:	bf00      	nop
  400bb0:	00400ad9 	.word	0x00400ad9
  400bb4:	20000a6c 	.word	0x20000a6c
  400bb8:	00400a51 	.word	0x00400a51

00400bbc <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400bbc:	b480      	push	{r7}
  400bbe:	b083      	sub	sp, #12
  400bc0:	af00      	add	r7, sp, #0
  400bc2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400bc4:	687b      	ldr	r3, [r7, #4]
  400bc6:	2240      	movs	r2, #64	; 0x40
  400bc8:	601a      	str	r2, [r3, #0]
}
  400bca:	bf00      	nop
  400bcc:	370c      	adds	r7, #12
  400bce:	46bd      	mov	sp, r7
  400bd0:	bc80      	pop	{r7}
  400bd2:	4770      	bx	lr

00400bd4 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  400bd4:	b480      	push	{r7}
  400bd6:	b083      	sub	sp, #12
  400bd8:	af00      	add	r7, sp, #0
  400bda:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  400bdc:	687b      	ldr	r3, [r7, #4]
  400bde:	2280      	movs	r2, #128	; 0x80
  400be0:	601a      	str	r2, [r3, #0]
}
  400be2:	bf00      	nop
  400be4:	370c      	adds	r7, #12
  400be6:	46bd      	mov	sp, r7
  400be8:	bc80      	pop	{r7}
  400bea:	4770      	bx	lr

00400bec <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400bec:	b480      	push	{r7}
  400bee:	b083      	sub	sp, #12
  400bf0:	af00      	add	r7, sp, #0
  400bf2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400bf4:	687b      	ldr	r3, [r7, #4]
  400bf6:	2288      	movs	r2, #136	; 0x88
  400bf8:	601a      	str	r2, [r3, #0]
}
  400bfa:	bf00      	nop
  400bfc:	370c      	adds	r7, #12
  400bfe:	46bd      	mov	sp, r7
  400c00:	bc80      	pop	{r7}
  400c02:	4770      	bx	lr

00400c04 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400c04:	b480      	push	{r7}
  400c06:	b083      	sub	sp, #12
  400c08:	af00      	add	r7, sp, #0
  400c0a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400c0c:	687b      	ldr	r3, [r7, #4]
  400c0e:	2210      	movs	r2, #16
  400c10:	601a      	str	r2, [r3, #0]
}
  400c12:	bf00      	nop
  400c14:	370c      	adds	r7, #12
  400c16:	46bd      	mov	sp, r7
  400c18:	bc80      	pop	{r7}
  400c1a:	4770      	bx	lr

00400c1c <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
  400c1c:	b480      	push	{r7}
  400c1e:	b083      	sub	sp, #12
  400c20:	af00      	add	r7, sp, #0
  400c22:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
  400c24:	687b      	ldr	r3, [r7, #4]
  400c26:	2220      	movs	r2, #32
  400c28:	601a      	str	r2, [r3, #0]
}
  400c2a:	bf00      	nop
  400c2c:	370c      	adds	r7, #12
  400c2e:	46bd      	mov	sp, r7
  400c30:	bc80      	pop	{r7}
  400c32:	4770      	bx	lr

00400c34 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400c34:	b480      	push	{r7}
  400c36:	b083      	sub	sp, #12
  400c38:	af00      	add	r7, sp, #0
  400c3a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400c3c:	687b      	ldr	r3, [r7, #4]
  400c3e:	2224      	movs	r2, #36	; 0x24
  400c40:	601a      	str	r2, [r3, #0]
}
  400c42:	bf00      	nop
  400c44:	370c      	adds	r7, #12
  400c46:	46bd      	mov	sp, r7
  400c48:	bc80      	pop	{r7}
  400c4a:	4770      	bx	lr

00400c4c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400c4c:	b480      	push	{r7}
  400c4e:	b083      	sub	sp, #12
  400c50:	af00      	add	r7, sp, #0
  400c52:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400c54:	687b      	ldr	r3, [r7, #4]
  400c56:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c5a:	601a      	str	r2, [r3, #0]
}
  400c5c:	bf00      	nop
  400c5e:	370c      	adds	r7, #12
  400c60:	46bd      	mov	sp, r7
  400c62:	bc80      	pop	{r7}
  400c64:	4770      	bx	lr
  400c66:	bf00      	nop

00400c68 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400c68:	b480      	push	{r7}
  400c6a:	b083      	sub	sp, #12
  400c6c:	af00      	add	r7, sp, #0
  400c6e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400c70:	687b      	ldr	r3, [r7, #4]
  400c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400c76:	601a      	str	r2, [r3, #0]
}
  400c78:	bf00      	nop
  400c7a:	370c      	adds	r7, #12
  400c7c:	46bd      	mov	sp, r7
  400c7e:	bc80      	pop	{r7}
  400c80:	4770      	bx	lr
  400c82:	bf00      	nop

00400c84 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400c84:	b480      	push	{r7}
  400c86:	b083      	sub	sp, #12
  400c88:	af00      	add	r7, sp, #0
  400c8a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400c8c:	687b      	ldr	r3, [r7, #4]
  400c8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400c92:	601a      	str	r2, [r3, #0]
}
  400c94:	bf00      	nop
  400c96:	370c      	adds	r7, #12
  400c98:	46bd      	mov	sp, r7
  400c9a:	bc80      	pop	{r7}
  400c9c:	4770      	bx	lr
  400c9e:	bf00      	nop

00400ca0 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  400ca0:	b480      	push	{r7}
  400ca2:	b083      	sub	sp, #12
  400ca4:	af00      	add	r7, sp, #0
  400ca6:	6078      	str	r0, [r7, #4]
  400ca8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400caa:	687b      	ldr	r3, [r7, #4]
  400cac:	695b      	ldr	r3, [r3, #20]
  400cae:	f003 0302 	and.w	r3, r3, #2
  400cb2:	2b00      	cmp	r3, #0
  400cb4:	d101      	bne.n	400cba <usart_write+0x1a>
		return 1;
  400cb6:	2301      	movs	r3, #1
  400cb8:	e005      	b.n	400cc6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400cba:	683b      	ldr	r3, [r7, #0]
  400cbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400cc0:	687b      	ldr	r3, [r7, #4]
  400cc2:	61da      	str	r2, [r3, #28]
	return 0;
  400cc4:	2300      	movs	r3, #0
}
  400cc6:	4618      	mov	r0, r3
  400cc8:	370c      	adds	r7, #12
  400cca:	46bd      	mov	sp, r7
  400ccc:	bc80      	pop	{r7}
  400cce:	4770      	bx	lr

00400cd0 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400cd0:	b480      	push	{r7}
  400cd2:	b083      	sub	sp, #12
  400cd4:	af00      	add	r7, sp, #0
  400cd6:	6078      	str	r0, [r7, #4]
  400cd8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400cda:	687b      	ldr	r3, [r7, #4]
  400cdc:	695b      	ldr	r3, [r3, #20]
  400cde:	f003 0301 	and.w	r3, r3, #1
  400ce2:	2b00      	cmp	r3, #0
  400ce4:	d101      	bne.n	400cea <usart_read+0x1a>
		return 1;
  400ce6:	2301      	movs	r3, #1
  400ce8:	e006      	b.n	400cf8 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400cea:	687b      	ldr	r3, [r7, #4]
  400cec:	699b      	ldr	r3, [r3, #24]
  400cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400cf2:	683b      	ldr	r3, [r7, #0]
  400cf4:	601a      	str	r2, [r3, #0]

	return 0;
  400cf6:	2300      	movs	r3, #0
}
  400cf8:	4618      	mov	r0, r3
  400cfa:	370c      	adds	r7, #12
  400cfc:	46bd      	mov	sp, r7
  400cfe:	bc80      	pop	{r7}
  400d00:	4770      	bx	lr
  400d02:	bf00      	nop

00400d04 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  400d04:	b480      	push	{r7}
  400d06:	b085      	sub	sp, #20
  400d08:	af00      	add	r7, sp, #0
  400d0a:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  400d0c:	2300      	movs	r3, #0
  400d0e:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  400d10:	687b      	ldr	r3, [r7, #4]
  400d12:	4a0a      	ldr	r2, [pc, #40]	; (400d3c <usart_get_pdc_base+0x38>)
  400d14:	4293      	cmp	r3, r2
  400d16:	d103      	bne.n	400d20 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  400d18:	4b09      	ldr	r3, [pc, #36]	; (400d40 <usart_get_pdc_base+0x3c>)
  400d1a:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400d1c:	68fb      	ldr	r3, [r7, #12]
  400d1e:	e008      	b.n	400d32 <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  400d20:	687b      	ldr	r3, [r7, #4]
  400d22:	4a08      	ldr	r2, [pc, #32]	; (400d44 <usart_get_pdc_base+0x40>)
  400d24:	4293      	cmp	r3, r2
  400d26:	d103      	bne.n	400d30 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  400d28:	4b07      	ldr	r3, [pc, #28]	; (400d48 <usart_get_pdc_base+0x44>)
  400d2a:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400d2c:	68fb      	ldr	r3, [r7, #12]
  400d2e:	e000      	b.n	400d32 <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  400d30:	68fb      	ldr	r3, [r7, #12]
}
  400d32:	4618      	mov	r0, r3
  400d34:	3714      	adds	r7, #20
  400d36:	46bd      	mov	sp, r7
  400d38:	bc80      	pop	{r7}
  400d3a:	4770      	bx	lr
  400d3c:	40024000 	.word	0x40024000
  400d40:	40024100 	.word	0x40024100
  400d44:	40028000 	.word	0x40028000
  400d48:	40028100 	.word	0x40028100

00400d4c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400d4c:	b480      	push	{r7}
  400d4e:	b083      	sub	sp, #12
  400d50:	af00      	add	r7, sp, #0
  400d52:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d54:	687b      	ldr	r3, [r7, #4]
  400d56:	4a04      	ldr	r2, [pc, #16]	; (400d68 <usart_disable_writeprotect+0x1c>)
  400d58:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400d5c:	bf00      	nop
  400d5e:	370c      	adds	r7, #12
  400d60:	46bd      	mov	sp, r7
  400d62:	bc80      	pop	{r7}
  400d64:	4770      	bx	lr
  400d66:	bf00      	nop
  400d68:	55534100 	.word	0x55534100

00400d6c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400d6c:	b580      	push	{r7, lr}
  400d6e:	b082      	sub	sp, #8
  400d70:	af00      	add	r7, sp, #0
  400d72:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d74:	687b      	ldr	r3, [r7, #4]
  400d76:	2b07      	cmp	r3, #7
  400d78:	d831      	bhi.n	400dde <osc_enable+0x72>
  400d7a:	a201      	add	r2, pc, #4	; (adr r2, 400d80 <osc_enable+0x14>)
  400d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d80:	00400ddd 	.word	0x00400ddd
  400d84:	00400da1 	.word	0x00400da1
  400d88:	00400da9 	.word	0x00400da9
  400d8c:	00400db1 	.word	0x00400db1
  400d90:	00400db9 	.word	0x00400db9
  400d94:	00400dc1 	.word	0x00400dc1
  400d98:	00400dc9 	.word	0x00400dc9
  400d9c:	00400dd3 	.word	0x00400dd3
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400da0:	2000      	movs	r0, #0
  400da2:	4b11      	ldr	r3, [pc, #68]	; (400de8 <osc_enable+0x7c>)
  400da4:	4798      	blx	r3
		break;
  400da6:	e01a      	b.n	400dde <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400da8:	2001      	movs	r0, #1
  400daa:	4b0f      	ldr	r3, [pc, #60]	; (400de8 <osc_enable+0x7c>)
  400dac:	4798      	blx	r3
		break;
  400dae:	e016      	b.n	400dde <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400db0:	2000      	movs	r0, #0
  400db2:	4b0e      	ldr	r3, [pc, #56]	; (400dec <osc_enable+0x80>)
  400db4:	4798      	blx	r3
		break;
  400db6:	e012      	b.n	400dde <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400db8:	2010      	movs	r0, #16
  400dba:	4b0c      	ldr	r3, [pc, #48]	; (400dec <osc_enable+0x80>)
  400dbc:	4798      	blx	r3
		break;
  400dbe:	e00e      	b.n	400dde <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400dc0:	2020      	movs	r0, #32
  400dc2:	4b0a      	ldr	r3, [pc, #40]	; (400dec <osc_enable+0x80>)
  400dc4:	4798      	blx	r3
		break;
  400dc6:	e00a      	b.n	400dde <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400dc8:	213e      	movs	r1, #62	; 0x3e
  400dca:	2000      	movs	r0, #0
  400dcc:	4b08      	ldr	r3, [pc, #32]	; (400df0 <osc_enable+0x84>)
  400dce:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400dd0:	e005      	b.n	400dde <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400dd2:	213e      	movs	r1, #62	; 0x3e
  400dd4:	2001      	movs	r0, #1
  400dd6:	4b06      	ldr	r3, [pc, #24]	; (400df0 <osc_enable+0x84>)
  400dd8:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400dda:	e000      	b.n	400dde <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  400ddc:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  400dde:	bf00      	nop
  400de0:	3708      	adds	r7, #8
  400de2:	46bd      	mov	sp, r7
  400de4:	bd80      	pop	{r7, pc}
  400de6:	bf00      	nop
  400de8:	00401775 	.word	0x00401775
  400dec:	004017e1 	.word	0x004017e1
  400df0:	00401851 	.word	0x00401851

00400df4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400df4:	b580      	push	{r7, lr}
  400df6:	b082      	sub	sp, #8
  400df8:	af00      	add	r7, sp, #0
  400dfa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400dfc:	687b      	ldr	r3, [r7, #4]
  400dfe:	2b07      	cmp	r3, #7
  400e00:	d826      	bhi.n	400e50 <osc_is_ready+0x5c>
  400e02:	a201      	add	r2, pc, #4	; (adr r2, 400e08 <osc_is_ready+0x14>)
  400e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e08:	00400e29 	.word	0x00400e29
  400e0c:	00400e2d 	.word	0x00400e2d
  400e10:	00400e2d 	.word	0x00400e2d
  400e14:	00400e3f 	.word	0x00400e3f
  400e18:	00400e3f 	.word	0x00400e3f
  400e1c:	00400e3f 	.word	0x00400e3f
  400e20:	00400e3f 	.word	0x00400e3f
  400e24:	00400e3f 	.word	0x00400e3f
	case OSC_SLCK_32K_RC:
		return 1;
  400e28:	2301      	movs	r3, #1
  400e2a:	e012      	b.n	400e52 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400e2c:	4b0b      	ldr	r3, [pc, #44]	; (400e5c <osc_is_ready+0x68>)
  400e2e:	4798      	blx	r3
  400e30:	4603      	mov	r3, r0
  400e32:	2b00      	cmp	r3, #0
  400e34:	bf14      	ite	ne
  400e36:	2301      	movne	r3, #1
  400e38:	2300      	moveq	r3, #0
  400e3a:	b2db      	uxtb	r3, r3
  400e3c:	e009      	b.n	400e52 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400e3e:	4b08      	ldr	r3, [pc, #32]	; (400e60 <osc_is_ready+0x6c>)
  400e40:	4798      	blx	r3
  400e42:	4603      	mov	r3, r0
  400e44:	2b00      	cmp	r3, #0
  400e46:	bf14      	ite	ne
  400e48:	2301      	movne	r3, #1
  400e4a:	2300      	moveq	r3, #0
  400e4c:	b2db      	uxtb	r3, r3
  400e4e:	e000      	b.n	400e52 <osc_is_ready+0x5e>
	}

	return 0;
  400e50:	2300      	movs	r3, #0
}
  400e52:	4618      	mov	r0, r3
  400e54:	3708      	adds	r7, #8
  400e56:	46bd      	mov	sp, r7
  400e58:	bd80      	pop	{r7, pc}
  400e5a:	bf00      	nop
  400e5c:	004017ad 	.word	0x004017ad
  400e60:	004018c9 	.word	0x004018c9

00400e64 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400e64:	b480      	push	{r7}
  400e66:	b083      	sub	sp, #12
  400e68:	af00      	add	r7, sp, #0
  400e6a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400e6c:	687b      	ldr	r3, [r7, #4]
  400e6e:	2b07      	cmp	r3, #7
  400e70:	d825      	bhi.n	400ebe <osc_get_rate+0x5a>
  400e72:	a201      	add	r2, pc, #4	; (adr r2, 400e78 <osc_get_rate+0x14>)
  400e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e78:	00400e99 	.word	0x00400e99
  400e7c:	00400e9f 	.word	0x00400e9f
  400e80:	00400ea5 	.word	0x00400ea5
  400e84:	00400eab 	.word	0x00400eab
  400e88:	00400eaf 	.word	0x00400eaf
  400e8c:	00400eb3 	.word	0x00400eb3
  400e90:	00400eb7 	.word	0x00400eb7
  400e94:	00400ebb 	.word	0x00400ebb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400e98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400e9c:	e010      	b.n	400ec0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ea2:	e00d      	b.n	400ec0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ea8:	e00a      	b.n	400ec0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400eaa:	4b08      	ldr	r3, [pc, #32]	; (400ecc <osc_get_rate+0x68>)
  400eac:	e008      	b.n	400ec0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400eae:	4b08      	ldr	r3, [pc, #32]	; (400ed0 <osc_get_rate+0x6c>)
  400eb0:	e006      	b.n	400ec0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400eb2:	4b08      	ldr	r3, [pc, #32]	; (400ed4 <osc_get_rate+0x70>)
  400eb4:	e004      	b.n	400ec0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400eb6:	4b07      	ldr	r3, [pc, #28]	; (400ed4 <osc_get_rate+0x70>)
  400eb8:	e002      	b.n	400ec0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400eba:	4b06      	ldr	r3, [pc, #24]	; (400ed4 <osc_get_rate+0x70>)
  400ebc:	e000      	b.n	400ec0 <osc_get_rate+0x5c>
	}

	return 0;
  400ebe:	2300      	movs	r3, #0
}
  400ec0:	4618      	mov	r0, r3
  400ec2:	370c      	adds	r7, #12
  400ec4:	46bd      	mov	sp, r7
  400ec6:	bc80      	pop	{r7}
  400ec8:	4770      	bx	lr
  400eca:	bf00      	nop
  400ecc:	003d0900 	.word	0x003d0900
  400ed0:	007a1200 	.word	0x007a1200
  400ed4:	00b71b00 	.word	0x00b71b00

00400ed8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400ed8:	b580      	push	{r7, lr}
  400eda:	b082      	sub	sp, #8
  400edc:	af00      	add	r7, sp, #0
  400ede:	4603      	mov	r3, r0
  400ee0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400ee2:	bf00      	nop
  400ee4:	79fb      	ldrb	r3, [r7, #7]
  400ee6:	4618      	mov	r0, r3
  400ee8:	4b05      	ldr	r3, [pc, #20]	; (400f00 <osc_wait_ready+0x28>)
  400eea:	4798      	blx	r3
  400eec:	4603      	mov	r3, r0
  400eee:	f083 0301 	eor.w	r3, r3, #1
  400ef2:	b2db      	uxtb	r3, r3
  400ef4:	2b00      	cmp	r3, #0
  400ef6:	d1f5      	bne.n	400ee4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400ef8:	bf00      	nop
  400efa:	3708      	adds	r7, #8
  400efc:	46bd      	mov	sp, r7
  400efe:	bd80      	pop	{r7, pc}
  400f00:	00400df5 	.word	0x00400df5

00400f04 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400f04:	b580      	push	{r7, lr}
  400f06:	b086      	sub	sp, #24
  400f08:	af00      	add	r7, sp, #0
  400f0a:	60f8      	str	r0, [r7, #12]
  400f0c:	607a      	str	r2, [r7, #4]
  400f0e:	603b      	str	r3, [r7, #0]
  400f10:	460b      	mov	r3, r1
  400f12:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400f14:	7afb      	ldrb	r3, [r7, #11]
  400f16:	4618      	mov	r0, r3
  400f18:	4b0d      	ldr	r3, [pc, #52]	; (400f50 <pll_config_init+0x4c>)
  400f1a:	4798      	blx	r3
  400f1c:	4602      	mov	r2, r0
  400f1e:	687b      	ldr	r3, [r7, #4]
  400f20:	fbb2 f3f3 	udiv	r3, r2, r3
  400f24:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400f26:	697b      	ldr	r3, [r7, #20]
  400f28:	683a      	ldr	r2, [r7, #0]
  400f2a:	fb02 f303 	mul.w	r3, r2, r3
  400f2e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400f30:	683b      	ldr	r3, [r7, #0]
  400f32:	3b01      	subs	r3, #1
  400f34:	041a      	lsls	r2, r3, #16
  400f36:	4b07      	ldr	r3, [pc, #28]	; (400f54 <pll_config_init+0x50>)
  400f38:	4013      	ands	r3, r2
  400f3a:	687a      	ldr	r2, [r7, #4]
  400f3c:	b2d2      	uxtb	r2, r2
  400f3e:	4313      	orrs	r3, r2
  400f40:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400f44:	68fb      	ldr	r3, [r7, #12]
  400f46:	601a      	str	r2, [r3, #0]
}
  400f48:	bf00      	nop
  400f4a:	3718      	adds	r7, #24
  400f4c:	46bd      	mov	sp, r7
  400f4e:	bd80      	pop	{r7, pc}
  400f50:	00400e65 	.word	0x00400e65
  400f54:	07ff0000 	.word	0x07ff0000

00400f58 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400f58:	b580      	push	{r7, lr}
  400f5a:	b082      	sub	sp, #8
  400f5c:	af00      	add	r7, sp, #0
  400f5e:	6078      	str	r0, [r7, #4]
  400f60:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400f62:	683b      	ldr	r3, [r7, #0]
  400f64:	2b00      	cmp	r3, #0
  400f66:	d108      	bne.n	400f7a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400f68:	4b09      	ldr	r3, [pc, #36]	; (400f90 <pll_enable+0x38>)
  400f6a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400f6c:	4a09      	ldr	r2, [pc, #36]	; (400f94 <pll_enable+0x3c>)
  400f6e:	687b      	ldr	r3, [r7, #4]
  400f70:	681b      	ldr	r3, [r3, #0]
  400f72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400f76:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400f78:	e005      	b.n	400f86 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400f7a:	4b07      	ldr	r3, [pc, #28]	; (400f98 <pll_enable+0x40>)
  400f7c:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400f7e:	4a05      	ldr	r2, [pc, #20]	; (400f94 <pll_enable+0x3c>)
  400f80:	687b      	ldr	r3, [r7, #4]
  400f82:	681b      	ldr	r3, [r3, #0]
  400f84:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  400f86:	bf00      	nop
  400f88:	3708      	adds	r7, #8
  400f8a:	46bd      	mov	sp, r7
  400f8c:	bd80      	pop	{r7, pc}
  400f8e:	bf00      	nop
  400f90:	004018e1 	.word	0x004018e1
  400f94:	400e0400 	.word	0x400e0400
  400f98:	00401911 	.word	0x00401911

00400f9c <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400f9c:	b580      	push	{r7, lr}
  400f9e:	b082      	sub	sp, #8
  400fa0:	af00      	add	r7, sp, #0
  400fa2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	2b00      	cmp	r3, #0
  400fa8:	d103      	bne.n	400fb2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400faa:	4b05      	ldr	r3, [pc, #20]	; (400fc0 <pll_is_locked+0x24>)
  400fac:	4798      	blx	r3
  400fae:	4603      	mov	r3, r0
  400fb0:	e002      	b.n	400fb8 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400fb2:	4b04      	ldr	r3, [pc, #16]	; (400fc4 <pll_is_locked+0x28>)
  400fb4:	4798      	blx	r3
  400fb6:	4603      	mov	r3, r0
	}
}
  400fb8:	4618      	mov	r0, r3
  400fba:	3708      	adds	r7, #8
  400fbc:	46bd      	mov	sp, r7
  400fbe:	bd80      	pop	{r7, pc}
  400fc0:	004018f9 	.word	0x004018f9
  400fc4:	00401929 	.word	0x00401929

00400fc8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400fc8:	b580      	push	{r7, lr}
  400fca:	b082      	sub	sp, #8
  400fcc:	af00      	add	r7, sp, #0
  400fce:	4603      	mov	r3, r0
  400fd0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400fd2:	79fb      	ldrb	r3, [r7, #7]
  400fd4:	3b03      	subs	r3, #3
  400fd6:	2b04      	cmp	r3, #4
  400fd8:	d808      	bhi.n	400fec <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400fda:	79fb      	ldrb	r3, [r7, #7]
  400fdc:	4618      	mov	r0, r3
  400fde:	4b06      	ldr	r3, [pc, #24]	; (400ff8 <pll_enable_source+0x30>)
  400fe0:	4798      	blx	r3
		osc_wait_ready(e_src);
  400fe2:	79fb      	ldrb	r3, [r7, #7]
  400fe4:	4618      	mov	r0, r3
  400fe6:	4b05      	ldr	r3, [pc, #20]	; (400ffc <pll_enable_source+0x34>)
  400fe8:	4798      	blx	r3
		break;
  400fea:	e000      	b.n	400fee <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400fec:	bf00      	nop
	}
}
  400fee:	bf00      	nop
  400ff0:	3708      	adds	r7, #8
  400ff2:	46bd      	mov	sp, r7
  400ff4:	bd80      	pop	{r7, pc}
  400ff6:	bf00      	nop
  400ff8:	00400d6d 	.word	0x00400d6d
  400ffc:	00400ed9 	.word	0x00400ed9

00401000 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401000:	b580      	push	{r7, lr}
  401002:	b082      	sub	sp, #8
  401004:	af00      	add	r7, sp, #0
  401006:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401008:	bf00      	nop
  40100a:	6878      	ldr	r0, [r7, #4]
  40100c:	4b04      	ldr	r3, [pc, #16]	; (401020 <pll_wait_for_lock+0x20>)
  40100e:	4798      	blx	r3
  401010:	4603      	mov	r3, r0
  401012:	2b00      	cmp	r3, #0
  401014:	d0f9      	beq.n	40100a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401016:	2300      	movs	r3, #0
}
  401018:	4618      	mov	r0, r3
  40101a:	3708      	adds	r7, #8
  40101c:	46bd      	mov	sp, r7
  40101e:	bd80      	pop	{r7, pc}
  401020:	00400f9d 	.word	0x00400f9d

00401024 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401024:	b580      	push	{r7, lr}
  401026:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401028:	2006      	movs	r0, #6
  40102a:	4b04      	ldr	r3, [pc, #16]	; (40103c <sysclk_get_main_hz+0x18>)
  40102c:	4798      	blx	r3
  40102e:	4602      	mov	r2, r0
  401030:	4613      	mov	r3, r2
  401032:	009b      	lsls	r3, r3, #2
  401034:	4413      	add	r3, r2
  401036:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401038:	4618      	mov	r0, r3
  40103a:	bd80      	pop	{r7, pc}
  40103c:	00400e65 	.word	0x00400e65

00401040 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401040:	b580      	push	{r7, lr}
  401042:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401044:	4b02      	ldr	r3, [pc, #8]	; (401050 <sysclk_get_cpu_hz+0x10>)
  401046:	4798      	blx	r3
  401048:	4603      	mov	r3, r0
  40104a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40104c:	4618      	mov	r0, r3
  40104e:	bd80      	pop	{r7, pc}
  401050:	00401025 	.word	0x00401025

00401054 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401054:	b590      	push	{r4, r7, lr}
  401056:	b083      	sub	sp, #12
  401058:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40105a:	4811      	ldr	r0, [pc, #68]	; (4010a0 <sysclk_init+0x4c>)
  40105c:	4b11      	ldr	r3, [pc, #68]	; (4010a4 <sysclk_init+0x50>)
  40105e:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401060:	2006      	movs	r0, #6
  401062:	4b11      	ldr	r3, [pc, #68]	; (4010a8 <sysclk_init+0x54>)
  401064:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401066:	1d38      	adds	r0, r7, #4
  401068:	2314      	movs	r3, #20
  40106a:	2201      	movs	r2, #1
  40106c:	2106      	movs	r1, #6
  40106e:	4c0f      	ldr	r4, [pc, #60]	; (4010ac <sysclk_init+0x58>)
  401070:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401072:	1d3b      	adds	r3, r7, #4
  401074:	2100      	movs	r1, #0
  401076:	4618      	mov	r0, r3
  401078:	4b0d      	ldr	r3, [pc, #52]	; (4010b0 <sysclk_init+0x5c>)
  40107a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40107c:	2000      	movs	r0, #0
  40107e:	4b0d      	ldr	r3, [pc, #52]	; (4010b4 <sysclk_init+0x60>)
  401080:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401082:	2010      	movs	r0, #16
  401084:	4b0c      	ldr	r3, [pc, #48]	; (4010b8 <sysclk_init+0x64>)
  401086:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401088:	4b0c      	ldr	r3, [pc, #48]	; (4010bc <sysclk_init+0x68>)
  40108a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40108c:	4b0c      	ldr	r3, [pc, #48]	; (4010c0 <sysclk_init+0x6c>)
  40108e:	4798      	blx	r3
  401090:	4603      	mov	r3, r0
  401092:	4618      	mov	r0, r3
  401094:	4b03      	ldr	r3, [pc, #12]	; (4010a4 <sysclk_init+0x50>)
  401096:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401098:	bf00      	nop
  40109a:	370c      	adds	r7, #12
  40109c:	46bd      	mov	sp, r7
  40109e:	bd90      	pop	{r4, r7, pc}
  4010a0:	07270e00 	.word	0x07270e00
  4010a4:	00401cf5 	.word	0x00401cf5
  4010a8:	00400fc9 	.word	0x00400fc9
  4010ac:	00400f05 	.word	0x00400f05
  4010b0:	00400f59 	.word	0x00400f59
  4010b4:	00401001 	.word	0x00401001
  4010b8:	004016f5 	.word	0x004016f5
  4010bc:	00401b59 	.word	0x00401b59
  4010c0:	00401041 	.word	0x00401041

004010c4 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4010c4:	b480      	push	{r7}
  4010c6:	b085      	sub	sp, #20
  4010c8:	af00      	add	r7, sp, #0
  4010ca:	60f8      	str	r0, [r7, #12]
  4010cc:	60b9      	str	r1, [r7, #8]
  4010ce:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4010d0:	68bb      	ldr	r3, [r7, #8]
  4010d2:	2b00      	cmp	r3, #0
  4010d4:	d007      	beq.n	4010e6 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  4010d6:	68bb      	ldr	r3, [r7, #8]
  4010d8:	681a      	ldr	r2, [r3, #0]
  4010da:	68fb      	ldr	r3, [r7, #12]
  4010dc:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  4010de:	68bb      	ldr	r3, [r7, #8]
  4010e0:	685a      	ldr	r2, [r3, #4]
  4010e2:	68fb      	ldr	r3, [r7, #12]
  4010e4:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  4010e6:	687b      	ldr	r3, [r7, #4]
  4010e8:	2b00      	cmp	r3, #0
  4010ea:	d007      	beq.n	4010fc <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  4010ec:	687b      	ldr	r3, [r7, #4]
  4010ee:	681a      	ldr	r2, [r3, #0]
  4010f0:	68fb      	ldr	r3, [r7, #12]
  4010f2:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  4010f4:	687b      	ldr	r3, [r7, #4]
  4010f6:	685a      	ldr	r2, [r3, #4]
  4010f8:	68fb      	ldr	r3, [r7, #12]
  4010fa:	615a      	str	r2, [r3, #20]
	}
}
  4010fc:	bf00      	nop
  4010fe:	3714      	adds	r7, #20
  401100:	46bd      	mov	sp, r7
  401102:	bc80      	pop	{r7}
  401104:	4770      	bx	lr
  401106:	bf00      	nop

00401108 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  401108:	b480      	push	{r7}
  40110a:	b083      	sub	sp, #12
  40110c:	af00      	add	r7, sp, #0
  40110e:	6078      	str	r0, [r7, #4]
  401110:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  401112:	683a      	ldr	r2, [r7, #0]
  401114:	f240 1301 	movw	r3, #257	; 0x101
  401118:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40111a:	687a      	ldr	r2, [r7, #4]
  40111c:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  40111e:	bf00      	nop
  401120:	370c      	adds	r7, #12
  401122:	46bd      	mov	sp, r7
  401124:	bc80      	pop	{r7}
  401126:	4770      	bx	lr

00401128 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401128:	b480      	push	{r7}
  40112a:	b085      	sub	sp, #20
  40112c:	af00      	add	r7, sp, #0
  40112e:	60f8      	str	r0, [r7, #12]
  401130:	60b9      	str	r1, [r7, #8]
  401132:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401134:	687b      	ldr	r3, [r7, #4]
  401136:	2b00      	cmp	r3, #0
  401138:	d003      	beq.n	401142 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40113a:	68fb      	ldr	r3, [r7, #12]
  40113c:	68ba      	ldr	r2, [r7, #8]
  40113e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401140:	e002      	b.n	401148 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401142:	68fb      	ldr	r3, [r7, #12]
  401144:	68ba      	ldr	r2, [r7, #8]
  401146:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  401148:	bf00      	nop
  40114a:	3714      	adds	r7, #20
  40114c:	46bd      	mov	sp, r7
  40114e:	bc80      	pop	{r7}
  401150:	4770      	bx	lr
  401152:	bf00      	nop

00401154 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401154:	b480      	push	{r7}
  401156:	b087      	sub	sp, #28
  401158:	af00      	add	r7, sp, #0
  40115a:	60f8      	str	r0, [r7, #12]
  40115c:	60b9      	str	r1, [r7, #8]
  40115e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401160:	68fb      	ldr	r3, [r7, #12]
  401162:	687a      	ldr	r2, [r7, #4]
  401164:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401166:	68bb      	ldr	r3, [r7, #8]
  401168:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40116c:	d04a      	beq.n	401204 <pio_set_peripheral+0xb0>
  40116e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401172:	d808      	bhi.n	401186 <pio_set_peripheral+0x32>
  401174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401178:	d016      	beq.n	4011a8 <pio_set_peripheral+0x54>
  40117a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40117e:	d02c      	beq.n	4011da <pio_set_peripheral+0x86>
  401180:	2b00      	cmp	r3, #0
  401182:	d069      	beq.n	401258 <pio_set_peripheral+0x104>
  401184:	e064      	b.n	401250 <pio_set_peripheral+0xfc>
  401186:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40118a:	d065      	beq.n	401258 <pio_set_peripheral+0x104>
  40118c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401190:	d803      	bhi.n	40119a <pio_set_peripheral+0x46>
  401192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401196:	d04a      	beq.n	40122e <pio_set_peripheral+0xda>
  401198:	e05a      	b.n	401250 <pio_set_peripheral+0xfc>
  40119a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40119e:	d05b      	beq.n	401258 <pio_set_peripheral+0x104>
  4011a0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4011a4:	d058      	beq.n	401258 <pio_set_peripheral+0x104>
  4011a6:	e053      	b.n	401250 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011a8:	68fb      	ldr	r3, [r7, #12]
  4011aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4011ac:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4011ae:	68fb      	ldr	r3, [r7, #12]
  4011b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4011b2:	687b      	ldr	r3, [r7, #4]
  4011b4:	43d9      	mvns	r1, r3
  4011b6:	697b      	ldr	r3, [r7, #20]
  4011b8:	400b      	ands	r3, r1
  4011ba:	401a      	ands	r2, r3
  4011bc:	68fb      	ldr	r3, [r7, #12]
  4011be:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4011c0:	68fb      	ldr	r3, [r7, #12]
  4011c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4011c4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4011c6:	68fb      	ldr	r3, [r7, #12]
  4011c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4011ca:	687b      	ldr	r3, [r7, #4]
  4011cc:	43d9      	mvns	r1, r3
  4011ce:	697b      	ldr	r3, [r7, #20]
  4011d0:	400b      	ands	r3, r1
  4011d2:	401a      	ands	r2, r3
  4011d4:	68fb      	ldr	r3, [r7, #12]
  4011d6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4011d8:	e03a      	b.n	401250 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011da:	68fb      	ldr	r3, [r7, #12]
  4011dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4011de:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4011e0:	687a      	ldr	r2, [r7, #4]
  4011e2:	697b      	ldr	r3, [r7, #20]
  4011e4:	431a      	orrs	r2, r3
  4011e6:	68fb      	ldr	r3, [r7, #12]
  4011e8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4011ea:	68fb      	ldr	r3, [r7, #12]
  4011ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4011ee:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4011f0:	68fb      	ldr	r3, [r7, #12]
  4011f2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4011f4:	687b      	ldr	r3, [r7, #4]
  4011f6:	43d9      	mvns	r1, r3
  4011f8:	697b      	ldr	r3, [r7, #20]
  4011fa:	400b      	ands	r3, r1
  4011fc:	401a      	ands	r2, r3
  4011fe:	68fb      	ldr	r3, [r7, #12]
  401200:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401202:	e025      	b.n	401250 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401204:	68fb      	ldr	r3, [r7, #12]
  401206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401208:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40120a:	68fb      	ldr	r3, [r7, #12]
  40120c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40120e:	687b      	ldr	r3, [r7, #4]
  401210:	43d9      	mvns	r1, r3
  401212:	697b      	ldr	r3, [r7, #20]
  401214:	400b      	ands	r3, r1
  401216:	401a      	ands	r2, r3
  401218:	68fb      	ldr	r3, [r7, #12]
  40121a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40121c:	68fb      	ldr	r3, [r7, #12]
  40121e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401220:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401222:	687a      	ldr	r2, [r7, #4]
  401224:	697b      	ldr	r3, [r7, #20]
  401226:	431a      	orrs	r2, r3
  401228:	68fb      	ldr	r3, [r7, #12]
  40122a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40122c:	e010      	b.n	401250 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40122e:	68fb      	ldr	r3, [r7, #12]
  401230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401232:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401234:	687a      	ldr	r2, [r7, #4]
  401236:	697b      	ldr	r3, [r7, #20]
  401238:	431a      	orrs	r2, r3
  40123a:	68fb      	ldr	r3, [r7, #12]
  40123c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40123e:	68fb      	ldr	r3, [r7, #12]
  401240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401242:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401244:	687a      	ldr	r2, [r7, #4]
  401246:	697b      	ldr	r3, [r7, #20]
  401248:	431a      	orrs	r2, r3
  40124a:	68fb      	ldr	r3, [r7, #12]
  40124c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40124e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401250:	68fb      	ldr	r3, [r7, #12]
  401252:	687a      	ldr	r2, [r7, #4]
  401254:	605a      	str	r2, [r3, #4]
  401256:	e000      	b.n	40125a <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  401258:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40125a:	371c      	adds	r7, #28
  40125c:	46bd      	mov	sp, r7
  40125e:	bc80      	pop	{r7}
  401260:	4770      	bx	lr
  401262:	bf00      	nop

00401264 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401264:	b580      	push	{r7, lr}
  401266:	b084      	sub	sp, #16
  401268:	af00      	add	r7, sp, #0
  40126a:	60f8      	str	r0, [r7, #12]
  40126c:	60b9      	str	r1, [r7, #8]
  40126e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401270:	68b9      	ldr	r1, [r7, #8]
  401272:	68f8      	ldr	r0, [r7, #12]
  401274:	4b19      	ldr	r3, [pc, #100]	; (4012dc <pio_set_input+0x78>)
  401276:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401278:	687b      	ldr	r3, [r7, #4]
  40127a:	f003 0301 	and.w	r3, r3, #1
  40127e:	461a      	mov	r2, r3
  401280:	68b9      	ldr	r1, [r7, #8]
  401282:	68f8      	ldr	r0, [r7, #12]
  401284:	4b16      	ldr	r3, [pc, #88]	; (4012e0 <pio_set_input+0x7c>)
  401286:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401288:	687b      	ldr	r3, [r7, #4]
  40128a:	f003 030a 	and.w	r3, r3, #10
  40128e:	2b00      	cmp	r3, #0
  401290:	d003      	beq.n	40129a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401292:	68fb      	ldr	r3, [r7, #12]
  401294:	68ba      	ldr	r2, [r7, #8]
  401296:	621a      	str	r2, [r3, #32]
  401298:	e002      	b.n	4012a0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40129a:	68fb      	ldr	r3, [r7, #12]
  40129c:	68ba      	ldr	r2, [r7, #8]
  40129e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4012a0:	687b      	ldr	r3, [r7, #4]
  4012a2:	f003 0302 	and.w	r3, r3, #2
  4012a6:	2b00      	cmp	r3, #0
  4012a8:	d004      	beq.n	4012b4 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4012aa:	68fb      	ldr	r3, [r7, #12]
  4012ac:	68ba      	ldr	r2, [r7, #8]
  4012ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4012b2:	e008      	b.n	4012c6 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4012b4:	687b      	ldr	r3, [r7, #4]
  4012b6:	f003 0308 	and.w	r3, r3, #8
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	d003      	beq.n	4012c6 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4012be:	68fb      	ldr	r3, [r7, #12]
  4012c0:	68ba      	ldr	r2, [r7, #8]
  4012c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4012c6:	68fb      	ldr	r3, [r7, #12]
  4012c8:	68ba      	ldr	r2, [r7, #8]
  4012ca:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4012cc:	68fb      	ldr	r3, [r7, #12]
  4012ce:	68ba      	ldr	r2, [r7, #8]
  4012d0:	601a      	str	r2, [r3, #0]
}
  4012d2:	bf00      	nop
  4012d4:	3710      	adds	r7, #16
  4012d6:	46bd      	mov	sp, r7
  4012d8:	bd80      	pop	{r7, pc}
  4012da:	bf00      	nop
  4012dc:	00401349 	.word	0x00401349
  4012e0:	00401129 	.word	0x00401129

004012e4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4012e4:	b580      	push	{r7, lr}
  4012e6:	b084      	sub	sp, #16
  4012e8:	af00      	add	r7, sp, #0
  4012ea:	60f8      	str	r0, [r7, #12]
  4012ec:	60b9      	str	r1, [r7, #8]
  4012ee:	607a      	str	r2, [r7, #4]
  4012f0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4012f2:	68b9      	ldr	r1, [r7, #8]
  4012f4:	68f8      	ldr	r0, [r7, #12]
  4012f6:	4b12      	ldr	r3, [pc, #72]	; (401340 <pio_set_output+0x5c>)
  4012f8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4012fa:	69ba      	ldr	r2, [r7, #24]
  4012fc:	68b9      	ldr	r1, [r7, #8]
  4012fe:	68f8      	ldr	r0, [r7, #12]
  401300:	4b10      	ldr	r3, [pc, #64]	; (401344 <pio_set_output+0x60>)
  401302:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401304:	683b      	ldr	r3, [r7, #0]
  401306:	2b00      	cmp	r3, #0
  401308:	d003      	beq.n	401312 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40130a:	68fb      	ldr	r3, [r7, #12]
  40130c:	68ba      	ldr	r2, [r7, #8]
  40130e:	651a      	str	r2, [r3, #80]	; 0x50
  401310:	e002      	b.n	401318 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401312:	68fb      	ldr	r3, [r7, #12]
  401314:	68ba      	ldr	r2, [r7, #8]
  401316:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401318:	687b      	ldr	r3, [r7, #4]
  40131a:	2b00      	cmp	r3, #0
  40131c:	d003      	beq.n	401326 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40131e:	68fb      	ldr	r3, [r7, #12]
  401320:	68ba      	ldr	r2, [r7, #8]
  401322:	631a      	str	r2, [r3, #48]	; 0x30
  401324:	e002      	b.n	40132c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401326:	68fb      	ldr	r3, [r7, #12]
  401328:	68ba      	ldr	r2, [r7, #8]
  40132a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40132c:	68fb      	ldr	r3, [r7, #12]
  40132e:	68ba      	ldr	r2, [r7, #8]
  401330:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401332:	68fb      	ldr	r3, [r7, #12]
  401334:	68ba      	ldr	r2, [r7, #8]
  401336:	601a      	str	r2, [r3, #0]
}
  401338:	bf00      	nop
  40133a:	3710      	adds	r7, #16
  40133c:	46bd      	mov	sp, r7
  40133e:	bd80      	pop	{r7, pc}
  401340:	00401349 	.word	0x00401349
  401344:	00401129 	.word	0x00401129

00401348 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401348:	b480      	push	{r7}
  40134a:	b083      	sub	sp, #12
  40134c:	af00      	add	r7, sp, #0
  40134e:	6078      	str	r0, [r7, #4]
  401350:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401352:	687b      	ldr	r3, [r7, #4]
  401354:	683a      	ldr	r2, [r7, #0]
  401356:	645a      	str	r2, [r3, #68]	; 0x44
}
  401358:	bf00      	nop
  40135a:	370c      	adds	r7, #12
  40135c:	46bd      	mov	sp, r7
  40135e:	bc80      	pop	{r7}
  401360:	4770      	bx	lr
  401362:	bf00      	nop

00401364 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401364:	b480      	push	{r7}
  401366:	b083      	sub	sp, #12
  401368:	af00      	add	r7, sp, #0
  40136a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40136c:	687b      	ldr	r3, [r7, #4]
  40136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401370:	4618      	mov	r0, r3
  401372:	370c      	adds	r7, #12
  401374:	46bd      	mov	sp, r7
  401376:	bc80      	pop	{r7}
  401378:	4770      	bx	lr
  40137a:	bf00      	nop

0040137c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40137c:	b480      	push	{r7}
  40137e:	b083      	sub	sp, #12
  401380:	af00      	add	r7, sp, #0
  401382:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401384:	687b      	ldr	r3, [r7, #4]
  401386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401388:	4618      	mov	r0, r3
  40138a:	370c      	adds	r7, #12
  40138c:	46bd      	mov	sp, r7
  40138e:	bc80      	pop	{r7}
  401390:	4770      	bx	lr
  401392:	bf00      	nop

00401394 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  401394:	b580      	push	{r7, lr}
  401396:	b084      	sub	sp, #16
  401398:	af00      	add	r7, sp, #0
  40139a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40139c:	6878      	ldr	r0, [r7, #4]
  40139e:	4b08      	ldr	r3, [pc, #32]	; (4013c0 <pio_set_pin_high+0x2c>)
  4013a0:	4798      	blx	r3
  4013a2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4013a4:	687b      	ldr	r3, [r7, #4]
  4013a6:	f003 031f 	and.w	r3, r3, #31
  4013aa:	2201      	movs	r2, #1
  4013ac:	fa02 f303 	lsl.w	r3, r2, r3
  4013b0:	461a      	mov	r2, r3
  4013b2:	68fb      	ldr	r3, [r7, #12]
  4013b4:	631a      	str	r2, [r3, #48]	; 0x30
}
  4013b6:	bf00      	nop
  4013b8:	3710      	adds	r7, #16
  4013ba:	46bd      	mov	sp, r7
  4013bc:	bd80      	pop	{r7, pc}
  4013be:	bf00      	nop
  4013c0:	004016d1 	.word	0x004016d1

004013c4 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  4013c4:	b580      	push	{r7, lr}
  4013c6:	b084      	sub	sp, #16
  4013c8:	af00      	add	r7, sp, #0
  4013ca:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4013cc:	6878      	ldr	r0, [r7, #4]
  4013ce:	4b08      	ldr	r3, [pc, #32]	; (4013f0 <pio_set_pin_low+0x2c>)
  4013d0:	4798      	blx	r3
  4013d2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4013d4:	687b      	ldr	r3, [r7, #4]
  4013d6:	f003 031f 	and.w	r3, r3, #31
  4013da:	2201      	movs	r2, #1
  4013dc:	fa02 f303 	lsl.w	r3, r2, r3
  4013e0:	461a      	mov	r2, r3
  4013e2:	68fb      	ldr	r3, [r7, #12]
  4013e4:	635a      	str	r2, [r3, #52]	; 0x34
}
  4013e6:	bf00      	nop
  4013e8:	3710      	adds	r7, #16
  4013ea:	46bd      	mov	sp, r7
  4013ec:	bd80      	pop	{r7, pc}
  4013ee:	bf00      	nop
  4013f0:	004016d1 	.word	0x004016d1

004013f4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4013f4:	b590      	push	{r4, r7, lr}
  4013f6:	b087      	sub	sp, #28
  4013f8:	af02      	add	r7, sp, #8
  4013fa:	6078      	str	r0, [r7, #4]
  4013fc:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4013fe:	6878      	ldr	r0, [r7, #4]
  401400:	4b63      	ldr	r3, [pc, #396]	; (401590 <pio_configure_pin+0x19c>)
  401402:	4798      	blx	r3
  401404:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401406:	683b      	ldr	r3, [r7, #0]
  401408:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40140c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401410:	d067      	beq.n	4014e2 <pio_configure_pin+0xee>
  401412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401416:	d809      	bhi.n	40142c <pio_configure_pin+0x38>
  401418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40141c:	d02b      	beq.n	401476 <pio_configure_pin+0x82>
  40141e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401422:	d043      	beq.n	4014ac <pio_configure_pin+0xb8>
  401424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401428:	d00a      	beq.n	401440 <pio_configure_pin+0x4c>
  40142a:	e0a9      	b.n	401580 <pio_configure_pin+0x18c>
  40142c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401430:	d07e      	beq.n	401530 <pio_configure_pin+0x13c>
  401432:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401436:	d07b      	beq.n	401530 <pio_configure_pin+0x13c>
  401438:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40143c:	d06c      	beq.n	401518 <pio_configure_pin+0x124>
  40143e:	e09f      	b.n	401580 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401440:	687b      	ldr	r3, [r7, #4]
  401442:	f003 031f 	and.w	r3, r3, #31
  401446:	2201      	movs	r2, #1
  401448:	fa02 f303 	lsl.w	r3, r2, r3
  40144c:	461a      	mov	r2, r3
  40144e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401452:	68f8      	ldr	r0, [r7, #12]
  401454:	4b4f      	ldr	r3, [pc, #316]	; (401594 <pio_configure_pin+0x1a0>)
  401456:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401458:	687b      	ldr	r3, [r7, #4]
  40145a:	f003 031f 	and.w	r3, r3, #31
  40145e:	2201      	movs	r2, #1
  401460:	fa02 f303 	lsl.w	r3, r2, r3
  401464:	4619      	mov	r1, r3
  401466:	683b      	ldr	r3, [r7, #0]
  401468:	f003 0301 	and.w	r3, r3, #1
  40146c:	461a      	mov	r2, r3
  40146e:	68f8      	ldr	r0, [r7, #12]
  401470:	4b49      	ldr	r3, [pc, #292]	; (401598 <pio_configure_pin+0x1a4>)
  401472:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401474:	e086      	b.n	401584 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401476:	687b      	ldr	r3, [r7, #4]
  401478:	f003 031f 	and.w	r3, r3, #31
  40147c:	2201      	movs	r2, #1
  40147e:	fa02 f303 	lsl.w	r3, r2, r3
  401482:	461a      	mov	r2, r3
  401484:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401488:	68f8      	ldr	r0, [r7, #12]
  40148a:	4b42      	ldr	r3, [pc, #264]	; (401594 <pio_configure_pin+0x1a0>)
  40148c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40148e:	687b      	ldr	r3, [r7, #4]
  401490:	f003 031f 	and.w	r3, r3, #31
  401494:	2201      	movs	r2, #1
  401496:	fa02 f303 	lsl.w	r3, r2, r3
  40149a:	4619      	mov	r1, r3
  40149c:	683b      	ldr	r3, [r7, #0]
  40149e:	f003 0301 	and.w	r3, r3, #1
  4014a2:	461a      	mov	r2, r3
  4014a4:	68f8      	ldr	r0, [r7, #12]
  4014a6:	4b3c      	ldr	r3, [pc, #240]	; (401598 <pio_configure_pin+0x1a4>)
  4014a8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4014aa:	e06b      	b.n	401584 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4014ac:	687b      	ldr	r3, [r7, #4]
  4014ae:	f003 031f 	and.w	r3, r3, #31
  4014b2:	2201      	movs	r2, #1
  4014b4:	fa02 f303 	lsl.w	r3, r2, r3
  4014b8:	461a      	mov	r2, r3
  4014ba:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4014be:	68f8      	ldr	r0, [r7, #12]
  4014c0:	4b34      	ldr	r3, [pc, #208]	; (401594 <pio_configure_pin+0x1a0>)
  4014c2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4014c4:	687b      	ldr	r3, [r7, #4]
  4014c6:	f003 031f 	and.w	r3, r3, #31
  4014ca:	2201      	movs	r2, #1
  4014cc:	fa02 f303 	lsl.w	r3, r2, r3
  4014d0:	4619      	mov	r1, r3
  4014d2:	683b      	ldr	r3, [r7, #0]
  4014d4:	f003 0301 	and.w	r3, r3, #1
  4014d8:	461a      	mov	r2, r3
  4014da:	68f8      	ldr	r0, [r7, #12]
  4014dc:	4b2e      	ldr	r3, [pc, #184]	; (401598 <pio_configure_pin+0x1a4>)
  4014de:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4014e0:	e050      	b.n	401584 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4014e2:	687b      	ldr	r3, [r7, #4]
  4014e4:	f003 031f 	and.w	r3, r3, #31
  4014e8:	2201      	movs	r2, #1
  4014ea:	fa02 f303 	lsl.w	r3, r2, r3
  4014ee:	461a      	mov	r2, r3
  4014f0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4014f4:	68f8      	ldr	r0, [r7, #12]
  4014f6:	4b27      	ldr	r3, [pc, #156]	; (401594 <pio_configure_pin+0x1a0>)
  4014f8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4014fa:	687b      	ldr	r3, [r7, #4]
  4014fc:	f003 031f 	and.w	r3, r3, #31
  401500:	2201      	movs	r2, #1
  401502:	fa02 f303 	lsl.w	r3, r2, r3
  401506:	4619      	mov	r1, r3
  401508:	683b      	ldr	r3, [r7, #0]
  40150a:	f003 0301 	and.w	r3, r3, #1
  40150e:	461a      	mov	r2, r3
  401510:	68f8      	ldr	r0, [r7, #12]
  401512:	4b21      	ldr	r3, [pc, #132]	; (401598 <pio_configure_pin+0x1a4>)
  401514:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401516:	e035      	b.n	401584 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401518:	687b      	ldr	r3, [r7, #4]
  40151a:	f003 031f 	and.w	r3, r3, #31
  40151e:	2201      	movs	r2, #1
  401520:	fa02 f303 	lsl.w	r3, r2, r3
  401524:	683a      	ldr	r2, [r7, #0]
  401526:	4619      	mov	r1, r3
  401528:	68f8      	ldr	r0, [r7, #12]
  40152a:	4b1c      	ldr	r3, [pc, #112]	; (40159c <pio_configure_pin+0x1a8>)
  40152c:	4798      	blx	r3
		break;
  40152e:	e029      	b.n	401584 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401530:	687b      	ldr	r3, [r7, #4]
  401532:	f003 031f 	and.w	r3, r3, #31
  401536:	2201      	movs	r2, #1
  401538:	fa02 f303 	lsl.w	r3, r2, r3
  40153c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40153e:	683b      	ldr	r3, [r7, #0]
  401540:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401544:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401548:	bf0c      	ite	eq
  40154a:	2301      	moveq	r3, #1
  40154c:	2300      	movne	r3, #0
  40154e:	b2db      	uxtb	r3, r3
  401550:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401552:	683b      	ldr	r3, [r7, #0]
  401554:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401558:	2b00      	cmp	r3, #0
  40155a:	bf14      	ite	ne
  40155c:	2301      	movne	r3, #1
  40155e:	2300      	moveq	r3, #0
  401560:	b2db      	uxtb	r3, r3
  401562:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401564:	683b      	ldr	r3, [r7, #0]
  401566:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40156a:	2b00      	cmp	r3, #0
  40156c:	bf14      	ite	ne
  40156e:	2301      	movne	r3, #1
  401570:	2300      	moveq	r3, #0
  401572:	b2db      	uxtb	r3, r3
  401574:	9300      	str	r3, [sp, #0]
  401576:	4603      	mov	r3, r0
  401578:	68f8      	ldr	r0, [r7, #12]
  40157a:	4c09      	ldr	r4, [pc, #36]	; (4015a0 <pio_configure_pin+0x1ac>)
  40157c:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40157e:	e001      	b.n	401584 <pio_configure_pin+0x190>

	default:
		return 0;
  401580:	2300      	movs	r3, #0
  401582:	e000      	b.n	401586 <pio_configure_pin+0x192>
	}

	return 1;
  401584:	2301      	movs	r3, #1
}
  401586:	4618      	mov	r0, r3
  401588:	3714      	adds	r7, #20
  40158a:	46bd      	mov	sp, r7
  40158c:	bd90      	pop	{r4, r7, pc}
  40158e:	bf00      	nop
  401590:	004016d1 	.word	0x004016d1
  401594:	00401155 	.word	0x00401155
  401598:	00401129 	.word	0x00401129
  40159c:	00401265 	.word	0x00401265
  4015a0:	004012e5 	.word	0x004012e5

004015a4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4015a4:	b590      	push	{r4, r7, lr}
  4015a6:	b087      	sub	sp, #28
  4015a8:	af02      	add	r7, sp, #8
  4015aa:	60f8      	str	r0, [r7, #12]
  4015ac:	60b9      	str	r1, [r7, #8]
  4015ae:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4015b0:	687b      	ldr	r3, [r7, #4]
  4015b2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4015b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4015ba:	d043      	beq.n	401644 <pio_configure_pin_group+0xa0>
  4015bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4015c0:	d809      	bhi.n	4015d6 <pio_configure_pin_group+0x32>
  4015c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4015c6:	d01f      	beq.n	401608 <pio_configure_pin_group+0x64>
  4015c8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4015cc:	d02b      	beq.n	401626 <pio_configure_pin_group+0x82>
  4015ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4015d2:	d00a      	beq.n	4015ea <pio_configure_pin_group+0x46>
  4015d4:	e06d      	b.n	4016b2 <pio_configure_pin_group+0x10e>
  4015d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4015da:	d048      	beq.n	40166e <pio_configure_pin_group+0xca>
  4015dc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4015e0:	d045      	beq.n	40166e <pio_configure_pin_group+0xca>
  4015e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4015e6:	d03c      	beq.n	401662 <pio_configure_pin_group+0xbe>
  4015e8:	e063      	b.n	4016b2 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4015ea:	68ba      	ldr	r2, [r7, #8]
  4015ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4015f0:	68f8      	ldr	r0, [r7, #12]
  4015f2:	4b33      	ldr	r3, [pc, #204]	; (4016c0 <pio_configure_pin_group+0x11c>)
  4015f4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	f003 0301 	and.w	r3, r3, #1
  4015fc:	461a      	mov	r2, r3
  4015fe:	68b9      	ldr	r1, [r7, #8]
  401600:	68f8      	ldr	r0, [r7, #12]
  401602:	4b30      	ldr	r3, [pc, #192]	; (4016c4 <pio_configure_pin_group+0x120>)
  401604:	4798      	blx	r3
		break;
  401606:	e056      	b.n	4016b6 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401608:	68ba      	ldr	r2, [r7, #8]
  40160a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40160e:	68f8      	ldr	r0, [r7, #12]
  401610:	4b2b      	ldr	r3, [pc, #172]	; (4016c0 <pio_configure_pin_group+0x11c>)
  401612:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401614:	687b      	ldr	r3, [r7, #4]
  401616:	f003 0301 	and.w	r3, r3, #1
  40161a:	461a      	mov	r2, r3
  40161c:	68b9      	ldr	r1, [r7, #8]
  40161e:	68f8      	ldr	r0, [r7, #12]
  401620:	4b28      	ldr	r3, [pc, #160]	; (4016c4 <pio_configure_pin_group+0x120>)
  401622:	4798      	blx	r3
		break;
  401624:	e047      	b.n	4016b6 <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401626:	68ba      	ldr	r2, [r7, #8]
  401628:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40162c:	68f8      	ldr	r0, [r7, #12]
  40162e:	4b24      	ldr	r3, [pc, #144]	; (4016c0 <pio_configure_pin_group+0x11c>)
  401630:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401632:	687b      	ldr	r3, [r7, #4]
  401634:	f003 0301 	and.w	r3, r3, #1
  401638:	461a      	mov	r2, r3
  40163a:	68b9      	ldr	r1, [r7, #8]
  40163c:	68f8      	ldr	r0, [r7, #12]
  40163e:	4b21      	ldr	r3, [pc, #132]	; (4016c4 <pio_configure_pin_group+0x120>)
  401640:	4798      	blx	r3
		break;
  401642:	e038      	b.n	4016b6 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401644:	68ba      	ldr	r2, [r7, #8]
  401646:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40164a:	68f8      	ldr	r0, [r7, #12]
  40164c:	4b1c      	ldr	r3, [pc, #112]	; (4016c0 <pio_configure_pin_group+0x11c>)
  40164e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401650:	687b      	ldr	r3, [r7, #4]
  401652:	f003 0301 	and.w	r3, r3, #1
  401656:	461a      	mov	r2, r3
  401658:	68b9      	ldr	r1, [r7, #8]
  40165a:	68f8      	ldr	r0, [r7, #12]
  40165c:	4b19      	ldr	r3, [pc, #100]	; (4016c4 <pio_configure_pin_group+0x120>)
  40165e:	4798      	blx	r3
		break;
  401660:	e029      	b.n	4016b6 <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401662:	687a      	ldr	r2, [r7, #4]
  401664:	68b9      	ldr	r1, [r7, #8]
  401666:	68f8      	ldr	r0, [r7, #12]
  401668:	4b17      	ldr	r3, [pc, #92]	; (4016c8 <pio_configure_pin_group+0x124>)
  40166a:	4798      	blx	r3
		break;
  40166c:	e023      	b.n	4016b6 <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40166e:	687b      	ldr	r3, [r7, #4]
  401670:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401674:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401678:	bf0c      	ite	eq
  40167a:	2301      	moveq	r3, #1
  40167c:	2300      	movne	r3, #0
  40167e:	b2db      	uxtb	r3, r3
  401680:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401682:	687b      	ldr	r3, [r7, #4]
  401684:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401688:	2b00      	cmp	r3, #0
  40168a:	bf14      	ite	ne
  40168c:	2301      	movne	r3, #1
  40168e:	2300      	moveq	r3, #0
  401690:	b2db      	uxtb	r3, r3
  401692:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401694:	687b      	ldr	r3, [r7, #4]
  401696:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40169a:	2b00      	cmp	r3, #0
  40169c:	bf14      	ite	ne
  40169e:	2301      	movne	r3, #1
  4016a0:	2300      	moveq	r3, #0
  4016a2:	b2db      	uxtb	r3, r3
  4016a4:	9300      	str	r3, [sp, #0]
  4016a6:	460b      	mov	r3, r1
  4016a8:	68b9      	ldr	r1, [r7, #8]
  4016aa:	68f8      	ldr	r0, [r7, #12]
  4016ac:	4c07      	ldr	r4, [pc, #28]	; (4016cc <pio_configure_pin_group+0x128>)
  4016ae:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4016b0:	e001      	b.n	4016b6 <pio_configure_pin_group+0x112>

	default:
		return 0;
  4016b2:	2300      	movs	r3, #0
  4016b4:	e000      	b.n	4016b8 <pio_configure_pin_group+0x114>
	}

	return 1;
  4016b6:	2301      	movs	r3, #1
}
  4016b8:	4618      	mov	r0, r3
  4016ba:	3714      	adds	r7, #20
  4016bc:	46bd      	mov	sp, r7
  4016be:	bd90      	pop	{r4, r7, pc}
  4016c0:	00401155 	.word	0x00401155
  4016c4:	00401129 	.word	0x00401129
  4016c8:	00401265 	.word	0x00401265
  4016cc:	004012e5 	.word	0x004012e5

004016d0 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4016d0:	b480      	push	{r7}
  4016d2:	b085      	sub	sp, #20
  4016d4:	af00      	add	r7, sp, #0
  4016d6:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	095b      	lsrs	r3, r3, #5
  4016dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4016e0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4016e4:	025b      	lsls	r3, r3, #9
  4016e6:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4016e8:	68fb      	ldr	r3, [r7, #12]
}
  4016ea:	4618      	mov	r0, r3
  4016ec:	3714      	adds	r7, #20
  4016ee:	46bd      	mov	sp, r7
  4016f0:	bc80      	pop	{r7}
  4016f2:	4770      	bx	lr

004016f4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4016f4:	b480      	push	{r7}
  4016f6:	b085      	sub	sp, #20
  4016f8:	af00      	add	r7, sp, #0
  4016fa:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4016fc:	491c      	ldr	r1, [pc, #112]	; (401770 <pmc_switch_mck_to_pllack+0x7c>)
  4016fe:	4b1c      	ldr	r3, [pc, #112]	; (401770 <pmc_switch_mck_to_pllack+0x7c>)
  401700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401702:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401706:	687b      	ldr	r3, [r7, #4]
  401708:	4313      	orrs	r3, r2
  40170a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40170c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401710:	60fb      	str	r3, [r7, #12]
  401712:	e007      	b.n	401724 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401714:	68fb      	ldr	r3, [r7, #12]
  401716:	2b00      	cmp	r3, #0
  401718:	d101      	bne.n	40171e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40171a:	2301      	movs	r3, #1
  40171c:	e023      	b.n	401766 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40171e:	68fb      	ldr	r3, [r7, #12]
  401720:	3b01      	subs	r3, #1
  401722:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401724:	4b12      	ldr	r3, [pc, #72]	; (401770 <pmc_switch_mck_to_pllack+0x7c>)
  401726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401728:	f003 0308 	and.w	r3, r3, #8
  40172c:	2b00      	cmp	r3, #0
  40172e:	d0f1      	beq.n	401714 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401730:	4a0f      	ldr	r2, [pc, #60]	; (401770 <pmc_switch_mck_to_pllack+0x7c>)
  401732:	4b0f      	ldr	r3, [pc, #60]	; (401770 <pmc_switch_mck_to_pllack+0x7c>)
  401734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401736:	f023 0303 	bic.w	r3, r3, #3
  40173a:	f043 0302 	orr.w	r3, r3, #2
  40173e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401740:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401744:	60fb      	str	r3, [r7, #12]
  401746:	e007      	b.n	401758 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401748:	68fb      	ldr	r3, [r7, #12]
  40174a:	2b00      	cmp	r3, #0
  40174c:	d101      	bne.n	401752 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40174e:	2301      	movs	r3, #1
  401750:	e009      	b.n	401766 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401752:	68fb      	ldr	r3, [r7, #12]
  401754:	3b01      	subs	r3, #1
  401756:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401758:	4b05      	ldr	r3, [pc, #20]	; (401770 <pmc_switch_mck_to_pllack+0x7c>)
  40175a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40175c:	f003 0308 	and.w	r3, r3, #8
  401760:	2b00      	cmp	r3, #0
  401762:	d0f1      	beq.n	401748 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401764:	2300      	movs	r3, #0
}
  401766:	4618      	mov	r0, r3
  401768:	3714      	adds	r7, #20
  40176a:	46bd      	mov	sp, r7
  40176c:	bc80      	pop	{r7}
  40176e:	4770      	bx	lr
  401770:	400e0400 	.word	0x400e0400

00401774 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401774:	b480      	push	{r7}
  401776:	b083      	sub	sp, #12
  401778:	af00      	add	r7, sp, #0
  40177a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40177c:	687b      	ldr	r3, [r7, #4]
  40177e:	2b01      	cmp	r3, #1
  401780:	d107      	bne.n	401792 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401782:	4a08      	ldr	r2, [pc, #32]	; (4017a4 <pmc_switch_sclk_to_32kxtal+0x30>)
  401784:	4b07      	ldr	r3, [pc, #28]	; (4017a4 <pmc_switch_sclk_to_32kxtal+0x30>)
  401786:	689b      	ldr	r3, [r3, #8]
  401788:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40178c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401790:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401792:	4b04      	ldr	r3, [pc, #16]	; (4017a4 <pmc_switch_sclk_to_32kxtal+0x30>)
  401794:	4a04      	ldr	r2, [pc, #16]	; (4017a8 <pmc_switch_sclk_to_32kxtal+0x34>)
  401796:	601a      	str	r2, [r3, #0]
}
  401798:	bf00      	nop
  40179a:	370c      	adds	r7, #12
  40179c:	46bd      	mov	sp, r7
  40179e:	bc80      	pop	{r7}
  4017a0:	4770      	bx	lr
  4017a2:	bf00      	nop
  4017a4:	400e1410 	.word	0x400e1410
  4017a8:	a5000008 	.word	0xa5000008

004017ac <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4017ac:	b480      	push	{r7}
  4017ae:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4017b0:	4b09      	ldr	r3, [pc, #36]	; (4017d8 <pmc_osc_is_ready_32kxtal+0x2c>)
  4017b2:	695b      	ldr	r3, [r3, #20]
  4017b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4017b8:	2b00      	cmp	r3, #0
  4017ba:	d007      	beq.n	4017cc <pmc_osc_is_ready_32kxtal+0x20>
  4017bc:	4b07      	ldr	r3, [pc, #28]	; (4017dc <pmc_osc_is_ready_32kxtal+0x30>)
  4017be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4017c4:	2b00      	cmp	r3, #0
  4017c6:	d001      	beq.n	4017cc <pmc_osc_is_ready_32kxtal+0x20>
  4017c8:	2301      	movs	r3, #1
  4017ca:	e000      	b.n	4017ce <pmc_osc_is_ready_32kxtal+0x22>
  4017cc:	2300      	movs	r3, #0
}
  4017ce:	4618      	mov	r0, r3
  4017d0:	46bd      	mov	sp, r7
  4017d2:	bc80      	pop	{r7}
  4017d4:	4770      	bx	lr
  4017d6:	bf00      	nop
  4017d8:	400e1410 	.word	0x400e1410
  4017dc:	400e0400 	.word	0x400e0400

004017e0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4017e0:	b480      	push	{r7}
  4017e2:	b083      	sub	sp, #12
  4017e4:	af00      	add	r7, sp, #0
  4017e6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4017e8:	4a18      	ldr	r2, [pc, #96]	; (40184c <pmc_switch_mainck_to_fastrc+0x6c>)
  4017ea:	4b18      	ldr	r3, [pc, #96]	; (40184c <pmc_switch_mainck_to_fastrc+0x6c>)
  4017ec:	6a1b      	ldr	r3, [r3, #32]
  4017ee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4017f2:	f043 0308 	orr.w	r3, r3, #8
  4017f6:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4017f8:	bf00      	nop
  4017fa:	4b14      	ldr	r3, [pc, #80]	; (40184c <pmc_switch_mainck_to_fastrc+0x6c>)
  4017fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401802:	2b00      	cmp	r3, #0
  401804:	d0f9      	beq.n	4017fa <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401806:	4911      	ldr	r1, [pc, #68]	; (40184c <pmc_switch_mainck_to_fastrc+0x6c>)
  401808:	4b10      	ldr	r3, [pc, #64]	; (40184c <pmc_switch_mainck_to_fastrc+0x6c>)
  40180a:	6a1b      	ldr	r3, [r3, #32]
  40180c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401814:	687a      	ldr	r2, [r7, #4]
  401816:	4313      	orrs	r3, r2
  401818:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40181c:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40181e:	bf00      	nop
  401820:	4b0a      	ldr	r3, [pc, #40]	; (40184c <pmc_switch_mainck_to_fastrc+0x6c>)
  401822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401828:	2b00      	cmp	r3, #0
  40182a:	d0f9      	beq.n	401820 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40182c:	4a07      	ldr	r2, [pc, #28]	; (40184c <pmc_switch_mainck_to_fastrc+0x6c>)
  40182e:	4b07      	ldr	r3, [pc, #28]	; (40184c <pmc_switch_mainck_to_fastrc+0x6c>)
  401830:	6a1b      	ldr	r3, [r3, #32]
  401832:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40183a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40183e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401840:	bf00      	nop
  401842:	370c      	adds	r7, #12
  401844:	46bd      	mov	sp, r7
  401846:	bc80      	pop	{r7}
  401848:	4770      	bx	lr
  40184a:	bf00      	nop
  40184c:	400e0400 	.word	0x400e0400

00401850 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401850:	b480      	push	{r7}
  401852:	b083      	sub	sp, #12
  401854:	af00      	add	r7, sp, #0
  401856:	6078      	str	r0, [r7, #4]
  401858:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40185a:	687b      	ldr	r3, [r7, #4]
  40185c:	2b00      	cmp	r3, #0
  40185e:	d008      	beq.n	401872 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401860:	4916      	ldr	r1, [pc, #88]	; (4018bc <pmc_switch_mainck_to_xtal+0x6c>)
  401862:	4b16      	ldr	r3, [pc, #88]	; (4018bc <pmc_switch_mainck_to_xtal+0x6c>)
  401864:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401866:	4a16      	ldr	r2, [pc, #88]	; (4018c0 <pmc_switch_mainck_to_xtal+0x70>)
  401868:	401a      	ands	r2, r3
  40186a:	4b16      	ldr	r3, [pc, #88]	; (4018c4 <pmc_switch_mainck_to_xtal+0x74>)
  40186c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40186e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401870:	e01e      	b.n	4018b0 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401872:	4912      	ldr	r1, [pc, #72]	; (4018bc <pmc_switch_mainck_to_xtal+0x6c>)
  401874:	4b11      	ldr	r3, [pc, #68]	; (4018bc <pmc_switch_mainck_to_xtal+0x6c>)
  401876:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401878:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40187c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401880:	683a      	ldr	r2, [r7, #0]
  401882:	0212      	lsls	r2, r2, #8
  401884:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401886:	4313      	orrs	r3, r2
  401888:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40188c:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401890:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401892:	bf00      	nop
  401894:	4b09      	ldr	r3, [pc, #36]	; (4018bc <pmc_switch_mainck_to_xtal+0x6c>)
  401896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401898:	f003 0301 	and.w	r3, r3, #1
  40189c:	2b00      	cmp	r3, #0
  40189e:	d0f9      	beq.n	401894 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4018a0:	4a06      	ldr	r2, [pc, #24]	; (4018bc <pmc_switch_mainck_to_xtal+0x6c>)
  4018a2:	4b06      	ldr	r3, [pc, #24]	; (4018bc <pmc_switch_mainck_to_xtal+0x6c>)
  4018a4:	6a1b      	ldr	r3, [r3, #32]
  4018a6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4018aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4018ae:	6213      	str	r3, [r2, #32]
	}
}
  4018b0:	bf00      	nop
  4018b2:	370c      	adds	r7, #12
  4018b4:	46bd      	mov	sp, r7
  4018b6:	bc80      	pop	{r7}
  4018b8:	4770      	bx	lr
  4018ba:	bf00      	nop
  4018bc:	400e0400 	.word	0x400e0400
  4018c0:	fec8fffc 	.word	0xfec8fffc
  4018c4:	01370002 	.word	0x01370002

004018c8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4018c8:	b480      	push	{r7}
  4018ca:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4018cc:	4b03      	ldr	r3, [pc, #12]	; (4018dc <pmc_osc_is_ready_mainck+0x14>)
  4018ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4018d4:	4618      	mov	r0, r3
  4018d6:	46bd      	mov	sp, r7
  4018d8:	bc80      	pop	{r7}
  4018da:	4770      	bx	lr
  4018dc:	400e0400 	.word	0x400e0400

004018e0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4018e0:	b480      	push	{r7}
  4018e2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4018e4:	4b03      	ldr	r3, [pc, #12]	; (4018f4 <pmc_disable_pllack+0x14>)
  4018e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4018ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4018ec:	bf00      	nop
  4018ee:	46bd      	mov	sp, r7
  4018f0:	bc80      	pop	{r7}
  4018f2:	4770      	bx	lr
  4018f4:	400e0400 	.word	0x400e0400

004018f8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4018f8:	b480      	push	{r7}
  4018fa:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4018fc:	4b03      	ldr	r3, [pc, #12]	; (40190c <pmc_is_locked_pllack+0x14>)
  4018fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401900:	f003 0302 	and.w	r3, r3, #2
}
  401904:	4618      	mov	r0, r3
  401906:	46bd      	mov	sp, r7
  401908:	bc80      	pop	{r7}
  40190a:	4770      	bx	lr
  40190c:	400e0400 	.word	0x400e0400

00401910 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401910:	b480      	push	{r7}
  401912:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401914:	4b03      	ldr	r3, [pc, #12]	; (401924 <pmc_disable_pllbck+0x14>)
  401916:	2200      	movs	r2, #0
  401918:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40191a:	bf00      	nop
  40191c:	46bd      	mov	sp, r7
  40191e:	bc80      	pop	{r7}
  401920:	4770      	bx	lr
  401922:	bf00      	nop
  401924:	400e0400 	.word	0x400e0400

00401928 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401928:	b480      	push	{r7}
  40192a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40192c:	4b03      	ldr	r3, [pc, #12]	; (40193c <pmc_is_locked_pllbck+0x14>)
  40192e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401930:	f003 0304 	and.w	r3, r3, #4
}
  401934:	4618      	mov	r0, r3
  401936:	46bd      	mov	sp, r7
  401938:	bc80      	pop	{r7}
  40193a:	4770      	bx	lr
  40193c:	400e0400 	.word	0x400e0400

00401940 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401940:	b480      	push	{r7}
  401942:	b083      	sub	sp, #12
  401944:	af00      	add	r7, sp, #0
  401946:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401948:	687b      	ldr	r3, [r7, #4]
  40194a:	2b22      	cmp	r3, #34	; 0x22
  40194c:	d901      	bls.n	401952 <pmc_enable_periph_clk+0x12>
		return 1;
  40194e:	2301      	movs	r3, #1
  401950:	e02f      	b.n	4019b2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401952:	687b      	ldr	r3, [r7, #4]
  401954:	2b1f      	cmp	r3, #31
  401956:	d813      	bhi.n	401980 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401958:	4b18      	ldr	r3, [pc, #96]	; (4019bc <pmc_enable_periph_clk+0x7c>)
  40195a:	699a      	ldr	r2, [r3, #24]
  40195c:	2101      	movs	r1, #1
  40195e:	687b      	ldr	r3, [r7, #4]
  401960:	fa01 f303 	lsl.w	r3, r1, r3
  401964:	401a      	ands	r2, r3
  401966:	2101      	movs	r1, #1
  401968:	687b      	ldr	r3, [r7, #4]
  40196a:	fa01 f303 	lsl.w	r3, r1, r3
  40196e:	429a      	cmp	r2, r3
  401970:	d01e      	beq.n	4019b0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401972:	4a12      	ldr	r2, [pc, #72]	; (4019bc <pmc_enable_periph_clk+0x7c>)
  401974:	2101      	movs	r1, #1
  401976:	687b      	ldr	r3, [r7, #4]
  401978:	fa01 f303 	lsl.w	r3, r1, r3
  40197c:	6113      	str	r3, [r2, #16]
  40197e:	e017      	b.n	4019b0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401980:	687b      	ldr	r3, [r7, #4]
  401982:	3b20      	subs	r3, #32
  401984:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401986:	4b0d      	ldr	r3, [pc, #52]	; (4019bc <pmc_enable_periph_clk+0x7c>)
  401988:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40198c:	2101      	movs	r1, #1
  40198e:	687b      	ldr	r3, [r7, #4]
  401990:	fa01 f303 	lsl.w	r3, r1, r3
  401994:	401a      	ands	r2, r3
  401996:	2101      	movs	r1, #1
  401998:	687b      	ldr	r3, [r7, #4]
  40199a:	fa01 f303 	lsl.w	r3, r1, r3
  40199e:	429a      	cmp	r2, r3
  4019a0:	d006      	beq.n	4019b0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4019a2:	4a06      	ldr	r2, [pc, #24]	; (4019bc <pmc_enable_periph_clk+0x7c>)
  4019a4:	2101      	movs	r1, #1
  4019a6:	687b      	ldr	r3, [r7, #4]
  4019a8:	fa01 f303 	lsl.w	r3, r1, r3
  4019ac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4019b0:	2300      	movs	r3, #0
}
  4019b2:	4618      	mov	r0, r3
  4019b4:	370c      	adds	r7, #12
  4019b6:	46bd      	mov	sp, r7
  4019b8:	bc80      	pop	{r7}
  4019ba:	4770      	bx	lr
  4019bc:	400e0400 	.word	0x400e0400

004019c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4019c0:	b580      	push	{r7, lr}
  4019c2:	b082      	sub	sp, #8
  4019c4:	af00      	add	r7, sp, #0
  4019c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4019c8:	6878      	ldr	r0, [r7, #4]
  4019ca:	4b03      	ldr	r3, [pc, #12]	; (4019d8 <sysclk_enable_peripheral_clock+0x18>)
  4019cc:	4798      	blx	r3
}
  4019ce:	bf00      	nop
  4019d0:	3708      	adds	r7, #8
  4019d2:	46bd      	mov	sp, r7
  4019d4:	bd80      	pop	{r7, pc}
  4019d6:	bf00      	nop
  4019d8:	00401941 	.word	0x00401941

004019dc <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4019dc:	b580      	push	{r7, lr}
  4019de:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4019e0:	200b      	movs	r0, #11
  4019e2:	4b03      	ldr	r3, [pc, #12]	; (4019f0 <ioport_init+0x14>)
  4019e4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4019e6:	200c      	movs	r0, #12
  4019e8:	4b01      	ldr	r3, [pc, #4]	; (4019f0 <ioport_init+0x14>)
  4019ea:	4798      	blx	r3
	arch_ioport_init();
}
  4019ec:	bf00      	nop
  4019ee:	bd80      	pop	{r7, pc}
  4019f0:	004019c1 	.word	0x004019c1

004019f4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4019f4:	b580      	push	{r7, lr}
  4019f6:	af00      	add	r7, sp, #0
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4019f8:	4b1d      	ldr	r3, [pc, #116]	; (401a70 <board_init+0x7c>)
  4019fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4019fe:	605a      	str	r2, [r3, #4]

	/* Init IO Port service to enable configuring pins */
	ioport_init();
  401a00:	4b1c      	ldr	r3, [pc, #112]	; (401a74 <board_init+0x80>)
  401a02:	4798      	blx	r3

	/* Configure UART0 pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  401a04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401a08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  401a0c:	481a      	ldr	r0, [pc, #104]	; (401a78 <board_init+0x84>)
  401a0e:	4b1b      	ldr	r3, [pc, #108]	; (401a7c <board_init+0x88>)
  401a10:	4798      	blx	r3

	/* Configure UART1 pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401a16:	210c      	movs	r1, #12
  401a18:	4819      	ldr	r0, [pc, #100]	; (401a80 <board_init+0x8c>)
  401a1a:	4b18      	ldr	r3, [pc, #96]	; (401a7c <board_init+0x88>)
  401a1c:	4798      	blx	r3

	/* Configure USART0 pins */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  401a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401a22:	2160      	movs	r1, #96	; 0x60
  401a24:	4814      	ldr	r0, [pc, #80]	; (401a78 <board_init+0x84>)
  401a26:	4b15      	ldr	r3, [pc, #84]	; (401a7c <board_init+0x88>)
  401a28:	4798      	blx	r3

	/* Configure USART1 pins */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  401a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401a2e:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
  401a32:	4811      	ldr	r0, [pc, #68]	; (401a78 <board_init+0x84>)
  401a34:	4b11      	ldr	r3, [pc, #68]	; (401a7c <board_init+0x88>)
  401a36:	4798      	blx	r3

	//Configure TWI0 Pins
	gpio_configure_group(PINS_TWI0_PIO, PINS_TWI0, PINS_TWI0_FLAGS);
  401a38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401a3c:	2118      	movs	r1, #24
  401a3e:	480e      	ldr	r0, [pc, #56]	; (401a78 <board_init+0x84>)
  401a40:	4b0e      	ldr	r3, [pc, #56]	; (401a7c <board_init+0x88>)
  401a42:	4798      	blx	r3

	//Configure Solenoid Pins
	gpio_configure_pin(PIN_INAVALVE1_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401a44:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401a48:	200d      	movs	r0, #13
  401a4a:	4b0e      	ldr	r3, [pc, #56]	; (401a84 <board_init+0x90>)
  401a4c:	4798      	blx	r3
	gpio_configure_pin(PIN_INAVALVE2_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401a4e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401a52:	200e      	movs	r0, #14
  401a54:	4b0b      	ldr	r3, [pc, #44]	; (401a84 <board_init+0x90>)
  401a56:	4798      	blx	r3

	//Configure Air Pump SSRly
	gpio_configure_pin(PIN_AIR_PUMP_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401a58:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401a5c:	2018      	movs	r0, #24
  401a5e:	4b09      	ldr	r3, [pc, #36]	; (401a84 <board_init+0x90>)
  401a60:	4798      	blx	r3

	//Configure LED Pins
	gpio_configure_pin(PIN_DEBUGLED_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401a62:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401a66:	2010      	movs	r0, #16
  401a68:	4b06      	ldr	r3, [pc, #24]	; (401a84 <board_init+0x90>)
  401a6a:	4798      	blx	r3
}
  401a6c:	bf00      	nop
  401a6e:	bd80      	pop	{r7, pc}
  401a70:	400e1450 	.word	0x400e1450
  401a74:	004019dd 	.word	0x004019dd
  401a78:	400e0e00 	.word	0x400e0e00
  401a7c:	004015a5 	.word	0x004015a5
  401a80:	400e1000 	.word	0x400e1000
  401a84:	004013f5 	.word	0x004013f5

00401a88 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401a88:	b580      	push	{r7, lr}
  401a8a:	b084      	sub	sp, #16
  401a8c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401a8e:	4b27      	ldr	r3, [pc, #156]	; (401b2c <Reset_Handler+0xa4>)
  401a90:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401a92:	4b27      	ldr	r3, [pc, #156]	; (401b30 <Reset_Handler+0xa8>)
  401a94:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401a96:	68fa      	ldr	r2, [r7, #12]
  401a98:	68bb      	ldr	r3, [r7, #8]
  401a9a:	429a      	cmp	r2, r3
  401a9c:	d90d      	bls.n	401aba <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401a9e:	e007      	b.n	401ab0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401aa0:	68bb      	ldr	r3, [r7, #8]
  401aa2:	1d1a      	adds	r2, r3, #4
  401aa4:	60ba      	str	r2, [r7, #8]
  401aa6:	68fa      	ldr	r2, [r7, #12]
  401aa8:	1d11      	adds	r1, r2, #4
  401aaa:	60f9      	str	r1, [r7, #12]
  401aac:	6812      	ldr	r2, [r2, #0]
  401aae:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401ab0:	68bb      	ldr	r3, [r7, #8]
  401ab2:	4a20      	ldr	r2, [pc, #128]	; (401b34 <Reset_Handler+0xac>)
  401ab4:	4293      	cmp	r3, r2
  401ab6:	d3f3      	bcc.n	401aa0 <Reset_Handler+0x18>
  401ab8:	e020      	b.n	401afc <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401aba:	68fa      	ldr	r2, [r7, #12]
  401abc:	68bb      	ldr	r3, [r7, #8]
  401abe:	429a      	cmp	r2, r3
  401ac0:	d21c      	bcs.n	401afc <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401ac2:	4a1c      	ldr	r2, [pc, #112]	; (401b34 <Reset_Handler+0xac>)
  401ac4:	4b1a      	ldr	r3, [pc, #104]	; (401b30 <Reset_Handler+0xa8>)
  401ac6:	1ad3      	subs	r3, r2, r3
  401ac8:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401aca:	68fa      	ldr	r2, [r7, #12]
  401acc:	687b      	ldr	r3, [r7, #4]
  401ace:	4413      	add	r3, r2
  401ad0:	3b04      	subs	r3, #4
  401ad2:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401ad4:	68ba      	ldr	r2, [r7, #8]
  401ad6:	687b      	ldr	r3, [r7, #4]
  401ad8:	4413      	add	r3, r2
  401ada:	3b04      	subs	r3, #4
  401adc:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401ade:	e00a      	b.n	401af6 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401ae0:	68bb      	ldr	r3, [r7, #8]
  401ae2:	1f1a      	subs	r2, r3, #4
  401ae4:	60ba      	str	r2, [r7, #8]
  401ae6:	68fa      	ldr	r2, [r7, #12]
  401ae8:	1f11      	subs	r1, r2, #4
  401aea:	60f9      	str	r1, [r7, #12]
  401aec:	6812      	ldr	r2, [r2, #0]
  401aee:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401af0:	687b      	ldr	r3, [r7, #4]
  401af2:	3b04      	subs	r3, #4
  401af4:	607b      	str	r3, [r7, #4]
  401af6:	687b      	ldr	r3, [r7, #4]
  401af8:	2b00      	cmp	r3, #0
  401afa:	d1f1      	bne.n	401ae0 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401afc:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401afe:	4b0e      	ldr	r3, [pc, #56]	; (401b38 <Reset_Handler+0xb0>)
  401b00:	60bb      	str	r3, [r7, #8]
  401b02:	e004      	b.n	401b0e <Reset_Handler+0x86>
		*pDest++ = 0;
  401b04:	68bb      	ldr	r3, [r7, #8]
  401b06:	1d1a      	adds	r2, r3, #4
  401b08:	60ba      	str	r2, [r7, #8]
  401b0a:	2200      	movs	r2, #0
  401b0c:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401b0e:	68bb      	ldr	r3, [r7, #8]
  401b10:	4a0a      	ldr	r2, [pc, #40]	; (401b3c <Reset_Handler+0xb4>)
  401b12:	4293      	cmp	r3, r2
  401b14:	d3f6      	bcc.n	401b04 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401b16:	4b0a      	ldr	r3, [pc, #40]	; (401b40 <Reset_Handler+0xb8>)
  401b18:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  401b1a:	4a0a      	ldr	r2, [pc, #40]	; (401b44 <Reset_Handler+0xbc>)
  401b1c:	68fb      	ldr	r3, [r7, #12]
  401b1e:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401b20:	4b09      	ldr	r3, [pc, #36]	; (401b48 <Reset_Handler+0xc0>)
  401b22:	4798      	blx	r3

	/* Branch to main function */
	main();
  401b24:	4b09      	ldr	r3, [pc, #36]	; (401b4c <Reset_Handler+0xc4>)
  401b26:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401b28:	e7fe      	b.n	401b28 <Reset_Handler+0xa0>
  401b2a:	bf00      	nop
  401b2c:	00403644 	.word	0x00403644
  401b30:	20000000 	.word	0x20000000
  401b34:	2000084c 	.word	0x2000084c
  401b38:	2000084c 	.word	0x2000084c
  401b3c:	20000cbc 	.word	0x20000cbc
  401b40:	00400000 	.word	0x00400000
  401b44:	e000ed00 	.word	0xe000ed00
  401b48:	0040257d 	.word	0x0040257d
  401b4c:	00401fa1 	.word	0x00401fa1

00401b50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401b50:	b480      	push	{r7}
  401b52:	af00      	add	r7, sp, #0
	while (1) {
	}
  401b54:	e7fe      	b.n	401b54 <Dummy_Handler+0x4>
  401b56:	bf00      	nop

00401b58 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  401b58:	b480      	push	{r7}
  401b5a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401b5c:	4b5d      	ldr	r3, [pc, #372]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b60:	f003 0303 	and.w	r3, r3, #3
  401b64:	2b03      	cmp	r3, #3
  401b66:	f200 8096 	bhi.w	401c96 <SystemCoreClockUpdate+0x13e>
  401b6a:	a201      	add	r2, pc, #4	; (adr r2, 401b70 <SystemCoreClockUpdate+0x18>)
  401b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401b70:	00401b81 	.word	0x00401b81
  401b74:	00401ba1 	.word	0x00401ba1
  401b78:	00401beb 	.word	0x00401beb
  401b7c:	00401beb 	.word	0x00401beb
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401b80:	4b55      	ldr	r3, [pc, #340]	; (401cd8 <SystemCoreClockUpdate+0x180>)
  401b82:	695b      	ldr	r3, [r3, #20]
  401b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401b88:	2b00      	cmp	r3, #0
  401b8a:	d004      	beq.n	401b96 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401b8c:	4b53      	ldr	r3, [pc, #332]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401b8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401b92:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401b94:	e080      	b.n	401c98 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401b96:	4b51      	ldr	r3, [pc, #324]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401b98:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401b9c:	601a      	str	r2, [r3, #0]
			}
		break;
  401b9e:	e07b      	b.n	401c98 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401ba0:	4b4c      	ldr	r3, [pc, #304]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401ba2:	6a1b      	ldr	r3, [r3, #32]
  401ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401ba8:	2b00      	cmp	r3, #0
  401baa:	d003      	beq.n	401bb4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401bac:	4b4b      	ldr	r3, [pc, #300]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401bae:	4a4c      	ldr	r2, [pc, #304]	; (401ce0 <SystemCoreClockUpdate+0x188>)
  401bb0:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401bb2:	e071      	b.n	401c98 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401bb4:	4b49      	ldr	r3, [pc, #292]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401bb6:	4a4b      	ldr	r2, [pc, #300]	; (401ce4 <SystemCoreClockUpdate+0x18c>)
  401bb8:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401bba:	4b46      	ldr	r3, [pc, #280]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401bbc:	6a1b      	ldr	r3, [r3, #32]
  401bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401bc2:	2b10      	cmp	r3, #16
  401bc4:	d008      	beq.n	401bd8 <SystemCoreClockUpdate+0x80>
  401bc6:	2b20      	cmp	r3, #32
  401bc8:	d00a      	beq.n	401be0 <SystemCoreClockUpdate+0x88>
  401bca:	2b00      	cmp	r3, #0
  401bcc:	d000      	beq.n	401bd0 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  401bce:	e00b      	b.n	401be8 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401bd0:	4b42      	ldr	r3, [pc, #264]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401bd2:	4a44      	ldr	r2, [pc, #272]	; (401ce4 <SystemCoreClockUpdate+0x18c>)
  401bd4:	601a      	str	r2, [r3, #0]
			break;
  401bd6:	e007      	b.n	401be8 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401bd8:	4b40      	ldr	r3, [pc, #256]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401bda:	4a43      	ldr	r2, [pc, #268]	; (401ce8 <SystemCoreClockUpdate+0x190>)
  401bdc:	601a      	str	r2, [r3, #0]
			break;
  401bde:	e003      	b.n	401be8 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401be0:	4b3e      	ldr	r3, [pc, #248]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401be2:	4a3f      	ldr	r2, [pc, #252]	; (401ce0 <SystemCoreClockUpdate+0x188>)
  401be4:	601a      	str	r2, [r3, #0]
			break;
  401be6:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  401be8:	e056      	b.n	401c98 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401bea:	4b3a      	ldr	r3, [pc, #232]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401bec:	6a1b      	ldr	r3, [r3, #32]
  401bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401bf2:	2b00      	cmp	r3, #0
  401bf4:	d003      	beq.n	401bfe <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401bf6:	4b39      	ldr	r3, [pc, #228]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401bf8:	4a39      	ldr	r2, [pc, #228]	; (401ce0 <SystemCoreClockUpdate+0x188>)
  401bfa:	601a      	str	r2, [r3, #0]
  401bfc:	e019      	b.n	401c32 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401bfe:	4b37      	ldr	r3, [pc, #220]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c00:	4a38      	ldr	r2, [pc, #224]	; (401ce4 <SystemCoreClockUpdate+0x18c>)
  401c02:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401c04:	4b33      	ldr	r3, [pc, #204]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401c06:	6a1b      	ldr	r3, [r3, #32]
  401c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c0c:	2b10      	cmp	r3, #16
  401c0e:	d008      	beq.n	401c22 <SystemCoreClockUpdate+0xca>
  401c10:	2b20      	cmp	r3, #32
  401c12:	d00a      	beq.n	401c2a <SystemCoreClockUpdate+0xd2>
  401c14:	2b00      	cmp	r3, #0
  401c16:	d000      	beq.n	401c1a <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  401c18:	e00b      	b.n	401c32 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c1a:	4b30      	ldr	r3, [pc, #192]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c1c:	4a31      	ldr	r2, [pc, #196]	; (401ce4 <SystemCoreClockUpdate+0x18c>)
  401c1e:	601a      	str	r2, [r3, #0]
					break;
  401c20:	e007      	b.n	401c32 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401c22:	4b2e      	ldr	r3, [pc, #184]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c24:	4a30      	ldr	r2, [pc, #192]	; (401ce8 <SystemCoreClockUpdate+0x190>)
  401c26:	601a      	str	r2, [r3, #0]
					break;
  401c28:	e003      	b.n	401c32 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401c2a:	4b2c      	ldr	r3, [pc, #176]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c2c:	4a2c      	ldr	r2, [pc, #176]	; (401ce0 <SystemCoreClockUpdate+0x188>)
  401c2e:	601a      	str	r2, [r3, #0]
					break;
  401c30:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401c32:	4b28      	ldr	r3, [pc, #160]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c36:	f003 0303 	and.w	r3, r3, #3
  401c3a:	2b02      	cmp	r3, #2
  401c3c:	d115      	bne.n	401c6a <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401c3e:	4b25      	ldr	r3, [pc, #148]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401c42:	4b2a      	ldr	r3, [pc, #168]	; (401cec <SystemCoreClockUpdate+0x194>)
  401c44:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  401c46:	0c1b      	lsrs	r3, r3, #16
  401c48:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401c4a:	4a24      	ldr	r2, [pc, #144]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c4c:	6812      	ldr	r2, [r2, #0]
  401c4e:	fb02 f303 	mul.w	r3, r2, r3
  401c52:	4a22      	ldr	r2, [pc, #136]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c54:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401c56:	4b1f      	ldr	r3, [pc, #124]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  401c5a:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401c5c:	4a1f      	ldr	r2, [pc, #124]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c5e:	6812      	ldr	r2, [r2, #0]
  401c60:	fbb2 f3f3 	udiv	r3, r2, r3
  401c64:	4a1d      	ldr	r2, [pc, #116]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c66:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401c68:	e016      	b.n	401c98 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401c6a:	4b1a      	ldr	r3, [pc, #104]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c6e:	4b1f      	ldr	r3, [pc, #124]	; (401cec <SystemCoreClockUpdate+0x194>)
  401c70:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401c72:	0c1b      	lsrs	r3, r3, #16
  401c74:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401c76:	4a19      	ldr	r2, [pc, #100]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c78:	6812      	ldr	r2, [r2, #0]
  401c7a:	fb02 f303 	mul.w	r3, r2, r3
  401c7e:	4a17      	ldr	r2, [pc, #92]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c80:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401c82:	4b14      	ldr	r3, [pc, #80]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  401c86:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401c88:	4a14      	ldr	r2, [pc, #80]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c8a:	6812      	ldr	r2, [r2, #0]
  401c8c:	fbb2 f3f3 	udiv	r3, r2, r3
  401c90:	4a12      	ldr	r2, [pc, #72]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401c92:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401c94:	e000      	b.n	401c98 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  401c96:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401c98:	4b0e      	ldr	r3, [pc, #56]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ca0:	2b70      	cmp	r3, #112	; 0x70
  401ca2:	d108      	bne.n	401cb6 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401ca4:	4b0d      	ldr	r3, [pc, #52]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401ca6:	681b      	ldr	r3, [r3, #0]
  401ca8:	4a11      	ldr	r2, [pc, #68]	; (401cf0 <SystemCoreClockUpdate+0x198>)
  401caa:	fba2 2303 	umull	r2, r3, r2, r3
  401cae:	085b      	lsrs	r3, r3, #1
  401cb0:	4a0a      	ldr	r2, [pc, #40]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401cb2:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401cb4:	e00a      	b.n	401ccc <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401cb6:	4b07      	ldr	r3, [pc, #28]	; (401cd4 <SystemCoreClockUpdate+0x17c>)
  401cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401cbe:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401cc0:	4a06      	ldr	r2, [pc, #24]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401cc2:	6812      	ldr	r2, [r2, #0]
  401cc4:	fa22 f303 	lsr.w	r3, r2, r3
  401cc8:	4a04      	ldr	r2, [pc, #16]	; (401cdc <SystemCoreClockUpdate+0x184>)
  401cca:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401ccc:	bf00      	nop
  401cce:	46bd      	mov	sp, r7
  401cd0:	bc80      	pop	{r7}
  401cd2:	4770      	bx	lr
  401cd4:	400e0400 	.word	0x400e0400
  401cd8:	400e1410 	.word	0x400e1410
  401cdc:	2000000c 	.word	0x2000000c
  401ce0:	00b71b00 	.word	0x00b71b00
  401ce4:	003d0900 	.word	0x003d0900
  401ce8:	007a1200 	.word	0x007a1200
  401cec:	07ff0000 	.word	0x07ff0000
  401cf0:	aaaaaaab 	.word	0xaaaaaaab

00401cf4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  401cf4:	b480      	push	{r7}
  401cf6:	b083      	sub	sp, #12
  401cf8:	af00      	add	r7, sp, #0
  401cfa:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401cfc:	687b      	ldr	r3, [r7, #4]
  401cfe:	4a18      	ldr	r2, [pc, #96]	; (401d60 <system_init_flash+0x6c>)
  401d00:	4293      	cmp	r3, r2
  401d02:	d804      	bhi.n	401d0e <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d04:	4b17      	ldr	r3, [pc, #92]	; (401d64 <system_init_flash+0x70>)
  401d06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d0a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401d0c:	e023      	b.n	401d56 <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401d0e:	687b      	ldr	r3, [r7, #4]
  401d10:	4a15      	ldr	r2, [pc, #84]	; (401d68 <system_init_flash+0x74>)
  401d12:	4293      	cmp	r3, r2
  401d14:	d803      	bhi.n	401d1e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401d16:	4b13      	ldr	r3, [pc, #76]	; (401d64 <system_init_flash+0x70>)
  401d18:	4a14      	ldr	r2, [pc, #80]	; (401d6c <system_init_flash+0x78>)
  401d1a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401d1c:	e01b      	b.n	401d56 <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401d1e:	687b      	ldr	r3, [r7, #4]
  401d20:	4a13      	ldr	r2, [pc, #76]	; (401d70 <system_init_flash+0x7c>)
  401d22:	4293      	cmp	r3, r2
  401d24:	d803      	bhi.n	401d2e <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401d26:	4b0f      	ldr	r3, [pc, #60]	; (401d64 <system_init_flash+0x70>)
  401d28:	4a12      	ldr	r2, [pc, #72]	; (401d74 <system_init_flash+0x80>)
  401d2a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401d2c:	e013      	b.n	401d56 <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401d2e:	687b      	ldr	r3, [r7, #4]
  401d30:	4a11      	ldr	r2, [pc, #68]	; (401d78 <system_init_flash+0x84>)
  401d32:	4293      	cmp	r3, r2
  401d34:	d803      	bhi.n	401d3e <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401d36:	4b0b      	ldr	r3, [pc, #44]	; (401d64 <system_init_flash+0x70>)
  401d38:	4a10      	ldr	r2, [pc, #64]	; (401d7c <system_init_flash+0x88>)
  401d3a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401d3c:	e00b      	b.n	401d56 <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401d3e:	687b      	ldr	r3, [r7, #4]
  401d40:	4a0f      	ldr	r2, [pc, #60]	; (401d80 <system_init_flash+0x8c>)
  401d42:	4293      	cmp	r3, r2
  401d44:	d804      	bhi.n	401d50 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401d46:	4b07      	ldr	r3, [pc, #28]	; (401d64 <system_init_flash+0x70>)
  401d48:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401d4c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401d4e:	e002      	b.n	401d56 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401d50:	4b04      	ldr	r3, [pc, #16]	; (401d64 <system_init_flash+0x70>)
  401d52:	4a0c      	ldr	r2, [pc, #48]	; (401d84 <system_init_flash+0x90>)
  401d54:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401d56:	bf00      	nop
  401d58:	370c      	adds	r7, #12
  401d5a:	46bd      	mov	sp, r7
  401d5c:	bc80      	pop	{r7}
  401d5e:	4770      	bx	lr
  401d60:	01312cff 	.word	0x01312cff
  401d64:	400e0a00 	.word	0x400e0a00
  401d68:	026259ff 	.word	0x026259ff
  401d6c:	04000100 	.word	0x04000100
  401d70:	039386ff 	.word	0x039386ff
  401d74:	04000200 	.word	0x04000200
  401d78:	04c4b3ff 	.word	0x04c4b3ff
  401d7c:	04000300 	.word	0x04000300
  401d80:	05f5e0ff 	.word	0x05f5e0ff
  401d84:	04000500 	.word	0x04000500

00401d88 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401d88:	b480      	push	{r7}
  401d8a:	b085      	sub	sp, #20
  401d8c:	af00      	add	r7, sp, #0
  401d8e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401d90:	4b10      	ldr	r3, [pc, #64]	; (401dd4 <_sbrk+0x4c>)
  401d92:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401d94:	4b10      	ldr	r3, [pc, #64]	; (401dd8 <_sbrk+0x50>)
  401d96:	681b      	ldr	r3, [r3, #0]
  401d98:	2b00      	cmp	r3, #0
  401d9a:	d102      	bne.n	401da2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401d9c:	4b0e      	ldr	r3, [pc, #56]	; (401dd8 <_sbrk+0x50>)
  401d9e:	4a0f      	ldr	r2, [pc, #60]	; (401ddc <_sbrk+0x54>)
  401da0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401da2:	4b0d      	ldr	r3, [pc, #52]	; (401dd8 <_sbrk+0x50>)
  401da4:	681b      	ldr	r3, [r3, #0]
  401da6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401da8:	68ba      	ldr	r2, [r7, #8]
  401daa:	687b      	ldr	r3, [r7, #4]
  401dac:	441a      	add	r2, r3
  401dae:	68fb      	ldr	r3, [r7, #12]
  401db0:	429a      	cmp	r2, r3
  401db2:	dd02      	ble.n	401dba <_sbrk+0x32>
		return (caddr_t) -1;	
  401db4:	f04f 33ff 	mov.w	r3, #4294967295
  401db8:	e006      	b.n	401dc8 <_sbrk+0x40>
	}

	heap += incr;
  401dba:	4b07      	ldr	r3, [pc, #28]	; (401dd8 <_sbrk+0x50>)
  401dbc:	681a      	ldr	r2, [r3, #0]
  401dbe:	687b      	ldr	r3, [r7, #4]
  401dc0:	4413      	add	r3, r2
  401dc2:	4a05      	ldr	r2, [pc, #20]	; (401dd8 <_sbrk+0x50>)
  401dc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401dc6:	68bb      	ldr	r3, [r7, #8]
}
  401dc8:	4618      	mov	r0, r3
  401dca:	3714      	adds	r7, #20
  401dcc:	46bd      	mov	sp, r7
  401dce:	bc80      	pop	{r7}
  401dd0:	4770      	bx	lr
  401dd2:	bf00      	nop
  401dd4:	20027ffc 	.word	0x20027ffc
  401dd8:	20000a70 	.word	0x20000a70
  401ddc:	20003cc0 	.word	0x20003cc0

00401de0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401de0:	b480      	push	{r7}
  401de2:	b083      	sub	sp, #12
  401de4:	af00      	add	r7, sp, #0
  401de6:	6078      	str	r0, [r7, #4]
	return -1;
  401de8:	f04f 33ff 	mov.w	r3, #4294967295
}
  401dec:	4618      	mov	r0, r3
  401dee:	370c      	adds	r7, #12
  401df0:	46bd      	mov	sp, r7
  401df2:	bc80      	pop	{r7}
  401df4:	4770      	bx	lr
  401df6:	bf00      	nop

00401df8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401df8:	b480      	push	{r7}
  401dfa:	b083      	sub	sp, #12
  401dfc:	af00      	add	r7, sp, #0
  401dfe:	6078      	str	r0, [r7, #4]
  401e00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401e02:	683b      	ldr	r3, [r7, #0]
  401e04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401e08:	605a      	str	r2, [r3, #4]

	return 0;
  401e0a:	2300      	movs	r3, #0
}
  401e0c:	4618      	mov	r0, r3
  401e0e:	370c      	adds	r7, #12
  401e10:	46bd      	mov	sp, r7
  401e12:	bc80      	pop	{r7}
  401e14:	4770      	bx	lr
  401e16:	bf00      	nop

00401e18 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
  401e18:	b480      	push	{r7}
  401e1a:	b085      	sub	sp, #20
  401e1c:	af00      	add	r7, sp, #0
  401e1e:	60f8      	str	r0, [r7, #12]
  401e20:	60b9      	str	r1, [r7, #8]
  401e22:	607a      	str	r2, [r7, #4]
	return 0;
  401e24:	2300      	movs	r3, #0
}
  401e26:	4618      	mov	r0, r3
  401e28:	3714      	adds	r7, #20
  401e2a:	46bd      	mov	sp, r7
  401e2c:	bc80      	pop	{r7}
  401e2e:	4770      	bx	lr

00401e30 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401e30:	b480      	push	{r7}
  401e32:	b083      	sub	sp, #12
  401e34:	af00      	add	r7, sp, #0
  401e36:	4603      	mov	r3, r0
  401e38:	6039      	str	r1, [r7, #0]
  401e3a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e40:	2b00      	cmp	r3, #0
  401e42:	da0b      	bge.n	401e5c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401e44:	490d      	ldr	r1, [pc, #52]	; (401e7c <NVIC_SetPriority+0x4c>)
  401e46:	79fb      	ldrb	r3, [r7, #7]
  401e48:	f003 030f 	and.w	r3, r3, #15
  401e4c:	3b04      	subs	r3, #4
  401e4e:	683a      	ldr	r2, [r7, #0]
  401e50:	b2d2      	uxtb	r2, r2
  401e52:	0112      	lsls	r2, r2, #4
  401e54:	b2d2      	uxtb	r2, r2
  401e56:	440b      	add	r3, r1
  401e58:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  401e5a:	e009      	b.n	401e70 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401e5c:	4908      	ldr	r1, [pc, #32]	; (401e80 <NVIC_SetPriority+0x50>)
  401e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e62:	683a      	ldr	r2, [r7, #0]
  401e64:	b2d2      	uxtb	r2, r2
  401e66:	0112      	lsls	r2, r2, #4
  401e68:	b2d2      	uxtb	r2, r2
  401e6a:	440b      	add	r3, r1
  401e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401e70:	bf00      	nop
  401e72:	370c      	adds	r7, #12
  401e74:	46bd      	mov	sp, r7
  401e76:	bc80      	pop	{r7}
  401e78:	4770      	bx	lr
  401e7a:	bf00      	nop
  401e7c:	e000ed00 	.word	0xe000ed00
  401e80:	e000e100 	.word	0xe000e100

00401e84 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  401e84:	b580      	push	{r7, lr}
  401e86:	b082      	sub	sp, #8
  401e88:	af00      	add	r7, sp, #0
  401e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  401e8c:	687b      	ldr	r3, [r7, #4]
  401e8e:	3b01      	subs	r3, #1
  401e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  401e94:	d301      	bcc.n	401e9a <SysTick_Config+0x16>
  401e96:	2301      	movs	r3, #1
  401e98:	e00f      	b.n	401eba <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401e9a:	4a0a      	ldr	r2, [pc, #40]	; (401ec4 <SysTick_Config+0x40>)
  401e9c:	687b      	ldr	r3, [r7, #4]
  401e9e:	3b01      	subs	r3, #1
  401ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  401ea2:	210f      	movs	r1, #15
  401ea4:	f04f 30ff 	mov.w	r0, #4294967295
  401ea8:	4b07      	ldr	r3, [pc, #28]	; (401ec8 <SysTick_Config+0x44>)
  401eaa:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401eac:	4b05      	ldr	r3, [pc, #20]	; (401ec4 <SysTick_Config+0x40>)
  401eae:	2200      	movs	r2, #0
  401eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401eb2:	4b04      	ldr	r3, [pc, #16]	; (401ec4 <SysTick_Config+0x40>)
  401eb4:	2207      	movs	r2, #7
  401eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  401eb8:	2300      	movs	r3, #0
}
  401eba:	4618      	mov	r0, r3
  401ebc:	3708      	adds	r7, #8
  401ebe:	46bd      	mov	sp, r7
  401ec0:	bd80      	pop	{r7, pc}
  401ec2:	bf00      	nop
  401ec4:	e000e010 	.word	0xe000e010
  401ec8:	00401e31 	.word	0x00401e31

00401ecc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401ecc:	b480      	push	{r7}
  401ece:	b083      	sub	sp, #12
  401ed0:	af00      	add	r7, sp, #0
  401ed2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401ed4:	687b      	ldr	r3, [r7, #4]
  401ed6:	2b07      	cmp	r3, #7
  401ed8:	d825      	bhi.n	401f26 <osc_get_rate+0x5a>
  401eda:	a201      	add	r2, pc, #4	; (adr r2, 401ee0 <osc_get_rate+0x14>)
  401edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ee0:	00401f01 	.word	0x00401f01
  401ee4:	00401f07 	.word	0x00401f07
  401ee8:	00401f0d 	.word	0x00401f0d
  401eec:	00401f13 	.word	0x00401f13
  401ef0:	00401f17 	.word	0x00401f17
  401ef4:	00401f1b 	.word	0x00401f1b
  401ef8:	00401f1f 	.word	0x00401f1f
  401efc:	00401f23 	.word	0x00401f23
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401f00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401f04:	e010      	b.n	401f28 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401f0a:	e00d      	b.n	401f28 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401f10:	e00a      	b.n	401f28 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401f12:	4b08      	ldr	r3, [pc, #32]	; (401f34 <osc_get_rate+0x68>)
  401f14:	e008      	b.n	401f28 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401f16:	4b08      	ldr	r3, [pc, #32]	; (401f38 <osc_get_rate+0x6c>)
  401f18:	e006      	b.n	401f28 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401f1a:	4b08      	ldr	r3, [pc, #32]	; (401f3c <osc_get_rate+0x70>)
  401f1c:	e004      	b.n	401f28 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401f1e:	4b07      	ldr	r3, [pc, #28]	; (401f3c <osc_get_rate+0x70>)
  401f20:	e002      	b.n	401f28 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401f22:	4b06      	ldr	r3, [pc, #24]	; (401f3c <osc_get_rate+0x70>)
  401f24:	e000      	b.n	401f28 <osc_get_rate+0x5c>
	}

	return 0;
  401f26:	2300      	movs	r3, #0
}
  401f28:	4618      	mov	r0, r3
  401f2a:	370c      	adds	r7, #12
  401f2c:	46bd      	mov	sp, r7
  401f2e:	bc80      	pop	{r7}
  401f30:	4770      	bx	lr
  401f32:	bf00      	nop
  401f34:	003d0900 	.word	0x003d0900
  401f38:	007a1200 	.word	0x007a1200
  401f3c:	00b71b00 	.word	0x00b71b00

00401f40 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401f40:	b580      	push	{r7, lr}
  401f42:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401f44:	2006      	movs	r0, #6
  401f46:	4b04      	ldr	r3, [pc, #16]	; (401f58 <sysclk_get_main_hz+0x18>)
  401f48:	4798      	blx	r3
  401f4a:	4602      	mov	r2, r0
  401f4c:	4613      	mov	r3, r2
  401f4e:	009b      	lsls	r3, r3, #2
  401f50:	4413      	add	r3, r2
  401f52:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401f54:	4618      	mov	r0, r3
  401f56:	bd80      	pop	{r7, pc}
  401f58:	00401ecd 	.word	0x00401ecd

00401f5c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401f5c:	b580      	push	{r7, lr}
  401f5e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401f60:	4b02      	ldr	r3, [pc, #8]	; (401f6c <sysclk_get_cpu_hz+0x10>)
  401f62:	4798      	blx	r3
  401f64:	4603      	mov	r3, r0
  401f66:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401f68:	4618      	mov	r0, r3
  401f6a:	bd80      	pop	{r7, pc}
  401f6c:	00401f41 	.word	0x00401f41

00401f70 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401f70:	b580      	push	{r7, lr}
  401f72:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401f74:	4b02      	ldr	r3, [pc, #8]	; (401f80 <sysclk_get_peripheral_hz+0x10>)
  401f76:	4798      	blx	r3
  401f78:	4603      	mov	r3, r0
  401f7a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401f7c:	4618      	mov	r0, r3
  401f7e:	bd80      	pop	{r7, pc}
  401f80:	00401f41 	.word	0x00401f41

00401f84 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401f84:	b580      	push	{r7, lr}
  401f86:	b082      	sub	sp, #8
  401f88:	af00      	add	r7, sp, #0
  401f8a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401f8c:	6878      	ldr	r0, [r7, #4]
  401f8e:	4b03      	ldr	r3, [pc, #12]	; (401f9c <sysclk_enable_peripheral_clock+0x18>)
  401f90:	4798      	blx	r3
}
  401f92:	bf00      	nop
  401f94:	3708      	adds	r7, #8
  401f96:	46bd      	mov	sp, r7
  401f98:	bd80      	pop	{r7, pc}
  401f9a:	bf00      	nop
  401f9c:	00401941 	.word	0x00401941

00401fa0 <main>:
/* Pointer to Disp UART PDC register base */
Pdc *dispUartPdcBase;
pdc_packet_t dispPdcPkt;

int main (void)
{
  401fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fa4:	b08b      	sub	sp, #44	; 0x2c
  401fa6:	af00      	add	r7, sp, #0
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  401fa8:	4b52      	ldr	r3, [pc, #328]	; (4020f4 <main+0x154>)
  401faa:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  401fac:	4b52      	ldr	r3, [pc, #328]	; (4020f8 <main+0x158>)
  401fae:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	InitPeripherals();
  401fb0:	4b52      	ldr	r3, [pc, #328]	; (4020fc <main+0x15c>)
  401fb2:	4798      	blx	r3

		//ReadPressureSen(BOARD_TWI, ADDR_PSEN1, dispPkt);
		//ReadEEPROM(BOARD_TWI,0x50,0x00,dispPkt,4);
		//WriteEEPROM(BOARD_TWI,0x50,0x00,dispPkt,4);

		gpio_set_pin_high(PIO_PA16_IDX);
  401fb4:	2010      	movs	r0, #16
  401fb6:	4b52      	ldr	r3, [pc, #328]	; (402100 <main+0x160>)
  401fb8:	4798      	blx	r3
		gpio_set_pin_high(PIN_INAVALVE1_IDX);
  401fba:	200d      	movs	r0, #13
  401fbc:	4b50      	ldr	r3, [pc, #320]	; (402100 <main+0x160>)
  401fbe:	4798      	blx	r3
		//gpio_set_pin_high(PIN_INAVALVE2_IDX);
		gpio_set_pin_high(PIN_AIR_PUMP_IDX);
  401fc0:	2018      	movs	r0, #24
  401fc2:	4b4f      	ldr	r3, [pc, #316]	; (402100 <main+0x160>)
  401fc4:	4798      	blx	r3
		delay_ms(5000);
  401fc6:	4b4f      	ldr	r3, [pc, #316]	; (402104 <main+0x164>)
  401fc8:	4798      	blx	r3
  401fca:	4603      	mov	r3, r0
  401fcc:	4619      	mov	r1, r3
  401fce:	f04f 0200 	mov.w	r2, #0
  401fd2:	460b      	mov	r3, r1
  401fd4:	4614      	mov	r4, r2
  401fd6:	00a0      	lsls	r0, r4, #2
  401fd8:	6278      	str	r0, [r7, #36]	; 0x24
  401fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
  401fdc:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  401fe0:	6278      	str	r0, [r7, #36]	; 0x24
  401fe2:	009b      	lsls	r3, r3, #2
  401fe4:	623b      	str	r3, [r7, #32]
  401fe6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
  401fea:	0166      	lsls	r6, r4, #5
  401fec:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  401ff0:	015d      	lsls	r5, r3, #5
  401ff2:	1aed      	subs	r5, r5, r3
  401ff4:	eb66 0604 	sbc.w	r6, r6, r4
  401ff8:	186d      	adds	r5, r5, r1
  401ffa:	eb46 0602 	adc.w	r6, r6, r2
  401ffe:	00b3      	lsls	r3, r6, #2
  402000:	61fb      	str	r3, [r7, #28]
  402002:	69fb      	ldr	r3, [r7, #28]
  402004:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
  402008:	61fb      	str	r3, [r7, #28]
  40200a:	00ab      	lsls	r3, r5, #2
  40200c:	61bb      	str	r3, [r7, #24]
  40200e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  402012:	195b      	adds	r3, r3, r5
  402014:	eb44 0406 	adc.w	r4, r4, r6
  402018:	461d      	mov	r5, r3
  40201a:	4626      	mov	r6, r4
  40201c:	00f3      	lsls	r3, r6, #3
  40201e:	617b      	str	r3, [r7, #20]
  402020:	697b      	ldr	r3, [r7, #20]
  402022:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
  402026:	617b      	str	r3, [r7, #20]
  402028:	00eb      	lsls	r3, r5, #3
  40202a:	613b      	str	r3, [r7, #16]
  40202c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
  402030:	4629      	mov	r1, r5
  402032:	4632      	mov	r2, r6
  402034:	f243 63af 	movw	r3, #13999	; 0x36af
  402038:	f04f 0400 	mov.w	r4, #0
  40203c:	eb11 0a03 	adds.w	sl, r1, r3
  402040:	eb42 0b04 	adc.w	fp, r2, r4
  402044:	4650      	mov	r0, sl
  402046:	4659      	mov	r1, fp
  402048:	4c2f      	ldr	r4, [pc, #188]	; (402108 <main+0x168>)
  40204a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40204e:	f04f 0300 	mov.w	r3, #0
  402052:	47a0      	blx	r4
  402054:	4603      	mov	r3, r0
  402056:	460c      	mov	r4, r1
  402058:	4618      	mov	r0, r3
  40205a:	4b2c      	ldr	r3, [pc, #176]	; (40210c <main+0x16c>)
  40205c:	4798      	blx	r3
// 		gpio_set_pin_low(PIN_INAVALVE2_IDX);
// 		gpio_set_pin_low(PIN_INAVALVE1_IDX);
		gpio_set_pin_low(PIN_AIR_PUMP_IDX);
  40205e:	2018      	movs	r0, #24
  402060:	4b2b      	ldr	r3, [pc, #172]	; (402110 <main+0x170>)
  402062:	4798      	blx	r3
		gpio_set_pin_low(PIO_PA16_IDX);
  402064:	2010      	movs	r0, #16
  402066:	4b2a      	ldr	r3, [pc, #168]	; (402110 <main+0x170>)
  402068:	4798      	blx	r3
		delay_ms(2000);
  40206a:	4b26      	ldr	r3, [pc, #152]	; (402104 <main+0x164>)
  40206c:	4798      	blx	r3
  40206e:	4603      	mov	r3, r0
  402070:	4619      	mov	r1, r3
  402072:	f04f 0200 	mov.w	r2, #0
  402076:	460b      	mov	r3, r1
  402078:	4614      	mov	r4, r2
  40207a:	00a0      	lsls	r0, r4, #2
  40207c:	60f8      	str	r0, [r7, #12]
  40207e:	68f8      	ldr	r0, [r7, #12]
  402080:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  402084:	60f8      	str	r0, [r7, #12]
  402086:	009b      	lsls	r3, r3, #2
  402088:	60bb      	str	r3, [r7, #8]
  40208a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  40208e:	ea4f 1944 	mov.w	r9, r4, lsl #5
  402092:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  402096:	ea4f 1843 	mov.w	r8, r3, lsl #5
  40209a:	ebb8 0803 	subs.w	r8, r8, r3
  40209e:	eb69 0904 	sbc.w	r9, r9, r4
  4020a2:	eb18 0801 	adds.w	r8, r8, r1
  4020a6:	eb49 0902 	adc.w	r9, r9, r2
  4020aa:	ea4f 1309 	mov.w	r3, r9, lsl #4
  4020ae:	607b      	str	r3, [r7, #4]
  4020b0:	687b      	ldr	r3, [r7, #4]
  4020b2:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
  4020b6:	607b      	str	r3, [r7, #4]
  4020b8:	ea4f 1308 	mov.w	r3, r8, lsl #4
  4020bc:	603b      	str	r3, [r7, #0]
  4020be:	e9d7 8900 	ldrd	r8, r9, [r7]
  4020c2:	4641      	mov	r1, r8
  4020c4:	464a      	mov	r2, r9
  4020c6:	f243 63af 	movw	r3, #13999	; 0x36af
  4020ca:	f04f 0400 	mov.w	r4, #0
  4020ce:	eb11 0a03 	adds.w	sl, r1, r3
  4020d2:	eb42 0b04 	adc.w	fp, r2, r4
  4020d6:	4650      	mov	r0, sl
  4020d8:	4659      	mov	r1, fp
  4020da:	4c0b      	ldr	r4, [pc, #44]	; (402108 <main+0x168>)
  4020dc:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4020e0:	f04f 0300 	mov.w	r3, #0
  4020e4:	47a0      	blx	r4
  4020e6:	4603      	mov	r3, r0
  4020e8:	460c      	mov	r4, r1
  4020ea:	4618      	mov	r0, r3
  4020ec:	4b07      	ldr	r3, [pc, #28]	; (40210c <main+0x16c>)
  4020ee:	4798      	blx	r3
	}
  4020f0:	e760      	b.n	401fb4 <main+0x14>
  4020f2:	bf00      	nop
  4020f4:	00401055 	.word	0x00401055
  4020f8:	004019f5 	.word	0x004019f5
  4020fc:	00402131 	.word	0x00402131
  402100:	00401395 	.word	0x00401395
  402104:	00401f5d 	.word	0x00401f5d
  402108:	00402265 	.word	0x00402265
  40210c:	20000001 	.word	0x20000001
  402110:	004013c5 	.word	0x004013c5

00402114 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  402114:	b480      	push	{r7}
  402116:	af00      	add	r7, sp, #0
	tickCount++;
  402118:	4b04      	ldr	r3, [pc, #16]	; (40212c <SysTick_Handler+0x18>)
  40211a:	681b      	ldr	r3, [r3, #0]
  40211c:	3301      	adds	r3, #1
  40211e:	4a03      	ldr	r2, [pc, #12]	; (40212c <SysTick_Handler+0x18>)
  402120:	6013      	str	r3, [r2, #0]
}
  402122:	bf00      	nop
  402124:	46bd      	mov	sp, r7
  402126:	bc80      	pop	{r7}
  402128:	4770      	bx	lr
  40212a:	bf00      	nop
  40212c:	20000a74 	.word	0x20000a74

00402130 <InitPeripherals>:

void InitPeripherals(void)
{
  402130:	b580      	push	{r7, lr}
  402132:	af00      	add	r7, sp, #0

	/* Initialize Display UART */
	InitDispUart();
  402134:	4b04      	ldr	r3, [pc, #16]	; (402148 <InitPeripherals+0x18>)
  402136:	4798      	blx	r3

	/* Initialize sensor USARTs */
	SenInitUsart();
  402138:	4b04      	ldr	r3, [pc, #16]	; (40214c <InitPeripherals+0x1c>)
  40213a:	4798      	blx	r3

	/* Init TWI */
	InitTWI();
  40213c:	4b04      	ldr	r3, [pc, #16]	; (402150 <InitPeripherals+0x20>)
  40213e:	4798      	blx	r3

	/* Initialize Systick timer to generate interrupts every 10 ms */
	InitSystick();
  402140:	4b04      	ldr	r3, [pc, #16]	; (402154 <InitPeripherals+0x24>)
  402142:	4798      	blx	r3

	/* Enable WDT */

}
  402144:	bf00      	nop
  402146:	bd80      	pop	{r7, pc}
  402148:	004021e1 	.word	0x004021e1
  40214c:	00400499 	.word	0x00400499
  402150:	00402159 	.word	0x00402159
  402154:	004021a9 	.word	0x004021a9

00402158 <InitTWI>:

void InitTWI(void)
{
  402158:	b580      	push	{r7, lr}
  40215a:	b084      	sub	sp, #16
  40215c:	af00      	add	r7, sp, #0
	twi_options_t twiSettings = {
		sysclk_get_peripheral_hz(),
  40215e:	4b0c      	ldr	r3, [pc, #48]	; (402190 <InitTWI+0x38>)
  402160:	4798      	blx	r3
  402162:	4603      	mov	r3, r0

}

void InitTWI(void)
{
	twi_options_t twiSettings = {
  402164:	607b      	str	r3, [r7, #4]
  402166:	4b0b      	ldr	r3, [pc, #44]	; (402194 <InitTWI+0x3c>)
  402168:	60bb      	str	r3, [r7, #8]
  40216a:	2300      	movs	r3, #0
  40216c:	733b      	strb	r3, [r7, #12]
  40216e:	2300      	movs	r3, #0
  402170:	737b      	strb	r3, [r7, #13]
		100000,
		0,
		0
	};
	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_TWI_ID);
  402172:	2013      	movs	r0, #19
  402174:	4b08      	ldr	r3, [pc, #32]	; (402198 <InitTWI+0x40>)
  402176:	4798      	blx	r3

	/* Enable TWI master mode */
	twi_enable_master_mode(BOARD_TWI);
  402178:	4808      	ldr	r0, [pc, #32]	; (40219c <InitTWI+0x44>)
  40217a:	4b09      	ldr	r3, [pc, #36]	; (4021a0 <InitTWI+0x48>)
  40217c:	4798      	blx	r3

	/* Initialize TWI peripheral */
	twi_master_init(BOARD_TWI, &twiSettings);
  40217e:	1d3b      	adds	r3, r7, #4
  402180:	4619      	mov	r1, r3
  402182:	4806      	ldr	r0, [pc, #24]	; (40219c <InitTWI+0x44>)
  402184:	4b07      	ldr	r3, [pc, #28]	; (4021a4 <InitTWI+0x4c>)
  402186:	4798      	blx	r3
}
  402188:	bf00      	nop
  40218a:	3710      	adds	r7, #16
  40218c:	46bd      	mov	sp, r7
  40218e:	bd80      	pop	{r7, pc}
  402190:	00401f71 	.word	0x00401f71
  402194:	000186a0 	.word	0x000186a0
  402198:	00401f85 	.word	0x00401f85
  40219c:	40018000 	.word	0x40018000
  4021a0:	0040078d 	.word	0x0040078d
  4021a4:	004007b1 	.word	0x004007b1

004021a8 <InitSystick>:
/**
 *  Configure system tick to generate an interrupt every 10 ms.
 */

void InitSystick(void)
{
  4021a8:	b580      	push	{r7, lr}
  4021aa:	b082      	sub	sp, #8
  4021ac:	af00      	add	r7, sp, #0
	uint32_t ul_flag;
	ul_flag = SysTick_Config(sysclk_get_cpu_hz() / SYS_TICK_FREQ);
  4021ae:	4b09      	ldr	r3, [pc, #36]	; (4021d4 <InitSystick+0x2c>)
  4021b0:	4798      	blx	r3
  4021b2:	4602      	mov	r2, r0
  4021b4:	4b08      	ldr	r3, [pc, #32]	; (4021d8 <InitSystick+0x30>)
  4021b6:	fba3 2302 	umull	r2, r3, r3, r2
  4021ba:	095b      	lsrs	r3, r3, #5
  4021bc:	4618      	mov	r0, r3
  4021be:	4b07      	ldr	r3, [pc, #28]	; (4021dc <InitSystick+0x34>)
  4021c0:	4798      	blx	r3
  4021c2:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  4021c4:	687b      	ldr	r3, [r7, #4]
  4021c6:	2b00      	cmp	r3, #0
  4021c8:	d000      	beq.n	4021cc <InitSystick+0x24>
		/* Systick configuration error */
		while (1) {
		}
  4021ca:	e7fe      	b.n	4021ca <InitSystick+0x22>
	}
}
  4021cc:	bf00      	nop
  4021ce:	3708      	adds	r7, #8
  4021d0:	46bd      	mov	sp, r7
  4021d2:	bd80      	pop	{r7, pc}
  4021d4:	00401f5d 	.word	0x00401f5d
  4021d8:	51eb851f 	.word	0x51eb851f
  4021dc:	00401e85 	.word	0x00401e85

004021e0 <InitDispUart>:

/**
 *  Configure display UART for output.
 */
void InitDispUart(void)
{
  4021e0:	b5b0      	push	{r4, r5, r7, lr}
  4021e2:	b086      	sub	sp, #24
  4021e4:	af00      	add	r7, sp, #0
		uart_disable_rx(DISP_UART);

		dispUartPdcBase = uart_get_pdc_base(DISP_UART);
		pdc_enable_transfer(dispUartPdcBase, PERIPH_PTCR_TXTEN);
	#elif defined(BOARD_NIRA91)
		const sam_usart_opt_t usart_console_settings = {
  4021e6:	4b15      	ldr	r3, [pc, #84]	; (40223c <InitDispUart+0x5c>)
  4021e8:	463c      	mov	r4, r7
  4021ea:	461d      	mov	r5, r3
  4021ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4021ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4021f0:	e895 0003 	ldmia.w	r5, {r0, r1}
  4021f4:	e884 0003 	stmia.w	r4, {r0, r1}
			/* This field is only used in IrDA mode. */
			0
		};

		/* Enable the peripheral clock in the PMC. */
		sysclk_enable_peripheral_clock(DISP_USART_ID);
  4021f8:	200f      	movs	r0, #15
  4021fa:	4b11      	ldr	r3, [pc, #68]	; (402240 <InitDispUart+0x60>)
  4021fc:	4798      	blx	r3

		/* Configure USART in RS485 mode. */
		usart_init_rs232(DISP_USART, &usart_console_settings,
  4021fe:	4b11      	ldr	r3, [pc, #68]	; (402244 <InitDispUart+0x64>)
  402200:	4798      	blx	r3
  402202:	4602      	mov	r2, r0
  402204:	463b      	mov	r3, r7
  402206:	4619      	mov	r1, r3
  402208:	480f      	ldr	r0, [pc, #60]	; (402248 <InitDispUart+0x68>)
  40220a:	4b10      	ldr	r3, [pc, #64]	; (40224c <InitDispUart+0x6c>)
  40220c:	4798      	blx	r3
		sysclk_get_peripheral_hz());

		/* Enable TX function. */
		usart_disable_rx(DISP_USART);
  40220e:	480e      	ldr	r0, [pc, #56]	; (402248 <InitDispUart+0x68>)
  402210:	4b0f      	ldr	r3, [pc, #60]	; (402250 <InitDispUart+0x70>)
  402212:	4798      	blx	r3
		usart_enable_tx(DISP_USART);
  402214:	480c      	ldr	r0, [pc, #48]	; (402248 <InitDispUart+0x68>)
  402216:	4b0f      	ldr	r3, [pc, #60]	; (402254 <InitDispUart+0x74>)
  402218:	4798      	blx	r3

		/* Get board USART PDC base address and enable receiver and transmitter. */
		dispUartPdcBase = usart_get_pdc_base(DISP_USART);
  40221a:	480b      	ldr	r0, [pc, #44]	; (402248 <InitDispUart+0x68>)
  40221c:	4b0e      	ldr	r3, [pc, #56]	; (402258 <InitDispUart+0x78>)
  40221e:	4798      	blx	r3
  402220:	4602      	mov	r2, r0
  402222:	4b0e      	ldr	r3, [pc, #56]	; (40225c <InitDispUart+0x7c>)
  402224:	601a      	str	r2, [r3, #0]
		pdc_enable_transfer(dispUartPdcBase, PERIPH_PTCR_TXTEN);
  402226:	4b0d      	ldr	r3, [pc, #52]	; (40225c <InitDispUart+0x7c>)
  402228:	681b      	ldr	r3, [r3, #0]
  40222a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40222e:	4618      	mov	r0, r3
  402230:	4b0b      	ldr	r3, [pc, #44]	; (402260 <InitDispUart+0x80>)
  402232:	4798      	blx	r3

	#endif

}
  402234:	bf00      	nop
  402236:	3718      	adds	r7, #24
  402238:	46bd      	mov	sp, r7
  40223a:	bdb0      	pop	{r4, r5, r7, pc}
  40223c:	004035f8 	.word	0x004035f8
  402240:	00401f85 	.word	0x00401f85
  402244:	00401f71 	.word	0x00401f71
  402248:	40028000 	.word	0x40028000
  40224c:	00400b39 	.word	0x00400b39
  402250:	00400c1d 	.word	0x00400c1d
  402254:	00400bbd 	.word	0x00400bbd
  402258:	00400d05 	.word	0x00400d05
  40225c:	20000cb4 	.word	0x20000cb4
  402260:	00401109 	.word	0x00401109

00402264 <__aeabi_uldivmod>:
  402264:	b953      	cbnz	r3, 40227c <__aeabi_uldivmod+0x18>
  402266:	b94a      	cbnz	r2, 40227c <__aeabi_uldivmod+0x18>
  402268:	2900      	cmp	r1, #0
  40226a:	bf08      	it	eq
  40226c:	2800      	cmpeq	r0, #0
  40226e:	bf1c      	itt	ne
  402270:	f04f 31ff 	movne.w	r1, #4294967295
  402274:	f04f 30ff 	movne.w	r0, #4294967295
  402278:	f000 b97e 	b.w	402578 <__aeabi_idiv0>
  40227c:	f1ad 0c08 	sub.w	ip, sp, #8
  402280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402284:	f000 f806 	bl	402294 <__udivmoddi4>
  402288:	f8dd e004 	ldr.w	lr, [sp, #4]
  40228c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402290:	b004      	add	sp, #16
  402292:	4770      	bx	lr

00402294 <__udivmoddi4>:
  402294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402298:	468c      	mov	ip, r1
  40229a:	460e      	mov	r6, r1
  40229c:	4604      	mov	r4, r0
  40229e:	9d08      	ldr	r5, [sp, #32]
  4022a0:	2b00      	cmp	r3, #0
  4022a2:	d150      	bne.n	402346 <__udivmoddi4+0xb2>
  4022a4:	428a      	cmp	r2, r1
  4022a6:	4617      	mov	r7, r2
  4022a8:	d96c      	bls.n	402384 <__udivmoddi4+0xf0>
  4022aa:	fab2 fe82 	clz	lr, r2
  4022ae:	f1be 0f00 	cmp.w	lr, #0
  4022b2:	d00b      	beq.n	4022cc <__udivmoddi4+0x38>
  4022b4:	f1ce 0420 	rsb	r4, lr, #32
  4022b8:	fa20 f404 	lsr.w	r4, r0, r4
  4022bc:	fa01 f60e 	lsl.w	r6, r1, lr
  4022c0:	ea44 0c06 	orr.w	ip, r4, r6
  4022c4:	fa02 f70e 	lsl.w	r7, r2, lr
  4022c8:	fa00 f40e 	lsl.w	r4, r0, lr
  4022cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4022d0:	0c22      	lsrs	r2, r4, #16
  4022d2:	fbbc f0f9 	udiv	r0, ip, r9
  4022d6:	fa1f f887 	uxth.w	r8, r7
  4022da:	fb09 c610 	mls	r6, r9, r0, ip
  4022de:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4022e2:	fb00 f308 	mul.w	r3, r0, r8
  4022e6:	42b3      	cmp	r3, r6
  4022e8:	d909      	bls.n	4022fe <__udivmoddi4+0x6a>
  4022ea:	19f6      	adds	r6, r6, r7
  4022ec:	f100 32ff 	add.w	r2, r0, #4294967295
  4022f0:	f080 8122 	bcs.w	402538 <__udivmoddi4+0x2a4>
  4022f4:	42b3      	cmp	r3, r6
  4022f6:	f240 811f 	bls.w	402538 <__udivmoddi4+0x2a4>
  4022fa:	3802      	subs	r0, #2
  4022fc:	443e      	add	r6, r7
  4022fe:	1af6      	subs	r6, r6, r3
  402300:	b2a2      	uxth	r2, r4
  402302:	fbb6 f3f9 	udiv	r3, r6, r9
  402306:	fb09 6613 	mls	r6, r9, r3, r6
  40230a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40230e:	fb03 f808 	mul.w	r8, r3, r8
  402312:	45a0      	cmp	r8, r4
  402314:	d909      	bls.n	40232a <__udivmoddi4+0x96>
  402316:	19e4      	adds	r4, r4, r7
  402318:	f103 32ff 	add.w	r2, r3, #4294967295
  40231c:	f080 810a 	bcs.w	402534 <__udivmoddi4+0x2a0>
  402320:	45a0      	cmp	r8, r4
  402322:	f240 8107 	bls.w	402534 <__udivmoddi4+0x2a0>
  402326:	3b02      	subs	r3, #2
  402328:	443c      	add	r4, r7
  40232a:	ebc8 0404 	rsb	r4, r8, r4
  40232e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402332:	2100      	movs	r1, #0
  402334:	2d00      	cmp	r5, #0
  402336:	d062      	beq.n	4023fe <__udivmoddi4+0x16a>
  402338:	fa24 f40e 	lsr.w	r4, r4, lr
  40233c:	2300      	movs	r3, #0
  40233e:	602c      	str	r4, [r5, #0]
  402340:	606b      	str	r3, [r5, #4]
  402342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402346:	428b      	cmp	r3, r1
  402348:	d907      	bls.n	40235a <__udivmoddi4+0xc6>
  40234a:	2d00      	cmp	r5, #0
  40234c:	d055      	beq.n	4023fa <__udivmoddi4+0x166>
  40234e:	2100      	movs	r1, #0
  402350:	e885 0041 	stmia.w	r5, {r0, r6}
  402354:	4608      	mov	r0, r1
  402356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40235a:	fab3 f183 	clz	r1, r3
  40235e:	2900      	cmp	r1, #0
  402360:	f040 8090 	bne.w	402484 <__udivmoddi4+0x1f0>
  402364:	42b3      	cmp	r3, r6
  402366:	d302      	bcc.n	40236e <__udivmoddi4+0xda>
  402368:	4282      	cmp	r2, r0
  40236a:	f200 80f8 	bhi.w	40255e <__udivmoddi4+0x2ca>
  40236e:	1a84      	subs	r4, r0, r2
  402370:	eb66 0603 	sbc.w	r6, r6, r3
  402374:	2001      	movs	r0, #1
  402376:	46b4      	mov	ip, r6
  402378:	2d00      	cmp	r5, #0
  40237a:	d040      	beq.n	4023fe <__udivmoddi4+0x16a>
  40237c:	e885 1010 	stmia.w	r5, {r4, ip}
  402380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402384:	b912      	cbnz	r2, 40238c <__udivmoddi4+0xf8>
  402386:	2701      	movs	r7, #1
  402388:	fbb7 f7f2 	udiv	r7, r7, r2
  40238c:	fab7 fe87 	clz	lr, r7
  402390:	f1be 0f00 	cmp.w	lr, #0
  402394:	d135      	bne.n	402402 <__udivmoddi4+0x16e>
  402396:	1bf3      	subs	r3, r6, r7
  402398:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40239c:	fa1f fc87 	uxth.w	ip, r7
  4023a0:	2101      	movs	r1, #1
  4023a2:	fbb3 f0f8 	udiv	r0, r3, r8
  4023a6:	0c22      	lsrs	r2, r4, #16
  4023a8:	fb08 3610 	mls	r6, r8, r0, r3
  4023ac:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4023b0:	fb0c f300 	mul.w	r3, ip, r0
  4023b4:	42b3      	cmp	r3, r6
  4023b6:	d907      	bls.n	4023c8 <__udivmoddi4+0x134>
  4023b8:	19f6      	adds	r6, r6, r7
  4023ba:	f100 32ff 	add.w	r2, r0, #4294967295
  4023be:	d202      	bcs.n	4023c6 <__udivmoddi4+0x132>
  4023c0:	42b3      	cmp	r3, r6
  4023c2:	f200 80ce 	bhi.w	402562 <__udivmoddi4+0x2ce>
  4023c6:	4610      	mov	r0, r2
  4023c8:	1af6      	subs	r6, r6, r3
  4023ca:	b2a2      	uxth	r2, r4
  4023cc:	fbb6 f3f8 	udiv	r3, r6, r8
  4023d0:	fb08 6613 	mls	r6, r8, r3, r6
  4023d4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4023d8:	fb0c fc03 	mul.w	ip, ip, r3
  4023dc:	45a4      	cmp	ip, r4
  4023de:	d907      	bls.n	4023f0 <__udivmoddi4+0x15c>
  4023e0:	19e4      	adds	r4, r4, r7
  4023e2:	f103 32ff 	add.w	r2, r3, #4294967295
  4023e6:	d202      	bcs.n	4023ee <__udivmoddi4+0x15a>
  4023e8:	45a4      	cmp	ip, r4
  4023ea:	f200 80b5 	bhi.w	402558 <__udivmoddi4+0x2c4>
  4023ee:	4613      	mov	r3, r2
  4023f0:	ebcc 0404 	rsb	r4, ip, r4
  4023f4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4023f8:	e79c      	b.n	402334 <__udivmoddi4+0xa0>
  4023fa:	4629      	mov	r1, r5
  4023fc:	4628      	mov	r0, r5
  4023fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402402:	f1ce 0120 	rsb	r1, lr, #32
  402406:	fa06 f30e 	lsl.w	r3, r6, lr
  40240a:	fa07 f70e 	lsl.w	r7, r7, lr
  40240e:	fa20 f901 	lsr.w	r9, r0, r1
  402412:	ea4f 4817 	mov.w	r8, r7, lsr #16
  402416:	40ce      	lsrs	r6, r1
  402418:	ea49 0903 	orr.w	r9, r9, r3
  40241c:	fbb6 faf8 	udiv	sl, r6, r8
  402420:	ea4f 4419 	mov.w	r4, r9, lsr #16
  402424:	fb08 661a 	mls	r6, r8, sl, r6
  402428:	fa1f fc87 	uxth.w	ip, r7
  40242c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  402430:	fb0a f20c 	mul.w	r2, sl, ip
  402434:	429a      	cmp	r2, r3
  402436:	fa00 f40e 	lsl.w	r4, r0, lr
  40243a:	d90a      	bls.n	402452 <__udivmoddi4+0x1be>
  40243c:	19db      	adds	r3, r3, r7
  40243e:	f10a 31ff 	add.w	r1, sl, #4294967295
  402442:	f080 8087 	bcs.w	402554 <__udivmoddi4+0x2c0>
  402446:	429a      	cmp	r2, r3
  402448:	f240 8084 	bls.w	402554 <__udivmoddi4+0x2c0>
  40244c:	f1aa 0a02 	sub.w	sl, sl, #2
  402450:	443b      	add	r3, r7
  402452:	1a9b      	subs	r3, r3, r2
  402454:	fa1f f989 	uxth.w	r9, r9
  402458:	fbb3 f1f8 	udiv	r1, r3, r8
  40245c:	fb08 3311 	mls	r3, r8, r1, r3
  402460:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  402464:	fb01 f60c 	mul.w	r6, r1, ip
  402468:	429e      	cmp	r6, r3
  40246a:	d907      	bls.n	40247c <__udivmoddi4+0x1e8>
  40246c:	19db      	adds	r3, r3, r7
  40246e:	f101 32ff 	add.w	r2, r1, #4294967295
  402472:	d26b      	bcs.n	40254c <__udivmoddi4+0x2b8>
  402474:	429e      	cmp	r6, r3
  402476:	d969      	bls.n	40254c <__udivmoddi4+0x2b8>
  402478:	3902      	subs	r1, #2
  40247a:	443b      	add	r3, r7
  40247c:	1b9b      	subs	r3, r3, r6
  40247e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  402482:	e78e      	b.n	4023a2 <__udivmoddi4+0x10e>
  402484:	f1c1 0e20 	rsb	lr, r1, #32
  402488:	fa22 f40e 	lsr.w	r4, r2, lr
  40248c:	408b      	lsls	r3, r1
  40248e:	4323      	orrs	r3, r4
  402490:	fa20 f70e 	lsr.w	r7, r0, lr
  402494:	fa06 f401 	lsl.w	r4, r6, r1
  402498:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40249c:	fa26 f60e 	lsr.w	r6, r6, lr
  4024a0:	433c      	orrs	r4, r7
  4024a2:	fbb6 f9fc 	udiv	r9, r6, ip
  4024a6:	0c27      	lsrs	r7, r4, #16
  4024a8:	fb0c 6619 	mls	r6, ip, r9, r6
  4024ac:	fa1f f883 	uxth.w	r8, r3
  4024b0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4024b4:	fb09 f708 	mul.w	r7, r9, r8
  4024b8:	42b7      	cmp	r7, r6
  4024ba:	fa02 f201 	lsl.w	r2, r2, r1
  4024be:	fa00 fa01 	lsl.w	sl, r0, r1
  4024c2:	d908      	bls.n	4024d6 <__udivmoddi4+0x242>
  4024c4:	18f6      	adds	r6, r6, r3
  4024c6:	f109 30ff 	add.w	r0, r9, #4294967295
  4024ca:	d241      	bcs.n	402550 <__udivmoddi4+0x2bc>
  4024cc:	42b7      	cmp	r7, r6
  4024ce:	d93f      	bls.n	402550 <__udivmoddi4+0x2bc>
  4024d0:	f1a9 0902 	sub.w	r9, r9, #2
  4024d4:	441e      	add	r6, r3
  4024d6:	1bf6      	subs	r6, r6, r7
  4024d8:	b2a0      	uxth	r0, r4
  4024da:	fbb6 f4fc 	udiv	r4, r6, ip
  4024de:	fb0c 6614 	mls	r6, ip, r4, r6
  4024e2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4024e6:	fb04 f808 	mul.w	r8, r4, r8
  4024ea:	45b8      	cmp	r8, r7
  4024ec:	d907      	bls.n	4024fe <__udivmoddi4+0x26a>
  4024ee:	18ff      	adds	r7, r7, r3
  4024f0:	f104 30ff 	add.w	r0, r4, #4294967295
  4024f4:	d228      	bcs.n	402548 <__udivmoddi4+0x2b4>
  4024f6:	45b8      	cmp	r8, r7
  4024f8:	d926      	bls.n	402548 <__udivmoddi4+0x2b4>
  4024fa:	3c02      	subs	r4, #2
  4024fc:	441f      	add	r7, r3
  4024fe:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  402502:	ebc8 0707 	rsb	r7, r8, r7
  402506:	fba0 8902 	umull	r8, r9, r0, r2
  40250a:	454f      	cmp	r7, r9
  40250c:	4644      	mov	r4, r8
  40250e:	464e      	mov	r6, r9
  402510:	d314      	bcc.n	40253c <__udivmoddi4+0x2a8>
  402512:	d029      	beq.n	402568 <__udivmoddi4+0x2d4>
  402514:	b365      	cbz	r5, 402570 <__udivmoddi4+0x2dc>
  402516:	ebba 0304 	subs.w	r3, sl, r4
  40251a:	eb67 0706 	sbc.w	r7, r7, r6
  40251e:	fa07 fe0e 	lsl.w	lr, r7, lr
  402522:	40cb      	lsrs	r3, r1
  402524:	40cf      	lsrs	r7, r1
  402526:	ea4e 0303 	orr.w	r3, lr, r3
  40252a:	e885 0088 	stmia.w	r5, {r3, r7}
  40252e:	2100      	movs	r1, #0
  402530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402534:	4613      	mov	r3, r2
  402536:	e6f8      	b.n	40232a <__udivmoddi4+0x96>
  402538:	4610      	mov	r0, r2
  40253a:	e6e0      	b.n	4022fe <__udivmoddi4+0x6a>
  40253c:	ebb8 0402 	subs.w	r4, r8, r2
  402540:	eb69 0603 	sbc.w	r6, r9, r3
  402544:	3801      	subs	r0, #1
  402546:	e7e5      	b.n	402514 <__udivmoddi4+0x280>
  402548:	4604      	mov	r4, r0
  40254a:	e7d8      	b.n	4024fe <__udivmoddi4+0x26a>
  40254c:	4611      	mov	r1, r2
  40254e:	e795      	b.n	40247c <__udivmoddi4+0x1e8>
  402550:	4681      	mov	r9, r0
  402552:	e7c0      	b.n	4024d6 <__udivmoddi4+0x242>
  402554:	468a      	mov	sl, r1
  402556:	e77c      	b.n	402452 <__udivmoddi4+0x1be>
  402558:	3b02      	subs	r3, #2
  40255a:	443c      	add	r4, r7
  40255c:	e748      	b.n	4023f0 <__udivmoddi4+0x15c>
  40255e:	4608      	mov	r0, r1
  402560:	e70a      	b.n	402378 <__udivmoddi4+0xe4>
  402562:	3802      	subs	r0, #2
  402564:	443e      	add	r6, r7
  402566:	e72f      	b.n	4023c8 <__udivmoddi4+0x134>
  402568:	45c2      	cmp	sl, r8
  40256a:	d3e7      	bcc.n	40253c <__udivmoddi4+0x2a8>
  40256c:	463e      	mov	r6, r7
  40256e:	e7d1      	b.n	402514 <__udivmoddi4+0x280>
  402570:	4629      	mov	r1, r5
  402572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402576:	bf00      	nop

00402578 <__aeabi_idiv0>:
  402578:	4770      	bx	lr
  40257a:	bf00      	nop

0040257c <__libc_init_array>:
  40257c:	b570      	push	{r4, r5, r6, lr}
  40257e:	4e0f      	ldr	r6, [pc, #60]	; (4025bc <__libc_init_array+0x40>)
  402580:	4d0f      	ldr	r5, [pc, #60]	; (4025c0 <__libc_init_array+0x44>)
  402582:	1b76      	subs	r6, r6, r5
  402584:	10b6      	asrs	r6, r6, #2
  402586:	bf18      	it	ne
  402588:	2400      	movne	r4, #0
  40258a:	d005      	beq.n	402598 <__libc_init_array+0x1c>
  40258c:	3401      	adds	r4, #1
  40258e:	f855 3b04 	ldr.w	r3, [r5], #4
  402592:	4798      	blx	r3
  402594:	42a6      	cmp	r6, r4
  402596:	d1f9      	bne.n	40258c <__libc_init_array+0x10>
  402598:	4e0a      	ldr	r6, [pc, #40]	; (4025c4 <__libc_init_array+0x48>)
  40259a:	4d0b      	ldr	r5, [pc, #44]	; (4025c8 <__libc_init_array+0x4c>)
  40259c:	1b76      	subs	r6, r6, r5
  40259e:	f001 f83b 	bl	403618 <_init>
  4025a2:	10b6      	asrs	r6, r6, #2
  4025a4:	bf18      	it	ne
  4025a6:	2400      	movne	r4, #0
  4025a8:	d006      	beq.n	4025b8 <__libc_init_array+0x3c>
  4025aa:	3401      	adds	r4, #1
  4025ac:	f855 3b04 	ldr.w	r3, [r5], #4
  4025b0:	4798      	blx	r3
  4025b2:	42a6      	cmp	r6, r4
  4025b4:	d1f9      	bne.n	4025aa <__libc_init_array+0x2e>
  4025b6:	bd70      	pop	{r4, r5, r6, pc}
  4025b8:	bd70      	pop	{r4, r5, r6, pc}
  4025ba:	bf00      	nop
  4025bc:	00403624 	.word	0x00403624
  4025c0:	00403624 	.word	0x00403624
  4025c4:	0040362c 	.word	0x0040362c
  4025c8:	00403624 	.word	0x00403624

004025cc <memset>:
  4025cc:	b470      	push	{r4, r5, r6}
  4025ce:	0784      	lsls	r4, r0, #30
  4025d0:	d046      	beq.n	402660 <memset+0x94>
  4025d2:	1e54      	subs	r4, r2, #1
  4025d4:	2a00      	cmp	r2, #0
  4025d6:	d041      	beq.n	40265c <memset+0x90>
  4025d8:	b2cd      	uxtb	r5, r1
  4025da:	4603      	mov	r3, r0
  4025dc:	e002      	b.n	4025e4 <memset+0x18>
  4025de:	1e62      	subs	r2, r4, #1
  4025e0:	b3e4      	cbz	r4, 40265c <memset+0x90>
  4025e2:	4614      	mov	r4, r2
  4025e4:	f803 5b01 	strb.w	r5, [r3], #1
  4025e8:	079a      	lsls	r2, r3, #30
  4025ea:	d1f8      	bne.n	4025de <memset+0x12>
  4025ec:	2c03      	cmp	r4, #3
  4025ee:	d92e      	bls.n	40264e <memset+0x82>
  4025f0:	b2cd      	uxtb	r5, r1
  4025f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4025f6:	2c0f      	cmp	r4, #15
  4025f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4025fc:	d919      	bls.n	402632 <memset+0x66>
  4025fe:	f103 0210 	add.w	r2, r3, #16
  402602:	4626      	mov	r6, r4
  402604:	3e10      	subs	r6, #16
  402606:	2e0f      	cmp	r6, #15
  402608:	f842 5c10 	str.w	r5, [r2, #-16]
  40260c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402610:	f842 5c08 	str.w	r5, [r2, #-8]
  402614:	f842 5c04 	str.w	r5, [r2, #-4]
  402618:	f102 0210 	add.w	r2, r2, #16
  40261c:	d8f2      	bhi.n	402604 <memset+0x38>
  40261e:	f1a4 0210 	sub.w	r2, r4, #16
  402622:	f022 020f 	bic.w	r2, r2, #15
  402626:	f004 040f 	and.w	r4, r4, #15
  40262a:	3210      	adds	r2, #16
  40262c:	2c03      	cmp	r4, #3
  40262e:	4413      	add	r3, r2
  402630:	d90d      	bls.n	40264e <memset+0x82>
  402632:	461e      	mov	r6, r3
  402634:	4622      	mov	r2, r4
  402636:	3a04      	subs	r2, #4
  402638:	2a03      	cmp	r2, #3
  40263a:	f846 5b04 	str.w	r5, [r6], #4
  40263e:	d8fa      	bhi.n	402636 <memset+0x6a>
  402640:	1f22      	subs	r2, r4, #4
  402642:	f022 0203 	bic.w	r2, r2, #3
  402646:	3204      	adds	r2, #4
  402648:	4413      	add	r3, r2
  40264a:	f004 0403 	and.w	r4, r4, #3
  40264e:	b12c      	cbz	r4, 40265c <memset+0x90>
  402650:	b2c9      	uxtb	r1, r1
  402652:	441c      	add	r4, r3
  402654:	f803 1b01 	strb.w	r1, [r3], #1
  402658:	42a3      	cmp	r3, r4
  40265a:	d1fb      	bne.n	402654 <memset+0x88>
  40265c:	bc70      	pop	{r4, r5, r6}
  40265e:	4770      	bx	lr
  402660:	4614      	mov	r4, r2
  402662:	4603      	mov	r3, r0
  402664:	e7c2      	b.n	4025ec <memset+0x20>
  402666:	bf00      	nop

00402668 <setbuf>:
  402668:	2900      	cmp	r1, #0
  40266a:	bf0c      	ite	eq
  40266c:	2202      	moveq	r2, #2
  40266e:	2200      	movne	r2, #0
  402670:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402674:	f000 b800 	b.w	402678 <setvbuf>

00402678 <setvbuf>:
  402678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40267c:	4c51      	ldr	r4, [pc, #324]	; (4027c4 <setvbuf+0x14c>)
  40267e:	6825      	ldr	r5, [r4, #0]
  402680:	b083      	sub	sp, #12
  402682:	4604      	mov	r4, r0
  402684:	460f      	mov	r7, r1
  402686:	4690      	mov	r8, r2
  402688:	461e      	mov	r6, r3
  40268a:	b115      	cbz	r5, 402692 <setvbuf+0x1a>
  40268c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40268e:	2b00      	cmp	r3, #0
  402690:	d079      	beq.n	402786 <setvbuf+0x10e>
  402692:	f1b8 0f02 	cmp.w	r8, #2
  402696:	d004      	beq.n	4026a2 <setvbuf+0x2a>
  402698:	f1b8 0f01 	cmp.w	r8, #1
  40269c:	d87f      	bhi.n	40279e <setvbuf+0x126>
  40269e:	2e00      	cmp	r6, #0
  4026a0:	db7d      	blt.n	40279e <setvbuf+0x126>
  4026a2:	4621      	mov	r1, r4
  4026a4:	4628      	mov	r0, r5
  4026a6:	f000 f943 	bl	402930 <_fflush_r>
  4026aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4026ac:	b141      	cbz	r1, 4026c0 <setvbuf+0x48>
  4026ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4026b2:	4299      	cmp	r1, r3
  4026b4:	d002      	beq.n	4026bc <setvbuf+0x44>
  4026b6:	4628      	mov	r0, r5
  4026b8:	f000 fa3a 	bl	402b30 <_free_r>
  4026bc:	2300      	movs	r3, #0
  4026be:	6323      	str	r3, [r4, #48]	; 0x30
  4026c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4026c4:	2200      	movs	r2, #0
  4026c6:	61a2      	str	r2, [r4, #24]
  4026c8:	6062      	str	r2, [r4, #4]
  4026ca:	061a      	lsls	r2, r3, #24
  4026cc:	d454      	bmi.n	402778 <setvbuf+0x100>
  4026ce:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4026d2:	f023 0303 	bic.w	r3, r3, #3
  4026d6:	f1b8 0f02 	cmp.w	r8, #2
  4026da:	81a3      	strh	r3, [r4, #12]
  4026dc:	d039      	beq.n	402752 <setvbuf+0xda>
  4026de:	ab01      	add	r3, sp, #4
  4026e0:	466a      	mov	r2, sp
  4026e2:	4621      	mov	r1, r4
  4026e4:	4628      	mov	r0, r5
  4026e6:	f000 fb35 	bl	402d54 <__swhatbuf_r>
  4026ea:	89a3      	ldrh	r3, [r4, #12]
  4026ec:	4318      	orrs	r0, r3
  4026ee:	81a0      	strh	r0, [r4, #12]
  4026f0:	b326      	cbz	r6, 40273c <setvbuf+0xc4>
  4026f2:	b327      	cbz	r7, 40273e <setvbuf+0xc6>
  4026f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4026f6:	2b00      	cmp	r3, #0
  4026f8:	d04d      	beq.n	402796 <setvbuf+0x11e>
  4026fa:	9b00      	ldr	r3, [sp, #0]
  4026fc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  402700:	6027      	str	r7, [r4, #0]
  402702:	429e      	cmp	r6, r3
  402704:	bf1c      	itt	ne
  402706:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40270a:	81a0      	strhne	r0, [r4, #12]
  40270c:	f1b8 0f01 	cmp.w	r8, #1
  402710:	bf08      	it	eq
  402712:	f040 0001 	orreq.w	r0, r0, #1
  402716:	b283      	uxth	r3, r0
  402718:	bf08      	it	eq
  40271a:	81a0      	strheq	r0, [r4, #12]
  40271c:	f003 0008 	and.w	r0, r3, #8
  402720:	b280      	uxth	r0, r0
  402722:	6127      	str	r7, [r4, #16]
  402724:	6166      	str	r6, [r4, #20]
  402726:	b318      	cbz	r0, 402770 <setvbuf+0xf8>
  402728:	f013 0001 	ands.w	r0, r3, #1
  40272c:	d02f      	beq.n	40278e <setvbuf+0x116>
  40272e:	2000      	movs	r0, #0
  402730:	4276      	negs	r6, r6
  402732:	61a6      	str	r6, [r4, #24]
  402734:	60a0      	str	r0, [r4, #8]
  402736:	b003      	add	sp, #12
  402738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40273c:	9e00      	ldr	r6, [sp, #0]
  40273e:	4630      	mov	r0, r6
  402740:	f000 fb38 	bl	402db4 <malloc>
  402744:	4607      	mov	r7, r0
  402746:	b368      	cbz	r0, 4027a4 <setvbuf+0x12c>
  402748:	89a3      	ldrh	r3, [r4, #12]
  40274a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40274e:	81a3      	strh	r3, [r4, #12]
  402750:	e7d0      	b.n	4026f4 <setvbuf+0x7c>
  402752:	2000      	movs	r0, #0
  402754:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402758:	f043 0302 	orr.w	r3, r3, #2
  40275c:	2500      	movs	r5, #0
  40275e:	2101      	movs	r1, #1
  402760:	81a3      	strh	r3, [r4, #12]
  402762:	60a5      	str	r5, [r4, #8]
  402764:	6022      	str	r2, [r4, #0]
  402766:	6122      	str	r2, [r4, #16]
  402768:	6161      	str	r1, [r4, #20]
  40276a:	b003      	add	sp, #12
  40276c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402770:	60a0      	str	r0, [r4, #8]
  402772:	b003      	add	sp, #12
  402774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402778:	6921      	ldr	r1, [r4, #16]
  40277a:	4628      	mov	r0, r5
  40277c:	f000 f9d8 	bl	402b30 <_free_r>
  402780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402784:	e7a3      	b.n	4026ce <setvbuf+0x56>
  402786:	4628      	mov	r0, r5
  402788:	f000 f966 	bl	402a58 <__sinit>
  40278c:	e781      	b.n	402692 <setvbuf+0x1a>
  40278e:	60a6      	str	r6, [r4, #8]
  402790:	b003      	add	sp, #12
  402792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402796:	4628      	mov	r0, r5
  402798:	f000 f95e 	bl	402a58 <__sinit>
  40279c:	e7ad      	b.n	4026fa <setvbuf+0x82>
  40279e:	f04f 30ff 	mov.w	r0, #4294967295
  4027a2:	e7e2      	b.n	40276a <setvbuf+0xf2>
  4027a4:	f8dd 9000 	ldr.w	r9, [sp]
  4027a8:	45b1      	cmp	r9, r6
  4027aa:	d006      	beq.n	4027ba <setvbuf+0x142>
  4027ac:	4648      	mov	r0, r9
  4027ae:	f000 fb01 	bl	402db4 <malloc>
  4027b2:	4607      	mov	r7, r0
  4027b4:	b108      	cbz	r0, 4027ba <setvbuf+0x142>
  4027b6:	464e      	mov	r6, r9
  4027b8:	e7c6      	b.n	402748 <setvbuf+0xd0>
  4027ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027be:	f04f 30ff 	mov.w	r0, #4294967295
  4027c2:	e7c7      	b.n	402754 <setvbuf+0xdc>
  4027c4:	20000438 	.word	0x20000438

004027c8 <register_fini>:
  4027c8:	4b02      	ldr	r3, [pc, #8]	; (4027d4 <register_fini+0xc>)
  4027ca:	b113      	cbz	r3, 4027d2 <register_fini+0xa>
  4027cc:	4802      	ldr	r0, [pc, #8]	; (4027d8 <register_fini+0x10>)
  4027ce:	f000 b805 	b.w	4027dc <atexit>
  4027d2:	4770      	bx	lr
  4027d4:	00000000 	.word	0x00000000
  4027d8:	00402a6d 	.word	0x00402a6d

004027dc <atexit>:
  4027dc:	2300      	movs	r3, #0
  4027de:	4601      	mov	r1, r0
  4027e0:	461a      	mov	r2, r3
  4027e2:	4618      	mov	r0, r3
  4027e4:	f000 be16 	b.w	403414 <__register_exitproc>

004027e8 <__sflush_r>:
  4027e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4027ec:	b29a      	uxth	r2, r3
  4027ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4027f2:	460d      	mov	r5, r1
  4027f4:	0711      	lsls	r1, r2, #28
  4027f6:	4680      	mov	r8, r0
  4027f8:	d43c      	bmi.n	402874 <__sflush_r+0x8c>
  4027fa:	686a      	ldr	r2, [r5, #4]
  4027fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402800:	2a00      	cmp	r2, #0
  402802:	81ab      	strh	r3, [r5, #12]
  402804:	dd73      	ble.n	4028ee <__sflush_r+0x106>
  402806:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402808:	2c00      	cmp	r4, #0
  40280a:	d04b      	beq.n	4028a4 <__sflush_r+0xbc>
  40280c:	b29b      	uxth	r3, r3
  40280e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  402812:	2100      	movs	r1, #0
  402814:	b292      	uxth	r2, r2
  402816:	f8d8 6000 	ldr.w	r6, [r8]
  40281a:	f8c8 1000 	str.w	r1, [r8]
  40281e:	2a00      	cmp	r2, #0
  402820:	d069      	beq.n	4028f6 <__sflush_r+0x10e>
  402822:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402824:	075f      	lsls	r7, r3, #29
  402826:	d505      	bpl.n	402834 <__sflush_r+0x4c>
  402828:	6869      	ldr	r1, [r5, #4]
  40282a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40282c:	1a52      	subs	r2, r2, r1
  40282e:	b10b      	cbz	r3, 402834 <__sflush_r+0x4c>
  402830:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402832:	1ad2      	subs	r2, r2, r3
  402834:	2300      	movs	r3, #0
  402836:	69e9      	ldr	r1, [r5, #28]
  402838:	4640      	mov	r0, r8
  40283a:	47a0      	blx	r4
  40283c:	1c44      	adds	r4, r0, #1
  40283e:	d03c      	beq.n	4028ba <__sflush_r+0xd2>
  402840:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402844:	692a      	ldr	r2, [r5, #16]
  402846:	602a      	str	r2, [r5, #0]
  402848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40284c:	2200      	movs	r2, #0
  40284e:	81ab      	strh	r3, [r5, #12]
  402850:	04db      	lsls	r3, r3, #19
  402852:	606a      	str	r2, [r5, #4]
  402854:	d449      	bmi.n	4028ea <__sflush_r+0x102>
  402856:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402858:	f8c8 6000 	str.w	r6, [r8]
  40285c:	b311      	cbz	r1, 4028a4 <__sflush_r+0xbc>
  40285e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402862:	4299      	cmp	r1, r3
  402864:	d002      	beq.n	40286c <__sflush_r+0x84>
  402866:	4640      	mov	r0, r8
  402868:	f000 f962 	bl	402b30 <_free_r>
  40286c:	2000      	movs	r0, #0
  40286e:	6328      	str	r0, [r5, #48]	; 0x30
  402870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402874:	692e      	ldr	r6, [r5, #16]
  402876:	b1ae      	cbz	r6, 4028a4 <__sflush_r+0xbc>
  402878:	682c      	ldr	r4, [r5, #0]
  40287a:	602e      	str	r6, [r5, #0]
  40287c:	0790      	lsls	r0, r2, #30
  40287e:	bf0c      	ite	eq
  402880:	696b      	ldreq	r3, [r5, #20]
  402882:	2300      	movne	r3, #0
  402884:	1ba4      	subs	r4, r4, r6
  402886:	60ab      	str	r3, [r5, #8]
  402888:	e00a      	b.n	4028a0 <__sflush_r+0xb8>
  40288a:	4623      	mov	r3, r4
  40288c:	4632      	mov	r2, r6
  40288e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402890:	69e9      	ldr	r1, [r5, #28]
  402892:	4640      	mov	r0, r8
  402894:	47b8      	blx	r7
  402896:	2800      	cmp	r0, #0
  402898:	eba4 0400 	sub.w	r4, r4, r0
  40289c:	4406      	add	r6, r0
  40289e:	dd04      	ble.n	4028aa <__sflush_r+0xc2>
  4028a0:	2c00      	cmp	r4, #0
  4028a2:	dcf2      	bgt.n	40288a <__sflush_r+0xa2>
  4028a4:	2000      	movs	r0, #0
  4028a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028aa:	89ab      	ldrh	r3, [r5, #12]
  4028ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028b0:	81ab      	strh	r3, [r5, #12]
  4028b2:	f04f 30ff 	mov.w	r0, #4294967295
  4028b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028ba:	f8d8 2000 	ldr.w	r2, [r8]
  4028be:	2a1d      	cmp	r2, #29
  4028c0:	d8f3      	bhi.n	4028aa <__sflush_r+0xc2>
  4028c2:	4b1a      	ldr	r3, [pc, #104]	; (40292c <__sflush_r+0x144>)
  4028c4:	40d3      	lsrs	r3, r2
  4028c6:	f003 0301 	and.w	r3, r3, #1
  4028ca:	f083 0401 	eor.w	r4, r3, #1
  4028ce:	2b00      	cmp	r3, #0
  4028d0:	d0eb      	beq.n	4028aa <__sflush_r+0xc2>
  4028d2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4028d6:	6929      	ldr	r1, [r5, #16]
  4028d8:	6029      	str	r1, [r5, #0]
  4028da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4028de:	04d9      	lsls	r1, r3, #19
  4028e0:	606c      	str	r4, [r5, #4]
  4028e2:	81ab      	strh	r3, [r5, #12]
  4028e4:	d5b7      	bpl.n	402856 <__sflush_r+0x6e>
  4028e6:	2a00      	cmp	r2, #0
  4028e8:	d1b5      	bne.n	402856 <__sflush_r+0x6e>
  4028ea:	6528      	str	r0, [r5, #80]	; 0x50
  4028ec:	e7b3      	b.n	402856 <__sflush_r+0x6e>
  4028ee:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4028f0:	2a00      	cmp	r2, #0
  4028f2:	dc88      	bgt.n	402806 <__sflush_r+0x1e>
  4028f4:	e7d6      	b.n	4028a4 <__sflush_r+0xbc>
  4028f6:	2301      	movs	r3, #1
  4028f8:	69e9      	ldr	r1, [r5, #28]
  4028fa:	4640      	mov	r0, r8
  4028fc:	47a0      	blx	r4
  4028fe:	1c43      	adds	r3, r0, #1
  402900:	4602      	mov	r2, r0
  402902:	d002      	beq.n	40290a <__sflush_r+0x122>
  402904:	89ab      	ldrh	r3, [r5, #12]
  402906:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402908:	e78c      	b.n	402824 <__sflush_r+0x3c>
  40290a:	f8d8 3000 	ldr.w	r3, [r8]
  40290e:	2b00      	cmp	r3, #0
  402910:	d0f8      	beq.n	402904 <__sflush_r+0x11c>
  402912:	2b1d      	cmp	r3, #29
  402914:	d001      	beq.n	40291a <__sflush_r+0x132>
  402916:	2b16      	cmp	r3, #22
  402918:	d102      	bne.n	402920 <__sflush_r+0x138>
  40291a:	f8c8 6000 	str.w	r6, [r8]
  40291e:	e7c1      	b.n	4028a4 <__sflush_r+0xbc>
  402920:	89ab      	ldrh	r3, [r5, #12]
  402922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402926:	81ab      	strh	r3, [r5, #12]
  402928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40292c:	20400001 	.word	0x20400001

00402930 <_fflush_r>:
  402930:	b510      	push	{r4, lr}
  402932:	4604      	mov	r4, r0
  402934:	b082      	sub	sp, #8
  402936:	b108      	cbz	r0, 40293c <_fflush_r+0xc>
  402938:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40293a:	b153      	cbz	r3, 402952 <_fflush_r+0x22>
  40293c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  402940:	b908      	cbnz	r0, 402946 <_fflush_r+0x16>
  402942:	b002      	add	sp, #8
  402944:	bd10      	pop	{r4, pc}
  402946:	4620      	mov	r0, r4
  402948:	b002      	add	sp, #8
  40294a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40294e:	f7ff bf4b 	b.w	4027e8 <__sflush_r>
  402952:	9101      	str	r1, [sp, #4]
  402954:	f000 f880 	bl	402a58 <__sinit>
  402958:	9901      	ldr	r1, [sp, #4]
  40295a:	e7ef      	b.n	40293c <_fflush_r+0xc>

0040295c <_cleanup_r>:
  40295c:	4901      	ldr	r1, [pc, #4]	; (402964 <_cleanup_r+0x8>)
  40295e:	f000 b9cf 	b.w	402d00 <_fwalk_reent>
  402962:	bf00      	nop
  402964:	004034dd 	.word	0x004034dd

00402968 <__sinit.part.1>:
  402968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40296c:	4b35      	ldr	r3, [pc, #212]	; (402a44 <__sinit.part.1+0xdc>)
  40296e:	6845      	ldr	r5, [r0, #4]
  402970:	63c3      	str	r3, [r0, #60]	; 0x3c
  402972:	2400      	movs	r4, #0
  402974:	4607      	mov	r7, r0
  402976:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40297a:	2304      	movs	r3, #4
  40297c:	2103      	movs	r1, #3
  40297e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402982:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402986:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40298a:	b083      	sub	sp, #12
  40298c:	602c      	str	r4, [r5, #0]
  40298e:	606c      	str	r4, [r5, #4]
  402990:	60ac      	str	r4, [r5, #8]
  402992:	666c      	str	r4, [r5, #100]	; 0x64
  402994:	81ec      	strh	r4, [r5, #14]
  402996:	612c      	str	r4, [r5, #16]
  402998:	616c      	str	r4, [r5, #20]
  40299a:	61ac      	str	r4, [r5, #24]
  40299c:	81ab      	strh	r3, [r5, #12]
  40299e:	4621      	mov	r1, r4
  4029a0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4029a4:	2208      	movs	r2, #8
  4029a6:	f7ff fe11 	bl	4025cc <memset>
  4029aa:	68be      	ldr	r6, [r7, #8]
  4029ac:	f8df b098 	ldr.w	fp, [pc, #152]	; 402a48 <__sinit.part.1+0xe0>
  4029b0:	f8df a098 	ldr.w	sl, [pc, #152]	; 402a4c <__sinit.part.1+0xe4>
  4029b4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402a50 <__sinit.part.1+0xe8>
  4029b8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402a54 <__sinit.part.1+0xec>
  4029bc:	f8c5 b020 	str.w	fp, [r5, #32]
  4029c0:	2301      	movs	r3, #1
  4029c2:	2209      	movs	r2, #9
  4029c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4029c8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4029cc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4029d0:	61ed      	str	r5, [r5, #28]
  4029d2:	4621      	mov	r1, r4
  4029d4:	81f3      	strh	r3, [r6, #14]
  4029d6:	81b2      	strh	r2, [r6, #12]
  4029d8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4029dc:	6034      	str	r4, [r6, #0]
  4029de:	6074      	str	r4, [r6, #4]
  4029e0:	60b4      	str	r4, [r6, #8]
  4029e2:	6674      	str	r4, [r6, #100]	; 0x64
  4029e4:	6134      	str	r4, [r6, #16]
  4029e6:	6174      	str	r4, [r6, #20]
  4029e8:	61b4      	str	r4, [r6, #24]
  4029ea:	2208      	movs	r2, #8
  4029ec:	9301      	str	r3, [sp, #4]
  4029ee:	f7ff fded 	bl	4025cc <memset>
  4029f2:	68fd      	ldr	r5, [r7, #12]
  4029f4:	61f6      	str	r6, [r6, #28]
  4029f6:	2012      	movs	r0, #18
  4029f8:	2202      	movs	r2, #2
  4029fa:	f8c6 b020 	str.w	fp, [r6, #32]
  4029fe:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402a02:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402a06:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402a0a:	4621      	mov	r1, r4
  402a0c:	81a8      	strh	r0, [r5, #12]
  402a0e:	81ea      	strh	r2, [r5, #14]
  402a10:	602c      	str	r4, [r5, #0]
  402a12:	606c      	str	r4, [r5, #4]
  402a14:	60ac      	str	r4, [r5, #8]
  402a16:	666c      	str	r4, [r5, #100]	; 0x64
  402a18:	612c      	str	r4, [r5, #16]
  402a1a:	616c      	str	r4, [r5, #20]
  402a1c:	61ac      	str	r4, [r5, #24]
  402a1e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402a22:	2208      	movs	r2, #8
  402a24:	f7ff fdd2 	bl	4025cc <memset>
  402a28:	9b01      	ldr	r3, [sp, #4]
  402a2a:	61ed      	str	r5, [r5, #28]
  402a2c:	f8c5 b020 	str.w	fp, [r5, #32]
  402a30:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402a34:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402a38:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  402a3e:	b003      	add	sp, #12
  402a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a44:	0040295d 	.word	0x0040295d
  402a48:	00403361 	.word	0x00403361
  402a4c:	00403385 	.word	0x00403385
  402a50:	004033c1 	.word	0x004033c1
  402a54:	004033e1 	.word	0x004033e1

00402a58 <__sinit>:
  402a58:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402a5a:	b103      	cbz	r3, 402a5e <__sinit+0x6>
  402a5c:	4770      	bx	lr
  402a5e:	f7ff bf83 	b.w	402968 <__sinit.part.1>
  402a62:	bf00      	nop

00402a64 <__sfp_lock_acquire>:
  402a64:	4770      	bx	lr
  402a66:	bf00      	nop

00402a68 <__sfp_lock_release>:
  402a68:	4770      	bx	lr
  402a6a:	bf00      	nop

00402a6c <__libc_fini_array>:
  402a6c:	b538      	push	{r3, r4, r5, lr}
  402a6e:	4d07      	ldr	r5, [pc, #28]	; (402a8c <__libc_fini_array+0x20>)
  402a70:	4c07      	ldr	r4, [pc, #28]	; (402a90 <__libc_fini_array+0x24>)
  402a72:	1b2c      	subs	r4, r5, r4
  402a74:	10a4      	asrs	r4, r4, #2
  402a76:	d005      	beq.n	402a84 <__libc_fini_array+0x18>
  402a78:	3c01      	subs	r4, #1
  402a7a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402a7e:	4798      	blx	r3
  402a80:	2c00      	cmp	r4, #0
  402a82:	d1f9      	bne.n	402a78 <__libc_fini_array+0xc>
  402a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402a88:	f000 bdd0 	b.w	40362c <_fini>
  402a8c:	0040363c 	.word	0x0040363c
  402a90:	00403638 	.word	0x00403638

00402a94 <_malloc_trim_r>:
  402a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a96:	4f23      	ldr	r7, [pc, #140]	; (402b24 <_malloc_trim_r+0x90>)
  402a98:	460c      	mov	r4, r1
  402a9a:	4606      	mov	r6, r0
  402a9c:	f000 fc4a 	bl	403334 <__malloc_lock>
  402aa0:	68bb      	ldr	r3, [r7, #8]
  402aa2:	685d      	ldr	r5, [r3, #4]
  402aa4:	f025 0503 	bic.w	r5, r5, #3
  402aa8:	1b29      	subs	r1, r5, r4
  402aaa:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  402aae:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402ab2:	f021 010f 	bic.w	r1, r1, #15
  402ab6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402aba:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402abe:	db07      	blt.n	402ad0 <_malloc_trim_r+0x3c>
  402ac0:	2100      	movs	r1, #0
  402ac2:	4630      	mov	r0, r6
  402ac4:	f000 fc3a 	bl	40333c <_sbrk_r>
  402ac8:	68bb      	ldr	r3, [r7, #8]
  402aca:	442b      	add	r3, r5
  402acc:	4298      	cmp	r0, r3
  402ace:	d004      	beq.n	402ada <_malloc_trim_r+0x46>
  402ad0:	4630      	mov	r0, r6
  402ad2:	f000 fc31 	bl	403338 <__malloc_unlock>
  402ad6:	2000      	movs	r0, #0
  402ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ada:	4261      	negs	r1, r4
  402adc:	4630      	mov	r0, r6
  402ade:	f000 fc2d 	bl	40333c <_sbrk_r>
  402ae2:	3001      	adds	r0, #1
  402ae4:	d00d      	beq.n	402b02 <_malloc_trim_r+0x6e>
  402ae6:	4b10      	ldr	r3, [pc, #64]	; (402b28 <_malloc_trim_r+0x94>)
  402ae8:	68ba      	ldr	r2, [r7, #8]
  402aea:	6819      	ldr	r1, [r3, #0]
  402aec:	1b2d      	subs	r5, r5, r4
  402aee:	f045 0501 	orr.w	r5, r5, #1
  402af2:	4630      	mov	r0, r6
  402af4:	1b09      	subs	r1, r1, r4
  402af6:	6055      	str	r5, [r2, #4]
  402af8:	6019      	str	r1, [r3, #0]
  402afa:	f000 fc1d 	bl	403338 <__malloc_unlock>
  402afe:	2001      	movs	r0, #1
  402b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b02:	2100      	movs	r1, #0
  402b04:	4630      	mov	r0, r6
  402b06:	f000 fc19 	bl	40333c <_sbrk_r>
  402b0a:	68ba      	ldr	r2, [r7, #8]
  402b0c:	1a83      	subs	r3, r0, r2
  402b0e:	2b0f      	cmp	r3, #15
  402b10:	ddde      	ble.n	402ad0 <_malloc_trim_r+0x3c>
  402b12:	4c06      	ldr	r4, [pc, #24]	; (402b2c <_malloc_trim_r+0x98>)
  402b14:	4904      	ldr	r1, [pc, #16]	; (402b28 <_malloc_trim_r+0x94>)
  402b16:	6824      	ldr	r4, [r4, #0]
  402b18:	f043 0301 	orr.w	r3, r3, #1
  402b1c:	1b00      	subs	r0, r0, r4
  402b1e:	6053      	str	r3, [r2, #4]
  402b20:	6008      	str	r0, [r1, #0]
  402b22:	e7d5      	b.n	402ad0 <_malloc_trim_r+0x3c>
  402b24:	2000043c 	.word	0x2000043c
  402b28:	20000a84 	.word	0x20000a84
  402b2c:	20000848 	.word	0x20000848

00402b30 <_free_r>:
  402b30:	2900      	cmp	r1, #0
  402b32:	d045      	beq.n	402bc0 <_free_r+0x90>
  402b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b38:	460d      	mov	r5, r1
  402b3a:	4680      	mov	r8, r0
  402b3c:	f000 fbfa 	bl	403334 <__malloc_lock>
  402b40:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402b44:	496a      	ldr	r1, [pc, #424]	; (402cf0 <_free_r+0x1c0>)
  402b46:	f027 0301 	bic.w	r3, r7, #1
  402b4a:	f1a5 0408 	sub.w	r4, r5, #8
  402b4e:	18e2      	adds	r2, r4, r3
  402b50:	688e      	ldr	r6, [r1, #8]
  402b52:	6850      	ldr	r0, [r2, #4]
  402b54:	42b2      	cmp	r2, r6
  402b56:	f020 0003 	bic.w	r0, r0, #3
  402b5a:	d062      	beq.n	402c22 <_free_r+0xf2>
  402b5c:	07fe      	lsls	r6, r7, #31
  402b5e:	6050      	str	r0, [r2, #4]
  402b60:	d40b      	bmi.n	402b7a <_free_r+0x4a>
  402b62:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402b66:	1be4      	subs	r4, r4, r7
  402b68:	f101 0e08 	add.w	lr, r1, #8
  402b6c:	68a5      	ldr	r5, [r4, #8]
  402b6e:	4575      	cmp	r5, lr
  402b70:	443b      	add	r3, r7
  402b72:	d06f      	beq.n	402c54 <_free_r+0x124>
  402b74:	68e7      	ldr	r7, [r4, #12]
  402b76:	60ef      	str	r7, [r5, #12]
  402b78:	60bd      	str	r5, [r7, #8]
  402b7a:	1815      	adds	r5, r2, r0
  402b7c:	686d      	ldr	r5, [r5, #4]
  402b7e:	07ed      	lsls	r5, r5, #31
  402b80:	d542      	bpl.n	402c08 <_free_r+0xd8>
  402b82:	f043 0201 	orr.w	r2, r3, #1
  402b86:	6062      	str	r2, [r4, #4]
  402b88:	50e3      	str	r3, [r4, r3]
  402b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402b8e:	d218      	bcs.n	402bc2 <_free_r+0x92>
  402b90:	08db      	lsrs	r3, r3, #3
  402b92:	1c5a      	adds	r2, r3, #1
  402b94:	684d      	ldr	r5, [r1, #4]
  402b96:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  402b9a:	60a7      	str	r7, [r4, #8]
  402b9c:	2001      	movs	r0, #1
  402b9e:	109b      	asrs	r3, r3, #2
  402ba0:	fa00 f303 	lsl.w	r3, r0, r3
  402ba4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  402ba8:	431d      	orrs	r5, r3
  402baa:	3808      	subs	r0, #8
  402bac:	60e0      	str	r0, [r4, #12]
  402bae:	604d      	str	r5, [r1, #4]
  402bb0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  402bb4:	60fc      	str	r4, [r7, #12]
  402bb6:	4640      	mov	r0, r8
  402bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402bbc:	f000 bbbc 	b.w	403338 <__malloc_unlock>
  402bc0:	4770      	bx	lr
  402bc2:	0a5a      	lsrs	r2, r3, #9
  402bc4:	2a04      	cmp	r2, #4
  402bc6:	d853      	bhi.n	402c70 <_free_r+0x140>
  402bc8:	099a      	lsrs	r2, r3, #6
  402bca:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402bce:	007f      	lsls	r7, r7, #1
  402bd0:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402bd4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  402bd8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  402bdc:	4944      	ldr	r1, [pc, #272]	; (402cf0 <_free_r+0x1c0>)
  402bde:	3808      	subs	r0, #8
  402be0:	4290      	cmp	r0, r2
  402be2:	d04d      	beq.n	402c80 <_free_r+0x150>
  402be4:	6851      	ldr	r1, [r2, #4]
  402be6:	f021 0103 	bic.w	r1, r1, #3
  402bea:	428b      	cmp	r3, r1
  402bec:	d202      	bcs.n	402bf4 <_free_r+0xc4>
  402bee:	6892      	ldr	r2, [r2, #8]
  402bf0:	4290      	cmp	r0, r2
  402bf2:	d1f7      	bne.n	402be4 <_free_r+0xb4>
  402bf4:	68d0      	ldr	r0, [r2, #12]
  402bf6:	60e0      	str	r0, [r4, #12]
  402bf8:	60a2      	str	r2, [r4, #8]
  402bfa:	6084      	str	r4, [r0, #8]
  402bfc:	60d4      	str	r4, [r2, #12]
  402bfe:	4640      	mov	r0, r8
  402c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402c04:	f000 bb98 	b.w	403338 <__malloc_unlock>
  402c08:	6895      	ldr	r5, [r2, #8]
  402c0a:	4f3a      	ldr	r7, [pc, #232]	; (402cf4 <_free_r+0x1c4>)
  402c0c:	42bd      	cmp	r5, r7
  402c0e:	4403      	add	r3, r0
  402c10:	d03f      	beq.n	402c92 <_free_r+0x162>
  402c12:	68d0      	ldr	r0, [r2, #12]
  402c14:	60e8      	str	r0, [r5, #12]
  402c16:	f043 0201 	orr.w	r2, r3, #1
  402c1a:	6085      	str	r5, [r0, #8]
  402c1c:	6062      	str	r2, [r4, #4]
  402c1e:	50e3      	str	r3, [r4, r3]
  402c20:	e7b3      	b.n	402b8a <_free_r+0x5a>
  402c22:	07ff      	lsls	r7, r7, #31
  402c24:	4403      	add	r3, r0
  402c26:	d407      	bmi.n	402c38 <_free_r+0x108>
  402c28:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402c2c:	1aa4      	subs	r4, r4, r2
  402c2e:	4413      	add	r3, r2
  402c30:	68a0      	ldr	r0, [r4, #8]
  402c32:	68e2      	ldr	r2, [r4, #12]
  402c34:	60c2      	str	r2, [r0, #12]
  402c36:	6090      	str	r0, [r2, #8]
  402c38:	4a2f      	ldr	r2, [pc, #188]	; (402cf8 <_free_r+0x1c8>)
  402c3a:	6812      	ldr	r2, [r2, #0]
  402c3c:	f043 0001 	orr.w	r0, r3, #1
  402c40:	4293      	cmp	r3, r2
  402c42:	6060      	str	r0, [r4, #4]
  402c44:	608c      	str	r4, [r1, #8]
  402c46:	d3b6      	bcc.n	402bb6 <_free_r+0x86>
  402c48:	4b2c      	ldr	r3, [pc, #176]	; (402cfc <_free_r+0x1cc>)
  402c4a:	4640      	mov	r0, r8
  402c4c:	6819      	ldr	r1, [r3, #0]
  402c4e:	f7ff ff21 	bl	402a94 <_malloc_trim_r>
  402c52:	e7b0      	b.n	402bb6 <_free_r+0x86>
  402c54:	1811      	adds	r1, r2, r0
  402c56:	6849      	ldr	r1, [r1, #4]
  402c58:	07c9      	lsls	r1, r1, #31
  402c5a:	d444      	bmi.n	402ce6 <_free_r+0x1b6>
  402c5c:	6891      	ldr	r1, [r2, #8]
  402c5e:	68d2      	ldr	r2, [r2, #12]
  402c60:	60ca      	str	r2, [r1, #12]
  402c62:	4403      	add	r3, r0
  402c64:	f043 0001 	orr.w	r0, r3, #1
  402c68:	6091      	str	r1, [r2, #8]
  402c6a:	6060      	str	r0, [r4, #4]
  402c6c:	50e3      	str	r3, [r4, r3]
  402c6e:	e7a2      	b.n	402bb6 <_free_r+0x86>
  402c70:	2a14      	cmp	r2, #20
  402c72:	d817      	bhi.n	402ca4 <_free_r+0x174>
  402c74:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402c78:	007f      	lsls	r7, r7, #1
  402c7a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402c7e:	e7a9      	b.n	402bd4 <_free_r+0xa4>
  402c80:	10aa      	asrs	r2, r5, #2
  402c82:	684b      	ldr	r3, [r1, #4]
  402c84:	2501      	movs	r5, #1
  402c86:	fa05 f202 	lsl.w	r2, r5, r2
  402c8a:	4313      	orrs	r3, r2
  402c8c:	604b      	str	r3, [r1, #4]
  402c8e:	4602      	mov	r2, r0
  402c90:	e7b1      	b.n	402bf6 <_free_r+0xc6>
  402c92:	f043 0201 	orr.w	r2, r3, #1
  402c96:	614c      	str	r4, [r1, #20]
  402c98:	610c      	str	r4, [r1, #16]
  402c9a:	60e5      	str	r5, [r4, #12]
  402c9c:	60a5      	str	r5, [r4, #8]
  402c9e:	6062      	str	r2, [r4, #4]
  402ca0:	50e3      	str	r3, [r4, r3]
  402ca2:	e788      	b.n	402bb6 <_free_r+0x86>
  402ca4:	2a54      	cmp	r2, #84	; 0x54
  402ca6:	d806      	bhi.n	402cb6 <_free_r+0x186>
  402ca8:	0b1a      	lsrs	r2, r3, #12
  402caa:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402cae:	007f      	lsls	r7, r7, #1
  402cb0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402cb4:	e78e      	b.n	402bd4 <_free_r+0xa4>
  402cb6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402cba:	d806      	bhi.n	402cca <_free_r+0x19a>
  402cbc:	0bda      	lsrs	r2, r3, #15
  402cbe:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402cc2:	007f      	lsls	r7, r7, #1
  402cc4:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402cc8:	e784      	b.n	402bd4 <_free_r+0xa4>
  402cca:	f240 5054 	movw	r0, #1364	; 0x554
  402cce:	4282      	cmp	r2, r0
  402cd0:	d806      	bhi.n	402ce0 <_free_r+0x1b0>
  402cd2:	0c9a      	lsrs	r2, r3, #18
  402cd4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402cd8:	007f      	lsls	r7, r7, #1
  402cda:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402cde:	e779      	b.n	402bd4 <_free_r+0xa4>
  402ce0:	27fe      	movs	r7, #254	; 0xfe
  402ce2:	257e      	movs	r5, #126	; 0x7e
  402ce4:	e776      	b.n	402bd4 <_free_r+0xa4>
  402ce6:	f043 0201 	orr.w	r2, r3, #1
  402cea:	6062      	str	r2, [r4, #4]
  402cec:	50e3      	str	r3, [r4, r3]
  402cee:	e762      	b.n	402bb6 <_free_r+0x86>
  402cf0:	2000043c 	.word	0x2000043c
  402cf4:	20000444 	.word	0x20000444
  402cf8:	20000844 	.word	0x20000844
  402cfc:	20000a80 	.word	0x20000a80

00402d00 <_fwalk_reent>:
  402d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d04:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402d08:	d01f      	beq.n	402d4a <_fwalk_reent+0x4a>
  402d0a:	4688      	mov	r8, r1
  402d0c:	4606      	mov	r6, r0
  402d0e:	f04f 0900 	mov.w	r9, #0
  402d12:	687d      	ldr	r5, [r7, #4]
  402d14:	68bc      	ldr	r4, [r7, #8]
  402d16:	3d01      	subs	r5, #1
  402d18:	d411      	bmi.n	402d3e <_fwalk_reent+0x3e>
  402d1a:	89a3      	ldrh	r3, [r4, #12]
  402d1c:	2b01      	cmp	r3, #1
  402d1e:	f105 35ff 	add.w	r5, r5, #4294967295
  402d22:	d908      	bls.n	402d36 <_fwalk_reent+0x36>
  402d24:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402d28:	3301      	adds	r3, #1
  402d2a:	4621      	mov	r1, r4
  402d2c:	4630      	mov	r0, r6
  402d2e:	d002      	beq.n	402d36 <_fwalk_reent+0x36>
  402d30:	47c0      	blx	r8
  402d32:	ea49 0900 	orr.w	r9, r9, r0
  402d36:	1c6b      	adds	r3, r5, #1
  402d38:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402d3c:	d1ed      	bne.n	402d1a <_fwalk_reent+0x1a>
  402d3e:	683f      	ldr	r7, [r7, #0]
  402d40:	2f00      	cmp	r7, #0
  402d42:	d1e6      	bne.n	402d12 <_fwalk_reent+0x12>
  402d44:	4648      	mov	r0, r9
  402d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d4a:	46b9      	mov	r9, r7
  402d4c:	4648      	mov	r0, r9
  402d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d52:	bf00      	nop

00402d54 <__swhatbuf_r>:
  402d54:	b570      	push	{r4, r5, r6, lr}
  402d56:	460d      	mov	r5, r1
  402d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d5c:	2900      	cmp	r1, #0
  402d5e:	b090      	sub	sp, #64	; 0x40
  402d60:	4614      	mov	r4, r2
  402d62:	461e      	mov	r6, r3
  402d64:	db14      	blt.n	402d90 <__swhatbuf_r+0x3c>
  402d66:	aa01      	add	r2, sp, #4
  402d68:	f000 fbfa 	bl	403560 <_fstat_r>
  402d6c:	2800      	cmp	r0, #0
  402d6e:	db0f      	blt.n	402d90 <__swhatbuf_r+0x3c>
  402d70:	9a02      	ldr	r2, [sp, #8]
  402d72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402d76:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402d7a:	fab2 f282 	clz	r2, r2
  402d7e:	0952      	lsrs	r2, r2, #5
  402d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402d84:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402d88:	6032      	str	r2, [r6, #0]
  402d8a:	6023      	str	r3, [r4, #0]
  402d8c:	b010      	add	sp, #64	; 0x40
  402d8e:	bd70      	pop	{r4, r5, r6, pc}
  402d90:	89a8      	ldrh	r0, [r5, #12]
  402d92:	f000 0080 	and.w	r0, r0, #128	; 0x80
  402d96:	b282      	uxth	r2, r0
  402d98:	2000      	movs	r0, #0
  402d9a:	6030      	str	r0, [r6, #0]
  402d9c:	b11a      	cbz	r2, 402da6 <__swhatbuf_r+0x52>
  402d9e:	2340      	movs	r3, #64	; 0x40
  402da0:	6023      	str	r3, [r4, #0]
  402da2:	b010      	add	sp, #64	; 0x40
  402da4:	bd70      	pop	{r4, r5, r6, pc}
  402da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402daa:	4610      	mov	r0, r2
  402dac:	6023      	str	r3, [r4, #0]
  402dae:	b010      	add	sp, #64	; 0x40
  402db0:	bd70      	pop	{r4, r5, r6, pc}
  402db2:	bf00      	nop

00402db4 <malloc>:
  402db4:	4b02      	ldr	r3, [pc, #8]	; (402dc0 <malloc+0xc>)
  402db6:	4601      	mov	r1, r0
  402db8:	6818      	ldr	r0, [r3, #0]
  402dba:	f000 b803 	b.w	402dc4 <_malloc_r>
  402dbe:	bf00      	nop
  402dc0:	20000438 	.word	0x20000438

00402dc4 <_malloc_r>:
  402dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402dc8:	f101 050b 	add.w	r5, r1, #11
  402dcc:	2d16      	cmp	r5, #22
  402dce:	b083      	sub	sp, #12
  402dd0:	4606      	mov	r6, r0
  402dd2:	f240 809f 	bls.w	402f14 <_malloc_r+0x150>
  402dd6:	f035 0507 	bics.w	r5, r5, #7
  402dda:	f100 80bf 	bmi.w	402f5c <_malloc_r+0x198>
  402dde:	42a9      	cmp	r1, r5
  402de0:	f200 80bc 	bhi.w	402f5c <_malloc_r+0x198>
  402de4:	f000 faa6 	bl	403334 <__malloc_lock>
  402de8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402dec:	f0c0 829c 	bcc.w	403328 <_malloc_r+0x564>
  402df0:	0a6b      	lsrs	r3, r5, #9
  402df2:	f000 80ba 	beq.w	402f6a <_malloc_r+0x1a6>
  402df6:	2b04      	cmp	r3, #4
  402df8:	f200 8183 	bhi.w	403102 <_malloc_r+0x33e>
  402dfc:	09a8      	lsrs	r0, r5, #6
  402dfe:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402e02:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402e06:	3038      	adds	r0, #56	; 0x38
  402e08:	4fc4      	ldr	r7, [pc, #784]	; (40311c <_malloc_r+0x358>)
  402e0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402e0e:	f1a3 0108 	sub.w	r1, r3, #8
  402e12:	685c      	ldr	r4, [r3, #4]
  402e14:	42a1      	cmp	r1, r4
  402e16:	d107      	bne.n	402e28 <_malloc_r+0x64>
  402e18:	e0ac      	b.n	402f74 <_malloc_r+0x1b0>
  402e1a:	2a00      	cmp	r2, #0
  402e1c:	f280 80ac 	bge.w	402f78 <_malloc_r+0x1b4>
  402e20:	68e4      	ldr	r4, [r4, #12]
  402e22:	42a1      	cmp	r1, r4
  402e24:	f000 80a6 	beq.w	402f74 <_malloc_r+0x1b0>
  402e28:	6863      	ldr	r3, [r4, #4]
  402e2a:	f023 0303 	bic.w	r3, r3, #3
  402e2e:	1b5a      	subs	r2, r3, r5
  402e30:	2a0f      	cmp	r2, #15
  402e32:	ddf2      	ble.n	402e1a <_malloc_r+0x56>
  402e34:	49b9      	ldr	r1, [pc, #740]	; (40311c <_malloc_r+0x358>)
  402e36:	693c      	ldr	r4, [r7, #16]
  402e38:	f101 0e08 	add.w	lr, r1, #8
  402e3c:	4574      	cmp	r4, lr
  402e3e:	f000 81b3 	beq.w	4031a8 <_malloc_r+0x3e4>
  402e42:	6863      	ldr	r3, [r4, #4]
  402e44:	f023 0303 	bic.w	r3, r3, #3
  402e48:	1b5a      	subs	r2, r3, r5
  402e4a:	2a0f      	cmp	r2, #15
  402e4c:	f300 8199 	bgt.w	403182 <_malloc_r+0x3be>
  402e50:	2a00      	cmp	r2, #0
  402e52:	f8c1 e014 	str.w	lr, [r1, #20]
  402e56:	f8c1 e010 	str.w	lr, [r1, #16]
  402e5a:	f280 809e 	bge.w	402f9a <_malloc_r+0x1d6>
  402e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e62:	f080 8167 	bcs.w	403134 <_malloc_r+0x370>
  402e66:	08db      	lsrs	r3, r3, #3
  402e68:	f103 0c01 	add.w	ip, r3, #1
  402e6c:	2201      	movs	r2, #1
  402e6e:	109b      	asrs	r3, r3, #2
  402e70:	fa02 f303 	lsl.w	r3, r2, r3
  402e74:	684a      	ldr	r2, [r1, #4]
  402e76:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  402e7a:	f8c4 8008 	str.w	r8, [r4, #8]
  402e7e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  402e82:	431a      	orrs	r2, r3
  402e84:	f1a9 0308 	sub.w	r3, r9, #8
  402e88:	60e3      	str	r3, [r4, #12]
  402e8a:	604a      	str	r2, [r1, #4]
  402e8c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  402e90:	f8c8 400c 	str.w	r4, [r8, #12]
  402e94:	1083      	asrs	r3, r0, #2
  402e96:	2401      	movs	r4, #1
  402e98:	409c      	lsls	r4, r3
  402e9a:	4294      	cmp	r4, r2
  402e9c:	f200 808a 	bhi.w	402fb4 <_malloc_r+0x1f0>
  402ea0:	4214      	tst	r4, r2
  402ea2:	d106      	bne.n	402eb2 <_malloc_r+0xee>
  402ea4:	f020 0003 	bic.w	r0, r0, #3
  402ea8:	0064      	lsls	r4, r4, #1
  402eaa:	4214      	tst	r4, r2
  402eac:	f100 0004 	add.w	r0, r0, #4
  402eb0:	d0fa      	beq.n	402ea8 <_malloc_r+0xe4>
  402eb2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402eb6:	46cc      	mov	ip, r9
  402eb8:	4680      	mov	r8, r0
  402eba:	f8dc 100c 	ldr.w	r1, [ip, #12]
  402ebe:	458c      	cmp	ip, r1
  402ec0:	d107      	bne.n	402ed2 <_malloc_r+0x10e>
  402ec2:	e173      	b.n	4031ac <_malloc_r+0x3e8>
  402ec4:	2a00      	cmp	r2, #0
  402ec6:	f280 8181 	bge.w	4031cc <_malloc_r+0x408>
  402eca:	68c9      	ldr	r1, [r1, #12]
  402ecc:	458c      	cmp	ip, r1
  402ece:	f000 816d 	beq.w	4031ac <_malloc_r+0x3e8>
  402ed2:	684b      	ldr	r3, [r1, #4]
  402ed4:	f023 0303 	bic.w	r3, r3, #3
  402ed8:	1b5a      	subs	r2, r3, r5
  402eda:	2a0f      	cmp	r2, #15
  402edc:	ddf2      	ble.n	402ec4 <_malloc_r+0x100>
  402ede:	460c      	mov	r4, r1
  402ee0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402ee4:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402ee8:	194b      	adds	r3, r1, r5
  402eea:	f045 0501 	orr.w	r5, r5, #1
  402eee:	604d      	str	r5, [r1, #4]
  402ef0:	f042 0101 	orr.w	r1, r2, #1
  402ef4:	f8c8 c00c 	str.w	ip, [r8, #12]
  402ef8:	4630      	mov	r0, r6
  402efa:	f8cc 8008 	str.w	r8, [ip, #8]
  402efe:	617b      	str	r3, [r7, #20]
  402f00:	613b      	str	r3, [r7, #16]
  402f02:	f8c3 e00c 	str.w	lr, [r3, #12]
  402f06:	f8c3 e008 	str.w	lr, [r3, #8]
  402f0a:	6059      	str	r1, [r3, #4]
  402f0c:	509a      	str	r2, [r3, r2]
  402f0e:	f000 fa13 	bl	403338 <__malloc_unlock>
  402f12:	e01f      	b.n	402f54 <_malloc_r+0x190>
  402f14:	2910      	cmp	r1, #16
  402f16:	d821      	bhi.n	402f5c <_malloc_r+0x198>
  402f18:	f000 fa0c 	bl	403334 <__malloc_lock>
  402f1c:	2510      	movs	r5, #16
  402f1e:	2306      	movs	r3, #6
  402f20:	2002      	movs	r0, #2
  402f22:	4f7e      	ldr	r7, [pc, #504]	; (40311c <_malloc_r+0x358>)
  402f24:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402f28:	f1a3 0208 	sub.w	r2, r3, #8
  402f2c:	685c      	ldr	r4, [r3, #4]
  402f2e:	4294      	cmp	r4, r2
  402f30:	f000 8145 	beq.w	4031be <_malloc_r+0x3fa>
  402f34:	6863      	ldr	r3, [r4, #4]
  402f36:	68e1      	ldr	r1, [r4, #12]
  402f38:	68a5      	ldr	r5, [r4, #8]
  402f3a:	f023 0303 	bic.w	r3, r3, #3
  402f3e:	4423      	add	r3, r4
  402f40:	4630      	mov	r0, r6
  402f42:	685a      	ldr	r2, [r3, #4]
  402f44:	60e9      	str	r1, [r5, #12]
  402f46:	f042 0201 	orr.w	r2, r2, #1
  402f4a:	608d      	str	r5, [r1, #8]
  402f4c:	605a      	str	r2, [r3, #4]
  402f4e:	f000 f9f3 	bl	403338 <__malloc_unlock>
  402f52:	3408      	adds	r4, #8
  402f54:	4620      	mov	r0, r4
  402f56:	b003      	add	sp, #12
  402f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f5c:	2400      	movs	r4, #0
  402f5e:	230c      	movs	r3, #12
  402f60:	4620      	mov	r0, r4
  402f62:	6033      	str	r3, [r6, #0]
  402f64:	b003      	add	sp, #12
  402f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f6a:	2380      	movs	r3, #128	; 0x80
  402f6c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  402f70:	203f      	movs	r0, #63	; 0x3f
  402f72:	e749      	b.n	402e08 <_malloc_r+0x44>
  402f74:	4670      	mov	r0, lr
  402f76:	e75d      	b.n	402e34 <_malloc_r+0x70>
  402f78:	4423      	add	r3, r4
  402f7a:	68e1      	ldr	r1, [r4, #12]
  402f7c:	685a      	ldr	r2, [r3, #4]
  402f7e:	68a5      	ldr	r5, [r4, #8]
  402f80:	f042 0201 	orr.w	r2, r2, #1
  402f84:	60e9      	str	r1, [r5, #12]
  402f86:	4630      	mov	r0, r6
  402f88:	608d      	str	r5, [r1, #8]
  402f8a:	605a      	str	r2, [r3, #4]
  402f8c:	f000 f9d4 	bl	403338 <__malloc_unlock>
  402f90:	3408      	adds	r4, #8
  402f92:	4620      	mov	r0, r4
  402f94:	b003      	add	sp, #12
  402f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f9a:	4423      	add	r3, r4
  402f9c:	4630      	mov	r0, r6
  402f9e:	685a      	ldr	r2, [r3, #4]
  402fa0:	f042 0201 	orr.w	r2, r2, #1
  402fa4:	605a      	str	r2, [r3, #4]
  402fa6:	f000 f9c7 	bl	403338 <__malloc_unlock>
  402faa:	3408      	adds	r4, #8
  402fac:	4620      	mov	r0, r4
  402fae:	b003      	add	sp, #12
  402fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fb4:	68bc      	ldr	r4, [r7, #8]
  402fb6:	6863      	ldr	r3, [r4, #4]
  402fb8:	f023 0803 	bic.w	r8, r3, #3
  402fbc:	45a8      	cmp	r8, r5
  402fbe:	d304      	bcc.n	402fca <_malloc_r+0x206>
  402fc0:	ebc5 0308 	rsb	r3, r5, r8
  402fc4:	2b0f      	cmp	r3, #15
  402fc6:	f300 808c 	bgt.w	4030e2 <_malloc_r+0x31e>
  402fca:	4b55      	ldr	r3, [pc, #340]	; (403120 <_malloc_r+0x35c>)
  402fcc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403130 <_malloc_r+0x36c>
  402fd0:	681a      	ldr	r2, [r3, #0]
  402fd2:	f8d9 3000 	ldr.w	r3, [r9]
  402fd6:	3301      	adds	r3, #1
  402fd8:	442a      	add	r2, r5
  402fda:	eb04 0a08 	add.w	sl, r4, r8
  402fde:	f000 8160 	beq.w	4032a2 <_malloc_r+0x4de>
  402fe2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402fe6:	320f      	adds	r2, #15
  402fe8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402fec:	f022 020f 	bic.w	r2, r2, #15
  402ff0:	4611      	mov	r1, r2
  402ff2:	4630      	mov	r0, r6
  402ff4:	9201      	str	r2, [sp, #4]
  402ff6:	f000 f9a1 	bl	40333c <_sbrk_r>
  402ffa:	f1b0 3fff 	cmp.w	r0, #4294967295
  402ffe:	4683      	mov	fp, r0
  403000:	9a01      	ldr	r2, [sp, #4]
  403002:	f000 8158 	beq.w	4032b6 <_malloc_r+0x4f2>
  403006:	4582      	cmp	sl, r0
  403008:	f200 80fc 	bhi.w	403204 <_malloc_r+0x440>
  40300c:	4b45      	ldr	r3, [pc, #276]	; (403124 <_malloc_r+0x360>)
  40300e:	6819      	ldr	r1, [r3, #0]
  403010:	45da      	cmp	sl, fp
  403012:	4411      	add	r1, r2
  403014:	6019      	str	r1, [r3, #0]
  403016:	f000 8153 	beq.w	4032c0 <_malloc_r+0x4fc>
  40301a:	f8d9 0000 	ldr.w	r0, [r9]
  40301e:	f8df e110 	ldr.w	lr, [pc, #272]	; 403130 <_malloc_r+0x36c>
  403022:	3001      	adds	r0, #1
  403024:	bf1b      	ittet	ne
  403026:	ebca 0a0b 	rsbne	sl, sl, fp
  40302a:	4451      	addne	r1, sl
  40302c:	f8ce b000 	streq.w	fp, [lr]
  403030:	6019      	strne	r1, [r3, #0]
  403032:	f01b 0107 	ands.w	r1, fp, #7
  403036:	f000 8117 	beq.w	403268 <_malloc_r+0x4a4>
  40303a:	f1c1 0008 	rsb	r0, r1, #8
  40303e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403042:	4483      	add	fp, r0
  403044:	3108      	adds	r1, #8
  403046:	445a      	add	r2, fp
  403048:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40304c:	ebc2 0901 	rsb	r9, r2, r1
  403050:	4649      	mov	r1, r9
  403052:	4630      	mov	r0, r6
  403054:	9301      	str	r3, [sp, #4]
  403056:	f000 f971 	bl	40333c <_sbrk_r>
  40305a:	1c43      	adds	r3, r0, #1
  40305c:	9b01      	ldr	r3, [sp, #4]
  40305e:	f000 813f 	beq.w	4032e0 <_malloc_r+0x51c>
  403062:	ebcb 0200 	rsb	r2, fp, r0
  403066:	444a      	add	r2, r9
  403068:	f042 0201 	orr.w	r2, r2, #1
  40306c:	6819      	ldr	r1, [r3, #0]
  40306e:	f8c7 b008 	str.w	fp, [r7, #8]
  403072:	4449      	add	r1, r9
  403074:	42bc      	cmp	r4, r7
  403076:	f8cb 2004 	str.w	r2, [fp, #4]
  40307a:	6019      	str	r1, [r3, #0]
  40307c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 403124 <_malloc_r+0x360>
  403080:	d016      	beq.n	4030b0 <_malloc_r+0x2ec>
  403082:	f1b8 0f0f 	cmp.w	r8, #15
  403086:	f240 80fd 	bls.w	403284 <_malloc_r+0x4c0>
  40308a:	6862      	ldr	r2, [r4, #4]
  40308c:	f1a8 030c 	sub.w	r3, r8, #12
  403090:	f023 0307 	bic.w	r3, r3, #7
  403094:	18e0      	adds	r0, r4, r3
  403096:	f002 0201 	and.w	r2, r2, #1
  40309a:	f04f 0e05 	mov.w	lr, #5
  40309e:	431a      	orrs	r2, r3
  4030a0:	2b0f      	cmp	r3, #15
  4030a2:	6062      	str	r2, [r4, #4]
  4030a4:	f8c0 e004 	str.w	lr, [r0, #4]
  4030a8:	f8c0 e008 	str.w	lr, [r0, #8]
  4030ac:	f200 811c 	bhi.w	4032e8 <_malloc_r+0x524>
  4030b0:	4b1d      	ldr	r3, [pc, #116]	; (403128 <_malloc_r+0x364>)
  4030b2:	68bc      	ldr	r4, [r7, #8]
  4030b4:	681a      	ldr	r2, [r3, #0]
  4030b6:	4291      	cmp	r1, r2
  4030b8:	bf88      	it	hi
  4030ba:	6019      	strhi	r1, [r3, #0]
  4030bc:	4b1b      	ldr	r3, [pc, #108]	; (40312c <_malloc_r+0x368>)
  4030be:	681a      	ldr	r2, [r3, #0]
  4030c0:	4291      	cmp	r1, r2
  4030c2:	6862      	ldr	r2, [r4, #4]
  4030c4:	bf88      	it	hi
  4030c6:	6019      	strhi	r1, [r3, #0]
  4030c8:	f022 0203 	bic.w	r2, r2, #3
  4030cc:	4295      	cmp	r5, r2
  4030ce:	eba2 0305 	sub.w	r3, r2, r5
  4030d2:	d801      	bhi.n	4030d8 <_malloc_r+0x314>
  4030d4:	2b0f      	cmp	r3, #15
  4030d6:	dc04      	bgt.n	4030e2 <_malloc_r+0x31e>
  4030d8:	4630      	mov	r0, r6
  4030da:	f000 f92d 	bl	403338 <__malloc_unlock>
  4030de:	2400      	movs	r4, #0
  4030e0:	e738      	b.n	402f54 <_malloc_r+0x190>
  4030e2:	1962      	adds	r2, r4, r5
  4030e4:	f043 0301 	orr.w	r3, r3, #1
  4030e8:	f045 0501 	orr.w	r5, r5, #1
  4030ec:	6065      	str	r5, [r4, #4]
  4030ee:	4630      	mov	r0, r6
  4030f0:	60ba      	str	r2, [r7, #8]
  4030f2:	6053      	str	r3, [r2, #4]
  4030f4:	f000 f920 	bl	403338 <__malloc_unlock>
  4030f8:	3408      	adds	r4, #8
  4030fa:	4620      	mov	r0, r4
  4030fc:	b003      	add	sp, #12
  4030fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403102:	2b14      	cmp	r3, #20
  403104:	d971      	bls.n	4031ea <_malloc_r+0x426>
  403106:	2b54      	cmp	r3, #84	; 0x54
  403108:	f200 80a4 	bhi.w	403254 <_malloc_r+0x490>
  40310c:	0b28      	lsrs	r0, r5, #12
  40310e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  403112:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403116:	306e      	adds	r0, #110	; 0x6e
  403118:	e676      	b.n	402e08 <_malloc_r+0x44>
  40311a:	bf00      	nop
  40311c:	2000043c 	.word	0x2000043c
  403120:	20000a80 	.word	0x20000a80
  403124:	20000a84 	.word	0x20000a84
  403128:	20000a7c 	.word	0x20000a7c
  40312c:	20000a78 	.word	0x20000a78
  403130:	20000848 	.word	0x20000848
  403134:	0a5a      	lsrs	r2, r3, #9
  403136:	2a04      	cmp	r2, #4
  403138:	d95e      	bls.n	4031f8 <_malloc_r+0x434>
  40313a:	2a14      	cmp	r2, #20
  40313c:	f200 80b3 	bhi.w	4032a6 <_malloc_r+0x4e2>
  403140:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403144:	0049      	lsls	r1, r1, #1
  403146:	325b      	adds	r2, #91	; 0x5b
  403148:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40314c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  403150:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 403330 <_malloc_r+0x56c>
  403154:	f1ac 0c08 	sub.w	ip, ip, #8
  403158:	458c      	cmp	ip, r1
  40315a:	f000 8088 	beq.w	40326e <_malloc_r+0x4aa>
  40315e:	684a      	ldr	r2, [r1, #4]
  403160:	f022 0203 	bic.w	r2, r2, #3
  403164:	4293      	cmp	r3, r2
  403166:	d202      	bcs.n	40316e <_malloc_r+0x3aa>
  403168:	6889      	ldr	r1, [r1, #8]
  40316a:	458c      	cmp	ip, r1
  40316c:	d1f7      	bne.n	40315e <_malloc_r+0x39a>
  40316e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403172:	687a      	ldr	r2, [r7, #4]
  403174:	f8c4 c00c 	str.w	ip, [r4, #12]
  403178:	60a1      	str	r1, [r4, #8]
  40317a:	f8cc 4008 	str.w	r4, [ip, #8]
  40317e:	60cc      	str	r4, [r1, #12]
  403180:	e688      	b.n	402e94 <_malloc_r+0xd0>
  403182:	1963      	adds	r3, r4, r5
  403184:	f042 0701 	orr.w	r7, r2, #1
  403188:	f045 0501 	orr.w	r5, r5, #1
  40318c:	6065      	str	r5, [r4, #4]
  40318e:	4630      	mov	r0, r6
  403190:	614b      	str	r3, [r1, #20]
  403192:	610b      	str	r3, [r1, #16]
  403194:	f8c3 e00c 	str.w	lr, [r3, #12]
  403198:	f8c3 e008 	str.w	lr, [r3, #8]
  40319c:	605f      	str	r7, [r3, #4]
  40319e:	509a      	str	r2, [r3, r2]
  4031a0:	3408      	adds	r4, #8
  4031a2:	f000 f8c9 	bl	403338 <__malloc_unlock>
  4031a6:	e6d5      	b.n	402f54 <_malloc_r+0x190>
  4031a8:	684a      	ldr	r2, [r1, #4]
  4031aa:	e673      	b.n	402e94 <_malloc_r+0xd0>
  4031ac:	f108 0801 	add.w	r8, r8, #1
  4031b0:	f018 0f03 	tst.w	r8, #3
  4031b4:	f10c 0c08 	add.w	ip, ip, #8
  4031b8:	f47f ae7f 	bne.w	402eba <_malloc_r+0xf6>
  4031bc:	e030      	b.n	403220 <_malloc_r+0x45c>
  4031be:	68dc      	ldr	r4, [r3, #12]
  4031c0:	42a3      	cmp	r3, r4
  4031c2:	bf08      	it	eq
  4031c4:	3002      	addeq	r0, #2
  4031c6:	f43f ae35 	beq.w	402e34 <_malloc_r+0x70>
  4031ca:	e6b3      	b.n	402f34 <_malloc_r+0x170>
  4031cc:	440b      	add	r3, r1
  4031ce:	460c      	mov	r4, r1
  4031d0:	685a      	ldr	r2, [r3, #4]
  4031d2:	68c9      	ldr	r1, [r1, #12]
  4031d4:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4031d8:	f042 0201 	orr.w	r2, r2, #1
  4031dc:	605a      	str	r2, [r3, #4]
  4031de:	4630      	mov	r0, r6
  4031e0:	60e9      	str	r1, [r5, #12]
  4031e2:	608d      	str	r5, [r1, #8]
  4031e4:	f000 f8a8 	bl	403338 <__malloc_unlock>
  4031e8:	e6b4      	b.n	402f54 <_malloc_r+0x190>
  4031ea:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4031ee:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4031f2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4031f6:	e607      	b.n	402e08 <_malloc_r+0x44>
  4031f8:	099a      	lsrs	r2, r3, #6
  4031fa:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4031fe:	0049      	lsls	r1, r1, #1
  403200:	3238      	adds	r2, #56	; 0x38
  403202:	e7a1      	b.n	403148 <_malloc_r+0x384>
  403204:	42bc      	cmp	r4, r7
  403206:	4b4a      	ldr	r3, [pc, #296]	; (403330 <_malloc_r+0x56c>)
  403208:	f43f af00 	beq.w	40300c <_malloc_r+0x248>
  40320c:	689c      	ldr	r4, [r3, #8]
  40320e:	6862      	ldr	r2, [r4, #4]
  403210:	f022 0203 	bic.w	r2, r2, #3
  403214:	e75a      	b.n	4030cc <_malloc_r+0x308>
  403216:	f859 3908 	ldr.w	r3, [r9], #-8
  40321a:	4599      	cmp	r9, r3
  40321c:	f040 8082 	bne.w	403324 <_malloc_r+0x560>
  403220:	f010 0f03 	tst.w	r0, #3
  403224:	f100 30ff 	add.w	r0, r0, #4294967295
  403228:	d1f5      	bne.n	403216 <_malloc_r+0x452>
  40322a:	687b      	ldr	r3, [r7, #4]
  40322c:	ea23 0304 	bic.w	r3, r3, r4
  403230:	607b      	str	r3, [r7, #4]
  403232:	0064      	lsls	r4, r4, #1
  403234:	429c      	cmp	r4, r3
  403236:	f63f aebd 	bhi.w	402fb4 <_malloc_r+0x1f0>
  40323a:	2c00      	cmp	r4, #0
  40323c:	f43f aeba 	beq.w	402fb4 <_malloc_r+0x1f0>
  403240:	421c      	tst	r4, r3
  403242:	4640      	mov	r0, r8
  403244:	f47f ae35 	bne.w	402eb2 <_malloc_r+0xee>
  403248:	0064      	lsls	r4, r4, #1
  40324a:	421c      	tst	r4, r3
  40324c:	f100 0004 	add.w	r0, r0, #4
  403250:	d0fa      	beq.n	403248 <_malloc_r+0x484>
  403252:	e62e      	b.n	402eb2 <_malloc_r+0xee>
  403254:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403258:	d818      	bhi.n	40328c <_malloc_r+0x4c8>
  40325a:	0be8      	lsrs	r0, r5, #15
  40325c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  403260:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403264:	3077      	adds	r0, #119	; 0x77
  403266:	e5cf      	b.n	402e08 <_malloc_r+0x44>
  403268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40326c:	e6eb      	b.n	403046 <_malloc_r+0x282>
  40326e:	2101      	movs	r1, #1
  403270:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403274:	1092      	asrs	r2, r2, #2
  403276:	fa01 f202 	lsl.w	r2, r1, r2
  40327a:	431a      	orrs	r2, r3
  40327c:	f8c8 2004 	str.w	r2, [r8, #4]
  403280:	4661      	mov	r1, ip
  403282:	e777      	b.n	403174 <_malloc_r+0x3b0>
  403284:	2301      	movs	r3, #1
  403286:	f8cb 3004 	str.w	r3, [fp, #4]
  40328a:	e725      	b.n	4030d8 <_malloc_r+0x314>
  40328c:	f240 5254 	movw	r2, #1364	; 0x554
  403290:	4293      	cmp	r3, r2
  403292:	d820      	bhi.n	4032d6 <_malloc_r+0x512>
  403294:	0ca8      	lsrs	r0, r5, #18
  403296:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40329a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40329e:	307c      	adds	r0, #124	; 0x7c
  4032a0:	e5b2      	b.n	402e08 <_malloc_r+0x44>
  4032a2:	3210      	adds	r2, #16
  4032a4:	e6a4      	b.n	402ff0 <_malloc_r+0x22c>
  4032a6:	2a54      	cmp	r2, #84	; 0x54
  4032a8:	d826      	bhi.n	4032f8 <_malloc_r+0x534>
  4032aa:	0b1a      	lsrs	r2, r3, #12
  4032ac:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4032b0:	0049      	lsls	r1, r1, #1
  4032b2:	326e      	adds	r2, #110	; 0x6e
  4032b4:	e748      	b.n	403148 <_malloc_r+0x384>
  4032b6:	68bc      	ldr	r4, [r7, #8]
  4032b8:	6862      	ldr	r2, [r4, #4]
  4032ba:	f022 0203 	bic.w	r2, r2, #3
  4032be:	e705      	b.n	4030cc <_malloc_r+0x308>
  4032c0:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4032c4:	2800      	cmp	r0, #0
  4032c6:	f47f aea8 	bne.w	40301a <_malloc_r+0x256>
  4032ca:	4442      	add	r2, r8
  4032cc:	68bb      	ldr	r3, [r7, #8]
  4032ce:	f042 0201 	orr.w	r2, r2, #1
  4032d2:	605a      	str	r2, [r3, #4]
  4032d4:	e6ec      	b.n	4030b0 <_malloc_r+0x2ec>
  4032d6:	23fe      	movs	r3, #254	; 0xfe
  4032d8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4032dc:	207e      	movs	r0, #126	; 0x7e
  4032de:	e593      	b.n	402e08 <_malloc_r+0x44>
  4032e0:	2201      	movs	r2, #1
  4032e2:	f04f 0900 	mov.w	r9, #0
  4032e6:	e6c1      	b.n	40306c <_malloc_r+0x2a8>
  4032e8:	f104 0108 	add.w	r1, r4, #8
  4032ec:	4630      	mov	r0, r6
  4032ee:	f7ff fc1f 	bl	402b30 <_free_r>
  4032f2:	f8d9 1000 	ldr.w	r1, [r9]
  4032f6:	e6db      	b.n	4030b0 <_malloc_r+0x2ec>
  4032f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4032fc:	d805      	bhi.n	40330a <_malloc_r+0x546>
  4032fe:	0bda      	lsrs	r2, r3, #15
  403300:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403304:	0049      	lsls	r1, r1, #1
  403306:	3277      	adds	r2, #119	; 0x77
  403308:	e71e      	b.n	403148 <_malloc_r+0x384>
  40330a:	f240 5154 	movw	r1, #1364	; 0x554
  40330e:	428a      	cmp	r2, r1
  403310:	d805      	bhi.n	40331e <_malloc_r+0x55a>
  403312:	0c9a      	lsrs	r2, r3, #18
  403314:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403318:	0049      	lsls	r1, r1, #1
  40331a:	327c      	adds	r2, #124	; 0x7c
  40331c:	e714      	b.n	403148 <_malloc_r+0x384>
  40331e:	21fe      	movs	r1, #254	; 0xfe
  403320:	227e      	movs	r2, #126	; 0x7e
  403322:	e711      	b.n	403148 <_malloc_r+0x384>
  403324:	687b      	ldr	r3, [r7, #4]
  403326:	e784      	b.n	403232 <_malloc_r+0x46e>
  403328:	08e8      	lsrs	r0, r5, #3
  40332a:	1c43      	adds	r3, r0, #1
  40332c:	005b      	lsls	r3, r3, #1
  40332e:	e5f8      	b.n	402f22 <_malloc_r+0x15e>
  403330:	2000043c 	.word	0x2000043c

00403334 <__malloc_lock>:
  403334:	4770      	bx	lr
  403336:	bf00      	nop

00403338 <__malloc_unlock>:
  403338:	4770      	bx	lr
  40333a:	bf00      	nop

0040333c <_sbrk_r>:
  40333c:	b538      	push	{r3, r4, r5, lr}
  40333e:	4c07      	ldr	r4, [pc, #28]	; (40335c <_sbrk_r+0x20>)
  403340:	2300      	movs	r3, #0
  403342:	4605      	mov	r5, r0
  403344:	4608      	mov	r0, r1
  403346:	6023      	str	r3, [r4, #0]
  403348:	f7fe fd1e 	bl	401d88 <_sbrk>
  40334c:	1c43      	adds	r3, r0, #1
  40334e:	d000      	beq.n	403352 <_sbrk_r+0x16>
  403350:	bd38      	pop	{r3, r4, r5, pc}
  403352:	6823      	ldr	r3, [r4, #0]
  403354:	2b00      	cmp	r3, #0
  403356:	d0fb      	beq.n	403350 <_sbrk_r+0x14>
  403358:	602b      	str	r3, [r5, #0]
  40335a:	bd38      	pop	{r3, r4, r5, pc}
  40335c:	20000cb8 	.word	0x20000cb8

00403360 <__sread>:
  403360:	b510      	push	{r4, lr}
  403362:	460c      	mov	r4, r1
  403364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403368:	f000 f924 	bl	4035b4 <_read_r>
  40336c:	2800      	cmp	r0, #0
  40336e:	db03      	blt.n	403378 <__sread+0x18>
  403370:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403372:	4403      	add	r3, r0
  403374:	6523      	str	r3, [r4, #80]	; 0x50
  403376:	bd10      	pop	{r4, pc}
  403378:	89a3      	ldrh	r3, [r4, #12]
  40337a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40337e:	81a3      	strh	r3, [r4, #12]
  403380:	bd10      	pop	{r4, pc}
  403382:	bf00      	nop

00403384 <__swrite>:
  403384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403388:	4616      	mov	r6, r2
  40338a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40338e:	461f      	mov	r7, r3
  403390:	05d3      	lsls	r3, r2, #23
  403392:	460c      	mov	r4, r1
  403394:	4605      	mov	r5, r0
  403396:	d507      	bpl.n	4033a8 <__swrite+0x24>
  403398:	2200      	movs	r2, #0
  40339a:	2302      	movs	r3, #2
  40339c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4033a0:	f000 f8f2 	bl	403588 <_lseek_r>
  4033a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4033a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4033ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4033b0:	81a2      	strh	r2, [r4, #12]
  4033b2:	463b      	mov	r3, r7
  4033b4:	4632      	mov	r2, r6
  4033b6:	4628      	mov	r0, r5
  4033b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4033bc:	f000 b814 	b.w	4033e8 <_write_r>

004033c0 <__sseek>:
  4033c0:	b510      	push	{r4, lr}
  4033c2:	460c      	mov	r4, r1
  4033c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4033c8:	f000 f8de 	bl	403588 <_lseek_r>
  4033cc:	89a3      	ldrh	r3, [r4, #12]
  4033ce:	1c42      	adds	r2, r0, #1
  4033d0:	bf0e      	itee	eq
  4033d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4033d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4033da:	6520      	strne	r0, [r4, #80]	; 0x50
  4033dc:	81a3      	strh	r3, [r4, #12]
  4033de:	bd10      	pop	{r4, pc}

004033e0 <__sclose>:
  4033e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4033e4:	f000 b868 	b.w	4034b8 <_close_r>

004033e8 <_write_r>:
  4033e8:	b570      	push	{r4, r5, r6, lr}
  4033ea:	460d      	mov	r5, r1
  4033ec:	4c08      	ldr	r4, [pc, #32]	; (403410 <_write_r+0x28>)
  4033ee:	4611      	mov	r1, r2
  4033f0:	4606      	mov	r6, r0
  4033f2:	461a      	mov	r2, r3
  4033f4:	4628      	mov	r0, r5
  4033f6:	2300      	movs	r3, #0
  4033f8:	6023      	str	r3, [r4, #0]
  4033fa:	f7fd f90f 	bl	40061c <_write>
  4033fe:	1c43      	adds	r3, r0, #1
  403400:	d000      	beq.n	403404 <_write_r+0x1c>
  403402:	bd70      	pop	{r4, r5, r6, pc}
  403404:	6823      	ldr	r3, [r4, #0]
  403406:	2b00      	cmp	r3, #0
  403408:	d0fb      	beq.n	403402 <_write_r+0x1a>
  40340a:	6033      	str	r3, [r6, #0]
  40340c:	bd70      	pop	{r4, r5, r6, pc}
  40340e:	bf00      	nop
  403410:	20000cb8 	.word	0x20000cb8

00403414 <__register_exitproc>:
  403414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403418:	4c25      	ldr	r4, [pc, #148]	; (4034b0 <__register_exitproc+0x9c>)
  40341a:	6825      	ldr	r5, [r4, #0]
  40341c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403420:	4606      	mov	r6, r0
  403422:	4688      	mov	r8, r1
  403424:	4692      	mov	sl, r2
  403426:	4699      	mov	r9, r3
  403428:	b3c4      	cbz	r4, 40349c <__register_exitproc+0x88>
  40342a:	6860      	ldr	r0, [r4, #4]
  40342c:	281f      	cmp	r0, #31
  40342e:	dc17      	bgt.n	403460 <__register_exitproc+0x4c>
  403430:	1c43      	adds	r3, r0, #1
  403432:	b176      	cbz	r6, 403452 <__register_exitproc+0x3e>
  403434:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403438:	2201      	movs	r2, #1
  40343a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40343e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403442:	4082      	lsls	r2, r0
  403444:	4311      	orrs	r1, r2
  403446:	2e02      	cmp	r6, #2
  403448:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40344c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403450:	d01e      	beq.n	403490 <__register_exitproc+0x7c>
  403452:	3002      	adds	r0, #2
  403454:	6063      	str	r3, [r4, #4]
  403456:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40345a:	2000      	movs	r0, #0
  40345c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403460:	4b14      	ldr	r3, [pc, #80]	; (4034b4 <__register_exitproc+0xa0>)
  403462:	b303      	cbz	r3, 4034a6 <__register_exitproc+0x92>
  403464:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403468:	f7ff fca4 	bl	402db4 <malloc>
  40346c:	4604      	mov	r4, r0
  40346e:	b1d0      	cbz	r0, 4034a6 <__register_exitproc+0x92>
  403470:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403474:	2700      	movs	r7, #0
  403476:	e880 0088 	stmia.w	r0, {r3, r7}
  40347a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40347e:	4638      	mov	r0, r7
  403480:	2301      	movs	r3, #1
  403482:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403486:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40348a:	2e00      	cmp	r6, #0
  40348c:	d0e1      	beq.n	403452 <__register_exitproc+0x3e>
  40348e:	e7d1      	b.n	403434 <__register_exitproc+0x20>
  403490:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403494:	430a      	orrs	r2, r1
  403496:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40349a:	e7da      	b.n	403452 <__register_exitproc+0x3e>
  40349c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4034a0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4034a4:	e7c1      	b.n	40342a <__register_exitproc+0x16>
  4034a6:	f04f 30ff 	mov.w	r0, #4294967295
  4034aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4034ae:	bf00      	nop
  4034b0:	00403614 	.word	0x00403614
  4034b4:	00402db5 	.word	0x00402db5

004034b8 <_close_r>:
  4034b8:	b538      	push	{r3, r4, r5, lr}
  4034ba:	4c07      	ldr	r4, [pc, #28]	; (4034d8 <_close_r+0x20>)
  4034bc:	2300      	movs	r3, #0
  4034be:	4605      	mov	r5, r0
  4034c0:	4608      	mov	r0, r1
  4034c2:	6023      	str	r3, [r4, #0]
  4034c4:	f7fe fc8c 	bl	401de0 <_close>
  4034c8:	1c43      	adds	r3, r0, #1
  4034ca:	d000      	beq.n	4034ce <_close_r+0x16>
  4034cc:	bd38      	pop	{r3, r4, r5, pc}
  4034ce:	6823      	ldr	r3, [r4, #0]
  4034d0:	2b00      	cmp	r3, #0
  4034d2:	d0fb      	beq.n	4034cc <_close_r+0x14>
  4034d4:	602b      	str	r3, [r5, #0]
  4034d6:	bd38      	pop	{r3, r4, r5, pc}
  4034d8:	20000cb8 	.word	0x20000cb8

004034dc <_fclose_r>:
  4034dc:	2900      	cmp	r1, #0
  4034de:	d03d      	beq.n	40355c <_fclose_r+0x80>
  4034e0:	b570      	push	{r4, r5, r6, lr}
  4034e2:	4605      	mov	r5, r0
  4034e4:	460c      	mov	r4, r1
  4034e6:	b108      	cbz	r0, 4034ec <_fclose_r+0x10>
  4034e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4034ea:	b37b      	cbz	r3, 40354c <_fclose_r+0x70>
  4034ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4034f0:	b90b      	cbnz	r3, 4034f6 <_fclose_r+0x1a>
  4034f2:	2000      	movs	r0, #0
  4034f4:	bd70      	pop	{r4, r5, r6, pc}
  4034f6:	4621      	mov	r1, r4
  4034f8:	4628      	mov	r0, r5
  4034fa:	f7ff f975 	bl	4027e8 <__sflush_r>
  4034fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403500:	4606      	mov	r6, r0
  403502:	b133      	cbz	r3, 403512 <_fclose_r+0x36>
  403504:	69e1      	ldr	r1, [r4, #28]
  403506:	4628      	mov	r0, r5
  403508:	4798      	blx	r3
  40350a:	2800      	cmp	r0, #0
  40350c:	bfb8      	it	lt
  40350e:	f04f 36ff 	movlt.w	r6, #4294967295
  403512:	89a3      	ldrh	r3, [r4, #12]
  403514:	061b      	lsls	r3, r3, #24
  403516:	d41c      	bmi.n	403552 <_fclose_r+0x76>
  403518:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40351a:	b141      	cbz	r1, 40352e <_fclose_r+0x52>
  40351c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403520:	4299      	cmp	r1, r3
  403522:	d002      	beq.n	40352a <_fclose_r+0x4e>
  403524:	4628      	mov	r0, r5
  403526:	f7ff fb03 	bl	402b30 <_free_r>
  40352a:	2300      	movs	r3, #0
  40352c:	6323      	str	r3, [r4, #48]	; 0x30
  40352e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403530:	b121      	cbz	r1, 40353c <_fclose_r+0x60>
  403532:	4628      	mov	r0, r5
  403534:	f7ff fafc 	bl	402b30 <_free_r>
  403538:	2300      	movs	r3, #0
  40353a:	6463      	str	r3, [r4, #68]	; 0x44
  40353c:	f7ff fa92 	bl	402a64 <__sfp_lock_acquire>
  403540:	2300      	movs	r3, #0
  403542:	81a3      	strh	r3, [r4, #12]
  403544:	f7ff fa90 	bl	402a68 <__sfp_lock_release>
  403548:	4630      	mov	r0, r6
  40354a:	bd70      	pop	{r4, r5, r6, pc}
  40354c:	f7ff fa84 	bl	402a58 <__sinit>
  403550:	e7cc      	b.n	4034ec <_fclose_r+0x10>
  403552:	6921      	ldr	r1, [r4, #16]
  403554:	4628      	mov	r0, r5
  403556:	f7ff faeb 	bl	402b30 <_free_r>
  40355a:	e7dd      	b.n	403518 <_fclose_r+0x3c>
  40355c:	2000      	movs	r0, #0
  40355e:	4770      	bx	lr

00403560 <_fstat_r>:
  403560:	b538      	push	{r3, r4, r5, lr}
  403562:	460b      	mov	r3, r1
  403564:	4c07      	ldr	r4, [pc, #28]	; (403584 <_fstat_r+0x24>)
  403566:	4605      	mov	r5, r0
  403568:	4611      	mov	r1, r2
  40356a:	4618      	mov	r0, r3
  40356c:	2300      	movs	r3, #0
  40356e:	6023      	str	r3, [r4, #0]
  403570:	f7fe fc42 	bl	401df8 <_fstat>
  403574:	1c43      	adds	r3, r0, #1
  403576:	d000      	beq.n	40357a <_fstat_r+0x1a>
  403578:	bd38      	pop	{r3, r4, r5, pc}
  40357a:	6823      	ldr	r3, [r4, #0]
  40357c:	2b00      	cmp	r3, #0
  40357e:	d0fb      	beq.n	403578 <_fstat_r+0x18>
  403580:	602b      	str	r3, [r5, #0]
  403582:	bd38      	pop	{r3, r4, r5, pc}
  403584:	20000cb8 	.word	0x20000cb8

00403588 <_lseek_r>:
  403588:	b570      	push	{r4, r5, r6, lr}
  40358a:	460d      	mov	r5, r1
  40358c:	4c08      	ldr	r4, [pc, #32]	; (4035b0 <_lseek_r+0x28>)
  40358e:	4611      	mov	r1, r2
  403590:	4606      	mov	r6, r0
  403592:	461a      	mov	r2, r3
  403594:	4628      	mov	r0, r5
  403596:	2300      	movs	r3, #0
  403598:	6023      	str	r3, [r4, #0]
  40359a:	f7fe fc3d 	bl	401e18 <_lseek>
  40359e:	1c43      	adds	r3, r0, #1
  4035a0:	d000      	beq.n	4035a4 <_lseek_r+0x1c>
  4035a2:	bd70      	pop	{r4, r5, r6, pc}
  4035a4:	6823      	ldr	r3, [r4, #0]
  4035a6:	2b00      	cmp	r3, #0
  4035a8:	d0fb      	beq.n	4035a2 <_lseek_r+0x1a>
  4035aa:	6033      	str	r3, [r6, #0]
  4035ac:	bd70      	pop	{r4, r5, r6, pc}
  4035ae:	bf00      	nop
  4035b0:	20000cb8 	.word	0x20000cb8

004035b4 <_read_r>:
  4035b4:	b570      	push	{r4, r5, r6, lr}
  4035b6:	460d      	mov	r5, r1
  4035b8:	4c08      	ldr	r4, [pc, #32]	; (4035dc <_read_r+0x28>)
  4035ba:	4611      	mov	r1, r2
  4035bc:	4606      	mov	r6, r0
  4035be:	461a      	mov	r2, r3
  4035c0:	4628      	mov	r0, r5
  4035c2:	2300      	movs	r3, #0
  4035c4:	6023      	str	r3, [r4, #0]
  4035c6:	f7fc ffff 	bl	4005c8 <_read>
  4035ca:	1c43      	adds	r3, r0, #1
  4035cc:	d000      	beq.n	4035d0 <_read_r+0x1c>
  4035ce:	bd70      	pop	{r4, r5, r6, pc}
  4035d0:	6823      	ldr	r3, [r4, #0]
  4035d2:	2b00      	cmp	r3, #0
  4035d4:	d0fb      	beq.n	4035ce <_read_r+0x1a>
  4035d6:	6033      	str	r3, [r6, #0]
  4035d8:	bd70      	pop	{r4, r5, r6, pc}
  4035da:	bf00      	nop
  4035dc:	20000cb8 	.word	0x20000cb8
  4035e0:	00002580 	.word	0x00002580
  4035e4:	000000c0 	.word	0x000000c0
  4035e8:	00000800 	.word	0x00000800
	...
  4035f8:	000e1000 	.word	0x000e1000
  4035fc:	000000c0 	.word	0x000000c0
  403600:	00000800 	.word	0x00000800
	...
  403610:	00000043 	.word	0x00000043

00403614 <_global_impure_ptr>:
  403614:	20000010                                ... 

00403618 <_init>:
  403618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40361a:	bf00      	nop
  40361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40361e:	bc08      	pop	{r3}
  403620:	469e      	mov	lr, r3
  403622:	4770      	bx	lr

00403624 <__init_array_start>:
  403624:	004027c9 	.word	0x004027c9

00403628 <__frame_dummy_init_array_entry>:
  403628:	004000f1                                ..@.

0040362c <_fini>:
  40362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40362e:	bf00      	nop
  403630:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403632:	bc08      	pop	{r3}
  403634:	469e      	mov	lr, r3
  403636:	4770      	bx	lr

00403638 <__fini_array_start>:
  403638:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	3610 0040 0000 0000 0000 0000 0000 0000     .6@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <_impure_ptr>:
20000438:	0010 2000                                   ... 

2000043c <__malloc_av_>:
	...
20000444:	043c 2000 043c 2000 0444 2000 0444 2000     <.. <.. D.. D.. 
20000454:	044c 2000 044c 2000 0454 2000 0454 2000     L.. L.. T.. T.. 
20000464:	045c 2000 045c 2000 0464 2000 0464 2000     \.. \.. d.. d.. 
20000474:	046c 2000 046c 2000 0474 2000 0474 2000     l.. l.. t.. t.. 
20000484:	047c 2000 047c 2000 0484 2000 0484 2000     |.. |.. ... ... 
20000494:	048c 2000 048c 2000 0494 2000 0494 2000     ... ... ... ... 
200004a4:	049c 2000 049c 2000 04a4 2000 04a4 2000     ... ... ... ... 
200004b4:	04ac 2000 04ac 2000 04b4 2000 04b4 2000     ... ... ... ... 
200004c4:	04bc 2000 04bc 2000 04c4 2000 04c4 2000     ... ... ... ... 
200004d4:	04cc 2000 04cc 2000 04d4 2000 04d4 2000     ... ... ... ... 
200004e4:	04dc 2000 04dc 2000 04e4 2000 04e4 2000     ... ... ... ... 
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 

20000844 <__malloc_trim_threshold>:
20000844:	0000 0002                                   ....

20000848 <__malloc_sbrk_base>:
20000848:	ffff ffff                                   ....
