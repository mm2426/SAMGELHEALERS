
SAMGELHEALERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000058c0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004058c0  004058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000085c  20000000  004058c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000005d4  2000085c  00406124  0002085c  2**2
                  ALLOC
  4 .stack        00003000  20000e30  004066f8  0002085c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002085c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020886  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000d516  00000000  00000000  000208df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020b6  00000000  00000000  0002ddf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006dd4  00000000  00000000  0002feab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c20  00000000  00000000  00036c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000af0  00000000  00000000  0003789f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013faf  00000000  00000000  0003838f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e6f1  00000000  00000000  0004c33e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004cc2b  00000000  00000000  0005aa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003a08  00000000  00000000  000a765c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003e30 	.word	0x20003e30
  400004:	0040236d 	.word	0x0040236d
  400008:	00402435 	.word	0x00402435
  40000c:	00402435 	.word	0x00402435
  400010:	00402435 	.word	0x00402435
  400014:	00402435 	.word	0x00402435
  400018:	00402435 	.word	0x00402435
	...
  40002c:	00402435 	.word	0x00402435
  400030:	00402435 	.word	0x00402435
  400034:	00000000 	.word	0x00000000
  400038:	00402435 	.word	0x00402435
  40003c:	00402a71 	.word	0x00402a71
  400040:	00402435 	.word	0x00402435
  400044:	00402435 	.word	0x00402435
  400048:	00402435 	.word	0x00402435
  40004c:	00402435 	.word	0x00402435
  400050:	00402435 	.word	0x00402435
  400054:	00402435 	.word	0x00402435
  400058:	00402435 	.word	0x00402435
  40005c:	00000000 	.word	0x00000000
  400060:	00402435 	.word	0x00402435
  400064:	00402435 	.word	0x00402435
  400068:	00000000 	.word	0x00000000
  40006c:	00400c05 	.word	0x00400c05
  400070:	00400c1d 	.word	0x00400c1d
  400074:	00000000 	.word	0x00000000
  400078:	00402435 	.word	0x00402435
  40007c:	00402435 	.word	0x00402435
	...
  400088:	00402435 	.word	0x00402435
  40008c:	00402435 	.word	0x00402435
  400090:	00402435 	.word	0x00402435
  400094:	00402435 	.word	0x00402435
  400098:	00402435 	.word	0x00402435
  40009c:	00402435 	.word	0x00402435
  4000a0:	00402435 	.word	0x00402435
  4000a4:	00402435 	.word	0x00402435
	...
  4000b4:	00402435 	.word	0x00402435
  4000b8:	00402435 	.word	0x00402435
  4000bc:	00402435 	.word	0x00402435
  4000c0:	00402435 	.word	0x00402435
  4000c4:	00402435 	.word	0x00402435
  4000c8:	00402435 	.word	0x00402435

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000085c 	.word	0x2000085c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004058c8 	.word	0x004058c8

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000860 	.word	0x20000860
  40011c:	004058c8 	.word	0x004058c8
  400120:	004058c8 	.word	0x004058c8
  400124:	00000000 	.word	0x00000000

00400128 <CBuffGetRxBytes>:

 #include <asf.h>
 #include "cBuff.h"

  uint32_t CBuffGetRxBytes(struct cBuff_t *cbuff)
 {
  400128:	b480      	push	{r7}
  40012a:	b085      	sub	sp, #20
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	uint32_t recvdBytes;

	if(cbuff->wPtr>cbuff->rPtr)
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
  400136:	687b      	ldr	r3, [r7, #4]
  400138:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  40013c:	429a      	cmp	r2, r3
  40013e:	d909      	bls.n	400154 <CBuffGetRxBytes+0x2c>
	{
		recvdBytes = (cbuff->wPtr - cbuff->rPtr);
  400140:	687b      	ldr	r3, [r7, #4]
  400142:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
  400146:	461a      	mov	r2, r3
  400148:	687b      	ldr	r3, [r7, #4]
  40014a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  40014e:	1ad3      	subs	r3, r2, r3
  400150:	60fb      	str	r3, [r7, #12]
  400152:	e014      	b.n	40017e <CBuffGetRxBytes+0x56>
	}
	else if(cbuff->wPtr<cbuff->rPtr)
  400154:	687b      	ldr	r3, [r7, #4]
  400156:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
  40015a:	687b      	ldr	r3, [r7, #4]
  40015c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  400160:	429a      	cmp	r2, r3
  400162:	d20a      	bcs.n	40017a <CBuffGetRxBytes+0x52>
	{
		recvdBytes = (CBUFF_SIZE - cbuff->rPtr) + cbuff->wPtr;
  400164:	687b      	ldr	r3, [r7, #4]
  400166:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  40016a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  40016e:	687a      	ldr	r2, [r7, #4]
  400170:	f892 2065 	ldrb.w	r2, [r2, #101]	; 0x65
  400174:	4413      	add	r3, r2
  400176:	60fb      	str	r3, [r7, #12]
  400178:	e001      	b.n	40017e <CBuffGetRxBytes+0x56>
	}
	else
	{
		recvdBytes = 0;
  40017a:	2300      	movs	r3, #0
  40017c:	60fb      	str	r3, [r7, #12]
	}
	return recvdBytes;
  40017e:	68fb      	ldr	r3, [r7, #12]
 }
  400180:	4618      	mov	r0, r3
  400182:	3714      	adds	r7, #20
  400184:	46bd      	mov	sp, r7
  400186:	bc80      	pop	{r7}
  400188:	4770      	bx	lr
  40018a:	bf00      	nop

0040018c <CBuffReadByte>:
 
 CBUFF_TYPE CBuffReadByte(struct cBuff_t *cbuff)
 {
  40018c:	b480      	push	{r7}
  40018e:	b085      	sub	sp, #20
  400190:	af00      	add	r7, sp, #0
  400192:	6078      	str	r0, [r7, #4]
	CBUFF_TYPE retVal;

	retVal = cbuff->buff[cbuff->rPtr++];
  400194:	687b      	ldr	r3, [r7, #4]
  400196:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  40019a:	1c5a      	adds	r2, r3, #1
  40019c:	b2d1      	uxtb	r1, r2
  40019e:	687a      	ldr	r2, [r7, #4]
  4001a0:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
  4001a4:	461a      	mov	r2, r3
  4001a6:	687b      	ldr	r3, [r7, #4]
  4001a8:	5c9b      	ldrb	r3, [r3, r2]
  4001aa:	73fb      	strb	r3, [r7, #15]
	if(cbuff->rPtr>(CBUFF_SIZE-1))
  4001ac:	687b      	ldr	r3, [r7, #4]
  4001ae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
  4001b2:	2b63      	cmp	r3, #99	; 0x63
  4001b4:	d903      	bls.n	4001be <CBuffReadByte+0x32>
	{
		cbuff->rPtr = 0;
  4001b6:	687b      	ldr	r3, [r7, #4]
  4001b8:	2200      	movs	r2, #0
  4001ba:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	}
	return retVal;
  4001be:	7bfb      	ldrb	r3, [r7, #15]
 }
  4001c0:	4618      	mov	r0, r3
  4001c2:	3714      	adds	r7, #20
  4001c4:	46bd      	mov	sp, r7
  4001c6:	bc80      	pop	{r7}
  4001c8:	4770      	bx	lr
  4001ca:	bf00      	nop

004001cc <CBuffWriteByte>:
  
 void CBuffWriteByte(struct cBuff_t *cbuff, CBUFF_TYPE dByte)
 {
  4001cc:	b480      	push	{r7}
  4001ce:	b083      	sub	sp, #12
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	6078      	str	r0, [r7, #4]
  4001d4:	460b      	mov	r3, r1
  4001d6:	70fb      	strb	r3, [r7, #3]
	cbuff->buff[cbuff->wPtr++] = dByte;
  4001d8:	687b      	ldr	r3, [r7, #4]
  4001da:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
  4001de:	1c5a      	adds	r2, r3, #1
  4001e0:	b2d1      	uxtb	r1, r2
  4001e2:	687a      	ldr	r2, [r7, #4]
  4001e4:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
  4001e8:	4619      	mov	r1, r3
  4001ea:	687b      	ldr	r3, [r7, #4]
  4001ec:	78fa      	ldrb	r2, [r7, #3]
  4001ee:	545a      	strb	r2, [r3, r1]
	if(cbuff->wPtr>(CBUFF_SIZE-1))
  4001f0:	687b      	ldr	r3, [r7, #4]
  4001f2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
  4001f6:	2b63      	cmp	r3, #99	; 0x63
  4001f8:	d903      	bls.n	400202 <CBuffWriteByte+0x36>
	{
		cbuff->wPtr = 0;
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	2200      	movs	r2, #0
  4001fe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	}
  400202:	bf00      	nop
  400204:	370c      	adds	r7, #12
  400206:	46bd      	mov	sp, r7
  400208:	bc80      	pop	{r7}
  40020a:	4770      	bx	lr

0040020c <ReadPressureSen>:
 */ 

 #include "pressureSens.h"

 void ReadPressureSen(Twi * Port, uint8_t addr, uint8_t *dPkt)
 {
  40020c:	b580      	push	{r7, lr}
  40020e:	b08a      	sub	sp, #40	; 0x28
  400210:	af00      	add	r7, sp, #0
  400212:	60f8      	str	r0, [r7, #12]
  400214:	460b      	mov	r3, r1
  400216:	607a      	str	r2, [r7, #4]
  400218:	72fb      	strb	r3, [r7, #11]
	twi_packet_t pkt;
	/* Set Device Address */
	pkt.chip = addr;
  40021a:	7afb      	ldrb	r3, [r7, #11]
  40021c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	/* No Address Bytes to be clocked */
	pkt.addr_length = 0;
  400220:	2300      	movs	r3, #0
  400222:	61bb      	str	r3, [r7, #24]
	/* Address of buffer where recvd data is to be stored */
	pkt.buffer = dPkt;
  400224:	687b      	ldr	r3, [r7, #4]
  400226:	61fb      	str	r3, [r7, #28]
	/* No of bytes to read */
	pkt.length = 2;
  400228:	2302      	movs	r3, #2
  40022a:	623b      	str	r3, [r7, #32]
	twi_master_read(Port, &pkt);
  40022c:	f107 0314 	add.w	r3, r7, #20
  400230:	4619      	mov	r1, r3
  400232:	68f8      	ldr	r0, [r7, #12]
  400234:	4b06      	ldr	r3, [pc, #24]	; (400250 <ReadPressureSen+0x44>)
  400236:	4798      	blx	r3
	dPkt[0] &= 0x3F;
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	781b      	ldrb	r3, [r3, #0]
  40023c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400240:	b2da      	uxtb	r2, r3
  400242:	687b      	ldr	r3, [r7, #4]
  400244:	701a      	strb	r2, [r3, #0]
 }
  400246:	bf00      	nop
  400248:	3728      	adds	r7, #40	; 0x28
  40024a:	46bd      	mov	sp, r7
  40024c:	bd80      	pop	{r7, pc}
  40024e:	bf00      	nop
  400250:	00400e91 	.word	0x00400e91

00400254 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400254:	b480      	push	{r7}
  400256:	b083      	sub	sp, #12
  400258:	af00      	add	r7, sp, #0
  40025a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40025c:	687b      	ldr	r3, [r7, #4]
  40025e:	2b07      	cmp	r3, #7
  400260:	d825      	bhi.n	4002ae <osc_get_rate+0x5a>
  400262:	a201      	add	r2, pc, #4	; (adr r2, 400268 <osc_get_rate+0x14>)
  400264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400268:	00400289 	.word	0x00400289
  40026c:	0040028f 	.word	0x0040028f
  400270:	00400295 	.word	0x00400295
  400274:	0040029b 	.word	0x0040029b
  400278:	0040029f 	.word	0x0040029f
  40027c:	004002a3 	.word	0x004002a3
  400280:	004002a7 	.word	0x004002a7
  400284:	004002ab 	.word	0x004002ab
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400288:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40028c:	e010      	b.n	4002b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40028e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400292:	e00d      	b.n	4002b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400298:	e00a      	b.n	4002b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40029a:	4b08      	ldr	r3, [pc, #32]	; (4002bc <osc_get_rate+0x68>)
  40029c:	e008      	b.n	4002b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40029e:	4b08      	ldr	r3, [pc, #32]	; (4002c0 <osc_get_rate+0x6c>)
  4002a0:	e006      	b.n	4002b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002a2:	4b08      	ldr	r3, [pc, #32]	; (4002c4 <osc_get_rate+0x70>)
  4002a4:	e004      	b.n	4002b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002a6:	4b07      	ldr	r3, [pc, #28]	; (4002c4 <osc_get_rate+0x70>)
  4002a8:	e002      	b.n	4002b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002aa:	4b06      	ldr	r3, [pc, #24]	; (4002c4 <osc_get_rate+0x70>)
  4002ac:	e000      	b.n	4002b0 <osc_get_rate+0x5c>
	}

	return 0;
  4002ae:	2300      	movs	r3, #0
}
  4002b0:	4618      	mov	r0, r3
  4002b2:	370c      	adds	r7, #12
  4002b4:	46bd      	mov	sp, r7
  4002b6:	bc80      	pop	{r7}
  4002b8:	4770      	bx	lr
  4002ba:	bf00      	nop
  4002bc:	003d0900 	.word	0x003d0900
  4002c0:	007a1200 	.word	0x007a1200
  4002c4:	00b71b00 	.word	0x00b71b00

004002c8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4002c8:	b580      	push	{r7, lr}
  4002ca:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4002cc:	2006      	movs	r0, #6
  4002ce:	4b04      	ldr	r3, [pc, #16]	; (4002e0 <sysclk_get_main_hz+0x18>)
  4002d0:	4798      	blx	r3
  4002d2:	4602      	mov	r2, r0
  4002d4:	4613      	mov	r3, r2
  4002d6:	009b      	lsls	r3, r3, #2
  4002d8:	4413      	add	r3, r2
  4002da:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4002dc:	4618      	mov	r0, r3
  4002de:	bd80      	pop	{r7, pc}
  4002e0:	00400255 	.word	0x00400255

004002e4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4002e4:	b580      	push	{r7, lr}
  4002e6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4002e8:	4b02      	ldr	r3, [pc, #8]	; (4002f4 <sysclk_get_peripheral_hz+0x10>)
  4002ea:	4798      	blx	r3
  4002ec:	4603      	mov	r3, r0
  4002ee:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4002f0:	4618      	mov	r0, r3
  4002f2:	bd80      	pop	{r7, pc}
  4002f4:	004002c9 	.word	0x004002c9

004002f8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4002f8:	b580      	push	{r7, lr}
  4002fa:	b082      	sub	sp, #8
  4002fc:	af00      	add	r7, sp, #0
  4002fe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400300:	6878      	ldr	r0, [r7, #4]
  400302:	4b03      	ldr	r3, [pc, #12]	; (400310 <sysclk_enable_peripheral_clock+0x18>)
  400304:	4798      	blx	r3
}
  400306:	bf00      	nop
  400308:	3708      	adds	r7, #8
  40030a:	46bd      	mov	sp, r7
  40030c:	bd80      	pop	{r7, pc}
  40030e:	bf00      	nop
  400310:	00402151 	.word	0x00402151

00400314 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  400314:	b580      	push	{r7, lr}
  400316:	b08c      	sub	sp, #48	; 0x30
  400318:	af00      	add	r7, sp, #0
  40031a:	6078      	str	r0, [r7, #4]
  40031c:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40031e:	4b31      	ldr	r3, [pc, #196]	; (4003e4 <usart_serial_init+0xd0>)
  400320:	4798      	blx	r3
  400322:	4603      	mov	r3, r0
  400324:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  400326:	683b      	ldr	r3, [r7, #0]
  400328:	681b      	ldr	r3, [r3, #0]
  40032a:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  40032c:	683b      	ldr	r3, [r7, #0]
  40032e:	689b      	ldr	r3, [r3, #8]
  400330:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  400332:	683b      	ldr	r3, [r7, #0]
  400334:	681b      	ldr	r3, [r3, #0]
  400336:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  400338:	683b      	ldr	r3, [r7, #0]
  40033a:	685b      	ldr	r3, [r3, #4]
  40033c:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40033e:	683b      	ldr	r3, [r7, #0]
  400340:	689b      	ldr	r3, [r3, #8]
  400342:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  400344:	683b      	ldr	r3, [r7, #0]
  400346:	68db      	ldr	r3, [r3, #12]
  400348:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40034a:	2300      	movs	r3, #0
  40034c:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40034e:	687b      	ldr	r3, [r7, #4]
  400350:	4a25      	ldr	r2, [pc, #148]	; (4003e8 <usart_serial_init+0xd4>)
  400352:	4293      	cmp	r3, r2
  400354:	d108      	bne.n	400368 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  400356:	2008      	movs	r0, #8
  400358:	4b24      	ldr	r3, [pc, #144]	; (4003ec <usart_serial_init+0xd8>)
  40035a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  400360:	4619      	mov	r1, r3
  400362:	6878      	ldr	r0, [r7, #4]
  400364:	4b22      	ldr	r3, [pc, #136]	; (4003f0 <usart_serial_init+0xdc>)
  400366:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	4a22      	ldr	r2, [pc, #136]	; (4003f4 <usart_serial_init+0xe0>)
  40036c:	4293      	cmp	r3, r2
  40036e:	d108      	bne.n	400382 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  400370:	2009      	movs	r0, #9
  400372:	4b1e      	ldr	r3, [pc, #120]	; (4003ec <usart_serial_init+0xd8>)
  400374:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400376:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40037a:	4619      	mov	r1, r3
  40037c:	6878      	ldr	r0, [r7, #4]
  40037e:	4b1c      	ldr	r3, [pc, #112]	; (4003f0 <usart_serial_init+0xdc>)
  400380:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400382:	687b      	ldr	r3, [r7, #4]
  400384:	4a1c      	ldr	r2, [pc, #112]	; (4003f8 <usart_serial_init+0xe4>)
  400386:	4293      	cmp	r3, r2
  400388:	d111      	bne.n	4003ae <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40038a:	200e      	movs	r0, #14
  40038c:	4b17      	ldr	r3, [pc, #92]	; (4003ec <usart_serial_init+0xd8>)
  40038e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  400390:	4b14      	ldr	r3, [pc, #80]	; (4003e4 <usart_serial_init+0xd0>)
  400392:	4798      	blx	r3
  400394:	4602      	mov	r2, r0
  400396:	f107 030c 	add.w	r3, r7, #12
  40039a:	4619      	mov	r1, r3
  40039c:	6878      	ldr	r0, [r7, #4]
  40039e:	4b17      	ldr	r3, [pc, #92]	; (4003fc <usart_serial_init+0xe8>)
  4003a0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4003a2:	6878      	ldr	r0, [r7, #4]
  4003a4:	4b16      	ldr	r3, [pc, #88]	; (400400 <usart_serial_init+0xec>)
  4003a6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4003a8:	6878      	ldr	r0, [r7, #4]
  4003aa:	4b16      	ldr	r3, [pc, #88]	; (400404 <usart_serial_init+0xf0>)
  4003ac:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4003ae:	687b      	ldr	r3, [r7, #4]
  4003b0:	4a15      	ldr	r2, [pc, #84]	; (400408 <usart_serial_init+0xf4>)
  4003b2:	4293      	cmp	r3, r2
  4003b4:	d111      	bne.n	4003da <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4003b6:	200f      	movs	r0, #15
  4003b8:	4b0c      	ldr	r3, [pc, #48]	; (4003ec <usart_serial_init+0xd8>)
  4003ba:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4003bc:	4b09      	ldr	r3, [pc, #36]	; (4003e4 <usart_serial_init+0xd0>)
  4003be:	4798      	blx	r3
  4003c0:	4602      	mov	r2, r0
  4003c2:	f107 030c 	add.w	r3, r7, #12
  4003c6:	4619      	mov	r1, r3
  4003c8:	6878      	ldr	r0, [r7, #4]
  4003ca:	4b0c      	ldr	r3, [pc, #48]	; (4003fc <usart_serial_init+0xe8>)
  4003cc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4003ce:	6878      	ldr	r0, [r7, #4]
  4003d0:	4b0b      	ldr	r3, [pc, #44]	; (400400 <usart_serial_init+0xec>)
  4003d2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4003d4:	6878      	ldr	r0, [r7, #4]
  4003d6:	4b0b      	ldr	r3, [pc, #44]	; (400404 <usart_serial_init+0xf0>)
  4003d8:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4003da:	bf00      	nop
  4003dc:	3730      	adds	r7, #48	; 0x30
  4003de:	46bd      	mov	sp, r7
  4003e0:	bd80      	pop	{r7, pc}
  4003e2:	bf00      	nop
  4003e4:	004002e5 	.word	0x004002e5
  4003e8:	400e0600 	.word	0x400e0600
  4003ec:	004002f9 	.word	0x004002f9
  4003f0:	00400fb9 	.word	0x00400fb9
  4003f4:	400e0800 	.word	0x400e0800
  4003f8:	40024000 	.word	0x40024000
  4003fc:	004011cd 	.word	0x004011cd
  400400:	00401251 	.word	0x00401251
  400404:	00401299 	.word	0x00401299
  400408:	40028000 	.word	0x40028000

0040040c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	6078      	str	r0, [r7, #4]
  400414:	460b      	mov	r3, r1
  400416:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400418:	687b      	ldr	r3, [r7, #4]
  40041a:	4a20      	ldr	r2, [pc, #128]	; (40049c <usart_serial_putchar+0x90>)
  40041c:	4293      	cmp	r3, r2
  40041e:	d10a      	bne.n	400436 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400420:	bf00      	nop
  400422:	78fb      	ldrb	r3, [r7, #3]
  400424:	4619      	mov	r1, r3
  400426:	6878      	ldr	r0, [r7, #4]
  400428:	4b1d      	ldr	r3, [pc, #116]	; (4004a0 <usart_serial_putchar+0x94>)
  40042a:	4798      	blx	r3
  40042c:	4603      	mov	r3, r0
  40042e:	2b00      	cmp	r3, #0
  400430:	d1f7      	bne.n	400422 <usart_serial_putchar+0x16>
		return 1;
  400432:	2301      	movs	r3, #1
  400434:	e02d      	b.n	400492 <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400436:	687b      	ldr	r3, [r7, #4]
  400438:	4a1a      	ldr	r2, [pc, #104]	; (4004a4 <usart_serial_putchar+0x98>)
  40043a:	4293      	cmp	r3, r2
  40043c:	d10a      	bne.n	400454 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40043e:	bf00      	nop
  400440:	78fb      	ldrb	r3, [r7, #3]
  400442:	4619      	mov	r1, r3
  400444:	6878      	ldr	r0, [r7, #4]
  400446:	4b16      	ldr	r3, [pc, #88]	; (4004a0 <usart_serial_putchar+0x94>)
  400448:	4798      	blx	r3
  40044a:	4603      	mov	r3, r0
  40044c:	2b00      	cmp	r3, #0
  40044e:	d1f7      	bne.n	400440 <usart_serial_putchar+0x34>
		return 1;
  400450:	2301      	movs	r3, #1
  400452:	e01e      	b.n	400492 <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400454:	687b      	ldr	r3, [r7, #4]
  400456:	4a14      	ldr	r2, [pc, #80]	; (4004a8 <usart_serial_putchar+0x9c>)
  400458:	4293      	cmp	r3, r2
  40045a:	d10a      	bne.n	400472 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  40045c:	bf00      	nop
  40045e:	78fb      	ldrb	r3, [r7, #3]
  400460:	4619      	mov	r1, r3
  400462:	6878      	ldr	r0, [r7, #4]
  400464:	4b11      	ldr	r3, [pc, #68]	; (4004ac <usart_serial_putchar+0xa0>)
  400466:	4798      	blx	r3
  400468:	4603      	mov	r3, r0
  40046a:	2b00      	cmp	r3, #0
  40046c:	d1f7      	bne.n	40045e <usart_serial_putchar+0x52>
		return 1;
  40046e:	2301      	movs	r3, #1
  400470:	e00f      	b.n	400492 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400472:	687b      	ldr	r3, [r7, #4]
  400474:	4a0e      	ldr	r2, [pc, #56]	; (4004b0 <usart_serial_putchar+0xa4>)
  400476:	4293      	cmp	r3, r2
  400478:	d10a      	bne.n	400490 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  40047a:	bf00      	nop
  40047c:	78fb      	ldrb	r3, [r7, #3]
  40047e:	4619      	mov	r1, r3
  400480:	6878      	ldr	r0, [r7, #4]
  400482:	4b0a      	ldr	r3, [pc, #40]	; (4004ac <usart_serial_putchar+0xa0>)
  400484:	4798      	blx	r3
  400486:	4603      	mov	r3, r0
  400488:	2b00      	cmp	r3, #0
  40048a:	d1f7      	bne.n	40047c <usart_serial_putchar+0x70>
		return 1;
  40048c:	2301      	movs	r3, #1
  40048e:	e000      	b.n	400492 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400490:	2300      	movs	r3, #0
}
  400492:	4618      	mov	r0, r3
  400494:	3708      	adds	r7, #8
  400496:	46bd      	mov	sp, r7
  400498:	bd80      	pop	{r7, pc}
  40049a:	bf00      	nop
  40049c:	400e0600 	.word	0x400e0600
  4004a0:	00401049 	.word	0x00401049
  4004a4:	400e0800 	.word	0x400e0800
  4004a8:	40024000 	.word	0x40024000
  4004ac:	0040134d 	.word	0x0040134d
  4004b0:	40028000 	.word	0x40028000

004004b4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4004b4:	b580      	push	{r7, lr}
  4004b6:	b084      	sub	sp, #16
  4004b8:	af00      	add	r7, sp, #0
  4004ba:	6078      	str	r0, [r7, #4]
  4004bc:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4004be:	2300      	movs	r3, #0
  4004c0:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4004c2:	687b      	ldr	r3, [r7, #4]
  4004c4:	4a1f      	ldr	r2, [pc, #124]	; (400544 <usart_serial_getchar+0x90>)
  4004c6:	4293      	cmp	r3, r2
  4004c8:	d107      	bne.n	4004da <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4004ca:	bf00      	nop
  4004cc:	6839      	ldr	r1, [r7, #0]
  4004ce:	6878      	ldr	r0, [r7, #4]
  4004d0:	4b1d      	ldr	r3, [pc, #116]	; (400548 <usart_serial_getchar+0x94>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	2b00      	cmp	r3, #0
  4004d8:	d1f8      	bne.n	4004cc <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4004da:	687b      	ldr	r3, [r7, #4]
  4004dc:	4a1b      	ldr	r2, [pc, #108]	; (40054c <usart_serial_getchar+0x98>)
  4004de:	4293      	cmp	r3, r2
  4004e0:	d107      	bne.n	4004f2 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4004e2:	bf00      	nop
  4004e4:	6839      	ldr	r1, [r7, #0]
  4004e6:	6878      	ldr	r0, [r7, #4]
  4004e8:	4b17      	ldr	r3, [pc, #92]	; (400548 <usart_serial_getchar+0x94>)
  4004ea:	4798      	blx	r3
  4004ec:	4603      	mov	r3, r0
  4004ee:	2b00      	cmp	r3, #0
  4004f0:	d1f8      	bne.n	4004e4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4004f2:	687b      	ldr	r3, [r7, #4]
  4004f4:	4a16      	ldr	r2, [pc, #88]	; (400550 <usart_serial_getchar+0x9c>)
  4004f6:	4293      	cmp	r3, r2
  4004f8:	d10d      	bne.n	400516 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  4004fa:	bf00      	nop
  4004fc:	f107 030c 	add.w	r3, r7, #12
  400500:	4619      	mov	r1, r3
  400502:	6878      	ldr	r0, [r7, #4]
  400504:	4b13      	ldr	r3, [pc, #76]	; (400554 <usart_serial_getchar+0xa0>)
  400506:	4798      	blx	r3
  400508:	4603      	mov	r3, r0
  40050a:	2b00      	cmp	r3, #0
  40050c:	d1f6      	bne.n	4004fc <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	b2da      	uxtb	r2, r3
  400512:	683b      	ldr	r3, [r7, #0]
  400514:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400516:	687b      	ldr	r3, [r7, #4]
  400518:	4a0f      	ldr	r2, [pc, #60]	; (400558 <usart_serial_getchar+0xa4>)
  40051a:	4293      	cmp	r3, r2
  40051c:	d10d      	bne.n	40053a <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  40051e:	bf00      	nop
  400520:	f107 030c 	add.w	r3, r7, #12
  400524:	4619      	mov	r1, r3
  400526:	6878      	ldr	r0, [r7, #4]
  400528:	4b0a      	ldr	r3, [pc, #40]	; (400554 <usart_serial_getchar+0xa0>)
  40052a:	4798      	blx	r3
  40052c:	4603      	mov	r3, r0
  40052e:	2b00      	cmp	r3, #0
  400530:	d1f6      	bne.n	400520 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400532:	68fb      	ldr	r3, [r7, #12]
  400534:	b2da      	uxtb	r2, r3
  400536:	683b      	ldr	r3, [r7, #0]
  400538:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40053a:	bf00      	nop
  40053c:	3710      	adds	r7, #16
  40053e:	46bd      	mov	sp, r7
  400540:	bd80      	pop	{r7, pc}
  400542:	bf00      	nop
  400544:	400e0600 	.word	0x400e0600
  400548:	00401079 	.word	0x00401079
  40054c:	400e0800 	.word	0x400e0800
  400550:	40024000 	.word	0x40024000
  400554:	0040137d 	.word	0x0040137d
  400558:	40028000 	.word	0x40028000

0040055c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  40055c:	b580      	push	{r7, lr}
  40055e:	b082      	sub	sp, #8
  400560:	af00      	add	r7, sp, #0
  400562:	6078      	str	r0, [r7, #4]
  400564:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  400566:	4a0f      	ldr	r2, [pc, #60]	; (4005a4 <stdio_serial_init+0x48>)
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40056c:	4b0e      	ldr	r3, [pc, #56]	; (4005a8 <stdio_serial_init+0x4c>)
  40056e:	4a0f      	ldr	r2, [pc, #60]	; (4005ac <stdio_serial_init+0x50>)
  400570:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400572:	4b0f      	ldr	r3, [pc, #60]	; (4005b0 <stdio_serial_init+0x54>)
  400574:	4a0f      	ldr	r2, [pc, #60]	; (4005b4 <stdio_serial_init+0x58>)
  400576:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  400578:	6839      	ldr	r1, [r7, #0]
  40057a:	6878      	ldr	r0, [r7, #4]
  40057c:	4b0e      	ldr	r3, [pc, #56]	; (4005b8 <stdio_serial_init+0x5c>)
  40057e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400580:	4b0e      	ldr	r3, [pc, #56]	; (4005bc <stdio_serial_init+0x60>)
  400582:	681b      	ldr	r3, [r3, #0]
  400584:	689b      	ldr	r3, [r3, #8]
  400586:	2100      	movs	r1, #0
  400588:	4618      	mov	r0, r3
  40058a:	4b0d      	ldr	r3, [pc, #52]	; (4005c0 <stdio_serial_init+0x64>)
  40058c:	4798      	blx	r3
	setbuf(stdin, NULL);
  40058e:	4b0b      	ldr	r3, [pc, #44]	; (4005bc <stdio_serial_init+0x60>)
  400590:	681b      	ldr	r3, [r3, #0]
  400592:	685b      	ldr	r3, [r3, #4]
  400594:	2100      	movs	r1, #0
  400596:	4618      	mov	r0, r3
  400598:	4b09      	ldr	r3, [pc, #36]	; (4005c0 <stdio_serial_init+0x64>)
  40059a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  40059c:	bf00      	nop
  40059e:	3708      	adds	r7, #8
  4005a0:	46bd      	mov	sp, r7
  4005a2:	bd80      	pop	{r7, pc}
  4005a4:	20000b04 	.word	0x20000b04
  4005a8:	20000b00 	.word	0x20000b00
  4005ac:	0040040d 	.word	0x0040040d
  4005b0:	20000afc 	.word	0x20000afc
  4005b4:	004004b5 	.word	0x004004b5
  4005b8:	00400315 	.word	0x00400315
  4005bc:	20000448 	.word	0x20000448
  4005c0:	004048ed 	.word	0x004048ed

004005c4 <SenInitUsart>:
 pdc_packet_t pdcPkt;// pdcPkt2;
 /* Pointer to PDC register base. */
 Pdc *sen1PdcBase, *sen2PdcBase;

 void SenInitUsart(void)
 {
  4005c4:	b5b0      	push	{r4, r5, r7, lr}
  4005c6:	b08a      	sub	sp, #40	; 0x28
  4005c8:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  4005ca:	4b36      	ldr	r3, [pc, #216]	; (4006a4 <SenInitUsart+0xe0>)
  4005cc:	f107 0410 	add.w	r4, r7, #16
  4005d0:	461d      	mov	r5, r3
  4005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4005d6:	e895 0003 	ldmia.w	r5, {r0, r1}
  4005da:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(SEN1_USART_ID);
  4005de:	200e      	movs	r0, #14
  4005e0:	4b31      	ldr	r3, [pc, #196]	; (4006a8 <SenInitUsart+0xe4>)
  4005e2:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs232(SEN1_USART, &usart_console_settings,
  4005e4:	4b31      	ldr	r3, [pc, #196]	; (4006ac <SenInitUsart+0xe8>)
  4005e6:	4798      	blx	r3
  4005e8:	4602      	mov	r2, r0
  4005ea:	f107 0310 	add.w	r3, r7, #16
  4005ee:	4619      	mov	r1, r3
  4005f0:	482f      	ldr	r0, [pc, #188]	; (4006b0 <SenInitUsart+0xec>)
  4005f2:	4b30      	ldr	r3, [pc, #192]	; (4006b4 <SenInitUsart+0xf0>)
  4005f4:	4798      	blx	r3
	 sysclk_get_peripheral_hz());

	 /* Enable RX function. */
	 usart_disable_tx(SEN1_USART);
  4005f6:	482e      	ldr	r0, [pc, #184]	; (4006b0 <SenInitUsart+0xec>)
  4005f8:	4b2f      	ldr	r3, [pc, #188]	; (4006b8 <SenInitUsart+0xf4>)
  4005fa:	4798      	blx	r3
	 usart_enable_rx(SEN1_USART);
  4005fc:	482c      	ldr	r0, [pc, #176]	; (4006b0 <SenInitUsart+0xec>)
  4005fe:	4b2f      	ldr	r3, [pc, #188]	; (4006bc <SenInitUsart+0xf8>)
  400600:	4798      	blx	r3

	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 sen1PdcBase = usart_get_pdc_base(SEN1_USART);
  400602:	482b      	ldr	r0, [pc, #172]	; (4006b0 <SenInitUsart+0xec>)
  400604:	4b2e      	ldr	r3, [pc, #184]	; (4006c0 <SenInitUsart+0xfc>)
  400606:	4798      	blx	r3
  400608:	4602      	mov	r2, r0
  40060a:	4b2e      	ldr	r3, [pc, #184]	; (4006c4 <SenInitUsart+0x100>)
  40060c:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(sen1PdcBase, PERIPH_PTCR_RXTEN);
  40060e:	4b2d      	ldr	r3, [pc, #180]	; (4006c4 <SenInitUsart+0x100>)
  400610:	681b      	ldr	r3, [r3, #0]
  400612:	2101      	movs	r1, #1
  400614:	4618      	mov	r0, r3
  400616:	4b2c      	ldr	r3, [pc, #176]	; (4006c8 <SenInitUsart+0x104>)
  400618:	4798      	blx	r3

	 pdcPkt.ul_addr = (uint32_t) sen1Buff;
  40061a:	4a2c      	ldr	r2, [pc, #176]	; (4006cc <SenInitUsart+0x108>)
  40061c:	4b2c      	ldr	r3, [pc, #176]	; (4006d0 <SenInitUsart+0x10c>)
  40061e:	601a      	str	r2, [r3, #0]
	 pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  400620:	4b2b      	ldr	r3, [pc, #172]	; (4006d0 <SenInitUsart+0x10c>)
  400622:	22c8      	movs	r2, #200	; 0xc8
  400624:	605a      	str	r2, [r3, #4]
	 //For circular buffer operation
	 pdc_rx_init(sen1PdcBase, &pdcPkt, &pdcPkt);
  400626:	4b27      	ldr	r3, [pc, #156]	; (4006c4 <SenInitUsart+0x100>)
  400628:	681b      	ldr	r3, [r3, #0]
  40062a:	4a29      	ldr	r2, [pc, #164]	; (4006d0 <SenInitUsart+0x10c>)
  40062c:	4928      	ldr	r1, [pc, #160]	; (4006d0 <SenInitUsart+0x10c>)
  40062e:	4618      	mov	r0, r3
  400630:	4b28      	ldr	r3, [pc, #160]	; (4006d4 <SenInitUsart+0x110>)
  400632:	4798      	blx	r3
		 usart_disable_tx(SEN2_USART);
		 usart_enable_rx(SEN2_USART);

		sen2PdcBase = usart_get_pdc_base(SEN2_USART);
	#elif defined(BOARD_NIRA91)
		const usart_serial_options_t uart_serial_options = {
  400634:	463b      	mov	r3, r7
  400636:	2200      	movs	r2, #0
  400638:	601a      	str	r2, [r3, #0]
  40063a:	605a      	str	r2, [r3, #4]
  40063c:	609a      	str	r2, [r3, #8]
  40063e:	60da      	str	r2, [r3, #12]
  400640:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  400644:	603b      	str	r3, [r7, #0]
  400646:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40064a:	60bb      	str	r3, [r7, #8]
			.baudrate = SEN2_BAUDRATE,
			.paritytype = UART_MR_PAR_NO
		};

		sysclk_enable_peripheral_clock(SEN2_UART_ID);
  40064c:	2008      	movs	r0, #8
  40064e:	4b16      	ldr	r3, [pc, #88]	; (4006a8 <SenInitUsart+0xe4>)
  400650:	4798      	blx	r3
		stdio_serial_init(SEN2_UART, &uart_serial_options);
  400652:	463b      	mov	r3, r7
  400654:	4619      	mov	r1, r3
  400656:	4820      	ldr	r0, [pc, #128]	; (4006d8 <SenInitUsart+0x114>)
  400658:	4b20      	ldr	r3, [pc, #128]	; (4006dc <SenInitUsart+0x118>)
  40065a:	4798      	blx	r3
		
		uart_enable_rx(SEN2_UART);
  40065c:	481e      	ldr	r0, [pc, #120]	; (4006d8 <SenInitUsart+0x114>)
  40065e:	4b20      	ldr	r3, [pc, #128]	; (4006e0 <SenInitUsart+0x11c>)
  400660:	4798      	blx	r3
		uart_disable_tx(SEN2_UART);
  400662:	481d      	ldr	r0, [pc, #116]	; (4006d8 <SenInitUsart+0x114>)
  400664:	4b1f      	ldr	r3, [pc, #124]	; (4006e4 <SenInitUsart+0x120>)
  400666:	4798      	blx	r3

		sen2PdcBase = uart_get_pdc_base(SEN2_UART);
  400668:	481b      	ldr	r0, [pc, #108]	; (4006d8 <SenInitUsart+0x114>)
  40066a:	4b1f      	ldr	r3, [pc, #124]	; (4006e8 <SenInitUsart+0x124>)
  40066c:	4798      	blx	r3
  40066e:	4602      	mov	r2, r0
  400670:	4b1e      	ldr	r3, [pc, #120]	; (4006ec <SenInitUsart+0x128>)
  400672:	601a      	str	r2, [r3, #0]
	#endif

	pdc_enable_transfer(sen2PdcBase, PERIPH_PTCR_RXTEN);
  400674:	4b1d      	ldr	r3, [pc, #116]	; (4006ec <SenInitUsart+0x128>)
  400676:	681b      	ldr	r3, [r3, #0]
  400678:	2101      	movs	r1, #1
  40067a:	4618      	mov	r0, r3
  40067c:	4b12      	ldr	r3, [pc, #72]	; (4006c8 <SenInitUsart+0x104>)
  40067e:	4798      	blx	r3

	pdcPkt.ul_addr = (uint32_t) sen2Buff;
  400680:	4a1b      	ldr	r2, [pc, #108]	; (4006f0 <SenInitUsart+0x12c>)
  400682:	4b13      	ldr	r3, [pc, #76]	; (4006d0 <SenInitUsart+0x10c>)
  400684:	601a      	str	r2, [r3, #0]
	pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  400686:	4b12      	ldr	r3, [pc, #72]	; (4006d0 <SenInitUsart+0x10c>)
  400688:	22c8      	movs	r2, #200	; 0xc8
  40068a:	605a      	str	r2, [r3, #4]
	//For circular buffer operation
	pdc_rx_init(sen2PdcBase, &pdcPkt, &pdcPkt);
  40068c:	4b17      	ldr	r3, [pc, #92]	; (4006ec <SenInitUsart+0x128>)
  40068e:	681b      	ldr	r3, [r3, #0]
  400690:	4a0f      	ldr	r2, [pc, #60]	; (4006d0 <SenInitUsart+0x10c>)
  400692:	490f      	ldr	r1, [pc, #60]	; (4006d0 <SenInitUsart+0x10c>)
  400694:	4618      	mov	r0, r3
  400696:	4b0f      	ldr	r3, [pc, #60]	; (4006d4 <SenInitUsart+0x110>)
  400698:	4798      	blx	r3
 }
  40069a:	bf00      	nop
  40069c:	3728      	adds	r7, #40	; 0x28
  40069e:	46bd      	mov	sp, r7
  4006a0:	bdb0      	pop	{r4, r5, r7, pc}
  4006a2:	bf00      	nop
  4006a4:	00405864 	.word	0x00405864
  4006a8:	004002f9 	.word	0x004002f9
  4006ac:	004002e5 	.word	0x004002e5
  4006b0:	40024000 	.word	0x40024000
  4006b4:	004011cd 	.word	0x004011cd
  4006b8:	00401269 	.word	0x00401269
  4006bc:	00401299 	.word	0x00401299
  4006c0:	004013b1 	.word	0x004013b1
  4006c4:	20000af8 	.word	0x20000af8
  4006c8:	004017f9 	.word	0x004017f9
  4006cc:	20000878 	.word	0x20000878
  4006d0:	20000aec 	.word	0x20000aec
  4006d4:	004017b5 	.word	0x004017b5
  4006d8:	400e0600 	.word	0x400e0600
  4006dc:	0040055d 	.word	0x0040055d
  4006e0:	00401031 	.word	0x00401031
  4006e4:	00401019 	.word	0x00401019
  4006e8:	004010a9 	.word	0x004010a9
  4006ec:	20000af4 	.word	0x20000af4
  4006f0:	20000940 	.word	0x20000940

004006f4 <SenPdcManageBuff>:

 void SenPdcManageBuff(void)
 {
  4006f4:	b580      	push	{r7, lr}
  4006f6:	af00      	add	r7, sp, #0
	/* If PDC receive next pointer is 0 */
	if(pdc_read_rx_next_counter(sen1PdcBase)==0)
  4006f8:	4b28      	ldr	r3, [pc, #160]	; (40079c <SenPdcManageBuff+0xa8>)
  4006fa:	681b      	ldr	r3, [r3, #0]
  4006fc:	4618      	mov	r0, r3
  4006fe:	4b28      	ldr	r3, [pc, #160]	; (4007a0 <SenPdcManageBuff+0xac>)
  400700:	4798      	blx	r3
  400702:	4603      	mov	r3, r0
  400704:	2b00      	cmp	r3, #0
  400706:	d10c      	bne.n	400722 <SenPdcManageBuff+0x2e>
	{
		/* If code reaches here it means current buffer is full and 
		next buffer ptr is assigned to current buffer ptr by PDC. */
		pdcPkt.ul_addr = (uint32_t) sen1Buff;
  400708:	4a26      	ldr	r2, [pc, #152]	; (4007a4 <SenPdcManageBuff+0xb0>)
  40070a:	4b27      	ldr	r3, [pc, #156]	; (4007a8 <SenPdcManageBuff+0xb4>)
  40070c:	601a      	str	r2, [r3, #0]
		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  40070e:	4b26      	ldr	r3, [pc, #152]	; (4007a8 <SenPdcManageBuff+0xb4>)
  400710:	22c8      	movs	r2, #200	; 0xc8
  400712:	605a      	str	r2, [r3, #4]
		//For circular buffer operation infinitely
		pdc_rx_init(sen1PdcBase, NULL, &pdcPkt);
  400714:	4b21      	ldr	r3, [pc, #132]	; (40079c <SenPdcManageBuff+0xa8>)
  400716:	681b      	ldr	r3, [r3, #0]
  400718:	4a23      	ldr	r2, [pc, #140]	; (4007a8 <SenPdcManageBuff+0xb4>)
  40071a:	2100      	movs	r1, #0
  40071c:	4618      	mov	r0, r3
  40071e:	4b23      	ldr	r3, [pc, #140]	; (4007ac <SenPdcManageBuff+0xb8>)
  400720:	4798      	blx	r3
	}
	sen1Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen1PdcBase);
  400722:	4b1e      	ldr	r3, [pc, #120]	; (40079c <SenPdcManageBuff+0xa8>)
  400724:	681b      	ldr	r3, [r3, #0]
  400726:	4618      	mov	r0, r3
  400728:	4b21      	ldr	r3, [pc, #132]	; (4007b0 <SenPdcManageBuff+0xbc>)
  40072a:	4798      	blx	r3
  40072c:	4603      	mov	r3, r0
  40072e:	b29b      	uxth	r3, r3
  400730:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400734:	b29a      	uxth	r2, r3
  400736:	4b1f      	ldr	r3, [pc, #124]	; (4007b4 <SenPdcManageBuff+0xc0>)
  400738:	801a      	strh	r2, [r3, #0]
	if(sen1Wptr>=SEN_USART_BUFF_SIZE)
  40073a:	4b1e      	ldr	r3, [pc, #120]	; (4007b4 <SenPdcManageBuff+0xc0>)
  40073c:	881b      	ldrh	r3, [r3, #0]
  40073e:	2bc7      	cmp	r3, #199	; 0xc7
  400740:	d902      	bls.n	400748 <SenPdcManageBuff+0x54>
		sen1Wptr = 0;
  400742:	4b1c      	ldr	r3, [pc, #112]	; (4007b4 <SenPdcManageBuff+0xc0>)
  400744:	2200      	movs	r2, #0
  400746:	801a      	strh	r2, [r3, #0]

	/* If PDC receive next pointer is 0 */
	if(pdc_read_rx_next_counter(sen2PdcBase)==0)
  400748:	4b1b      	ldr	r3, [pc, #108]	; (4007b8 <SenPdcManageBuff+0xc4>)
  40074a:	681b      	ldr	r3, [r3, #0]
  40074c:	4618      	mov	r0, r3
  40074e:	4b14      	ldr	r3, [pc, #80]	; (4007a0 <SenPdcManageBuff+0xac>)
  400750:	4798      	blx	r3
  400752:	4603      	mov	r3, r0
  400754:	2b00      	cmp	r3, #0
  400756:	d10c      	bne.n	400772 <SenPdcManageBuff+0x7e>
	{
		/* If code reaches here it means current buffer is full and 
		next buffer ptr is assigned to current buffer ptr by PDC. */
		pdcPkt.ul_addr = (uint32_t) sen2Buff;
  400758:	4a18      	ldr	r2, [pc, #96]	; (4007bc <SenPdcManageBuff+0xc8>)
  40075a:	4b13      	ldr	r3, [pc, #76]	; (4007a8 <SenPdcManageBuff+0xb4>)
  40075c:	601a      	str	r2, [r3, #0]
		pdcPkt.ul_size = SEN_USART_BUFF_SIZE;
  40075e:	4b12      	ldr	r3, [pc, #72]	; (4007a8 <SenPdcManageBuff+0xb4>)
  400760:	22c8      	movs	r2, #200	; 0xc8
  400762:	605a      	str	r2, [r3, #4]
		//For circular buffer operation infinitely
		pdc_rx_init(sen2PdcBase, NULL, &pdcPkt);
  400764:	4b14      	ldr	r3, [pc, #80]	; (4007b8 <SenPdcManageBuff+0xc4>)
  400766:	681b      	ldr	r3, [r3, #0]
  400768:	4a0f      	ldr	r2, [pc, #60]	; (4007a8 <SenPdcManageBuff+0xb4>)
  40076a:	2100      	movs	r1, #0
  40076c:	4618      	mov	r0, r3
  40076e:	4b0f      	ldr	r3, [pc, #60]	; (4007ac <SenPdcManageBuff+0xb8>)
  400770:	4798      	blx	r3
	}
	sen2Wptr = SEN_USART_BUFF_SIZE - pdc_read_rx_counter(sen2PdcBase);
  400772:	4b11      	ldr	r3, [pc, #68]	; (4007b8 <SenPdcManageBuff+0xc4>)
  400774:	681b      	ldr	r3, [r3, #0]
  400776:	4618      	mov	r0, r3
  400778:	4b0d      	ldr	r3, [pc, #52]	; (4007b0 <SenPdcManageBuff+0xbc>)
  40077a:	4798      	blx	r3
  40077c:	4603      	mov	r3, r0
  40077e:	b29b      	uxth	r3, r3
  400780:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400784:	b29a      	uxth	r2, r3
  400786:	4b0e      	ldr	r3, [pc, #56]	; (4007c0 <SenPdcManageBuff+0xcc>)
  400788:	801a      	strh	r2, [r3, #0]
	if(sen2Wptr>=SEN_USART_BUFF_SIZE)
  40078a:	4b0d      	ldr	r3, [pc, #52]	; (4007c0 <SenPdcManageBuff+0xcc>)
  40078c:	881b      	ldrh	r3, [r3, #0]
  40078e:	2bc7      	cmp	r3, #199	; 0xc7
  400790:	d902      	bls.n	400798 <SenPdcManageBuff+0xa4>
		sen2Wptr = 0;
  400792:	4b0b      	ldr	r3, [pc, #44]	; (4007c0 <SenPdcManageBuff+0xcc>)
  400794:	2200      	movs	r2, #0
  400796:	801a      	strh	r2, [r3, #0]
 }
  400798:	bf00      	nop
  40079a:	bd80      	pop	{r7, pc}
  40079c:	20000af8 	.word	0x20000af8
  4007a0:	00401831 	.word	0x00401831
  4007a4:	20000878 	.word	0x20000878
  4007a8:	20000aec 	.word	0x20000aec
  4007ac:	004017b5 	.word	0x004017b5
  4007b0:	00401819 	.word	0x00401819
  4007b4:	20000a0c 	.word	0x20000a0c
  4007b8:	20000af4 	.word	0x20000af4
  4007bc:	20000940 	.word	0x20000940
  4007c0:	20000a0e 	.word	0x20000a0e

004007c4 <SenGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t SenGetRxBytes(uint8_t senNo)
 {
  4007c4:	b480      	push	{r7}
  4007c6:	b085      	sub	sp, #20
  4007c8:	af00      	add	r7, sp, #0
  4007ca:	4603      	mov	r3, r0
  4007cc:	71fb      	strb	r3, [r7, #7]
	uint32_t recvdBytes;
	if(senNo == 1)
  4007ce:	79fb      	ldrb	r3, [r7, #7]
  4007d0:	2b01      	cmp	r3, #1
  4007d2:	d11f      	bne.n	400814 <SenGetRxBytes+0x50>
	{
		if(sen1Wptr>sen1Rptr)
  4007d4:	4b22      	ldr	r3, [pc, #136]	; (400860 <SenGetRxBytes+0x9c>)
  4007d6:	881a      	ldrh	r2, [r3, #0]
  4007d8:	4b22      	ldr	r3, [pc, #136]	; (400864 <SenGetRxBytes+0xa0>)
  4007da:	881b      	ldrh	r3, [r3, #0]
  4007dc:	429a      	cmp	r2, r3
  4007de:	d907      	bls.n	4007f0 <SenGetRxBytes+0x2c>
		{
			recvdBytes = (sen1Wptr-sen1Rptr);
  4007e0:	4b1f      	ldr	r3, [pc, #124]	; (400860 <SenGetRxBytes+0x9c>)
  4007e2:	881b      	ldrh	r3, [r3, #0]
  4007e4:	461a      	mov	r2, r3
  4007e6:	4b1f      	ldr	r3, [pc, #124]	; (400864 <SenGetRxBytes+0xa0>)
  4007e8:	881b      	ldrh	r3, [r3, #0]
  4007ea:	1ad3      	subs	r3, r2, r3
  4007ec:	60fb      	str	r3, [r7, #12]
  4007ee:	e030      	b.n	400852 <SenGetRxBytes+0x8e>
		}
		else if(sen1Wptr<sen1Rptr)
  4007f0:	4b1b      	ldr	r3, [pc, #108]	; (400860 <SenGetRxBytes+0x9c>)
  4007f2:	881a      	ldrh	r2, [r3, #0]
  4007f4:	4b1b      	ldr	r3, [pc, #108]	; (400864 <SenGetRxBytes+0xa0>)
  4007f6:	881b      	ldrh	r3, [r3, #0]
  4007f8:	429a      	cmp	r2, r3
  4007fa:	d208      	bcs.n	40080e <SenGetRxBytes+0x4a>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen1Rptr) + sen1Wptr;
  4007fc:	4b19      	ldr	r3, [pc, #100]	; (400864 <SenGetRxBytes+0xa0>)
  4007fe:	881b      	ldrh	r3, [r3, #0]
  400800:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400804:	4a16      	ldr	r2, [pc, #88]	; (400860 <SenGetRxBytes+0x9c>)
  400806:	8812      	ldrh	r2, [r2, #0]
  400808:	4413      	add	r3, r2
  40080a:	60fb      	str	r3, [r7, #12]
  40080c:	e021      	b.n	400852 <SenGetRxBytes+0x8e>
		}
		else
		{
			recvdBytes = 0;
  40080e:	2300      	movs	r3, #0
  400810:	60fb      	str	r3, [r7, #12]
  400812:	e01e      	b.n	400852 <SenGetRxBytes+0x8e>
		}
	}
	else
	{
		if(sen2Wptr>sen2Rptr)
  400814:	4b14      	ldr	r3, [pc, #80]	; (400868 <SenGetRxBytes+0xa4>)
  400816:	881a      	ldrh	r2, [r3, #0]
  400818:	4b14      	ldr	r3, [pc, #80]	; (40086c <SenGetRxBytes+0xa8>)
  40081a:	881b      	ldrh	r3, [r3, #0]
  40081c:	429a      	cmp	r2, r3
  40081e:	d907      	bls.n	400830 <SenGetRxBytes+0x6c>
		{
			recvdBytes = (sen2Wptr-sen2Rptr);
  400820:	4b11      	ldr	r3, [pc, #68]	; (400868 <SenGetRxBytes+0xa4>)
  400822:	881b      	ldrh	r3, [r3, #0]
  400824:	461a      	mov	r2, r3
  400826:	4b11      	ldr	r3, [pc, #68]	; (40086c <SenGetRxBytes+0xa8>)
  400828:	881b      	ldrh	r3, [r3, #0]
  40082a:	1ad3      	subs	r3, r2, r3
  40082c:	60fb      	str	r3, [r7, #12]
  40082e:	e010      	b.n	400852 <SenGetRxBytes+0x8e>
		}
		else if(sen2Wptr<sen2Rptr)
  400830:	4b0d      	ldr	r3, [pc, #52]	; (400868 <SenGetRxBytes+0xa4>)
  400832:	881a      	ldrh	r2, [r3, #0]
  400834:	4b0d      	ldr	r3, [pc, #52]	; (40086c <SenGetRxBytes+0xa8>)
  400836:	881b      	ldrh	r3, [r3, #0]
  400838:	429a      	cmp	r2, r3
  40083a:	d208      	bcs.n	40084e <SenGetRxBytes+0x8a>
		{
			recvdBytes = (SEN_USART_BUFF_SIZE - sen2Rptr) + sen2Wptr;
  40083c:	4b0b      	ldr	r3, [pc, #44]	; (40086c <SenGetRxBytes+0xa8>)
  40083e:	881b      	ldrh	r3, [r3, #0]
  400840:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400844:	4a08      	ldr	r2, [pc, #32]	; (400868 <SenGetRxBytes+0xa4>)
  400846:	8812      	ldrh	r2, [r2, #0]
  400848:	4413      	add	r3, r2
  40084a:	60fb      	str	r3, [r7, #12]
  40084c:	e001      	b.n	400852 <SenGetRxBytes+0x8e>
		}
		else
		{
			recvdBytes = 0;
  40084e:	2300      	movs	r3, #0
  400850:	60fb      	str	r3, [r7, #12]
		}
	}
	
	return recvdBytes;
  400852:	68fb      	ldr	r3, [r7, #12]
 }
  400854:	4618      	mov	r0, r3
  400856:	3714      	adds	r7, #20
  400858:	46bd      	mov	sp, r7
  40085a:	bc80      	pop	{r7}
  40085c:	4770      	bx	lr
  40085e:	bf00      	nop
  400860:	20000a0c 	.word	0x20000a0c
  400864:	20000a08 	.word	0x20000a08
  400868:	20000a0e 	.word	0x20000a0e
  40086c:	20000a0a 	.word	0x20000a0a

00400870 <SenGetByte>:

 uint8_t SenGetByte(uint8_t senNo)
 {
  400870:	b480      	push	{r7}
  400872:	b085      	sub	sp, #20
  400874:	af00      	add	r7, sp, #0
  400876:	4603      	mov	r3, r0
  400878:	71fb      	strb	r3, [r7, #7]
	uint8_t dataByte;
	if(senNo==1)
  40087a:	79fb      	ldrb	r3, [r7, #7]
  40087c:	2b01      	cmp	r3, #1
  40087e:	d111      	bne.n	4008a4 <SenGetByte+0x34>
	{
		dataByte = sen1Buff[sen1Rptr++];
  400880:	4b14      	ldr	r3, [pc, #80]	; (4008d4 <SenGetByte+0x64>)
  400882:	881b      	ldrh	r3, [r3, #0]
  400884:	1c5a      	adds	r2, r3, #1
  400886:	b291      	uxth	r1, r2
  400888:	4a12      	ldr	r2, [pc, #72]	; (4008d4 <SenGetByte+0x64>)
  40088a:	8011      	strh	r1, [r2, #0]
  40088c:	461a      	mov	r2, r3
  40088e:	4b12      	ldr	r3, [pc, #72]	; (4008d8 <SenGetByte+0x68>)
  400890:	5c9b      	ldrb	r3, [r3, r2]
  400892:	73fb      	strb	r3, [r7, #15]
		if(sen1Rptr>=SEN_USART_BUFF_SIZE)
  400894:	4b0f      	ldr	r3, [pc, #60]	; (4008d4 <SenGetByte+0x64>)
  400896:	881b      	ldrh	r3, [r3, #0]
  400898:	2bc7      	cmp	r3, #199	; 0xc7
  40089a:	d914      	bls.n	4008c6 <SenGetByte+0x56>
			sen1Rptr = 0;
  40089c:	4b0d      	ldr	r3, [pc, #52]	; (4008d4 <SenGetByte+0x64>)
  40089e:	2200      	movs	r2, #0
  4008a0:	801a      	strh	r2, [r3, #0]
  4008a2:	e010      	b.n	4008c6 <SenGetByte+0x56>
	}
	else
	{
		dataByte = sen2Buff[sen2Rptr++];
  4008a4:	4b0d      	ldr	r3, [pc, #52]	; (4008dc <SenGetByte+0x6c>)
  4008a6:	881b      	ldrh	r3, [r3, #0]
  4008a8:	1c5a      	adds	r2, r3, #1
  4008aa:	b291      	uxth	r1, r2
  4008ac:	4a0b      	ldr	r2, [pc, #44]	; (4008dc <SenGetByte+0x6c>)
  4008ae:	8011      	strh	r1, [r2, #0]
  4008b0:	461a      	mov	r2, r3
  4008b2:	4b0b      	ldr	r3, [pc, #44]	; (4008e0 <SenGetByte+0x70>)
  4008b4:	5c9b      	ldrb	r3, [r3, r2]
  4008b6:	73fb      	strb	r3, [r7, #15]
		if(sen2Rptr>=SEN_USART_BUFF_SIZE)
  4008b8:	4b08      	ldr	r3, [pc, #32]	; (4008dc <SenGetByte+0x6c>)
  4008ba:	881b      	ldrh	r3, [r3, #0]
  4008bc:	2bc7      	cmp	r3, #199	; 0xc7
  4008be:	d902      	bls.n	4008c6 <SenGetByte+0x56>
			sen2Rptr = 0;
  4008c0:	4b06      	ldr	r3, [pc, #24]	; (4008dc <SenGetByte+0x6c>)
  4008c2:	2200      	movs	r2, #0
  4008c4:	801a      	strh	r2, [r3, #0]
	}
	return dataByte;
  4008c6:	7bfb      	ldrb	r3, [r7, #15]
  4008c8:	4618      	mov	r0, r3
  4008ca:	3714      	adds	r7, #20
  4008cc:	46bd      	mov	sp, r7
  4008ce:	bc80      	pop	{r7}
  4008d0:	4770      	bx	lr
  4008d2:	bf00      	nop
  4008d4:	20000a08 	.word	0x20000a08
  4008d8:	20000878 	.word	0x20000878
  4008dc:	20000a0a 	.word	0x20000a0a
  4008e0:	20000940 	.word	0x20000940

004008e4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4008e4:	b580      	push	{r7, lr}
  4008e6:	b086      	sub	sp, #24
  4008e8:	af00      	add	r7, sp, #0
  4008ea:	60f8      	str	r0, [r7, #12]
  4008ec:	60b9      	str	r1, [r7, #8]
  4008ee:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4008f0:	2300      	movs	r3, #0
  4008f2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4008f4:	68fb      	ldr	r3, [r7, #12]
  4008f6:	2b00      	cmp	r3, #0
  4008f8:	d012      	beq.n	400920 <_read+0x3c>
		return -1;
  4008fa:	f04f 33ff 	mov.w	r3, #4294967295
  4008fe:	e013      	b.n	400928 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400900:	4b0b      	ldr	r3, [pc, #44]	; (400930 <_read+0x4c>)
  400902:	681b      	ldr	r3, [r3, #0]
  400904:	4a0b      	ldr	r2, [pc, #44]	; (400934 <_read+0x50>)
  400906:	6812      	ldr	r2, [r2, #0]
  400908:	68b9      	ldr	r1, [r7, #8]
  40090a:	4610      	mov	r0, r2
  40090c:	4798      	blx	r3
		ptr++;
  40090e:	68bb      	ldr	r3, [r7, #8]
  400910:	3301      	adds	r3, #1
  400912:	60bb      	str	r3, [r7, #8]
		nChars++;
  400914:	697b      	ldr	r3, [r7, #20]
  400916:	3301      	adds	r3, #1
  400918:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40091a:	687b      	ldr	r3, [r7, #4]
  40091c:	3b01      	subs	r3, #1
  40091e:	607b      	str	r3, [r7, #4]
  400920:	687b      	ldr	r3, [r7, #4]
  400922:	2b00      	cmp	r3, #0
  400924:	dcec      	bgt.n	400900 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400926:	697b      	ldr	r3, [r7, #20]
}
  400928:	4618      	mov	r0, r3
  40092a:	3718      	adds	r7, #24
  40092c:	46bd      	mov	sp, r7
  40092e:	bd80      	pop	{r7, pc}
  400930:	20000afc 	.word	0x20000afc
  400934:	20000b04 	.word	0x20000b04

00400938 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400938:	b580      	push	{r7, lr}
  40093a:	b086      	sub	sp, #24
  40093c:	af00      	add	r7, sp, #0
  40093e:	60f8      	str	r0, [r7, #12]
  400940:	60b9      	str	r1, [r7, #8]
  400942:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400944:	2300      	movs	r3, #0
  400946:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400948:	68fb      	ldr	r3, [r7, #12]
  40094a:	2b01      	cmp	r3, #1
  40094c:	d01e      	beq.n	40098c <_write+0x54>
  40094e:	68fb      	ldr	r3, [r7, #12]
  400950:	2b02      	cmp	r3, #2
  400952:	d01b      	beq.n	40098c <_write+0x54>
  400954:	68fb      	ldr	r3, [r7, #12]
  400956:	2b03      	cmp	r3, #3
  400958:	d018      	beq.n	40098c <_write+0x54>
		return -1;
  40095a:	f04f 33ff 	mov.w	r3, #4294967295
  40095e:	e019      	b.n	400994 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400960:	4b0e      	ldr	r3, [pc, #56]	; (40099c <_write+0x64>)
  400962:	681a      	ldr	r2, [r3, #0]
  400964:	4b0e      	ldr	r3, [pc, #56]	; (4009a0 <_write+0x68>)
  400966:	6818      	ldr	r0, [r3, #0]
  400968:	68bb      	ldr	r3, [r7, #8]
  40096a:	1c59      	adds	r1, r3, #1
  40096c:	60b9      	str	r1, [r7, #8]
  40096e:	781b      	ldrb	r3, [r3, #0]
  400970:	4619      	mov	r1, r3
  400972:	4790      	blx	r2
  400974:	4603      	mov	r3, r0
  400976:	2b00      	cmp	r3, #0
  400978:	da02      	bge.n	400980 <_write+0x48>
			return -1;
  40097a:	f04f 33ff 	mov.w	r3, #4294967295
  40097e:	e009      	b.n	400994 <_write+0x5c>
		}
		++nChars;
  400980:	697b      	ldr	r3, [r7, #20]
  400982:	3301      	adds	r3, #1
  400984:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400986:	687b      	ldr	r3, [r7, #4]
  400988:	3b01      	subs	r3, #1
  40098a:	607b      	str	r3, [r7, #4]
  40098c:	687b      	ldr	r3, [r7, #4]
  40098e:	2b00      	cmp	r3, #0
  400990:	d1e6      	bne.n	400960 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  400992:	697b      	ldr	r3, [r7, #20]
}
  400994:	4618      	mov	r0, r3
  400996:	3718      	adds	r7, #24
  400998:	46bd      	mov	sp, r7
  40099a:	bd80      	pop	{r7, pc}
  40099c:	20000b00 	.word	0x20000b00
  4009a0:	20000b04 	.word	0x20000b04

004009a4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4009a4:	b480      	push	{r7}
  4009a6:	b083      	sub	sp, #12
  4009a8:	af00      	add	r7, sp, #0
  4009aa:	4603      	mov	r3, r0
  4009ac:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4009ae:	4908      	ldr	r1, [pc, #32]	; (4009d0 <NVIC_EnableIRQ+0x2c>)
  4009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4009b4:	095b      	lsrs	r3, r3, #5
  4009b6:	79fa      	ldrb	r2, [r7, #7]
  4009b8:	f002 021f 	and.w	r2, r2, #31
  4009bc:	2001      	movs	r0, #1
  4009be:	fa00 f202 	lsl.w	r2, r0, r2
  4009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4009c6:	bf00      	nop
  4009c8:	370c      	adds	r7, #12
  4009ca:	46bd      	mov	sp, r7
  4009cc:	bc80      	pop	{r7}
  4009ce:	4770      	bx	lr
  4009d0:	e000e100 	.word	0xe000e100

004009d4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4009d4:	b480      	push	{r7}
  4009d6:	b083      	sub	sp, #12
  4009d8:	af00      	add	r7, sp, #0
  4009da:	4603      	mov	r3, r0
  4009dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4009de:	4909      	ldr	r1, [pc, #36]	; (400a04 <NVIC_DisableIRQ+0x30>)
  4009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4009e4:	095b      	lsrs	r3, r3, #5
  4009e6:	79fa      	ldrb	r2, [r7, #7]
  4009e8:	f002 021f 	and.w	r2, r2, #31
  4009ec:	2001      	movs	r0, #1
  4009ee:	fa00 f202 	lsl.w	r2, r0, r2
  4009f2:	3320      	adds	r3, #32
  4009f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4009f8:	bf00      	nop
  4009fa:	370c      	adds	r7, #12
  4009fc:	46bd      	mov	sp, r7
  4009fe:	bc80      	pop	{r7}
  400a00:	4770      	bx	lr
  400a02:	bf00      	nop
  400a04:	e000e100 	.word	0xe000e100

00400a08 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400a08:	b480      	push	{r7}
  400a0a:	b083      	sub	sp, #12
  400a0c:	af00      	add	r7, sp, #0
  400a0e:	4603      	mov	r3, r0
  400a10:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400a12:	4909      	ldr	r1, [pc, #36]	; (400a38 <NVIC_ClearPendingIRQ+0x30>)
  400a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400a18:	095b      	lsrs	r3, r3, #5
  400a1a:	79fa      	ldrb	r2, [r7, #7]
  400a1c:	f002 021f 	and.w	r2, r2, #31
  400a20:	2001      	movs	r0, #1
  400a22:	fa00 f202 	lsl.w	r2, r0, r2
  400a26:	3360      	adds	r3, #96	; 0x60
  400a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400a2c:	bf00      	nop
  400a2e:	370c      	adds	r7, #12
  400a30:	46bd      	mov	sp, r7
  400a32:	bc80      	pop	{r7}
  400a34:	4770      	bx	lr
  400a36:	bf00      	nop
  400a38:	e000e100 	.word	0xe000e100

00400a3c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400a3c:	b480      	push	{r7}
  400a3e:	b083      	sub	sp, #12
  400a40:	af00      	add	r7, sp, #0
  400a42:	4603      	mov	r3, r0
  400a44:	6039      	str	r1, [r7, #0]
  400a46:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	da0b      	bge.n	400a68 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400a50:	490d      	ldr	r1, [pc, #52]	; (400a88 <NVIC_SetPriority+0x4c>)
  400a52:	79fb      	ldrb	r3, [r7, #7]
  400a54:	f003 030f 	and.w	r3, r3, #15
  400a58:	3b04      	subs	r3, #4
  400a5a:	683a      	ldr	r2, [r7, #0]
  400a5c:	b2d2      	uxtb	r2, r2
  400a5e:	0112      	lsls	r2, r2, #4
  400a60:	b2d2      	uxtb	r2, r2
  400a62:	440b      	add	r3, r1
  400a64:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  400a66:	e009      	b.n	400a7c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400a68:	4908      	ldr	r1, [pc, #32]	; (400a8c <NVIC_SetPriority+0x50>)
  400a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400a6e:	683a      	ldr	r2, [r7, #0]
  400a70:	b2d2      	uxtb	r2, r2
  400a72:	0112      	lsls	r2, r2, #4
  400a74:	b2d2      	uxtb	r2, r2
  400a76:	440b      	add	r3, r1
  400a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400a7c:	bf00      	nop
  400a7e:	370c      	adds	r7, #12
  400a80:	46bd      	mov	sp, r7
  400a82:	bc80      	pop	{r7}
  400a84:	4770      	bx	lr
  400a86:	bf00      	nop
  400a88:	e000ed00 	.word	0xe000ed00
  400a8c:	e000e100 	.word	0xe000e100

00400a90 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a90:	b580      	push	{r7, lr}
  400a92:	b084      	sub	sp, #16
  400a94:	af00      	add	r7, sp, #0
  400a96:	6078      	str	r0, [r7, #4]
  400a98:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a9a:	6878      	ldr	r0, [r7, #4]
  400a9c:	4b2c      	ldr	r3, [pc, #176]	; (400b50 <pio_handler_process+0xc0>)
  400a9e:	4798      	blx	r3
  400aa0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400aa2:	6878      	ldr	r0, [r7, #4]
  400aa4:	4b2b      	ldr	r3, [pc, #172]	; (400b54 <pio_handler_process+0xc4>)
  400aa6:	4798      	blx	r3
  400aa8:	4602      	mov	r2, r0
  400aaa:	68fb      	ldr	r3, [r7, #12]
  400aac:	4013      	ands	r3, r2
  400aae:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400ab0:	68fb      	ldr	r3, [r7, #12]
  400ab2:	2b00      	cmp	r3, #0
  400ab4:	d03c      	beq.n	400b30 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400ab6:	2300      	movs	r3, #0
  400ab8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400aba:	e034      	b.n	400b26 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400abc:	4a26      	ldr	r2, [pc, #152]	; (400b58 <pio_handler_process+0xc8>)
  400abe:	68bb      	ldr	r3, [r7, #8]
  400ac0:	011b      	lsls	r3, r3, #4
  400ac2:	4413      	add	r3, r2
  400ac4:	681a      	ldr	r2, [r3, #0]
  400ac6:	683b      	ldr	r3, [r7, #0]
  400ac8:	429a      	cmp	r2, r3
  400aca:	d126      	bne.n	400b1a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400acc:	4a22      	ldr	r2, [pc, #136]	; (400b58 <pio_handler_process+0xc8>)
  400ace:	68bb      	ldr	r3, [r7, #8]
  400ad0:	011b      	lsls	r3, r3, #4
  400ad2:	4413      	add	r3, r2
  400ad4:	3304      	adds	r3, #4
  400ad6:	681a      	ldr	r2, [r3, #0]
  400ad8:	68fb      	ldr	r3, [r7, #12]
  400ada:	4013      	ands	r3, r2
  400adc:	2b00      	cmp	r3, #0
  400ade:	d01c      	beq.n	400b1a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ae0:	4a1d      	ldr	r2, [pc, #116]	; (400b58 <pio_handler_process+0xc8>)
  400ae2:	68bb      	ldr	r3, [r7, #8]
  400ae4:	011b      	lsls	r3, r3, #4
  400ae6:	4413      	add	r3, r2
  400ae8:	330c      	adds	r3, #12
  400aea:	681b      	ldr	r3, [r3, #0]
  400aec:	491a      	ldr	r1, [pc, #104]	; (400b58 <pio_handler_process+0xc8>)
  400aee:	68ba      	ldr	r2, [r7, #8]
  400af0:	0112      	lsls	r2, r2, #4
  400af2:	440a      	add	r2, r1
  400af4:	6810      	ldr	r0, [r2, #0]
  400af6:	4918      	ldr	r1, [pc, #96]	; (400b58 <pio_handler_process+0xc8>)
  400af8:	68ba      	ldr	r2, [r7, #8]
  400afa:	0112      	lsls	r2, r2, #4
  400afc:	440a      	add	r2, r1
  400afe:	3204      	adds	r2, #4
  400b00:	6812      	ldr	r2, [r2, #0]
  400b02:	4611      	mov	r1, r2
  400b04:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400b06:	4a14      	ldr	r2, [pc, #80]	; (400b58 <pio_handler_process+0xc8>)
  400b08:	68bb      	ldr	r3, [r7, #8]
  400b0a:	011b      	lsls	r3, r3, #4
  400b0c:	4413      	add	r3, r2
  400b0e:	3304      	adds	r3, #4
  400b10:	681b      	ldr	r3, [r3, #0]
  400b12:	43db      	mvns	r3, r3
  400b14:	68fa      	ldr	r2, [r7, #12]
  400b16:	4013      	ands	r3, r2
  400b18:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400b1a:	68bb      	ldr	r3, [r7, #8]
  400b1c:	3301      	adds	r3, #1
  400b1e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400b20:	68bb      	ldr	r3, [r7, #8]
  400b22:	2b06      	cmp	r3, #6
  400b24:	d803      	bhi.n	400b2e <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400b26:	68fb      	ldr	r3, [r7, #12]
  400b28:	2b00      	cmp	r3, #0
  400b2a:	d1c7      	bne.n	400abc <pio_handler_process+0x2c>
  400b2c:	e000      	b.n	400b30 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400b2e:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400b30:	4b0a      	ldr	r3, [pc, #40]	; (400b5c <pio_handler_process+0xcc>)
  400b32:	681b      	ldr	r3, [r3, #0]
  400b34:	2b00      	cmp	r3, #0
  400b36:	d007      	beq.n	400b48 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400b38:	4b09      	ldr	r3, [pc, #36]	; (400b60 <pio_handler_process+0xd0>)
  400b3a:	681b      	ldr	r3, [r3, #0]
  400b3c:	2b00      	cmp	r3, #0
  400b3e:	d003      	beq.n	400b48 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400b40:	4b07      	ldr	r3, [pc, #28]	; (400b60 <pio_handler_process+0xd0>)
  400b42:	681b      	ldr	r3, [r3, #0]
  400b44:	6878      	ldr	r0, [r7, #4]
  400b46:	4798      	blx	r3
		}
	}
#endif
}
  400b48:	bf00      	nop
  400b4a:	3710      	adds	r7, #16
  400b4c:	46bd      	mov	sp, r7
  400b4e:	bd80      	pop	{r7, pc}
  400b50:	00401b45 	.word	0x00401b45
  400b54:	00401b5d 	.word	0x00401b5d
  400b58:	20000a10 	.word	0x20000a10
  400b5c:	20000b08 	.word	0x20000b08
  400b60:	20000a84 	.word	0x20000a84

00400b64 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400b64:	b580      	push	{r7, lr}
  400b66:	b086      	sub	sp, #24
  400b68:	af00      	add	r7, sp, #0
  400b6a:	60f8      	str	r0, [r7, #12]
  400b6c:	60b9      	str	r1, [r7, #8]
  400b6e:	607a      	str	r2, [r7, #4]
  400b70:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400b72:	4b21      	ldr	r3, [pc, #132]	; (400bf8 <pio_handler_set+0x94>)
  400b74:	681b      	ldr	r3, [r3, #0]
  400b76:	2b06      	cmp	r3, #6
  400b78:	d901      	bls.n	400b7e <pio_handler_set+0x1a>
		return 1;
  400b7a:	2301      	movs	r3, #1
  400b7c:	e038      	b.n	400bf0 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400b7e:	2300      	movs	r3, #0
  400b80:	75fb      	strb	r3, [r7, #23]
  400b82:	e011      	b.n	400ba8 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400b84:	7dfb      	ldrb	r3, [r7, #23]
  400b86:	011b      	lsls	r3, r3, #4
  400b88:	4a1c      	ldr	r2, [pc, #112]	; (400bfc <pio_handler_set+0x98>)
  400b8a:	4413      	add	r3, r2
  400b8c:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400b8e:	693b      	ldr	r3, [r7, #16]
  400b90:	681a      	ldr	r2, [r3, #0]
  400b92:	68bb      	ldr	r3, [r7, #8]
  400b94:	429a      	cmp	r2, r3
  400b96:	d104      	bne.n	400ba2 <pio_handler_set+0x3e>
  400b98:	693b      	ldr	r3, [r7, #16]
  400b9a:	685a      	ldr	r2, [r3, #4]
  400b9c:	687b      	ldr	r3, [r7, #4]
  400b9e:	429a      	cmp	r2, r3
  400ba0:	d008      	beq.n	400bb4 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400ba2:	7dfb      	ldrb	r3, [r7, #23]
  400ba4:	3301      	adds	r3, #1
  400ba6:	75fb      	strb	r3, [r7, #23]
  400ba8:	7dfa      	ldrb	r2, [r7, #23]
  400baa:	4b13      	ldr	r3, [pc, #76]	; (400bf8 <pio_handler_set+0x94>)
  400bac:	681b      	ldr	r3, [r3, #0]
  400bae:	429a      	cmp	r2, r3
  400bb0:	d9e8      	bls.n	400b84 <pio_handler_set+0x20>
  400bb2:	e000      	b.n	400bb6 <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  400bb4:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400bb6:	693b      	ldr	r3, [r7, #16]
  400bb8:	68ba      	ldr	r2, [r7, #8]
  400bba:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400bbc:	693b      	ldr	r3, [r7, #16]
  400bbe:	687a      	ldr	r2, [r7, #4]
  400bc0:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400bc2:	693b      	ldr	r3, [r7, #16]
  400bc4:	683a      	ldr	r2, [r7, #0]
  400bc6:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400bc8:	693b      	ldr	r3, [r7, #16]
  400bca:	6a3a      	ldr	r2, [r7, #32]
  400bcc:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400bce:	7dfa      	ldrb	r2, [r7, #23]
  400bd0:	4b09      	ldr	r3, [pc, #36]	; (400bf8 <pio_handler_set+0x94>)
  400bd2:	681b      	ldr	r3, [r3, #0]
  400bd4:	3301      	adds	r3, #1
  400bd6:	429a      	cmp	r2, r3
  400bd8:	d104      	bne.n	400be4 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400bda:	4b07      	ldr	r3, [pc, #28]	; (400bf8 <pio_handler_set+0x94>)
  400bdc:	681b      	ldr	r3, [r3, #0]
  400bde:	3301      	adds	r3, #1
  400be0:	4a05      	ldr	r2, [pc, #20]	; (400bf8 <pio_handler_set+0x94>)
  400be2:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400be4:	683a      	ldr	r2, [r7, #0]
  400be6:	6879      	ldr	r1, [r7, #4]
  400be8:	68f8      	ldr	r0, [r7, #12]
  400bea:	4b05      	ldr	r3, [pc, #20]	; (400c00 <pio_handler_set+0x9c>)
  400bec:	4798      	blx	r3

	return 0;
  400bee:	2300      	movs	r3, #0
}
  400bf0:	4618      	mov	r0, r3
  400bf2:	3718      	adds	r7, #24
  400bf4:	46bd      	mov	sp, r7
  400bf6:	bd80      	pop	{r7, pc}
  400bf8:	20000a80 	.word	0x20000a80
  400bfc:	20000a10 	.word	0x20000a10
  400c00:	00401aa1 	.word	0x00401aa1

00400c04 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400c04:	b580      	push	{r7, lr}
  400c06:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400c08:	210b      	movs	r1, #11
  400c0a:	4802      	ldr	r0, [pc, #8]	; (400c14 <PIOA_Handler+0x10>)
  400c0c:	4b02      	ldr	r3, [pc, #8]	; (400c18 <PIOA_Handler+0x14>)
  400c0e:	4798      	blx	r3
}
  400c10:	bf00      	nop
  400c12:	bd80      	pop	{r7, pc}
  400c14:	400e0e00 	.word	0x400e0e00
  400c18:	00400a91 	.word	0x00400a91

00400c1c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400c1c:	b580      	push	{r7, lr}
  400c1e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400c20:	210c      	movs	r1, #12
  400c22:	4802      	ldr	r0, [pc, #8]	; (400c2c <PIOB_Handler+0x10>)
  400c24:	4b02      	ldr	r3, [pc, #8]	; (400c30 <PIOB_Handler+0x14>)
  400c26:	4798      	blx	r3
}
  400c28:	bf00      	nop
  400c2a:	bd80      	pop	{r7, pc}
  400c2c:	400e1000 	.word	0x400e1000
  400c30:	00400a91 	.word	0x00400a91

00400c34 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400c34:	b580      	push	{r7, lr}
  400c36:	b086      	sub	sp, #24
  400c38:	af00      	add	r7, sp, #0
  400c3a:	60f8      	str	r0, [r7, #12]
  400c3c:	460b      	mov	r3, r1
  400c3e:	607a      	str	r2, [r7, #4]
  400c40:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  400c42:	2300      	movs	r3, #0
  400c44:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  400c46:	68f8      	ldr	r0, [r7, #12]
  400c48:	4b13      	ldr	r3, [pc, #76]	; (400c98 <pio_handler_set_priority+0x64>)
  400c4a:	4798      	blx	r3
  400c4c:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400c4e:	f04f 31ff 	mov.w	r1, #4294967295
  400c52:	68f8      	ldr	r0, [r7, #12]
  400c54:	4b11      	ldr	r3, [pc, #68]	; (400c9c <pio_handler_set_priority+0x68>)
  400c56:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400c58:	68f8      	ldr	r0, [r7, #12]
  400c5a:	4b11      	ldr	r3, [pc, #68]	; (400ca0 <pio_handler_set_priority+0x6c>)
  400c5c:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  400c5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400c62:	4618      	mov	r0, r3
  400c64:	4b0f      	ldr	r3, [pc, #60]	; (400ca4 <pio_handler_set_priority+0x70>)
  400c66:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  400c68:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400c6c:	4618      	mov	r0, r3
  400c6e:	4b0e      	ldr	r3, [pc, #56]	; (400ca8 <pio_handler_set_priority+0x74>)
  400c70:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  400c72:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400c76:	6879      	ldr	r1, [r7, #4]
  400c78:	4618      	mov	r0, r3
  400c7a:	4b0c      	ldr	r3, [pc, #48]	; (400cac <pio_handler_set_priority+0x78>)
  400c7c:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  400c7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400c82:	4618      	mov	r0, r3
  400c84:	4b0a      	ldr	r3, [pc, #40]	; (400cb0 <pio_handler_set_priority+0x7c>)
  400c86:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  400c88:	6979      	ldr	r1, [r7, #20]
  400c8a:	68f8      	ldr	r0, [r7, #12]
  400c8c:	4b09      	ldr	r3, [pc, #36]	; (400cb4 <pio_handler_set_priority+0x80>)
  400c8e:	4798      	blx	r3
}
  400c90:	bf00      	nop
  400c92:	3718      	adds	r7, #24
  400c94:	46bd      	mov	sp, r7
  400c96:	bd80      	pop	{r7, pc}
  400c98:	00401b5d 	.word	0x00401b5d
  400c9c:	00401b29 	.word	0x00401b29
  400ca0:	00401b45 	.word	0x00401b45
  400ca4:	004009d5 	.word	0x004009d5
  400ca8:	00400a09 	.word	0x00400a09
  400cac:	00400a3d 	.word	0x00400a3d
  400cb0:	004009a5 	.word	0x004009a5
  400cb4:	00401b0d 	.word	0x00401b0d

00400cb8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  400cb8:	b480      	push	{r7}
  400cba:	b083      	sub	sp, #12
  400cbc:	af00      	add	r7, sp, #0
  400cbe:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400cc0:	687b      	ldr	r3, [r7, #4]
  400cc2:	2208      	movs	r2, #8
  400cc4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400cc6:	687b      	ldr	r3, [r7, #4]
  400cc8:	2220      	movs	r2, #32
  400cca:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400ccc:	687b      	ldr	r3, [r7, #4]
  400cce:	2204      	movs	r2, #4
  400cd0:	601a      	str	r2, [r3, #0]
}
  400cd2:	bf00      	nop
  400cd4:	370c      	adds	r7, #12
  400cd6:	46bd      	mov	sp, r7
  400cd8:	bc80      	pop	{r7}
  400cda:	4770      	bx	lr

00400cdc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400cdc:	b580      	push	{r7, lr}
  400cde:	b084      	sub	sp, #16
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	6078      	str	r0, [r7, #4]
  400ce4:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  400ce6:	2300      	movs	r3, #0
  400ce8:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400cea:	687b      	ldr	r3, [r7, #4]
  400cec:	f04f 32ff 	mov.w	r2, #4294967295
  400cf0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400cf2:	687b      	ldr	r3, [r7, #4]
  400cf4:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  400cf6:	6878      	ldr	r0, [r7, #4]
  400cf8:	4b0e      	ldr	r3, [pc, #56]	; (400d34 <twi_master_init+0x58>)
  400cfa:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  400cfc:	6878      	ldr	r0, [r7, #4]
  400cfe:	4b0e      	ldr	r3, [pc, #56]	; (400d38 <twi_master_init+0x5c>)
  400d00:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400d02:	683b      	ldr	r3, [r7, #0]
  400d04:	6859      	ldr	r1, [r3, #4]
  400d06:	683b      	ldr	r3, [r7, #0]
  400d08:	681b      	ldr	r3, [r3, #0]
  400d0a:	461a      	mov	r2, r3
  400d0c:	6878      	ldr	r0, [r7, #4]
  400d0e:	4b0b      	ldr	r3, [pc, #44]	; (400d3c <twi_master_init+0x60>)
  400d10:	4798      	blx	r3
  400d12:	4603      	mov	r3, r0
  400d14:	2b01      	cmp	r3, #1
  400d16:	d101      	bne.n	400d1c <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  400d18:	2301      	movs	r3, #1
  400d1a:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  400d1c:	683b      	ldr	r3, [r7, #0]
  400d1e:	7a5b      	ldrb	r3, [r3, #9]
  400d20:	2b01      	cmp	r3, #1
  400d22:	d102      	bne.n	400d2a <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  400d24:	687b      	ldr	r3, [r7, #4]
  400d26:	2240      	movs	r2, #64	; 0x40
  400d28:	601a      	str	r2, [r3, #0]
	}

	return status;
  400d2a:	68fb      	ldr	r3, [r7, #12]
}
  400d2c:	4618      	mov	r0, r3
  400d2e:	3710      	adds	r7, #16
  400d30:	46bd      	mov	sp, r7
  400d32:	bd80      	pop	{r7, pc}
  400d34:	00400f9d 	.word	0x00400f9d
  400d38:	00400cb9 	.word	0x00400cb9
  400d3c:	00400d41 	.word	0x00400d41

00400d40 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400d40:	b480      	push	{r7}
  400d42:	b089      	sub	sp, #36	; 0x24
  400d44:	af00      	add	r7, sp, #0
  400d46:	60f8      	str	r0, [r7, #12]
  400d48:	60b9      	str	r1, [r7, #8]
  400d4a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  400d4c:	2300      	movs	r3, #0
  400d4e:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400d50:	68bb      	ldr	r3, [r7, #8]
  400d52:	4a34      	ldr	r2, [pc, #208]	; (400e24 <twi_set_speed+0xe4>)
  400d54:	4293      	cmp	r3, r2
  400d56:	d901      	bls.n	400d5c <twi_set_speed+0x1c>
		return FAIL;
  400d58:	2301      	movs	r3, #1
  400d5a:	e05d      	b.n	400e18 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400d5c:	68bb      	ldr	r3, [r7, #8]
  400d5e:	4a32      	ldr	r2, [pc, #200]	; (400e28 <twi_set_speed+0xe8>)
  400d60:	4293      	cmp	r3, r2
  400d62:	d937      	bls.n	400dd4 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400d64:	687b      	ldr	r3, [r7, #4]
  400d66:	4a31      	ldr	r2, [pc, #196]	; (400e2c <twi_set_speed+0xec>)
  400d68:	fba2 2303 	umull	r2, r3, r2, r3
  400d6c:	0b9b      	lsrs	r3, r3, #14
  400d6e:	3b04      	subs	r3, #4
  400d70:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400d72:	68ba      	ldr	r2, [r7, #8]
  400d74:	4b2e      	ldr	r3, [pc, #184]	; (400e30 <twi_set_speed+0xf0>)
  400d76:	4413      	add	r3, r2
  400d78:	009b      	lsls	r3, r3, #2
  400d7a:	687a      	ldr	r2, [r7, #4]
  400d7c:	fbb2 f3f3 	udiv	r3, r2, r3
  400d80:	3b04      	subs	r3, #4
  400d82:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400d84:	e005      	b.n	400d92 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  400d86:	69fb      	ldr	r3, [r7, #28]
  400d88:	3301      	adds	r3, #1
  400d8a:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400d8c:	697b      	ldr	r3, [r7, #20]
  400d8e:	085b      	lsrs	r3, r3, #1
  400d90:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400d92:	697b      	ldr	r3, [r7, #20]
  400d94:	2bff      	cmp	r3, #255	; 0xff
  400d96:	d909      	bls.n	400dac <twi_set_speed+0x6c>
  400d98:	69fb      	ldr	r3, [r7, #28]
  400d9a:	2b06      	cmp	r3, #6
  400d9c:	d9f3      	bls.n	400d86 <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400d9e:	e005      	b.n	400dac <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  400da0:	69fb      	ldr	r3, [r7, #28]
  400da2:	3301      	adds	r3, #1
  400da4:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  400da6:	693b      	ldr	r3, [r7, #16]
  400da8:	085b      	lsrs	r3, r3, #1
  400daa:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400dac:	693b      	ldr	r3, [r7, #16]
  400dae:	2bff      	cmp	r3, #255	; 0xff
  400db0:	d902      	bls.n	400db8 <twi_set_speed+0x78>
  400db2:	69fb      	ldr	r3, [r7, #28]
  400db4:	2b06      	cmp	r3, #6
  400db6:	d9f3      	bls.n	400da0 <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400db8:	697b      	ldr	r3, [r7, #20]
  400dba:	b2da      	uxtb	r2, r3
  400dbc:	693b      	ldr	r3, [r7, #16]
  400dbe:	021b      	lsls	r3, r3, #8
  400dc0:	b29b      	uxth	r3, r3
  400dc2:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  400dc4:	69fb      	ldr	r3, [r7, #28]
  400dc6:	041b      	lsls	r3, r3, #16
  400dc8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400dcc:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400dce:	68fb      	ldr	r3, [r7, #12]
  400dd0:	611a      	str	r2, [r3, #16]
  400dd2:	e020      	b.n	400e16 <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400dd4:	68bb      	ldr	r3, [r7, #8]
  400dd6:	005b      	lsls	r3, r3, #1
  400dd8:	687a      	ldr	r2, [r7, #4]
  400dda:	fbb2 f3f3 	udiv	r3, r2, r3
  400dde:	3b04      	subs	r3, #4
  400de0:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400de2:	e005      	b.n	400df0 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  400de4:	69fb      	ldr	r3, [r7, #28]
  400de6:	3301      	adds	r3, #1
  400de8:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  400dea:	69bb      	ldr	r3, [r7, #24]
  400dec:	085b      	lsrs	r3, r3, #1
  400dee:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400df0:	69bb      	ldr	r3, [r7, #24]
  400df2:	2bff      	cmp	r3, #255	; 0xff
  400df4:	d902      	bls.n	400dfc <twi_set_speed+0xbc>
  400df6:	69fb      	ldr	r3, [r7, #28]
  400df8:	2b06      	cmp	r3, #6
  400dfa:	d9f3      	bls.n	400de4 <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400dfc:	69bb      	ldr	r3, [r7, #24]
  400dfe:	b2da      	uxtb	r2, r3
  400e00:	69bb      	ldr	r3, [r7, #24]
  400e02:	021b      	lsls	r3, r3, #8
  400e04:	b29b      	uxth	r3, r3
  400e06:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  400e08:	69fb      	ldr	r3, [r7, #28]
  400e0a:	041b      	lsls	r3, r3, #16
  400e0c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400e10:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400e12:	68fb      	ldr	r3, [r7, #12]
  400e14:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400e16:	2300      	movs	r3, #0
}
  400e18:	4618      	mov	r0, r3
  400e1a:	3724      	adds	r7, #36	; 0x24
  400e1c:	46bd      	mov	sp, r7
  400e1e:	bc80      	pop	{r7}
  400e20:	4770      	bx	lr
  400e22:	bf00      	nop
  400e24:	00061a80 	.word	0x00061a80
  400e28:	0005dc00 	.word	0x0005dc00
  400e2c:	057619f1 	.word	0x057619f1
  400e30:	3ffd1200 	.word	0x3ffd1200

00400e34 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  400e34:	b480      	push	{r7}
  400e36:	b085      	sub	sp, #20
  400e38:	af00      	add	r7, sp, #0
  400e3a:	6078      	str	r0, [r7, #4]
  400e3c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  400e3e:	683b      	ldr	r3, [r7, #0]
  400e40:	2b00      	cmp	r3, #0
  400e42:	d101      	bne.n	400e48 <twi_mk_addr+0x14>
		return 0;
  400e44:	2300      	movs	r3, #0
  400e46:	e01d      	b.n	400e84 <twi_mk_addr+0x50>

	val = addr[0];
  400e48:	687b      	ldr	r3, [r7, #4]
  400e4a:	781b      	ldrb	r3, [r3, #0]
  400e4c:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  400e4e:	683b      	ldr	r3, [r7, #0]
  400e50:	2b01      	cmp	r3, #1
  400e52:	dd09      	ble.n	400e68 <twi_mk_addr+0x34>
		val <<= 8;
  400e54:	68fb      	ldr	r3, [r7, #12]
  400e56:	021b      	lsls	r3, r3, #8
  400e58:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  400e5a:	687b      	ldr	r3, [r7, #4]
  400e5c:	3301      	adds	r3, #1
  400e5e:	781b      	ldrb	r3, [r3, #0]
  400e60:	461a      	mov	r2, r3
  400e62:	68fb      	ldr	r3, [r7, #12]
  400e64:	4313      	orrs	r3, r2
  400e66:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  400e68:	683b      	ldr	r3, [r7, #0]
  400e6a:	2b02      	cmp	r3, #2
  400e6c:	dd09      	ble.n	400e82 <twi_mk_addr+0x4e>
		val <<= 8;
  400e6e:	68fb      	ldr	r3, [r7, #12]
  400e70:	021b      	lsls	r3, r3, #8
  400e72:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  400e74:	687b      	ldr	r3, [r7, #4]
  400e76:	3302      	adds	r3, #2
  400e78:	781b      	ldrb	r3, [r3, #0]
  400e7a:	461a      	mov	r2, r3
  400e7c:	68fb      	ldr	r3, [r7, #12]
  400e7e:	4313      	orrs	r3, r2
  400e80:	60fb      	str	r3, [r7, #12]
	}
	return val;
  400e82:	68fb      	ldr	r3, [r7, #12]
}
  400e84:	4618      	mov	r0, r3
  400e86:	3714      	adds	r7, #20
  400e88:	46bd      	mov	sp, r7
  400e8a:	bc80      	pop	{r7}
  400e8c:	4770      	bx	lr
  400e8e:	bf00      	nop

00400e90 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400e90:	b580      	push	{r7, lr}
  400e92:	b088      	sub	sp, #32
  400e94:	af00      	add	r7, sp, #0
  400e96:	6078      	str	r0, [r7, #4]
  400e98:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400e9a:	683b      	ldr	r3, [r7, #0]
  400e9c:	68db      	ldr	r3, [r3, #12]
  400e9e:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  400ea0:	683b      	ldr	r3, [r7, #0]
  400ea2:	689b      	ldr	r3, [r3, #8]
  400ea4:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  400ea6:	2300      	movs	r3, #0
  400ea8:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  400eaa:	f247 5330 	movw	r3, #30000	; 0x7530
  400eae:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  400eb0:	69fb      	ldr	r3, [r7, #28]
  400eb2:	2b00      	cmp	r3, #0
  400eb4:	d101      	bne.n	400eba <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  400eb6:	2301      	movs	r3, #1
  400eb8:	e069      	b.n	400f8e <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400eba:	687b      	ldr	r3, [r7, #4]
  400ebc:	2200      	movs	r2, #0
  400ebe:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400ec0:	683b      	ldr	r3, [r7, #0]
  400ec2:	7c1b      	ldrb	r3, [r3, #16]
  400ec4:	041b      	lsls	r3, r3, #16
  400ec6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400eca:	683b      	ldr	r3, [r7, #0]
  400ecc:	685b      	ldr	r3, [r3, #4]
  400ece:	021b      	lsls	r3, r3, #8
  400ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400ed4:	4313      	orrs	r3, r2
  400ed6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  400eda:	687b      	ldr	r3, [r7, #4]
  400edc:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400ede:	687b      	ldr	r3, [r7, #4]
  400ee0:	2200      	movs	r2, #0
  400ee2:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400ee4:	683a      	ldr	r2, [r7, #0]
  400ee6:	683b      	ldr	r3, [r7, #0]
  400ee8:	685b      	ldr	r3, [r3, #4]
  400eea:	4619      	mov	r1, r3
  400eec:	4610      	mov	r0, r2
  400eee:	4b2a      	ldr	r3, [pc, #168]	; (400f98 <twi_master_read+0x108>)
  400ef0:	4798      	blx	r3
  400ef2:	4602      	mov	r2, r0
  400ef4:	687b      	ldr	r3, [r7, #4]
  400ef6:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400ef8:	69fb      	ldr	r3, [r7, #28]
  400efa:	2b01      	cmp	r3, #1
  400efc:	d105      	bne.n	400f0a <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400efe:	687b      	ldr	r3, [r7, #4]
  400f00:	2203      	movs	r2, #3
  400f02:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  400f04:	2301      	movs	r3, #1
  400f06:	75fb      	strb	r3, [r7, #23]
  400f08:	e034      	b.n	400f74 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400f0a:	687b      	ldr	r3, [r7, #4]
  400f0c:	2201      	movs	r2, #1
  400f0e:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  400f10:	2300      	movs	r3, #0
  400f12:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  400f14:	e02e      	b.n	400f74 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  400f16:	687b      	ldr	r3, [r7, #4]
  400f18:	6a1b      	ldr	r3, [r3, #32]
  400f1a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400f1c:	68fb      	ldr	r3, [r7, #12]
  400f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400f22:	2b00      	cmp	r3, #0
  400f24:	d001      	beq.n	400f2a <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  400f26:	2305      	movs	r3, #5
  400f28:	e031      	b.n	400f8e <twi_master_read+0xfe>
		}

		if (!timeout--) {
  400f2a:	693b      	ldr	r3, [r7, #16]
  400f2c:	1e5a      	subs	r2, r3, #1
  400f2e:	613a      	str	r2, [r7, #16]
  400f30:	2b00      	cmp	r3, #0
  400f32:	d101      	bne.n	400f38 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  400f34:	2309      	movs	r3, #9
  400f36:	e02a      	b.n	400f8e <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400f38:	69fb      	ldr	r3, [r7, #28]
  400f3a:	2b01      	cmp	r3, #1
  400f3c:	d107      	bne.n	400f4e <twi_master_read+0xbe>
  400f3e:	7dfb      	ldrb	r3, [r7, #23]
  400f40:	2b00      	cmp	r3, #0
  400f42:	d104      	bne.n	400f4e <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  400f44:	687b      	ldr	r3, [r7, #4]
  400f46:	2202      	movs	r2, #2
  400f48:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  400f4a:	2301      	movs	r3, #1
  400f4c:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  400f4e:	68fb      	ldr	r3, [r7, #12]
  400f50:	f003 0302 	and.w	r3, r3, #2
  400f54:	2b00      	cmp	r3, #0
  400f56:	d100      	bne.n	400f5a <twi_master_read+0xca>
			continue;
  400f58:	e00c      	b.n	400f74 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  400f5a:	69bb      	ldr	r3, [r7, #24]
  400f5c:	1c5a      	adds	r2, r3, #1
  400f5e:	61ba      	str	r2, [r7, #24]
  400f60:	687a      	ldr	r2, [r7, #4]
  400f62:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400f64:	b2d2      	uxtb	r2, r2
  400f66:	701a      	strb	r2, [r3, #0]

		cnt--;
  400f68:	69fb      	ldr	r3, [r7, #28]
  400f6a:	3b01      	subs	r3, #1
  400f6c:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  400f6e:	f247 5330 	movw	r3, #30000	; 0x7530
  400f72:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400f74:	69fb      	ldr	r3, [r7, #28]
  400f76:	2b00      	cmp	r3, #0
  400f78:	d1cd      	bne.n	400f16 <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400f7a:	bf00      	nop
  400f7c:	687b      	ldr	r3, [r7, #4]
  400f7e:	6a1b      	ldr	r3, [r3, #32]
  400f80:	f003 0301 	and.w	r3, r3, #1
  400f84:	2b00      	cmp	r3, #0
  400f86:	d0f9      	beq.n	400f7c <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  400f88:	687b      	ldr	r3, [r7, #4]
  400f8a:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  400f8c:	2300      	movs	r3, #0
}
  400f8e:	4618      	mov	r0, r3
  400f90:	3720      	adds	r7, #32
  400f92:	46bd      	mov	sp, r7
  400f94:	bd80      	pop	{r7, pc}
  400f96:	bf00      	nop
  400f98:	00400e35 	.word	0x00400e35

00400f9c <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  400f9c:	b480      	push	{r7}
  400f9e:	b083      	sub	sp, #12
  400fa0:	af00      	add	r7, sp, #0
  400fa2:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	2280      	movs	r2, #128	; 0x80
  400fa8:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400fae:	bf00      	nop
  400fb0:	370c      	adds	r7, #12
  400fb2:	46bd      	mov	sp, r7
  400fb4:	bc80      	pop	{r7}
  400fb6:	4770      	bx	lr

00400fb8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400fb8:	b480      	push	{r7}
  400fba:	b085      	sub	sp, #20
  400fbc:	af00      	add	r7, sp, #0
  400fbe:	6078      	str	r0, [r7, #4]
  400fc0:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  400fc2:	2300      	movs	r3, #0
  400fc4:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400fc6:	687b      	ldr	r3, [r7, #4]
  400fc8:	22ac      	movs	r2, #172	; 0xac
  400fca:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400fcc:	683b      	ldr	r3, [r7, #0]
  400fce:	681a      	ldr	r2, [r3, #0]
  400fd0:	683b      	ldr	r3, [r7, #0]
  400fd2:	685b      	ldr	r3, [r3, #4]
  400fd4:	fbb2 f3f3 	udiv	r3, r2, r3
  400fd8:	091b      	lsrs	r3, r3, #4
  400fda:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400fdc:	68fb      	ldr	r3, [r7, #12]
  400fde:	2b00      	cmp	r3, #0
  400fe0:	d003      	beq.n	400fea <uart_init+0x32>
  400fe2:	68fb      	ldr	r3, [r7, #12]
  400fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400fe8:	d301      	bcc.n	400fee <uart_init+0x36>
		return 1;
  400fea:	2301      	movs	r3, #1
  400fec:	e00f      	b.n	40100e <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  400fee:	687b      	ldr	r3, [r7, #4]
  400ff0:	68fa      	ldr	r2, [r7, #12]
  400ff2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400ff4:	683b      	ldr	r3, [r7, #0]
  400ff6:	689a      	ldr	r2, [r3, #8]
  400ff8:	687b      	ldr	r3, [r7, #4]
  400ffa:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400ffc:	687b      	ldr	r3, [r7, #4]
  400ffe:	f240 2202 	movw	r2, #514	; 0x202
  401002:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401006:	687b      	ldr	r3, [r7, #4]
  401008:	2250      	movs	r2, #80	; 0x50
  40100a:	601a      	str	r2, [r3, #0]

	return 0;
  40100c:	2300      	movs	r3, #0
}
  40100e:	4618      	mov	r0, r3
  401010:	3714      	adds	r7, #20
  401012:	46bd      	mov	sp, r7
  401014:	bc80      	pop	{r7}
  401016:	4770      	bx	lr

00401018 <uart_disable_tx>:
 * \brief Disable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable_tx(Uart *p_uart)
{
  401018:	b480      	push	{r7}
  40101a:	b083      	sub	sp, #12
  40101c:	af00      	add	r7, sp, #0
  40101e:	6078      	str	r0, [r7, #4]
	/* Disable transmitter */
	p_uart->UART_CR = UART_CR_TXDIS;
  401020:	687b      	ldr	r3, [r7, #4]
  401022:	2280      	movs	r2, #128	; 0x80
  401024:	601a      	str	r2, [r3, #0]
}
  401026:	bf00      	nop
  401028:	370c      	adds	r7, #12
  40102a:	46bd      	mov	sp, r7
  40102c:	bc80      	pop	{r7}
  40102e:	4770      	bx	lr

00401030 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
  401030:	b480      	push	{r7}
  401032:	b083      	sub	sp, #12
  401034:	af00      	add	r7, sp, #0
  401036:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  401038:	687b      	ldr	r3, [r7, #4]
  40103a:	2210      	movs	r2, #16
  40103c:	601a      	str	r2, [r3, #0]
}
  40103e:	bf00      	nop
  401040:	370c      	adds	r7, #12
  401042:	46bd      	mov	sp, r7
  401044:	bc80      	pop	{r7}
  401046:	4770      	bx	lr

00401048 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401048:	b480      	push	{r7}
  40104a:	b083      	sub	sp, #12
  40104c:	af00      	add	r7, sp, #0
  40104e:	6078      	str	r0, [r7, #4]
  401050:	460b      	mov	r3, r1
  401052:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401054:	687b      	ldr	r3, [r7, #4]
  401056:	695b      	ldr	r3, [r3, #20]
  401058:	f003 0302 	and.w	r3, r3, #2
  40105c:	2b00      	cmp	r3, #0
  40105e:	d101      	bne.n	401064 <uart_write+0x1c>
		return 1;
  401060:	2301      	movs	r3, #1
  401062:	e003      	b.n	40106c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401064:	78fa      	ldrb	r2, [r7, #3]
  401066:	687b      	ldr	r3, [r7, #4]
  401068:	61da      	str	r2, [r3, #28]
	return 0;
  40106a:	2300      	movs	r3, #0
}
  40106c:	4618      	mov	r0, r3
  40106e:	370c      	adds	r7, #12
  401070:	46bd      	mov	sp, r7
  401072:	bc80      	pop	{r7}
  401074:	4770      	bx	lr
  401076:	bf00      	nop

00401078 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401078:	b480      	push	{r7}
  40107a:	b083      	sub	sp, #12
  40107c:	af00      	add	r7, sp, #0
  40107e:	6078      	str	r0, [r7, #4]
  401080:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401082:	687b      	ldr	r3, [r7, #4]
  401084:	695b      	ldr	r3, [r3, #20]
  401086:	f003 0301 	and.w	r3, r3, #1
  40108a:	2b00      	cmp	r3, #0
  40108c:	d101      	bne.n	401092 <uart_read+0x1a>
		return 1;
  40108e:	2301      	movs	r3, #1
  401090:	e005      	b.n	40109e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401092:	687b      	ldr	r3, [r7, #4]
  401094:	699b      	ldr	r3, [r3, #24]
  401096:	b2da      	uxtb	r2, r3
  401098:	683b      	ldr	r3, [r7, #0]
  40109a:	701a      	strb	r2, [r3, #0]
	return 0;
  40109c:	2300      	movs	r3, #0
}
  40109e:	4618      	mov	r0, r3
  4010a0:	370c      	adds	r7, #12
  4010a2:	46bd      	mov	sp, r7
  4010a4:	bc80      	pop	{r7}
  4010a6:	4770      	bx	lr

004010a8 <uart_get_pdc_base>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return UART PDC registers base for PDC driver to access.
 */
Pdc *uart_get_pdc_base(Uart *p_uart)
{
  4010a8:	b480      	push	{r7}
  4010aa:	b085      	sub	sp, #20
  4010ac:	af00      	add	r7, sp, #0
  4010ae:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART0)
  4010b0:	687b      	ldr	r3, [r7, #4]
  4010b2:	4a08      	ldr	r2, [pc, #32]	; (4010d4 <uart_get_pdc_base+0x2c>)
  4010b4:	4293      	cmp	r3, r2
  4010b6:	d101      	bne.n	4010bc <uart_get_pdc_base+0x14>
		p_pdc_base = PDC_UART0;
  4010b8:	4b07      	ldr	r3, [pc, #28]	; (4010d8 <uart_get_pdc_base+0x30>)
  4010ba:	60fb      	str	r3, [r7, #12]
#else
#error "Unsupported device"
#endif

#if (SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART1)
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	4a07      	ldr	r2, [pc, #28]	; (4010dc <uart_get_pdc_base+0x34>)
  4010c0:	4293      	cmp	r3, r2
  4010c2:	d101      	bne.n	4010c8 <uart_get_pdc_base+0x20>
		p_pdc_base = PDC_UART1;
  4010c4:	4b06      	ldr	r3, [pc, #24]	; (4010e0 <uart_get_pdc_base+0x38>)
  4010c6:	60fb      	str	r3, [r7, #12]
#if (SAM4N)
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
  4010c8:	68fb      	ldr	r3, [r7, #12]
}
  4010ca:	4618      	mov	r0, r3
  4010cc:	3714      	adds	r7, #20
  4010ce:	46bd      	mov	sp, r7
  4010d0:	bc80      	pop	{r7}
  4010d2:	4770      	bx	lr
  4010d4:	400e0600 	.word	0x400e0600
  4010d8:	400e0700 	.word	0x400e0700
  4010dc:	400e0800 	.word	0x400e0800
  4010e0:	400e0900 	.word	0x400e0900

004010e4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4010e4:	b480      	push	{r7}
  4010e6:	b089      	sub	sp, #36	; 0x24
  4010e8:	af00      	add	r7, sp, #0
  4010ea:	60f8      	str	r0, [r7, #12]
  4010ec:	60b9      	str	r1, [r7, #8]
  4010ee:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4010f0:	68bb      	ldr	r3, [r7, #8]
  4010f2:	011a      	lsls	r2, r3, #4
  4010f4:	687b      	ldr	r3, [r7, #4]
  4010f6:	429a      	cmp	r2, r3
  4010f8:	d802      	bhi.n	401100 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4010fa:	2310      	movs	r3, #16
  4010fc:	61fb      	str	r3, [r7, #28]
  4010fe:	e001      	b.n	401104 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401100:	2308      	movs	r3, #8
  401102:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401104:	687b      	ldr	r3, [r7, #4]
  401106:	00da      	lsls	r2, r3, #3
  401108:	69fb      	ldr	r3, [r7, #28]
  40110a:	68b9      	ldr	r1, [r7, #8]
  40110c:	fb01 f303 	mul.w	r3, r1, r3
  401110:	085b      	lsrs	r3, r3, #1
  401112:	441a      	add	r2, r3
  401114:	69fb      	ldr	r3, [r7, #28]
  401116:	68b9      	ldr	r1, [r7, #8]
  401118:	fb01 f303 	mul.w	r3, r1, r3
  40111c:	fbb2 f3f3 	udiv	r3, r2, r3
  401120:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401122:	69bb      	ldr	r3, [r7, #24]
  401124:	08db      	lsrs	r3, r3, #3
  401126:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401128:	69bb      	ldr	r3, [r7, #24]
  40112a:	f003 0307 	and.w	r3, r3, #7
  40112e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401130:	697b      	ldr	r3, [r7, #20]
  401132:	2b00      	cmp	r3, #0
  401134:	d003      	beq.n	40113e <usart_set_async_baudrate+0x5a>
  401136:	697b      	ldr	r3, [r7, #20]
  401138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40113c:	d301      	bcc.n	401142 <usart_set_async_baudrate+0x5e>
		return 1;
  40113e:	2301      	movs	r3, #1
  401140:	e00f      	b.n	401162 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401142:	69fb      	ldr	r3, [r7, #28]
  401144:	2b08      	cmp	r3, #8
  401146:	d105      	bne.n	401154 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401148:	68fb      	ldr	r3, [r7, #12]
  40114a:	685b      	ldr	r3, [r3, #4]
  40114c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401150:	68fb      	ldr	r3, [r7, #12]
  401152:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401154:	693b      	ldr	r3, [r7, #16]
  401156:	041a      	lsls	r2, r3, #16
  401158:	697b      	ldr	r3, [r7, #20]
  40115a:	431a      	orrs	r2, r3
  40115c:	68fb      	ldr	r3, [r7, #12]
  40115e:	621a      	str	r2, [r3, #32]

	return 0;
  401160:	2300      	movs	r3, #0
}
  401162:	4618      	mov	r0, r3
  401164:	3724      	adds	r7, #36	; 0x24
  401166:	46bd      	mov	sp, r7
  401168:	bc80      	pop	{r7}
  40116a:	4770      	bx	lr

0040116c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40116c:	b580      	push	{r7, lr}
  40116e:	b082      	sub	sp, #8
  401170:	af00      	add	r7, sp, #0
  401172:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401174:	6878      	ldr	r0, [r7, #4]
  401176:	4b0f      	ldr	r3, [pc, #60]	; (4011b4 <usart_reset+0x48>)
  401178:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40117a:	687b      	ldr	r3, [r7, #4]
  40117c:	2200      	movs	r2, #0
  40117e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401180:	687b      	ldr	r3, [r7, #4]
  401182:	2200      	movs	r2, #0
  401184:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401186:	687b      	ldr	r3, [r7, #4]
  401188:	2200      	movs	r2, #0
  40118a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40118c:	6878      	ldr	r0, [r7, #4]
  40118e:	4b0a      	ldr	r3, [pc, #40]	; (4011b8 <usart_reset+0x4c>)
  401190:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401192:	6878      	ldr	r0, [r7, #4]
  401194:	4b09      	ldr	r3, [pc, #36]	; (4011bc <usart_reset+0x50>)
  401196:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401198:	6878      	ldr	r0, [r7, #4]
  40119a:	4b09      	ldr	r3, [pc, #36]	; (4011c0 <usart_reset+0x54>)
  40119c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40119e:	6878      	ldr	r0, [r7, #4]
  4011a0:	4b08      	ldr	r3, [pc, #32]	; (4011c4 <usart_reset+0x58>)
  4011a2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4011a4:	6878      	ldr	r0, [r7, #4]
  4011a6:	4b08      	ldr	r3, [pc, #32]	; (4011c8 <usart_reset+0x5c>)
  4011a8:	4798      	blx	r3
#endif
}
  4011aa:	bf00      	nop
  4011ac:	3708      	adds	r7, #8
  4011ae:	46bd      	mov	sp, r7
  4011b0:	bd80      	pop	{r7, pc}
  4011b2:	bf00      	nop
  4011b4:	004013f9 	.word	0x004013f9
  4011b8:	00401281 	.word	0x00401281
  4011bc:	004012c9 	.word	0x004012c9
  4011c0:	004012f9 	.word	0x004012f9
  4011c4:	00401331 	.word	0x00401331
  4011c8:	00401315 	.word	0x00401315

004011cc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4011cc:	b580      	push	{r7, lr}
  4011ce:	b084      	sub	sp, #16
  4011d0:	af00      	add	r7, sp, #0
  4011d2:	60f8      	str	r0, [r7, #12]
  4011d4:	60b9      	str	r1, [r7, #8]
  4011d6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4011d8:	68f8      	ldr	r0, [r7, #12]
  4011da:	4b1a      	ldr	r3, [pc, #104]	; (401244 <usart_init_rs232+0x78>)
  4011dc:	4798      	blx	r3

	ul_reg_val = 0;
  4011de:	4b1a      	ldr	r3, [pc, #104]	; (401248 <usart_init_rs232+0x7c>)
  4011e0:	2200      	movs	r2, #0
  4011e2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4011e4:	68bb      	ldr	r3, [r7, #8]
  4011e6:	2b00      	cmp	r3, #0
  4011e8:	d009      	beq.n	4011fe <usart_init_rs232+0x32>
  4011ea:	68bb      	ldr	r3, [r7, #8]
  4011ec:	681b      	ldr	r3, [r3, #0]
  4011ee:	687a      	ldr	r2, [r7, #4]
  4011f0:	4619      	mov	r1, r3
  4011f2:	68f8      	ldr	r0, [r7, #12]
  4011f4:	4b15      	ldr	r3, [pc, #84]	; (40124c <usart_init_rs232+0x80>)
  4011f6:	4798      	blx	r3
  4011f8:	4603      	mov	r3, r0
  4011fa:	2b00      	cmp	r3, #0
  4011fc:	d001      	beq.n	401202 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4011fe:	2301      	movs	r3, #1
  401200:	e01b      	b.n	40123a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401202:	68bb      	ldr	r3, [r7, #8]
  401204:	685a      	ldr	r2, [r3, #4]
  401206:	68bb      	ldr	r3, [r7, #8]
  401208:	689b      	ldr	r3, [r3, #8]
  40120a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40120c:	68bb      	ldr	r3, [r7, #8]
  40120e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401210:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401212:	68bb      	ldr	r3, [r7, #8]
  401214:	68db      	ldr	r3, [r3, #12]
  401216:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401218:	4b0b      	ldr	r3, [pc, #44]	; (401248 <usart_init_rs232+0x7c>)
  40121a:	681b      	ldr	r3, [r3, #0]
  40121c:	4313      	orrs	r3, r2
  40121e:	4a0a      	ldr	r2, [pc, #40]	; (401248 <usart_init_rs232+0x7c>)
  401220:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401222:	4b09      	ldr	r3, [pc, #36]	; (401248 <usart_init_rs232+0x7c>)
  401224:	681b      	ldr	r3, [r3, #0]
  401226:	4a08      	ldr	r2, [pc, #32]	; (401248 <usart_init_rs232+0x7c>)
  401228:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40122a:	68fb      	ldr	r3, [r7, #12]
  40122c:	685a      	ldr	r2, [r3, #4]
  40122e:	4b06      	ldr	r3, [pc, #24]	; (401248 <usart_init_rs232+0x7c>)
  401230:	681b      	ldr	r3, [r3, #0]
  401232:	431a      	orrs	r2, r3
  401234:	68fb      	ldr	r3, [r7, #12]
  401236:	605a      	str	r2, [r3, #4]

	return 0;
  401238:	2300      	movs	r3, #0
}
  40123a:	4618      	mov	r0, r3
  40123c:	3710      	adds	r7, #16
  40123e:	46bd      	mov	sp, r7
  401240:	bd80      	pop	{r7, pc}
  401242:	bf00      	nop
  401244:	0040116d 	.word	0x0040116d
  401248:	20000a88 	.word	0x20000a88
  40124c:	004010e5 	.word	0x004010e5

00401250 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401250:	b480      	push	{r7}
  401252:	b083      	sub	sp, #12
  401254:	af00      	add	r7, sp, #0
  401256:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401258:	687b      	ldr	r3, [r7, #4]
  40125a:	2240      	movs	r2, #64	; 0x40
  40125c:	601a      	str	r2, [r3, #0]
}
  40125e:	bf00      	nop
  401260:	370c      	adds	r7, #12
  401262:	46bd      	mov	sp, r7
  401264:	bc80      	pop	{r7}
  401266:	4770      	bx	lr

00401268 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  401268:	b480      	push	{r7}
  40126a:	b083      	sub	sp, #12
  40126c:	af00      	add	r7, sp, #0
  40126e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  401270:	687b      	ldr	r3, [r7, #4]
  401272:	2280      	movs	r2, #128	; 0x80
  401274:	601a      	str	r2, [r3, #0]
}
  401276:	bf00      	nop
  401278:	370c      	adds	r7, #12
  40127a:	46bd      	mov	sp, r7
  40127c:	bc80      	pop	{r7}
  40127e:	4770      	bx	lr

00401280 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401280:	b480      	push	{r7}
  401282:	b083      	sub	sp, #12
  401284:	af00      	add	r7, sp, #0
  401286:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401288:	687b      	ldr	r3, [r7, #4]
  40128a:	2288      	movs	r2, #136	; 0x88
  40128c:	601a      	str	r2, [r3, #0]
}
  40128e:	bf00      	nop
  401290:	370c      	adds	r7, #12
  401292:	46bd      	mov	sp, r7
  401294:	bc80      	pop	{r7}
  401296:	4770      	bx	lr

00401298 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401298:	b480      	push	{r7}
  40129a:	b083      	sub	sp, #12
  40129c:	af00      	add	r7, sp, #0
  40129e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4012a0:	687b      	ldr	r3, [r7, #4]
  4012a2:	2210      	movs	r2, #16
  4012a4:	601a      	str	r2, [r3, #0]
}
  4012a6:	bf00      	nop
  4012a8:	370c      	adds	r7, #12
  4012aa:	46bd      	mov	sp, r7
  4012ac:	bc80      	pop	{r7}
  4012ae:	4770      	bx	lr

004012b0 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
  4012b0:	b480      	push	{r7}
  4012b2:	b083      	sub	sp, #12
  4012b4:	af00      	add	r7, sp, #0
  4012b6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
  4012b8:	687b      	ldr	r3, [r7, #4]
  4012ba:	2220      	movs	r2, #32
  4012bc:	601a      	str	r2, [r3, #0]
}
  4012be:	bf00      	nop
  4012c0:	370c      	adds	r7, #12
  4012c2:	46bd      	mov	sp, r7
  4012c4:	bc80      	pop	{r7}
  4012c6:	4770      	bx	lr

004012c8 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4012c8:	b480      	push	{r7}
  4012ca:	b083      	sub	sp, #12
  4012cc:	af00      	add	r7, sp, #0
  4012ce:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4012d0:	687b      	ldr	r3, [r7, #4]
  4012d2:	2224      	movs	r2, #36	; 0x24
  4012d4:	601a      	str	r2, [r3, #0]
}
  4012d6:	bf00      	nop
  4012d8:	370c      	adds	r7, #12
  4012da:	46bd      	mov	sp, r7
  4012dc:	bc80      	pop	{r7}
  4012de:	4770      	bx	lr

004012e0 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  4012e0:	b480      	push	{r7}
  4012e2:	b083      	sub	sp, #12
  4012e4:	af00      	add	r7, sp, #0
  4012e6:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  4012e8:	687b      	ldr	r3, [r7, #4]
  4012ea:	695b      	ldr	r3, [r3, #20]
}
  4012ec:	4618      	mov	r0, r3
  4012ee:	370c      	adds	r7, #12
  4012f0:	46bd      	mov	sp, r7
  4012f2:	bc80      	pop	{r7}
  4012f4:	4770      	bx	lr
  4012f6:	bf00      	nop

004012f8 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4012f8:	b480      	push	{r7}
  4012fa:	b083      	sub	sp, #12
  4012fc:	af00      	add	r7, sp, #0
  4012fe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401300:	687b      	ldr	r3, [r7, #4]
  401302:	f44f 7280 	mov.w	r2, #256	; 0x100
  401306:	601a      	str	r2, [r3, #0]
}
  401308:	bf00      	nop
  40130a:	370c      	adds	r7, #12
  40130c:	46bd      	mov	sp, r7
  40130e:	bc80      	pop	{r7}
  401310:	4770      	bx	lr
  401312:	bf00      	nop

00401314 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  401314:	b480      	push	{r7}
  401316:	b083      	sub	sp, #12
  401318:	af00      	add	r7, sp, #0
  40131a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  40131c:	687b      	ldr	r3, [r7, #4]
  40131e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401322:	601a      	str	r2, [r3, #0]
}
  401324:	bf00      	nop
  401326:	370c      	adds	r7, #12
  401328:	46bd      	mov	sp, r7
  40132a:	bc80      	pop	{r7}
  40132c:	4770      	bx	lr
  40132e:	bf00      	nop

00401330 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401330:	b480      	push	{r7}
  401332:	b083      	sub	sp, #12
  401334:	af00      	add	r7, sp, #0
  401336:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401338:	687b      	ldr	r3, [r7, #4]
  40133a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40133e:	601a      	str	r2, [r3, #0]
}
  401340:	bf00      	nop
  401342:	370c      	adds	r7, #12
  401344:	46bd      	mov	sp, r7
  401346:	bc80      	pop	{r7}
  401348:	4770      	bx	lr
  40134a:	bf00      	nop

0040134c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  40134c:	b480      	push	{r7}
  40134e:	b083      	sub	sp, #12
  401350:	af00      	add	r7, sp, #0
  401352:	6078      	str	r0, [r7, #4]
  401354:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401356:	687b      	ldr	r3, [r7, #4]
  401358:	695b      	ldr	r3, [r3, #20]
  40135a:	f003 0302 	and.w	r3, r3, #2
  40135e:	2b00      	cmp	r3, #0
  401360:	d101      	bne.n	401366 <usart_write+0x1a>
		return 1;
  401362:	2301      	movs	r3, #1
  401364:	e005      	b.n	401372 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401366:	683b      	ldr	r3, [r7, #0]
  401368:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40136c:	687b      	ldr	r3, [r7, #4]
  40136e:	61da      	str	r2, [r3, #28]
	return 0;
  401370:	2300      	movs	r3, #0
}
  401372:	4618      	mov	r0, r3
  401374:	370c      	adds	r7, #12
  401376:	46bd      	mov	sp, r7
  401378:	bc80      	pop	{r7}
  40137a:	4770      	bx	lr

0040137c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40137c:	b480      	push	{r7}
  40137e:	b083      	sub	sp, #12
  401380:	af00      	add	r7, sp, #0
  401382:	6078      	str	r0, [r7, #4]
  401384:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401386:	687b      	ldr	r3, [r7, #4]
  401388:	695b      	ldr	r3, [r3, #20]
  40138a:	f003 0301 	and.w	r3, r3, #1
  40138e:	2b00      	cmp	r3, #0
  401390:	d101      	bne.n	401396 <usart_read+0x1a>
		return 1;
  401392:	2301      	movs	r3, #1
  401394:	e006      	b.n	4013a4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401396:	687b      	ldr	r3, [r7, #4]
  401398:	699b      	ldr	r3, [r3, #24]
  40139a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40139e:	683b      	ldr	r3, [r7, #0]
  4013a0:	601a      	str	r2, [r3, #0]

	return 0;
  4013a2:	2300      	movs	r3, #0
}
  4013a4:	4618      	mov	r0, r3
  4013a6:	370c      	adds	r7, #12
  4013a8:	46bd      	mov	sp, r7
  4013aa:	bc80      	pop	{r7}
  4013ac:	4770      	bx	lr
  4013ae:	bf00      	nop

004013b0 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  4013b0:	b480      	push	{r7}
  4013b2:	b085      	sub	sp, #20
  4013b4:	af00      	add	r7, sp, #0
  4013b6:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  4013b8:	2300      	movs	r3, #0
  4013ba:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  4013bc:	687b      	ldr	r3, [r7, #4]
  4013be:	4a0a      	ldr	r2, [pc, #40]	; (4013e8 <usart_get_pdc_base+0x38>)
  4013c0:	4293      	cmp	r3, r2
  4013c2:	d103      	bne.n	4013cc <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  4013c4:	4b09      	ldr	r3, [pc, #36]	; (4013ec <usart_get_pdc_base+0x3c>)
  4013c6:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4013c8:	68fb      	ldr	r3, [r7, #12]
  4013ca:	e008      	b.n	4013de <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	4a08      	ldr	r2, [pc, #32]	; (4013f0 <usart_get_pdc_base+0x40>)
  4013d0:	4293      	cmp	r3, r2
  4013d2:	d103      	bne.n	4013dc <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  4013d4:	4b07      	ldr	r3, [pc, #28]	; (4013f4 <usart_get_pdc_base+0x44>)
  4013d6:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4013d8:	68fb      	ldr	r3, [r7, #12]
  4013da:	e000      	b.n	4013de <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  4013dc:	68fb      	ldr	r3, [r7, #12]
}
  4013de:	4618      	mov	r0, r3
  4013e0:	3714      	adds	r7, #20
  4013e2:	46bd      	mov	sp, r7
  4013e4:	bc80      	pop	{r7}
  4013e6:	4770      	bx	lr
  4013e8:	40024000 	.word	0x40024000
  4013ec:	40024100 	.word	0x40024100
  4013f0:	40028000 	.word	0x40028000
  4013f4:	40028100 	.word	0x40028100

004013f8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4013f8:	b480      	push	{r7}
  4013fa:	b083      	sub	sp, #12
  4013fc:	af00      	add	r7, sp, #0
  4013fe:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401400:	687b      	ldr	r3, [r7, #4]
  401402:	4a04      	ldr	r2, [pc, #16]	; (401414 <usart_disable_writeprotect+0x1c>)
  401404:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401408:	bf00      	nop
  40140a:	370c      	adds	r7, #12
  40140c:	46bd      	mov	sp, r7
  40140e:	bc80      	pop	{r7}
  401410:	4770      	bx	lr
  401412:	bf00      	nop
  401414:	55534100 	.word	0x55534100

00401418 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  401418:	b580      	push	{r7, lr}
  40141a:	b082      	sub	sp, #8
  40141c:	af00      	add	r7, sp, #0
  40141e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401420:	687b      	ldr	r3, [r7, #4]
  401422:	2b07      	cmp	r3, #7
  401424:	d831      	bhi.n	40148a <osc_enable+0x72>
  401426:	a201      	add	r2, pc, #4	; (adr r2, 40142c <osc_enable+0x14>)
  401428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40142c:	00401489 	.word	0x00401489
  401430:	0040144d 	.word	0x0040144d
  401434:	00401455 	.word	0x00401455
  401438:	0040145d 	.word	0x0040145d
  40143c:	00401465 	.word	0x00401465
  401440:	0040146d 	.word	0x0040146d
  401444:	00401475 	.word	0x00401475
  401448:	0040147f 	.word	0x0040147f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40144c:	2000      	movs	r0, #0
  40144e:	4b11      	ldr	r3, [pc, #68]	; (401494 <osc_enable+0x7c>)
  401450:	4798      	blx	r3
		break;
  401452:	e01a      	b.n	40148a <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401454:	2001      	movs	r0, #1
  401456:	4b0f      	ldr	r3, [pc, #60]	; (401494 <osc_enable+0x7c>)
  401458:	4798      	blx	r3
		break;
  40145a:	e016      	b.n	40148a <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40145c:	2000      	movs	r0, #0
  40145e:	4b0e      	ldr	r3, [pc, #56]	; (401498 <osc_enable+0x80>)
  401460:	4798      	blx	r3
		break;
  401462:	e012      	b.n	40148a <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401464:	2010      	movs	r0, #16
  401466:	4b0c      	ldr	r3, [pc, #48]	; (401498 <osc_enable+0x80>)
  401468:	4798      	blx	r3
		break;
  40146a:	e00e      	b.n	40148a <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40146c:	2020      	movs	r0, #32
  40146e:	4b0a      	ldr	r3, [pc, #40]	; (401498 <osc_enable+0x80>)
  401470:	4798      	blx	r3
		break;
  401472:	e00a      	b.n	40148a <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401474:	213e      	movs	r1, #62	; 0x3e
  401476:	2000      	movs	r0, #0
  401478:	4b08      	ldr	r3, [pc, #32]	; (40149c <osc_enable+0x84>)
  40147a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40147c:	e005      	b.n	40148a <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40147e:	213e      	movs	r1, #62	; 0x3e
  401480:	2001      	movs	r0, #1
  401482:	4b06      	ldr	r3, [pc, #24]	; (40149c <osc_enable+0x84>)
  401484:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  401486:	e000      	b.n	40148a <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  401488:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40148a:	bf00      	nop
  40148c:	3708      	adds	r7, #8
  40148e:	46bd      	mov	sp, r7
  401490:	bd80      	pop	{r7, pc}
  401492:	bf00      	nop
  401494:	00401f85 	.word	0x00401f85
  401498:	00401ff1 	.word	0x00401ff1
  40149c:	00402061 	.word	0x00402061

004014a0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4014a0:	b580      	push	{r7, lr}
  4014a2:	b082      	sub	sp, #8
  4014a4:	af00      	add	r7, sp, #0
  4014a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4014a8:	687b      	ldr	r3, [r7, #4]
  4014aa:	2b07      	cmp	r3, #7
  4014ac:	d826      	bhi.n	4014fc <osc_is_ready+0x5c>
  4014ae:	a201      	add	r2, pc, #4	; (adr r2, 4014b4 <osc_is_ready+0x14>)
  4014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014b4:	004014d5 	.word	0x004014d5
  4014b8:	004014d9 	.word	0x004014d9
  4014bc:	004014d9 	.word	0x004014d9
  4014c0:	004014eb 	.word	0x004014eb
  4014c4:	004014eb 	.word	0x004014eb
  4014c8:	004014eb 	.word	0x004014eb
  4014cc:	004014eb 	.word	0x004014eb
  4014d0:	004014eb 	.word	0x004014eb
	case OSC_SLCK_32K_RC:
		return 1;
  4014d4:	2301      	movs	r3, #1
  4014d6:	e012      	b.n	4014fe <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4014d8:	4b0b      	ldr	r3, [pc, #44]	; (401508 <osc_is_ready+0x68>)
  4014da:	4798      	blx	r3
  4014dc:	4603      	mov	r3, r0
  4014de:	2b00      	cmp	r3, #0
  4014e0:	bf14      	ite	ne
  4014e2:	2301      	movne	r3, #1
  4014e4:	2300      	moveq	r3, #0
  4014e6:	b2db      	uxtb	r3, r3
  4014e8:	e009      	b.n	4014fe <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4014ea:	4b08      	ldr	r3, [pc, #32]	; (40150c <osc_is_ready+0x6c>)
  4014ec:	4798      	blx	r3
  4014ee:	4603      	mov	r3, r0
  4014f0:	2b00      	cmp	r3, #0
  4014f2:	bf14      	ite	ne
  4014f4:	2301      	movne	r3, #1
  4014f6:	2300      	moveq	r3, #0
  4014f8:	b2db      	uxtb	r3, r3
  4014fa:	e000      	b.n	4014fe <osc_is_ready+0x5e>
	}

	return 0;
  4014fc:	2300      	movs	r3, #0
}
  4014fe:	4618      	mov	r0, r3
  401500:	3708      	adds	r7, #8
  401502:	46bd      	mov	sp, r7
  401504:	bd80      	pop	{r7, pc}
  401506:	bf00      	nop
  401508:	00401fbd 	.word	0x00401fbd
  40150c:	004020d9 	.word	0x004020d9

00401510 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401510:	b480      	push	{r7}
  401512:	b083      	sub	sp, #12
  401514:	af00      	add	r7, sp, #0
  401516:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401518:	687b      	ldr	r3, [r7, #4]
  40151a:	2b07      	cmp	r3, #7
  40151c:	d825      	bhi.n	40156a <osc_get_rate+0x5a>
  40151e:	a201      	add	r2, pc, #4	; (adr r2, 401524 <osc_get_rate+0x14>)
  401520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401524:	00401545 	.word	0x00401545
  401528:	0040154b 	.word	0x0040154b
  40152c:	00401551 	.word	0x00401551
  401530:	00401557 	.word	0x00401557
  401534:	0040155b 	.word	0x0040155b
  401538:	0040155f 	.word	0x0040155f
  40153c:	00401563 	.word	0x00401563
  401540:	00401567 	.word	0x00401567
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401544:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401548:	e010      	b.n	40156c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40154a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40154e:	e00d      	b.n	40156c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401554:	e00a      	b.n	40156c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401556:	4b08      	ldr	r3, [pc, #32]	; (401578 <osc_get_rate+0x68>)
  401558:	e008      	b.n	40156c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40155a:	4b08      	ldr	r3, [pc, #32]	; (40157c <osc_get_rate+0x6c>)
  40155c:	e006      	b.n	40156c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40155e:	4b08      	ldr	r3, [pc, #32]	; (401580 <osc_get_rate+0x70>)
  401560:	e004      	b.n	40156c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401562:	4b07      	ldr	r3, [pc, #28]	; (401580 <osc_get_rate+0x70>)
  401564:	e002      	b.n	40156c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401566:	4b06      	ldr	r3, [pc, #24]	; (401580 <osc_get_rate+0x70>)
  401568:	e000      	b.n	40156c <osc_get_rate+0x5c>
	}

	return 0;
  40156a:	2300      	movs	r3, #0
}
  40156c:	4618      	mov	r0, r3
  40156e:	370c      	adds	r7, #12
  401570:	46bd      	mov	sp, r7
  401572:	bc80      	pop	{r7}
  401574:	4770      	bx	lr
  401576:	bf00      	nop
  401578:	003d0900 	.word	0x003d0900
  40157c:	007a1200 	.word	0x007a1200
  401580:	00b71b00 	.word	0x00b71b00

00401584 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401584:	b580      	push	{r7, lr}
  401586:	b082      	sub	sp, #8
  401588:	af00      	add	r7, sp, #0
  40158a:	4603      	mov	r3, r0
  40158c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40158e:	bf00      	nop
  401590:	79fb      	ldrb	r3, [r7, #7]
  401592:	4618      	mov	r0, r3
  401594:	4b05      	ldr	r3, [pc, #20]	; (4015ac <osc_wait_ready+0x28>)
  401596:	4798      	blx	r3
  401598:	4603      	mov	r3, r0
  40159a:	f083 0301 	eor.w	r3, r3, #1
  40159e:	b2db      	uxtb	r3, r3
  4015a0:	2b00      	cmp	r3, #0
  4015a2:	d1f5      	bne.n	401590 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4015a4:	bf00      	nop
  4015a6:	3708      	adds	r7, #8
  4015a8:	46bd      	mov	sp, r7
  4015aa:	bd80      	pop	{r7, pc}
  4015ac:	004014a1 	.word	0x004014a1

004015b0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4015b0:	b580      	push	{r7, lr}
  4015b2:	b086      	sub	sp, #24
  4015b4:	af00      	add	r7, sp, #0
  4015b6:	60f8      	str	r0, [r7, #12]
  4015b8:	607a      	str	r2, [r7, #4]
  4015ba:	603b      	str	r3, [r7, #0]
  4015bc:	460b      	mov	r3, r1
  4015be:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4015c0:	7afb      	ldrb	r3, [r7, #11]
  4015c2:	4618      	mov	r0, r3
  4015c4:	4b0d      	ldr	r3, [pc, #52]	; (4015fc <pll_config_init+0x4c>)
  4015c6:	4798      	blx	r3
  4015c8:	4602      	mov	r2, r0
  4015ca:	687b      	ldr	r3, [r7, #4]
  4015cc:	fbb2 f3f3 	udiv	r3, r2, r3
  4015d0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4015d2:	697b      	ldr	r3, [r7, #20]
  4015d4:	683a      	ldr	r2, [r7, #0]
  4015d6:	fb02 f303 	mul.w	r3, r2, r3
  4015da:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4015dc:	683b      	ldr	r3, [r7, #0]
  4015de:	3b01      	subs	r3, #1
  4015e0:	041a      	lsls	r2, r3, #16
  4015e2:	4b07      	ldr	r3, [pc, #28]	; (401600 <pll_config_init+0x50>)
  4015e4:	4013      	ands	r3, r2
  4015e6:	687a      	ldr	r2, [r7, #4]
  4015e8:	b2d2      	uxtb	r2, r2
  4015ea:	4313      	orrs	r3, r2
  4015ec:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4015f0:	68fb      	ldr	r3, [r7, #12]
  4015f2:	601a      	str	r2, [r3, #0]
}
  4015f4:	bf00      	nop
  4015f6:	3718      	adds	r7, #24
  4015f8:	46bd      	mov	sp, r7
  4015fa:	bd80      	pop	{r7, pc}
  4015fc:	00401511 	.word	0x00401511
  401600:	07ff0000 	.word	0x07ff0000

00401604 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401604:	b580      	push	{r7, lr}
  401606:	b082      	sub	sp, #8
  401608:	af00      	add	r7, sp, #0
  40160a:	6078      	str	r0, [r7, #4]
  40160c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40160e:	683b      	ldr	r3, [r7, #0]
  401610:	2b00      	cmp	r3, #0
  401612:	d108      	bne.n	401626 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401614:	4b09      	ldr	r3, [pc, #36]	; (40163c <pll_enable+0x38>)
  401616:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401618:	4a09      	ldr	r2, [pc, #36]	; (401640 <pll_enable+0x3c>)
  40161a:	687b      	ldr	r3, [r7, #4]
  40161c:	681b      	ldr	r3, [r3, #0]
  40161e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401622:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401624:	e005      	b.n	401632 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  401626:	4b07      	ldr	r3, [pc, #28]	; (401644 <pll_enable+0x40>)
  401628:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40162a:	4a05      	ldr	r2, [pc, #20]	; (401640 <pll_enable+0x3c>)
  40162c:	687b      	ldr	r3, [r7, #4]
  40162e:	681b      	ldr	r3, [r3, #0]
  401630:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  401632:	bf00      	nop
  401634:	3708      	adds	r7, #8
  401636:	46bd      	mov	sp, r7
  401638:	bd80      	pop	{r7, pc}
  40163a:	bf00      	nop
  40163c:	004020f1 	.word	0x004020f1
  401640:	400e0400 	.word	0x400e0400
  401644:	00402121 	.word	0x00402121

00401648 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401648:	b580      	push	{r7, lr}
  40164a:	b082      	sub	sp, #8
  40164c:	af00      	add	r7, sp, #0
  40164e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401650:	687b      	ldr	r3, [r7, #4]
  401652:	2b00      	cmp	r3, #0
  401654:	d103      	bne.n	40165e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  401656:	4b05      	ldr	r3, [pc, #20]	; (40166c <pll_is_locked+0x24>)
  401658:	4798      	blx	r3
  40165a:	4603      	mov	r3, r0
  40165c:	e002      	b.n	401664 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40165e:	4b04      	ldr	r3, [pc, #16]	; (401670 <pll_is_locked+0x28>)
  401660:	4798      	blx	r3
  401662:	4603      	mov	r3, r0
	}
}
  401664:	4618      	mov	r0, r3
  401666:	3708      	adds	r7, #8
  401668:	46bd      	mov	sp, r7
  40166a:	bd80      	pop	{r7, pc}
  40166c:	00402109 	.word	0x00402109
  401670:	00402139 	.word	0x00402139

00401674 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401674:	b580      	push	{r7, lr}
  401676:	b082      	sub	sp, #8
  401678:	af00      	add	r7, sp, #0
  40167a:	4603      	mov	r3, r0
  40167c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40167e:	79fb      	ldrb	r3, [r7, #7]
  401680:	3b03      	subs	r3, #3
  401682:	2b04      	cmp	r3, #4
  401684:	d808      	bhi.n	401698 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401686:	79fb      	ldrb	r3, [r7, #7]
  401688:	4618      	mov	r0, r3
  40168a:	4b06      	ldr	r3, [pc, #24]	; (4016a4 <pll_enable_source+0x30>)
  40168c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40168e:	79fb      	ldrb	r3, [r7, #7]
  401690:	4618      	mov	r0, r3
  401692:	4b05      	ldr	r3, [pc, #20]	; (4016a8 <pll_enable_source+0x34>)
  401694:	4798      	blx	r3
		break;
  401696:	e000      	b.n	40169a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401698:	bf00      	nop
	}
}
  40169a:	bf00      	nop
  40169c:	3708      	adds	r7, #8
  40169e:	46bd      	mov	sp, r7
  4016a0:	bd80      	pop	{r7, pc}
  4016a2:	bf00      	nop
  4016a4:	00401419 	.word	0x00401419
  4016a8:	00401585 	.word	0x00401585

004016ac <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4016ac:	b580      	push	{r7, lr}
  4016ae:	b082      	sub	sp, #8
  4016b0:	af00      	add	r7, sp, #0
  4016b2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4016b4:	bf00      	nop
  4016b6:	6878      	ldr	r0, [r7, #4]
  4016b8:	4b04      	ldr	r3, [pc, #16]	; (4016cc <pll_wait_for_lock+0x20>)
  4016ba:	4798      	blx	r3
  4016bc:	4603      	mov	r3, r0
  4016be:	2b00      	cmp	r3, #0
  4016c0:	d0f9      	beq.n	4016b6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4016c2:	2300      	movs	r3, #0
}
  4016c4:	4618      	mov	r0, r3
  4016c6:	3708      	adds	r7, #8
  4016c8:	46bd      	mov	sp, r7
  4016ca:	bd80      	pop	{r7, pc}
  4016cc:	00401649 	.word	0x00401649

004016d0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4016d0:	b580      	push	{r7, lr}
  4016d2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4016d4:	2006      	movs	r0, #6
  4016d6:	4b04      	ldr	r3, [pc, #16]	; (4016e8 <sysclk_get_main_hz+0x18>)
  4016d8:	4798      	blx	r3
  4016da:	4602      	mov	r2, r0
  4016dc:	4613      	mov	r3, r2
  4016de:	009b      	lsls	r3, r3, #2
  4016e0:	4413      	add	r3, r2
  4016e2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4016e4:	4618      	mov	r0, r3
  4016e6:	bd80      	pop	{r7, pc}
  4016e8:	00401511 	.word	0x00401511

004016ec <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4016ec:	b580      	push	{r7, lr}
  4016ee:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4016f0:	4b02      	ldr	r3, [pc, #8]	; (4016fc <sysclk_get_cpu_hz+0x10>)
  4016f2:	4798      	blx	r3
  4016f4:	4603      	mov	r3, r0
  4016f6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4016f8:	4618      	mov	r0, r3
  4016fa:	bd80      	pop	{r7, pc}
  4016fc:	004016d1 	.word	0x004016d1

00401700 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401700:	b590      	push	{r4, r7, lr}
  401702:	b083      	sub	sp, #12
  401704:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401706:	4811      	ldr	r0, [pc, #68]	; (40174c <sysclk_init+0x4c>)
  401708:	4b11      	ldr	r3, [pc, #68]	; (401750 <sysclk_init+0x50>)
  40170a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40170c:	2006      	movs	r0, #6
  40170e:	4b11      	ldr	r3, [pc, #68]	; (401754 <sysclk_init+0x54>)
  401710:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401712:	1d38      	adds	r0, r7, #4
  401714:	2314      	movs	r3, #20
  401716:	2201      	movs	r2, #1
  401718:	2106      	movs	r1, #6
  40171a:	4c0f      	ldr	r4, [pc, #60]	; (401758 <sysclk_init+0x58>)
  40171c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40171e:	1d3b      	adds	r3, r7, #4
  401720:	2100      	movs	r1, #0
  401722:	4618      	mov	r0, r3
  401724:	4b0d      	ldr	r3, [pc, #52]	; (40175c <sysclk_init+0x5c>)
  401726:	4798      	blx	r3
		pll_wait_for_lock(0);
  401728:	2000      	movs	r0, #0
  40172a:	4b0d      	ldr	r3, [pc, #52]	; (401760 <sysclk_init+0x60>)
  40172c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40172e:	2010      	movs	r0, #16
  401730:	4b0c      	ldr	r3, [pc, #48]	; (401764 <sysclk_init+0x64>)
  401732:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401734:	4b0c      	ldr	r3, [pc, #48]	; (401768 <sysclk_init+0x68>)
  401736:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401738:	4b0c      	ldr	r3, [pc, #48]	; (40176c <sysclk_init+0x6c>)
  40173a:	4798      	blx	r3
  40173c:	4603      	mov	r3, r0
  40173e:	4618      	mov	r0, r3
  401740:	4b03      	ldr	r3, [pc, #12]	; (401750 <sysclk_init+0x50>)
  401742:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401744:	bf00      	nop
  401746:	370c      	adds	r7, #12
  401748:	46bd      	mov	sp, r7
  40174a:	bd90      	pop	{r4, r7, pc}
  40174c:	07270e00 	.word	0x07270e00
  401750:	004025d9 	.word	0x004025d9
  401754:	00401675 	.word	0x00401675
  401758:	004015b1 	.word	0x004015b1
  40175c:	00401605 	.word	0x00401605
  401760:	004016ad 	.word	0x004016ad
  401764:	00401f05 	.word	0x00401f05
  401768:	0040243d 	.word	0x0040243d
  40176c:	004016ed 	.word	0x004016ed

00401770 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  401770:	b480      	push	{r7}
  401772:	b085      	sub	sp, #20
  401774:	af00      	add	r7, sp, #0
  401776:	60f8      	str	r0, [r7, #12]
  401778:	60b9      	str	r1, [r7, #8]
  40177a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  40177c:	68bb      	ldr	r3, [r7, #8]
  40177e:	2b00      	cmp	r3, #0
  401780:	d007      	beq.n	401792 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  401782:	68bb      	ldr	r3, [r7, #8]
  401784:	681a      	ldr	r2, [r3, #0]
  401786:	68fb      	ldr	r3, [r7, #12]
  401788:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  40178a:	68bb      	ldr	r3, [r7, #8]
  40178c:	685a      	ldr	r2, [r3, #4]
  40178e:	68fb      	ldr	r3, [r7, #12]
  401790:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  401792:	687b      	ldr	r3, [r7, #4]
  401794:	2b00      	cmp	r3, #0
  401796:	d007      	beq.n	4017a8 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  401798:	687b      	ldr	r3, [r7, #4]
  40179a:	681a      	ldr	r2, [r3, #0]
  40179c:	68fb      	ldr	r3, [r7, #12]
  40179e:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4017a0:	687b      	ldr	r3, [r7, #4]
  4017a2:	685a      	ldr	r2, [r3, #4]
  4017a4:	68fb      	ldr	r3, [r7, #12]
  4017a6:	61da      	str	r2, [r3, #28]
	}
}
  4017a8:	bf00      	nop
  4017aa:	3714      	adds	r7, #20
  4017ac:	46bd      	mov	sp, r7
  4017ae:	bc80      	pop	{r7}
  4017b0:	4770      	bx	lr
  4017b2:	bf00      	nop

004017b4 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4017b4:	b480      	push	{r7}
  4017b6:	b085      	sub	sp, #20
  4017b8:	af00      	add	r7, sp, #0
  4017ba:	60f8      	str	r0, [r7, #12]
  4017bc:	60b9      	str	r1, [r7, #8]
  4017be:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4017c0:	68bb      	ldr	r3, [r7, #8]
  4017c2:	2b00      	cmp	r3, #0
  4017c4:	d007      	beq.n	4017d6 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  4017c6:	68bb      	ldr	r3, [r7, #8]
  4017c8:	681a      	ldr	r2, [r3, #0]
  4017ca:	68fb      	ldr	r3, [r7, #12]
  4017cc:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  4017ce:	68bb      	ldr	r3, [r7, #8]
  4017d0:	685a      	ldr	r2, [r3, #4]
  4017d2:	68fb      	ldr	r3, [r7, #12]
  4017d4:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  4017d6:	687b      	ldr	r3, [r7, #4]
  4017d8:	2b00      	cmp	r3, #0
  4017da:	d007      	beq.n	4017ec <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  4017dc:	687b      	ldr	r3, [r7, #4]
  4017de:	681a      	ldr	r2, [r3, #0]
  4017e0:	68fb      	ldr	r3, [r7, #12]
  4017e2:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  4017e4:	687b      	ldr	r3, [r7, #4]
  4017e6:	685a      	ldr	r2, [r3, #4]
  4017e8:	68fb      	ldr	r3, [r7, #12]
  4017ea:	615a      	str	r2, [r3, #20]
	}
}
  4017ec:	bf00      	nop
  4017ee:	3714      	adds	r7, #20
  4017f0:	46bd      	mov	sp, r7
  4017f2:	bc80      	pop	{r7}
  4017f4:	4770      	bx	lr
  4017f6:	bf00      	nop

004017f8 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  4017f8:	b480      	push	{r7}
  4017fa:	b083      	sub	sp, #12
  4017fc:	af00      	add	r7, sp, #0
  4017fe:	6078      	str	r0, [r7, #4]
  401800:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  401802:	683a      	ldr	r2, [r7, #0]
  401804:	f240 1301 	movw	r3, #257	; 0x101
  401808:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40180a:	687a      	ldr	r2, [r7, #4]
  40180c:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  40180e:	bf00      	nop
  401810:	370c      	adds	r7, #12
  401812:	46bd      	mov	sp, r7
  401814:	bc80      	pop	{r7}
  401816:	4770      	bx	lr

00401818 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  401818:	b480      	push	{r7}
  40181a:	b083      	sub	sp, #12
  40181c:	af00      	add	r7, sp, #0
  40181e:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  401820:	687b      	ldr	r3, [r7, #4]
  401822:	685b      	ldr	r3, [r3, #4]
}
  401824:	4618      	mov	r0, r3
  401826:	370c      	adds	r7, #12
  401828:	46bd      	mov	sp, r7
  40182a:	bc80      	pop	{r7}
  40182c:	4770      	bx	lr
  40182e:	bf00      	nop

00401830 <pdc_read_rx_next_counter>:
 *
 * \return Receive Next Counter Register value.
 */
uint32_t pdc_read_rx_next_counter(
		Pdc *p_pdc)
{
  401830:	b480      	push	{r7}
  401832:	b083      	sub	sp, #12
  401834:	af00      	add	r7, sp, #0
  401836:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RNCR;
  401838:	687b      	ldr	r3, [r7, #4]
  40183a:	695b      	ldr	r3, [r3, #20]
}
  40183c:	4618      	mov	r0, r3
  40183e:	370c      	adds	r7, #12
  401840:	46bd      	mov	sp, r7
  401842:	bc80      	pop	{r7}
  401844:	4770      	bx	lr
  401846:	bf00      	nop

00401848 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401848:	b480      	push	{r7}
  40184a:	b085      	sub	sp, #20
  40184c:	af00      	add	r7, sp, #0
  40184e:	60f8      	str	r0, [r7, #12]
  401850:	60b9      	str	r1, [r7, #8]
  401852:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401854:	687b      	ldr	r3, [r7, #4]
  401856:	2b00      	cmp	r3, #0
  401858:	d003      	beq.n	401862 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40185a:	68fb      	ldr	r3, [r7, #12]
  40185c:	68ba      	ldr	r2, [r7, #8]
  40185e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401860:	e002      	b.n	401868 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401862:	68fb      	ldr	r3, [r7, #12]
  401864:	68ba      	ldr	r2, [r7, #8]
  401866:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  401868:	bf00      	nop
  40186a:	3714      	adds	r7, #20
  40186c:	46bd      	mov	sp, r7
  40186e:	bc80      	pop	{r7}
  401870:	4770      	bx	lr
  401872:	bf00      	nop

00401874 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401874:	b480      	push	{r7}
  401876:	b085      	sub	sp, #20
  401878:	af00      	add	r7, sp, #0
  40187a:	60f8      	str	r0, [r7, #12]
  40187c:	60b9      	str	r1, [r7, #8]
  40187e:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401880:	68fb      	ldr	r3, [r7, #12]
  401882:	68ba      	ldr	r2, [r7, #8]
  401884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401888:	687b      	ldr	r3, [r7, #4]
  40188a:	005b      	lsls	r3, r3, #1
  40188c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401890:	fbb2 f3f3 	udiv	r3, r2, r3
  401894:	3b01      	subs	r3, #1
  401896:	f3c3 020d 	ubfx	r2, r3, #0, #14
  40189a:	68fb      	ldr	r3, [r7, #12]
  40189c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  4018a0:	bf00      	nop
  4018a2:	3714      	adds	r7, #20
  4018a4:	46bd      	mov	sp, r7
  4018a6:	bc80      	pop	{r7}
  4018a8:	4770      	bx	lr
  4018aa:	bf00      	nop

004018ac <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4018ac:	b480      	push	{r7}
  4018ae:	b087      	sub	sp, #28
  4018b0:	af00      	add	r7, sp, #0
  4018b2:	60f8      	str	r0, [r7, #12]
  4018b4:	60b9      	str	r1, [r7, #8]
  4018b6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4018b8:	68fb      	ldr	r3, [r7, #12]
  4018ba:	687a      	ldr	r2, [r7, #4]
  4018bc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4018be:	68bb      	ldr	r3, [r7, #8]
  4018c0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4018c4:	d04a      	beq.n	40195c <pio_set_peripheral+0xb0>
  4018c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4018ca:	d808      	bhi.n	4018de <pio_set_peripheral+0x32>
  4018cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4018d0:	d016      	beq.n	401900 <pio_set_peripheral+0x54>
  4018d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4018d6:	d02c      	beq.n	401932 <pio_set_peripheral+0x86>
  4018d8:	2b00      	cmp	r3, #0
  4018da:	d069      	beq.n	4019b0 <pio_set_peripheral+0x104>
  4018dc:	e064      	b.n	4019a8 <pio_set_peripheral+0xfc>
  4018de:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4018e2:	d065      	beq.n	4019b0 <pio_set_peripheral+0x104>
  4018e4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4018e8:	d803      	bhi.n	4018f2 <pio_set_peripheral+0x46>
  4018ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4018ee:	d04a      	beq.n	401986 <pio_set_peripheral+0xda>
  4018f0:	e05a      	b.n	4019a8 <pio_set_peripheral+0xfc>
  4018f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4018f6:	d05b      	beq.n	4019b0 <pio_set_peripheral+0x104>
  4018f8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4018fc:	d058      	beq.n	4019b0 <pio_set_peripheral+0x104>
  4018fe:	e053      	b.n	4019a8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401900:	68fb      	ldr	r3, [r7, #12]
  401902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401904:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401906:	68fb      	ldr	r3, [r7, #12]
  401908:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40190a:	687b      	ldr	r3, [r7, #4]
  40190c:	43d9      	mvns	r1, r3
  40190e:	697b      	ldr	r3, [r7, #20]
  401910:	400b      	ands	r3, r1
  401912:	401a      	ands	r2, r3
  401914:	68fb      	ldr	r3, [r7, #12]
  401916:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401918:	68fb      	ldr	r3, [r7, #12]
  40191a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40191c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40191e:	68fb      	ldr	r3, [r7, #12]
  401920:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401922:	687b      	ldr	r3, [r7, #4]
  401924:	43d9      	mvns	r1, r3
  401926:	697b      	ldr	r3, [r7, #20]
  401928:	400b      	ands	r3, r1
  40192a:	401a      	ands	r2, r3
  40192c:	68fb      	ldr	r3, [r7, #12]
  40192e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401930:	e03a      	b.n	4019a8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401932:	68fb      	ldr	r3, [r7, #12]
  401934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401936:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401938:	687a      	ldr	r2, [r7, #4]
  40193a:	697b      	ldr	r3, [r7, #20]
  40193c:	431a      	orrs	r2, r3
  40193e:	68fb      	ldr	r3, [r7, #12]
  401940:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401942:	68fb      	ldr	r3, [r7, #12]
  401944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401946:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401948:	68fb      	ldr	r3, [r7, #12]
  40194a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40194c:	687b      	ldr	r3, [r7, #4]
  40194e:	43d9      	mvns	r1, r3
  401950:	697b      	ldr	r3, [r7, #20]
  401952:	400b      	ands	r3, r1
  401954:	401a      	ands	r2, r3
  401956:	68fb      	ldr	r3, [r7, #12]
  401958:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40195a:	e025      	b.n	4019a8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40195c:	68fb      	ldr	r3, [r7, #12]
  40195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401960:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401962:	68fb      	ldr	r3, [r7, #12]
  401964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401966:	687b      	ldr	r3, [r7, #4]
  401968:	43d9      	mvns	r1, r3
  40196a:	697b      	ldr	r3, [r7, #20]
  40196c:	400b      	ands	r3, r1
  40196e:	401a      	ands	r2, r3
  401970:	68fb      	ldr	r3, [r7, #12]
  401972:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401974:	68fb      	ldr	r3, [r7, #12]
  401976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401978:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40197a:	687a      	ldr	r2, [r7, #4]
  40197c:	697b      	ldr	r3, [r7, #20]
  40197e:	431a      	orrs	r2, r3
  401980:	68fb      	ldr	r3, [r7, #12]
  401982:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401984:	e010      	b.n	4019a8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401986:	68fb      	ldr	r3, [r7, #12]
  401988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40198a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40198c:	687a      	ldr	r2, [r7, #4]
  40198e:	697b      	ldr	r3, [r7, #20]
  401990:	431a      	orrs	r2, r3
  401992:	68fb      	ldr	r3, [r7, #12]
  401994:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401996:	68fb      	ldr	r3, [r7, #12]
  401998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40199a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40199c:	687a      	ldr	r2, [r7, #4]
  40199e:	697b      	ldr	r3, [r7, #20]
  4019a0:	431a      	orrs	r2, r3
  4019a2:	68fb      	ldr	r3, [r7, #12]
  4019a4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4019a6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4019a8:	68fb      	ldr	r3, [r7, #12]
  4019aa:	687a      	ldr	r2, [r7, #4]
  4019ac:	605a      	str	r2, [r3, #4]
  4019ae:	e000      	b.n	4019b2 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  4019b0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  4019b2:	371c      	adds	r7, #28
  4019b4:	46bd      	mov	sp, r7
  4019b6:	bc80      	pop	{r7}
  4019b8:	4770      	bx	lr
  4019ba:	bf00      	nop

004019bc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4019bc:	b580      	push	{r7, lr}
  4019be:	b084      	sub	sp, #16
  4019c0:	af00      	add	r7, sp, #0
  4019c2:	60f8      	str	r0, [r7, #12]
  4019c4:	60b9      	str	r1, [r7, #8]
  4019c6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4019c8:	68b9      	ldr	r1, [r7, #8]
  4019ca:	68f8      	ldr	r0, [r7, #12]
  4019cc:	4b19      	ldr	r3, [pc, #100]	; (401a34 <pio_set_input+0x78>)
  4019ce:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4019d0:	687b      	ldr	r3, [r7, #4]
  4019d2:	f003 0301 	and.w	r3, r3, #1
  4019d6:	461a      	mov	r2, r3
  4019d8:	68b9      	ldr	r1, [r7, #8]
  4019da:	68f8      	ldr	r0, [r7, #12]
  4019dc:	4b16      	ldr	r3, [pc, #88]	; (401a38 <pio_set_input+0x7c>)
  4019de:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4019e0:	687b      	ldr	r3, [r7, #4]
  4019e2:	f003 030a 	and.w	r3, r3, #10
  4019e6:	2b00      	cmp	r3, #0
  4019e8:	d003      	beq.n	4019f2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4019ea:	68fb      	ldr	r3, [r7, #12]
  4019ec:	68ba      	ldr	r2, [r7, #8]
  4019ee:	621a      	str	r2, [r3, #32]
  4019f0:	e002      	b.n	4019f8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4019f2:	68fb      	ldr	r3, [r7, #12]
  4019f4:	68ba      	ldr	r2, [r7, #8]
  4019f6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4019f8:	687b      	ldr	r3, [r7, #4]
  4019fa:	f003 0302 	and.w	r3, r3, #2
  4019fe:	2b00      	cmp	r3, #0
  401a00:	d004      	beq.n	401a0c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401a02:	68fb      	ldr	r3, [r7, #12]
  401a04:	68ba      	ldr	r2, [r7, #8]
  401a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401a0a:	e008      	b.n	401a1e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401a0c:	687b      	ldr	r3, [r7, #4]
  401a0e:	f003 0308 	and.w	r3, r3, #8
  401a12:	2b00      	cmp	r3, #0
  401a14:	d003      	beq.n	401a1e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401a16:	68fb      	ldr	r3, [r7, #12]
  401a18:	68ba      	ldr	r2, [r7, #8]
  401a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401a1e:	68fb      	ldr	r3, [r7, #12]
  401a20:	68ba      	ldr	r2, [r7, #8]
  401a22:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401a24:	68fb      	ldr	r3, [r7, #12]
  401a26:	68ba      	ldr	r2, [r7, #8]
  401a28:	601a      	str	r2, [r3, #0]
}
  401a2a:	bf00      	nop
  401a2c:	3710      	adds	r7, #16
  401a2e:	46bd      	mov	sp, r7
  401a30:	bd80      	pop	{r7, pc}
  401a32:	bf00      	nop
  401a34:	00401b29 	.word	0x00401b29
  401a38:	00401849 	.word	0x00401849

00401a3c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401a3c:	b580      	push	{r7, lr}
  401a3e:	b084      	sub	sp, #16
  401a40:	af00      	add	r7, sp, #0
  401a42:	60f8      	str	r0, [r7, #12]
  401a44:	60b9      	str	r1, [r7, #8]
  401a46:	607a      	str	r2, [r7, #4]
  401a48:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401a4a:	68b9      	ldr	r1, [r7, #8]
  401a4c:	68f8      	ldr	r0, [r7, #12]
  401a4e:	4b12      	ldr	r3, [pc, #72]	; (401a98 <pio_set_output+0x5c>)
  401a50:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401a52:	69ba      	ldr	r2, [r7, #24]
  401a54:	68b9      	ldr	r1, [r7, #8]
  401a56:	68f8      	ldr	r0, [r7, #12]
  401a58:	4b10      	ldr	r3, [pc, #64]	; (401a9c <pio_set_output+0x60>)
  401a5a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401a5c:	683b      	ldr	r3, [r7, #0]
  401a5e:	2b00      	cmp	r3, #0
  401a60:	d003      	beq.n	401a6a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401a62:	68fb      	ldr	r3, [r7, #12]
  401a64:	68ba      	ldr	r2, [r7, #8]
  401a66:	651a      	str	r2, [r3, #80]	; 0x50
  401a68:	e002      	b.n	401a70 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401a6a:	68fb      	ldr	r3, [r7, #12]
  401a6c:	68ba      	ldr	r2, [r7, #8]
  401a6e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401a70:	687b      	ldr	r3, [r7, #4]
  401a72:	2b00      	cmp	r3, #0
  401a74:	d003      	beq.n	401a7e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401a76:	68fb      	ldr	r3, [r7, #12]
  401a78:	68ba      	ldr	r2, [r7, #8]
  401a7a:	631a      	str	r2, [r3, #48]	; 0x30
  401a7c:	e002      	b.n	401a84 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401a7e:	68fb      	ldr	r3, [r7, #12]
  401a80:	68ba      	ldr	r2, [r7, #8]
  401a82:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401a84:	68fb      	ldr	r3, [r7, #12]
  401a86:	68ba      	ldr	r2, [r7, #8]
  401a88:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401a8a:	68fb      	ldr	r3, [r7, #12]
  401a8c:	68ba      	ldr	r2, [r7, #8]
  401a8e:	601a      	str	r2, [r3, #0]
}
  401a90:	bf00      	nop
  401a92:	3710      	adds	r7, #16
  401a94:	46bd      	mov	sp, r7
  401a96:	bd80      	pop	{r7, pc}
  401a98:	00401b29 	.word	0x00401b29
  401a9c:	00401849 	.word	0x00401849

00401aa0 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401aa0:	b480      	push	{r7}
  401aa2:	b085      	sub	sp, #20
  401aa4:	af00      	add	r7, sp, #0
  401aa6:	60f8      	str	r0, [r7, #12]
  401aa8:	60b9      	str	r1, [r7, #8]
  401aaa:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401aac:	687b      	ldr	r3, [r7, #4]
  401aae:	f003 0310 	and.w	r3, r3, #16
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d020      	beq.n	401af8 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401ab6:	68fb      	ldr	r3, [r7, #12]
  401ab8:	68ba      	ldr	r2, [r7, #8]
  401aba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401abe:	687b      	ldr	r3, [r7, #4]
  401ac0:	f003 0320 	and.w	r3, r3, #32
  401ac4:	2b00      	cmp	r3, #0
  401ac6:	d004      	beq.n	401ad2 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401ac8:	68fb      	ldr	r3, [r7, #12]
  401aca:	68ba      	ldr	r2, [r7, #8]
  401acc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401ad0:	e003      	b.n	401ada <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401ad2:	68fb      	ldr	r3, [r7, #12]
  401ad4:	68ba      	ldr	r2, [r7, #8]
  401ad6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401ada:	687b      	ldr	r3, [r7, #4]
  401adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401ae0:	2b00      	cmp	r3, #0
  401ae2:	d004      	beq.n	401aee <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401ae4:	68fb      	ldr	r3, [r7, #12]
  401ae6:	68ba      	ldr	r2, [r7, #8]
  401ae8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401aec:	e008      	b.n	401b00 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  401aee:	68fb      	ldr	r3, [r7, #12]
  401af0:	68ba      	ldr	r2, [r7, #8]
  401af2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401af6:	e003      	b.n	401b00 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  401af8:	68fb      	ldr	r3, [r7, #12]
  401afa:	68ba      	ldr	r2, [r7, #8]
  401afc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  401b00:	bf00      	nop
  401b02:	3714      	adds	r7, #20
  401b04:	46bd      	mov	sp, r7
  401b06:	bc80      	pop	{r7}
  401b08:	4770      	bx	lr
  401b0a:	bf00      	nop

00401b0c <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401b0c:	b480      	push	{r7}
  401b0e:	b083      	sub	sp, #12
  401b10:	af00      	add	r7, sp, #0
  401b12:	6078      	str	r0, [r7, #4]
  401b14:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401b16:	687b      	ldr	r3, [r7, #4]
  401b18:	683a      	ldr	r2, [r7, #0]
  401b1a:	641a      	str	r2, [r3, #64]	; 0x40
}
  401b1c:	bf00      	nop
  401b1e:	370c      	adds	r7, #12
  401b20:	46bd      	mov	sp, r7
  401b22:	bc80      	pop	{r7}
  401b24:	4770      	bx	lr
  401b26:	bf00      	nop

00401b28 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401b28:	b480      	push	{r7}
  401b2a:	b083      	sub	sp, #12
  401b2c:	af00      	add	r7, sp, #0
  401b2e:	6078      	str	r0, [r7, #4]
  401b30:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401b32:	687b      	ldr	r3, [r7, #4]
  401b34:	683a      	ldr	r2, [r7, #0]
  401b36:	645a      	str	r2, [r3, #68]	; 0x44
}
  401b38:	bf00      	nop
  401b3a:	370c      	adds	r7, #12
  401b3c:	46bd      	mov	sp, r7
  401b3e:	bc80      	pop	{r7}
  401b40:	4770      	bx	lr
  401b42:	bf00      	nop

00401b44 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401b44:	b480      	push	{r7}
  401b46:	b083      	sub	sp, #12
  401b48:	af00      	add	r7, sp, #0
  401b4a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401b4c:	687b      	ldr	r3, [r7, #4]
  401b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401b50:	4618      	mov	r0, r3
  401b52:	370c      	adds	r7, #12
  401b54:	46bd      	mov	sp, r7
  401b56:	bc80      	pop	{r7}
  401b58:	4770      	bx	lr
  401b5a:	bf00      	nop

00401b5c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401b5c:	b480      	push	{r7}
  401b5e:	b083      	sub	sp, #12
  401b60:	af00      	add	r7, sp, #0
  401b62:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401b64:	687b      	ldr	r3, [r7, #4]
  401b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401b68:	4618      	mov	r0, r3
  401b6a:	370c      	adds	r7, #12
  401b6c:	46bd      	mov	sp, r7
  401b6e:	bc80      	pop	{r7}
  401b70:	4770      	bx	lr
  401b72:	bf00      	nop

00401b74 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
  401b74:	b580      	push	{r7, lr}
  401b76:	b084      	sub	sp, #16
  401b78:	af00      	add	r7, sp, #0
  401b7a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401b7c:	6878      	ldr	r0, [r7, #4]
  401b7e:	4b08      	ldr	r3, [pc, #32]	; (401ba0 <pio_get_pin_value+0x2c>)
  401b80:	4798      	blx	r3
  401b82:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  401b84:	68fb      	ldr	r3, [r7, #12]
  401b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401b88:	687b      	ldr	r3, [r7, #4]
  401b8a:	f003 031f 	and.w	r3, r3, #31
  401b8e:	fa22 f303 	lsr.w	r3, r2, r3
  401b92:	f003 0301 	and.w	r3, r3, #1
}
  401b96:	4618      	mov	r0, r3
  401b98:	3710      	adds	r7, #16
  401b9a:	46bd      	mov	sp, r7
  401b9c:	bd80      	pop	{r7, pc}
  401b9e:	bf00      	nop
  401ba0:	00401ee1 	.word	0x00401ee1

00401ba4 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  401ba4:	b580      	push	{r7, lr}
  401ba6:	b084      	sub	sp, #16
  401ba8:	af00      	add	r7, sp, #0
  401baa:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401bac:	6878      	ldr	r0, [r7, #4]
  401bae:	4b08      	ldr	r3, [pc, #32]	; (401bd0 <pio_set_pin_high+0x2c>)
  401bb0:	4798      	blx	r3
  401bb2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  401bb4:	687b      	ldr	r3, [r7, #4]
  401bb6:	f003 031f 	and.w	r3, r3, #31
  401bba:	2201      	movs	r2, #1
  401bbc:	fa02 f303 	lsl.w	r3, r2, r3
  401bc0:	461a      	mov	r2, r3
  401bc2:	68fb      	ldr	r3, [r7, #12]
  401bc4:	631a      	str	r2, [r3, #48]	; 0x30
}
  401bc6:	bf00      	nop
  401bc8:	3710      	adds	r7, #16
  401bca:	46bd      	mov	sp, r7
  401bcc:	bd80      	pop	{r7, pc}
  401bce:	bf00      	nop
  401bd0:	00401ee1 	.word	0x00401ee1

00401bd4 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  401bd4:	b580      	push	{r7, lr}
  401bd6:	b084      	sub	sp, #16
  401bd8:	af00      	add	r7, sp, #0
  401bda:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401bdc:	6878      	ldr	r0, [r7, #4]
  401bde:	4b08      	ldr	r3, [pc, #32]	; (401c00 <pio_set_pin_low+0x2c>)
  401be0:	4798      	blx	r3
  401be2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401be4:	687b      	ldr	r3, [r7, #4]
  401be6:	f003 031f 	and.w	r3, r3, #31
  401bea:	2201      	movs	r2, #1
  401bec:	fa02 f303 	lsl.w	r3, r2, r3
  401bf0:	461a      	mov	r2, r3
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	635a      	str	r2, [r3, #52]	; 0x34
}
  401bf6:	bf00      	nop
  401bf8:	3710      	adds	r7, #16
  401bfa:	46bd      	mov	sp, r7
  401bfc:	bd80      	pop	{r7, pc}
  401bfe:	bf00      	nop
  401c00:	00401ee1 	.word	0x00401ee1

00401c04 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401c04:	b590      	push	{r4, r7, lr}
  401c06:	b087      	sub	sp, #28
  401c08:	af02      	add	r7, sp, #8
  401c0a:	6078      	str	r0, [r7, #4]
  401c0c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401c0e:	6878      	ldr	r0, [r7, #4]
  401c10:	4b63      	ldr	r3, [pc, #396]	; (401da0 <pio_configure_pin+0x19c>)
  401c12:	4798      	blx	r3
  401c14:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401c16:	683b      	ldr	r3, [r7, #0]
  401c18:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401c20:	d067      	beq.n	401cf2 <pio_configure_pin+0xee>
  401c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401c26:	d809      	bhi.n	401c3c <pio_configure_pin+0x38>
  401c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401c2c:	d02b      	beq.n	401c86 <pio_configure_pin+0x82>
  401c2e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401c32:	d043      	beq.n	401cbc <pio_configure_pin+0xb8>
  401c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401c38:	d00a      	beq.n	401c50 <pio_configure_pin+0x4c>
  401c3a:	e0a9      	b.n	401d90 <pio_configure_pin+0x18c>
  401c3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401c40:	d07e      	beq.n	401d40 <pio_configure_pin+0x13c>
  401c42:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401c46:	d07b      	beq.n	401d40 <pio_configure_pin+0x13c>
  401c48:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401c4c:	d06c      	beq.n	401d28 <pio_configure_pin+0x124>
  401c4e:	e09f      	b.n	401d90 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401c50:	687b      	ldr	r3, [r7, #4]
  401c52:	f003 031f 	and.w	r3, r3, #31
  401c56:	2201      	movs	r2, #1
  401c58:	fa02 f303 	lsl.w	r3, r2, r3
  401c5c:	461a      	mov	r2, r3
  401c5e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c62:	68f8      	ldr	r0, [r7, #12]
  401c64:	4b4f      	ldr	r3, [pc, #316]	; (401da4 <pio_configure_pin+0x1a0>)
  401c66:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401c68:	687b      	ldr	r3, [r7, #4]
  401c6a:	f003 031f 	and.w	r3, r3, #31
  401c6e:	2201      	movs	r2, #1
  401c70:	fa02 f303 	lsl.w	r3, r2, r3
  401c74:	4619      	mov	r1, r3
  401c76:	683b      	ldr	r3, [r7, #0]
  401c78:	f003 0301 	and.w	r3, r3, #1
  401c7c:	461a      	mov	r2, r3
  401c7e:	68f8      	ldr	r0, [r7, #12]
  401c80:	4b49      	ldr	r3, [pc, #292]	; (401da8 <pio_configure_pin+0x1a4>)
  401c82:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401c84:	e086      	b.n	401d94 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401c86:	687b      	ldr	r3, [r7, #4]
  401c88:	f003 031f 	and.w	r3, r3, #31
  401c8c:	2201      	movs	r2, #1
  401c8e:	fa02 f303 	lsl.w	r3, r2, r3
  401c92:	461a      	mov	r2, r3
  401c94:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401c98:	68f8      	ldr	r0, [r7, #12]
  401c9a:	4b42      	ldr	r3, [pc, #264]	; (401da4 <pio_configure_pin+0x1a0>)
  401c9c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401c9e:	687b      	ldr	r3, [r7, #4]
  401ca0:	f003 031f 	and.w	r3, r3, #31
  401ca4:	2201      	movs	r2, #1
  401ca6:	fa02 f303 	lsl.w	r3, r2, r3
  401caa:	4619      	mov	r1, r3
  401cac:	683b      	ldr	r3, [r7, #0]
  401cae:	f003 0301 	and.w	r3, r3, #1
  401cb2:	461a      	mov	r2, r3
  401cb4:	68f8      	ldr	r0, [r7, #12]
  401cb6:	4b3c      	ldr	r3, [pc, #240]	; (401da8 <pio_configure_pin+0x1a4>)
  401cb8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401cba:	e06b      	b.n	401d94 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401cbc:	687b      	ldr	r3, [r7, #4]
  401cbe:	f003 031f 	and.w	r3, r3, #31
  401cc2:	2201      	movs	r2, #1
  401cc4:	fa02 f303 	lsl.w	r3, r2, r3
  401cc8:	461a      	mov	r2, r3
  401cca:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401cce:	68f8      	ldr	r0, [r7, #12]
  401cd0:	4b34      	ldr	r3, [pc, #208]	; (401da4 <pio_configure_pin+0x1a0>)
  401cd2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401cd4:	687b      	ldr	r3, [r7, #4]
  401cd6:	f003 031f 	and.w	r3, r3, #31
  401cda:	2201      	movs	r2, #1
  401cdc:	fa02 f303 	lsl.w	r3, r2, r3
  401ce0:	4619      	mov	r1, r3
  401ce2:	683b      	ldr	r3, [r7, #0]
  401ce4:	f003 0301 	and.w	r3, r3, #1
  401ce8:	461a      	mov	r2, r3
  401cea:	68f8      	ldr	r0, [r7, #12]
  401cec:	4b2e      	ldr	r3, [pc, #184]	; (401da8 <pio_configure_pin+0x1a4>)
  401cee:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401cf0:	e050      	b.n	401d94 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401cf2:	687b      	ldr	r3, [r7, #4]
  401cf4:	f003 031f 	and.w	r3, r3, #31
  401cf8:	2201      	movs	r2, #1
  401cfa:	fa02 f303 	lsl.w	r3, r2, r3
  401cfe:	461a      	mov	r2, r3
  401d00:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401d04:	68f8      	ldr	r0, [r7, #12]
  401d06:	4b27      	ldr	r3, [pc, #156]	; (401da4 <pio_configure_pin+0x1a0>)
  401d08:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401d0a:	687b      	ldr	r3, [r7, #4]
  401d0c:	f003 031f 	and.w	r3, r3, #31
  401d10:	2201      	movs	r2, #1
  401d12:	fa02 f303 	lsl.w	r3, r2, r3
  401d16:	4619      	mov	r1, r3
  401d18:	683b      	ldr	r3, [r7, #0]
  401d1a:	f003 0301 	and.w	r3, r3, #1
  401d1e:	461a      	mov	r2, r3
  401d20:	68f8      	ldr	r0, [r7, #12]
  401d22:	4b21      	ldr	r3, [pc, #132]	; (401da8 <pio_configure_pin+0x1a4>)
  401d24:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401d26:	e035      	b.n	401d94 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401d28:	687b      	ldr	r3, [r7, #4]
  401d2a:	f003 031f 	and.w	r3, r3, #31
  401d2e:	2201      	movs	r2, #1
  401d30:	fa02 f303 	lsl.w	r3, r2, r3
  401d34:	683a      	ldr	r2, [r7, #0]
  401d36:	4619      	mov	r1, r3
  401d38:	68f8      	ldr	r0, [r7, #12]
  401d3a:	4b1c      	ldr	r3, [pc, #112]	; (401dac <pio_configure_pin+0x1a8>)
  401d3c:	4798      	blx	r3
		break;
  401d3e:	e029      	b.n	401d94 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401d40:	687b      	ldr	r3, [r7, #4]
  401d42:	f003 031f 	and.w	r3, r3, #31
  401d46:	2201      	movs	r2, #1
  401d48:	fa02 f303 	lsl.w	r3, r2, r3
  401d4c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401d4e:	683b      	ldr	r3, [r7, #0]
  401d50:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401d54:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d58:	bf0c      	ite	eq
  401d5a:	2301      	moveq	r3, #1
  401d5c:	2300      	movne	r3, #0
  401d5e:	b2db      	uxtb	r3, r3
  401d60:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401d62:	683b      	ldr	r3, [r7, #0]
  401d64:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401d68:	2b00      	cmp	r3, #0
  401d6a:	bf14      	ite	ne
  401d6c:	2301      	movne	r3, #1
  401d6e:	2300      	moveq	r3, #0
  401d70:	b2db      	uxtb	r3, r3
  401d72:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401d74:	683b      	ldr	r3, [r7, #0]
  401d76:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401d7a:	2b00      	cmp	r3, #0
  401d7c:	bf14      	ite	ne
  401d7e:	2301      	movne	r3, #1
  401d80:	2300      	moveq	r3, #0
  401d82:	b2db      	uxtb	r3, r3
  401d84:	9300      	str	r3, [sp, #0]
  401d86:	4603      	mov	r3, r0
  401d88:	68f8      	ldr	r0, [r7, #12]
  401d8a:	4c09      	ldr	r4, [pc, #36]	; (401db0 <pio_configure_pin+0x1ac>)
  401d8c:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401d8e:	e001      	b.n	401d94 <pio_configure_pin+0x190>

	default:
		return 0;
  401d90:	2300      	movs	r3, #0
  401d92:	e000      	b.n	401d96 <pio_configure_pin+0x192>
	}

	return 1;
  401d94:	2301      	movs	r3, #1
}
  401d96:	4618      	mov	r0, r3
  401d98:	3714      	adds	r7, #20
  401d9a:	46bd      	mov	sp, r7
  401d9c:	bd90      	pop	{r4, r7, pc}
  401d9e:	bf00      	nop
  401da0:	00401ee1 	.word	0x00401ee1
  401da4:	004018ad 	.word	0x004018ad
  401da8:	00401849 	.word	0x00401849
  401dac:	004019bd 	.word	0x004019bd
  401db0:	00401a3d 	.word	0x00401a3d

00401db4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401db4:	b590      	push	{r4, r7, lr}
  401db6:	b087      	sub	sp, #28
  401db8:	af02      	add	r7, sp, #8
  401dba:	60f8      	str	r0, [r7, #12]
  401dbc:	60b9      	str	r1, [r7, #8]
  401dbe:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401dc0:	687b      	ldr	r3, [r7, #4]
  401dc2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401dca:	d043      	beq.n	401e54 <pio_configure_pin_group+0xa0>
  401dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401dd0:	d809      	bhi.n	401de6 <pio_configure_pin_group+0x32>
  401dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401dd6:	d01f      	beq.n	401e18 <pio_configure_pin_group+0x64>
  401dd8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401ddc:	d02b      	beq.n	401e36 <pio_configure_pin_group+0x82>
  401dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401de2:	d00a      	beq.n	401dfa <pio_configure_pin_group+0x46>
  401de4:	e06d      	b.n	401ec2 <pio_configure_pin_group+0x10e>
  401de6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401dea:	d048      	beq.n	401e7e <pio_configure_pin_group+0xca>
  401dec:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401df0:	d045      	beq.n	401e7e <pio_configure_pin_group+0xca>
  401df2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401df6:	d03c      	beq.n	401e72 <pio_configure_pin_group+0xbe>
  401df8:	e063      	b.n	401ec2 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401dfa:	68ba      	ldr	r2, [r7, #8]
  401dfc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e00:	68f8      	ldr	r0, [r7, #12]
  401e02:	4b33      	ldr	r3, [pc, #204]	; (401ed0 <pio_configure_pin_group+0x11c>)
  401e04:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401e06:	687b      	ldr	r3, [r7, #4]
  401e08:	f003 0301 	and.w	r3, r3, #1
  401e0c:	461a      	mov	r2, r3
  401e0e:	68b9      	ldr	r1, [r7, #8]
  401e10:	68f8      	ldr	r0, [r7, #12]
  401e12:	4b30      	ldr	r3, [pc, #192]	; (401ed4 <pio_configure_pin_group+0x120>)
  401e14:	4798      	blx	r3
		break;
  401e16:	e056      	b.n	401ec6 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401e18:	68ba      	ldr	r2, [r7, #8]
  401e1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e1e:	68f8      	ldr	r0, [r7, #12]
  401e20:	4b2b      	ldr	r3, [pc, #172]	; (401ed0 <pio_configure_pin_group+0x11c>)
  401e22:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401e24:	687b      	ldr	r3, [r7, #4]
  401e26:	f003 0301 	and.w	r3, r3, #1
  401e2a:	461a      	mov	r2, r3
  401e2c:	68b9      	ldr	r1, [r7, #8]
  401e2e:	68f8      	ldr	r0, [r7, #12]
  401e30:	4b28      	ldr	r3, [pc, #160]	; (401ed4 <pio_configure_pin_group+0x120>)
  401e32:	4798      	blx	r3
		break;
  401e34:	e047      	b.n	401ec6 <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401e36:	68ba      	ldr	r2, [r7, #8]
  401e38:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401e3c:	68f8      	ldr	r0, [r7, #12]
  401e3e:	4b24      	ldr	r3, [pc, #144]	; (401ed0 <pio_configure_pin_group+0x11c>)
  401e40:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401e42:	687b      	ldr	r3, [r7, #4]
  401e44:	f003 0301 	and.w	r3, r3, #1
  401e48:	461a      	mov	r2, r3
  401e4a:	68b9      	ldr	r1, [r7, #8]
  401e4c:	68f8      	ldr	r0, [r7, #12]
  401e4e:	4b21      	ldr	r3, [pc, #132]	; (401ed4 <pio_configure_pin_group+0x120>)
  401e50:	4798      	blx	r3
		break;
  401e52:	e038      	b.n	401ec6 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401e54:	68ba      	ldr	r2, [r7, #8]
  401e56:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401e5a:	68f8      	ldr	r0, [r7, #12]
  401e5c:	4b1c      	ldr	r3, [pc, #112]	; (401ed0 <pio_configure_pin_group+0x11c>)
  401e5e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401e60:	687b      	ldr	r3, [r7, #4]
  401e62:	f003 0301 	and.w	r3, r3, #1
  401e66:	461a      	mov	r2, r3
  401e68:	68b9      	ldr	r1, [r7, #8]
  401e6a:	68f8      	ldr	r0, [r7, #12]
  401e6c:	4b19      	ldr	r3, [pc, #100]	; (401ed4 <pio_configure_pin_group+0x120>)
  401e6e:	4798      	blx	r3
		break;
  401e70:	e029      	b.n	401ec6 <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401e72:	687a      	ldr	r2, [r7, #4]
  401e74:	68b9      	ldr	r1, [r7, #8]
  401e76:	68f8      	ldr	r0, [r7, #12]
  401e78:	4b17      	ldr	r3, [pc, #92]	; (401ed8 <pio_configure_pin_group+0x124>)
  401e7a:	4798      	blx	r3
		break;
  401e7c:	e023      	b.n	401ec6 <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401e7e:	687b      	ldr	r3, [r7, #4]
  401e80:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401e84:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e88:	bf0c      	ite	eq
  401e8a:	2301      	moveq	r3, #1
  401e8c:	2300      	movne	r3, #0
  401e8e:	b2db      	uxtb	r3, r3
  401e90:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401e92:	687b      	ldr	r3, [r7, #4]
  401e94:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401e98:	2b00      	cmp	r3, #0
  401e9a:	bf14      	ite	ne
  401e9c:	2301      	movne	r3, #1
  401e9e:	2300      	moveq	r3, #0
  401ea0:	b2db      	uxtb	r3, r3
  401ea2:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401ea4:	687b      	ldr	r3, [r7, #4]
  401ea6:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401eaa:	2b00      	cmp	r3, #0
  401eac:	bf14      	ite	ne
  401eae:	2301      	movne	r3, #1
  401eb0:	2300      	moveq	r3, #0
  401eb2:	b2db      	uxtb	r3, r3
  401eb4:	9300      	str	r3, [sp, #0]
  401eb6:	460b      	mov	r3, r1
  401eb8:	68b9      	ldr	r1, [r7, #8]
  401eba:	68f8      	ldr	r0, [r7, #12]
  401ebc:	4c07      	ldr	r4, [pc, #28]	; (401edc <pio_configure_pin_group+0x128>)
  401ebe:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401ec0:	e001      	b.n	401ec6 <pio_configure_pin_group+0x112>

	default:
		return 0;
  401ec2:	2300      	movs	r3, #0
  401ec4:	e000      	b.n	401ec8 <pio_configure_pin_group+0x114>
	}

	return 1;
  401ec6:	2301      	movs	r3, #1
}
  401ec8:	4618      	mov	r0, r3
  401eca:	3714      	adds	r7, #20
  401ecc:	46bd      	mov	sp, r7
  401ece:	bd90      	pop	{r4, r7, pc}
  401ed0:	004018ad 	.word	0x004018ad
  401ed4:	00401849 	.word	0x00401849
  401ed8:	004019bd 	.word	0x004019bd
  401edc:	00401a3d 	.word	0x00401a3d

00401ee0 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401ee0:	b480      	push	{r7}
  401ee2:	b085      	sub	sp, #20
  401ee4:	af00      	add	r7, sp, #0
  401ee6:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401ee8:	687b      	ldr	r3, [r7, #4]
  401eea:	095b      	lsrs	r3, r3, #5
  401eec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401ef0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401ef4:	025b      	lsls	r3, r3, #9
  401ef6:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401ef8:	68fb      	ldr	r3, [r7, #12]
}
  401efa:	4618      	mov	r0, r3
  401efc:	3714      	adds	r7, #20
  401efe:	46bd      	mov	sp, r7
  401f00:	bc80      	pop	{r7}
  401f02:	4770      	bx	lr

00401f04 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401f04:	b480      	push	{r7}
  401f06:	b085      	sub	sp, #20
  401f08:	af00      	add	r7, sp, #0
  401f0a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401f0c:	491c      	ldr	r1, [pc, #112]	; (401f80 <pmc_switch_mck_to_pllack+0x7c>)
  401f0e:	4b1c      	ldr	r3, [pc, #112]	; (401f80 <pmc_switch_mck_to_pllack+0x7c>)
  401f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401f16:	687b      	ldr	r3, [r7, #4]
  401f18:	4313      	orrs	r3, r2
  401f1a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f20:	60fb      	str	r3, [r7, #12]
  401f22:	e007      	b.n	401f34 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401f24:	68fb      	ldr	r3, [r7, #12]
  401f26:	2b00      	cmp	r3, #0
  401f28:	d101      	bne.n	401f2e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401f2a:	2301      	movs	r3, #1
  401f2c:	e023      	b.n	401f76 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401f2e:	68fb      	ldr	r3, [r7, #12]
  401f30:	3b01      	subs	r3, #1
  401f32:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f34:	4b12      	ldr	r3, [pc, #72]	; (401f80 <pmc_switch_mck_to_pllack+0x7c>)
  401f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f38:	f003 0308 	and.w	r3, r3, #8
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	d0f1      	beq.n	401f24 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401f40:	4a0f      	ldr	r2, [pc, #60]	; (401f80 <pmc_switch_mck_to_pllack+0x7c>)
  401f42:	4b0f      	ldr	r3, [pc, #60]	; (401f80 <pmc_switch_mck_to_pllack+0x7c>)
  401f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f46:	f023 0303 	bic.w	r3, r3, #3
  401f4a:	f043 0302 	orr.w	r3, r3, #2
  401f4e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f54:	60fb      	str	r3, [r7, #12]
  401f56:	e007      	b.n	401f68 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401f58:	68fb      	ldr	r3, [r7, #12]
  401f5a:	2b00      	cmp	r3, #0
  401f5c:	d101      	bne.n	401f62 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401f5e:	2301      	movs	r3, #1
  401f60:	e009      	b.n	401f76 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401f62:	68fb      	ldr	r3, [r7, #12]
  401f64:	3b01      	subs	r3, #1
  401f66:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f68:	4b05      	ldr	r3, [pc, #20]	; (401f80 <pmc_switch_mck_to_pllack+0x7c>)
  401f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f6c:	f003 0308 	and.w	r3, r3, #8
  401f70:	2b00      	cmp	r3, #0
  401f72:	d0f1      	beq.n	401f58 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401f74:	2300      	movs	r3, #0
}
  401f76:	4618      	mov	r0, r3
  401f78:	3714      	adds	r7, #20
  401f7a:	46bd      	mov	sp, r7
  401f7c:	bc80      	pop	{r7}
  401f7e:	4770      	bx	lr
  401f80:	400e0400 	.word	0x400e0400

00401f84 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401f84:	b480      	push	{r7}
  401f86:	b083      	sub	sp, #12
  401f88:	af00      	add	r7, sp, #0
  401f8a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401f8c:	687b      	ldr	r3, [r7, #4]
  401f8e:	2b01      	cmp	r3, #1
  401f90:	d107      	bne.n	401fa2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401f92:	4a08      	ldr	r2, [pc, #32]	; (401fb4 <pmc_switch_sclk_to_32kxtal+0x30>)
  401f94:	4b07      	ldr	r3, [pc, #28]	; (401fb4 <pmc_switch_sclk_to_32kxtal+0x30>)
  401f96:	689b      	ldr	r3, [r3, #8]
  401f98:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401fa0:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401fa2:	4b04      	ldr	r3, [pc, #16]	; (401fb4 <pmc_switch_sclk_to_32kxtal+0x30>)
  401fa4:	4a04      	ldr	r2, [pc, #16]	; (401fb8 <pmc_switch_sclk_to_32kxtal+0x34>)
  401fa6:	601a      	str	r2, [r3, #0]
}
  401fa8:	bf00      	nop
  401faa:	370c      	adds	r7, #12
  401fac:	46bd      	mov	sp, r7
  401fae:	bc80      	pop	{r7}
  401fb0:	4770      	bx	lr
  401fb2:	bf00      	nop
  401fb4:	400e1410 	.word	0x400e1410
  401fb8:	a5000008 	.word	0xa5000008

00401fbc <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401fbc:	b480      	push	{r7}
  401fbe:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401fc0:	4b09      	ldr	r3, [pc, #36]	; (401fe8 <pmc_osc_is_ready_32kxtal+0x2c>)
  401fc2:	695b      	ldr	r3, [r3, #20]
  401fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401fc8:	2b00      	cmp	r3, #0
  401fca:	d007      	beq.n	401fdc <pmc_osc_is_ready_32kxtal+0x20>
  401fcc:	4b07      	ldr	r3, [pc, #28]	; (401fec <pmc_osc_is_ready_32kxtal+0x30>)
  401fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401fd4:	2b00      	cmp	r3, #0
  401fd6:	d001      	beq.n	401fdc <pmc_osc_is_ready_32kxtal+0x20>
  401fd8:	2301      	movs	r3, #1
  401fda:	e000      	b.n	401fde <pmc_osc_is_ready_32kxtal+0x22>
  401fdc:	2300      	movs	r3, #0
}
  401fde:	4618      	mov	r0, r3
  401fe0:	46bd      	mov	sp, r7
  401fe2:	bc80      	pop	{r7}
  401fe4:	4770      	bx	lr
  401fe6:	bf00      	nop
  401fe8:	400e1410 	.word	0x400e1410
  401fec:	400e0400 	.word	0x400e0400

00401ff0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401ff0:	b480      	push	{r7}
  401ff2:	b083      	sub	sp, #12
  401ff4:	af00      	add	r7, sp, #0
  401ff6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401ff8:	4a18      	ldr	r2, [pc, #96]	; (40205c <pmc_switch_mainck_to_fastrc+0x6c>)
  401ffa:	4b18      	ldr	r3, [pc, #96]	; (40205c <pmc_switch_mainck_to_fastrc+0x6c>)
  401ffc:	6a1b      	ldr	r3, [r3, #32]
  401ffe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402002:	f043 0308 	orr.w	r3, r3, #8
  402006:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402008:	bf00      	nop
  40200a:	4b14      	ldr	r3, [pc, #80]	; (40205c <pmc_switch_mainck_to_fastrc+0x6c>)
  40200c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402012:	2b00      	cmp	r3, #0
  402014:	d0f9      	beq.n	40200a <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402016:	4911      	ldr	r1, [pc, #68]	; (40205c <pmc_switch_mainck_to_fastrc+0x6c>)
  402018:	4b10      	ldr	r3, [pc, #64]	; (40205c <pmc_switch_mainck_to_fastrc+0x6c>)
  40201a:	6a1b      	ldr	r3, [r3, #32]
  40201c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402024:	687a      	ldr	r2, [r7, #4]
  402026:	4313      	orrs	r3, r2
  402028:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40202c:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40202e:	bf00      	nop
  402030:	4b0a      	ldr	r3, [pc, #40]	; (40205c <pmc_switch_mainck_to_fastrc+0x6c>)
  402032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402038:	2b00      	cmp	r3, #0
  40203a:	d0f9      	beq.n	402030 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40203c:	4a07      	ldr	r2, [pc, #28]	; (40205c <pmc_switch_mainck_to_fastrc+0x6c>)
  40203e:	4b07      	ldr	r3, [pc, #28]	; (40205c <pmc_switch_mainck_to_fastrc+0x6c>)
  402040:	6a1b      	ldr	r3, [r3, #32]
  402042:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  402046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40204a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40204e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402050:	bf00      	nop
  402052:	370c      	adds	r7, #12
  402054:	46bd      	mov	sp, r7
  402056:	bc80      	pop	{r7}
  402058:	4770      	bx	lr
  40205a:	bf00      	nop
  40205c:	400e0400 	.word	0x400e0400

00402060 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402060:	b480      	push	{r7}
  402062:	b083      	sub	sp, #12
  402064:	af00      	add	r7, sp, #0
  402066:	6078      	str	r0, [r7, #4]
  402068:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40206a:	687b      	ldr	r3, [r7, #4]
  40206c:	2b00      	cmp	r3, #0
  40206e:	d008      	beq.n	402082 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402070:	4916      	ldr	r1, [pc, #88]	; (4020cc <pmc_switch_mainck_to_xtal+0x6c>)
  402072:	4b16      	ldr	r3, [pc, #88]	; (4020cc <pmc_switch_mainck_to_xtal+0x6c>)
  402074:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402076:	4a16      	ldr	r2, [pc, #88]	; (4020d0 <pmc_switch_mainck_to_xtal+0x70>)
  402078:	401a      	ands	r2, r3
  40207a:	4b16      	ldr	r3, [pc, #88]	; (4020d4 <pmc_switch_mainck_to_xtal+0x74>)
  40207c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40207e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  402080:	e01e      	b.n	4020c0 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402082:	4912      	ldr	r1, [pc, #72]	; (4020cc <pmc_switch_mainck_to_xtal+0x6c>)
  402084:	4b11      	ldr	r3, [pc, #68]	; (4020cc <pmc_switch_mainck_to_xtal+0x6c>)
  402086:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402088:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40208c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402090:	683a      	ldr	r2, [r7, #0]
  402092:	0212      	lsls	r2, r2, #8
  402094:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402096:	4313      	orrs	r3, r2
  402098:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40209c:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4020a0:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4020a2:	bf00      	nop
  4020a4:	4b09      	ldr	r3, [pc, #36]	; (4020cc <pmc_switch_mainck_to_xtal+0x6c>)
  4020a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4020a8:	f003 0301 	and.w	r3, r3, #1
  4020ac:	2b00      	cmp	r3, #0
  4020ae:	d0f9      	beq.n	4020a4 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4020b0:	4a06      	ldr	r2, [pc, #24]	; (4020cc <pmc_switch_mainck_to_xtal+0x6c>)
  4020b2:	4b06      	ldr	r3, [pc, #24]	; (4020cc <pmc_switch_mainck_to_xtal+0x6c>)
  4020b4:	6a1b      	ldr	r3, [r3, #32]
  4020b6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4020be:	6213      	str	r3, [r2, #32]
	}
}
  4020c0:	bf00      	nop
  4020c2:	370c      	adds	r7, #12
  4020c4:	46bd      	mov	sp, r7
  4020c6:	bc80      	pop	{r7}
  4020c8:	4770      	bx	lr
  4020ca:	bf00      	nop
  4020cc:	400e0400 	.word	0x400e0400
  4020d0:	fec8fffc 	.word	0xfec8fffc
  4020d4:	01370002 	.word	0x01370002

004020d8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4020d8:	b480      	push	{r7}
  4020da:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4020dc:	4b03      	ldr	r3, [pc, #12]	; (4020ec <pmc_osc_is_ready_mainck+0x14>)
  4020de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4020e4:	4618      	mov	r0, r3
  4020e6:	46bd      	mov	sp, r7
  4020e8:	bc80      	pop	{r7}
  4020ea:	4770      	bx	lr
  4020ec:	400e0400 	.word	0x400e0400

004020f0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4020f0:	b480      	push	{r7}
  4020f2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4020f4:	4b03      	ldr	r3, [pc, #12]	; (402104 <pmc_disable_pllack+0x14>)
  4020f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4020fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4020fc:	bf00      	nop
  4020fe:	46bd      	mov	sp, r7
  402100:	bc80      	pop	{r7}
  402102:	4770      	bx	lr
  402104:	400e0400 	.word	0x400e0400

00402108 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402108:	b480      	push	{r7}
  40210a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40210c:	4b03      	ldr	r3, [pc, #12]	; (40211c <pmc_is_locked_pllack+0x14>)
  40210e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402110:	f003 0302 	and.w	r3, r3, #2
}
  402114:	4618      	mov	r0, r3
  402116:	46bd      	mov	sp, r7
  402118:	bc80      	pop	{r7}
  40211a:	4770      	bx	lr
  40211c:	400e0400 	.word	0x400e0400

00402120 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  402120:	b480      	push	{r7}
  402122:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402124:	4b03      	ldr	r3, [pc, #12]	; (402134 <pmc_disable_pllbck+0x14>)
  402126:	2200      	movs	r2, #0
  402128:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40212a:	bf00      	nop
  40212c:	46bd      	mov	sp, r7
  40212e:	bc80      	pop	{r7}
  402130:	4770      	bx	lr
  402132:	bf00      	nop
  402134:	400e0400 	.word	0x400e0400

00402138 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  402138:	b480      	push	{r7}
  40213a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40213c:	4b03      	ldr	r3, [pc, #12]	; (40214c <pmc_is_locked_pllbck+0x14>)
  40213e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402140:	f003 0304 	and.w	r3, r3, #4
}
  402144:	4618      	mov	r0, r3
  402146:	46bd      	mov	sp, r7
  402148:	bc80      	pop	{r7}
  40214a:	4770      	bx	lr
  40214c:	400e0400 	.word	0x400e0400

00402150 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402150:	b480      	push	{r7}
  402152:	b083      	sub	sp, #12
  402154:	af00      	add	r7, sp, #0
  402156:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  402158:	687b      	ldr	r3, [r7, #4]
  40215a:	2b22      	cmp	r3, #34	; 0x22
  40215c:	d901      	bls.n	402162 <pmc_enable_periph_clk+0x12>
		return 1;
  40215e:	2301      	movs	r3, #1
  402160:	e02f      	b.n	4021c2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  402162:	687b      	ldr	r3, [r7, #4]
  402164:	2b1f      	cmp	r3, #31
  402166:	d813      	bhi.n	402190 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402168:	4b18      	ldr	r3, [pc, #96]	; (4021cc <pmc_enable_periph_clk+0x7c>)
  40216a:	699a      	ldr	r2, [r3, #24]
  40216c:	2101      	movs	r1, #1
  40216e:	687b      	ldr	r3, [r7, #4]
  402170:	fa01 f303 	lsl.w	r3, r1, r3
  402174:	401a      	ands	r2, r3
  402176:	2101      	movs	r1, #1
  402178:	687b      	ldr	r3, [r7, #4]
  40217a:	fa01 f303 	lsl.w	r3, r1, r3
  40217e:	429a      	cmp	r2, r3
  402180:	d01e      	beq.n	4021c0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  402182:	4a12      	ldr	r2, [pc, #72]	; (4021cc <pmc_enable_periph_clk+0x7c>)
  402184:	2101      	movs	r1, #1
  402186:	687b      	ldr	r3, [r7, #4]
  402188:	fa01 f303 	lsl.w	r3, r1, r3
  40218c:	6113      	str	r3, [r2, #16]
  40218e:	e017      	b.n	4021c0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402190:	687b      	ldr	r3, [r7, #4]
  402192:	3b20      	subs	r3, #32
  402194:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402196:	4b0d      	ldr	r3, [pc, #52]	; (4021cc <pmc_enable_periph_clk+0x7c>)
  402198:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40219c:	2101      	movs	r1, #1
  40219e:	687b      	ldr	r3, [r7, #4]
  4021a0:	fa01 f303 	lsl.w	r3, r1, r3
  4021a4:	401a      	ands	r2, r3
  4021a6:	2101      	movs	r1, #1
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	fa01 f303 	lsl.w	r3, r1, r3
  4021ae:	429a      	cmp	r2, r3
  4021b0:	d006      	beq.n	4021c0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4021b2:	4a06      	ldr	r2, [pc, #24]	; (4021cc <pmc_enable_periph_clk+0x7c>)
  4021b4:	2101      	movs	r1, #1
  4021b6:	687b      	ldr	r3, [r7, #4]
  4021b8:	fa01 f303 	lsl.w	r3, r1, r3
  4021bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4021c0:	2300      	movs	r3, #0
}
  4021c2:	4618      	mov	r0, r3
  4021c4:	370c      	adds	r7, #12
  4021c6:	46bd      	mov	sp, r7
  4021c8:	bc80      	pop	{r7}
  4021ca:	4770      	bx	lr
  4021cc:	400e0400 	.word	0x400e0400

004021d0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4021d0:	b480      	push	{r7}
  4021d2:	b083      	sub	sp, #12
  4021d4:	af00      	add	r7, sp, #0
  4021d6:	4603      	mov	r3, r0
  4021d8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4021da:	4908      	ldr	r1, [pc, #32]	; (4021fc <NVIC_EnableIRQ+0x2c>)
  4021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4021e0:	095b      	lsrs	r3, r3, #5
  4021e2:	79fa      	ldrb	r2, [r7, #7]
  4021e4:	f002 021f 	and.w	r2, r2, #31
  4021e8:	2001      	movs	r0, #1
  4021ea:	fa00 f202 	lsl.w	r2, r0, r2
  4021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4021f2:	bf00      	nop
  4021f4:	370c      	adds	r7, #12
  4021f6:	46bd      	mov	sp, r7
  4021f8:	bc80      	pop	{r7}
  4021fa:	4770      	bx	lr
  4021fc:	e000e100 	.word	0xe000e100

00402200 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402200:	b580      	push	{r7, lr}
  402202:	b082      	sub	sp, #8
  402204:	af00      	add	r7, sp, #0
  402206:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402208:	6878      	ldr	r0, [r7, #4]
  40220a:	4b03      	ldr	r3, [pc, #12]	; (402218 <sysclk_enable_peripheral_clock+0x18>)
  40220c:	4798      	blx	r3
}
  40220e:	bf00      	nop
  402210:	3708      	adds	r7, #8
  402212:	46bd      	mov	sp, r7
  402214:	bd80      	pop	{r7, pc}
  402216:	bf00      	nop
  402218:	00402151 	.word	0x00402151

0040221c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40221c:	b580      	push	{r7, lr}
  40221e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402220:	200b      	movs	r0, #11
  402222:	4b03      	ldr	r3, [pc, #12]	; (402230 <ioport_init+0x14>)
  402224:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  402226:	200c      	movs	r0, #12
  402228:	4b01      	ldr	r3, [pc, #4]	; (402230 <ioport_init+0x14>)
  40222a:	4798      	blx	r3
	arch_ioport_init();
}
  40222c:	bf00      	nop
  40222e:	bd80      	pop	{r7, pc}
  402230:	00402201 	.word	0x00402201

00402234 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  402234:	b590      	push	{r4, r7, lr}
  402236:	b083      	sub	sp, #12
  402238:	af02      	add	r7, sp, #8
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40223a:	4b3e      	ldr	r3, [pc, #248]	; (402334 <board_init+0x100>)
  40223c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402240:	605a      	str	r2, [r3, #4]

	/* Init IO Port service to enable configuring pins */
	ioport_init();
  402242:	4b3d      	ldr	r3, [pc, #244]	; (402338 <board_init+0x104>)
  402244:	4798      	blx	r3

	/* Configure UART0 pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  402246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40224a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  40224e:	483b      	ldr	r0, [pc, #236]	; (40233c <board_init+0x108>)
  402250:	4b3b      	ldr	r3, [pc, #236]	; (402340 <board_init+0x10c>)
  402252:	4798      	blx	r3

	/* Configure UART1 pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  402254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402258:	210c      	movs	r1, #12
  40225a:	483a      	ldr	r0, [pc, #232]	; (402344 <board_init+0x110>)
  40225c:	4b38      	ldr	r3, [pc, #224]	; (402340 <board_init+0x10c>)
  40225e:	4798      	blx	r3

	/* Configure USART0 pins */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  402260:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402264:	2160      	movs	r1, #96	; 0x60
  402266:	4835      	ldr	r0, [pc, #212]	; (40233c <board_init+0x108>)
  402268:	4b35      	ldr	r3, [pc, #212]	; (402340 <board_init+0x10c>)
  40226a:	4798      	blx	r3

	/* Configure USART1 pins */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  40226c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402270:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
  402274:	4831      	ldr	r0, [pc, #196]	; (40233c <board_init+0x108>)
  402276:	4b32      	ldr	r3, [pc, #200]	; (402340 <board_init+0x10c>)
  402278:	4798      	blx	r3

	#if defined(BOARD_NIRA91)
		/* Configure TWI0 Pins (Pressure sensors) */
		gpio_configure_group(PINS_TWI0_PIO, PINS_TWI0, PINS_TWI0_FLAGS);
  40227a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40227e:	2118      	movs	r1, #24
  402280:	482e      	ldr	r0, [pc, #184]	; (40233c <board_init+0x108>)
  402282:	4b2f      	ldr	r3, [pc, #188]	; (402340 <board_init+0x10c>)
  402284:	4798      	blx	r3

		/* Enable PIO Clocks (GPIO I/P and Ext Int) */
		pmc_enable_periph_clk(ID_PIOA);
  402286:	200b      	movs	r0, #11
  402288:	4b2f      	ldr	r3, [pc, #188]	; (402348 <board_init+0x114>)
  40228a:	4798      	blx	r3
		pmc_enable_periph_clk(ID_PIOB);
  40228c:	200c      	movs	r0, #12
  40228e:	4b2e      	ldr	r3, [pc, #184]	; (402348 <board_init+0x114>)
  402290:	4798      	blx	r3

		/* Configure Solenoid Pins */
		gpio_configure_pin(PIN_INAVALVE1_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  402292:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402296:	200d      	movs	r0, #13
  402298:	4b2c      	ldr	r3, [pc, #176]	; (40234c <board_init+0x118>)
  40229a:	4798      	blx	r3
		gpio_configure_pin(PIN_INAVALVE2_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  40229c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4022a0:	200e      	movs	r0, #14
  4022a2:	4b2a      	ldr	r3, [pc, #168]	; (40234c <board_init+0x118>)
  4022a4:	4798      	blx	r3

		/* Configure Air Pump SSRly */
		gpio_configure_pin(PIN_AIR_PUMP_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  4022a6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4022aa:	2018      	movs	r0, #24
  4022ac:	4b27      	ldr	r3, [pc, #156]	; (40234c <board_init+0x118>)
  4022ae:	4798      	blx	r3

		/* Configure LED Pins */
		gpio_configure_pin(PIN_DEBUGLED_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  4022b0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4022b4:	2010      	movs	r0, #16
  4022b6:	4b25      	ldr	r3, [pc, #148]	; (40234c <board_init+0x118>)
  4022b8:	4798      	blx	r3

		/* Configure SW Pins */
		gpio_configure_pin(PIN_SW_PRESS_UP_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  4022ba:	4925      	ldr	r1, [pc, #148]	; (402350 <board_init+0x11c>)
  4022bc:	2020      	movs	r0, #32
  4022be:	4b23      	ldr	r3, [pc, #140]	; (40234c <board_init+0x118>)
  4022c0:	4798      	blx	r3
		gpio_configure_pin(PIN_SW_PRESS_DN_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  4022c2:	4923      	ldr	r1, [pc, #140]	; (402350 <board_init+0x11c>)
  4022c4:	2021      	movs	r0, #33	; 0x21
  4022c6:	4b21      	ldr	r3, [pc, #132]	; (40234c <board_init+0x118>)
  4022c8:	4798      	blx	r3
		gpio_configure_pin(PIN_SW_DURATION_UP_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  4022ca:	4921      	ldr	r1, [pc, #132]	; (402350 <board_init+0x11c>)
  4022cc:	2022      	movs	r0, #34	; 0x22
  4022ce:	4b1f      	ldr	r3, [pc, #124]	; (40234c <board_init+0x118>)
  4022d0:	4798      	blx	r3
		gpio_configure_pin(PIN_SW_DURATION_DN_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  4022d2:	491f      	ldr	r1, [pc, #124]	; (402350 <board_init+0x11c>)
  4022d4:	2023      	movs	r0, #35	; 0x23
  4022d6:	4b1d      	ldr	r3, [pc, #116]	; (40234c <board_init+0x118>)
  4022d8:	4798      	blx	r3
		gpio_configure_pin(PIN_SW_DELAY_UP_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
  4022da:	491d      	ldr	r1, [pc, #116]	; (402350 <board_init+0x11c>)
  4022dc:	2013      	movs	r0, #19
  4022de:	4b1b      	ldr	r3, [pc, #108]	; (40234c <board_init+0x118>)
  4022e0:	4798      	blx	r3
		#ifndef BOARD_NIRA91
			/* Delay down pin cannot be utilized as input as this pin is short with DISP UART RX (Schematic mistake) */
			gpio_configure_pin(PIN_SW_DELAY_DN_IDX, (PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE));
		#endif
		gpio_configure_pin(PIN_SW_SOS_IDX, PIO_INPUT);
  4022e2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4022e6:	2014      	movs	r0, #20
  4022e8:	4b18      	ldr	r3, [pc, #96]	; (40234c <board_init+0x118>)
  4022ea:	4798      	blx	r3
		/*	
		 *Set debounce filter slow clock divider for PIOA and PIOB.
		 *Calling this function with mask value 0 will not disable the already enabled debounce filters.  
		 *Debounce value set for 100ms. (10Hz Filter)
		 */ 
		pio_set_debounce_filter(PIOA, 0, 10);
  4022ec:	220a      	movs	r2, #10
  4022ee:	2100      	movs	r1, #0
  4022f0:	4812      	ldr	r0, [pc, #72]	; (40233c <board_init+0x108>)
  4022f2:	4b18      	ldr	r3, [pc, #96]	; (402354 <board_init+0x120>)
  4022f4:	4798      	blx	r3
		pio_set_debounce_filter(PIOB, 0, 10);
  4022f6:	220a      	movs	r2, #10
  4022f8:	2100      	movs	r1, #0
  4022fa:	4812      	ldr	r0, [pc, #72]	; (402344 <board_init+0x110>)
  4022fc:	4b15      	ldr	r3, [pc, #84]	; (402354 <board_init+0x120>)
  4022fe:	4798      	blx	r3

		/* Initialize PIOs interrupt handlers (see PIO definition in board.h). */
		pio_handler_set(PIN_SW_SOS_PIO, PIN_SW_SOS_PIO_ID, PIN_SW_SOS_MASK, (PIO_OPENDRAIN | PIO_DEBOUNCE | PIO_IT_LOW_LEVEL), SosIntHandler);
  402300:	4b15      	ldr	r3, [pc, #84]	; (402358 <board_init+0x124>)
  402302:	9300      	str	r3, [sp, #0]
  402304:	231c      	movs	r3, #28
  402306:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40230a:	210b      	movs	r1, #11
  40230c:	480b      	ldr	r0, [pc, #44]	; (40233c <board_init+0x108>)
  40230e:	4c13      	ldr	r4, [pc, #76]	; (40235c <board_init+0x128>)
  402310:	47a0      	blx	r4
		
		/* Enable PIO controller IRQs. */
		NVIC_EnableIRQ((IRQn_Type) PIN_SW_SOS_PIO_ID);
  402312:	200b      	movs	r0, #11
  402314:	4b12      	ldr	r3, [pc, #72]	; (402360 <board_init+0x12c>)
  402316:	4798      	blx	r3

		/* PIO configuration for Buttons. */
		pio_handler_set_priority(PIN_SW_SOS_PIO, (IRQn_Type) PIN_SW_SOS_PIO_ID, 0);
  402318:	2200      	movs	r2, #0
  40231a:	210b      	movs	r1, #11
  40231c:	4807      	ldr	r0, [pc, #28]	; (40233c <board_init+0x108>)
  40231e:	4b11      	ldr	r3, [pc, #68]	; (402364 <board_init+0x130>)
  402320:	4798      	blx	r3
		
		/* Enable PIO line interrupts. */
		pio_enable_interrupt(PIN_SW_SOS_PIO, PIN_SW_SOS_MASK);
  402322:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  402326:	4805      	ldr	r0, [pc, #20]	; (40233c <board_init+0x108>)
  402328:	4b0f      	ldr	r3, [pc, #60]	; (402368 <board_init+0x134>)
  40232a:	4798      	blx	r3
	#endif
}
  40232c:	bf00      	nop
  40232e:	3704      	adds	r7, #4
  402330:	46bd      	mov	sp, r7
  402332:	bd90      	pop	{r4, r7, pc}
  402334:	400e1450 	.word	0x400e1450
  402338:	0040221d 	.word	0x0040221d
  40233c:	400e0e00 	.word	0x400e0e00
  402340:	00401db5 	.word	0x00401db5
  402344:	400e1000 	.word	0x400e1000
  402348:	00402151 	.word	0x00402151
  40234c:	00401c05 	.word	0x00401c05
  402350:	2800000c 	.word	0x2800000c
  402354:	00401875 	.word	0x00401875
  402358:	00402a99 	.word	0x00402a99
  40235c:	00400b65 	.word	0x00400b65
  402360:	004021d1 	.word	0x004021d1
  402364:	00400c35 	.word	0x00400c35
  402368:	00401b0d 	.word	0x00401b0d

0040236c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40236c:	b580      	push	{r7, lr}
  40236e:	b084      	sub	sp, #16
  402370:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  402372:	4b27      	ldr	r3, [pc, #156]	; (402410 <Reset_Handler+0xa4>)
  402374:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402376:	4b27      	ldr	r3, [pc, #156]	; (402414 <Reset_Handler+0xa8>)
  402378:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40237a:	68fa      	ldr	r2, [r7, #12]
  40237c:	68bb      	ldr	r3, [r7, #8]
  40237e:	429a      	cmp	r2, r3
  402380:	d90d      	bls.n	40239e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  402382:	e007      	b.n	402394 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402384:	68bb      	ldr	r3, [r7, #8]
  402386:	1d1a      	adds	r2, r3, #4
  402388:	60ba      	str	r2, [r7, #8]
  40238a:	68fa      	ldr	r2, [r7, #12]
  40238c:	1d11      	adds	r1, r2, #4
  40238e:	60f9      	str	r1, [r7, #12]
  402390:	6812      	ldr	r2, [r2, #0]
  402392:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  402394:	68bb      	ldr	r3, [r7, #8]
  402396:	4a20      	ldr	r2, [pc, #128]	; (402418 <Reset_Handler+0xac>)
  402398:	4293      	cmp	r3, r2
  40239a:	d3f3      	bcc.n	402384 <Reset_Handler+0x18>
  40239c:	e020      	b.n	4023e0 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40239e:	68fa      	ldr	r2, [r7, #12]
  4023a0:	68bb      	ldr	r3, [r7, #8]
  4023a2:	429a      	cmp	r2, r3
  4023a4:	d21c      	bcs.n	4023e0 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4023a6:	4a1c      	ldr	r2, [pc, #112]	; (402418 <Reset_Handler+0xac>)
  4023a8:	4b1a      	ldr	r3, [pc, #104]	; (402414 <Reset_Handler+0xa8>)
  4023aa:	1ad3      	subs	r3, r2, r3
  4023ac:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4023ae:	68fa      	ldr	r2, [r7, #12]
  4023b0:	687b      	ldr	r3, [r7, #4]
  4023b2:	4413      	add	r3, r2
  4023b4:	3b04      	subs	r3, #4
  4023b6:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4023b8:	68ba      	ldr	r2, [r7, #8]
  4023ba:	687b      	ldr	r3, [r7, #4]
  4023bc:	4413      	add	r3, r2
  4023be:	3b04      	subs	r3, #4
  4023c0:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4023c2:	e00a      	b.n	4023da <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4023c4:	68bb      	ldr	r3, [r7, #8]
  4023c6:	1f1a      	subs	r2, r3, #4
  4023c8:	60ba      	str	r2, [r7, #8]
  4023ca:	68fa      	ldr	r2, [r7, #12]
  4023cc:	1f11      	subs	r1, r2, #4
  4023ce:	60f9      	str	r1, [r7, #12]
  4023d0:	6812      	ldr	r2, [r2, #0]
  4023d2:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4023d4:	687b      	ldr	r3, [r7, #4]
  4023d6:	3b04      	subs	r3, #4
  4023d8:	607b      	str	r3, [r7, #4]
  4023da:	687b      	ldr	r3, [r7, #4]
  4023dc:	2b00      	cmp	r3, #0
  4023de:	d1f1      	bne.n	4023c4 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4023e0:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4023e2:	4b0e      	ldr	r3, [pc, #56]	; (40241c <Reset_Handler+0xb0>)
  4023e4:	60bb      	str	r3, [r7, #8]
  4023e6:	e004      	b.n	4023f2 <Reset_Handler+0x86>
		*pDest++ = 0;
  4023e8:	68bb      	ldr	r3, [r7, #8]
  4023ea:	1d1a      	adds	r2, r3, #4
  4023ec:	60ba      	str	r2, [r7, #8]
  4023ee:	2200      	movs	r2, #0
  4023f0:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4023f2:	68bb      	ldr	r3, [r7, #8]
  4023f4:	4a0a      	ldr	r2, [pc, #40]	; (402420 <Reset_Handler+0xb4>)
  4023f6:	4293      	cmp	r3, r2
  4023f8:	d3f6      	bcc.n	4023e8 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4023fa:	4b0a      	ldr	r3, [pc, #40]	; (402424 <Reset_Handler+0xb8>)
  4023fc:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4023fe:	4a0a      	ldr	r2, [pc, #40]	; (402428 <Reset_Handler+0xbc>)
  402400:	68fb      	ldr	r3, [r7, #12]
  402402:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402404:	4b09      	ldr	r3, [pc, #36]	; (40242c <Reset_Handler+0xc0>)
  402406:	4798      	blx	r3

	/* Branch to main function */
	main();
  402408:	4b09      	ldr	r3, [pc, #36]	; (402430 <Reset_Handler+0xc4>)
  40240a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40240c:	e7fe      	b.n	40240c <Reset_Handler+0xa0>
  40240e:	bf00      	nop
  402410:	004058c8 	.word	0x004058c8
  402414:	20000000 	.word	0x20000000
  402418:	2000085c 	.word	0x2000085c
  40241c:	2000085c 	.word	0x2000085c
  402420:	20000e30 	.word	0x20000e30
  402424:	00400000 	.word	0x00400000
  402428:	e000ed00 	.word	0xe000ed00
  40242c:	00404801 	.word	0x00404801
  402430:	00402885 	.word	0x00402885

00402434 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402434:	b480      	push	{r7}
  402436:	af00      	add	r7, sp, #0
	while (1) {
	}
  402438:	e7fe      	b.n	402438 <Dummy_Handler+0x4>
  40243a:	bf00      	nop

0040243c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40243c:	b480      	push	{r7}
  40243e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402440:	4b5d      	ldr	r3, [pc, #372]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  402442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402444:	f003 0303 	and.w	r3, r3, #3
  402448:	2b03      	cmp	r3, #3
  40244a:	f200 8096 	bhi.w	40257a <SystemCoreClockUpdate+0x13e>
  40244e:	a201      	add	r2, pc, #4	; (adr r2, 402454 <SystemCoreClockUpdate+0x18>)
  402450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402454:	00402465 	.word	0x00402465
  402458:	00402485 	.word	0x00402485
  40245c:	004024cf 	.word	0x004024cf
  402460:	004024cf 	.word	0x004024cf
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402464:	4b55      	ldr	r3, [pc, #340]	; (4025bc <SystemCoreClockUpdate+0x180>)
  402466:	695b      	ldr	r3, [r3, #20]
  402468:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40246c:	2b00      	cmp	r3, #0
  40246e:	d004      	beq.n	40247a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402470:	4b53      	ldr	r3, [pc, #332]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402472:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402476:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402478:	e080      	b.n	40257c <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40247a:	4b51      	ldr	r3, [pc, #324]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  40247c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402480:	601a      	str	r2, [r3, #0]
			}
		break;
  402482:	e07b      	b.n	40257c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402484:	4b4c      	ldr	r3, [pc, #304]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  402486:	6a1b      	ldr	r3, [r3, #32]
  402488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40248c:	2b00      	cmp	r3, #0
  40248e:	d003      	beq.n	402498 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402490:	4b4b      	ldr	r3, [pc, #300]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402492:	4a4c      	ldr	r2, [pc, #304]	; (4025c4 <SystemCoreClockUpdate+0x188>)
  402494:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402496:	e071      	b.n	40257c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402498:	4b49      	ldr	r3, [pc, #292]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  40249a:	4a4b      	ldr	r2, [pc, #300]	; (4025c8 <SystemCoreClockUpdate+0x18c>)
  40249c:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40249e:	4b46      	ldr	r3, [pc, #280]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  4024a0:	6a1b      	ldr	r3, [r3, #32]
  4024a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024a6:	2b10      	cmp	r3, #16
  4024a8:	d008      	beq.n	4024bc <SystemCoreClockUpdate+0x80>
  4024aa:	2b20      	cmp	r3, #32
  4024ac:	d00a      	beq.n	4024c4 <SystemCoreClockUpdate+0x88>
  4024ae:	2b00      	cmp	r3, #0
  4024b0:	d000      	beq.n	4024b4 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  4024b2:	e00b      	b.n	4024cc <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4024b4:	4b42      	ldr	r3, [pc, #264]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  4024b6:	4a44      	ldr	r2, [pc, #272]	; (4025c8 <SystemCoreClockUpdate+0x18c>)
  4024b8:	601a      	str	r2, [r3, #0]
			break;
  4024ba:	e007      	b.n	4024cc <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4024bc:	4b40      	ldr	r3, [pc, #256]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  4024be:	4a43      	ldr	r2, [pc, #268]	; (4025cc <SystemCoreClockUpdate+0x190>)
  4024c0:	601a      	str	r2, [r3, #0]
			break;
  4024c2:	e003      	b.n	4024cc <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4024c4:	4b3e      	ldr	r3, [pc, #248]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  4024c6:	4a3f      	ldr	r2, [pc, #252]	; (4025c4 <SystemCoreClockUpdate+0x188>)
  4024c8:	601a      	str	r2, [r3, #0]
			break;
  4024ca:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  4024cc:	e056      	b.n	40257c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4024ce:	4b3a      	ldr	r3, [pc, #232]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  4024d0:	6a1b      	ldr	r3, [r3, #32]
  4024d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4024d6:	2b00      	cmp	r3, #0
  4024d8:	d003      	beq.n	4024e2 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4024da:	4b39      	ldr	r3, [pc, #228]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  4024dc:	4a39      	ldr	r2, [pc, #228]	; (4025c4 <SystemCoreClockUpdate+0x188>)
  4024de:	601a      	str	r2, [r3, #0]
  4024e0:	e019      	b.n	402516 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4024e2:	4b37      	ldr	r3, [pc, #220]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  4024e4:	4a38      	ldr	r2, [pc, #224]	; (4025c8 <SystemCoreClockUpdate+0x18c>)
  4024e6:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4024e8:	4b33      	ldr	r3, [pc, #204]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  4024ea:	6a1b      	ldr	r3, [r3, #32]
  4024ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024f0:	2b10      	cmp	r3, #16
  4024f2:	d008      	beq.n	402506 <SystemCoreClockUpdate+0xca>
  4024f4:	2b20      	cmp	r3, #32
  4024f6:	d00a      	beq.n	40250e <SystemCoreClockUpdate+0xd2>
  4024f8:	2b00      	cmp	r3, #0
  4024fa:	d000      	beq.n	4024fe <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4024fc:	e00b      	b.n	402516 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4024fe:	4b30      	ldr	r3, [pc, #192]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402500:	4a31      	ldr	r2, [pc, #196]	; (4025c8 <SystemCoreClockUpdate+0x18c>)
  402502:	601a      	str	r2, [r3, #0]
					break;
  402504:	e007      	b.n	402516 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402506:	4b2e      	ldr	r3, [pc, #184]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402508:	4a30      	ldr	r2, [pc, #192]	; (4025cc <SystemCoreClockUpdate+0x190>)
  40250a:	601a      	str	r2, [r3, #0]
					break;
  40250c:	e003      	b.n	402516 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40250e:	4b2c      	ldr	r3, [pc, #176]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402510:	4a2c      	ldr	r2, [pc, #176]	; (4025c4 <SystemCoreClockUpdate+0x188>)
  402512:	601a      	str	r2, [r3, #0]
					break;
  402514:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402516:	4b28      	ldr	r3, [pc, #160]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  402518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40251a:	f003 0303 	and.w	r3, r3, #3
  40251e:	2b02      	cmp	r3, #2
  402520:	d115      	bne.n	40254e <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402522:	4b25      	ldr	r3, [pc, #148]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  402524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402526:	4b2a      	ldr	r3, [pc, #168]	; (4025d0 <SystemCoreClockUpdate+0x194>)
  402528:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40252a:	0c1b      	lsrs	r3, r3, #16
  40252c:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40252e:	4a24      	ldr	r2, [pc, #144]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402530:	6812      	ldr	r2, [r2, #0]
  402532:	fb02 f303 	mul.w	r3, r2, r3
  402536:	4a22      	ldr	r2, [pc, #136]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402538:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40253a:	4b1f      	ldr	r3, [pc, #124]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  40253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40253e:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402540:	4a1f      	ldr	r2, [pc, #124]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402542:	6812      	ldr	r2, [r2, #0]
  402544:	fbb2 f3f3 	udiv	r3, r2, r3
  402548:	4a1d      	ldr	r2, [pc, #116]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  40254a:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40254c:	e016      	b.n	40257c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40254e:	4b1a      	ldr	r3, [pc, #104]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  402550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402552:	4b1f      	ldr	r3, [pc, #124]	; (4025d0 <SystemCoreClockUpdate+0x194>)
  402554:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402556:	0c1b      	lsrs	r3, r3, #16
  402558:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40255a:	4a19      	ldr	r2, [pc, #100]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  40255c:	6812      	ldr	r2, [r2, #0]
  40255e:	fb02 f303 	mul.w	r3, r2, r3
  402562:	4a17      	ldr	r2, [pc, #92]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402564:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402566:	4b14      	ldr	r3, [pc, #80]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  402568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40256a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40256c:	4a14      	ldr	r2, [pc, #80]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  40256e:	6812      	ldr	r2, [r2, #0]
  402570:	fbb2 f3f3 	udiv	r3, r2, r3
  402574:	4a12      	ldr	r2, [pc, #72]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402576:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402578:	e000      	b.n	40257c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40257a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40257c:	4b0e      	ldr	r3, [pc, #56]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  40257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402580:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402584:	2b70      	cmp	r3, #112	; 0x70
  402586:	d108      	bne.n	40259a <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402588:	4b0d      	ldr	r3, [pc, #52]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  40258a:	681b      	ldr	r3, [r3, #0]
  40258c:	4a11      	ldr	r2, [pc, #68]	; (4025d4 <SystemCoreClockUpdate+0x198>)
  40258e:	fba2 2303 	umull	r2, r3, r2, r3
  402592:	085b      	lsrs	r3, r3, #1
  402594:	4a0a      	ldr	r2, [pc, #40]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  402596:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402598:	e00a      	b.n	4025b0 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40259a:	4b07      	ldr	r3, [pc, #28]	; (4025b8 <SystemCoreClockUpdate+0x17c>)
  40259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40259e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4025a2:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4025a4:	4a06      	ldr	r2, [pc, #24]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  4025a6:	6812      	ldr	r2, [r2, #0]
  4025a8:	fa22 f303 	lsr.w	r3, r2, r3
  4025ac:	4a04      	ldr	r2, [pc, #16]	; (4025c0 <SystemCoreClockUpdate+0x184>)
  4025ae:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4025b0:	bf00      	nop
  4025b2:	46bd      	mov	sp, r7
  4025b4:	bc80      	pop	{r7}
  4025b6:	4770      	bx	lr
  4025b8:	400e0400 	.word	0x400e0400
  4025bc:	400e1410 	.word	0x400e1410
  4025c0:	2000000c 	.word	0x2000000c
  4025c4:	00b71b00 	.word	0x00b71b00
  4025c8:	003d0900 	.word	0x003d0900
  4025cc:	007a1200 	.word	0x007a1200
  4025d0:	07ff0000 	.word	0x07ff0000
  4025d4:	aaaaaaab 	.word	0xaaaaaaab

004025d8 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4025d8:	b480      	push	{r7}
  4025da:	b083      	sub	sp, #12
  4025dc:	af00      	add	r7, sp, #0
  4025de:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4025e0:	687b      	ldr	r3, [r7, #4]
  4025e2:	4a18      	ldr	r2, [pc, #96]	; (402644 <system_init_flash+0x6c>)
  4025e4:	4293      	cmp	r3, r2
  4025e6:	d804      	bhi.n	4025f2 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4025e8:	4b17      	ldr	r3, [pc, #92]	; (402648 <system_init_flash+0x70>)
  4025ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4025ee:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4025f0:	e023      	b.n	40263a <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4025f2:	687b      	ldr	r3, [r7, #4]
  4025f4:	4a15      	ldr	r2, [pc, #84]	; (40264c <system_init_flash+0x74>)
  4025f6:	4293      	cmp	r3, r2
  4025f8:	d803      	bhi.n	402602 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4025fa:	4b13      	ldr	r3, [pc, #76]	; (402648 <system_init_flash+0x70>)
  4025fc:	4a14      	ldr	r2, [pc, #80]	; (402650 <system_init_flash+0x78>)
  4025fe:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402600:	e01b      	b.n	40263a <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402602:	687b      	ldr	r3, [r7, #4]
  402604:	4a13      	ldr	r2, [pc, #76]	; (402654 <system_init_flash+0x7c>)
  402606:	4293      	cmp	r3, r2
  402608:	d803      	bhi.n	402612 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40260a:	4b0f      	ldr	r3, [pc, #60]	; (402648 <system_init_flash+0x70>)
  40260c:	4a12      	ldr	r2, [pc, #72]	; (402658 <system_init_flash+0x80>)
  40260e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402610:	e013      	b.n	40263a <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402612:	687b      	ldr	r3, [r7, #4]
  402614:	4a11      	ldr	r2, [pc, #68]	; (40265c <system_init_flash+0x84>)
  402616:	4293      	cmp	r3, r2
  402618:	d803      	bhi.n	402622 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40261a:	4b0b      	ldr	r3, [pc, #44]	; (402648 <system_init_flash+0x70>)
  40261c:	4a10      	ldr	r2, [pc, #64]	; (402660 <system_init_flash+0x88>)
  40261e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402620:	e00b      	b.n	40263a <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402622:	687b      	ldr	r3, [r7, #4]
  402624:	4a0f      	ldr	r2, [pc, #60]	; (402664 <system_init_flash+0x8c>)
  402626:	4293      	cmp	r3, r2
  402628:	d804      	bhi.n	402634 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40262a:	4b07      	ldr	r3, [pc, #28]	; (402648 <system_init_flash+0x70>)
  40262c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402630:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402632:	e002      	b.n	40263a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402634:	4b04      	ldr	r3, [pc, #16]	; (402648 <system_init_flash+0x70>)
  402636:	4a0c      	ldr	r2, [pc, #48]	; (402668 <system_init_flash+0x90>)
  402638:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40263a:	bf00      	nop
  40263c:	370c      	adds	r7, #12
  40263e:	46bd      	mov	sp, r7
  402640:	bc80      	pop	{r7}
  402642:	4770      	bx	lr
  402644:	01312cff 	.word	0x01312cff
  402648:	400e0a00 	.word	0x400e0a00
  40264c:	026259ff 	.word	0x026259ff
  402650:	04000100 	.word	0x04000100
  402654:	039386ff 	.word	0x039386ff
  402658:	04000200 	.word	0x04000200
  40265c:	04c4b3ff 	.word	0x04c4b3ff
  402660:	04000300 	.word	0x04000300
  402664:	05f5e0ff 	.word	0x05f5e0ff
  402668:	04000500 	.word	0x04000500

0040266c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40266c:	b480      	push	{r7}
  40266e:	b085      	sub	sp, #20
  402670:	af00      	add	r7, sp, #0
  402672:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402674:	4b10      	ldr	r3, [pc, #64]	; (4026b8 <_sbrk+0x4c>)
  402676:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402678:	4b10      	ldr	r3, [pc, #64]	; (4026bc <_sbrk+0x50>)
  40267a:	681b      	ldr	r3, [r3, #0]
  40267c:	2b00      	cmp	r3, #0
  40267e:	d102      	bne.n	402686 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402680:	4b0e      	ldr	r3, [pc, #56]	; (4026bc <_sbrk+0x50>)
  402682:	4a0f      	ldr	r2, [pc, #60]	; (4026c0 <_sbrk+0x54>)
  402684:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402686:	4b0d      	ldr	r3, [pc, #52]	; (4026bc <_sbrk+0x50>)
  402688:	681b      	ldr	r3, [r3, #0]
  40268a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40268c:	68ba      	ldr	r2, [r7, #8]
  40268e:	687b      	ldr	r3, [r7, #4]
  402690:	441a      	add	r2, r3
  402692:	68fb      	ldr	r3, [r7, #12]
  402694:	429a      	cmp	r2, r3
  402696:	dd02      	ble.n	40269e <_sbrk+0x32>
		return (caddr_t) -1;	
  402698:	f04f 33ff 	mov.w	r3, #4294967295
  40269c:	e006      	b.n	4026ac <_sbrk+0x40>
	}

	heap += incr;
  40269e:	4b07      	ldr	r3, [pc, #28]	; (4026bc <_sbrk+0x50>)
  4026a0:	681a      	ldr	r2, [r3, #0]
  4026a2:	687b      	ldr	r3, [r7, #4]
  4026a4:	4413      	add	r3, r2
  4026a6:	4a05      	ldr	r2, [pc, #20]	; (4026bc <_sbrk+0x50>)
  4026a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4026aa:	68bb      	ldr	r3, [r7, #8]
}
  4026ac:	4618      	mov	r0, r3
  4026ae:	3714      	adds	r7, #20
  4026b0:	46bd      	mov	sp, r7
  4026b2:	bc80      	pop	{r7}
  4026b4:	4770      	bx	lr
  4026b6:	bf00      	nop
  4026b8:	20027ffc 	.word	0x20027ffc
  4026bc:	20000a8c 	.word	0x20000a8c
  4026c0:	20003e30 	.word	0x20003e30

004026c4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4026c4:	b480      	push	{r7}
  4026c6:	b083      	sub	sp, #12
  4026c8:	af00      	add	r7, sp, #0
  4026ca:	6078      	str	r0, [r7, #4]
	return -1;
  4026cc:	f04f 33ff 	mov.w	r3, #4294967295
}
  4026d0:	4618      	mov	r0, r3
  4026d2:	370c      	adds	r7, #12
  4026d4:	46bd      	mov	sp, r7
  4026d6:	bc80      	pop	{r7}
  4026d8:	4770      	bx	lr
  4026da:	bf00      	nop

004026dc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4026dc:	b480      	push	{r7}
  4026de:	b083      	sub	sp, #12
  4026e0:	af00      	add	r7, sp, #0
  4026e2:	6078      	str	r0, [r7, #4]
  4026e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4026e6:	683b      	ldr	r3, [r7, #0]
  4026e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4026ec:	605a      	str	r2, [r3, #4]

	return 0;
  4026ee:	2300      	movs	r3, #0
}
  4026f0:	4618      	mov	r0, r3
  4026f2:	370c      	adds	r7, #12
  4026f4:	46bd      	mov	sp, r7
  4026f6:	bc80      	pop	{r7}
  4026f8:	4770      	bx	lr
  4026fa:	bf00      	nop

004026fc <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
  4026fc:	b480      	push	{r7}
  4026fe:	b085      	sub	sp, #20
  402700:	af00      	add	r7, sp, #0
  402702:	60f8      	str	r0, [r7, #12]
  402704:	60b9      	str	r1, [r7, #8]
  402706:	607a      	str	r2, [r7, #4]
	return 0;
  402708:	2300      	movs	r3, #0
}
  40270a:	4618      	mov	r0, r3
  40270c:	3714      	adds	r7, #20
  40270e:	46bd      	mov	sp, r7
  402710:	bc80      	pop	{r7}
  402712:	4770      	bx	lr

00402714 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  402714:	b480      	push	{r7}
  402716:	b083      	sub	sp, #12
  402718:	af00      	add	r7, sp, #0
  40271a:	4603      	mov	r3, r0
  40271c:	6039      	str	r1, [r7, #0]
  40271e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402720:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402724:	2b00      	cmp	r3, #0
  402726:	da0b      	bge.n	402740 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402728:	490d      	ldr	r1, [pc, #52]	; (402760 <NVIC_SetPriority+0x4c>)
  40272a:	79fb      	ldrb	r3, [r7, #7]
  40272c:	f003 030f 	and.w	r3, r3, #15
  402730:	3b04      	subs	r3, #4
  402732:	683a      	ldr	r2, [r7, #0]
  402734:	b2d2      	uxtb	r2, r2
  402736:	0112      	lsls	r2, r2, #4
  402738:	b2d2      	uxtb	r2, r2
  40273a:	440b      	add	r3, r1
  40273c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  40273e:	e009      	b.n	402754 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402740:	4908      	ldr	r1, [pc, #32]	; (402764 <NVIC_SetPriority+0x50>)
  402742:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402746:	683a      	ldr	r2, [r7, #0]
  402748:	b2d2      	uxtb	r2, r2
  40274a:	0112      	lsls	r2, r2, #4
  40274c:	b2d2      	uxtb	r2, r2
  40274e:	440b      	add	r3, r1
  402750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  402754:	bf00      	nop
  402756:	370c      	adds	r7, #12
  402758:	46bd      	mov	sp, r7
  40275a:	bc80      	pop	{r7}
  40275c:	4770      	bx	lr
  40275e:	bf00      	nop
  402760:	e000ed00 	.word	0xe000ed00
  402764:	e000e100 	.word	0xe000e100

00402768 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  402768:	b580      	push	{r7, lr}
  40276a:	b082      	sub	sp, #8
  40276c:	af00      	add	r7, sp, #0
  40276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  402770:	687b      	ldr	r3, [r7, #4]
  402772:	3b01      	subs	r3, #1
  402774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  402778:	d301      	bcc.n	40277e <SysTick_Config+0x16>
  40277a:	2301      	movs	r3, #1
  40277c:	e00f      	b.n	40279e <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40277e:	4a0a      	ldr	r2, [pc, #40]	; (4027a8 <SysTick_Config+0x40>)
  402780:	687b      	ldr	r3, [r7, #4]
  402782:	3b01      	subs	r3, #1
  402784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  402786:	210f      	movs	r1, #15
  402788:	f04f 30ff 	mov.w	r0, #4294967295
  40278c:	4b07      	ldr	r3, [pc, #28]	; (4027ac <SysTick_Config+0x44>)
  40278e:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  402790:	4b05      	ldr	r3, [pc, #20]	; (4027a8 <SysTick_Config+0x40>)
  402792:	2200      	movs	r2, #0
  402794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  402796:	4b04      	ldr	r3, [pc, #16]	; (4027a8 <SysTick_Config+0x40>)
  402798:	2207      	movs	r2, #7
  40279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  40279c:	2300      	movs	r3, #0
}
  40279e:	4618      	mov	r0, r3
  4027a0:	3708      	adds	r7, #8
  4027a2:	46bd      	mov	sp, r7
  4027a4:	bd80      	pop	{r7, pc}
  4027a6:	bf00      	nop
  4027a8:	e000e010 	.word	0xe000e010
  4027ac:	00402715 	.word	0x00402715

004027b0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4027b0:	b480      	push	{r7}
  4027b2:	b083      	sub	sp, #12
  4027b4:	af00      	add	r7, sp, #0
  4027b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4027b8:	687b      	ldr	r3, [r7, #4]
  4027ba:	2b07      	cmp	r3, #7
  4027bc:	d825      	bhi.n	40280a <osc_get_rate+0x5a>
  4027be:	a201      	add	r2, pc, #4	; (adr r2, 4027c4 <osc_get_rate+0x14>)
  4027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4027c4:	004027e5 	.word	0x004027e5
  4027c8:	004027eb 	.word	0x004027eb
  4027cc:	004027f1 	.word	0x004027f1
  4027d0:	004027f7 	.word	0x004027f7
  4027d4:	004027fb 	.word	0x004027fb
  4027d8:	004027ff 	.word	0x004027ff
  4027dc:	00402803 	.word	0x00402803
  4027e0:	00402807 	.word	0x00402807
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4027e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4027e8:	e010      	b.n	40280c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4027ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4027ee:	e00d      	b.n	40280c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4027f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4027f4:	e00a      	b.n	40280c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4027f6:	4b08      	ldr	r3, [pc, #32]	; (402818 <osc_get_rate+0x68>)
  4027f8:	e008      	b.n	40280c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4027fa:	4b08      	ldr	r3, [pc, #32]	; (40281c <osc_get_rate+0x6c>)
  4027fc:	e006      	b.n	40280c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4027fe:	4b08      	ldr	r3, [pc, #32]	; (402820 <osc_get_rate+0x70>)
  402800:	e004      	b.n	40280c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402802:	4b07      	ldr	r3, [pc, #28]	; (402820 <osc_get_rate+0x70>)
  402804:	e002      	b.n	40280c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402806:	4b06      	ldr	r3, [pc, #24]	; (402820 <osc_get_rate+0x70>)
  402808:	e000      	b.n	40280c <osc_get_rate+0x5c>
	}

	return 0;
  40280a:	2300      	movs	r3, #0
}
  40280c:	4618      	mov	r0, r3
  40280e:	370c      	adds	r7, #12
  402810:	46bd      	mov	sp, r7
  402812:	bc80      	pop	{r7}
  402814:	4770      	bx	lr
  402816:	bf00      	nop
  402818:	003d0900 	.word	0x003d0900
  40281c:	007a1200 	.word	0x007a1200
  402820:	00b71b00 	.word	0x00b71b00

00402824 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402824:	b580      	push	{r7, lr}
  402826:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  402828:	2006      	movs	r0, #6
  40282a:	4b04      	ldr	r3, [pc, #16]	; (40283c <sysclk_get_main_hz+0x18>)
  40282c:	4798      	blx	r3
  40282e:	4602      	mov	r2, r0
  402830:	4613      	mov	r3, r2
  402832:	009b      	lsls	r3, r3, #2
  402834:	4413      	add	r3, r2
  402836:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402838:	4618      	mov	r0, r3
  40283a:	bd80      	pop	{r7, pc}
  40283c:	004027b1 	.word	0x004027b1

00402840 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  402840:	b580      	push	{r7, lr}
  402842:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402844:	4b02      	ldr	r3, [pc, #8]	; (402850 <sysclk_get_cpu_hz+0x10>)
  402846:	4798      	blx	r3
  402848:	4603      	mov	r3, r0
  40284a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40284c:	4618      	mov	r0, r3
  40284e:	bd80      	pop	{r7, pc}
  402850:	00402825 	.word	0x00402825

00402854 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402854:	b580      	push	{r7, lr}
  402856:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402858:	4b02      	ldr	r3, [pc, #8]	; (402864 <sysclk_get_peripheral_hz+0x10>)
  40285a:	4798      	blx	r3
  40285c:	4603      	mov	r3, r0
  40285e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402860:	4618      	mov	r0, r3
  402862:	bd80      	pop	{r7, pc}
  402864:	00402825 	.word	0x00402825

00402868 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402868:	b580      	push	{r7, lr}
  40286a:	b082      	sub	sp, #8
  40286c:	af00      	add	r7, sp, #0
  40286e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402870:	6878      	ldr	r0, [r7, #4]
  402872:	4b03      	ldr	r3, [pc, #12]	; (402880 <sysclk_enable_peripheral_clock+0x18>)
  402874:	4798      	blx	r3
}
  402876:	bf00      	nop
  402878:	3708      	adds	r7, #8
  40287a:	46bd      	mov	sp, r7
  40287c:	bd80      	pop	{r7, pc}
  40287e:	bf00      	nop
  402880:	00402151 	.word	0x00402151

00402884 <main>:
#endif
uint32_t holdDur = DEFAULT_DURATION, delayParam = DEFAULT_DELAY; 
float resPVal = 0;

int main (void)
{
  402884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  402888:	b084      	sub	sp, #16
  40288a:	af00      	add	r7, sp, #0
	uint16_t temp = 0;
  40288c:	2300      	movs	r3, #0
  40288e:	817b      	strh	r3, [r7, #10]
	uint32_t tempCount = 0;
  402890:	2300      	movs	r3, #0
  402892:	607b      	str	r3, [r7, #4]
	float p1Val = 0, p2Val = 0;
  402894:	f04f 0300 	mov.w	r3, #0
  402898:	603b      	str	r3, [r7, #0]
  40289a:	f04f 0300 	mov.w	r3, #0
  40289e:	60fb      	str	r3, [r7, #12]
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  4028a0:	4b55      	ldr	r3, [pc, #340]	; (4029f8 <main+0x174>)
  4028a2:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  4028a4:	4b55      	ldr	r3, [pc, #340]	; (4029fc <main+0x178>)
  4028a6:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());
	
	SetValveState(s1CloseS2Close);
  4028a8:	2000      	movs	r0, #0
  4028aa:	4b55      	ldr	r3, [pc, #340]	; (402a00 <main+0x17c>)
  4028ac:	4798      	blx	r3
	gpio_set_pin_low(PIN_AIR_PUMP_IDX);
  4028ae:	2018      	movs	r0, #24
  4028b0:	4b54      	ldr	r3, [pc, #336]	; (402a04 <main+0x180>)
  4028b2:	4798      	blx	r3
	delay_ms(500);
  4028b4:	4b54      	ldr	r3, [pc, #336]	; (402a08 <main+0x184>)
  4028b6:	4798      	blx	r3
  4028b8:	4603      	mov	r3, r0
  4028ba:	4618      	mov	r0, r3
  4028bc:	f04f 0100 	mov.w	r1, #0
  4028c0:	4602      	mov	r2, r0
  4028c2:	460b      	mov	r3, r1
  4028c4:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  4028c8:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  4028cc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  4028d0:	4652      	mov	r2, sl
  4028d2:	465b      	mov	r3, fp
  4028d4:	015d      	lsls	r5, r3, #5
  4028d6:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  4028da:	0154      	lsls	r4, r2, #5
  4028dc:	1aa4      	subs	r4, r4, r2
  4028de:	eb65 0503 	sbc.w	r5, r5, r3
  4028e2:	1824      	adds	r4, r4, r0
  4028e4:	eb45 0501 	adc.w	r5, r5, r1
  4028e8:	ea4f 0985 	mov.w	r9, r5, lsl #2
  4028ec:	ea49 7994 	orr.w	r9, r9, r4, lsr #30
  4028f0:	ea4f 0884 	mov.w	r8, r4, lsl #2
  4028f4:	4644      	mov	r4, r8
  4028f6:	464d      	mov	r5, r9
  4028f8:	4621      	mov	r1, r4
  4028fa:	462a      	mov	r2, r5
  4028fc:	f243 63af 	movw	r3, #13999	; 0x36af
  402900:	f04f 0400 	mov.w	r4, #0
  402904:	eb11 0803 	adds.w	r8, r1, r3
  402908:	eb42 0904 	adc.w	r9, r2, r4
  40290c:	4640      	mov	r0, r8
  40290e:	4649      	mov	r1, r9
  402910:	4c3e      	ldr	r4, [pc, #248]	; (402a0c <main+0x188>)
  402912:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402916:	f04f 0300 	mov.w	r3, #0
  40291a:	47a0      	blx	r4
  40291c:	4603      	mov	r3, r0
  40291e:	460c      	mov	r4, r1
  402920:	4618      	mov	r0, r3
  402922:	4b3b      	ldr	r3, [pc, #236]	; (402a10 <main+0x18c>)
  402924:	4798      	blx	r3

	InitPeripherals();
  402926:	4b3b      	ldr	r3, [pc, #236]	; (402a14 <main+0x190>)
  402928:	4798      	blx	r3
// 		p2Val = ((float)temp/16383.0f)*PSEN2_MAXP;
// 	}
		
	#ifndef ALGO_TEST_MODE_EN
		/* Initialize pressure in reservoir */
		SetValveState(s1CloseS2Close);
  40292a:	2000      	movs	r0, #0
  40292c:	4b34      	ldr	r3, [pc, #208]	; (402a00 <main+0x17c>)
  40292e:	4798      	blx	r3
/*		gpio_set_pin_high(PIN_AIR_PUMP_IDX);*/
		while(p2Val<=5.0f)
  402930:	e01f      	b.n	402972 <main+0xee>
		{
			ReadPressureSen(BOARD_TWI, ADDR_PSEN2, dispPkt);
  402932:	4a39      	ldr	r2, [pc, #228]	; (402a18 <main+0x194>)
  402934:	2148      	movs	r1, #72	; 0x48
  402936:	4839      	ldr	r0, [pc, #228]	; (402a1c <main+0x198>)
  402938:	4b39      	ldr	r3, [pc, #228]	; (402a20 <main+0x19c>)
  40293a:	4798      	blx	r3
			temp = ((((uint16_t)dispPkt[0])<<8)| dispPkt[1]);
  40293c:	4b36      	ldr	r3, [pc, #216]	; (402a18 <main+0x194>)
  40293e:	781b      	ldrb	r3, [r3, #0]
  402940:	021b      	lsls	r3, r3, #8
  402942:	b21a      	sxth	r2, r3
  402944:	4b34      	ldr	r3, [pc, #208]	; (402a18 <main+0x194>)
  402946:	785b      	ldrb	r3, [r3, #1]
  402948:	b21b      	sxth	r3, r3
  40294a:	4313      	orrs	r3, r2
  40294c:	b21b      	sxth	r3, r3
  40294e:	817b      	strh	r3, [r7, #10]
			p2Val = ((float)temp/16383.0f)*PSEN2_MAXP;
  402950:	897a      	ldrh	r2, [r7, #10]
  402952:	4b34      	ldr	r3, [pc, #208]	; (402a24 <main+0x1a0>)
  402954:	4610      	mov	r0, r2
  402956:	4798      	blx	r3
  402958:	4602      	mov	r2, r0
  40295a:	4b33      	ldr	r3, [pc, #204]	; (402a28 <main+0x1a4>)
  40295c:	4933      	ldr	r1, [pc, #204]	; (402a2c <main+0x1a8>)
  40295e:	4610      	mov	r0, r2
  402960:	4798      	blx	r3
  402962:	4603      	mov	r3, r0
  402964:	461a      	mov	r2, r3
  402966:	4b32      	ldr	r3, [pc, #200]	; (402a30 <main+0x1ac>)
  402968:	4932      	ldr	r1, [pc, #200]	; (402a34 <main+0x1b0>)
  40296a:	4610      	mov	r0, r2
  40296c:	4798      	blx	r3
  40296e:	4603      	mov	r3, r0
  402970:	60fb      	str	r3, [r7, #12]
		
	#ifndef ALGO_TEST_MODE_EN
		/* Initialize pressure in reservoir */
		SetValveState(s1CloseS2Close);
/*		gpio_set_pin_high(PIN_AIR_PUMP_IDX);*/
		while(p2Val<=5.0f)
  402972:	4b31      	ldr	r3, [pc, #196]	; (402a38 <main+0x1b4>)
  402974:	4931      	ldr	r1, [pc, #196]	; (402a3c <main+0x1b8>)
  402976:	68f8      	ldr	r0, [r7, #12]
  402978:	4798      	blx	r3
  40297a:	4603      	mov	r3, r0
  40297c:	2b00      	cmp	r3, #0
  40297e:	d1d8      	bne.n	402932 <main+0xae>
			p2Val = ((float)temp/16383.0f)*PSEN2_MAXP;
		}
	#endif

	/* Init. variables */  
	memset(&sen1Data, 0, sizeof(struct senData));
  402980:	22cd      	movs	r2, #205	; 0xcd
  402982:	2100      	movs	r1, #0
  402984:	482e      	ldr	r0, [pc, #184]	; (402a40 <main+0x1bc>)
  402986:	4b2f      	ldr	r3, [pc, #188]	; (402a44 <main+0x1c0>)
  402988:	4798      	blx	r3
	memset(&sen2Data, 0, sizeof(struct senData));
  40298a:	22cd      	movs	r2, #205	; 0xcd
  40298c:	2100      	movs	r1, #0
  40298e:	482e      	ldr	r0, [pc, #184]	; (402a48 <main+0x1c4>)
  402990:	4b2c      	ldr	r3, [pc, #176]	; (402a44 <main+0x1c0>)
  402992:	4798      	blx	r3
	memset(&trigBuff, 0, sizeof(struct cBuff_t));
  402994:	22ca      	movs	r2, #202	; 0xca
  402996:	2100      	movs	r1, #0
  402998:	482c      	ldr	r0, [pc, #176]	; (402a4c <main+0x1c8>)
  40299a:	4b2a      	ldr	r3, [pc, #168]	; (402a44 <main+0x1c0>)
  40299c:	4798      	blx	r3
	sen1State.state = q0;
  40299e:	4b2c      	ldr	r3, [pc, #176]	; (402a50 <main+0x1cc>)
  4029a0:	2200      	movs	r2, #0
  4029a2:	701a      	strb	r2, [r3, #0]
	sen1State.sum = 0;
  4029a4:	4b2a      	ldr	r3, [pc, #168]	; (402a50 <main+0x1cc>)
  4029a6:	2200      	movs	r2, #0
  4029a8:	705a      	strb	r2, [r3, #1]
	sen1State.ctr = 0;
  4029aa:	4b29      	ldr	r3, [pc, #164]	; (402a50 <main+0x1cc>)
  4029ac:	2200      	movs	r2, #0
  4029ae:	709a      	strb	r2, [r3, #2]
	sen2State.state = q0;
  4029b0:	4b28      	ldr	r3, [pc, #160]	; (402a54 <main+0x1d0>)
  4029b2:	2200      	movs	r2, #0
  4029b4:	701a      	strb	r2, [r3, #0]
	sen2State.sum = 0;
  4029b6:	4b27      	ldr	r3, [pc, #156]	; (402a54 <main+0x1d0>)
  4029b8:	2200      	movs	r2, #0
  4029ba:	705a      	strb	r2, [r3, #1]
	sen2State.ctr = 0;
  4029bc:	4b25      	ldr	r3, [pc, #148]	; (402a54 <main+0x1d0>)
  4029be:	2200      	movs	r2, #0
  4029c0:	709a      	strb	r2, [r3, #2]
		//ManageResP();
		
		/* Emergency switch action already defined in ISR */
		
		/* Call frequently to update next pointer in PDC */
		SenPdcManageBuff();
  4029c2:	4b25      	ldr	r3, [pc, #148]	; (402a58 <main+0x1d4>)
  4029c4:	4798      	blx	r3

		/* Poll switches */
		PollSwitches();
  4029c6:	4b25      	ldr	r3, [pc, #148]	; (402a5c <main+0x1d8>)
  4029c8:	4798      	blx	r3

		/* Collect sensor 1 data and run trigger calculation */
		if(SenGetRxBytes(1)>5)
  4029ca:	2001      	movs	r0, #1
  4029cc:	4b24      	ldr	r3, [pc, #144]	; (402a60 <main+0x1dc>)
  4029ce:	4798      	blx	r3
  4029d0:	4603      	mov	r3, r0
  4029d2:	2b05      	cmp	r3, #5
  4029d4:	d902      	bls.n	4029dc <main+0x158>
		{
			SenProcessData(1);
  4029d6:	2001      	movs	r0, #1
  4029d8:	4b22      	ldr	r3, [pc, #136]	; (402a64 <main+0x1e0>)
  4029da:	4798      	blx	r3
		}

		/* Collect sensor 2 data */
		if(SenGetRxBytes(2)>5)
  4029dc:	2002      	movs	r0, #2
  4029de:	4b20      	ldr	r3, [pc, #128]	; (402a60 <main+0x1dc>)
  4029e0:	4798      	blx	r3
  4029e2:	4603      	mov	r3, r0
  4029e4:	2b05      	cmp	r3, #5
  4029e6:	d902      	bls.n	4029ee <main+0x16a>
		{
			SenProcessData(2);
  4029e8:	2002      	movs	r0, #2
  4029ea:	4b1e      	ldr	r3, [pc, #120]	; (402a64 <main+0x1e0>)
  4029ec:	4798      	blx	r3
		}

		/* Activate valves */
		ActivateValves();
  4029ee:	4b1e      	ldr	r3, [pc, #120]	; (402a68 <main+0x1e4>)
  4029f0:	4798      	blx	r3

		/* Send data collected from sensors to display */
		SendDispData();
  4029f2:	4b1e      	ldr	r3, [pc, #120]	; (402a6c <main+0x1e8>)
  4029f4:	4798      	blx	r3

		/* Clear WDT */
	}
  4029f6:	e7e4      	b.n	4029c2 <main+0x13e>
  4029f8:	00401701 	.word	0x00401701
  4029fc:	00402235 	.word	0x00402235
  402a00:	004032d1 	.word	0x004032d1
  402a04:	00401bd5 	.word	0x00401bd5
  402a08:	00402841 	.word	0x00402841
  402a0c:	004044e9 	.word	0x004044e9
  402a10:	20000001 	.word	0x20000001
  402a14:	00402ad1 	.word	0x00402ad1
  402a18:	20000cac 	.word	0x20000cac
  402a1c:	40018000 	.word	0x40018000
  402a20:	0040020d 	.word	0x0040020d
  402a24:	004040ad 	.word	0x004040ad
  402a28:	004042c5 	.word	0x004042c5
  402a2c:	467ffc00 	.word	0x467ffc00
  402a30:	0040415d 	.word	0x0040415d
  402a34:	41f00000 	.word	0x41f00000
  402a38:	004044ad 	.word	0x004044ad
  402a3c:	40a00000 	.word	0x40a00000
  402a40:	20000bdc 	.word	0x20000bdc
  402a44:	00404851 	.word	0x00404851
  402a48:	20000b0c 	.word	0x20000b0c
  402a4c:	20000d44 	.word	0x20000d44
  402a50:	20000e20 	.word	0x20000e20
  402a54:	20000e18 	.word	0x20000e18
  402a58:	004006f5 	.word	0x004006f5
  402a5c:	00403e1d 	.word	0x00403e1d
  402a60:	004007c5 	.word	0x004007c5
  402a64:	00402c05 	.word	0x00402c05
  402a68:	004030c9 	.word	0x004030c9
  402a6c:	00403341 	.word	0x00403341

00402a70 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  402a70:	b480      	push	{r7}
  402a72:	af00      	add	r7, sp, #0
	tickCount++;
  402a74:	4b06      	ldr	r3, [pc, #24]	; (402a90 <SysTick_Handler+0x20>)
  402a76:	681b      	ldr	r3, [r3, #0]
  402a78:	3301      	adds	r3, #1
  402a7a:	4a05      	ldr	r2, [pc, #20]	; (402a90 <SysTick_Handler+0x20>)
  402a7c:	6013      	str	r3, [r2, #0]
	cycleTime++;
  402a7e:	4b05      	ldr	r3, [pc, #20]	; (402a94 <SysTick_Handler+0x24>)
  402a80:	681b      	ldr	r3, [r3, #0]
  402a82:	3301      	adds	r3, #1
  402a84:	4a03      	ldr	r2, [pc, #12]	; (402a94 <SysTick_Handler+0x24>)
  402a86:	6013      	str	r3, [r2, #0]
	#if defined(CYCLE_AVG_DISP_EN)
		dispTick++;
	#endif
}
  402a88:	bf00      	nop
  402a8a:	46bd      	mov	sp, r7
  402a8c:	bc80      	pop	{r7}
  402a8e:	4770      	bx	lr
  402a90:	20000aac 	.word	0x20000aac
  402a94:	20000aa4 	.word	0x20000aa4

00402a98 <SosIntHandler>:
 *  Open all valves and turn off the compressor.
 *  Hang up in infinite loop until next reset.
 */

void SosIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
  402a98:	b580      	push	{r7, lr}
  402a9a:	b082      	sub	sp, #8
  402a9c:	af00      	add	r7, sp, #0
  402a9e:	6078      	str	r0, [r7, #4]
  402aa0:	6039      	str	r1, [r7, #0]
	if (PIN_SW_SOS_PIO_ID != ul_id || PIN_SW_SOS_MASK != ul_mask)
  402aa2:	687b      	ldr	r3, [r7, #4]
  402aa4:	2b0b      	cmp	r3, #11
  402aa6:	d10a      	bne.n	402abe <SosIntHandler+0x26>
  402aa8:	683b      	ldr	r3, [r7, #0]
  402aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  402aae:	d106      	bne.n	402abe <SosIntHandler+0x26>
		return;

	SetValveState(s1OpenS2Open);
  402ab0:	2003      	movs	r0, #3
  402ab2:	4b05      	ldr	r3, [pc, #20]	; (402ac8 <SosIntHandler+0x30>)
  402ab4:	4798      	blx	r3
	gpio_set_pin_low(PIN_AIR_PUMP_IDX);
  402ab6:	2018      	movs	r0, #24
  402ab8:	4b04      	ldr	r3, [pc, #16]	; (402acc <SosIntHandler+0x34>)
  402aba:	4798      	blx	r3

	while(1);
  402abc:	e7fe      	b.n	402abc <SosIntHandler+0x24>
 */

void SosIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
	if (PIN_SW_SOS_PIO_ID != ul_id || PIN_SW_SOS_MASK != ul_mask)
		return;
  402abe:	bf00      	nop

	SetValveState(s1OpenS2Open);
	gpio_set_pin_low(PIN_AIR_PUMP_IDX);

	while(1);
}
  402ac0:	3708      	adds	r7, #8
  402ac2:	46bd      	mov	sp, r7
  402ac4:	bd80      	pop	{r7, pc}
  402ac6:	bf00      	nop
  402ac8:	004032d1 	.word	0x004032d1
  402acc:	00401bd5 	.word	0x00401bd5

00402ad0 <InitPeripherals>:

void InitPeripherals(void)
{
  402ad0:	b580      	push	{r7, lr}
  402ad2:	af00      	add	r7, sp, #0

	/* Initialize Display UART */
	InitDispUart();
  402ad4:	4b04      	ldr	r3, [pc, #16]	; (402ae8 <InitPeripherals+0x18>)
  402ad6:	4798      	blx	r3

	/* Initialize sensor USARTs */
	SenInitUsart();
  402ad8:	4b04      	ldr	r3, [pc, #16]	; (402aec <InitPeripherals+0x1c>)
  402ada:	4798      	blx	r3

	/* Init TWI */
	InitTWI();
  402adc:	4b04      	ldr	r3, [pc, #16]	; (402af0 <InitPeripherals+0x20>)
  402ade:	4798      	blx	r3

	/* Initialize Systick timer to generate interrupts every 10 ms */
	InitSystick();
  402ae0:	4b04      	ldr	r3, [pc, #16]	; (402af4 <InitPeripherals+0x24>)
  402ae2:	4798      	blx	r3

	/* Enable WDT */

}
  402ae4:	bf00      	nop
  402ae6:	bd80      	pop	{r7, pc}
  402ae8:	00402b81 	.word	0x00402b81
  402aec:	004005c5 	.word	0x004005c5
  402af0:	00402af9 	.word	0x00402af9
  402af4:	00402b49 	.word	0x00402b49

00402af8 <InitTWI>:

void InitTWI(void)
{
  402af8:	b580      	push	{r7, lr}
  402afa:	b084      	sub	sp, #16
  402afc:	af00      	add	r7, sp, #0
	twi_options_t twiSettings = {
		sysclk_get_peripheral_hz(),
  402afe:	4b0c      	ldr	r3, [pc, #48]	; (402b30 <InitTWI+0x38>)
  402b00:	4798      	blx	r3
  402b02:	4603      	mov	r3, r0

}

void InitTWI(void)
{
	twi_options_t twiSettings = {
  402b04:	607b      	str	r3, [r7, #4]
  402b06:	4b0b      	ldr	r3, [pc, #44]	; (402b34 <InitTWI+0x3c>)
  402b08:	60bb      	str	r3, [r7, #8]
  402b0a:	2300      	movs	r3, #0
  402b0c:	733b      	strb	r3, [r7, #12]
  402b0e:	2300      	movs	r3, #0
  402b10:	737b      	strb	r3, [r7, #13]
		100000,
		0,
		0
	};
	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_TWI_ID);
  402b12:	2013      	movs	r0, #19
  402b14:	4b08      	ldr	r3, [pc, #32]	; (402b38 <InitTWI+0x40>)
  402b16:	4798      	blx	r3

	/* Enable TWI master mode */
	twi_enable_master_mode(BOARD_TWI);
  402b18:	4808      	ldr	r0, [pc, #32]	; (402b3c <InitTWI+0x44>)
  402b1a:	4b09      	ldr	r3, [pc, #36]	; (402b40 <InitTWI+0x48>)
  402b1c:	4798      	blx	r3

	/* Initialize TWI peripheral */
	twi_master_init(BOARD_TWI, &twiSettings);
  402b1e:	1d3b      	adds	r3, r7, #4
  402b20:	4619      	mov	r1, r3
  402b22:	4806      	ldr	r0, [pc, #24]	; (402b3c <InitTWI+0x44>)
  402b24:	4b07      	ldr	r3, [pc, #28]	; (402b44 <InitTWI+0x4c>)
  402b26:	4798      	blx	r3
}
  402b28:	bf00      	nop
  402b2a:	3710      	adds	r7, #16
  402b2c:	46bd      	mov	sp, r7
  402b2e:	bd80      	pop	{r7, pc}
  402b30:	00402855 	.word	0x00402855
  402b34:	000186a0 	.word	0x000186a0
  402b38:	00402869 	.word	0x00402869
  402b3c:	40018000 	.word	0x40018000
  402b40:	00400cb9 	.word	0x00400cb9
  402b44:	00400cdd 	.word	0x00400cdd

00402b48 <InitSystick>:
/**
 *  Configure system tick to generate an interrupt every 10 ms.
 */

void InitSystick(void)
{
  402b48:	b580      	push	{r7, lr}
  402b4a:	b082      	sub	sp, #8
  402b4c:	af00      	add	r7, sp, #0
	uint32_t ul_flag;
	ul_flag = SysTick_Config(sysclk_get_cpu_hz() / SYS_TICK_FREQ);
  402b4e:	4b09      	ldr	r3, [pc, #36]	; (402b74 <InitSystick+0x2c>)
  402b50:	4798      	blx	r3
  402b52:	4602      	mov	r2, r0
  402b54:	4b08      	ldr	r3, [pc, #32]	; (402b78 <InitSystick+0x30>)
  402b56:	fba3 2302 	umull	r2, r3, r3, r2
  402b5a:	099b      	lsrs	r3, r3, #6
  402b5c:	4618      	mov	r0, r3
  402b5e:	4b07      	ldr	r3, [pc, #28]	; (402b7c <InitSystick+0x34>)
  402b60:	4798      	blx	r3
  402b62:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  402b64:	687b      	ldr	r3, [r7, #4]
  402b66:	2b00      	cmp	r3, #0
  402b68:	d000      	beq.n	402b6c <InitSystick+0x24>
		/* Systick configuration error */
		while (1) {
		}
  402b6a:	e7fe      	b.n	402b6a <InitSystick+0x22>
	}
}
  402b6c:	bf00      	nop
  402b6e:	3708      	adds	r7, #8
  402b70:	46bd      	mov	sp, r7
  402b72:	bd80      	pop	{r7, pc}
  402b74:	00402841 	.word	0x00402841
  402b78:	10624dd3 	.word	0x10624dd3
  402b7c:	00402769 	.word	0x00402769

00402b80 <InitDispUart>:

/**
 *  Configure display UART for output.
 */
void InitDispUart(void)
{
  402b80:	b5b0      	push	{r4, r5, r7, lr}
  402b82:	b086      	sub	sp, #24
  402b84:	af00      	add	r7, sp, #0
		uart_disable_rx(DISP_UART);

		dispUartPdcBase = uart_get_pdc_base(DISP_UART);
		pdc_enable_transfer(dispUartPdcBase, PERIPH_PTCR_TXTEN);
	#elif defined(BOARD_NIRA91)
		const sam_usart_opt_t usart_console_settings = {
  402b86:	4b15      	ldr	r3, [pc, #84]	; (402bdc <InitDispUart+0x5c>)
  402b88:	463c      	mov	r4, r7
  402b8a:	461d      	mov	r5, r3
  402b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402b90:	e895 0003 	ldmia.w	r5, {r0, r1}
  402b94:	e884 0003 	stmia.w	r4, {r0, r1}
			/* This field is only used in IrDA mode. */
			0
		};

		/* Enable the peripheral clock in the PMC. */
		sysclk_enable_peripheral_clock(DISP_USART_ID);
  402b98:	200f      	movs	r0, #15
  402b9a:	4b11      	ldr	r3, [pc, #68]	; (402be0 <InitDispUart+0x60>)
  402b9c:	4798      	blx	r3

		/* Configure USART in RS485 mode. */
		usart_init_rs232(DISP_USART, &usart_console_settings,
  402b9e:	4b11      	ldr	r3, [pc, #68]	; (402be4 <InitDispUart+0x64>)
  402ba0:	4798      	blx	r3
  402ba2:	4602      	mov	r2, r0
  402ba4:	463b      	mov	r3, r7
  402ba6:	4619      	mov	r1, r3
  402ba8:	480f      	ldr	r0, [pc, #60]	; (402be8 <InitDispUart+0x68>)
  402baa:	4b10      	ldr	r3, [pc, #64]	; (402bec <InitDispUart+0x6c>)
  402bac:	4798      	blx	r3
		sysclk_get_peripheral_hz());

		/* Enable TX function. */
		usart_disable_rx(DISP_USART);
  402bae:	480e      	ldr	r0, [pc, #56]	; (402be8 <InitDispUart+0x68>)
  402bb0:	4b0f      	ldr	r3, [pc, #60]	; (402bf0 <InitDispUart+0x70>)
  402bb2:	4798      	blx	r3
		usart_enable_tx(DISP_USART);
  402bb4:	480c      	ldr	r0, [pc, #48]	; (402be8 <InitDispUart+0x68>)
  402bb6:	4b0f      	ldr	r3, [pc, #60]	; (402bf4 <InitDispUart+0x74>)
  402bb8:	4798      	blx	r3

		/* Get board USART PDC base address and enable receiver and transmitter. */
		dispUartPdcBase = usart_get_pdc_base(DISP_USART);
  402bba:	480b      	ldr	r0, [pc, #44]	; (402be8 <InitDispUart+0x68>)
  402bbc:	4b0e      	ldr	r3, [pc, #56]	; (402bf8 <InitDispUart+0x78>)
  402bbe:	4798      	blx	r3
  402bc0:	4602      	mov	r2, r0
  402bc2:	4b0e      	ldr	r3, [pc, #56]	; (402bfc <InitDispUart+0x7c>)
  402bc4:	601a      	str	r2, [r3, #0]
		pdc_enable_transfer(dispUartPdcBase, PERIPH_PTCR_TXTEN);
  402bc6:	4b0d      	ldr	r3, [pc, #52]	; (402bfc <InitDispUart+0x7c>)
  402bc8:	681b      	ldr	r3, [r3, #0]
  402bca:	f44f 7180 	mov.w	r1, #256	; 0x100
  402bce:	4618      	mov	r0, r3
  402bd0:	4b0b      	ldr	r3, [pc, #44]	; (402c00 <InitDispUart+0x80>)
  402bd2:	4798      	blx	r3

	#endif

}
  402bd4:	bf00      	nop
  402bd6:	3718      	adds	r7, #24
  402bd8:	46bd      	mov	sp, r7
  402bda:	bdb0      	pop	{r4, r5, r7, pc}
  402bdc:	0040587c 	.word	0x0040587c
  402be0:	00402869 	.word	0x00402869
  402be4:	00402855 	.word	0x00402855
  402be8:	40028000 	.word	0x40028000
  402bec:	004011cd 	.word	0x004011cd
  402bf0:	004012b1 	.word	0x004012b1
  402bf4:	00401251 	.word	0x00401251
  402bf8:	004013b1 	.word	0x004013b1
  402bfc:	20000e28 	.word	0x20000e28
  402c00:	004017f9 	.word	0x004017f9

00402c04 <SenProcessData>:

void SenProcessData(uint8_t senNo)
{
  402c04:	b580      	push	{r7, lr}
  402c06:	b084      	sub	sp, #16
  402c08:	af00      	add	r7, sp, #0
  402c0a:	4603      	mov	r3, r0
  402c0c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	/* Process only 1 frame at a time i.e. 5B */
	for ( i = 0; i < 5; i++)
  402c0e:	2300      	movs	r3, #0
  402c10:	73fb      	strb	r3, [r7, #15]
  402c12:	e014      	b.n	402c3e <SenProcessData+0x3a>
	{
		if(SenGetRxBytes(senNo))
  402c14:	79fb      	ldrb	r3, [r7, #7]
  402c16:	4618      	mov	r0, r3
  402c18:	4b0c      	ldr	r3, [pc, #48]	; (402c4c <SenProcessData+0x48>)
  402c1a:	4798      	blx	r3
  402c1c:	4603      	mov	r3, r0
  402c1e:	2b00      	cmp	r3, #0
  402c20:	d00a      	beq.n	402c38 <SenProcessData+0x34>
		{
			SenParseFrame(senNo, SenGetByte(senNo));
  402c22:	79fb      	ldrb	r3, [r7, #7]
  402c24:	4618      	mov	r0, r3
  402c26:	4b0a      	ldr	r3, [pc, #40]	; (402c50 <SenProcessData+0x4c>)
  402c28:	4798      	blx	r3
  402c2a:	4603      	mov	r3, r0
  402c2c:	461a      	mov	r2, r3
  402c2e:	79fb      	ldrb	r3, [r7, #7]
  402c30:	4611      	mov	r1, r2
  402c32:	4618      	mov	r0, r3
  402c34:	4b07      	ldr	r3, [pc, #28]	; (402c54 <SenProcessData+0x50>)
  402c36:	4798      	blx	r3

void SenProcessData(uint8_t senNo)
{
	uint8_t i;
	/* Process only 1 frame at a time i.e. 5B */
	for ( i = 0; i < 5; i++)
  402c38:	7bfb      	ldrb	r3, [r7, #15]
  402c3a:	3301      	adds	r3, #1
  402c3c:	73fb      	strb	r3, [r7, #15]
  402c3e:	7bfb      	ldrb	r3, [r7, #15]
  402c40:	2b04      	cmp	r3, #4
  402c42:	d9e7      	bls.n	402c14 <SenProcessData+0x10>
		if(SenGetRxBytes(senNo))
		{
			SenParseFrame(senNo, SenGetByte(senNo));
		}
	}
}
  402c44:	bf00      	nop
  402c46:	3710      	adds	r7, #16
  402c48:	46bd      	mov	sp, r7
  402c4a:	bd80      	pop	{r7, pc}
  402c4c:	004007c5 	.word	0x004007c5
  402c50:	00400871 	.word	0x00400871
  402c54:	00402c59 	.word	0x00402c59

00402c58 <SenParseFrame>:

void SenParseFrame(uint8_t senNo, uint8_t data)
{
  402c58:	b580      	push	{r7, lr}
  402c5a:	b082      	sub	sp, #8
  402c5c:	af00      	add	r7, sp, #0
  402c5e:	4603      	mov	r3, r0
  402c60:	460a      	mov	r2, r1
  402c62:	71fb      	strb	r3, [r7, #7]
  402c64:	4613      	mov	r3, r2
  402c66:	71bb      	strb	r3, [r7, #6]
	if(senNo == 1)
  402c68:	79fb      	ldrb	r3, [r7, #7]
  402c6a:	2b01      	cmp	r3, #1
  402c6c:	f040 80e4 	bne.w	402e38 <SenParseFrame+0x1e0>
	{
		switch(sen1State.state)
  402c70:	4ba0      	ldr	r3, [pc, #640]	; (402ef4 <SenParseFrame+0x29c>)
  402c72:	781b      	ldrb	r3, [r3, #0]
  402c74:	2b05      	cmp	r3, #5
  402c76:	f200 819c 	bhi.w	402fb2 <SenParseFrame+0x35a>
  402c7a:	a201      	add	r2, pc, #4	; (adr r2, 402c80 <SenParseFrame+0x28>)
  402c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402c80:	00402c99 	.word	0x00402c99
  402c84:	00402caf 	.word	0x00402caf
  402c88:	00402cdf 	.word	0x00402cdf
  402c8c:	00402d01 	.word	0x00402d01
  402c90:	00402d2b 	.word	0x00402d2b
  402c94:	00402d99 	.word	0x00402d99
		{
			case q0:
				if(data==0x01)
  402c98:	79bb      	ldrb	r3, [r7, #6]
  402c9a:	2b01      	cmp	r3, #1
  402c9c:	f040 8182 	bne.w	402fa4 <SenParseFrame+0x34c>
				{
					sen1State.state = q1;
  402ca0:	4b94      	ldr	r3, [pc, #592]	; (402ef4 <SenParseFrame+0x29c>)
  402ca2:	2201      	movs	r2, #1
  402ca4:	701a      	strb	r2, [r3, #0]
					sen1State.sum = 0x01;
  402ca6:	4b93      	ldr	r3, [pc, #588]	; (402ef4 <SenParseFrame+0x29c>)
  402ca8:	2201      	movs	r2, #1
  402caa:	705a      	strb	r2, [r3, #1]
				}
				break;
  402cac:	e17a      	b.n	402fa4 <SenParseFrame+0x34c>
			case q1:
				if((data>127)&&BIT_IS_SET(data,0))
  402cae:	f997 3006 	ldrsb.w	r3, [r7, #6]
  402cb2:	2b00      	cmp	r3, #0
  402cb4:	da0f      	bge.n	402cd6 <SenParseFrame+0x7e>
  402cb6:	79bb      	ldrb	r3, [r7, #6]
  402cb8:	f003 0301 	and.w	r3, r3, #1
  402cbc:	2b00      	cmp	r3, #0
  402cbe:	d00a      	beq.n	402cd6 <SenParseFrame+0x7e>
				{
					sen1State.state = q2;
  402cc0:	4b8c      	ldr	r3, [pc, #560]	; (402ef4 <SenParseFrame+0x29c>)
  402cc2:	2202      	movs	r2, #2
  402cc4:	701a      	strb	r2, [r3, #0]
					sen1State.sum += data;
  402cc6:	4b8b      	ldr	r3, [pc, #556]	; (402ef4 <SenParseFrame+0x29c>)
  402cc8:	785a      	ldrb	r2, [r3, #1]
  402cca:	79bb      	ldrb	r3, [r7, #6]
  402ccc:	4413      	add	r3, r2
  402cce:	b2da      	uxtb	r2, r3
  402cd0:	4b88      	ldr	r3, [pc, #544]	; (402ef4 <SenParseFrame+0x29c>)
  402cd2:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen1State.state = q0;
				}
				break;
  402cd4:	e16d      	b.n	402fb2 <SenParseFrame+0x35a>
					sen1State.state = q2;
					sen1State.sum += data;
				}
				else
				{
					sen1State.state = q0;
  402cd6:	4b87      	ldr	r3, [pc, #540]	; (402ef4 <SenParseFrame+0x29c>)
  402cd8:	2200      	movs	r2, #0
  402cda:	701a      	strb	r2, [r3, #0]
				}
				break;
  402cdc:	e169      	b.n	402fb2 <SenParseFrame+0x35a>
			case q2:
				//Pleath Reading
				sen1State.tempPleath = data;
  402cde:	4a85      	ldr	r2, [pc, #532]	; (402ef4 <SenParseFrame+0x29c>)
  402ce0:	79bb      	ldrb	r3, [r7, #6]
  402ce2:	7113      	strb	r3, [r2, #4]
				sen1State.state = q3;
  402ce4:	4b83      	ldr	r3, [pc, #524]	; (402ef4 <SenParseFrame+0x29c>)
  402ce6:	2203      	movs	r2, #3
  402ce8:	701a      	strb	r2, [r3, #0]
				sen1State.sum += data;
  402cea:	4b82      	ldr	r3, [pc, #520]	; (402ef4 <SenParseFrame+0x29c>)
  402cec:	785a      	ldrb	r2, [r3, #1]
  402cee:	79bb      	ldrb	r3, [r7, #6]
  402cf0:	4413      	add	r3, r2
  402cf2:	b2da      	uxtb	r2, r3
  402cf4:	4b7f      	ldr	r3, [pc, #508]	; (402ef4 <SenParseFrame+0x29c>)
  402cf6:	705a      	strb	r2, [r3, #1]
				sen1State.pIndex = 3;
  402cf8:	4b7e      	ldr	r3, [pc, #504]	; (402ef4 <SenParseFrame+0x29c>)
  402cfa:	2203      	movs	r2, #3
  402cfc:	70da      	strb	r2, [r3, #3]
				break;
  402cfe:	e158      	b.n	402fb2 <SenParseFrame+0x35a>
			case q3:
				if(data<127)
  402d00:	79bb      	ldrb	r3, [r7, #6]
  402d02:	2b7e      	cmp	r3, #126	; 0x7e
  402d04:	d80d      	bhi.n	402d22 <SenParseFrame+0xca>
				{
					//HRMSB
					//hrtRate = ((uint16_t)(data&0x03))<<8;
					sen1Data.hrMsb = data;
  402d06:	4a7c      	ldr	r2, [pc, #496]	; (402ef8 <SenParseFrame+0x2a0>)
  402d08:	79bb      	ldrb	r3, [r7, #6]
  402d0a:	7013      	strb	r3, [r2, #0]
					sen1State.state = q4;
  402d0c:	4b79      	ldr	r3, [pc, #484]	; (402ef4 <SenParseFrame+0x29c>)
  402d0e:	2204      	movs	r2, #4
  402d10:	701a      	strb	r2, [r3, #0]
					sen1State.sum += data;
  402d12:	4b78      	ldr	r3, [pc, #480]	; (402ef4 <SenParseFrame+0x29c>)
  402d14:	785a      	ldrb	r2, [r3, #1]
  402d16:	79bb      	ldrb	r3, [r7, #6]
  402d18:	4413      	add	r3, r2
  402d1a:	b2da      	uxtb	r2, r3
  402d1c:	4b75      	ldr	r3, [pc, #468]	; (402ef4 <SenParseFrame+0x29c>)
  402d1e:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen1State.state = q0;
				}
				break;
  402d20:	e147      	b.n	402fb2 <SenParseFrame+0x35a>
					sen1State.state = q4;
					sen1State.sum += data;
				}
				else
				{
					sen1State.state = q0;
  402d22:	4b74      	ldr	r3, [pc, #464]	; (402ef4 <SenParseFrame+0x29c>)
  402d24:	2200      	movs	r2, #0
  402d26:	701a      	strb	r2, [r3, #0]
				}
				break;
  402d28:	e143      	b.n	402fb2 <SenParseFrame+0x35a>
			case q4:
				/* If Checksum matched */
				if(data==sen1State.sum)
  402d2a:	4b72      	ldr	r3, [pc, #456]	; (402ef4 <SenParseFrame+0x29c>)
  402d2c:	785b      	ldrb	r3, [r3, #1]
  402d2e:	79ba      	ldrb	r2, [r7, #6]
  402d30:	429a      	cmp	r2, r3
  402d32:	d12d      	bne.n	402d90 <SenParseFrame+0x138>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen1Data.pleathBuff, sen1State.tempPleath);
  402d34:	4b6f      	ldr	r3, [pc, #444]	; (402ef4 <SenParseFrame+0x29c>)
  402d36:	791b      	ldrb	r3, [r3, #4]
  402d38:	4619      	mov	r1, r3
  402d3a:	4870      	ldr	r0, [pc, #448]	; (402efc <SenParseFrame+0x2a4>)
  402d3c:	4b70      	ldr	r3, [pc, #448]	; (402f00 <SenParseFrame+0x2a8>)
  402d3e:	4798      	blx	r3
						{
							/* Write 0 to trigger circular buffer */
							CBuffWriteByte(&trigBuff, 0);
						}
					#else
						if(trigFound)
  402d40:	4b70      	ldr	r3, [pc, #448]	; (402f04 <SenParseFrame+0x2ac>)
  402d42:	781b      	ldrb	r3, [r3, #0]
  402d44:	2b00      	cmp	r3, #0
  402d46:	d009      	beq.n	402d5c <SenParseFrame+0x104>
						{
							GetTrigger(sen1State.tempPleath);
  402d48:	4b6a      	ldr	r3, [pc, #424]	; (402ef4 <SenParseFrame+0x29c>)
  402d4a:	791b      	ldrb	r3, [r3, #4]
  402d4c:	4618      	mov	r0, r3
  402d4e:	4b6e      	ldr	r3, [pc, #440]	; (402f08 <SenParseFrame+0x2b0>)
  402d50:	4798      	blx	r3
							/* Write 0 to trigger circular buffer */
							CBuffWriteByte(&trigBuff, 0);
  402d52:	2100      	movs	r1, #0
  402d54:	486d      	ldr	r0, [pc, #436]	; (402f0c <SenParseFrame+0x2b4>)
  402d56:	4b6a      	ldr	r3, [pc, #424]	; (402f00 <SenParseFrame+0x2a8>)
  402d58:	4798      	blx	r3
  402d5a:	e012      	b.n	402d82 <SenParseFrame+0x12a>
						}
						else
						{
							if(GetTrigger(sen1State.tempPleath))
  402d5c:	4b65      	ldr	r3, [pc, #404]	; (402ef4 <SenParseFrame+0x29c>)
  402d5e:	791b      	ldrb	r3, [r3, #4]
  402d60:	4618      	mov	r0, r3
  402d62:	4b69      	ldr	r3, [pc, #420]	; (402f08 <SenParseFrame+0x2b0>)
  402d64:	4798      	blx	r3
  402d66:	4603      	mov	r3, r0
  402d68:	2b00      	cmp	r3, #0
  402d6a:	d006      	beq.n	402d7a <SenParseFrame+0x122>
							{
								/* Write data value to trigger circular buffer */
								CBuffWriteByte(&trigBuff, sen1State.tempPleath);	
  402d6c:	4b61      	ldr	r3, [pc, #388]	; (402ef4 <SenParseFrame+0x29c>)
  402d6e:	791b      	ldrb	r3, [r3, #4]
  402d70:	4619      	mov	r1, r3
  402d72:	4866      	ldr	r0, [pc, #408]	; (402f0c <SenParseFrame+0x2b4>)
  402d74:	4b62      	ldr	r3, [pc, #392]	; (402f00 <SenParseFrame+0x2a8>)
  402d76:	4798      	blx	r3
  402d78:	e003      	b.n	402d82 <SenParseFrame+0x12a>
							}
							else
							{
								/* Write 0 to trigger circular buffer */
								CBuffWriteByte(&trigBuff, 0);
  402d7a:	2100      	movs	r1, #0
  402d7c:	4863      	ldr	r0, [pc, #396]	; (402f0c <SenParseFrame+0x2b4>)
  402d7e:	4b60      	ldr	r3, [pc, #384]	; (402f00 <SenParseFrame+0x2a8>)
  402d80:	4798      	blx	r3
							}
						}
					#endif
					
					sen1State.state = q5;
  402d82:	4b5c      	ldr	r3, [pc, #368]	; (402ef4 <SenParseFrame+0x29c>)
  402d84:	2205      	movs	r2, #5
  402d86:	701a      	strb	r2, [r3, #0]
					sen1State.ctr = 0;
  402d88:	4b5a      	ldr	r3, [pc, #360]	; (402ef4 <SenParseFrame+0x29c>)
  402d8a:	2200      	movs	r2, #0
  402d8c:	709a      	strb	r2, [r3, #2]
				}
				else
				{
					sen1State.state = q0;
				}
				break;
  402d8e:	e110      	b.n	402fb2 <SenParseFrame+0x35a>
					sen1State.state = q5;
					sen1State.ctr = 0;
				}
				else
				{
					sen1State.state = q0;
  402d90:	4b58      	ldr	r3, [pc, #352]	; (402ef4 <SenParseFrame+0x29c>)
  402d92:	2200      	movs	r2, #0
  402d94:	701a      	strb	r2, [r3, #0]
				}
				break;
  402d96:	e10c      	b.n	402fb2 <SenParseFrame+0x35a>
			case q5:
				sen1State.ctr++;
  402d98:	4b56      	ldr	r3, [pc, #344]	; (402ef4 <SenParseFrame+0x29c>)
  402d9a:	789b      	ldrb	r3, [r3, #2]
  402d9c:	3301      	adds	r3, #1
  402d9e:	b2da      	uxtb	r2, r3
  402da0:	4b54      	ldr	r3, [pc, #336]	; (402ef4 <SenParseFrame+0x29c>)
  402da2:	709a      	strb	r2, [r3, #2]
				if(sen1State.ctr == sen1State.pIndex)
  402da4:	4b53      	ldr	r3, [pc, #332]	; (402ef4 <SenParseFrame+0x29c>)
  402da6:	789a      	ldrb	r2, [r3, #2]
  402da8:	4b52      	ldr	r3, [pc, #328]	; (402ef4 <SenParseFrame+0x29c>)
  402daa:	78db      	ldrb	r3, [r3, #3]
  402dac:	429a      	cmp	r2, r3
  402dae:	d129      	bne.n	402e04 <SenParseFrame+0x1ac>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen1Data.pleathBuff, data);
  402db0:	79bb      	ldrb	r3, [r7, #6]
  402db2:	4619      	mov	r1, r3
  402db4:	4851      	ldr	r0, [pc, #324]	; (402efc <SenParseFrame+0x2a4>)
  402db6:	4b52      	ldr	r3, [pc, #328]	; (402f00 <SenParseFrame+0x2a8>)
  402db8:	4798      	blx	r3
						{
							/* Write 0 to trigger circular buffer */
							CBuffWriteByte(&trigBuff, 0);
						}
					#else
						if(trigFound)
  402dba:	4b52      	ldr	r3, [pc, #328]	; (402f04 <SenParseFrame+0x2ac>)
  402dbc:	781b      	ldrb	r3, [r3, #0]
  402dbe:	2b00      	cmp	r3, #0
  402dc0:	d008      	beq.n	402dd4 <SenParseFrame+0x17c>
						{
							GetTrigger(data);
  402dc2:	79bb      	ldrb	r3, [r7, #6]
  402dc4:	4618      	mov	r0, r3
  402dc6:	4b50      	ldr	r3, [pc, #320]	; (402f08 <SenParseFrame+0x2b0>)
  402dc8:	4798      	blx	r3
							/* Write 0 to trigger circular buffer */
							CBuffWriteByte(&trigBuff, 0);
  402dca:	2100      	movs	r1, #0
  402dcc:	484f      	ldr	r0, [pc, #316]	; (402f0c <SenParseFrame+0x2b4>)
  402dce:	4b4c      	ldr	r3, [pc, #304]	; (402f00 <SenParseFrame+0x2a8>)
  402dd0:	4798      	blx	r3
  402dd2:	e010      	b.n	402df6 <SenParseFrame+0x19e>
						}
						else
						{
							if (GetTrigger(data))
  402dd4:	79bb      	ldrb	r3, [r7, #6]
  402dd6:	4618      	mov	r0, r3
  402dd8:	4b4b      	ldr	r3, [pc, #300]	; (402f08 <SenParseFrame+0x2b0>)
  402dda:	4798      	blx	r3
  402ddc:	4603      	mov	r3, r0
  402dde:	2b00      	cmp	r3, #0
  402de0:	d005      	beq.n	402dee <SenParseFrame+0x196>
							{
								/* Write data value to trigger circular buffer */
								CBuffWriteByte(&trigBuff, data);
  402de2:	79bb      	ldrb	r3, [r7, #6]
  402de4:	4619      	mov	r1, r3
  402de6:	4849      	ldr	r0, [pc, #292]	; (402f0c <SenParseFrame+0x2b4>)
  402de8:	4b45      	ldr	r3, [pc, #276]	; (402f00 <SenParseFrame+0x2a8>)
  402dea:	4798      	blx	r3
  402dec:	e003      	b.n	402df6 <SenParseFrame+0x19e>
							}
							else
							{
								/* Write 0 to trigger circular buffer */
								CBuffWriteByte(&trigBuff, 0);
  402dee:	2100      	movs	r1, #0
  402df0:	4846      	ldr	r0, [pc, #280]	; (402f0c <SenParseFrame+0x2b4>)
  402df2:	4b43      	ldr	r3, [pc, #268]	; (402f00 <SenParseFrame+0x2a8>)
  402df4:	4798      	blx	r3
							}
						}
					#endif
					
					sen1State.pIndex += 5;
  402df6:	4b3f      	ldr	r3, [pc, #252]	; (402ef4 <SenParseFrame+0x29c>)
  402df8:	78db      	ldrb	r3, [r3, #3]
  402dfa:	3305      	adds	r3, #5
  402dfc:	b2da      	uxtb	r2, r3
  402dfe:	4b3d      	ldr	r3, [pc, #244]	; (402ef4 <SenParseFrame+0x29c>)
  402e00:	70da      	strb	r2, [r3, #3]
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  402e02:	e0d1      	b.n	402fa8 <SenParseFrame+0x350>
						}
					#endif
					
					sen1State.pIndex += 5;
				}
				else if(sen1State.ctr == 4)
  402e04:	4b3b      	ldr	r3, [pc, #236]	; (402ef4 <SenParseFrame+0x29c>)
  402e06:	789b      	ldrb	r3, [r3, #2]
  402e08:	2b04      	cmp	r3, #4
  402e0a:	d103      	bne.n	402e14 <SenParseFrame+0x1bc>
				{
					sen1Data.hrLsb = data;
  402e0c:	4a3a      	ldr	r2, [pc, #232]	; (402ef8 <SenParseFrame+0x2a0>)
  402e0e:	79bb      	ldrb	r3, [r7, #6]
  402e10:	7053      	strb	r3, [r2, #1]
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  402e12:	e0c9      	b.n	402fa8 <SenParseFrame+0x350>
				}
				else if(sen1State.ctr == 4)
				{
					sen1Data.hrLsb = data;
				}
				else if(sen1State.ctr == 9)
  402e14:	4b37      	ldr	r3, [pc, #220]	; (402ef4 <SenParseFrame+0x29c>)
  402e16:	789b      	ldrb	r3, [r3, #2]
  402e18:	2b09      	cmp	r3, #9
  402e1a:	d103      	bne.n	402e24 <SenParseFrame+0x1cc>
				{
					sen1Data.spo2 = data;
  402e1c:	4a36      	ldr	r2, [pc, #216]	; (402ef8 <SenParseFrame+0x2a0>)
  402e1e:	79bb      	ldrb	r3, [r7, #6]
  402e20:	7093      	strb	r3, [r2, #2]
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  402e22:	e0c1      	b.n	402fa8 <SenParseFrame+0x350>
				}
				else if(sen1State.ctr == 9)
				{
					sen1Data.spo2 = data;
				}
				else if(sen1State.ctr==120)
  402e24:	4b33      	ldr	r3, [pc, #204]	; (402ef4 <SenParseFrame+0x29c>)
  402e26:	789b      	ldrb	r3, [r3, #2]
  402e28:	2b78      	cmp	r3, #120	; 0x78
  402e2a:	f040 80bd 	bne.w	402fa8 <SenParseFrame+0x350>
				{
					sen1State.state = q0;					
  402e2e:	4b31      	ldr	r3, [pc, #196]	; (402ef4 <SenParseFrame+0x29c>)
  402e30:	2200      	movs	r2, #0
  402e32:	701a      	strb	r2, [r3, #0]
				}
				break;
  402e34:	bf00      	nop
  402e36:	e0b7      	b.n	402fa8 <SenParseFrame+0x350>
		}
	}
	else
	{
		switch(sen2State.state)
  402e38:	4b35      	ldr	r3, [pc, #212]	; (402f10 <SenParseFrame+0x2b8>)
  402e3a:	781b      	ldrb	r3, [r3, #0]
  402e3c:	2b05      	cmp	r3, #5
  402e3e:	f200 80b8 	bhi.w	402fb2 <SenParseFrame+0x35a>
  402e42:	a201      	add	r2, pc, #4	; (adr r2, 402e48 <SenParseFrame+0x1f0>)
  402e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402e48:	00402e61 	.word	0x00402e61
  402e4c:	00402e77 	.word	0x00402e77
  402e50:	00402ea7 	.word	0x00402ea7
  402e54:	00402ec9 	.word	0x00402ec9
  402e58:	00402f19 	.word	0x00402f19
  402e5c:	00402f45 	.word	0x00402f45
 		{
			case q0:
				if(data==0x01)
  402e60:	79bb      	ldrb	r3, [r7, #6]
  402e62:	2b01      	cmp	r3, #1
  402e64:	f040 80a2 	bne.w	402fac <SenParseFrame+0x354>
				{
					sen2State.state = q1;
  402e68:	4b29      	ldr	r3, [pc, #164]	; (402f10 <SenParseFrame+0x2b8>)
  402e6a:	2201      	movs	r2, #1
  402e6c:	701a      	strb	r2, [r3, #0]
					sen2State.sum = 0x01;
  402e6e:	4b28      	ldr	r3, [pc, #160]	; (402f10 <SenParseFrame+0x2b8>)
  402e70:	2201      	movs	r2, #1
  402e72:	705a      	strb	r2, [r3, #1]
				}
				break;
  402e74:	e09a      	b.n	402fac <SenParseFrame+0x354>
			case q1:
				if((data>127)&&BIT_IS_SET(data,0))
  402e76:	f997 3006 	ldrsb.w	r3, [r7, #6]
  402e7a:	2b00      	cmp	r3, #0
  402e7c:	da0f      	bge.n	402e9e <SenParseFrame+0x246>
  402e7e:	79bb      	ldrb	r3, [r7, #6]
  402e80:	f003 0301 	and.w	r3, r3, #1
  402e84:	2b00      	cmp	r3, #0
  402e86:	d00a      	beq.n	402e9e <SenParseFrame+0x246>
				{
					sen2State.state = q2;
  402e88:	4b21      	ldr	r3, [pc, #132]	; (402f10 <SenParseFrame+0x2b8>)
  402e8a:	2202      	movs	r2, #2
  402e8c:	701a      	strb	r2, [r3, #0]
					sen2State.sum += data;
  402e8e:	4b20      	ldr	r3, [pc, #128]	; (402f10 <SenParseFrame+0x2b8>)
  402e90:	785a      	ldrb	r2, [r3, #1]
  402e92:	79bb      	ldrb	r3, [r7, #6]
  402e94:	4413      	add	r3, r2
  402e96:	b2da      	uxtb	r2, r3
  402e98:	4b1d      	ldr	r3, [pc, #116]	; (402f10 <SenParseFrame+0x2b8>)
  402e9a:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen2State.state = q0;
				}
				break;
  402e9c:	e089      	b.n	402fb2 <SenParseFrame+0x35a>
					sen2State.state = q2;
					sen2State.sum += data;
				}
				else
				{
					sen2State.state = q0;
  402e9e:	4b1c      	ldr	r3, [pc, #112]	; (402f10 <SenParseFrame+0x2b8>)
  402ea0:	2200      	movs	r2, #0
  402ea2:	701a      	strb	r2, [r3, #0]
				}
				break;
  402ea4:	e085      	b.n	402fb2 <SenParseFrame+0x35a>
			case q2:
				//Pleath Reading
				sen2State.tempPleath = data;
  402ea6:	4a1a      	ldr	r2, [pc, #104]	; (402f10 <SenParseFrame+0x2b8>)
  402ea8:	79bb      	ldrb	r3, [r7, #6]
  402eaa:	7113      	strb	r3, [r2, #4]
				sen2State.state = q3;
  402eac:	4b18      	ldr	r3, [pc, #96]	; (402f10 <SenParseFrame+0x2b8>)
  402eae:	2203      	movs	r2, #3
  402eb0:	701a      	strb	r2, [r3, #0]
				sen2State.sum += data;
  402eb2:	4b17      	ldr	r3, [pc, #92]	; (402f10 <SenParseFrame+0x2b8>)
  402eb4:	785a      	ldrb	r2, [r3, #1]
  402eb6:	79bb      	ldrb	r3, [r7, #6]
  402eb8:	4413      	add	r3, r2
  402eba:	b2da      	uxtb	r2, r3
  402ebc:	4b14      	ldr	r3, [pc, #80]	; (402f10 <SenParseFrame+0x2b8>)
  402ebe:	705a      	strb	r2, [r3, #1]
				sen2State.pIndex = 3;
  402ec0:	4b13      	ldr	r3, [pc, #76]	; (402f10 <SenParseFrame+0x2b8>)
  402ec2:	2203      	movs	r2, #3
  402ec4:	70da      	strb	r2, [r3, #3]
				break;
  402ec6:	e074      	b.n	402fb2 <SenParseFrame+0x35a>
			case q3:
				if(data<127)
  402ec8:	79bb      	ldrb	r3, [r7, #6]
  402eca:	2b7e      	cmp	r3, #126	; 0x7e
  402ecc:	d80d      	bhi.n	402eea <SenParseFrame+0x292>
				{
					//HRMSB
					//hrtRate = ((uint16_t)(data&0x03))<<8;
					sen2Data.hrMsb = data;
  402ece:	4a11      	ldr	r2, [pc, #68]	; (402f14 <SenParseFrame+0x2bc>)
  402ed0:	79bb      	ldrb	r3, [r7, #6]
  402ed2:	7013      	strb	r3, [r2, #0]
					sen2State.state = q4;
  402ed4:	4b0e      	ldr	r3, [pc, #56]	; (402f10 <SenParseFrame+0x2b8>)
  402ed6:	2204      	movs	r2, #4
  402ed8:	701a      	strb	r2, [r3, #0]
					sen2State.sum += data;
  402eda:	4b0d      	ldr	r3, [pc, #52]	; (402f10 <SenParseFrame+0x2b8>)
  402edc:	785a      	ldrb	r2, [r3, #1]
  402ede:	79bb      	ldrb	r3, [r7, #6]
  402ee0:	4413      	add	r3, r2
  402ee2:	b2da      	uxtb	r2, r3
  402ee4:	4b0a      	ldr	r3, [pc, #40]	; (402f10 <SenParseFrame+0x2b8>)
  402ee6:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					sen2State.state = q0;
				}
				break;
  402ee8:	e063      	b.n	402fb2 <SenParseFrame+0x35a>
					sen2State.state = q4;
					sen2State.sum += data;
				}
				else
				{
					sen2State.state = q0;
  402eea:	4b09      	ldr	r3, [pc, #36]	; (402f10 <SenParseFrame+0x2b8>)
  402eec:	2200      	movs	r2, #0
  402eee:	701a      	strb	r2, [r3, #0]
				}
				break;
  402ef0:	e05f      	b.n	402fb2 <SenParseFrame+0x35a>
  402ef2:	bf00      	nop
  402ef4:	20000e20 	.word	0x20000e20
  402ef8:	20000bdc 	.word	0x20000bdc
  402efc:	20000bdf 	.word	0x20000bdf
  402f00:	004001cd 	.word	0x004001cd
  402f04:	20000a90 	.word	0x20000a90
  402f08:	00402fcd 	.word	0x00402fcd
  402f0c:	20000d44 	.word	0x20000d44
  402f10:	20000e18 	.word	0x20000e18
  402f14:	20000b0c 	.word	0x20000b0c
			case q4:
				/* If Checksum matched */
				if(data==sen2State.sum)
  402f18:	4b28      	ldr	r3, [pc, #160]	; (402fbc <SenParseFrame+0x364>)
  402f1a:	785b      	ldrb	r3, [r3, #1]
  402f1c:	79ba      	ldrb	r2, [r7, #6]
  402f1e:	429a      	cmp	r2, r3
  402f20:	d10c      	bne.n	402f3c <SenParseFrame+0x2e4>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen2Data.pleathBuff, sen2State.tempPleath);
  402f22:	4b26      	ldr	r3, [pc, #152]	; (402fbc <SenParseFrame+0x364>)
  402f24:	791b      	ldrb	r3, [r3, #4]
  402f26:	4619      	mov	r1, r3
  402f28:	4825      	ldr	r0, [pc, #148]	; (402fc0 <SenParseFrame+0x368>)
  402f2a:	4b26      	ldr	r3, [pc, #152]	; (402fc4 <SenParseFrame+0x36c>)
  402f2c:	4798      	blx	r3
					sen2State.state = q5;
  402f2e:	4b23      	ldr	r3, [pc, #140]	; (402fbc <SenParseFrame+0x364>)
  402f30:	2205      	movs	r2, #5
  402f32:	701a      	strb	r2, [r3, #0]
					sen2State.ctr = 0;
  402f34:	4b21      	ldr	r3, [pc, #132]	; (402fbc <SenParseFrame+0x364>)
  402f36:	2200      	movs	r2, #0
  402f38:	709a      	strb	r2, [r3, #2]
				}
				else
				{
					sen2State.state = q0;
				}
				break;
  402f3a:	e03a      	b.n	402fb2 <SenParseFrame+0x35a>
					sen2State.state = q5;
					sen2State.ctr = 0;
				}
				else
				{
					sen2State.state = q0;
  402f3c:	4b1f      	ldr	r3, [pc, #124]	; (402fbc <SenParseFrame+0x364>)
  402f3e:	2200      	movs	r2, #0
  402f40:	701a      	strb	r2, [r3, #0]
				}
				break;
  402f42:	e036      	b.n	402fb2 <SenParseFrame+0x35a>
			case q5:
				sen2State.ctr++;
  402f44:	4b1d      	ldr	r3, [pc, #116]	; (402fbc <SenParseFrame+0x364>)
  402f46:	789b      	ldrb	r3, [r3, #2]
  402f48:	3301      	adds	r3, #1
  402f4a:	b2da      	uxtb	r2, r3
  402f4c:	4b1b      	ldr	r3, [pc, #108]	; (402fbc <SenParseFrame+0x364>)
  402f4e:	709a      	strb	r2, [r3, #2]
				if(sen2State.ctr == sen2State.pIndex)
  402f50:	4b1a      	ldr	r3, [pc, #104]	; (402fbc <SenParseFrame+0x364>)
  402f52:	789a      	ldrb	r2, [r3, #2]
  402f54:	4b19      	ldr	r3, [pc, #100]	; (402fbc <SenParseFrame+0x364>)
  402f56:	78db      	ldrb	r3, [r3, #3]
  402f58:	429a      	cmp	r2, r3
  402f5a:	d10b      	bne.n	402f74 <SenParseFrame+0x31c>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen2Data.pleathBuff, data);
  402f5c:	79bb      	ldrb	r3, [r7, #6]
  402f5e:	4619      	mov	r1, r3
  402f60:	4817      	ldr	r0, [pc, #92]	; (402fc0 <SenParseFrame+0x368>)
  402f62:	4b18      	ldr	r3, [pc, #96]	; (402fc4 <SenParseFrame+0x36c>)
  402f64:	4798      	blx	r3
					sen2State.pIndex += 5;
  402f66:	4b15      	ldr	r3, [pc, #84]	; (402fbc <SenParseFrame+0x364>)
  402f68:	78db      	ldrb	r3, [r3, #3]
  402f6a:	3305      	adds	r3, #5
  402f6c:	b2da      	uxtb	r2, r3
  402f6e:	4b13      	ldr	r3, [pc, #76]	; (402fbc <SenParseFrame+0x364>)
  402f70:	70da      	strb	r2, [r3, #3]
				}
				else if(sen2State.ctr==120)
				{
					sen2State.state = q0;
				}
				break;
  402f72:	e01d      	b.n	402fb0 <SenParseFrame+0x358>
				{
					/* Write data value to pleath circular buffer */
					CBuffWriteByte(&sen2Data.pleathBuff, data);
					sen2State.pIndex += 5;
				}
				else if(sen2State.ctr == 4)
  402f74:	4b11      	ldr	r3, [pc, #68]	; (402fbc <SenParseFrame+0x364>)
  402f76:	789b      	ldrb	r3, [r3, #2]
  402f78:	2b04      	cmp	r3, #4
  402f7a:	d103      	bne.n	402f84 <SenParseFrame+0x32c>
				{
					sen2Data.hrLsb = data;
  402f7c:	4a12      	ldr	r2, [pc, #72]	; (402fc8 <SenParseFrame+0x370>)
  402f7e:	79bb      	ldrb	r3, [r7, #6]
  402f80:	7053      	strb	r3, [r2, #1]
				}
				else if(sen2State.ctr==120)
				{
					sen2State.state = q0;
				}
				break;
  402f82:	e015      	b.n	402fb0 <SenParseFrame+0x358>
				}
				else if(sen2State.ctr == 4)
				{
					sen2Data.hrLsb = data;
				}
				else if(sen2State.ctr == 9)
  402f84:	4b0d      	ldr	r3, [pc, #52]	; (402fbc <SenParseFrame+0x364>)
  402f86:	789b      	ldrb	r3, [r3, #2]
  402f88:	2b09      	cmp	r3, #9
  402f8a:	d103      	bne.n	402f94 <SenParseFrame+0x33c>
				{
					sen2Data.spo2 = data;
  402f8c:	4a0e      	ldr	r2, [pc, #56]	; (402fc8 <SenParseFrame+0x370>)
  402f8e:	79bb      	ldrb	r3, [r7, #6]
  402f90:	7093      	strb	r3, [r2, #2]
				}
				else if(sen2State.ctr==120)
				{
					sen2State.state = q0;
				}
				break;
  402f92:	e00d      	b.n	402fb0 <SenParseFrame+0x358>
				}
				else if(sen2State.ctr == 9)
				{
					sen2Data.spo2 = data;
				}
				else if(sen2State.ctr==120)
  402f94:	4b09      	ldr	r3, [pc, #36]	; (402fbc <SenParseFrame+0x364>)
  402f96:	789b      	ldrb	r3, [r3, #2]
  402f98:	2b78      	cmp	r3, #120	; 0x78
  402f9a:	d109      	bne.n	402fb0 <SenParseFrame+0x358>
				{
					sen2State.state = q0;
  402f9c:	4b07      	ldr	r3, [pc, #28]	; (402fbc <SenParseFrame+0x364>)
  402f9e:	2200      	movs	r2, #0
  402fa0:	701a      	strb	r2, [r3, #0]
				}
				break;
  402fa2:	e005      	b.n	402fb0 <SenParseFrame+0x358>
				if(data==0x01)
				{
					sen1State.state = q1;
					sen1State.sum = 0x01;
				}
				break;
  402fa4:	bf00      	nop
  402fa6:	e004      	b.n	402fb2 <SenParseFrame+0x35a>
				}
				else if(sen1State.ctr==120)
				{
					sen1State.state = q0;					
				}
				break;
  402fa8:	bf00      	nop
  402faa:	e002      	b.n	402fb2 <SenParseFrame+0x35a>
				if(data==0x01)
				{
					sen2State.state = q1;
					sen2State.sum = 0x01;
				}
				break;
  402fac:	bf00      	nop
  402fae:	e000      	b.n	402fb2 <SenParseFrame+0x35a>
				}
				else if(sen2State.ctr==120)
				{
					sen2State.state = q0;
				}
				break;
  402fb0:	bf00      	nop
 		}
	}
}
  402fb2:	bf00      	nop
  402fb4:	3708      	adds	r7, #8
  402fb6:	46bd      	mov	sp, r7
  402fb8:	bd80      	pop	{r7, pc}
  402fba:	bf00      	nop
  402fbc:	20000e18 	.word	0x20000e18
  402fc0:	20000b0f 	.word	0x20000b0f
  402fc4:	004001cd 	.word	0x004001cd
  402fc8:	20000b0c 	.word	0x20000b0c

00402fcc <GetTrigger>:

uint8_t GetTrigger(uint8_t currPleath)
{
  402fcc:	b480      	push	{r7}
  402fce:	b085      	sub	sp, #20
  402fd0:	af00      	add	r7, sp, #0
  402fd2:	4603      	mov	r3, r0
  402fd4:	71fb      	strb	r3, [r7, #7]
	int8_t diff = (int8_t)prevPleath - (int8_t)currPleath;
  402fd6:	4b35      	ldr	r3, [pc, #212]	; (4030ac <GetTrigger+0xe0>)
  402fd8:	781a      	ldrb	r2, [r3, #0]
  402fda:	79fb      	ldrb	r3, [r7, #7]
  402fdc:	1ad3      	subs	r3, r2, r3
  402fde:	b2db      	uxtb	r3, r3
  402fe0:	73fb      	strb	r3, [r7, #15]
				ctr = 0;
			}
		}
	#else
		/* Use peak detection algorithm for trigger calculation */
		if(rising)
  402fe2:	4b33      	ldr	r3, [pc, #204]	; (4030b0 <GetTrigger+0xe4>)
  402fe4:	781b      	ldrb	r3, [r3, #0]
  402fe6:	2b00      	cmp	r3, #0
  402fe8:	d03c      	beq.n	403064 <GetTrigger+0x98>
		{
			if(diff > 0)
  402fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402fee:	2b00      	cmp	r3, #0
  402ff0:	dd34      	ble.n	40305c <GetTrigger+0x90>
			{
				ctr += 1;
  402ff2:	4b30      	ldr	r3, [pc, #192]	; (4030b4 <GetTrigger+0xe8>)
  402ff4:	781b      	ldrb	r3, [r3, #0]
  402ff6:	3301      	adds	r3, #1
  402ff8:	b2da      	uxtb	r2, r3
  402ffa:	4b2e      	ldr	r3, [pc, #184]	; (4030b4 <GetTrigger+0xe8>)
  402ffc:	701a      	strb	r2, [r3, #0]
				if(ctr >= PLEATH_DIFF_CYCLES)
  402ffe:	4b2d      	ldr	r3, [pc, #180]	; (4030b4 <GetTrigger+0xe8>)
  403000:	781b      	ldrb	r3, [r3, #0]
  403002:	2b01      	cmp	r3, #1
  403004:	d947      	bls.n	403096 <GetTrigger+0xca>
				{
					/* This flag will be reset in the pressure control loop */
					if(!trigFound)
  403006:	4b2c      	ldr	r3, [pc, #176]	; (4030b8 <GetTrigger+0xec>)
  403008:	781b      	ldrb	r3, [r3, #0]
  40300a:	2b00      	cmp	r3, #0
  40300c:	d102      	bne.n	403014 <GetTrigger+0x48>
						trigFound = 1;
  40300e:	4b2a      	ldr	r3, [pc, #168]	; (4030b8 <GetTrigger+0xec>)
  403010:	2201      	movs	r2, #1
  403012:	701a      	strb	r2, [r3, #0]
					rising = 0;
  403014:	4b26      	ldr	r3, [pc, #152]	; (4030b0 <GetTrigger+0xe4>)
  403016:	2200      	movs	r2, #0
  403018:	701a      	strb	r2, [r3, #0]
					ctr = 0;
  40301a:	4b26      	ldr	r3, [pc, #152]	; (4030b4 <GetTrigger+0xe8>)
  40301c:	2200      	movs	r2, #0
  40301e:	701a      	strb	r2, [r3, #0]

					avgCycleTime = (prevCycleTime[0]+prevCycleTime[1]+prevCycleTime[2]+cycleTime)>>2;
  403020:	4b26      	ldr	r3, [pc, #152]	; (4030bc <GetTrigger+0xf0>)
  403022:	681a      	ldr	r2, [r3, #0]
  403024:	4b25      	ldr	r3, [pc, #148]	; (4030bc <GetTrigger+0xf0>)
  403026:	685b      	ldr	r3, [r3, #4]
  403028:	441a      	add	r2, r3
  40302a:	4b24      	ldr	r3, [pc, #144]	; (4030bc <GetTrigger+0xf0>)
  40302c:	689b      	ldr	r3, [r3, #8]
  40302e:	441a      	add	r2, r3
  403030:	4b23      	ldr	r3, [pc, #140]	; (4030c0 <GetTrigger+0xf4>)
  403032:	681b      	ldr	r3, [r3, #0]
  403034:	4413      	add	r3, r2
  403036:	089b      	lsrs	r3, r3, #2
  403038:	4a22      	ldr	r2, [pc, #136]	; (4030c4 <GetTrigger+0xf8>)
  40303a:	6013      	str	r3, [r2, #0]
					prevCycleTime[0] = prevCycleTime[1];
  40303c:	4b1f      	ldr	r3, [pc, #124]	; (4030bc <GetTrigger+0xf0>)
  40303e:	685b      	ldr	r3, [r3, #4]
  403040:	4a1e      	ldr	r2, [pc, #120]	; (4030bc <GetTrigger+0xf0>)
  403042:	6013      	str	r3, [r2, #0]
					prevCycleTime[1] = prevCycleTime[2];
  403044:	4b1d      	ldr	r3, [pc, #116]	; (4030bc <GetTrigger+0xf0>)
  403046:	689b      	ldr	r3, [r3, #8]
  403048:	4a1c      	ldr	r2, [pc, #112]	; (4030bc <GetTrigger+0xf0>)
  40304a:	6053      	str	r3, [r2, #4]
					prevCycleTime[2] = cycleTime;
  40304c:	4b1c      	ldr	r3, [pc, #112]	; (4030c0 <GetTrigger+0xf4>)
  40304e:	681b      	ldr	r3, [r3, #0]
  403050:	4a1a      	ldr	r2, [pc, #104]	; (4030bc <GetTrigger+0xf0>)
  403052:	6093      	str	r3, [r2, #8]
					cycleTime = 0;
  403054:	4b1a      	ldr	r3, [pc, #104]	; (4030c0 <GetTrigger+0xf4>)
  403056:	2200      	movs	r2, #0
  403058:	601a      	str	r2, [r3, #0]
  40305a:	e01c      	b.n	403096 <GetTrigger+0xca>
				}
			}
			else
			{
				ctr = 0;
  40305c:	4b15      	ldr	r3, [pc, #84]	; (4030b4 <GetTrigger+0xe8>)
  40305e:	2200      	movs	r2, #0
  403060:	701a      	strb	r2, [r3, #0]
  403062:	e018      	b.n	403096 <GetTrigger+0xca>
			}
		}
		else
		{
			if(diff <= -PLEATH_DIFF_THRESHOLD)
  403064:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403068:	f113 0f02 	cmn.w	r3, #2
  40306c:	da10      	bge.n	403090 <GetTrigger+0xc4>
			{
				ctr += 1;
  40306e:	4b11      	ldr	r3, [pc, #68]	; (4030b4 <GetTrigger+0xe8>)
  403070:	781b      	ldrb	r3, [r3, #0]
  403072:	3301      	adds	r3, #1
  403074:	b2da      	uxtb	r2, r3
  403076:	4b0f      	ldr	r3, [pc, #60]	; (4030b4 <GetTrigger+0xe8>)
  403078:	701a      	strb	r2, [r3, #0]
				if(ctr >= PLEATH_DIFF_CYCLES)
  40307a:	4b0e      	ldr	r3, [pc, #56]	; (4030b4 <GetTrigger+0xe8>)
  40307c:	781b      	ldrb	r3, [r3, #0]
  40307e:	2b01      	cmp	r3, #1
  403080:	d909      	bls.n	403096 <GetTrigger+0xca>
				{
					rising = 1;
  403082:	4b0b      	ldr	r3, [pc, #44]	; (4030b0 <GetTrigger+0xe4>)
  403084:	2201      	movs	r2, #1
  403086:	701a      	strb	r2, [r3, #0]
					ctr = 0;
  403088:	4b0a      	ldr	r3, [pc, #40]	; (4030b4 <GetTrigger+0xe8>)
  40308a:	2200      	movs	r2, #0
  40308c:	701a      	strb	r2, [r3, #0]
  40308e:	e002      	b.n	403096 <GetTrigger+0xca>
				}
			}
			else
			{
				ctr = 0;
  403090:	4b08      	ldr	r3, [pc, #32]	; (4030b4 <GetTrigger+0xe8>)
  403092:	2200      	movs	r2, #0
  403094:	701a      	strb	r2, [r3, #0]
			}
		}
	#endif
	
	prevPleath = currPleath;
  403096:	4a05      	ldr	r2, [pc, #20]	; (4030ac <GetTrigger+0xe0>)
  403098:	79fb      	ldrb	r3, [r7, #7]
  40309a:	7013      	strb	r3, [r2, #0]
	return trigFound;
  40309c:	4b06      	ldr	r3, [pc, #24]	; (4030b8 <GetTrigger+0xec>)
  40309e:	781b      	ldrb	r3, [r3, #0]
}
  4030a0:	4618      	mov	r0, r3
  4030a2:	3714      	adds	r7, #20
  4030a4:	46bd      	mov	sp, r7
  4030a6:	bc80      	pop	{r7}
  4030a8:	4770      	bx	lr
  4030aa:	bf00      	nop
  4030ac:	20000a91 	.word	0x20000a91
  4030b0:	20000a92 	.word	0x20000a92
  4030b4:	20000ab4 	.word	0x20000ab4
  4030b8:	20000a90 	.word	0x20000a90
  4030bc:	20000a94 	.word	0x20000a94
  4030c0:	20000aa4 	.word	0x20000aa4
  4030c4:	20000aa0 	.word	0x20000aa0

004030c8 <ActivateValves>:

void ActivateValves(void)
{
  4030c8:	b580      	push	{r7, lr}
  4030ca:	b084      	sub	sp, #16
  4030cc:	af00      	add	r7, sp, #0
	#ifdef CTRL_TYPE_PRESSURE
		uint16_t temp = 0;
  4030ce:	2300      	movs	r3, #0
  4030d0:	81fb      	strh	r3, [r7, #14]
		float pVal = 0;
  4030d2:	f04f 0300 	mov.w	r3, #0
  4030d6:	60bb      	str	r3, [r7, #8]
		uint8_t pBuff[3];
	#endif

	if(trigFound)
  4030d8:	4b66      	ldr	r3, [pc, #408]	; (403274 <ActivateValves+0x1ac>)
  4030da:	781b      	ldrb	r3, [r3, #0]
  4030dc:	2b00      	cmp	r3, #0
  4030de:	f000 80c5 	beq.w	40326c <ActivateValves+0x1a4>
	{
		switch(ctrlState)
  4030e2:	4b65      	ldr	r3, [pc, #404]	; (403278 <ActivateValves+0x1b0>)
  4030e4:	781b      	ldrb	r3, [r3, #0]
  4030e6:	2b04      	cmp	r3, #4
  4030e8:	f200 80bd 	bhi.w	403266 <ActivateValves+0x19e>
  4030ec:	a201      	add	r2, pc, #4	; (adr r2, 4030f4 <ActivateValves+0x2c>)
  4030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4030f2:	bf00      	nop
  4030f4:	00403109 	.word	0x00403109
  4030f8:	0040314d 	.word	0x0040314d
  4030fc:	0040320f 	.word	0x0040320f
  403100:	00403231 	.word	0x00403231
  403104:	00403253 	.word	0x00403253
		{
			#if defined(ALGO_TYPE_PK_DET) 
			case insertDelay:
				tickDur = avgCycleTime - delayParam;
  403108:	4b5c      	ldr	r3, [pc, #368]	; (40327c <ActivateValves+0x1b4>)
  40310a:	681a      	ldr	r2, [r3, #0]
  40310c:	4b5c      	ldr	r3, [pc, #368]	; (403280 <ActivateValves+0x1b8>)
  40310e:	681b      	ldr	r3, [r3, #0]
  403110:	1ad3      	subs	r3, r2, r3
  403112:	4a5c      	ldr	r2, [pc, #368]	; (403284 <ActivateValves+0x1bc>)
  403114:	6013      	str	r3, [r2, #0]
				/* This indicates overflow occurred */
				if(tickDur>10000)
  403116:	4b5b      	ldr	r3, [pc, #364]	; (403284 <ActivateValves+0x1bc>)
  403118:	681b      	ldr	r3, [r3, #0]
  40311a:	f242 7210 	movw	r2, #10000	; 0x2710
  40311e:	4293      	cmp	r3, r2
  403120:	d906      	bls.n	403130 <ActivateValves+0x68>
				{
					tickDur = 0;
  403122:	4b58      	ldr	r3, [pc, #352]	; (403284 <ActivateValves+0x1bc>)
  403124:	2200      	movs	r2, #0
  403126:	601a      	str	r2, [r3, #0]
					trigFound = 0;
  403128:	4b52      	ldr	r3, [pc, #328]	; (403274 <ActivateValves+0x1ac>)
  40312a:	2200      	movs	r2, #0
  40312c:	701a      	strb	r2, [r3, #0]
					tickCount = 0;
					tickDur = delayParam;
					ctrlState = waitCycles;
					nextCtrlState = fillCuff;
				}
				break;
  40312e:	e09d      	b.n	40326c <ActivateValves+0x1a4>
					tickDur = 0;
					trigFound = 0;
				}
				else
				{
					tickCount = 0;
  403130:	4b55      	ldr	r3, [pc, #340]	; (403288 <ActivateValves+0x1c0>)
  403132:	2200      	movs	r2, #0
  403134:	601a      	str	r2, [r3, #0]
					tickDur = delayParam;
  403136:	4b52      	ldr	r3, [pc, #328]	; (403280 <ActivateValves+0x1b8>)
  403138:	681b      	ldr	r3, [r3, #0]
  40313a:	4a52      	ldr	r2, [pc, #328]	; (403284 <ActivateValves+0x1bc>)
  40313c:	6013      	str	r3, [r2, #0]
					ctrlState = waitCycles;
  40313e:	4b4e      	ldr	r3, [pc, #312]	; (403278 <ActivateValves+0x1b0>)
  403140:	2202      	movs	r2, #2
  403142:	701a      	strb	r2, [r3, #0]
					nextCtrlState = fillCuff;
  403144:	4b51      	ldr	r3, [pc, #324]	; (40328c <ActivateValves+0x1c4>)
  403146:	2201      	movs	r2, #1
  403148:	701a      	strb	r2, [r3, #0]
				}
				break;
  40314a:	e08f      	b.n	40326c <ActivateValves+0x1a4>
					ctrlState = waitCycles;
					nextCtrlState = holdCuff;
				#else
					#ifndef ALGO_TEST_MODE_EN
						/* If operating in pressure control mode */
						ReadPressureSen(BOARD_TWI, ADDR_PSEN1, pBuff);
  40314c:	1d3b      	adds	r3, r7, #4
  40314e:	461a      	mov	r2, r3
  403150:	2128      	movs	r1, #40	; 0x28
  403152:	484f      	ldr	r0, [pc, #316]	; (403290 <ActivateValves+0x1c8>)
  403154:	4b4f      	ldr	r3, [pc, #316]	; (403294 <ActivateValves+0x1cc>)
  403156:	4798      	blx	r3
						temp = ((((uint16_t)pBuff[0])<<8)| pBuff[1]);
  403158:	793b      	ldrb	r3, [r7, #4]
  40315a:	021b      	lsls	r3, r3, #8
  40315c:	b21a      	sxth	r2, r3
  40315e:	797b      	ldrb	r3, [r7, #5]
  403160:	b21b      	sxth	r3, r3
  403162:	4313      	orrs	r3, r2
  403164:	b21b      	sxth	r3, r3
  403166:	81fb      	strh	r3, [r7, #14]
						pVal = ((float)temp/16383.0f)*PSEN1_MAXP;
  403168:	89fa      	ldrh	r2, [r7, #14]
  40316a:	4b4b      	ldr	r3, [pc, #300]	; (403298 <ActivateValves+0x1d0>)
  40316c:	4610      	mov	r0, r2
  40316e:	4798      	blx	r3
  403170:	4602      	mov	r2, r0
  403172:	4b4a      	ldr	r3, [pc, #296]	; (40329c <ActivateValves+0x1d4>)
  403174:	494a      	ldr	r1, [pc, #296]	; (4032a0 <ActivateValves+0x1d8>)
  403176:	4610      	mov	r0, r2
  403178:	4798      	blx	r3
  40317a:	4603      	mov	r3, r0
  40317c:	461a      	mov	r2, r3
  40317e:	4b49      	ldr	r3, [pc, #292]	; (4032a4 <ActivateValves+0x1dc>)
  403180:	4949      	ldr	r1, [pc, #292]	; (4032a8 <ActivateValves+0x1e0>)
  403182:	4610      	mov	r0, r2
  403184:	4798      	blx	r3
  403186:	4603      	mov	r3, r0
  403188:	60bb      	str	r3, [r7, #8]
						if((pVal>=(pSetPt-0.5f)) && (pVal<=(pSetPt+0.5f)))
  40318a:	4b48      	ldr	r3, [pc, #288]	; (4032ac <ActivateValves+0x1e4>)
  40318c:	681a      	ldr	r2, [r3, #0]
  40318e:	4b48      	ldr	r3, [pc, #288]	; (4032b0 <ActivateValves+0x1e8>)
  403190:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  403194:	4610      	mov	r0, r2
  403196:	4798      	blx	r3
  403198:	4603      	mov	r3, r0
  40319a:	461a      	mov	r2, r3
  40319c:	4b45      	ldr	r3, [pc, #276]	; (4032b4 <ActivateValves+0x1ec>)
  40319e:	68b9      	ldr	r1, [r7, #8]
  4031a0:	4610      	mov	r0, r2
  4031a2:	4798      	blx	r3
  4031a4:	4603      	mov	r3, r0
  4031a6:	2b00      	cmp	r3, #0
  4031a8:	d016      	beq.n	4031d8 <ActivateValves+0x110>
  4031aa:	4b40      	ldr	r3, [pc, #256]	; (4032ac <ActivateValves+0x1e4>)
  4031ac:	681a      	ldr	r2, [r3, #0]
  4031ae:	4b42      	ldr	r3, [pc, #264]	; (4032b8 <ActivateValves+0x1f0>)
  4031b0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4031b4:	4610      	mov	r0, r2
  4031b6:	4798      	blx	r3
  4031b8:	4603      	mov	r3, r0
  4031ba:	461a      	mov	r2, r3
  4031bc:	4b3f      	ldr	r3, [pc, #252]	; (4032bc <ActivateValves+0x1f4>)
  4031be:	68b9      	ldr	r1, [r7, #8]
  4031c0:	4610      	mov	r0, r2
  4031c2:	4798      	blx	r3
  4031c4:	4603      	mov	r3, r0
  4031c6:	2b00      	cmp	r3, #0
  4031c8:	d006      	beq.n	4031d8 <ActivateValves+0x110>
						{
							SetValveState(s1CloseS2Close);
  4031ca:	2000      	movs	r0, #0
  4031cc:	4b3c      	ldr	r3, [pc, #240]	; (4032c0 <ActivateValves+0x1f8>)
  4031ce:	4798      	blx	r3
							ctrlState = holdCuff;
  4031d0:	4b29      	ldr	r3, [pc, #164]	; (403278 <ActivateValves+0x1b0>)
  4031d2:	2203      	movs	r2, #3
  4031d4:	701a      	strb	r2, [r3, #0]
						}
					#else
						ctrlState = holdCuff;	
					#endif
				#endif
				break;
  4031d6:	e049      	b.n	40326c <ActivateValves+0x1a4>
						if((pVal>=(pSetPt-0.5f)) && (pVal<=(pSetPt+0.5f)))
						{
							SetValveState(s1CloseS2Close);
							ctrlState = holdCuff;
						}
						else if(pVal<pSetPt)
  4031d8:	4b34      	ldr	r3, [pc, #208]	; (4032ac <ActivateValves+0x1e4>)
  4031da:	681a      	ldr	r2, [r3, #0]
  4031dc:	4b39      	ldr	r3, [pc, #228]	; (4032c4 <ActivateValves+0x1fc>)
  4031de:	4611      	mov	r1, r2
  4031e0:	68b8      	ldr	r0, [r7, #8]
  4031e2:	4798      	blx	r3
  4031e4:	4603      	mov	r3, r0
  4031e6:	2b00      	cmp	r3, #0
  4031e8:	d003      	beq.n	4031f2 <ActivateValves+0x12a>
						{
							SetValveState(s1OpenS2Close);
  4031ea:	2002      	movs	r0, #2
  4031ec:	4b34      	ldr	r3, [pc, #208]	; (4032c0 <ActivateValves+0x1f8>)
  4031ee:	4798      	blx	r3
						}
					#else
						ctrlState = holdCuff;	
					#endif
				#endif
				break;
  4031f0:	e03c      	b.n	40326c <ActivateValves+0x1a4>
						}
						else if(pVal<pSetPt)
						{
							SetValveState(s1OpenS2Close);
						}
						else if(pVal>pSetPt)
  4031f2:	4b2e      	ldr	r3, [pc, #184]	; (4032ac <ActivateValves+0x1e4>)
  4031f4:	681a      	ldr	r2, [r3, #0]
  4031f6:	4b34      	ldr	r3, [pc, #208]	; (4032c8 <ActivateValves+0x200>)
  4031f8:	4611      	mov	r1, r2
  4031fa:	68b8      	ldr	r0, [r7, #8]
  4031fc:	4798      	blx	r3
  4031fe:	4603      	mov	r3, r0
  403200:	2b00      	cmp	r3, #0
  403202:	d100      	bne.n	403206 <ActivateValves+0x13e>
						}
					#else
						ctrlState = holdCuff;	
					#endif
				#endif
				break;
  403204:	e032      	b.n	40326c <ActivateValves+0x1a4>
						{
							SetValveState(s1OpenS2Close);
						}
						else if(pVal>pSetPt)
						{
							SetValveState(s1CloseS2Open);
  403206:	2001      	movs	r0, #1
  403208:	4b2d      	ldr	r3, [pc, #180]	; (4032c0 <ActivateValves+0x1f8>)
  40320a:	4798      	blx	r3
						}
					#else
						ctrlState = holdCuff;	
					#endif
				#endif
				break;
  40320c:	e02e      	b.n	40326c <ActivateValves+0x1a4>
			case waitCycles:
				if(tickCount>=tickDur)
  40320e:	4b1e      	ldr	r3, [pc, #120]	; (403288 <ActivateValves+0x1c0>)
  403210:	681a      	ldr	r2, [r3, #0]
  403212:	4b1c      	ldr	r3, [pc, #112]	; (403284 <ActivateValves+0x1bc>)
  403214:	681b      	ldr	r3, [r3, #0]
  403216:	429a      	cmp	r2, r3
  403218:	d327      	bcc.n	40326a <ActivateValves+0x1a2>
				{
					ctrlState = nextCtrlState;
  40321a:	4b1c      	ldr	r3, [pc, #112]	; (40328c <ActivateValves+0x1c4>)
  40321c:	781a      	ldrb	r2, [r3, #0]
  40321e:	4b16      	ldr	r3, [pc, #88]	; (403278 <ActivateValves+0x1b0>)
  403220:	701a      	strb	r2, [r3, #0]
					tickCount = 0;
  403222:	4b19      	ldr	r3, [pc, #100]	; (403288 <ActivateValves+0x1c0>)
  403224:	2200      	movs	r2, #0
  403226:	601a      	str	r2, [r3, #0]
					tickDur = 0;
  403228:	4b16      	ldr	r3, [pc, #88]	; (403284 <ActivateValves+0x1bc>)
  40322a:	2200      	movs	r2, #0
  40322c:	601a      	str	r2, [r3, #0]
				}
				break;
  40322e:	e01c      	b.n	40326a <ActivateValves+0x1a2>
			case holdCuff:
				#ifndef ALGO_TEST_MODE_EN
					SetValveState(s1CloseS2Close);
  403230:	2000      	movs	r0, #0
  403232:	4b23      	ldr	r3, [pc, #140]	; (4032c0 <ActivateValves+0x1f8>)
  403234:	4798      	blx	r3
				#endif
				tickCount = 0;
  403236:	4b14      	ldr	r3, [pc, #80]	; (403288 <ActivateValves+0x1c0>)
  403238:	2200      	movs	r2, #0
  40323a:	601a      	str	r2, [r3, #0]
				tickDur = holdDur;
  40323c:	4b23      	ldr	r3, [pc, #140]	; (4032cc <ActivateValves+0x204>)
  40323e:	681b      	ldr	r3, [r3, #0]
  403240:	4a10      	ldr	r2, [pc, #64]	; (403284 <ActivateValves+0x1bc>)
  403242:	6013      	str	r3, [r2, #0]
				ctrlState = waitCycles;
  403244:	4b0c      	ldr	r3, [pc, #48]	; (403278 <ActivateValves+0x1b0>)
  403246:	2202      	movs	r2, #2
  403248:	701a      	strb	r2, [r3, #0]
				nextCtrlState = releaseCuff;
  40324a:	4b10      	ldr	r3, [pc, #64]	; (40328c <ActivateValves+0x1c4>)
  40324c:	2204      	movs	r2, #4
  40324e:	701a      	strb	r2, [r3, #0]
				break;
  403250:	e00c      	b.n	40326c <ActivateValves+0x1a4>
			case releaseCuff:
				#ifndef ALGO_TEST_MODE_EN
					SetValveState(s1CloseS2Open);
  403252:	2001      	movs	r0, #1
  403254:	4b1a      	ldr	r3, [pc, #104]	; (4032c0 <ActivateValves+0x1f8>)
  403256:	4798      	blx	r3
				#endif
				#ifndef ALGO_TYPE_PK_DET
					ctrlState = fillCuff;
				#else
					ctrlState = insertDelay; 
  403258:	4b07      	ldr	r3, [pc, #28]	; (403278 <ActivateValves+0x1b0>)
  40325a:	2200      	movs	r2, #0
  40325c:	701a      	strb	r2, [r3, #0]
				#endif
				trigFound = 0;
  40325e:	4b05      	ldr	r3, [pc, #20]	; (403274 <ActivateValves+0x1ac>)
  403260:	2200      	movs	r2, #0
  403262:	701a      	strb	r2, [r3, #0]
				break;
  403264:	e002      	b.n	40326c <ActivateValves+0x1a4>
			default:
				break;
  403266:	bf00      	nop
  403268:	e000      	b.n	40326c <ActivateValves+0x1a4>
				{
					ctrlState = nextCtrlState;
					tickCount = 0;
					tickDur = 0;
				}
				break;
  40326a:	bf00      	nop
				break;
			default:
				break;
		}
	}
}
  40326c:	bf00      	nop
  40326e:	3710      	adds	r7, #16
  403270:	46bd      	mov	sp, r7
  403272:	bd80      	pop	{r7, pc}
  403274:	20000a90 	.word	0x20000a90
  403278:	20000aa8 	.word	0x20000aa8
  40327c:	20000aa0 	.word	0x20000aa0
  403280:	2000001c 	.word	0x2000001c
  403284:	20000ab0 	.word	0x20000ab0
  403288:	20000aac 	.word	0x20000aac
  40328c:	20000010 	.word	0x20000010
  403290:	40018000 	.word	0x40018000
  403294:	0040020d 	.word	0x0040020d
  403298:	004040ad 	.word	0x004040ad
  40329c:	004042c5 	.word	0x004042c5
  4032a0:	467ffc00 	.word	0x467ffc00
  4032a4:	0040415d 	.word	0x0040415d
  4032a8:	41700000 	.word	0x41700000
  4032ac:	20000014 	.word	0x20000014
  4032b0:	00403f49 	.word	0x00403f49
  4032b4:	004044ad 	.word	0x004044ad
  4032b8:	00403f4d 	.word	0x00403f4d
  4032bc:	004044c1 	.word	0x004044c1
  4032c0:	004032d1 	.word	0x004032d1
  4032c4:	00404499 	.word	0x00404499
  4032c8:	004044d5 	.word	0x004044d5
  4032cc:	20000018 	.word	0x20000018

004032d0 <SetValveState>:

void SetValveState(enum valveStates st)
{
  4032d0:	b580      	push	{r7, lr}
  4032d2:	b082      	sub	sp, #8
  4032d4:	af00      	add	r7, sp, #0
  4032d6:	4603      	mov	r3, r0
  4032d8:	71fb      	strb	r3, [r7, #7]
	switch (st)
  4032da:	79fb      	ldrb	r3, [r7, #7]
  4032dc:	2b03      	cmp	r3, #3
  4032de:	d827      	bhi.n	403330 <SetValveState+0x60>
  4032e0:	a201      	add	r2, pc, #4	; (adr r2, 4032e8 <SetValveState+0x18>)
  4032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4032e6:	bf00      	nop
  4032e8:	004032f9 	.word	0x004032f9
  4032ec:	00403307 	.word	0x00403307
  4032f0:	00403315 	.word	0x00403315
  4032f4:	00403323 	.word	0x00403323
	{
		case s1CloseS2Close:
			gpio_set_pin_low(PIN_INAVALVE1_IDX);
  4032f8:	200d      	movs	r0, #13
  4032fa:	4b0f      	ldr	r3, [pc, #60]	; (403338 <SetValveState+0x68>)
  4032fc:	4798      	blx	r3
			gpio_set_pin_low(PIN_INAVALVE2_IDX);
  4032fe:	200e      	movs	r0, #14
  403300:	4b0d      	ldr	r3, [pc, #52]	; (403338 <SetValveState+0x68>)
  403302:	4798      	blx	r3
			break;
  403304:	e014      	b.n	403330 <SetValveState+0x60>
		case s1CloseS2Open:
			gpio_set_pin_low(PIN_INAVALVE1_IDX);
  403306:	200d      	movs	r0, #13
  403308:	4b0b      	ldr	r3, [pc, #44]	; (403338 <SetValveState+0x68>)
  40330a:	4798      	blx	r3
			gpio_set_pin_high(PIN_INAVALVE2_IDX);
  40330c:	200e      	movs	r0, #14
  40330e:	4b0b      	ldr	r3, [pc, #44]	; (40333c <SetValveState+0x6c>)
  403310:	4798      	blx	r3
			break;
  403312:	e00d      	b.n	403330 <SetValveState+0x60>
		case s1OpenS2Close:
			gpio_set_pin_high(PIN_INAVALVE1_IDX);
  403314:	200d      	movs	r0, #13
  403316:	4b09      	ldr	r3, [pc, #36]	; (40333c <SetValveState+0x6c>)
  403318:	4798      	blx	r3
			gpio_set_pin_low(PIN_INAVALVE2_IDX);
  40331a:	200e      	movs	r0, #14
  40331c:	4b06      	ldr	r3, [pc, #24]	; (403338 <SetValveState+0x68>)
  40331e:	4798      	blx	r3
			break;
  403320:	e006      	b.n	403330 <SetValveState+0x60>
		case s1OpenS2Open:
			gpio_set_pin_high(PIN_INAVALVE1_IDX);
  403322:	200d      	movs	r0, #13
  403324:	4b05      	ldr	r3, [pc, #20]	; (40333c <SetValveState+0x6c>)
  403326:	4798      	blx	r3
			gpio_set_pin_high(PIN_INAVALVE2_IDX);
  403328:	200e      	movs	r0, #14
  40332a:	4b04      	ldr	r3, [pc, #16]	; (40333c <SetValveState+0x6c>)
  40332c:	4798      	blx	r3
			break;
  40332e:	bf00      	nop
	}
}
  403330:	bf00      	nop
  403332:	3708      	adds	r7, #8
  403334:	46bd      	mov	sp, r7
  403336:	bd80      	pop	{r7, pc}
  403338:	00401bd5 	.word	0x00401bd5
  40333c:	00401ba5 	.word	0x00401ba5

00403340 <SendDispData>:

void SendDispData(void)
{
  403340:	b580      	push	{r7, lr}
  403342:	b082      	sub	sp, #8
  403344:	af00      	add	r7, sp, #0
	/* If previous transfer not complete, return */
	#if defined(BOARD_XPLND)
		if (!(uart_get_status(DISP_UART) & UART_SR_ENDTX)) 
	#elif defined(BOARD_NIRA91)
		if (!(usart_get_status(DISP_USART) & US_CSR_ENDTX)) 
  403346:	48a3      	ldr	r0, [pc, #652]	; (4035d4 <SendDispData+0x294>)
  403348:	4ba3      	ldr	r3, [pc, #652]	; (4035d8 <SendDispData+0x298>)
  40334a:	4798      	blx	r3
  40334c:	4603      	mov	r3, r0
  40334e:	f003 0310 	and.w	r3, r3, #16
  403352:	2b00      	cmp	r3, #0
  403354:	f000 8521 	beq.w	403d9a <SendDispData+0xa5a>
	{
		return;
	}

	#ifndef CYCLE_AVG_DISP_EN
		uint8_t readS2 = 0;
  403358:	2300      	movs	r3, #0
  40335a:	71fb      	strb	r3, [r7, #7]

		if(CBuffGetRxBytes(&sen2Data.pleathBuff) > 25)
  40335c:	489f      	ldr	r0, [pc, #636]	; (4035dc <SendDispData+0x29c>)
  40335e:	4ba0      	ldr	r3, [pc, #640]	; (4035e0 <SendDispData+0x2a0>)
  403360:	4798      	blx	r3
			//readS2 = 1;
			#warning "Sensor2 display commented"
		}

		/* Check if data in sen1Pleath buff >= 25 */
		if(CBuffGetRxBytes(&sen1Data.pleathBuff) > 25 && CBuffGetRxBytes(&trigBuff) > 25)
  403362:	48a0      	ldr	r0, [pc, #640]	; (4035e4 <SendDispData+0x2a4>)
  403364:	4b9e      	ldr	r3, [pc, #632]	; (4035e0 <SendDispData+0x2a0>)
  403366:	4798      	blx	r3
  403368:	4603      	mov	r3, r0
  40336a:	2b19      	cmp	r3, #25
  40336c:	f240 8516 	bls.w	403d9c <SendDispData+0xa5c>
  403370:	489d      	ldr	r0, [pc, #628]	; (4035e8 <SendDispData+0x2a8>)
  403372:	4b9b      	ldr	r3, [pc, #620]	; (4035e0 <SendDispData+0x2a0>)
  403374:	4798      	blx	r3
  403376:	4603      	mov	r3, r0
  403378:	2b19      	cmp	r3, #25
  40337a:	f240 850f 	bls.w	403d9c <SendDispData+0xa5c>
		{
			/* Frame 1*/
			dispPkt[0] = '$';
  40337e:	4b9b      	ldr	r3, [pc, #620]	; (4035ec <SendDispData+0x2ac>)
  403380:	2224      	movs	r2, #36	; 0x24
  403382:	701a      	strb	r2, [r3, #0]
			/* Sensor Status */
			dispPkt[1] = '1';
  403384:	4b99      	ldr	r3, [pc, #612]	; (4035ec <SendDispData+0x2ac>)
  403386:	2231      	movs	r2, #49	; 0x31
  403388:	705a      	strb	r2, [r3, #1]
			/* Sensor 1 Pleath Data */
			dispPkt[2] = CBuffReadByte(&sen1Data.pleathBuff);
  40338a:	4896      	ldr	r0, [pc, #600]	; (4035e4 <SendDispData+0x2a4>)
  40338c:	4b98      	ldr	r3, [pc, #608]	; (4035f0 <SendDispData+0x2b0>)
  40338e:	4798      	blx	r3
  403390:	4603      	mov	r3, r0
  403392:	461a      	mov	r2, r3
  403394:	4b95      	ldr	r3, [pc, #596]	; (4035ec <SendDispData+0x2ac>)
  403396:	709a      	strb	r2, [r3, #2]
			/* Trigger Data */
			dispPkt[3] = CBuffReadByte(&trigBuff);
  403398:	4893      	ldr	r0, [pc, #588]	; (4035e8 <SendDispData+0x2a8>)
  40339a:	4b95      	ldr	r3, [pc, #596]	; (4035f0 <SendDispData+0x2b0>)
  40339c:	4798      	blx	r3
  40339e:	4603      	mov	r3, r0
  4033a0:	461a      	mov	r2, r3
  4033a2:	4b92      	ldr	r3, [pc, #584]	; (4035ec <SendDispData+0x2ac>)
  4033a4:	70da      	strb	r2, [r3, #3]
			/* Sensor 2 Pleath Data */
			if(readS2)
  4033a6:	79fb      	ldrb	r3, [r7, #7]
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	d007      	beq.n	4033bc <SendDispData+0x7c>
				dispPkt[4] = CBuffReadByte(&sen2Data.pleathBuff);
  4033ac:	488b      	ldr	r0, [pc, #556]	; (4035dc <SendDispData+0x29c>)
  4033ae:	4b90      	ldr	r3, [pc, #576]	; (4035f0 <SendDispData+0x2b0>)
  4033b0:	4798      	blx	r3
  4033b2:	4603      	mov	r3, r0
  4033b4:	461a      	mov	r2, r3
  4033b6:	4b8d      	ldr	r3, [pc, #564]	; (4035ec <SendDispData+0x2ac>)
  4033b8:	711a      	strb	r2, [r3, #4]
  4033ba:	e002      	b.n	4033c2 <SendDispData+0x82>
			else
				dispPkt[4] = 0;
  4033bc:	4b8b      	ldr	r3, [pc, #556]	; (4035ec <SendDispData+0x2ac>)
  4033be:	2200      	movs	r2, #0
  4033c0:	711a      	strb	r2, [r3, #4]
			/* Checksum */
			dispPkt[5] = CalcChkSum(&dispPkt[0],5);
  4033c2:	2105      	movs	r1, #5
  4033c4:	4889      	ldr	r0, [pc, #548]	; (4035ec <SendDispData+0x2ac>)
  4033c6:	4b8b      	ldr	r3, [pc, #556]	; (4035f4 <SendDispData+0x2b4>)
  4033c8:	4798      	blx	r3
  4033ca:	4603      	mov	r3, r0
  4033cc:	461a      	mov	r2, r3
  4033ce:	4b87      	ldr	r3, [pc, #540]	; (4035ec <SendDispData+0x2ac>)
  4033d0:	715a      	strb	r2, [r3, #5]

			/* Frame 2*/
			dispPkt[6] = '$';
  4033d2:	4b86      	ldr	r3, [pc, #536]	; (4035ec <SendDispData+0x2ac>)
  4033d4:	2224      	movs	r2, #36	; 0x24
  4033d6:	719a      	strb	r2, [r3, #6]
			/* S1 Heart Rate MSB */
			dispPkt[7] = sen1Data.hrMsb;
  4033d8:	4b87      	ldr	r3, [pc, #540]	; (4035f8 <SendDispData+0x2b8>)
  4033da:	781a      	ldrb	r2, [r3, #0]
  4033dc:	4b83      	ldr	r3, [pc, #524]	; (4035ec <SendDispData+0x2ac>)
  4033de:	71da      	strb	r2, [r3, #7]
			/* Sensor 1 Pleath Data */
			dispPkt[8] = CBuffReadByte(&sen1Data.pleathBuff);
  4033e0:	4880      	ldr	r0, [pc, #512]	; (4035e4 <SendDispData+0x2a4>)
  4033e2:	4b83      	ldr	r3, [pc, #524]	; (4035f0 <SendDispData+0x2b0>)
  4033e4:	4798      	blx	r3
  4033e6:	4603      	mov	r3, r0
  4033e8:	461a      	mov	r2, r3
  4033ea:	4b80      	ldr	r3, [pc, #512]	; (4035ec <SendDispData+0x2ac>)
  4033ec:	721a      	strb	r2, [r3, #8]
			/* Trigger Data */
			dispPkt[9] = CBuffReadByte(&trigBuff);
  4033ee:	487e      	ldr	r0, [pc, #504]	; (4035e8 <SendDispData+0x2a8>)
  4033f0:	4b7f      	ldr	r3, [pc, #508]	; (4035f0 <SendDispData+0x2b0>)
  4033f2:	4798      	blx	r3
  4033f4:	4603      	mov	r3, r0
  4033f6:	461a      	mov	r2, r3
  4033f8:	4b7c      	ldr	r3, [pc, #496]	; (4035ec <SendDispData+0x2ac>)
  4033fa:	725a      	strb	r2, [r3, #9]
			/* Sensor 2 Pleath Data */
			if(readS2)
  4033fc:	79fb      	ldrb	r3, [r7, #7]
  4033fe:	2b00      	cmp	r3, #0
  403400:	d007      	beq.n	403412 <SendDispData+0xd2>
				dispPkt[10] = CBuffReadByte(&sen2Data.pleathBuff);
  403402:	4876      	ldr	r0, [pc, #472]	; (4035dc <SendDispData+0x29c>)
  403404:	4b7a      	ldr	r3, [pc, #488]	; (4035f0 <SendDispData+0x2b0>)
  403406:	4798      	blx	r3
  403408:	4603      	mov	r3, r0
  40340a:	461a      	mov	r2, r3
  40340c:	4b77      	ldr	r3, [pc, #476]	; (4035ec <SendDispData+0x2ac>)
  40340e:	729a      	strb	r2, [r3, #10]
  403410:	e002      	b.n	403418 <SendDispData+0xd8>
			else
				dispPkt[10] = 0;
  403412:	4b76      	ldr	r3, [pc, #472]	; (4035ec <SendDispData+0x2ac>)
  403414:	2200      	movs	r2, #0
  403416:	729a      	strb	r2, [r3, #10]
			/* Checksum */
			dispPkt[11] = CalcChkSum(&dispPkt[6],5);
  403418:	2105      	movs	r1, #5
  40341a:	4878      	ldr	r0, [pc, #480]	; (4035fc <SendDispData+0x2bc>)
  40341c:	4b75      	ldr	r3, [pc, #468]	; (4035f4 <SendDispData+0x2b4>)
  40341e:	4798      	blx	r3
  403420:	4603      	mov	r3, r0
  403422:	461a      	mov	r2, r3
  403424:	4b71      	ldr	r3, [pc, #452]	; (4035ec <SendDispData+0x2ac>)
  403426:	72da      	strb	r2, [r3, #11]

			/* Frame 3*/
			dispPkt[12] = '$';
  403428:	4b70      	ldr	r3, [pc, #448]	; (4035ec <SendDispData+0x2ac>)
  40342a:	2224      	movs	r2, #36	; 0x24
  40342c:	731a      	strb	r2, [r3, #12]
			/* S1 Heart Rate LSB */
			dispPkt[13] = sen1Data.hrLsb;
  40342e:	4b72      	ldr	r3, [pc, #456]	; (4035f8 <SendDispData+0x2b8>)
  403430:	785a      	ldrb	r2, [r3, #1]
  403432:	4b6e      	ldr	r3, [pc, #440]	; (4035ec <SendDispData+0x2ac>)
  403434:	735a      	strb	r2, [r3, #13]
			/* Sensor 1 Pleath Data */
			dispPkt[14] = CBuffReadByte(&sen1Data.pleathBuff);
  403436:	486b      	ldr	r0, [pc, #428]	; (4035e4 <SendDispData+0x2a4>)
  403438:	4b6d      	ldr	r3, [pc, #436]	; (4035f0 <SendDispData+0x2b0>)
  40343a:	4798      	blx	r3
  40343c:	4603      	mov	r3, r0
  40343e:	461a      	mov	r2, r3
  403440:	4b6a      	ldr	r3, [pc, #424]	; (4035ec <SendDispData+0x2ac>)
  403442:	739a      	strb	r2, [r3, #14]
			/* Trigger Data */
			dispPkt[15] = CBuffReadByte(&trigBuff);
  403444:	4868      	ldr	r0, [pc, #416]	; (4035e8 <SendDispData+0x2a8>)
  403446:	4b6a      	ldr	r3, [pc, #424]	; (4035f0 <SendDispData+0x2b0>)
  403448:	4798      	blx	r3
  40344a:	4603      	mov	r3, r0
  40344c:	461a      	mov	r2, r3
  40344e:	4b67      	ldr	r3, [pc, #412]	; (4035ec <SendDispData+0x2ac>)
  403450:	73da      	strb	r2, [r3, #15]
			/* Sensor 2 Pleath Data */
			if(readS2)
  403452:	79fb      	ldrb	r3, [r7, #7]
  403454:	2b00      	cmp	r3, #0
  403456:	d007      	beq.n	403468 <SendDispData+0x128>
				dispPkt[16] = CBuffReadByte(&sen2Data.pleathBuff);
  403458:	4860      	ldr	r0, [pc, #384]	; (4035dc <SendDispData+0x29c>)
  40345a:	4b65      	ldr	r3, [pc, #404]	; (4035f0 <SendDispData+0x2b0>)
  40345c:	4798      	blx	r3
  40345e:	4603      	mov	r3, r0
  403460:	461a      	mov	r2, r3
  403462:	4b62      	ldr	r3, [pc, #392]	; (4035ec <SendDispData+0x2ac>)
  403464:	741a      	strb	r2, [r3, #16]
  403466:	e002      	b.n	40346e <SendDispData+0x12e>
			else
				dispPkt[16] = 0;
  403468:	4b60      	ldr	r3, [pc, #384]	; (4035ec <SendDispData+0x2ac>)
  40346a:	2200      	movs	r2, #0
  40346c:	741a      	strb	r2, [r3, #16]
			/* Checksum */
			dispPkt[17] = CalcChkSum(&dispPkt[12],5);
  40346e:	2105      	movs	r1, #5
  403470:	4863      	ldr	r0, [pc, #396]	; (403600 <SendDispData+0x2c0>)
  403472:	4b60      	ldr	r3, [pc, #384]	; (4035f4 <SendDispData+0x2b4>)
  403474:	4798      	blx	r3
  403476:	4603      	mov	r3, r0
  403478:	461a      	mov	r2, r3
  40347a:	4b5c      	ldr	r3, [pc, #368]	; (4035ec <SendDispData+0x2ac>)
  40347c:	745a      	strb	r2, [r3, #17]

			/* Frame 4*/
			dispPkt[18] = '$';
  40347e:	4b5b      	ldr	r3, [pc, #364]	; (4035ec <SendDispData+0x2ac>)
  403480:	2224      	movs	r2, #36	; 0x24
  403482:	749a      	strb	r2, [r3, #18]
			/* S1 SpO2 */
			dispPkt[19] = sen1Data.spo2;
  403484:	4b5c      	ldr	r3, [pc, #368]	; (4035f8 <SendDispData+0x2b8>)
  403486:	789a      	ldrb	r2, [r3, #2]
  403488:	4b58      	ldr	r3, [pc, #352]	; (4035ec <SendDispData+0x2ac>)
  40348a:	74da      	strb	r2, [r3, #19]
			/* Sensor 1 Pleath Data */
			dispPkt[20] = CBuffReadByte(&sen1Data.pleathBuff);
  40348c:	4855      	ldr	r0, [pc, #340]	; (4035e4 <SendDispData+0x2a4>)
  40348e:	4b58      	ldr	r3, [pc, #352]	; (4035f0 <SendDispData+0x2b0>)
  403490:	4798      	blx	r3
  403492:	4603      	mov	r3, r0
  403494:	461a      	mov	r2, r3
  403496:	4b55      	ldr	r3, [pc, #340]	; (4035ec <SendDispData+0x2ac>)
  403498:	751a      	strb	r2, [r3, #20]
			/* Trigger Data */
			dispPkt[21] = CBuffReadByte(&trigBuff);
  40349a:	4853      	ldr	r0, [pc, #332]	; (4035e8 <SendDispData+0x2a8>)
  40349c:	4b54      	ldr	r3, [pc, #336]	; (4035f0 <SendDispData+0x2b0>)
  40349e:	4798      	blx	r3
  4034a0:	4603      	mov	r3, r0
  4034a2:	461a      	mov	r2, r3
  4034a4:	4b51      	ldr	r3, [pc, #324]	; (4035ec <SendDispData+0x2ac>)
  4034a6:	755a      	strb	r2, [r3, #21]
			/* Sensor 2 Pleath Data */
			if(readS2)
  4034a8:	79fb      	ldrb	r3, [r7, #7]
  4034aa:	2b00      	cmp	r3, #0
  4034ac:	d007      	beq.n	4034be <SendDispData+0x17e>
				dispPkt[22] = CBuffReadByte(&sen2Data.pleathBuff);
  4034ae:	484b      	ldr	r0, [pc, #300]	; (4035dc <SendDispData+0x29c>)
  4034b0:	4b4f      	ldr	r3, [pc, #316]	; (4035f0 <SendDispData+0x2b0>)
  4034b2:	4798      	blx	r3
  4034b4:	4603      	mov	r3, r0
  4034b6:	461a      	mov	r2, r3
  4034b8:	4b4c      	ldr	r3, [pc, #304]	; (4035ec <SendDispData+0x2ac>)
  4034ba:	759a      	strb	r2, [r3, #22]
  4034bc:	e002      	b.n	4034c4 <SendDispData+0x184>
			else
				dispPkt[22] = 0;
  4034be:	4b4b      	ldr	r3, [pc, #300]	; (4035ec <SendDispData+0x2ac>)
  4034c0:	2200      	movs	r2, #0
  4034c2:	759a      	strb	r2, [r3, #22]
			/* Checksum */
			dispPkt[23] = CalcChkSum(&dispPkt[18],5);
  4034c4:	2105      	movs	r1, #5
  4034c6:	484f      	ldr	r0, [pc, #316]	; (403604 <SendDispData+0x2c4>)
  4034c8:	4b4a      	ldr	r3, [pc, #296]	; (4035f4 <SendDispData+0x2b4>)
  4034ca:	4798      	blx	r3
  4034cc:	4603      	mov	r3, r0
  4034ce:	461a      	mov	r2, r3
  4034d0:	4b46      	ldr	r3, [pc, #280]	; (4035ec <SendDispData+0x2ac>)
  4034d2:	75da      	strb	r2, [r3, #23]

			/* Frame 5*/
			dispPkt[24] = '$';
  4034d4:	4b45      	ldr	r3, [pc, #276]	; (4035ec <SendDispData+0x2ac>)
  4034d6:	2224      	movs	r2, #36	; 0x24
  4034d8:	761a      	strb	r2, [r3, #24]
			/* S2 Heart Rate MSB */
			dispPkt[25] = sen2Data.hrMsb;
  4034da:	4b4b      	ldr	r3, [pc, #300]	; (403608 <SendDispData+0x2c8>)
  4034dc:	781a      	ldrb	r2, [r3, #0]
  4034de:	4b43      	ldr	r3, [pc, #268]	; (4035ec <SendDispData+0x2ac>)
  4034e0:	765a      	strb	r2, [r3, #25]
			/* Sensor 1 Pleath Data */
			dispPkt[26] = CBuffReadByte(&sen1Data.pleathBuff);
  4034e2:	4840      	ldr	r0, [pc, #256]	; (4035e4 <SendDispData+0x2a4>)
  4034e4:	4b42      	ldr	r3, [pc, #264]	; (4035f0 <SendDispData+0x2b0>)
  4034e6:	4798      	blx	r3
  4034e8:	4603      	mov	r3, r0
  4034ea:	461a      	mov	r2, r3
  4034ec:	4b3f      	ldr	r3, [pc, #252]	; (4035ec <SendDispData+0x2ac>)
  4034ee:	769a      	strb	r2, [r3, #26]
			/* Trigger Data */
			dispPkt[27] = CBuffReadByte(&trigBuff);
  4034f0:	483d      	ldr	r0, [pc, #244]	; (4035e8 <SendDispData+0x2a8>)
  4034f2:	4b3f      	ldr	r3, [pc, #252]	; (4035f0 <SendDispData+0x2b0>)
  4034f4:	4798      	blx	r3
  4034f6:	4603      	mov	r3, r0
  4034f8:	461a      	mov	r2, r3
  4034fa:	4b3c      	ldr	r3, [pc, #240]	; (4035ec <SendDispData+0x2ac>)
  4034fc:	76da      	strb	r2, [r3, #27]
			/* Sensor 2 Pleath Data */
			if(readS2)
  4034fe:	79fb      	ldrb	r3, [r7, #7]
  403500:	2b00      	cmp	r3, #0
  403502:	d007      	beq.n	403514 <SendDispData+0x1d4>
				dispPkt[28] = CBuffReadByte(&sen2Data.pleathBuff);
  403504:	4835      	ldr	r0, [pc, #212]	; (4035dc <SendDispData+0x29c>)
  403506:	4b3a      	ldr	r3, [pc, #232]	; (4035f0 <SendDispData+0x2b0>)
  403508:	4798      	blx	r3
  40350a:	4603      	mov	r3, r0
  40350c:	461a      	mov	r2, r3
  40350e:	4b37      	ldr	r3, [pc, #220]	; (4035ec <SendDispData+0x2ac>)
  403510:	771a      	strb	r2, [r3, #28]
  403512:	e002      	b.n	40351a <SendDispData+0x1da>
			else
				dispPkt[28] = 0;
  403514:	4b35      	ldr	r3, [pc, #212]	; (4035ec <SendDispData+0x2ac>)
  403516:	2200      	movs	r2, #0
  403518:	771a      	strb	r2, [r3, #28]
			/* Checksum */
			dispPkt[29] = CalcChkSum(&dispPkt[24],5);
  40351a:	2105      	movs	r1, #5
  40351c:	483b      	ldr	r0, [pc, #236]	; (40360c <SendDispData+0x2cc>)
  40351e:	4b35      	ldr	r3, [pc, #212]	; (4035f4 <SendDispData+0x2b4>)
  403520:	4798      	blx	r3
  403522:	4603      	mov	r3, r0
  403524:	461a      	mov	r2, r3
  403526:	4b31      	ldr	r3, [pc, #196]	; (4035ec <SendDispData+0x2ac>)
  403528:	775a      	strb	r2, [r3, #29]

			/* Frame 6*/
			dispPkt[30] = '$';
  40352a:	4b30      	ldr	r3, [pc, #192]	; (4035ec <SendDispData+0x2ac>)
  40352c:	2224      	movs	r2, #36	; 0x24
  40352e:	779a      	strb	r2, [r3, #30]
			/* S2 Heart Rate LSB */
			dispPkt[31] = sen2Data.hrLsb;
  403530:	4b35      	ldr	r3, [pc, #212]	; (403608 <SendDispData+0x2c8>)
  403532:	785a      	ldrb	r2, [r3, #1]
  403534:	4b2d      	ldr	r3, [pc, #180]	; (4035ec <SendDispData+0x2ac>)
  403536:	77da      	strb	r2, [r3, #31]
			/* Sensor 1 Pleath Data */
			dispPkt[32] = CBuffReadByte(&sen1Data.pleathBuff);
  403538:	482a      	ldr	r0, [pc, #168]	; (4035e4 <SendDispData+0x2a4>)
  40353a:	4b2d      	ldr	r3, [pc, #180]	; (4035f0 <SendDispData+0x2b0>)
  40353c:	4798      	blx	r3
  40353e:	4603      	mov	r3, r0
  403540:	461a      	mov	r2, r3
  403542:	4b2a      	ldr	r3, [pc, #168]	; (4035ec <SendDispData+0x2ac>)
  403544:	f883 2020 	strb.w	r2, [r3, #32]
			/* Trigger Data */
			dispPkt[33] = CBuffReadByte(&trigBuff);
  403548:	4827      	ldr	r0, [pc, #156]	; (4035e8 <SendDispData+0x2a8>)
  40354a:	4b29      	ldr	r3, [pc, #164]	; (4035f0 <SendDispData+0x2b0>)
  40354c:	4798      	blx	r3
  40354e:	4603      	mov	r3, r0
  403550:	461a      	mov	r2, r3
  403552:	4b26      	ldr	r3, [pc, #152]	; (4035ec <SendDispData+0x2ac>)
  403554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			/* Sensor 2 Pleath Data */
			if(readS2)
  403558:	79fb      	ldrb	r3, [r7, #7]
  40355a:	2b00      	cmp	r3, #0
  40355c:	d008      	beq.n	403570 <SendDispData+0x230>
				dispPkt[34] = CBuffReadByte(&sen2Data.pleathBuff);
  40355e:	481f      	ldr	r0, [pc, #124]	; (4035dc <SendDispData+0x29c>)
  403560:	4b23      	ldr	r3, [pc, #140]	; (4035f0 <SendDispData+0x2b0>)
  403562:	4798      	blx	r3
  403564:	4603      	mov	r3, r0
  403566:	461a      	mov	r2, r3
  403568:	4b20      	ldr	r3, [pc, #128]	; (4035ec <SendDispData+0x2ac>)
  40356a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  40356e:	e003      	b.n	403578 <SendDispData+0x238>
			else
				dispPkt[34] = 0;
  403570:	4b1e      	ldr	r3, [pc, #120]	; (4035ec <SendDispData+0x2ac>)
  403572:	2200      	movs	r2, #0
  403574:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			/* Checksum */
			dispPkt[35] = CalcChkSum(&dispPkt[30],5);
  403578:	2105      	movs	r1, #5
  40357a:	4825      	ldr	r0, [pc, #148]	; (403610 <SendDispData+0x2d0>)
  40357c:	4b1d      	ldr	r3, [pc, #116]	; (4035f4 <SendDispData+0x2b4>)
  40357e:	4798      	blx	r3
  403580:	4603      	mov	r3, r0
  403582:	461a      	mov	r2, r3
  403584:	4b19      	ldr	r3, [pc, #100]	; (4035ec <SendDispData+0x2ac>)
  403586:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

			/* Frame 7*/
			dispPkt[36] = '$';
  40358a:	4b18      	ldr	r3, [pc, #96]	; (4035ec <SendDispData+0x2ac>)
  40358c:	2224      	movs	r2, #36	; 0x24
  40358e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			/* S2 SpO2 */
			dispPkt[37] = sen2Data.spo2;
  403592:	4b1d      	ldr	r3, [pc, #116]	; (403608 <SendDispData+0x2c8>)
  403594:	789a      	ldrb	r2, [r3, #2]
  403596:	4b15      	ldr	r3, [pc, #84]	; (4035ec <SendDispData+0x2ac>)
  403598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			/* Sensor 1 Pleath Data */
			dispPkt[38] = CBuffReadByte(&sen1Data.pleathBuff);
  40359c:	4811      	ldr	r0, [pc, #68]	; (4035e4 <SendDispData+0x2a4>)
  40359e:	4b14      	ldr	r3, [pc, #80]	; (4035f0 <SendDispData+0x2b0>)
  4035a0:	4798      	blx	r3
  4035a2:	4603      	mov	r3, r0
  4035a4:	461a      	mov	r2, r3
  4035a6:	4b11      	ldr	r3, [pc, #68]	; (4035ec <SendDispData+0x2ac>)
  4035a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			/* Trigger Data */
			dispPkt[39] = CBuffReadByte(&trigBuff);
  4035ac:	480e      	ldr	r0, [pc, #56]	; (4035e8 <SendDispData+0x2a8>)
  4035ae:	4b10      	ldr	r3, [pc, #64]	; (4035f0 <SendDispData+0x2b0>)
  4035b0:	4798      	blx	r3
  4035b2:	4603      	mov	r3, r0
  4035b4:	461a      	mov	r2, r3
  4035b6:	4b0d      	ldr	r3, [pc, #52]	; (4035ec <SendDispData+0x2ac>)
  4035b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			/* Sensor 2 Pleath Data */
			if(readS2)
  4035bc:	79fb      	ldrb	r3, [r7, #7]
  4035be:	2b00      	cmp	r3, #0
  4035c0:	d028      	beq.n	403614 <SendDispData+0x2d4>
				dispPkt[40] = CBuffReadByte(&sen2Data.pleathBuff);
  4035c2:	4806      	ldr	r0, [pc, #24]	; (4035dc <SendDispData+0x29c>)
  4035c4:	4b0a      	ldr	r3, [pc, #40]	; (4035f0 <SendDispData+0x2b0>)
  4035c6:	4798      	blx	r3
  4035c8:	4603      	mov	r3, r0
  4035ca:	461a      	mov	r2, r3
  4035cc:	4b07      	ldr	r3, [pc, #28]	; (4035ec <SendDispData+0x2ac>)
  4035ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  4035d2:	e023      	b.n	40361c <SendDispData+0x2dc>
  4035d4:	40028000 	.word	0x40028000
  4035d8:	004012e1 	.word	0x004012e1
  4035dc:	20000b0f 	.word	0x20000b0f
  4035e0:	00400129 	.word	0x00400129
  4035e4:	20000bdf 	.word	0x20000bdf
  4035e8:	20000d44 	.word	0x20000d44
  4035ec:	20000cac 	.word	0x20000cac
  4035f0:	0040018d 	.word	0x0040018d
  4035f4:	00403ddd 	.word	0x00403ddd
  4035f8:	20000bdc 	.word	0x20000bdc
  4035fc:	20000cb2 	.word	0x20000cb2
  403600:	20000cb8 	.word	0x20000cb8
  403604:	20000cbe 	.word	0x20000cbe
  403608:	20000b0c 	.word	0x20000b0c
  40360c:	20000cc4 	.word	0x20000cc4
  403610:	20000cca 	.word	0x20000cca
			else
				dispPkt[40] = 0;
  403614:	4bab      	ldr	r3, [pc, #684]	; (4038c4 <SendDispData+0x584>)
  403616:	2200      	movs	r2, #0
  403618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			/* Checksum */
			dispPkt[41] = CalcChkSum(&dispPkt[36],5);
  40361c:	2105      	movs	r1, #5
  40361e:	48aa      	ldr	r0, [pc, #680]	; (4038c8 <SendDispData+0x588>)
  403620:	4baa      	ldr	r3, [pc, #680]	; (4038cc <SendDispData+0x58c>)
  403622:	4798      	blx	r3
  403624:	4603      	mov	r3, r0
  403626:	461a      	mov	r2, r3
  403628:	4ba6      	ldr	r3, [pc, #664]	; (4038c4 <SendDispData+0x584>)
  40362a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

			/* Frame 8*/
			dispPkt[42] = '$';
  40362e:	4ba5      	ldr	r3, [pc, #660]	; (4038c4 <SendDispData+0x584>)
  403630:	2224      	movs	r2, #36	; 0x24
  403632:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			/* Pressure Set Point */
			dispPkt[43] = '0';
  403636:	4ba3      	ldr	r3, [pc, #652]	; (4038c4 <SendDispData+0x584>)
  403638:	2230      	movs	r2, #48	; 0x30
  40363a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			/* Sensor 1 Pleath Data */
			dispPkt[44] = CBuffReadByte(&sen1Data.pleathBuff);
  40363e:	48a4      	ldr	r0, [pc, #656]	; (4038d0 <SendDispData+0x590>)
  403640:	4ba4      	ldr	r3, [pc, #656]	; (4038d4 <SendDispData+0x594>)
  403642:	4798      	blx	r3
  403644:	4603      	mov	r3, r0
  403646:	461a      	mov	r2, r3
  403648:	4b9e      	ldr	r3, [pc, #632]	; (4038c4 <SendDispData+0x584>)
  40364a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			/* Trigger Data */
			dispPkt[45] = CBuffReadByte(&trigBuff);
  40364e:	48a2      	ldr	r0, [pc, #648]	; (4038d8 <SendDispData+0x598>)
  403650:	4ba0      	ldr	r3, [pc, #640]	; (4038d4 <SendDispData+0x594>)
  403652:	4798      	blx	r3
  403654:	4603      	mov	r3, r0
  403656:	461a      	mov	r2, r3
  403658:	4b9a      	ldr	r3, [pc, #616]	; (4038c4 <SendDispData+0x584>)
  40365a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			/* Sensor 2 Pleath Data */
			if(readS2)
  40365e:	79fb      	ldrb	r3, [r7, #7]
  403660:	2b00      	cmp	r3, #0
  403662:	d008      	beq.n	403676 <SendDispData+0x336>
				dispPkt[46] = CBuffReadByte(&sen2Data.pleathBuff);
  403664:	489d      	ldr	r0, [pc, #628]	; (4038dc <SendDispData+0x59c>)
  403666:	4b9b      	ldr	r3, [pc, #620]	; (4038d4 <SendDispData+0x594>)
  403668:	4798      	blx	r3
  40366a:	4603      	mov	r3, r0
  40366c:	461a      	mov	r2, r3
  40366e:	4b95      	ldr	r3, [pc, #596]	; (4038c4 <SendDispData+0x584>)
  403670:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  403674:	e003      	b.n	40367e <SendDispData+0x33e>
			else
				dispPkt[46] = 0;
  403676:	4b93      	ldr	r3, [pc, #588]	; (4038c4 <SendDispData+0x584>)
  403678:	2200      	movs	r2, #0
  40367a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			/* Checksum */
			dispPkt[47] = CalcChkSum(&dispPkt[42],5);
  40367e:	2105      	movs	r1, #5
  403680:	4897      	ldr	r0, [pc, #604]	; (4038e0 <SendDispData+0x5a0>)
  403682:	4b92      	ldr	r3, [pc, #584]	; (4038cc <SendDispData+0x58c>)
  403684:	4798      	blx	r3
  403686:	4603      	mov	r3, r0
  403688:	461a      	mov	r2, r3
  40368a:	4b8e      	ldr	r3, [pc, #568]	; (4038c4 <SendDispData+0x584>)
  40368c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

			/* Frame 9*/
			dispPkt[48] = '$';
  403690:	4b8c      	ldr	r3, [pc, #560]	; (4038c4 <SendDispData+0x584>)
  403692:	2224      	movs	r2, #36	; 0x24
  403694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			/* Trigger Delay */
			dispPkt[49] = '0';
  403698:	4b8a      	ldr	r3, [pc, #552]	; (4038c4 <SendDispData+0x584>)
  40369a:	2230      	movs	r2, #48	; 0x30
  40369c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			/* Sensor 1 Pleath Data */
			dispPkt[50] = CBuffReadByte(&sen1Data.pleathBuff);
  4036a0:	488b      	ldr	r0, [pc, #556]	; (4038d0 <SendDispData+0x590>)
  4036a2:	4b8c      	ldr	r3, [pc, #560]	; (4038d4 <SendDispData+0x594>)
  4036a4:	4798      	blx	r3
  4036a6:	4603      	mov	r3, r0
  4036a8:	461a      	mov	r2, r3
  4036aa:	4b86      	ldr	r3, [pc, #536]	; (4038c4 <SendDispData+0x584>)
  4036ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			/* Trigger Data */
			dispPkt[51] = CBuffReadByte(&trigBuff);
  4036b0:	4889      	ldr	r0, [pc, #548]	; (4038d8 <SendDispData+0x598>)
  4036b2:	4b88      	ldr	r3, [pc, #544]	; (4038d4 <SendDispData+0x594>)
  4036b4:	4798      	blx	r3
  4036b6:	4603      	mov	r3, r0
  4036b8:	461a      	mov	r2, r3
  4036ba:	4b82      	ldr	r3, [pc, #520]	; (4038c4 <SendDispData+0x584>)
  4036bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			/* Sensor 2 Pleath Data */
			if(readS2)
  4036c0:	79fb      	ldrb	r3, [r7, #7]
  4036c2:	2b00      	cmp	r3, #0
  4036c4:	d008      	beq.n	4036d8 <SendDispData+0x398>
				dispPkt[52] = CBuffReadByte(&sen2Data.pleathBuff);
  4036c6:	4885      	ldr	r0, [pc, #532]	; (4038dc <SendDispData+0x59c>)
  4036c8:	4b82      	ldr	r3, [pc, #520]	; (4038d4 <SendDispData+0x594>)
  4036ca:	4798      	blx	r3
  4036cc:	4603      	mov	r3, r0
  4036ce:	461a      	mov	r2, r3
  4036d0:	4b7c      	ldr	r3, [pc, #496]	; (4038c4 <SendDispData+0x584>)
  4036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  4036d6:	e003      	b.n	4036e0 <SendDispData+0x3a0>
			else
				dispPkt[52] = 0;
  4036d8:	4b7a      	ldr	r3, [pc, #488]	; (4038c4 <SendDispData+0x584>)
  4036da:	2200      	movs	r2, #0
  4036dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			/* Checksum */
			dispPkt[53] = CalcChkSum(&dispPkt[48],5);
  4036e0:	2105      	movs	r1, #5
  4036e2:	4880      	ldr	r0, [pc, #512]	; (4038e4 <SendDispData+0x5a4>)
  4036e4:	4b79      	ldr	r3, [pc, #484]	; (4038cc <SendDispData+0x58c>)
  4036e6:	4798      	blx	r3
  4036e8:	4603      	mov	r3, r0
  4036ea:	461a      	mov	r2, r3
  4036ec:	4b75      	ldr	r3, [pc, #468]	; (4038c4 <SendDispData+0x584>)
  4036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			/* Frame 10 */
			dispPkt[54] = '$';
  4036f2:	4b74      	ldr	r3, [pc, #464]	; (4038c4 <SendDispData+0x584>)
  4036f4:	2224      	movs	r2, #36	; 0x24
  4036f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			/* Cuff Hold Duration */
			dispPkt[55] = '0';
  4036fa:	4b72      	ldr	r3, [pc, #456]	; (4038c4 <SendDispData+0x584>)
  4036fc:	2230      	movs	r2, #48	; 0x30
  4036fe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			/* Sensor 1 Pleath Data */
			dispPkt[56] = CBuffReadByte(&sen1Data.pleathBuff);
  403702:	4873      	ldr	r0, [pc, #460]	; (4038d0 <SendDispData+0x590>)
  403704:	4b73      	ldr	r3, [pc, #460]	; (4038d4 <SendDispData+0x594>)
  403706:	4798      	blx	r3
  403708:	4603      	mov	r3, r0
  40370a:	461a      	mov	r2, r3
  40370c:	4b6d      	ldr	r3, [pc, #436]	; (4038c4 <SendDispData+0x584>)
  40370e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			/* Trigger Data */
			dispPkt[57] = CBuffReadByte(&trigBuff);
  403712:	4871      	ldr	r0, [pc, #452]	; (4038d8 <SendDispData+0x598>)
  403714:	4b6f      	ldr	r3, [pc, #444]	; (4038d4 <SendDispData+0x594>)
  403716:	4798      	blx	r3
  403718:	4603      	mov	r3, r0
  40371a:	461a      	mov	r2, r3
  40371c:	4b69      	ldr	r3, [pc, #420]	; (4038c4 <SendDispData+0x584>)
  40371e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			/* Sensor 2 Pleath Data */
			if(readS2)
  403722:	79fb      	ldrb	r3, [r7, #7]
  403724:	2b00      	cmp	r3, #0
  403726:	d008      	beq.n	40373a <SendDispData+0x3fa>
				dispPkt[58] = CBuffReadByte(&sen2Data.pleathBuff);
  403728:	486c      	ldr	r0, [pc, #432]	; (4038dc <SendDispData+0x59c>)
  40372a:	4b6a      	ldr	r3, [pc, #424]	; (4038d4 <SendDispData+0x594>)
  40372c:	4798      	blx	r3
  40372e:	4603      	mov	r3, r0
  403730:	461a      	mov	r2, r3
  403732:	4b64      	ldr	r3, [pc, #400]	; (4038c4 <SendDispData+0x584>)
  403734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  403738:	e003      	b.n	403742 <SendDispData+0x402>
			else
				dispPkt[58] = 0;
  40373a:	4b62      	ldr	r3, [pc, #392]	; (4038c4 <SendDispData+0x584>)
  40373c:	2200      	movs	r2, #0
  40373e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			/* Checksum */
			dispPkt[59] = CalcChkSum(&dispPkt[54],5);
  403742:	2105      	movs	r1, #5
  403744:	4868      	ldr	r0, [pc, #416]	; (4038e8 <SendDispData+0x5a8>)
  403746:	4b61      	ldr	r3, [pc, #388]	; (4038cc <SendDispData+0x58c>)
  403748:	4798      	blx	r3
  40374a:	4603      	mov	r3, r0
  40374c:	461a      	mov	r2, r3
  40374e:	4b5d      	ldr	r3, [pc, #372]	; (4038c4 <SendDispData+0x584>)
  403750:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

			/* Frame 11 */
			dispPkt[60] = '$';
  403754:	4b5b      	ldr	r3, [pc, #364]	; (4038c4 <SendDispData+0x584>)
  403756:	2224      	movs	r2, #36	; 0x24
  403758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			/* Cuff Pressure MSB */
			dispPkt[61] = '0';
  40375c:	4b59      	ldr	r3, [pc, #356]	; (4038c4 <SendDispData+0x584>)
  40375e:	2230      	movs	r2, #48	; 0x30
  403760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			/* Sensor 1 Pleath Data */
			dispPkt[62] = CBuffReadByte(&sen1Data.pleathBuff);
  403764:	485a      	ldr	r0, [pc, #360]	; (4038d0 <SendDispData+0x590>)
  403766:	4b5b      	ldr	r3, [pc, #364]	; (4038d4 <SendDispData+0x594>)
  403768:	4798      	blx	r3
  40376a:	4603      	mov	r3, r0
  40376c:	461a      	mov	r2, r3
  40376e:	4b55      	ldr	r3, [pc, #340]	; (4038c4 <SendDispData+0x584>)
  403770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			/* Trigger Data */
			dispPkt[63] = CBuffReadByte(&trigBuff);
  403774:	4858      	ldr	r0, [pc, #352]	; (4038d8 <SendDispData+0x598>)
  403776:	4b57      	ldr	r3, [pc, #348]	; (4038d4 <SendDispData+0x594>)
  403778:	4798      	blx	r3
  40377a:	4603      	mov	r3, r0
  40377c:	461a      	mov	r2, r3
  40377e:	4b51      	ldr	r3, [pc, #324]	; (4038c4 <SendDispData+0x584>)
  403780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			/* Sensor 2 Pleath Data */
			if(readS2)
  403784:	79fb      	ldrb	r3, [r7, #7]
  403786:	2b00      	cmp	r3, #0
  403788:	d008      	beq.n	40379c <SendDispData+0x45c>
				dispPkt[64] = CBuffReadByte(&sen2Data.pleathBuff);
  40378a:	4854      	ldr	r0, [pc, #336]	; (4038dc <SendDispData+0x59c>)
  40378c:	4b51      	ldr	r3, [pc, #324]	; (4038d4 <SendDispData+0x594>)
  40378e:	4798      	blx	r3
  403790:	4603      	mov	r3, r0
  403792:	461a      	mov	r2, r3
  403794:	4b4b      	ldr	r3, [pc, #300]	; (4038c4 <SendDispData+0x584>)
  403796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  40379a:	e003      	b.n	4037a4 <SendDispData+0x464>
			else
				dispPkt[64] = 0;
  40379c:	4b49      	ldr	r3, [pc, #292]	; (4038c4 <SendDispData+0x584>)
  40379e:	2200      	movs	r2, #0
  4037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			/* Checksum */
			dispPkt[65] = CalcChkSum(&dispPkt[60],5);
  4037a4:	2105      	movs	r1, #5
  4037a6:	4851      	ldr	r0, [pc, #324]	; (4038ec <SendDispData+0x5ac>)
  4037a8:	4b48      	ldr	r3, [pc, #288]	; (4038cc <SendDispData+0x58c>)
  4037aa:	4798      	blx	r3
  4037ac:	4603      	mov	r3, r0
  4037ae:	461a      	mov	r2, r3
  4037b0:	4b44      	ldr	r3, [pc, #272]	; (4038c4 <SendDispData+0x584>)
  4037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			/* Frame 12 */
			dispPkt[66] = '$';
  4037b6:	4b43      	ldr	r3, [pc, #268]	; (4038c4 <SendDispData+0x584>)
  4037b8:	2224      	movs	r2, #36	; 0x24
  4037ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			/* Cuff Pressure LSB */
			dispPkt[67] = '0';
  4037be:	4b41      	ldr	r3, [pc, #260]	; (4038c4 <SendDispData+0x584>)
  4037c0:	2230      	movs	r2, #48	; 0x30
  4037c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			/* Sensor 1 Pleath Data */
			dispPkt[68] = CBuffReadByte(&sen1Data.pleathBuff);
  4037c6:	4842      	ldr	r0, [pc, #264]	; (4038d0 <SendDispData+0x590>)
  4037c8:	4b42      	ldr	r3, [pc, #264]	; (4038d4 <SendDispData+0x594>)
  4037ca:	4798      	blx	r3
  4037cc:	4603      	mov	r3, r0
  4037ce:	461a      	mov	r2, r3
  4037d0:	4b3c      	ldr	r3, [pc, #240]	; (4038c4 <SendDispData+0x584>)
  4037d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			/* Trigger Data */
			dispPkt[69] = CBuffReadByte(&trigBuff);
  4037d6:	4840      	ldr	r0, [pc, #256]	; (4038d8 <SendDispData+0x598>)
  4037d8:	4b3e      	ldr	r3, [pc, #248]	; (4038d4 <SendDispData+0x594>)
  4037da:	4798      	blx	r3
  4037dc:	4603      	mov	r3, r0
  4037de:	461a      	mov	r2, r3
  4037e0:	4b38      	ldr	r3, [pc, #224]	; (4038c4 <SendDispData+0x584>)
  4037e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			/* Sensor 2 Pleath Data */
			if(readS2)
  4037e6:	79fb      	ldrb	r3, [r7, #7]
  4037e8:	2b00      	cmp	r3, #0
  4037ea:	d008      	beq.n	4037fe <SendDispData+0x4be>
				dispPkt[70] = CBuffReadByte(&sen2Data.pleathBuff);
  4037ec:	483b      	ldr	r0, [pc, #236]	; (4038dc <SendDispData+0x59c>)
  4037ee:	4b39      	ldr	r3, [pc, #228]	; (4038d4 <SendDispData+0x594>)
  4037f0:	4798      	blx	r3
  4037f2:	4603      	mov	r3, r0
  4037f4:	461a      	mov	r2, r3
  4037f6:	4b33      	ldr	r3, [pc, #204]	; (4038c4 <SendDispData+0x584>)
  4037f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  4037fc:	e003      	b.n	403806 <SendDispData+0x4c6>
			else
				dispPkt[70] = 0;
  4037fe:	4b31      	ldr	r3, [pc, #196]	; (4038c4 <SendDispData+0x584>)
  403800:	2200      	movs	r2, #0
  403802:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			/* Checksum */
			dispPkt[71] = CalcChkSum(&dispPkt[66],5);
  403806:	2105      	movs	r1, #5
  403808:	4839      	ldr	r0, [pc, #228]	; (4038f0 <SendDispData+0x5b0>)
  40380a:	4b30      	ldr	r3, [pc, #192]	; (4038cc <SendDispData+0x58c>)
  40380c:	4798      	blx	r3
  40380e:	4603      	mov	r3, r0
  403810:	461a      	mov	r2, r3
  403812:	4b2c      	ldr	r3, [pc, #176]	; (4038c4 <SendDispData+0x584>)
  403814:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

			/* Frame 13 */
			dispPkt[72] = '$';
  403818:	4b2a      	ldr	r3, [pc, #168]	; (4038c4 <SendDispData+0x584>)
  40381a:	2224      	movs	r2, #36	; 0x24
  40381c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			/* Reservoir Pressure MSB */
			dispPkt[73] = '0';
  403820:	4b28      	ldr	r3, [pc, #160]	; (4038c4 <SendDispData+0x584>)
  403822:	2230      	movs	r2, #48	; 0x30
  403824:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			/* Sensor 1 Pleath Data */
			dispPkt[74] = CBuffReadByte(&sen1Data.pleathBuff);
  403828:	4829      	ldr	r0, [pc, #164]	; (4038d0 <SendDispData+0x590>)
  40382a:	4b2a      	ldr	r3, [pc, #168]	; (4038d4 <SendDispData+0x594>)
  40382c:	4798      	blx	r3
  40382e:	4603      	mov	r3, r0
  403830:	461a      	mov	r2, r3
  403832:	4b24      	ldr	r3, [pc, #144]	; (4038c4 <SendDispData+0x584>)
  403834:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			/* Trigger Data */
			dispPkt[75] = CBuffReadByte(&trigBuff);
  403838:	4827      	ldr	r0, [pc, #156]	; (4038d8 <SendDispData+0x598>)
  40383a:	4b26      	ldr	r3, [pc, #152]	; (4038d4 <SendDispData+0x594>)
  40383c:	4798      	blx	r3
  40383e:	4603      	mov	r3, r0
  403840:	461a      	mov	r2, r3
  403842:	4b20      	ldr	r3, [pc, #128]	; (4038c4 <SendDispData+0x584>)
  403844:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
			/* Sensor 2 Pleath Data */
			if(readS2)
  403848:	79fb      	ldrb	r3, [r7, #7]
  40384a:	2b00      	cmp	r3, #0
  40384c:	d008      	beq.n	403860 <SendDispData+0x520>
				dispPkt[76] = CBuffReadByte(&sen2Data.pleathBuff);
  40384e:	4823      	ldr	r0, [pc, #140]	; (4038dc <SendDispData+0x59c>)
  403850:	4b20      	ldr	r3, [pc, #128]	; (4038d4 <SendDispData+0x594>)
  403852:	4798      	blx	r3
  403854:	4603      	mov	r3, r0
  403856:	461a      	mov	r2, r3
  403858:	4b1a      	ldr	r3, [pc, #104]	; (4038c4 <SendDispData+0x584>)
  40385a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  40385e:	e003      	b.n	403868 <SendDispData+0x528>
			else
				dispPkt[76] = 0;
  403860:	4b18      	ldr	r3, [pc, #96]	; (4038c4 <SendDispData+0x584>)
  403862:	2200      	movs	r2, #0
  403864:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			/* Checksum */
			dispPkt[77] = CalcChkSum(&dispPkt[72],5);
  403868:	2105      	movs	r1, #5
  40386a:	4822      	ldr	r0, [pc, #136]	; (4038f4 <SendDispData+0x5b4>)
  40386c:	4b17      	ldr	r3, [pc, #92]	; (4038cc <SendDispData+0x58c>)
  40386e:	4798      	blx	r3
  403870:	4603      	mov	r3, r0
  403872:	461a      	mov	r2, r3
  403874:	4b13      	ldr	r3, [pc, #76]	; (4038c4 <SendDispData+0x584>)
  403876:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

			/* Frame 14 */
			dispPkt[78] = '$';
  40387a:	4b12      	ldr	r3, [pc, #72]	; (4038c4 <SendDispData+0x584>)
  40387c:	2224      	movs	r2, #36	; 0x24
  40387e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			/* Reservoir Pressure LSB */
			dispPkt[79] = '0';
  403882:	4b10      	ldr	r3, [pc, #64]	; (4038c4 <SendDispData+0x584>)
  403884:	2230      	movs	r2, #48	; 0x30
  403886:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			/* Sensor 1 Pleath Data */
			dispPkt[80] = CBuffReadByte(&sen1Data.pleathBuff);
  40388a:	4811      	ldr	r0, [pc, #68]	; (4038d0 <SendDispData+0x590>)
  40388c:	4b11      	ldr	r3, [pc, #68]	; (4038d4 <SendDispData+0x594>)
  40388e:	4798      	blx	r3
  403890:	4603      	mov	r3, r0
  403892:	461a      	mov	r2, r3
  403894:	4b0b      	ldr	r3, [pc, #44]	; (4038c4 <SendDispData+0x584>)
  403896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			/* Trigger Data */
			dispPkt[81] = CBuffReadByte(&trigBuff);
  40389a:	480f      	ldr	r0, [pc, #60]	; (4038d8 <SendDispData+0x598>)
  40389c:	4b0d      	ldr	r3, [pc, #52]	; (4038d4 <SendDispData+0x594>)
  40389e:	4798      	blx	r3
  4038a0:	4603      	mov	r3, r0
  4038a2:	461a      	mov	r2, r3
  4038a4:	4b07      	ldr	r3, [pc, #28]	; (4038c4 <SendDispData+0x584>)
  4038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			/* Sensor 2 Pleath Data */
			if(readS2)
  4038aa:	79fb      	ldrb	r3, [r7, #7]
  4038ac:	2b00      	cmp	r3, #0
  4038ae:	d023      	beq.n	4038f8 <SendDispData+0x5b8>
				dispPkt[82] = CBuffReadByte(&sen2Data.pleathBuff);
  4038b0:	480a      	ldr	r0, [pc, #40]	; (4038dc <SendDispData+0x59c>)
  4038b2:	4b08      	ldr	r3, [pc, #32]	; (4038d4 <SendDispData+0x594>)
  4038b4:	4798      	blx	r3
  4038b6:	4603      	mov	r3, r0
  4038b8:	461a      	mov	r2, r3
  4038ba:	4b02      	ldr	r3, [pc, #8]	; (4038c4 <SendDispData+0x584>)
  4038bc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  4038c0:	e01e      	b.n	403900 <SendDispData+0x5c0>
  4038c2:	bf00      	nop
  4038c4:	20000cac 	.word	0x20000cac
  4038c8:	20000cd0 	.word	0x20000cd0
  4038cc:	00403ddd 	.word	0x00403ddd
  4038d0:	20000bdf 	.word	0x20000bdf
  4038d4:	0040018d 	.word	0x0040018d
  4038d8:	20000d44 	.word	0x20000d44
  4038dc:	20000b0f 	.word	0x20000b0f
  4038e0:	20000cd6 	.word	0x20000cd6
  4038e4:	20000cdc 	.word	0x20000cdc
  4038e8:	20000ce2 	.word	0x20000ce2
  4038ec:	20000ce8 	.word	0x20000ce8
  4038f0:	20000cee 	.word	0x20000cee
  4038f4:	20000cf4 	.word	0x20000cf4
			else
				dispPkt[82] = 0;
  4038f8:	4bab      	ldr	r3, [pc, #684]	; (403ba8 <SendDispData+0x868>)
  4038fa:	2200      	movs	r2, #0
  4038fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			/* Checksum */
			dispPkt[83] = CalcChkSum(&dispPkt[78],5);
  403900:	2105      	movs	r1, #5
  403902:	48aa      	ldr	r0, [pc, #680]	; (403bac <SendDispData+0x86c>)
  403904:	4baa      	ldr	r3, [pc, #680]	; (403bb0 <SendDispData+0x870>)
  403906:	4798      	blx	r3
  403908:	4603      	mov	r3, r0
  40390a:	461a      	mov	r2, r3
  40390c:	4ba6      	ldr	r3, [pc, #664]	; (403ba8 <SendDispData+0x868>)
  40390e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

			/* Frame 15 */
			dispPkt[84] = '$';
  403912:	4ba5      	ldr	r3, [pc, #660]	; (403ba8 <SendDispData+0x868>)
  403914:	2224      	movs	r2, #36	; 0x24
  403916:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			/* Blank */
			dispPkt[85] = '0';
  40391a:	4ba3      	ldr	r3, [pc, #652]	; (403ba8 <SendDispData+0x868>)
  40391c:	2230      	movs	r2, #48	; 0x30
  40391e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			/* Sensor 1 Pleath Data */
			dispPkt[86] = CBuffReadByte(&sen1Data.pleathBuff);
  403922:	48a4      	ldr	r0, [pc, #656]	; (403bb4 <SendDispData+0x874>)
  403924:	4ba4      	ldr	r3, [pc, #656]	; (403bb8 <SendDispData+0x878>)
  403926:	4798      	blx	r3
  403928:	4603      	mov	r3, r0
  40392a:	461a      	mov	r2, r3
  40392c:	4b9e      	ldr	r3, [pc, #632]	; (403ba8 <SendDispData+0x868>)
  40392e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			/* Trigger Data */
			dispPkt[87] = CBuffReadByte(&trigBuff);
  403932:	48a2      	ldr	r0, [pc, #648]	; (403bbc <SendDispData+0x87c>)
  403934:	4ba0      	ldr	r3, [pc, #640]	; (403bb8 <SendDispData+0x878>)
  403936:	4798      	blx	r3
  403938:	4603      	mov	r3, r0
  40393a:	461a      	mov	r2, r3
  40393c:	4b9a      	ldr	r3, [pc, #616]	; (403ba8 <SendDispData+0x868>)
  40393e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			/* Sensor 2 Pleath Data */
			if(readS2)
  403942:	79fb      	ldrb	r3, [r7, #7]
  403944:	2b00      	cmp	r3, #0
  403946:	d008      	beq.n	40395a <SendDispData+0x61a>
				dispPkt[88] = CBuffReadByte(&sen2Data.pleathBuff);
  403948:	489d      	ldr	r0, [pc, #628]	; (403bc0 <SendDispData+0x880>)
  40394a:	4b9b      	ldr	r3, [pc, #620]	; (403bb8 <SendDispData+0x878>)
  40394c:	4798      	blx	r3
  40394e:	4603      	mov	r3, r0
  403950:	461a      	mov	r2, r3
  403952:	4b95      	ldr	r3, [pc, #596]	; (403ba8 <SendDispData+0x868>)
  403954:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  403958:	e003      	b.n	403962 <SendDispData+0x622>
			else
				dispPkt[88] = 0;
  40395a:	4b93      	ldr	r3, [pc, #588]	; (403ba8 <SendDispData+0x868>)
  40395c:	2200      	movs	r2, #0
  40395e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			/* Checksum */
			dispPkt[89] = CalcChkSum(&dispPkt[84],5);
  403962:	2105      	movs	r1, #5
  403964:	4897      	ldr	r0, [pc, #604]	; (403bc4 <SendDispData+0x884>)
  403966:	4b92      	ldr	r3, [pc, #584]	; (403bb0 <SendDispData+0x870>)
  403968:	4798      	blx	r3
  40396a:	4603      	mov	r3, r0
  40396c:	461a      	mov	r2, r3
  40396e:	4b8e      	ldr	r3, [pc, #568]	; (403ba8 <SendDispData+0x868>)
  403970:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

			/* Frame 16 */
			dispPkt[90] = '$';
  403974:	4b8c      	ldr	r3, [pc, #560]	; (403ba8 <SendDispData+0x868>)
  403976:	2224      	movs	r2, #36	; 0x24
  403978:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			/* Blank */
			dispPkt[91] = '0';
  40397c:	4b8a      	ldr	r3, [pc, #552]	; (403ba8 <SendDispData+0x868>)
  40397e:	2230      	movs	r2, #48	; 0x30
  403980:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
			/* Sensor 1 Pleath Data */
			dispPkt[92] = CBuffReadByte(&sen1Data.pleathBuff);
  403984:	488b      	ldr	r0, [pc, #556]	; (403bb4 <SendDispData+0x874>)
  403986:	4b8c      	ldr	r3, [pc, #560]	; (403bb8 <SendDispData+0x878>)
  403988:	4798      	blx	r3
  40398a:	4603      	mov	r3, r0
  40398c:	461a      	mov	r2, r3
  40398e:	4b86      	ldr	r3, [pc, #536]	; (403ba8 <SendDispData+0x868>)
  403990:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			/* Trigger Data */
			dispPkt[93] = CBuffReadByte(&trigBuff);
  403994:	4889      	ldr	r0, [pc, #548]	; (403bbc <SendDispData+0x87c>)
  403996:	4b88      	ldr	r3, [pc, #544]	; (403bb8 <SendDispData+0x878>)
  403998:	4798      	blx	r3
  40399a:	4603      	mov	r3, r0
  40399c:	461a      	mov	r2, r3
  40399e:	4b82      	ldr	r3, [pc, #520]	; (403ba8 <SendDispData+0x868>)
  4039a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			/* Sensor 2 Pleath Data */
			if(readS2)
  4039a4:	79fb      	ldrb	r3, [r7, #7]
  4039a6:	2b00      	cmp	r3, #0
  4039a8:	d008      	beq.n	4039bc <SendDispData+0x67c>
				dispPkt[94] = CBuffReadByte(&sen2Data.pleathBuff);
  4039aa:	4885      	ldr	r0, [pc, #532]	; (403bc0 <SendDispData+0x880>)
  4039ac:	4b82      	ldr	r3, [pc, #520]	; (403bb8 <SendDispData+0x878>)
  4039ae:	4798      	blx	r3
  4039b0:	4603      	mov	r3, r0
  4039b2:	461a      	mov	r2, r3
  4039b4:	4b7c      	ldr	r3, [pc, #496]	; (403ba8 <SendDispData+0x868>)
  4039b6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  4039ba:	e003      	b.n	4039c4 <SendDispData+0x684>
			else
				dispPkt[94] = 0;
  4039bc:	4b7a      	ldr	r3, [pc, #488]	; (403ba8 <SendDispData+0x868>)
  4039be:	2200      	movs	r2, #0
  4039c0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			/* Checksum */
			dispPkt[95] = CalcChkSum(&dispPkt[90],5);
  4039c4:	2105      	movs	r1, #5
  4039c6:	4880      	ldr	r0, [pc, #512]	; (403bc8 <SendDispData+0x888>)
  4039c8:	4b79      	ldr	r3, [pc, #484]	; (403bb0 <SendDispData+0x870>)
  4039ca:	4798      	blx	r3
  4039cc:	4603      	mov	r3, r0
  4039ce:	461a      	mov	r2, r3
  4039d0:	4b75      	ldr	r3, [pc, #468]	; (403ba8 <SendDispData+0x868>)
  4039d2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

			/* Frame 17 */
			dispPkt[96] = '$';
  4039d6:	4b74      	ldr	r3, [pc, #464]	; (403ba8 <SendDispData+0x868>)
  4039d8:	2224      	movs	r2, #36	; 0x24
  4039da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			/* Blank */
			dispPkt[97] = '0';
  4039de:	4b72      	ldr	r3, [pc, #456]	; (403ba8 <SendDispData+0x868>)
  4039e0:	2230      	movs	r2, #48	; 0x30
  4039e2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			/* Sensor 1 Pleath Data */
			dispPkt[98] = CBuffReadByte(&sen1Data.pleathBuff);
  4039e6:	4873      	ldr	r0, [pc, #460]	; (403bb4 <SendDispData+0x874>)
  4039e8:	4b73      	ldr	r3, [pc, #460]	; (403bb8 <SendDispData+0x878>)
  4039ea:	4798      	blx	r3
  4039ec:	4603      	mov	r3, r0
  4039ee:	461a      	mov	r2, r3
  4039f0:	4b6d      	ldr	r3, [pc, #436]	; (403ba8 <SendDispData+0x868>)
  4039f2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			/* Trigger Data */
			dispPkt[99] = CBuffReadByte(&trigBuff);
  4039f6:	4871      	ldr	r0, [pc, #452]	; (403bbc <SendDispData+0x87c>)
  4039f8:	4b6f      	ldr	r3, [pc, #444]	; (403bb8 <SendDispData+0x878>)
  4039fa:	4798      	blx	r3
  4039fc:	4603      	mov	r3, r0
  4039fe:	461a      	mov	r2, r3
  403a00:	4b69      	ldr	r3, [pc, #420]	; (403ba8 <SendDispData+0x868>)
  403a02:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			/* Sensor 2 Pleath Data */
			if(readS2)
  403a06:	79fb      	ldrb	r3, [r7, #7]
  403a08:	2b00      	cmp	r3, #0
  403a0a:	d008      	beq.n	403a1e <SendDispData+0x6de>
				dispPkt[100] = CBuffReadByte(&sen2Data.pleathBuff);
  403a0c:	486c      	ldr	r0, [pc, #432]	; (403bc0 <SendDispData+0x880>)
  403a0e:	4b6a      	ldr	r3, [pc, #424]	; (403bb8 <SendDispData+0x878>)
  403a10:	4798      	blx	r3
  403a12:	4603      	mov	r3, r0
  403a14:	461a      	mov	r2, r3
  403a16:	4b64      	ldr	r3, [pc, #400]	; (403ba8 <SendDispData+0x868>)
  403a18:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  403a1c:	e003      	b.n	403a26 <SendDispData+0x6e6>
			else
				dispPkt[100] = 0;
  403a1e:	4b62      	ldr	r3, [pc, #392]	; (403ba8 <SendDispData+0x868>)
  403a20:	2200      	movs	r2, #0
  403a22:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			/* Checksum */
			dispPkt[101] = CalcChkSum(&dispPkt[96],5);
  403a26:	2105      	movs	r1, #5
  403a28:	4868      	ldr	r0, [pc, #416]	; (403bcc <SendDispData+0x88c>)
  403a2a:	4b61      	ldr	r3, [pc, #388]	; (403bb0 <SendDispData+0x870>)
  403a2c:	4798      	blx	r3
  403a2e:	4603      	mov	r3, r0
  403a30:	461a      	mov	r2, r3
  403a32:	4b5d      	ldr	r3, [pc, #372]	; (403ba8 <SendDispData+0x868>)
  403a34:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

			/* Frame 18 */
			dispPkt[102] = '$';
  403a38:	4b5b      	ldr	r3, [pc, #364]	; (403ba8 <SendDispData+0x868>)
  403a3a:	2224      	movs	r2, #36	; 0x24
  403a3c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
			/* Blank */
			dispPkt[103] = '0';
  403a40:	4b59      	ldr	r3, [pc, #356]	; (403ba8 <SendDispData+0x868>)
  403a42:	2230      	movs	r2, #48	; 0x30
  403a44:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
			/* Sensor 1 Pleath Data */
			dispPkt[104] = CBuffReadByte(&sen1Data.pleathBuff);
  403a48:	485a      	ldr	r0, [pc, #360]	; (403bb4 <SendDispData+0x874>)
  403a4a:	4b5b      	ldr	r3, [pc, #364]	; (403bb8 <SendDispData+0x878>)
  403a4c:	4798      	blx	r3
  403a4e:	4603      	mov	r3, r0
  403a50:	461a      	mov	r2, r3
  403a52:	4b55      	ldr	r3, [pc, #340]	; (403ba8 <SendDispData+0x868>)
  403a54:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			/* Trigger Data */
			dispPkt[105] = CBuffReadByte(&trigBuff);
  403a58:	4858      	ldr	r0, [pc, #352]	; (403bbc <SendDispData+0x87c>)
  403a5a:	4b57      	ldr	r3, [pc, #348]	; (403bb8 <SendDispData+0x878>)
  403a5c:	4798      	blx	r3
  403a5e:	4603      	mov	r3, r0
  403a60:	461a      	mov	r2, r3
  403a62:	4b51      	ldr	r3, [pc, #324]	; (403ba8 <SendDispData+0x868>)
  403a64:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			/* Sensor 2 Pleath Data */
			if(readS2)
  403a68:	79fb      	ldrb	r3, [r7, #7]
  403a6a:	2b00      	cmp	r3, #0
  403a6c:	d008      	beq.n	403a80 <SendDispData+0x740>
				dispPkt[106] = CBuffReadByte(&sen2Data.pleathBuff);
  403a6e:	4854      	ldr	r0, [pc, #336]	; (403bc0 <SendDispData+0x880>)
  403a70:	4b51      	ldr	r3, [pc, #324]	; (403bb8 <SendDispData+0x878>)
  403a72:	4798      	blx	r3
  403a74:	4603      	mov	r3, r0
  403a76:	461a      	mov	r2, r3
  403a78:	4b4b      	ldr	r3, [pc, #300]	; (403ba8 <SendDispData+0x868>)
  403a7a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  403a7e:	e003      	b.n	403a88 <SendDispData+0x748>
			else
				dispPkt[106] = 0;
  403a80:	4b49      	ldr	r3, [pc, #292]	; (403ba8 <SendDispData+0x868>)
  403a82:	2200      	movs	r2, #0
  403a84:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			/* Checksum */
			dispPkt[107] = CalcChkSum(&dispPkt[102],5);
  403a88:	2105      	movs	r1, #5
  403a8a:	4851      	ldr	r0, [pc, #324]	; (403bd0 <SendDispData+0x890>)
  403a8c:	4b48      	ldr	r3, [pc, #288]	; (403bb0 <SendDispData+0x870>)
  403a8e:	4798      	blx	r3
  403a90:	4603      	mov	r3, r0
  403a92:	461a      	mov	r2, r3
  403a94:	4b44      	ldr	r3, [pc, #272]	; (403ba8 <SendDispData+0x868>)
  403a96:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

			/* Frame 19 */
			dispPkt[108] = '$';
  403a9a:	4b43      	ldr	r3, [pc, #268]	; (403ba8 <SendDispData+0x868>)
  403a9c:	2224      	movs	r2, #36	; 0x24
  403a9e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			/* Blank */
			dispPkt[109] = '0';
  403aa2:	4b41      	ldr	r3, [pc, #260]	; (403ba8 <SendDispData+0x868>)
  403aa4:	2230      	movs	r2, #48	; 0x30
  403aa6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			/* Sensor 1 Pleath Data */
			dispPkt[110] = CBuffReadByte(&sen1Data.pleathBuff);
  403aaa:	4842      	ldr	r0, [pc, #264]	; (403bb4 <SendDispData+0x874>)
  403aac:	4b42      	ldr	r3, [pc, #264]	; (403bb8 <SendDispData+0x878>)
  403aae:	4798      	blx	r3
  403ab0:	4603      	mov	r3, r0
  403ab2:	461a      	mov	r2, r3
  403ab4:	4b3c      	ldr	r3, [pc, #240]	; (403ba8 <SendDispData+0x868>)
  403ab6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			/* Trigger Data */
			dispPkt[111] = CBuffReadByte(&trigBuff);
  403aba:	4840      	ldr	r0, [pc, #256]	; (403bbc <SendDispData+0x87c>)
  403abc:	4b3e      	ldr	r3, [pc, #248]	; (403bb8 <SendDispData+0x878>)
  403abe:	4798      	blx	r3
  403ac0:	4603      	mov	r3, r0
  403ac2:	461a      	mov	r2, r3
  403ac4:	4b38      	ldr	r3, [pc, #224]	; (403ba8 <SendDispData+0x868>)
  403ac6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			/* Sensor 2 Pleath Data */
			if(readS2)
  403aca:	79fb      	ldrb	r3, [r7, #7]
  403acc:	2b00      	cmp	r3, #0
  403ace:	d008      	beq.n	403ae2 <SendDispData+0x7a2>
				dispPkt[112] = CBuffReadByte(&sen2Data.pleathBuff);
  403ad0:	483b      	ldr	r0, [pc, #236]	; (403bc0 <SendDispData+0x880>)
  403ad2:	4b39      	ldr	r3, [pc, #228]	; (403bb8 <SendDispData+0x878>)
  403ad4:	4798      	blx	r3
  403ad6:	4603      	mov	r3, r0
  403ad8:	461a      	mov	r2, r3
  403ada:	4b33      	ldr	r3, [pc, #204]	; (403ba8 <SendDispData+0x868>)
  403adc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  403ae0:	e003      	b.n	403aea <SendDispData+0x7aa>
			else
				dispPkt[112] = 0;
  403ae2:	4b31      	ldr	r3, [pc, #196]	; (403ba8 <SendDispData+0x868>)
  403ae4:	2200      	movs	r2, #0
  403ae6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
			/* Checksum */
			dispPkt[113] = CalcChkSum(&dispPkt[108],5);
  403aea:	2105      	movs	r1, #5
  403aec:	4839      	ldr	r0, [pc, #228]	; (403bd4 <SendDispData+0x894>)
  403aee:	4b30      	ldr	r3, [pc, #192]	; (403bb0 <SendDispData+0x870>)
  403af0:	4798      	blx	r3
  403af2:	4603      	mov	r3, r0
  403af4:	461a      	mov	r2, r3
  403af6:	4b2c      	ldr	r3, [pc, #176]	; (403ba8 <SendDispData+0x868>)
  403af8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

			/* Frame 20 */
			dispPkt[114] = '$';
  403afc:	4b2a      	ldr	r3, [pc, #168]	; (403ba8 <SendDispData+0x868>)
  403afe:	2224      	movs	r2, #36	; 0x24
  403b00:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
			/* Blank */
			dispPkt[115] = '0';
  403b04:	4b28      	ldr	r3, [pc, #160]	; (403ba8 <SendDispData+0x868>)
  403b06:	2230      	movs	r2, #48	; 0x30
  403b08:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
			/* Sensor 1 Pleath Data */
			dispPkt[116] = CBuffReadByte(&sen1Data.pleathBuff);
  403b0c:	4829      	ldr	r0, [pc, #164]	; (403bb4 <SendDispData+0x874>)
  403b0e:	4b2a      	ldr	r3, [pc, #168]	; (403bb8 <SendDispData+0x878>)
  403b10:	4798      	blx	r3
  403b12:	4603      	mov	r3, r0
  403b14:	461a      	mov	r2, r3
  403b16:	4b24      	ldr	r3, [pc, #144]	; (403ba8 <SendDispData+0x868>)
  403b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
			/* Trigger Data */
			dispPkt[117] = CBuffReadByte(&trigBuff);
  403b1c:	4827      	ldr	r0, [pc, #156]	; (403bbc <SendDispData+0x87c>)
  403b1e:	4b26      	ldr	r3, [pc, #152]	; (403bb8 <SendDispData+0x878>)
  403b20:	4798      	blx	r3
  403b22:	4603      	mov	r3, r0
  403b24:	461a      	mov	r2, r3
  403b26:	4b20      	ldr	r3, [pc, #128]	; (403ba8 <SendDispData+0x868>)
  403b28:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			/* Sensor 2 Pleath Data */
			if(readS2)
  403b2c:	79fb      	ldrb	r3, [r7, #7]
  403b2e:	2b00      	cmp	r3, #0
  403b30:	d008      	beq.n	403b44 <SendDispData+0x804>
				dispPkt[118] = CBuffReadByte(&sen2Data.pleathBuff);
  403b32:	4823      	ldr	r0, [pc, #140]	; (403bc0 <SendDispData+0x880>)
  403b34:	4b20      	ldr	r3, [pc, #128]	; (403bb8 <SendDispData+0x878>)
  403b36:	4798      	blx	r3
  403b38:	4603      	mov	r3, r0
  403b3a:	461a      	mov	r2, r3
  403b3c:	4b1a      	ldr	r3, [pc, #104]	; (403ba8 <SendDispData+0x868>)
  403b3e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  403b42:	e003      	b.n	403b4c <SendDispData+0x80c>
			else
				dispPkt[118] = 0;
  403b44:	4b18      	ldr	r3, [pc, #96]	; (403ba8 <SendDispData+0x868>)
  403b46:	2200      	movs	r2, #0
  403b48:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
			/* Checksum */
			dispPkt[119] = CalcChkSum(&dispPkt[114],5);
  403b4c:	2105      	movs	r1, #5
  403b4e:	4822      	ldr	r0, [pc, #136]	; (403bd8 <SendDispData+0x898>)
  403b50:	4b17      	ldr	r3, [pc, #92]	; (403bb0 <SendDispData+0x870>)
  403b52:	4798      	blx	r3
  403b54:	4603      	mov	r3, r0
  403b56:	461a      	mov	r2, r3
  403b58:	4b13      	ldr	r3, [pc, #76]	; (403ba8 <SendDispData+0x868>)
  403b5a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77

			/* Frame 21 */
			dispPkt[120] = '$';
  403b5e:	4b12      	ldr	r3, [pc, #72]	; (403ba8 <SendDispData+0x868>)
  403b60:	2224      	movs	r2, #36	; 0x24
  403b62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			/* Blank */
			dispPkt[121] = '0';
  403b66:	4b10      	ldr	r3, [pc, #64]	; (403ba8 <SendDispData+0x868>)
  403b68:	2230      	movs	r2, #48	; 0x30
  403b6a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
			/* Sensor 1 Pleath Data */
			dispPkt[122] = CBuffReadByte(&sen1Data.pleathBuff);
  403b6e:	4811      	ldr	r0, [pc, #68]	; (403bb4 <SendDispData+0x874>)
  403b70:	4b11      	ldr	r3, [pc, #68]	; (403bb8 <SendDispData+0x878>)
  403b72:	4798      	blx	r3
  403b74:	4603      	mov	r3, r0
  403b76:	461a      	mov	r2, r3
  403b78:	4b0b      	ldr	r3, [pc, #44]	; (403ba8 <SendDispData+0x868>)
  403b7a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
			/* Trigger Data */
			dispPkt[123] = CBuffReadByte(&trigBuff);
  403b7e:	480f      	ldr	r0, [pc, #60]	; (403bbc <SendDispData+0x87c>)
  403b80:	4b0d      	ldr	r3, [pc, #52]	; (403bb8 <SendDispData+0x878>)
  403b82:	4798      	blx	r3
  403b84:	4603      	mov	r3, r0
  403b86:	461a      	mov	r2, r3
  403b88:	4b07      	ldr	r3, [pc, #28]	; (403ba8 <SendDispData+0x868>)
  403b8a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
			/* Sensor 2 Pleath Data */
			if(readS2)
  403b8e:	79fb      	ldrb	r3, [r7, #7]
  403b90:	2b00      	cmp	r3, #0
  403b92:	d023      	beq.n	403bdc <SendDispData+0x89c>
				dispPkt[124] = CBuffReadByte(&sen2Data.pleathBuff);
  403b94:	480a      	ldr	r0, [pc, #40]	; (403bc0 <SendDispData+0x880>)
  403b96:	4b08      	ldr	r3, [pc, #32]	; (403bb8 <SendDispData+0x878>)
  403b98:	4798      	blx	r3
  403b9a:	4603      	mov	r3, r0
  403b9c:	461a      	mov	r2, r3
  403b9e:	4b02      	ldr	r3, [pc, #8]	; (403ba8 <SendDispData+0x868>)
  403ba0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  403ba4:	e01e      	b.n	403be4 <SendDispData+0x8a4>
  403ba6:	bf00      	nop
  403ba8:	20000cac 	.word	0x20000cac
  403bac:	20000cfa 	.word	0x20000cfa
  403bb0:	00403ddd 	.word	0x00403ddd
  403bb4:	20000bdf 	.word	0x20000bdf
  403bb8:	0040018d 	.word	0x0040018d
  403bbc:	20000d44 	.word	0x20000d44
  403bc0:	20000b0f 	.word	0x20000b0f
  403bc4:	20000d00 	.word	0x20000d00
  403bc8:	20000d06 	.word	0x20000d06
  403bcc:	20000d0c 	.word	0x20000d0c
  403bd0:	20000d12 	.word	0x20000d12
  403bd4:	20000d18 	.word	0x20000d18
  403bd8:	20000d1e 	.word	0x20000d1e
			else
				dispPkt[124] = 0;
  403bdc:	4b71      	ldr	r3, [pc, #452]	; (403da4 <SendDispData+0xa64>)
  403bde:	2200      	movs	r2, #0
  403be0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			/* Checksum */
			dispPkt[125] = CalcChkSum(&dispPkt[120],5);
  403be4:	2105      	movs	r1, #5
  403be6:	4870      	ldr	r0, [pc, #448]	; (403da8 <SendDispData+0xa68>)
  403be8:	4b70      	ldr	r3, [pc, #448]	; (403dac <SendDispData+0xa6c>)
  403bea:	4798      	blx	r3
  403bec:	4603      	mov	r3, r0
  403bee:	461a      	mov	r2, r3
  403bf0:	4b6c      	ldr	r3, [pc, #432]	; (403da4 <SendDispData+0xa64>)
  403bf2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

			/* Frame 22 */
			dispPkt[126] = '$';
  403bf6:	4b6b      	ldr	r3, [pc, #428]	; (403da4 <SendDispData+0xa64>)
  403bf8:	2224      	movs	r2, #36	; 0x24
  403bfa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			/* Blank */
			dispPkt[127] = '0';
  403bfe:	4b69      	ldr	r3, [pc, #420]	; (403da4 <SendDispData+0xa64>)
  403c00:	2230      	movs	r2, #48	; 0x30
  403c02:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			/* Sensor 1 Pleath Data */
			dispPkt[128] = CBuffReadByte(&sen1Data.pleathBuff);
  403c06:	486a      	ldr	r0, [pc, #424]	; (403db0 <SendDispData+0xa70>)
  403c08:	4b6a      	ldr	r3, [pc, #424]	; (403db4 <SendDispData+0xa74>)
  403c0a:	4798      	blx	r3
  403c0c:	4603      	mov	r3, r0
  403c0e:	461a      	mov	r2, r3
  403c10:	4b64      	ldr	r3, [pc, #400]	; (403da4 <SendDispData+0xa64>)
  403c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			/* Trigger Data */
			dispPkt[129] = CBuffReadByte(&trigBuff);
  403c16:	4868      	ldr	r0, [pc, #416]	; (403db8 <SendDispData+0xa78>)
  403c18:	4b66      	ldr	r3, [pc, #408]	; (403db4 <SendDispData+0xa74>)
  403c1a:	4798      	blx	r3
  403c1c:	4603      	mov	r3, r0
  403c1e:	461a      	mov	r2, r3
  403c20:	4b60      	ldr	r3, [pc, #384]	; (403da4 <SendDispData+0xa64>)
  403c22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			/* Sensor 2 Pleath Data */
			if(readS2)
  403c26:	79fb      	ldrb	r3, [r7, #7]
  403c28:	2b00      	cmp	r3, #0
  403c2a:	d008      	beq.n	403c3e <SendDispData+0x8fe>
				dispPkt[130] = CBuffReadByte(&sen2Data.pleathBuff);
  403c2c:	4863      	ldr	r0, [pc, #396]	; (403dbc <SendDispData+0xa7c>)
  403c2e:	4b61      	ldr	r3, [pc, #388]	; (403db4 <SendDispData+0xa74>)
  403c30:	4798      	blx	r3
  403c32:	4603      	mov	r3, r0
  403c34:	461a      	mov	r2, r3
  403c36:	4b5b      	ldr	r3, [pc, #364]	; (403da4 <SendDispData+0xa64>)
  403c38:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  403c3c:	e003      	b.n	403c46 <SendDispData+0x906>
			else
				dispPkt[130] = 0;
  403c3e:	4b59      	ldr	r3, [pc, #356]	; (403da4 <SendDispData+0xa64>)
  403c40:	2200      	movs	r2, #0
  403c42:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			/* Checksum */
			dispPkt[131] = CalcChkSum(&dispPkt[126],5);
  403c46:	2105      	movs	r1, #5
  403c48:	485d      	ldr	r0, [pc, #372]	; (403dc0 <SendDispData+0xa80>)
  403c4a:	4b58      	ldr	r3, [pc, #352]	; (403dac <SendDispData+0xa6c>)
  403c4c:	4798      	blx	r3
  403c4e:	4603      	mov	r3, r0
  403c50:	461a      	mov	r2, r3
  403c52:	4b54      	ldr	r3, [pc, #336]	; (403da4 <SendDispData+0xa64>)
  403c54:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

			/* Frame 23 */
			dispPkt[132] = '$';
  403c58:	4b52      	ldr	r3, [pc, #328]	; (403da4 <SendDispData+0xa64>)
  403c5a:	2224      	movs	r2, #36	; 0x24
  403c5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			/* Blank */
			dispPkt[133] = '0';
  403c60:	4b50      	ldr	r3, [pc, #320]	; (403da4 <SendDispData+0xa64>)
  403c62:	2230      	movs	r2, #48	; 0x30
  403c64:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			/* Sensor 1 Pleath Data */
			dispPkt[134] = CBuffReadByte(&sen1Data.pleathBuff);
  403c68:	4851      	ldr	r0, [pc, #324]	; (403db0 <SendDispData+0xa70>)
  403c6a:	4b52      	ldr	r3, [pc, #328]	; (403db4 <SendDispData+0xa74>)
  403c6c:	4798      	blx	r3
  403c6e:	4603      	mov	r3, r0
  403c70:	461a      	mov	r2, r3
  403c72:	4b4c      	ldr	r3, [pc, #304]	; (403da4 <SendDispData+0xa64>)
  403c74:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			/* Trigger Data */
			dispPkt[135] = CBuffReadByte(&trigBuff);
  403c78:	484f      	ldr	r0, [pc, #316]	; (403db8 <SendDispData+0xa78>)
  403c7a:	4b4e      	ldr	r3, [pc, #312]	; (403db4 <SendDispData+0xa74>)
  403c7c:	4798      	blx	r3
  403c7e:	4603      	mov	r3, r0
  403c80:	461a      	mov	r2, r3
  403c82:	4b48      	ldr	r3, [pc, #288]	; (403da4 <SendDispData+0xa64>)
  403c84:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			/* Sensor 2 Pleath Data */
			if(readS2)
  403c88:	79fb      	ldrb	r3, [r7, #7]
  403c8a:	2b00      	cmp	r3, #0
  403c8c:	d008      	beq.n	403ca0 <SendDispData+0x960>
				dispPkt[136] = CBuffReadByte(&sen2Data.pleathBuff);
  403c8e:	484b      	ldr	r0, [pc, #300]	; (403dbc <SendDispData+0xa7c>)
  403c90:	4b48      	ldr	r3, [pc, #288]	; (403db4 <SendDispData+0xa74>)
  403c92:	4798      	blx	r3
  403c94:	4603      	mov	r3, r0
  403c96:	461a      	mov	r2, r3
  403c98:	4b42      	ldr	r3, [pc, #264]	; (403da4 <SendDispData+0xa64>)
  403c9a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  403c9e:	e003      	b.n	403ca8 <SendDispData+0x968>
			else
				dispPkt[136] = 0;
  403ca0:	4b40      	ldr	r3, [pc, #256]	; (403da4 <SendDispData+0xa64>)
  403ca2:	2200      	movs	r2, #0
  403ca4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			/* Checksum */
			dispPkt[137] = CalcChkSum(&dispPkt[132],5);
  403ca8:	2105      	movs	r1, #5
  403caa:	4846      	ldr	r0, [pc, #280]	; (403dc4 <SendDispData+0xa84>)
  403cac:	4b3f      	ldr	r3, [pc, #252]	; (403dac <SendDispData+0xa6c>)
  403cae:	4798      	blx	r3
  403cb0:	4603      	mov	r3, r0
  403cb2:	461a      	mov	r2, r3
  403cb4:	4b3b      	ldr	r3, [pc, #236]	; (403da4 <SendDispData+0xa64>)
  403cb6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		
			/* Frame 24 */
			dispPkt[138] = '$';
  403cba:	4b3a      	ldr	r3, [pc, #232]	; (403da4 <SendDispData+0xa64>)
  403cbc:	2224      	movs	r2, #36	; 0x24
  403cbe:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			/* Blank */
			dispPkt[139] = '0';
  403cc2:	4b38      	ldr	r3, [pc, #224]	; (403da4 <SendDispData+0xa64>)
  403cc4:	2230      	movs	r2, #48	; 0x30
  403cc6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
			/* Sensor 1 Pleath Data */
			dispPkt[140] = CBuffReadByte(&sen1Data.pleathBuff);
  403cca:	4839      	ldr	r0, [pc, #228]	; (403db0 <SendDispData+0xa70>)
  403ccc:	4b39      	ldr	r3, [pc, #228]	; (403db4 <SendDispData+0xa74>)
  403cce:	4798      	blx	r3
  403cd0:	4603      	mov	r3, r0
  403cd2:	461a      	mov	r2, r3
  403cd4:	4b33      	ldr	r3, [pc, #204]	; (403da4 <SendDispData+0xa64>)
  403cd6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			/* Trigger Data */
			dispPkt[141] = CBuffReadByte(&trigBuff);
  403cda:	4837      	ldr	r0, [pc, #220]	; (403db8 <SendDispData+0xa78>)
  403cdc:	4b35      	ldr	r3, [pc, #212]	; (403db4 <SendDispData+0xa74>)
  403cde:	4798      	blx	r3
  403ce0:	4603      	mov	r3, r0
  403ce2:	461a      	mov	r2, r3
  403ce4:	4b2f      	ldr	r3, [pc, #188]	; (403da4 <SendDispData+0xa64>)
  403ce6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			/* Sensor 2 Pleath Data */
			if(readS2)
  403cea:	79fb      	ldrb	r3, [r7, #7]
  403cec:	2b00      	cmp	r3, #0
  403cee:	d008      	beq.n	403d02 <SendDispData+0x9c2>
				dispPkt[142] = CBuffReadByte(&sen2Data.pleathBuff);
  403cf0:	4832      	ldr	r0, [pc, #200]	; (403dbc <SendDispData+0xa7c>)
  403cf2:	4b30      	ldr	r3, [pc, #192]	; (403db4 <SendDispData+0xa74>)
  403cf4:	4798      	blx	r3
  403cf6:	4603      	mov	r3, r0
  403cf8:	461a      	mov	r2, r3
  403cfa:	4b2a      	ldr	r3, [pc, #168]	; (403da4 <SendDispData+0xa64>)
  403cfc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  403d00:	e003      	b.n	403d0a <SendDispData+0x9ca>
			else
				dispPkt[142] = 0;
  403d02:	4b28      	ldr	r3, [pc, #160]	; (403da4 <SendDispData+0xa64>)
  403d04:	2200      	movs	r2, #0
  403d06:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			/* Checksum */
			dispPkt[143] = CalcChkSum(&dispPkt[138],5);
  403d0a:	2105      	movs	r1, #5
  403d0c:	482e      	ldr	r0, [pc, #184]	; (403dc8 <SendDispData+0xa88>)
  403d0e:	4b27      	ldr	r3, [pc, #156]	; (403dac <SendDispData+0xa6c>)
  403d10:	4798      	blx	r3
  403d12:	4603      	mov	r3, r0
  403d14:	461a      	mov	r2, r3
  403d16:	4b23      	ldr	r3, [pc, #140]	; (403da4 <SendDispData+0xa64>)
  403d18:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f

			/* Frame 25 */
			dispPkt[144] = '$';
  403d1c:	4b21      	ldr	r3, [pc, #132]	; (403da4 <SendDispData+0xa64>)
  403d1e:	2224      	movs	r2, #36	; 0x24
  403d20:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			/* Blank */
			dispPkt[145] = '0';
  403d24:	4b1f      	ldr	r3, [pc, #124]	; (403da4 <SendDispData+0xa64>)
  403d26:	2230      	movs	r2, #48	; 0x30
  403d28:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
			/* Sensor 1 Pleath Data */
			dispPkt[146] = CBuffReadByte(&sen1Data.pleathBuff);
  403d2c:	4820      	ldr	r0, [pc, #128]	; (403db0 <SendDispData+0xa70>)
  403d2e:	4b21      	ldr	r3, [pc, #132]	; (403db4 <SendDispData+0xa74>)
  403d30:	4798      	blx	r3
  403d32:	4603      	mov	r3, r0
  403d34:	461a      	mov	r2, r3
  403d36:	4b1b      	ldr	r3, [pc, #108]	; (403da4 <SendDispData+0xa64>)
  403d38:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			/* Trigger Data */
			dispPkt[147] = CBuffReadByte(&trigBuff);
  403d3c:	481e      	ldr	r0, [pc, #120]	; (403db8 <SendDispData+0xa78>)
  403d3e:	4b1d      	ldr	r3, [pc, #116]	; (403db4 <SendDispData+0xa74>)
  403d40:	4798      	blx	r3
  403d42:	4603      	mov	r3, r0
  403d44:	461a      	mov	r2, r3
  403d46:	4b17      	ldr	r3, [pc, #92]	; (403da4 <SendDispData+0xa64>)
  403d48:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			/* Sensor 2 Pleath Data */
			if(readS2)
  403d4c:	79fb      	ldrb	r3, [r7, #7]
  403d4e:	2b00      	cmp	r3, #0
  403d50:	d008      	beq.n	403d64 <SendDispData+0xa24>
				dispPkt[148] = CBuffReadByte(&sen2Data.pleathBuff);
  403d52:	481a      	ldr	r0, [pc, #104]	; (403dbc <SendDispData+0xa7c>)
  403d54:	4b17      	ldr	r3, [pc, #92]	; (403db4 <SendDispData+0xa74>)
  403d56:	4798      	blx	r3
  403d58:	4603      	mov	r3, r0
  403d5a:	461a      	mov	r2, r3
  403d5c:	4b11      	ldr	r3, [pc, #68]	; (403da4 <SendDispData+0xa64>)
  403d5e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  403d62:	e003      	b.n	403d6c <SendDispData+0xa2c>
			else
				dispPkt[148] = 0;
  403d64:	4b0f      	ldr	r3, [pc, #60]	; (403da4 <SendDispData+0xa64>)
  403d66:	2200      	movs	r2, #0
  403d68:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			/* Checksum */
			dispPkt[149] = CalcChkSum(&dispPkt[144],5);
  403d6c:	2105      	movs	r1, #5
  403d6e:	4817      	ldr	r0, [pc, #92]	; (403dcc <SendDispData+0xa8c>)
  403d70:	4b0e      	ldr	r3, [pc, #56]	; (403dac <SendDispData+0xa6c>)
  403d72:	4798      	blx	r3
  403d74:	4603      	mov	r3, r0
  403d76:	461a      	mov	r2, r3
  403d78:	4b0a      	ldr	r3, [pc, #40]	; (403da4 <SendDispData+0xa64>)
  403d7a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		
			/* Initiate PDC Transfer for 150 bytes */
			dispPdcPkt.ul_addr = (uint32_t) dispPkt;
  403d7e:	4a09      	ldr	r2, [pc, #36]	; (403da4 <SendDispData+0xa64>)
  403d80:	4b13      	ldr	r3, [pc, #76]	; (403dd0 <SendDispData+0xa90>)
  403d82:	601a      	str	r2, [r3, #0]
			dispPdcPkt.ul_size = 150;
  403d84:	4b12      	ldr	r3, [pc, #72]	; (403dd0 <SendDispData+0xa90>)
  403d86:	2296      	movs	r2, #150	; 0x96
  403d88:	605a      	str	r2, [r3, #4]
			pdc_tx_init(dispUartPdcBase, &dispPdcPkt, NULL);
  403d8a:	4b12      	ldr	r3, [pc, #72]	; (403dd4 <SendDispData+0xa94>)
  403d8c:	681b      	ldr	r3, [r3, #0]
  403d8e:	2200      	movs	r2, #0
  403d90:	490f      	ldr	r1, [pc, #60]	; (403dd0 <SendDispData+0xa90>)
  403d92:	4618      	mov	r0, r3
  403d94:	4b10      	ldr	r3, [pc, #64]	; (403dd8 <SendDispData+0xa98>)
  403d96:	4798      	blx	r3
  403d98:	e000      	b.n	403d9c <SendDispData+0xa5c>
		if (!(uart_get_status(DISP_UART) & UART_SR_ENDTX)) 
	#elif defined(BOARD_NIRA91)
		if (!(usart_get_status(DISP_USART) & US_CSR_ENDTX)) 
	#endif
	{
		return;
  403d9a:	bf00      	nop
				pdc_tx_init(dispUartPdcBase, &dispPdcPkt, NULL);
				dispTick = 0;
			}
		#endif
	#endif
}
  403d9c:	3708      	adds	r7, #8
  403d9e:	46bd      	mov	sp, r7
  403da0:	bd80      	pop	{r7, pc}
  403da2:	bf00      	nop
  403da4:	20000cac 	.word	0x20000cac
  403da8:	20000d24 	.word	0x20000d24
  403dac:	00403ddd 	.word	0x00403ddd
  403db0:	20000bdf 	.word	0x20000bdf
  403db4:	0040018d 	.word	0x0040018d
  403db8:	20000d44 	.word	0x20000d44
  403dbc:	20000b0f 	.word	0x20000b0f
  403dc0:	20000d2a 	.word	0x20000d2a
  403dc4:	20000d30 	.word	0x20000d30
  403dc8:	20000d36 	.word	0x20000d36
  403dcc:	20000d3c 	.word	0x20000d3c
  403dd0:	20000e10 	.word	0x20000e10
  403dd4:	20000e28 	.word	0x20000e28
  403dd8:	00401771 	.word	0x00401771

00403ddc <CalcChkSum>:

uint8_t CalcChkSum (uint8_t * buff, uint8_t len)
{
  403ddc:	b480      	push	{r7}
  403dde:	b085      	sub	sp, #20
  403de0:	af00      	add	r7, sp, #0
  403de2:	6078      	str	r0, [r7, #4]
  403de4:	460b      	mov	r3, r1
  403de6:	70fb      	strb	r3, [r7, #3]
	uint8_t sum = buff[0], i;
  403de8:	687b      	ldr	r3, [r7, #4]
  403dea:	781b      	ldrb	r3, [r3, #0]
  403dec:	73fb      	strb	r3, [r7, #15]
	for (i = 1; i < len; i++)
  403dee:	2301      	movs	r3, #1
  403df0:	73bb      	strb	r3, [r7, #14]
  403df2:	e009      	b.n	403e08 <CalcChkSum+0x2c>
	{
		sum += buff[i];
  403df4:	7bbb      	ldrb	r3, [r7, #14]
  403df6:	687a      	ldr	r2, [r7, #4]
  403df8:	4413      	add	r3, r2
  403dfa:	781a      	ldrb	r2, [r3, #0]
  403dfc:	7bfb      	ldrb	r3, [r7, #15]
  403dfe:	4413      	add	r3, r2
  403e00:	73fb      	strb	r3, [r7, #15]
}

uint8_t CalcChkSum (uint8_t * buff, uint8_t len)
{
	uint8_t sum = buff[0], i;
	for (i = 1; i < len; i++)
  403e02:	7bbb      	ldrb	r3, [r7, #14]
  403e04:	3301      	adds	r3, #1
  403e06:	73bb      	strb	r3, [r7, #14]
  403e08:	7bba      	ldrb	r2, [r7, #14]
  403e0a:	78fb      	ldrb	r3, [r7, #3]
  403e0c:	429a      	cmp	r2, r3
  403e0e:	d3f1      	bcc.n	403df4 <CalcChkSum+0x18>
	{
		sum += buff[i];
	}
	return sum;	
  403e10:	7bfb      	ldrb	r3, [r7, #15]
}
  403e12:	4618      	mov	r0, r3
  403e14:	3714      	adds	r7, #20
  403e16:	46bd      	mov	sp, r7
  403e18:	bc80      	pop	{r7}
  403e1a:	4770      	bx	lr

00403e1c <PollSwitches>:
		}
	#endif
}

void PollSwitches(void)
{
  403e1c:	b580      	push	{r7, lr}
  403e1e:	af00      	add	r7, sp, #0
	#if defined(BOARD_NIRA91) 
		if(gpio_pin_is_low(PIN_SW_PRESS_UP_IDX))
  403e20:	2020      	movs	r0, #32
  403e22:	4b3d      	ldr	r3, [pc, #244]	; (403f18 <PollSwitches+0xfc>)
  403e24:	4798      	blx	r3
  403e26:	4603      	mov	r3, r0
  403e28:	2b00      	cmp	r3, #0
  403e2a:	d117      	bne.n	403e5c <PollSwitches+0x40>
		{
			pSetPt +=PRESSURE_INCR;
  403e2c:	4b3b      	ldr	r3, [pc, #236]	; (403f1c <PollSwitches+0x100>)
  403e2e:	681a      	ldr	r2, [r3, #0]
  403e30:	4b3b      	ldr	r3, [pc, #236]	; (403f20 <PollSwitches+0x104>)
  403e32:	493c      	ldr	r1, [pc, #240]	; (403f24 <PollSwitches+0x108>)
  403e34:	4610      	mov	r0, r2
  403e36:	4798      	blx	r3
  403e38:	4603      	mov	r3, r0
  403e3a:	461a      	mov	r2, r3
  403e3c:	4b37      	ldr	r3, [pc, #220]	; (403f1c <PollSwitches+0x100>)
  403e3e:	601a      	str	r2, [r3, #0]
			if(pSetPt>MAX_PSET_POINT)
  403e40:	4b36      	ldr	r3, [pc, #216]	; (403f1c <PollSwitches+0x100>)
  403e42:	681a      	ldr	r2, [r3, #0]
  403e44:	4b38      	ldr	r3, [pc, #224]	; (403f28 <PollSwitches+0x10c>)
  403e46:	4939      	ldr	r1, [pc, #228]	; (403f2c <PollSwitches+0x110>)
  403e48:	4610      	mov	r0, r2
  403e4a:	4798      	blx	r3
  403e4c:	4603      	mov	r3, r0
  403e4e:	2b00      	cmp	r3, #0
  403e50:	d100      	bne.n	403e54 <PollSwitches+0x38>
				if(holdDur>MIN_DELAY_DUR)
					holdDur = MIN_DELAY_DUR;
			}
		#endif
	#endif
  403e52:	e05f      	b.n	403f14 <PollSwitches+0xf8>
	#if defined(BOARD_NIRA91) 
		if(gpio_pin_is_low(PIN_SW_PRESS_UP_IDX))
		{
			pSetPt +=PRESSURE_INCR;
			if(pSetPt>MAX_PSET_POINT)
				pSetPt = MAX_PSET_POINT;
  403e54:	4b31      	ldr	r3, [pc, #196]	; (403f1c <PollSwitches+0x100>)
  403e56:	4a35      	ldr	r2, [pc, #212]	; (403f2c <PollSwitches+0x110>)
  403e58:	601a      	str	r2, [r3, #0]
				if(holdDur>MIN_DELAY_DUR)
					holdDur = MIN_DELAY_DUR;
			}
		#endif
	#endif
  403e5a:	e05b      	b.n	403f14 <PollSwitches+0xf8>
		{
			pSetPt +=PRESSURE_INCR;
			if(pSetPt>MAX_PSET_POINT)
				pSetPt = MAX_PSET_POINT;
		}
		else if(gpio_pin_is_low(PIN_SW_PRESS_DN_IDX))
  403e5c:	2021      	movs	r0, #33	; 0x21
  403e5e:	4b2e      	ldr	r3, [pc, #184]	; (403f18 <PollSwitches+0xfc>)
  403e60:	4798      	blx	r3
  403e62:	4603      	mov	r3, r0
  403e64:	2b00      	cmp	r3, #0
  403e66:	d119      	bne.n	403e9c <PollSwitches+0x80>
		{
			pSetPt -=PRESSURE_INCR;
  403e68:	4b2c      	ldr	r3, [pc, #176]	; (403f1c <PollSwitches+0x100>)
  403e6a:	681a      	ldr	r2, [r3, #0]
  403e6c:	4b30      	ldr	r3, [pc, #192]	; (403f30 <PollSwitches+0x114>)
  403e6e:	492d      	ldr	r1, [pc, #180]	; (403f24 <PollSwitches+0x108>)
  403e70:	4610      	mov	r0, r2
  403e72:	4798      	blx	r3
  403e74:	4603      	mov	r3, r0
  403e76:	461a      	mov	r2, r3
  403e78:	4b28      	ldr	r3, [pc, #160]	; (403f1c <PollSwitches+0x100>)
  403e7a:	601a      	str	r2, [r3, #0]
			if(pSetPt<MIN_PSET_POINT)
  403e7c:	4b27      	ldr	r3, [pc, #156]	; (403f1c <PollSwitches+0x100>)
  403e7e:	681a      	ldr	r2, [r3, #0]
  403e80:	4b2c      	ldr	r3, [pc, #176]	; (403f34 <PollSwitches+0x118>)
  403e82:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  403e86:	4610      	mov	r0, r2
  403e88:	4798      	blx	r3
  403e8a:	4603      	mov	r3, r0
  403e8c:	2b00      	cmp	r3, #0
  403e8e:	d100      	bne.n	403e92 <PollSwitches+0x76>
				if(holdDur>MIN_DELAY_DUR)
					holdDur = MIN_DELAY_DUR;
			}
		#endif
	#endif
  403e90:	e040      	b.n	403f14 <PollSwitches+0xf8>
		}
		else if(gpio_pin_is_low(PIN_SW_PRESS_DN_IDX))
		{
			pSetPt -=PRESSURE_INCR;
			if(pSetPt<MIN_PSET_POINT)
				pSetPt = MIN_PSET_POINT;
  403e92:	4b22      	ldr	r3, [pc, #136]	; (403f1c <PollSwitches+0x100>)
  403e94:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
  403e98:	601a      	str	r2, [r3, #0]
				if(holdDur>MIN_DELAY_DUR)
					holdDur = MIN_DELAY_DUR;
			}
		#endif
	#endif
  403e9a:	e03b      	b.n	403f14 <PollSwitches+0xf8>
		{
			pSetPt -=PRESSURE_INCR;
			if(pSetPt<MIN_PSET_POINT)
				pSetPt = MIN_PSET_POINT;
		}
		else if(gpio_pin_is_low(PIN_SW_DURATION_UP_IDX))
  403e9c:	2022      	movs	r0, #34	; 0x22
  403e9e:	4b1e      	ldr	r3, [pc, #120]	; (403f18 <PollSwitches+0xfc>)
  403ea0:	4798      	blx	r3
  403ea2:	4603      	mov	r3, r0
  403ea4:	2b00      	cmp	r3, #0
  403ea6:	d10e      	bne.n	403ec6 <PollSwitches+0xaa>
		{
			holdDur += HOLD_INCR;
  403ea8:	4b23      	ldr	r3, [pc, #140]	; (403f38 <PollSwitches+0x11c>)
  403eaa:	681b      	ldr	r3, [r3, #0]
  403eac:	3305      	adds	r3, #5
  403eae:	4a22      	ldr	r2, [pc, #136]	; (403f38 <PollSwitches+0x11c>)
  403eb0:	6013      	str	r3, [r2, #0]
			if(holdDur>MAX_HOLD_DUR)
  403eb2:	4b21      	ldr	r3, [pc, #132]	; (403f38 <PollSwitches+0x11c>)
  403eb4:	681b      	ldr	r3, [r3, #0]
  403eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403eba:	d92b      	bls.n	403f14 <PollSwitches+0xf8>
				holdDur = MAX_HOLD_DUR;
  403ebc:	4b1e      	ldr	r3, [pc, #120]	; (403f38 <PollSwitches+0x11c>)
  403ebe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403ec2:	601a      	str	r2, [r3, #0]
				if(holdDur>MIN_DELAY_DUR)
					holdDur = MIN_DELAY_DUR;
			}
		#endif
	#endif
  403ec4:	e026      	b.n	403f14 <PollSwitches+0xf8>
		{
			holdDur += HOLD_INCR;
			if(holdDur>MAX_HOLD_DUR)
				holdDur = MAX_HOLD_DUR;
		}
		else if(gpio_pin_is_low(PIN_SW_DURATION_DN_IDX))
  403ec6:	2023      	movs	r0, #35	; 0x23
  403ec8:	4b13      	ldr	r3, [pc, #76]	; (403f18 <PollSwitches+0xfc>)
  403eca:	4798      	blx	r3
  403ecc:	4603      	mov	r3, r0
  403ece:	2b00      	cmp	r3, #0
  403ed0:	d10c      	bne.n	403eec <PollSwitches+0xd0>
		{
			holdDur -= HOLD_INCR;
  403ed2:	4b19      	ldr	r3, [pc, #100]	; (403f38 <PollSwitches+0x11c>)
  403ed4:	681b      	ldr	r3, [r3, #0]
  403ed6:	3b05      	subs	r3, #5
  403ed8:	4a17      	ldr	r2, [pc, #92]	; (403f38 <PollSwitches+0x11c>)
  403eda:	6013      	str	r3, [r2, #0]
			if(holdDur>MIN_HOLD_DUR)
  403edc:	4b16      	ldr	r3, [pc, #88]	; (403f38 <PollSwitches+0x11c>)
  403ede:	681b      	ldr	r3, [r3, #0]
  403ee0:	2b00      	cmp	r3, #0
  403ee2:	d017      	beq.n	403f14 <PollSwitches+0xf8>
				holdDur = MIN_HOLD_DUR;
  403ee4:	4b14      	ldr	r3, [pc, #80]	; (403f38 <PollSwitches+0x11c>)
  403ee6:	2200      	movs	r2, #0
  403ee8:	601a      	str	r2, [r3, #0]
				if(holdDur>MIN_DELAY_DUR)
					holdDur = MIN_DELAY_DUR;
			}
		#endif
	#endif
  403eea:	e013      	b.n	403f14 <PollSwitches+0xf8>
		{
			holdDur -= HOLD_INCR;
			if(holdDur>MIN_HOLD_DUR)
				holdDur = MIN_HOLD_DUR;
		}
		else if(gpio_pin_is_low(PIN_SW_DELAY_UP_IDX))
  403eec:	2013      	movs	r0, #19
  403eee:	4b0a      	ldr	r3, [pc, #40]	; (403f18 <PollSwitches+0xfc>)
  403ef0:	4798      	blx	r3
  403ef2:	4603      	mov	r3, r0
  403ef4:	2b00      	cmp	r3, #0
  403ef6:	d10d      	bne.n	403f14 <PollSwitches+0xf8>
		{
			delayParam+=DELAY_INCR;
  403ef8:	4b10      	ldr	r3, [pc, #64]	; (403f3c <PollSwitches+0x120>)
  403efa:	681b      	ldr	r3, [r3, #0]
  403efc:	3305      	adds	r3, #5
  403efe:	4a0f      	ldr	r2, [pc, #60]	; (403f3c <PollSwitches+0x120>)
  403f00:	6013      	str	r3, [r2, #0]
			if(delayParam>MAX_DELAY_DUR)
  403f02:	4b0e      	ldr	r3, [pc, #56]	; (403f3c <PollSwitches+0x120>)
  403f04:	681b      	ldr	r3, [r3, #0]
  403f06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  403f0a:	d903      	bls.n	403f14 <PollSwitches+0xf8>
				delayParam = MAX_DELAY_DUR;
  403f0c:	4b0b      	ldr	r3, [pc, #44]	; (403f3c <PollSwitches+0x120>)
  403f0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  403f12:	601a      	str	r2, [r3, #0]
				if(holdDur>MIN_DELAY_DUR)
					holdDur = MIN_DELAY_DUR;
			}
		#endif
	#endif
  403f14:	bf00      	nop
  403f16:	bd80      	pop	{r7, pc}
  403f18:	00401b75 	.word	0x00401b75
  403f1c:	20000014 	.word	0x20000014
  403f20:	00403f4d 	.word	0x00403f4d
  403f24:	3dcccccd 	.word	0x3dcccccd
  403f28:	004044d5 	.word	0x004044d5
  403f2c:	40c00000 	.word	0x40c00000
  403f30:	00403f49 	.word	0x00403f49
  403f34:	00404499 	.word	0x00404499
  403f38:	20000018 	.word	0x20000018
  403f3c:	2000001c 	.word	0x2000001c

00403f40 <__aeabi_frsub>:
  403f40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  403f44:	e002      	b.n	403f4c <__addsf3>
  403f46:	bf00      	nop

00403f48 <__aeabi_fsub>:
  403f48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00403f4c <__addsf3>:
  403f4c:	0042      	lsls	r2, r0, #1
  403f4e:	bf1f      	itttt	ne
  403f50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  403f54:	ea92 0f03 	teqne	r2, r3
  403f58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  403f5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  403f60:	d06a      	beq.n	404038 <__addsf3+0xec>
  403f62:	ea4f 6212 	mov.w	r2, r2, lsr #24
  403f66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  403f6a:	bfc1      	itttt	gt
  403f6c:	18d2      	addgt	r2, r2, r3
  403f6e:	4041      	eorgt	r1, r0
  403f70:	4048      	eorgt	r0, r1
  403f72:	4041      	eorgt	r1, r0
  403f74:	bfb8      	it	lt
  403f76:	425b      	neglt	r3, r3
  403f78:	2b19      	cmp	r3, #25
  403f7a:	bf88      	it	hi
  403f7c:	4770      	bxhi	lr
  403f7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  403f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403f86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  403f8a:	bf18      	it	ne
  403f8c:	4240      	negne	r0, r0
  403f8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403f92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  403f96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  403f9a:	bf18      	it	ne
  403f9c:	4249      	negne	r1, r1
  403f9e:	ea92 0f03 	teq	r2, r3
  403fa2:	d03f      	beq.n	404024 <__addsf3+0xd8>
  403fa4:	f1a2 0201 	sub.w	r2, r2, #1
  403fa8:	fa41 fc03 	asr.w	ip, r1, r3
  403fac:	eb10 000c 	adds.w	r0, r0, ip
  403fb0:	f1c3 0320 	rsb	r3, r3, #32
  403fb4:	fa01 f103 	lsl.w	r1, r1, r3
  403fb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  403fbc:	d502      	bpl.n	403fc4 <__addsf3+0x78>
  403fbe:	4249      	negs	r1, r1
  403fc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  403fc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  403fc8:	d313      	bcc.n	403ff2 <__addsf3+0xa6>
  403fca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  403fce:	d306      	bcc.n	403fde <__addsf3+0x92>
  403fd0:	0840      	lsrs	r0, r0, #1
  403fd2:	ea4f 0131 	mov.w	r1, r1, rrx
  403fd6:	f102 0201 	add.w	r2, r2, #1
  403fda:	2afe      	cmp	r2, #254	; 0xfe
  403fdc:	d251      	bcs.n	404082 <__addsf3+0x136>
  403fde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  403fe2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403fe6:	bf08      	it	eq
  403fe8:	f020 0001 	biceq.w	r0, r0, #1
  403fec:	ea40 0003 	orr.w	r0, r0, r3
  403ff0:	4770      	bx	lr
  403ff2:	0049      	lsls	r1, r1, #1
  403ff4:	eb40 0000 	adc.w	r0, r0, r0
  403ff8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  403ffc:	f1a2 0201 	sub.w	r2, r2, #1
  404000:	d1ed      	bne.n	403fde <__addsf3+0x92>
  404002:	fab0 fc80 	clz	ip, r0
  404006:	f1ac 0c08 	sub.w	ip, ip, #8
  40400a:	ebb2 020c 	subs.w	r2, r2, ip
  40400e:	fa00 f00c 	lsl.w	r0, r0, ip
  404012:	bfaa      	itet	ge
  404014:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  404018:	4252      	neglt	r2, r2
  40401a:	4318      	orrge	r0, r3
  40401c:	bfbc      	itt	lt
  40401e:	40d0      	lsrlt	r0, r2
  404020:	4318      	orrlt	r0, r3
  404022:	4770      	bx	lr
  404024:	f092 0f00 	teq	r2, #0
  404028:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40402c:	bf06      	itte	eq
  40402e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  404032:	3201      	addeq	r2, #1
  404034:	3b01      	subne	r3, #1
  404036:	e7b5      	b.n	403fa4 <__addsf3+0x58>
  404038:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40403c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  404040:	bf18      	it	ne
  404042:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404046:	d021      	beq.n	40408c <__addsf3+0x140>
  404048:	ea92 0f03 	teq	r2, r3
  40404c:	d004      	beq.n	404058 <__addsf3+0x10c>
  40404e:	f092 0f00 	teq	r2, #0
  404052:	bf08      	it	eq
  404054:	4608      	moveq	r0, r1
  404056:	4770      	bx	lr
  404058:	ea90 0f01 	teq	r0, r1
  40405c:	bf1c      	itt	ne
  40405e:	2000      	movne	r0, #0
  404060:	4770      	bxne	lr
  404062:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  404066:	d104      	bne.n	404072 <__addsf3+0x126>
  404068:	0040      	lsls	r0, r0, #1
  40406a:	bf28      	it	cs
  40406c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  404070:	4770      	bx	lr
  404072:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  404076:	bf3c      	itt	cc
  404078:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40407c:	4770      	bxcc	lr
  40407e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404082:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  404086:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40408a:	4770      	bx	lr
  40408c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  404090:	bf16      	itet	ne
  404092:	4608      	movne	r0, r1
  404094:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  404098:	4601      	movne	r1, r0
  40409a:	0242      	lsls	r2, r0, #9
  40409c:	bf06      	itte	eq
  40409e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4040a2:	ea90 0f01 	teqeq	r0, r1
  4040a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4040aa:	4770      	bx	lr

004040ac <__aeabi_ui2f>:
  4040ac:	f04f 0300 	mov.w	r3, #0
  4040b0:	e004      	b.n	4040bc <__aeabi_i2f+0x8>
  4040b2:	bf00      	nop

004040b4 <__aeabi_i2f>:
  4040b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4040b8:	bf48      	it	mi
  4040ba:	4240      	negmi	r0, r0
  4040bc:	ea5f 0c00 	movs.w	ip, r0
  4040c0:	bf08      	it	eq
  4040c2:	4770      	bxeq	lr
  4040c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4040c8:	4601      	mov	r1, r0
  4040ca:	f04f 0000 	mov.w	r0, #0
  4040ce:	e01c      	b.n	40410a <__aeabi_l2f+0x2a>

004040d0 <__aeabi_ul2f>:
  4040d0:	ea50 0201 	orrs.w	r2, r0, r1
  4040d4:	bf08      	it	eq
  4040d6:	4770      	bxeq	lr
  4040d8:	f04f 0300 	mov.w	r3, #0
  4040dc:	e00a      	b.n	4040f4 <__aeabi_l2f+0x14>
  4040de:	bf00      	nop

004040e0 <__aeabi_l2f>:
  4040e0:	ea50 0201 	orrs.w	r2, r0, r1
  4040e4:	bf08      	it	eq
  4040e6:	4770      	bxeq	lr
  4040e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4040ec:	d502      	bpl.n	4040f4 <__aeabi_l2f+0x14>
  4040ee:	4240      	negs	r0, r0
  4040f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4040f4:	ea5f 0c01 	movs.w	ip, r1
  4040f8:	bf02      	ittt	eq
  4040fa:	4684      	moveq	ip, r0
  4040fc:	4601      	moveq	r1, r0
  4040fe:	2000      	moveq	r0, #0
  404100:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  404104:	bf08      	it	eq
  404106:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40410a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40410e:	fabc f28c 	clz	r2, ip
  404112:	3a08      	subs	r2, #8
  404114:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  404118:	db10      	blt.n	40413c <__aeabi_l2f+0x5c>
  40411a:	fa01 fc02 	lsl.w	ip, r1, r2
  40411e:	4463      	add	r3, ip
  404120:	fa00 fc02 	lsl.w	ip, r0, r2
  404124:	f1c2 0220 	rsb	r2, r2, #32
  404128:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40412c:	fa20 f202 	lsr.w	r2, r0, r2
  404130:	eb43 0002 	adc.w	r0, r3, r2
  404134:	bf08      	it	eq
  404136:	f020 0001 	biceq.w	r0, r0, #1
  40413a:	4770      	bx	lr
  40413c:	f102 0220 	add.w	r2, r2, #32
  404140:	fa01 fc02 	lsl.w	ip, r1, r2
  404144:	f1c2 0220 	rsb	r2, r2, #32
  404148:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40414c:	fa21 f202 	lsr.w	r2, r1, r2
  404150:	eb43 0002 	adc.w	r0, r3, r2
  404154:	bf08      	it	eq
  404156:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40415a:	4770      	bx	lr

0040415c <__aeabi_fmul>:
  40415c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  404164:	bf1e      	ittt	ne
  404166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40416a:	ea92 0f0c 	teqne	r2, ip
  40416e:	ea93 0f0c 	teqne	r3, ip
  404172:	d06f      	beq.n	404254 <__aeabi_fmul+0xf8>
  404174:	441a      	add	r2, r3
  404176:	ea80 0c01 	eor.w	ip, r0, r1
  40417a:	0240      	lsls	r0, r0, #9
  40417c:	bf18      	it	ne
  40417e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  404182:	d01e      	beq.n	4041c2 <__aeabi_fmul+0x66>
  404184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  404188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40418c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  404190:	fba0 3101 	umull	r3, r1, r0, r1
  404194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  404198:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40419c:	bf3e      	ittt	cc
  40419e:	0049      	lslcc	r1, r1, #1
  4041a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4041a4:	005b      	lslcc	r3, r3, #1
  4041a6:	ea40 0001 	orr.w	r0, r0, r1
  4041aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4041ae:	2afd      	cmp	r2, #253	; 0xfd
  4041b0:	d81d      	bhi.n	4041ee <__aeabi_fmul+0x92>
  4041b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4041b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4041ba:	bf08      	it	eq
  4041bc:	f020 0001 	biceq.w	r0, r0, #1
  4041c0:	4770      	bx	lr
  4041c2:	f090 0f00 	teq	r0, #0
  4041c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4041ca:	bf08      	it	eq
  4041cc:	0249      	lsleq	r1, r1, #9
  4041ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4041d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4041d6:	3a7f      	subs	r2, #127	; 0x7f
  4041d8:	bfc2      	ittt	gt
  4041da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4041de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4041e2:	4770      	bxgt	lr
  4041e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4041e8:	f04f 0300 	mov.w	r3, #0
  4041ec:	3a01      	subs	r2, #1
  4041ee:	dc5d      	bgt.n	4042ac <__aeabi_fmul+0x150>
  4041f0:	f112 0f19 	cmn.w	r2, #25
  4041f4:	bfdc      	itt	le
  4041f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4041fa:	4770      	bxle	lr
  4041fc:	f1c2 0200 	rsb	r2, r2, #0
  404200:	0041      	lsls	r1, r0, #1
  404202:	fa21 f102 	lsr.w	r1, r1, r2
  404206:	f1c2 0220 	rsb	r2, r2, #32
  40420a:	fa00 fc02 	lsl.w	ip, r0, r2
  40420e:	ea5f 0031 	movs.w	r0, r1, rrx
  404212:	f140 0000 	adc.w	r0, r0, #0
  404216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40421a:	bf08      	it	eq
  40421c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  404220:	4770      	bx	lr
  404222:	f092 0f00 	teq	r2, #0
  404226:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40422a:	bf02      	ittt	eq
  40422c:	0040      	lsleq	r0, r0, #1
  40422e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  404232:	3a01      	subeq	r2, #1
  404234:	d0f9      	beq.n	40422a <__aeabi_fmul+0xce>
  404236:	ea40 000c 	orr.w	r0, r0, ip
  40423a:	f093 0f00 	teq	r3, #0
  40423e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404242:	bf02      	ittt	eq
  404244:	0049      	lsleq	r1, r1, #1
  404246:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40424a:	3b01      	subeq	r3, #1
  40424c:	d0f9      	beq.n	404242 <__aeabi_fmul+0xe6>
  40424e:	ea41 010c 	orr.w	r1, r1, ip
  404252:	e78f      	b.n	404174 <__aeabi_fmul+0x18>
  404254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  404258:	ea92 0f0c 	teq	r2, ip
  40425c:	bf18      	it	ne
  40425e:	ea93 0f0c 	teqne	r3, ip
  404262:	d00a      	beq.n	40427a <__aeabi_fmul+0x11e>
  404264:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  404268:	bf18      	it	ne
  40426a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40426e:	d1d8      	bne.n	404222 <__aeabi_fmul+0xc6>
  404270:	ea80 0001 	eor.w	r0, r0, r1
  404274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  404278:	4770      	bx	lr
  40427a:	f090 0f00 	teq	r0, #0
  40427e:	bf17      	itett	ne
  404280:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  404284:	4608      	moveq	r0, r1
  404286:	f091 0f00 	teqne	r1, #0
  40428a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40428e:	d014      	beq.n	4042ba <__aeabi_fmul+0x15e>
  404290:	ea92 0f0c 	teq	r2, ip
  404294:	d101      	bne.n	40429a <__aeabi_fmul+0x13e>
  404296:	0242      	lsls	r2, r0, #9
  404298:	d10f      	bne.n	4042ba <__aeabi_fmul+0x15e>
  40429a:	ea93 0f0c 	teq	r3, ip
  40429e:	d103      	bne.n	4042a8 <__aeabi_fmul+0x14c>
  4042a0:	024b      	lsls	r3, r1, #9
  4042a2:	bf18      	it	ne
  4042a4:	4608      	movne	r0, r1
  4042a6:	d108      	bne.n	4042ba <__aeabi_fmul+0x15e>
  4042a8:	ea80 0001 	eor.w	r0, r0, r1
  4042ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4042b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4042b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4042b8:	4770      	bx	lr
  4042ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4042be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  4042c2:	4770      	bx	lr

004042c4 <__aeabi_fdiv>:
  4042c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4042c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4042cc:	bf1e      	ittt	ne
  4042ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4042d2:	ea92 0f0c 	teqne	r2, ip
  4042d6:	ea93 0f0c 	teqne	r3, ip
  4042da:	d069      	beq.n	4043b0 <__aeabi_fdiv+0xec>
  4042dc:	eba2 0203 	sub.w	r2, r2, r3
  4042e0:	ea80 0c01 	eor.w	ip, r0, r1
  4042e4:	0249      	lsls	r1, r1, #9
  4042e6:	ea4f 2040 	mov.w	r0, r0, lsl #9
  4042ea:	d037      	beq.n	40435c <__aeabi_fdiv+0x98>
  4042ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4042f0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4042f4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  4042f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4042fc:	428b      	cmp	r3, r1
  4042fe:	bf38      	it	cc
  404300:	005b      	lslcc	r3, r3, #1
  404302:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  404306:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40430a:	428b      	cmp	r3, r1
  40430c:	bf24      	itt	cs
  40430e:	1a5b      	subcs	r3, r3, r1
  404310:	ea40 000c 	orrcs.w	r0, r0, ip
  404314:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  404318:	bf24      	itt	cs
  40431a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40431e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404322:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  404326:	bf24      	itt	cs
  404328:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40432c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404330:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  404334:	bf24      	itt	cs
  404336:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40433a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40433e:	011b      	lsls	r3, r3, #4
  404340:	bf18      	it	ne
  404342:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  404346:	d1e0      	bne.n	40430a <__aeabi_fdiv+0x46>
  404348:	2afd      	cmp	r2, #253	; 0xfd
  40434a:	f63f af50 	bhi.w	4041ee <__aeabi_fmul+0x92>
  40434e:	428b      	cmp	r3, r1
  404350:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404354:	bf08      	it	eq
  404356:	f020 0001 	biceq.w	r0, r0, #1
  40435a:	4770      	bx	lr
  40435c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  404360:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  404364:	327f      	adds	r2, #127	; 0x7f
  404366:	bfc2      	ittt	gt
  404368:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40436c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  404370:	4770      	bxgt	lr
  404372:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404376:	f04f 0300 	mov.w	r3, #0
  40437a:	3a01      	subs	r2, #1
  40437c:	e737      	b.n	4041ee <__aeabi_fmul+0x92>
  40437e:	f092 0f00 	teq	r2, #0
  404382:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  404386:	bf02      	ittt	eq
  404388:	0040      	lsleq	r0, r0, #1
  40438a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40438e:	3a01      	subeq	r2, #1
  404390:	d0f9      	beq.n	404386 <__aeabi_fdiv+0xc2>
  404392:	ea40 000c 	orr.w	r0, r0, ip
  404396:	f093 0f00 	teq	r3, #0
  40439a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40439e:	bf02      	ittt	eq
  4043a0:	0049      	lsleq	r1, r1, #1
  4043a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4043a6:	3b01      	subeq	r3, #1
  4043a8:	d0f9      	beq.n	40439e <__aeabi_fdiv+0xda>
  4043aa:	ea41 010c 	orr.w	r1, r1, ip
  4043ae:	e795      	b.n	4042dc <__aeabi_fdiv+0x18>
  4043b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4043b4:	ea92 0f0c 	teq	r2, ip
  4043b8:	d108      	bne.n	4043cc <__aeabi_fdiv+0x108>
  4043ba:	0242      	lsls	r2, r0, #9
  4043bc:	f47f af7d 	bne.w	4042ba <__aeabi_fmul+0x15e>
  4043c0:	ea93 0f0c 	teq	r3, ip
  4043c4:	f47f af70 	bne.w	4042a8 <__aeabi_fmul+0x14c>
  4043c8:	4608      	mov	r0, r1
  4043ca:	e776      	b.n	4042ba <__aeabi_fmul+0x15e>
  4043cc:	ea93 0f0c 	teq	r3, ip
  4043d0:	d104      	bne.n	4043dc <__aeabi_fdiv+0x118>
  4043d2:	024b      	lsls	r3, r1, #9
  4043d4:	f43f af4c 	beq.w	404270 <__aeabi_fmul+0x114>
  4043d8:	4608      	mov	r0, r1
  4043da:	e76e      	b.n	4042ba <__aeabi_fmul+0x15e>
  4043dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4043e0:	bf18      	it	ne
  4043e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4043e6:	d1ca      	bne.n	40437e <__aeabi_fdiv+0xba>
  4043e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4043ec:	f47f af5c 	bne.w	4042a8 <__aeabi_fmul+0x14c>
  4043f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4043f4:	f47f af3c 	bne.w	404270 <__aeabi_fmul+0x114>
  4043f8:	e75f      	b.n	4042ba <__aeabi_fmul+0x15e>
  4043fa:	bf00      	nop

004043fc <__gesf2>:
  4043fc:	f04f 3cff 	mov.w	ip, #4294967295
  404400:	e006      	b.n	404410 <__cmpsf2+0x4>
  404402:	bf00      	nop

00404404 <__lesf2>:
  404404:	f04f 0c01 	mov.w	ip, #1
  404408:	e002      	b.n	404410 <__cmpsf2+0x4>
  40440a:	bf00      	nop

0040440c <__cmpsf2>:
  40440c:	f04f 0c01 	mov.w	ip, #1
  404410:	f84d cd04 	str.w	ip, [sp, #-4]!
  404414:	ea4f 0240 	mov.w	r2, r0, lsl #1
  404418:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40441c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  404420:	bf18      	it	ne
  404422:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404426:	d011      	beq.n	40444c <__cmpsf2+0x40>
  404428:	b001      	add	sp, #4
  40442a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  40442e:	bf18      	it	ne
  404430:	ea90 0f01 	teqne	r0, r1
  404434:	bf58      	it	pl
  404436:	ebb2 0003 	subspl.w	r0, r2, r3
  40443a:	bf88      	it	hi
  40443c:	17c8      	asrhi	r0, r1, #31
  40443e:	bf38      	it	cc
  404440:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  404444:	bf18      	it	ne
  404446:	f040 0001 	orrne.w	r0, r0, #1
  40444a:	4770      	bx	lr
  40444c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  404450:	d102      	bne.n	404458 <__cmpsf2+0x4c>
  404452:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  404456:	d105      	bne.n	404464 <__cmpsf2+0x58>
  404458:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  40445c:	d1e4      	bne.n	404428 <__cmpsf2+0x1c>
  40445e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  404462:	d0e1      	beq.n	404428 <__cmpsf2+0x1c>
  404464:	f85d 0b04 	ldr.w	r0, [sp], #4
  404468:	4770      	bx	lr
  40446a:	bf00      	nop

0040446c <__aeabi_cfrcmple>:
  40446c:	4684      	mov	ip, r0
  40446e:	4608      	mov	r0, r1
  404470:	4661      	mov	r1, ip
  404472:	e7ff      	b.n	404474 <__aeabi_cfcmpeq>

00404474 <__aeabi_cfcmpeq>:
  404474:	b50f      	push	{r0, r1, r2, r3, lr}
  404476:	f7ff ffc9 	bl	40440c <__cmpsf2>
  40447a:	2800      	cmp	r0, #0
  40447c:	bf48      	it	mi
  40447e:	f110 0f00 	cmnmi.w	r0, #0
  404482:	bd0f      	pop	{r0, r1, r2, r3, pc}

00404484 <__aeabi_fcmpeq>:
  404484:	f84d ed08 	str.w	lr, [sp, #-8]!
  404488:	f7ff fff4 	bl	404474 <__aeabi_cfcmpeq>
  40448c:	bf0c      	ite	eq
  40448e:	2001      	moveq	r0, #1
  404490:	2000      	movne	r0, #0
  404492:	f85d fb08 	ldr.w	pc, [sp], #8
  404496:	bf00      	nop

00404498 <__aeabi_fcmplt>:
  404498:	f84d ed08 	str.w	lr, [sp, #-8]!
  40449c:	f7ff ffea 	bl	404474 <__aeabi_cfcmpeq>
  4044a0:	bf34      	ite	cc
  4044a2:	2001      	movcc	r0, #1
  4044a4:	2000      	movcs	r0, #0
  4044a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4044aa:	bf00      	nop

004044ac <__aeabi_fcmple>:
  4044ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4044b0:	f7ff ffe0 	bl	404474 <__aeabi_cfcmpeq>
  4044b4:	bf94      	ite	ls
  4044b6:	2001      	movls	r0, #1
  4044b8:	2000      	movhi	r0, #0
  4044ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4044be:	bf00      	nop

004044c0 <__aeabi_fcmpge>:
  4044c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4044c4:	f7ff ffd2 	bl	40446c <__aeabi_cfrcmple>
  4044c8:	bf94      	ite	ls
  4044ca:	2001      	movls	r0, #1
  4044cc:	2000      	movhi	r0, #0
  4044ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4044d2:	bf00      	nop

004044d4 <__aeabi_fcmpgt>:
  4044d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4044d8:	f7ff ffc8 	bl	40446c <__aeabi_cfrcmple>
  4044dc:	bf34      	ite	cc
  4044de:	2001      	movcc	r0, #1
  4044e0:	2000      	movcs	r0, #0
  4044e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4044e6:	bf00      	nop

004044e8 <__aeabi_uldivmod>:
  4044e8:	b953      	cbnz	r3, 404500 <__aeabi_uldivmod+0x18>
  4044ea:	b94a      	cbnz	r2, 404500 <__aeabi_uldivmod+0x18>
  4044ec:	2900      	cmp	r1, #0
  4044ee:	bf08      	it	eq
  4044f0:	2800      	cmpeq	r0, #0
  4044f2:	bf1c      	itt	ne
  4044f4:	f04f 31ff 	movne.w	r1, #4294967295
  4044f8:	f04f 30ff 	movne.w	r0, #4294967295
  4044fc:	f000 b97e 	b.w	4047fc <__aeabi_idiv0>
  404500:	f1ad 0c08 	sub.w	ip, sp, #8
  404504:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404508:	f000 f806 	bl	404518 <__udivmoddi4>
  40450c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404514:	b004      	add	sp, #16
  404516:	4770      	bx	lr

00404518 <__udivmoddi4>:
  404518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40451c:	468c      	mov	ip, r1
  40451e:	460e      	mov	r6, r1
  404520:	4604      	mov	r4, r0
  404522:	9d08      	ldr	r5, [sp, #32]
  404524:	2b00      	cmp	r3, #0
  404526:	d150      	bne.n	4045ca <__udivmoddi4+0xb2>
  404528:	428a      	cmp	r2, r1
  40452a:	4617      	mov	r7, r2
  40452c:	d96c      	bls.n	404608 <__udivmoddi4+0xf0>
  40452e:	fab2 fe82 	clz	lr, r2
  404532:	f1be 0f00 	cmp.w	lr, #0
  404536:	d00b      	beq.n	404550 <__udivmoddi4+0x38>
  404538:	f1ce 0420 	rsb	r4, lr, #32
  40453c:	fa20 f404 	lsr.w	r4, r0, r4
  404540:	fa01 f60e 	lsl.w	r6, r1, lr
  404544:	ea44 0c06 	orr.w	ip, r4, r6
  404548:	fa02 f70e 	lsl.w	r7, r2, lr
  40454c:	fa00 f40e 	lsl.w	r4, r0, lr
  404550:	ea4f 4917 	mov.w	r9, r7, lsr #16
  404554:	0c22      	lsrs	r2, r4, #16
  404556:	fbbc f0f9 	udiv	r0, ip, r9
  40455a:	fa1f f887 	uxth.w	r8, r7
  40455e:	fb09 c610 	mls	r6, r9, r0, ip
  404562:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  404566:	fb00 f308 	mul.w	r3, r0, r8
  40456a:	42b3      	cmp	r3, r6
  40456c:	d909      	bls.n	404582 <__udivmoddi4+0x6a>
  40456e:	19f6      	adds	r6, r6, r7
  404570:	f100 32ff 	add.w	r2, r0, #4294967295
  404574:	f080 8122 	bcs.w	4047bc <__udivmoddi4+0x2a4>
  404578:	42b3      	cmp	r3, r6
  40457a:	f240 811f 	bls.w	4047bc <__udivmoddi4+0x2a4>
  40457e:	3802      	subs	r0, #2
  404580:	443e      	add	r6, r7
  404582:	1af6      	subs	r6, r6, r3
  404584:	b2a2      	uxth	r2, r4
  404586:	fbb6 f3f9 	udiv	r3, r6, r9
  40458a:	fb09 6613 	mls	r6, r9, r3, r6
  40458e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  404592:	fb03 f808 	mul.w	r8, r3, r8
  404596:	45a0      	cmp	r8, r4
  404598:	d909      	bls.n	4045ae <__udivmoddi4+0x96>
  40459a:	19e4      	adds	r4, r4, r7
  40459c:	f103 32ff 	add.w	r2, r3, #4294967295
  4045a0:	f080 810a 	bcs.w	4047b8 <__udivmoddi4+0x2a0>
  4045a4:	45a0      	cmp	r8, r4
  4045a6:	f240 8107 	bls.w	4047b8 <__udivmoddi4+0x2a0>
  4045aa:	3b02      	subs	r3, #2
  4045ac:	443c      	add	r4, r7
  4045ae:	ebc8 0404 	rsb	r4, r8, r4
  4045b2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4045b6:	2100      	movs	r1, #0
  4045b8:	2d00      	cmp	r5, #0
  4045ba:	d062      	beq.n	404682 <__udivmoddi4+0x16a>
  4045bc:	fa24 f40e 	lsr.w	r4, r4, lr
  4045c0:	2300      	movs	r3, #0
  4045c2:	602c      	str	r4, [r5, #0]
  4045c4:	606b      	str	r3, [r5, #4]
  4045c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045ca:	428b      	cmp	r3, r1
  4045cc:	d907      	bls.n	4045de <__udivmoddi4+0xc6>
  4045ce:	2d00      	cmp	r5, #0
  4045d0:	d055      	beq.n	40467e <__udivmoddi4+0x166>
  4045d2:	2100      	movs	r1, #0
  4045d4:	e885 0041 	stmia.w	r5, {r0, r6}
  4045d8:	4608      	mov	r0, r1
  4045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045de:	fab3 f183 	clz	r1, r3
  4045e2:	2900      	cmp	r1, #0
  4045e4:	f040 8090 	bne.w	404708 <__udivmoddi4+0x1f0>
  4045e8:	42b3      	cmp	r3, r6
  4045ea:	d302      	bcc.n	4045f2 <__udivmoddi4+0xda>
  4045ec:	4282      	cmp	r2, r0
  4045ee:	f200 80f8 	bhi.w	4047e2 <__udivmoddi4+0x2ca>
  4045f2:	1a84      	subs	r4, r0, r2
  4045f4:	eb66 0603 	sbc.w	r6, r6, r3
  4045f8:	2001      	movs	r0, #1
  4045fa:	46b4      	mov	ip, r6
  4045fc:	2d00      	cmp	r5, #0
  4045fe:	d040      	beq.n	404682 <__udivmoddi4+0x16a>
  404600:	e885 1010 	stmia.w	r5, {r4, ip}
  404604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404608:	b912      	cbnz	r2, 404610 <__udivmoddi4+0xf8>
  40460a:	2701      	movs	r7, #1
  40460c:	fbb7 f7f2 	udiv	r7, r7, r2
  404610:	fab7 fe87 	clz	lr, r7
  404614:	f1be 0f00 	cmp.w	lr, #0
  404618:	d135      	bne.n	404686 <__udivmoddi4+0x16e>
  40461a:	1bf3      	subs	r3, r6, r7
  40461c:	ea4f 4817 	mov.w	r8, r7, lsr #16
  404620:	fa1f fc87 	uxth.w	ip, r7
  404624:	2101      	movs	r1, #1
  404626:	fbb3 f0f8 	udiv	r0, r3, r8
  40462a:	0c22      	lsrs	r2, r4, #16
  40462c:	fb08 3610 	mls	r6, r8, r0, r3
  404630:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  404634:	fb0c f300 	mul.w	r3, ip, r0
  404638:	42b3      	cmp	r3, r6
  40463a:	d907      	bls.n	40464c <__udivmoddi4+0x134>
  40463c:	19f6      	adds	r6, r6, r7
  40463e:	f100 32ff 	add.w	r2, r0, #4294967295
  404642:	d202      	bcs.n	40464a <__udivmoddi4+0x132>
  404644:	42b3      	cmp	r3, r6
  404646:	f200 80ce 	bhi.w	4047e6 <__udivmoddi4+0x2ce>
  40464a:	4610      	mov	r0, r2
  40464c:	1af6      	subs	r6, r6, r3
  40464e:	b2a2      	uxth	r2, r4
  404650:	fbb6 f3f8 	udiv	r3, r6, r8
  404654:	fb08 6613 	mls	r6, r8, r3, r6
  404658:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40465c:	fb0c fc03 	mul.w	ip, ip, r3
  404660:	45a4      	cmp	ip, r4
  404662:	d907      	bls.n	404674 <__udivmoddi4+0x15c>
  404664:	19e4      	adds	r4, r4, r7
  404666:	f103 32ff 	add.w	r2, r3, #4294967295
  40466a:	d202      	bcs.n	404672 <__udivmoddi4+0x15a>
  40466c:	45a4      	cmp	ip, r4
  40466e:	f200 80b5 	bhi.w	4047dc <__udivmoddi4+0x2c4>
  404672:	4613      	mov	r3, r2
  404674:	ebcc 0404 	rsb	r4, ip, r4
  404678:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40467c:	e79c      	b.n	4045b8 <__udivmoddi4+0xa0>
  40467e:	4629      	mov	r1, r5
  404680:	4628      	mov	r0, r5
  404682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404686:	f1ce 0120 	rsb	r1, lr, #32
  40468a:	fa06 f30e 	lsl.w	r3, r6, lr
  40468e:	fa07 f70e 	lsl.w	r7, r7, lr
  404692:	fa20 f901 	lsr.w	r9, r0, r1
  404696:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40469a:	40ce      	lsrs	r6, r1
  40469c:	ea49 0903 	orr.w	r9, r9, r3
  4046a0:	fbb6 faf8 	udiv	sl, r6, r8
  4046a4:	ea4f 4419 	mov.w	r4, r9, lsr #16
  4046a8:	fb08 661a 	mls	r6, r8, sl, r6
  4046ac:	fa1f fc87 	uxth.w	ip, r7
  4046b0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  4046b4:	fb0a f20c 	mul.w	r2, sl, ip
  4046b8:	429a      	cmp	r2, r3
  4046ba:	fa00 f40e 	lsl.w	r4, r0, lr
  4046be:	d90a      	bls.n	4046d6 <__udivmoddi4+0x1be>
  4046c0:	19db      	adds	r3, r3, r7
  4046c2:	f10a 31ff 	add.w	r1, sl, #4294967295
  4046c6:	f080 8087 	bcs.w	4047d8 <__udivmoddi4+0x2c0>
  4046ca:	429a      	cmp	r2, r3
  4046cc:	f240 8084 	bls.w	4047d8 <__udivmoddi4+0x2c0>
  4046d0:	f1aa 0a02 	sub.w	sl, sl, #2
  4046d4:	443b      	add	r3, r7
  4046d6:	1a9b      	subs	r3, r3, r2
  4046d8:	fa1f f989 	uxth.w	r9, r9
  4046dc:	fbb3 f1f8 	udiv	r1, r3, r8
  4046e0:	fb08 3311 	mls	r3, r8, r1, r3
  4046e4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  4046e8:	fb01 f60c 	mul.w	r6, r1, ip
  4046ec:	429e      	cmp	r6, r3
  4046ee:	d907      	bls.n	404700 <__udivmoddi4+0x1e8>
  4046f0:	19db      	adds	r3, r3, r7
  4046f2:	f101 32ff 	add.w	r2, r1, #4294967295
  4046f6:	d26b      	bcs.n	4047d0 <__udivmoddi4+0x2b8>
  4046f8:	429e      	cmp	r6, r3
  4046fa:	d969      	bls.n	4047d0 <__udivmoddi4+0x2b8>
  4046fc:	3902      	subs	r1, #2
  4046fe:	443b      	add	r3, r7
  404700:	1b9b      	subs	r3, r3, r6
  404702:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  404706:	e78e      	b.n	404626 <__udivmoddi4+0x10e>
  404708:	f1c1 0e20 	rsb	lr, r1, #32
  40470c:	fa22 f40e 	lsr.w	r4, r2, lr
  404710:	408b      	lsls	r3, r1
  404712:	4323      	orrs	r3, r4
  404714:	fa20 f70e 	lsr.w	r7, r0, lr
  404718:	fa06 f401 	lsl.w	r4, r6, r1
  40471c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404720:	fa26 f60e 	lsr.w	r6, r6, lr
  404724:	433c      	orrs	r4, r7
  404726:	fbb6 f9fc 	udiv	r9, r6, ip
  40472a:	0c27      	lsrs	r7, r4, #16
  40472c:	fb0c 6619 	mls	r6, ip, r9, r6
  404730:	fa1f f883 	uxth.w	r8, r3
  404734:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  404738:	fb09 f708 	mul.w	r7, r9, r8
  40473c:	42b7      	cmp	r7, r6
  40473e:	fa02 f201 	lsl.w	r2, r2, r1
  404742:	fa00 fa01 	lsl.w	sl, r0, r1
  404746:	d908      	bls.n	40475a <__udivmoddi4+0x242>
  404748:	18f6      	adds	r6, r6, r3
  40474a:	f109 30ff 	add.w	r0, r9, #4294967295
  40474e:	d241      	bcs.n	4047d4 <__udivmoddi4+0x2bc>
  404750:	42b7      	cmp	r7, r6
  404752:	d93f      	bls.n	4047d4 <__udivmoddi4+0x2bc>
  404754:	f1a9 0902 	sub.w	r9, r9, #2
  404758:	441e      	add	r6, r3
  40475a:	1bf6      	subs	r6, r6, r7
  40475c:	b2a0      	uxth	r0, r4
  40475e:	fbb6 f4fc 	udiv	r4, r6, ip
  404762:	fb0c 6614 	mls	r6, ip, r4, r6
  404766:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40476a:	fb04 f808 	mul.w	r8, r4, r8
  40476e:	45b8      	cmp	r8, r7
  404770:	d907      	bls.n	404782 <__udivmoddi4+0x26a>
  404772:	18ff      	adds	r7, r7, r3
  404774:	f104 30ff 	add.w	r0, r4, #4294967295
  404778:	d228      	bcs.n	4047cc <__udivmoddi4+0x2b4>
  40477a:	45b8      	cmp	r8, r7
  40477c:	d926      	bls.n	4047cc <__udivmoddi4+0x2b4>
  40477e:	3c02      	subs	r4, #2
  404780:	441f      	add	r7, r3
  404782:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  404786:	ebc8 0707 	rsb	r7, r8, r7
  40478a:	fba0 8902 	umull	r8, r9, r0, r2
  40478e:	454f      	cmp	r7, r9
  404790:	4644      	mov	r4, r8
  404792:	464e      	mov	r6, r9
  404794:	d314      	bcc.n	4047c0 <__udivmoddi4+0x2a8>
  404796:	d029      	beq.n	4047ec <__udivmoddi4+0x2d4>
  404798:	b365      	cbz	r5, 4047f4 <__udivmoddi4+0x2dc>
  40479a:	ebba 0304 	subs.w	r3, sl, r4
  40479e:	eb67 0706 	sbc.w	r7, r7, r6
  4047a2:	fa07 fe0e 	lsl.w	lr, r7, lr
  4047a6:	40cb      	lsrs	r3, r1
  4047a8:	40cf      	lsrs	r7, r1
  4047aa:	ea4e 0303 	orr.w	r3, lr, r3
  4047ae:	e885 0088 	stmia.w	r5, {r3, r7}
  4047b2:	2100      	movs	r1, #0
  4047b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047b8:	4613      	mov	r3, r2
  4047ba:	e6f8      	b.n	4045ae <__udivmoddi4+0x96>
  4047bc:	4610      	mov	r0, r2
  4047be:	e6e0      	b.n	404582 <__udivmoddi4+0x6a>
  4047c0:	ebb8 0402 	subs.w	r4, r8, r2
  4047c4:	eb69 0603 	sbc.w	r6, r9, r3
  4047c8:	3801      	subs	r0, #1
  4047ca:	e7e5      	b.n	404798 <__udivmoddi4+0x280>
  4047cc:	4604      	mov	r4, r0
  4047ce:	e7d8      	b.n	404782 <__udivmoddi4+0x26a>
  4047d0:	4611      	mov	r1, r2
  4047d2:	e795      	b.n	404700 <__udivmoddi4+0x1e8>
  4047d4:	4681      	mov	r9, r0
  4047d6:	e7c0      	b.n	40475a <__udivmoddi4+0x242>
  4047d8:	468a      	mov	sl, r1
  4047da:	e77c      	b.n	4046d6 <__udivmoddi4+0x1be>
  4047dc:	3b02      	subs	r3, #2
  4047de:	443c      	add	r4, r7
  4047e0:	e748      	b.n	404674 <__udivmoddi4+0x15c>
  4047e2:	4608      	mov	r0, r1
  4047e4:	e70a      	b.n	4045fc <__udivmoddi4+0xe4>
  4047e6:	3802      	subs	r0, #2
  4047e8:	443e      	add	r6, r7
  4047ea:	e72f      	b.n	40464c <__udivmoddi4+0x134>
  4047ec:	45c2      	cmp	sl, r8
  4047ee:	d3e7      	bcc.n	4047c0 <__udivmoddi4+0x2a8>
  4047f0:	463e      	mov	r6, r7
  4047f2:	e7d1      	b.n	404798 <__udivmoddi4+0x280>
  4047f4:	4629      	mov	r1, r5
  4047f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047fa:	bf00      	nop

004047fc <__aeabi_idiv0>:
  4047fc:	4770      	bx	lr
  4047fe:	bf00      	nop

00404800 <__libc_init_array>:
  404800:	b570      	push	{r4, r5, r6, lr}
  404802:	4e0f      	ldr	r6, [pc, #60]	; (404840 <__libc_init_array+0x40>)
  404804:	4d0f      	ldr	r5, [pc, #60]	; (404844 <__libc_init_array+0x44>)
  404806:	1b76      	subs	r6, r6, r5
  404808:	10b6      	asrs	r6, r6, #2
  40480a:	bf18      	it	ne
  40480c:	2400      	movne	r4, #0
  40480e:	d005      	beq.n	40481c <__libc_init_array+0x1c>
  404810:	3401      	adds	r4, #1
  404812:	f855 3b04 	ldr.w	r3, [r5], #4
  404816:	4798      	blx	r3
  404818:	42a6      	cmp	r6, r4
  40481a:	d1f9      	bne.n	404810 <__libc_init_array+0x10>
  40481c:	4e0a      	ldr	r6, [pc, #40]	; (404848 <__libc_init_array+0x48>)
  40481e:	4d0b      	ldr	r5, [pc, #44]	; (40484c <__libc_init_array+0x4c>)
  404820:	1b76      	subs	r6, r6, r5
  404822:	f001 f83b 	bl	40589c <_init>
  404826:	10b6      	asrs	r6, r6, #2
  404828:	bf18      	it	ne
  40482a:	2400      	movne	r4, #0
  40482c:	d006      	beq.n	40483c <__libc_init_array+0x3c>
  40482e:	3401      	adds	r4, #1
  404830:	f855 3b04 	ldr.w	r3, [r5], #4
  404834:	4798      	blx	r3
  404836:	42a6      	cmp	r6, r4
  404838:	d1f9      	bne.n	40482e <__libc_init_array+0x2e>
  40483a:	bd70      	pop	{r4, r5, r6, pc}
  40483c:	bd70      	pop	{r4, r5, r6, pc}
  40483e:	bf00      	nop
  404840:	004058a8 	.word	0x004058a8
  404844:	004058a8 	.word	0x004058a8
  404848:	004058b0 	.word	0x004058b0
  40484c:	004058a8 	.word	0x004058a8

00404850 <memset>:
  404850:	b470      	push	{r4, r5, r6}
  404852:	0784      	lsls	r4, r0, #30
  404854:	d046      	beq.n	4048e4 <memset+0x94>
  404856:	1e54      	subs	r4, r2, #1
  404858:	2a00      	cmp	r2, #0
  40485a:	d041      	beq.n	4048e0 <memset+0x90>
  40485c:	b2cd      	uxtb	r5, r1
  40485e:	4603      	mov	r3, r0
  404860:	e002      	b.n	404868 <memset+0x18>
  404862:	1e62      	subs	r2, r4, #1
  404864:	b3e4      	cbz	r4, 4048e0 <memset+0x90>
  404866:	4614      	mov	r4, r2
  404868:	f803 5b01 	strb.w	r5, [r3], #1
  40486c:	079a      	lsls	r2, r3, #30
  40486e:	d1f8      	bne.n	404862 <memset+0x12>
  404870:	2c03      	cmp	r4, #3
  404872:	d92e      	bls.n	4048d2 <memset+0x82>
  404874:	b2cd      	uxtb	r5, r1
  404876:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40487a:	2c0f      	cmp	r4, #15
  40487c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404880:	d919      	bls.n	4048b6 <memset+0x66>
  404882:	f103 0210 	add.w	r2, r3, #16
  404886:	4626      	mov	r6, r4
  404888:	3e10      	subs	r6, #16
  40488a:	2e0f      	cmp	r6, #15
  40488c:	f842 5c10 	str.w	r5, [r2, #-16]
  404890:	f842 5c0c 	str.w	r5, [r2, #-12]
  404894:	f842 5c08 	str.w	r5, [r2, #-8]
  404898:	f842 5c04 	str.w	r5, [r2, #-4]
  40489c:	f102 0210 	add.w	r2, r2, #16
  4048a0:	d8f2      	bhi.n	404888 <memset+0x38>
  4048a2:	f1a4 0210 	sub.w	r2, r4, #16
  4048a6:	f022 020f 	bic.w	r2, r2, #15
  4048aa:	f004 040f 	and.w	r4, r4, #15
  4048ae:	3210      	adds	r2, #16
  4048b0:	2c03      	cmp	r4, #3
  4048b2:	4413      	add	r3, r2
  4048b4:	d90d      	bls.n	4048d2 <memset+0x82>
  4048b6:	461e      	mov	r6, r3
  4048b8:	4622      	mov	r2, r4
  4048ba:	3a04      	subs	r2, #4
  4048bc:	2a03      	cmp	r2, #3
  4048be:	f846 5b04 	str.w	r5, [r6], #4
  4048c2:	d8fa      	bhi.n	4048ba <memset+0x6a>
  4048c4:	1f22      	subs	r2, r4, #4
  4048c6:	f022 0203 	bic.w	r2, r2, #3
  4048ca:	3204      	adds	r2, #4
  4048cc:	4413      	add	r3, r2
  4048ce:	f004 0403 	and.w	r4, r4, #3
  4048d2:	b12c      	cbz	r4, 4048e0 <memset+0x90>
  4048d4:	b2c9      	uxtb	r1, r1
  4048d6:	441c      	add	r4, r3
  4048d8:	f803 1b01 	strb.w	r1, [r3], #1
  4048dc:	42a3      	cmp	r3, r4
  4048de:	d1fb      	bne.n	4048d8 <memset+0x88>
  4048e0:	bc70      	pop	{r4, r5, r6}
  4048e2:	4770      	bx	lr
  4048e4:	4614      	mov	r4, r2
  4048e6:	4603      	mov	r3, r0
  4048e8:	e7c2      	b.n	404870 <memset+0x20>
  4048ea:	bf00      	nop

004048ec <setbuf>:
  4048ec:	2900      	cmp	r1, #0
  4048ee:	bf0c      	ite	eq
  4048f0:	2202      	moveq	r2, #2
  4048f2:	2200      	movne	r2, #0
  4048f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4048f8:	f000 b800 	b.w	4048fc <setvbuf>

004048fc <setvbuf>:
  4048fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404900:	4c51      	ldr	r4, [pc, #324]	; (404a48 <setvbuf+0x14c>)
  404902:	6825      	ldr	r5, [r4, #0]
  404904:	b083      	sub	sp, #12
  404906:	4604      	mov	r4, r0
  404908:	460f      	mov	r7, r1
  40490a:	4690      	mov	r8, r2
  40490c:	461e      	mov	r6, r3
  40490e:	b115      	cbz	r5, 404916 <setvbuf+0x1a>
  404910:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404912:	2b00      	cmp	r3, #0
  404914:	d079      	beq.n	404a0a <setvbuf+0x10e>
  404916:	f1b8 0f02 	cmp.w	r8, #2
  40491a:	d004      	beq.n	404926 <setvbuf+0x2a>
  40491c:	f1b8 0f01 	cmp.w	r8, #1
  404920:	d87f      	bhi.n	404a22 <setvbuf+0x126>
  404922:	2e00      	cmp	r6, #0
  404924:	db7d      	blt.n	404a22 <setvbuf+0x126>
  404926:	4621      	mov	r1, r4
  404928:	4628      	mov	r0, r5
  40492a:	f000 f943 	bl	404bb4 <_fflush_r>
  40492e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404930:	b141      	cbz	r1, 404944 <setvbuf+0x48>
  404932:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404936:	4299      	cmp	r1, r3
  404938:	d002      	beq.n	404940 <setvbuf+0x44>
  40493a:	4628      	mov	r0, r5
  40493c:	f000 fa3a 	bl	404db4 <_free_r>
  404940:	2300      	movs	r3, #0
  404942:	6323      	str	r3, [r4, #48]	; 0x30
  404944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404948:	2200      	movs	r2, #0
  40494a:	61a2      	str	r2, [r4, #24]
  40494c:	6062      	str	r2, [r4, #4]
  40494e:	061a      	lsls	r2, r3, #24
  404950:	d454      	bmi.n	4049fc <setvbuf+0x100>
  404952:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404956:	f023 0303 	bic.w	r3, r3, #3
  40495a:	f1b8 0f02 	cmp.w	r8, #2
  40495e:	81a3      	strh	r3, [r4, #12]
  404960:	d039      	beq.n	4049d6 <setvbuf+0xda>
  404962:	ab01      	add	r3, sp, #4
  404964:	466a      	mov	r2, sp
  404966:	4621      	mov	r1, r4
  404968:	4628      	mov	r0, r5
  40496a:	f000 fb35 	bl	404fd8 <__swhatbuf_r>
  40496e:	89a3      	ldrh	r3, [r4, #12]
  404970:	4318      	orrs	r0, r3
  404972:	81a0      	strh	r0, [r4, #12]
  404974:	b326      	cbz	r6, 4049c0 <setvbuf+0xc4>
  404976:	b327      	cbz	r7, 4049c2 <setvbuf+0xc6>
  404978:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40497a:	2b00      	cmp	r3, #0
  40497c:	d04d      	beq.n	404a1a <setvbuf+0x11e>
  40497e:	9b00      	ldr	r3, [sp, #0]
  404980:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  404984:	6027      	str	r7, [r4, #0]
  404986:	429e      	cmp	r6, r3
  404988:	bf1c      	itt	ne
  40498a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40498e:	81a0      	strhne	r0, [r4, #12]
  404990:	f1b8 0f01 	cmp.w	r8, #1
  404994:	bf08      	it	eq
  404996:	f040 0001 	orreq.w	r0, r0, #1
  40499a:	b283      	uxth	r3, r0
  40499c:	bf08      	it	eq
  40499e:	81a0      	strheq	r0, [r4, #12]
  4049a0:	f003 0008 	and.w	r0, r3, #8
  4049a4:	b280      	uxth	r0, r0
  4049a6:	6127      	str	r7, [r4, #16]
  4049a8:	6166      	str	r6, [r4, #20]
  4049aa:	b318      	cbz	r0, 4049f4 <setvbuf+0xf8>
  4049ac:	f013 0001 	ands.w	r0, r3, #1
  4049b0:	d02f      	beq.n	404a12 <setvbuf+0x116>
  4049b2:	2000      	movs	r0, #0
  4049b4:	4276      	negs	r6, r6
  4049b6:	61a6      	str	r6, [r4, #24]
  4049b8:	60a0      	str	r0, [r4, #8]
  4049ba:	b003      	add	sp, #12
  4049bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4049c0:	9e00      	ldr	r6, [sp, #0]
  4049c2:	4630      	mov	r0, r6
  4049c4:	f000 fb38 	bl	405038 <malloc>
  4049c8:	4607      	mov	r7, r0
  4049ca:	b368      	cbz	r0, 404a28 <setvbuf+0x12c>
  4049cc:	89a3      	ldrh	r3, [r4, #12]
  4049ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4049d2:	81a3      	strh	r3, [r4, #12]
  4049d4:	e7d0      	b.n	404978 <setvbuf+0x7c>
  4049d6:	2000      	movs	r0, #0
  4049d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4049dc:	f043 0302 	orr.w	r3, r3, #2
  4049e0:	2500      	movs	r5, #0
  4049e2:	2101      	movs	r1, #1
  4049e4:	81a3      	strh	r3, [r4, #12]
  4049e6:	60a5      	str	r5, [r4, #8]
  4049e8:	6022      	str	r2, [r4, #0]
  4049ea:	6122      	str	r2, [r4, #16]
  4049ec:	6161      	str	r1, [r4, #20]
  4049ee:	b003      	add	sp, #12
  4049f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4049f4:	60a0      	str	r0, [r4, #8]
  4049f6:	b003      	add	sp, #12
  4049f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4049fc:	6921      	ldr	r1, [r4, #16]
  4049fe:	4628      	mov	r0, r5
  404a00:	f000 f9d8 	bl	404db4 <_free_r>
  404a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a08:	e7a3      	b.n	404952 <setvbuf+0x56>
  404a0a:	4628      	mov	r0, r5
  404a0c:	f000 f966 	bl	404cdc <__sinit>
  404a10:	e781      	b.n	404916 <setvbuf+0x1a>
  404a12:	60a6      	str	r6, [r4, #8]
  404a14:	b003      	add	sp, #12
  404a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a1a:	4628      	mov	r0, r5
  404a1c:	f000 f95e 	bl	404cdc <__sinit>
  404a20:	e7ad      	b.n	40497e <setvbuf+0x82>
  404a22:	f04f 30ff 	mov.w	r0, #4294967295
  404a26:	e7e2      	b.n	4049ee <setvbuf+0xf2>
  404a28:	f8dd 9000 	ldr.w	r9, [sp]
  404a2c:	45b1      	cmp	r9, r6
  404a2e:	d006      	beq.n	404a3e <setvbuf+0x142>
  404a30:	4648      	mov	r0, r9
  404a32:	f000 fb01 	bl	405038 <malloc>
  404a36:	4607      	mov	r7, r0
  404a38:	b108      	cbz	r0, 404a3e <setvbuf+0x142>
  404a3a:	464e      	mov	r6, r9
  404a3c:	e7c6      	b.n	4049cc <setvbuf+0xd0>
  404a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a42:	f04f 30ff 	mov.w	r0, #4294967295
  404a46:	e7c7      	b.n	4049d8 <setvbuf+0xdc>
  404a48:	20000448 	.word	0x20000448

00404a4c <register_fini>:
  404a4c:	4b02      	ldr	r3, [pc, #8]	; (404a58 <register_fini+0xc>)
  404a4e:	b113      	cbz	r3, 404a56 <register_fini+0xa>
  404a50:	4802      	ldr	r0, [pc, #8]	; (404a5c <register_fini+0x10>)
  404a52:	f000 b805 	b.w	404a60 <atexit>
  404a56:	4770      	bx	lr
  404a58:	00000000 	.word	0x00000000
  404a5c:	00404cf1 	.word	0x00404cf1

00404a60 <atexit>:
  404a60:	2300      	movs	r3, #0
  404a62:	4601      	mov	r1, r0
  404a64:	461a      	mov	r2, r3
  404a66:	4618      	mov	r0, r3
  404a68:	f000 be16 	b.w	405698 <__register_exitproc>

00404a6c <__sflush_r>:
  404a6c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404a70:	b29a      	uxth	r2, r3
  404a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a76:	460d      	mov	r5, r1
  404a78:	0711      	lsls	r1, r2, #28
  404a7a:	4680      	mov	r8, r0
  404a7c:	d43c      	bmi.n	404af8 <__sflush_r+0x8c>
  404a7e:	686a      	ldr	r2, [r5, #4]
  404a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404a84:	2a00      	cmp	r2, #0
  404a86:	81ab      	strh	r3, [r5, #12]
  404a88:	dd73      	ble.n	404b72 <__sflush_r+0x106>
  404a8a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404a8c:	2c00      	cmp	r4, #0
  404a8e:	d04b      	beq.n	404b28 <__sflush_r+0xbc>
  404a90:	b29b      	uxth	r3, r3
  404a92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  404a96:	2100      	movs	r1, #0
  404a98:	b292      	uxth	r2, r2
  404a9a:	f8d8 6000 	ldr.w	r6, [r8]
  404a9e:	f8c8 1000 	str.w	r1, [r8]
  404aa2:	2a00      	cmp	r2, #0
  404aa4:	d069      	beq.n	404b7a <__sflush_r+0x10e>
  404aa6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404aa8:	075f      	lsls	r7, r3, #29
  404aaa:	d505      	bpl.n	404ab8 <__sflush_r+0x4c>
  404aac:	6869      	ldr	r1, [r5, #4]
  404aae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404ab0:	1a52      	subs	r2, r2, r1
  404ab2:	b10b      	cbz	r3, 404ab8 <__sflush_r+0x4c>
  404ab4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404ab6:	1ad2      	subs	r2, r2, r3
  404ab8:	2300      	movs	r3, #0
  404aba:	69e9      	ldr	r1, [r5, #28]
  404abc:	4640      	mov	r0, r8
  404abe:	47a0      	blx	r4
  404ac0:	1c44      	adds	r4, r0, #1
  404ac2:	d03c      	beq.n	404b3e <__sflush_r+0xd2>
  404ac4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404ac8:	692a      	ldr	r2, [r5, #16]
  404aca:	602a      	str	r2, [r5, #0]
  404acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404ad0:	2200      	movs	r2, #0
  404ad2:	81ab      	strh	r3, [r5, #12]
  404ad4:	04db      	lsls	r3, r3, #19
  404ad6:	606a      	str	r2, [r5, #4]
  404ad8:	d449      	bmi.n	404b6e <__sflush_r+0x102>
  404ada:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404adc:	f8c8 6000 	str.w	r6, [r8]
  404ae0:	b311      	cbz	r1, 404b28 <__sflush_r+0xbc>
  404ae2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404ae6:	4299      	cmp	r1, r3
  404ae8:	d002      	beq.n	404af0 <__sflush_r+0x84>
  404aea:	4640      	mov	r0, r8
  404aec:	f000 f962 	bl	404db4 <_free_r>
  404af0:	2000      	movs	r0, #0
  404af2:	6328      	str	r0, [r5, #48]	; 0x30
  404af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404af8:	692e      	ldr	r6, [r5, #16]
  404afa:	b1ae      	cbz	r6, 404b28 <__sflush_r+0xbc>
  404afc:	682c      	ldr	r4, [r5, #0]
  404afe:	602e      	str	r6, [r5, #0]
  404b00:	0790      	lsls	r0, r2, #30
  404b02:	bf0c      	ite	eq
  404b04:	696b      	ldreq	r3, [r5, #20]
  404b06:	2300      	movne	r3, #0
  404b08:	1ba4      	subs	r4, r4, r6
  404b0a:	60ab      	str	r3, [r5, #8]
  404b0c:	e00a      	b.n	404b24 <__sflush_r+0xb8>
  404b0e:	4623      	mov	r3, r4
  404b10:	4632      	mov	r2, r6
  404b12:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404b14:	69e9      	ldr	r1, [r5, #28]
  404b16:	4640      	mov	r0, r8
  404b18:	47b8      	blx	r7
  404b1a:	2800      	cmp	r0, #0
  404b1c:	eba4 0400 	sub.w	r4, r4, r0
  404b20:	4406      	add	r6, r0
  404b22:	dd04      	ble.n	404b2e <__sflush_r+0xc2>
  404b24:	2c00      	cmp	r4, #0
  404b26:	dcf2      	bgt.n	404b0e <__sflush_r+0xa2>
  404b28:	2000      	movs	r0, #0
  404b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b2e:	89ab      	ldrh	r3, [r5, #12]
  404b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b34:	81ab      	strh	r3, [r5, #12]
  404b36:	f04f 30ff 	mov.w	r0, #4294967295
  404b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b3e:	f8d8 2000 	ldr.w	r2, [r8]
  404b42:	2a1d      	cmp	r2, #29
  404b44:	d8f3      	bhi.n	404b2e <__sflush_r+0xc2>
  404b46:	4b1a      	ldr	r3, [pc, #104]	; (404bb0 <__sflush_r+0x144>)
  404b48:	40d3      	lsrs	r3, r2
  404b4a:	f003 0301 	and.w	r3, r3, #1
  404b4e:	f083 0401 	eor.w	r4, r3, #1
  404b52:	2b00      	cmp	r3, #0
  404b54:	d0eb      	beq.n	404b2e <__sflush_r+0xc2>
  404b56:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404b5a:	6929      	ldr	r1, [r5, #16]
  404b5c:	6029      	str	r1, [r5, #0]
  404b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404b62:	04d9      	lsls	r1, r3, #19
  404b64:	606c      	str	r4, [r5, #4]
  404b66:	81ab      	strh	r3, [r5, #12]
  404b68:	d5b7      	bpl.n	404ada <__sflush_r+0x6e>
  404b6a:	2a00      	cmp	r2, #0
  404b6c:	d1b5      	bne.n	404ada <__sflush_r+0x6e>
  404b6e:	6528      	str	r0, [r5, #80]	; 0x50
  404b70:	e7b3      	b.n	404ada <__sflush_r+0x6e>
  404b72:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404b74:	2a00      	cmp	r2, #0
  404b76:	dc88      	bgt.n	404a8a <__sflush_r+0x1e>
  404b78:	e7d6      	b.n	404b28 <__sflush_r+0xbc>
  404b7a:	2301      	movs	r3, #1
  404b7c:	69e9      	ldr	r1, [r5, #28]
  404b7e:	4640      	mov	r0, r8
  404b80:	47a0      	blx	r4
  404b82:	1c43      	adds	r3, r0, #1
  404b84:	4602      	mov	r2, r0
  404b86:	d002      	beq.n	404b8e <__sflush_r+0x122>
  404b88:	89ab      	ldrh	r3, [r5, #12]
  404b8a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404b8c:	e78c      	b.n	404aa8 <__sflush_r+0x3c>
  404b8e:	f8d8 3000 	ldr.w	r3, [r8]
  404b92:	2b00      	cmp	r3, #0
  404b94:	d0f8      	beq.n	404b88 <__sflush_r+0x11c>
  404b96:	2b1d      	cmp	r3, #29
  404b98:	d001      	beq.n	404b9e <__sflush_r+0x132>
  404b9a:	2b16      	cmp	r3, #22
  404b9c:	d102      	bne.n	404ba4 <__sflush_r+0x138>
  404b9e:	f8c8 6000 	str.w	r6, [r8]
  404ba2:	e7c1      	b.n	404b28 <__sflush_r+0xbc>
  404ba4:	89ab      	ldrh	r3, [r5, #12]
  404ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404baa:	81ab      	strh	r3, [r5, #12]
  404bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404bb0:	20400001 	.word	0x20400001

00404bb4 <_fflush_r>:
  404bb4:	b510      	push	{r4, lr}
  404bb6:	4604      	mov	r4, r0
  404bb8:	b082      	sub	sp, #8
  404bba:	b108      	cbz	r0, 404bc0 <_fflush_r+0xc>
  404bbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404bbe:	b153      	cbz	r3, 404bd6 <_fflush_r+0x22>
  404bc0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  404bc4:	b908      	cbnz	r0, 404bca <_fflush_r+0x16>
  404bc6:	b002      	add	sp, #8
  404bc8:	bd10      	pop	{r4, pc}
  404bca:	4620      	mov	r0, r4
  404bcc:	b002      	add	sp, #8
  404bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404bd2:	f7ff bf4b 	b.w	404a6c <__sflush_r>
  404bd6:	9101      	str	r1, [sp, #4]
  404bd8:	f000 f880 	bl	404cdc <__sinit>
  404bdc:	9901      	ldr	r1, [sp, #4]
  404bde:	e7ef      	b.n	404bc0 <_fflush_r+0xc>

00404be0 <_cleanup_r>:
  404be0:	4901      	ldr	r1, [pc, #4]	; (404be8 <_cleanup_r+0x8>)
  404be2:	f000 b9cf 	b.w	404f84 <_fwalk_reent>
  404be6:	bf00      	nop
  404be8:	00405761 	.word	0x00405761

00404bec <__sinit.part.1>:
  404bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bf0:	4b35      	ldr	r3, [pc, #212]	; (404cc8 <__sinit.part.1+0xdc>)
  404bf2:	6845      	ldr	r5, [r0, #4]
  404bf4:	63c3      	str	r3, [r0, #60]	; 0x3c
  404bf6:	2400      	movs	r4, #0
  404bf8:	4607      	mov	r7, r0
  404bfa:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  404bfe:	2304      	movs	r3, #4
  404c00:	2103      	movs	r1, #3
  404c02:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  404c06:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  404c0a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  404c0e:	b083      	sub	sp, #12
  404c10:	602c      	str	r4, [r5, #0]
  404c12:	606c      	str	r4, [r5, #4]
  404c14:	60ac      	str	r4, [r5, #8]
  404c16:	666c      	str	r4, [r5, #100]	; 0x64
  404c18:	81ec      	strh	r4, [r5, #14]
  404c1a:	612c      	str	r4, [r5, #16]
  404c1c:	616c      	str	r4, [r5, #20]
  404c1e:	61ac      	str	r4, [r5, #24]
  404c20:	81ab      	strh	r3, [r5, #12]
  404c22:	4621      	mov	r1, r4
  404c24:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404c28:	2208      	movs	r2, #8
  404c2a:	f7ff fe11 	bl	404850 <memset>
  404c2e:	68be      	ldr	r6, [r7, #8]
  404c30:	f8df b098 	ldr.w	fp, [pc, #152]	; 404ccc <__sinit.part.1+0xe0>
  404c34:	f8df a098 	ldr.w	sl, [pc, #152]	; 404cd0 <__sinit.part.1+0xe4>
  404c38:	f8df 9098 	ldr.w	r9, [pc, #152]	; 404cd4 <__sinit.part.1+0xe8>
  404c3c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 404cd8 <__sinit.part.1+0xec>
  404c40:	f8c5 b020 	str.w	fp, [r5, #32]
  404c44:	2301      	movs	r3, #1
  404c46:	2209      	movs	r2, #9
  404c48:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  404c4c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404c50:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  404c54:	61ed      	str	r5, [r5, #28]
  404c56:	4621      	mov	r1, r4
  404c58:	81f3      	strh	r3, [r6, #14]
  404c5a:	81b2      	strh	r2, [r6, #12]
  404c5c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  404c60:	6034      	str	r4, [r6, #0]
  404c62:	6074      	str	r4, [r6, #4]
  404c64:	60b4      	str	r4, [r6, #8]
  404c66:	6674      	str	r4, [r6, #100]	; 0x64
  404c68:	6134      	str	r4, [r6, #16]
  404c6a:	6174      	str	r4, [r6, #20]
  404c6c:	61b4      	str	r4, [r6, #24]
  404c6e:	2208      	movs	r2, #8
  404c70:	9301      	str	r3, [sp, #4]
  404c72:	f7ff fded 	bl	404850 <memset>
  404c76:	68fd      	ldr	r5, [r7, #12]
  404c78:	61f6      	str	r6, [r6, #28]
  404c7a:	2012      	movs	r0, #18
  404c7c:	2202      	movs	r2, #2
  404c7e:	f8c6 b020 	str.w	fp, [r6, #32]
  404c82:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  404c86:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  404c8a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  404c8e:	4621      	mov	r1, r4
  404c90:	81a8      	strh	r0, [r5, #12]
  404c92:	81ea      	strh	r2, [r5, #14]
  404c94:	602c      	str	r4, [r5, #0]
  404c96:	606c      	str	r4, [r5, #4]
  404c98:	60ac      	str	r4, [r5, #8]
  404c9a:	666c      	str	r4, [r5, #100]	; 0x64
  404c9c:	612c      	str	r4, [r5, #16]
  404c9e:	616c      	str	r4, [r5, #20]
  404ca0:	61ac      	str	r4, [r5, #24]
  404ca2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404ca6:	2208      	movs	r2, #8
  404ca8:	f7ff fdd2 	bl	404850 <memset>
  404cac:	9b01      	ldr	r3, [sp, #4]
  404cae:	61ed      	str	r5, [r5, #28]
  404cb0:	f8c5 b020 	str.w	fp, [r5, #32]
  404cb4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  404cb8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404cbc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  404cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  404cc2:	b003      	add	sp, #12
  404cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cc8:	00404be1 	.word	0x00404be1
  404ccc:	004055e5 	.word	0x004055e5
  404cd0:	00405609 	.word	0x00405609
  404cd4:	00405645 	.word	0x00405645
  404cd8:	00405665 	.word	0x00405665

00404cdc <__sinit>:
  404cdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404cde:	b103      	cbz	r3, 404ce2 <__sinit+0x6>
  404ce0:	4770      	bx	lr
  404ce2:	f7ff bf83 	b.w	404bec <__sinit.part.1>
  404ce6:	bf00      	nop

00404ce8 <__sfp_lock_acquire>:
  404ce8:	4770      	bx	lr
  404cea:	bf00      	nop

00404cec <__sfp_lock_release>:
  404cec:	4770      	bx	lr
  404cee:	bf00      	nop

00404cf0 <__libc_fini_array>:
  404cf0:	b538      	push	{r3, r4, r5, lr}
  404cf2:	4d07      	ldr	r5, [pc, #28]	; (404d10 <__libc_fini_array+0x20>)
  404cf4:	4c07      	ldr	r4, [pc, #28]	; (404d14 <__libc_fini_array+0x24>)
  404cf6:	1b2c      	subs	r4, r5, r4
  404cf8:	10a4      	asrs	r4, r4, #2
  404cfa:	d005      	beq.n	404d08 <__libc_fini_array+0x18>
  404cfc:	3c01      	subs	r4, #1
  404cfe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404d02:	4798      	blx	r3
  404d04:	2c00      	cmp	r4, #0
  404d06:	d1f9      	bne.n	404cfc <__libc_fini_array+0xc>
  404d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404d0c:	f000 bdd0 	b.w	4058b0 <_fini>
  404d10:	004058c0 	.word	0x004058c0
  404d14:	004058bc 	.word	0x004058bc

00404d18 <_malloc_trim_r>:
  404d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d1a:	4f23      	ldr	r7, [pc, #140]	; (404da8 <_malloc_trim_r+0x90>)
  404d1c:	460c      	mov	r4, r1
  404d1e:	4606      	mov	r6, r0
  404d20:	f000 fc4a 	bl	4055b8 <__malloc_lock>
  404d24:	68bb      	ldr	r3, [r7, #8]
  404d26:	685d      	ldr	r5, [r3, #4]
  404d28:	f025 0503 	bic.w	r5, r5, #3
  404d2c:	1b29      	subs	r1, r5, r4
  404d2e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  404d32:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404d36:	f021 010f 	bic.w	r1, r1, #15
  404d3a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404d3e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404d42:	db07      	blt.n	404d54 <_malloc_trim_r+0x3c>
  404d44:	2100      	movs	r1, #0
  404d46:	4630      	mov	r0, r6
  404d48:	f000 fc3a 	bl	4055c0 <_sbrk_r>
  404d4c:	68bb      	ldr	r3, [r7, #8]
  404d4e:	442b      	add	r3, r5
  404d50:	4298      	cmp	r0, r3
  404d52:	d004      	beq.n	404d5e <_malloc_trim_r+0x46>
  404d54:	4630      	mov	r0, r6
  404d56:	f000 fc31 	bl	4055bc <__malloc_unlock>
  404d5a:	2000      	movs	r0, #0
  404d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d5e:	4261      	negs	r1, r4
  404d60:	4630      	mov	r0, r6
  404d62:	f000 fc2d 	bl	4055c0 <_sbrk_r>
  404d66:	3001      	adds	r0, #1
  404d68:	d00d      	beq.n	404d86 <_malloc_trim_r+0x6e>
  404d6a:	4b10      	ldr	r3, [pc, #64]	; (404dac <_malloc_trim_r+0x94>)
  404d6c:	68ba      	ldr	r2, [r7, #8]
  404d6e:	6819      	ldr	r1, [r3, #0]
  404d70:	1b2d      	subs	r5, r5, r4
  404d72:	f045 0501 	orr.w	r5, r5, #1
  404d76:	4630      	mov	r0, r6
  404d78:	1b09      	subs	r1, r1, r4
  404d7a:	6055      	str	r5, [r2, #4]
  404d7c:	6019      	str	r1, [r3, #0]
  404d7e:	f000 fc1d 	bl	4055bc <__malloc_unlock>
  404d82:	2001      	movs	r0, #1
  404d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d86:	2100      	movs	r1, #0
  404d88:	4630      	mov	r0, r6
  404d8a:	f000 fc19 	bl	4055c0 <_sbrk_r>
  404d8e:	68ba      	ldr	r2, [r7, #8]
  404d90:	1a83      	subs	r3, r0, r2
  404d92:	2b0f      	cmp	r3, #15
  404d94:	ddde      	ble.n	404d54 <_malloc_trim_r+0x3c>
  404d96:	4c06      	ldr	r4, [pc, #24]	; (404db0 <_malloc_trim_r+0x98>)
  404d98:	4904      	ldr	r1, [pc, #16]	; (404dac <_malloc_trim_r+0x94>)
  404d9a:	6824      	ldr	r4, [r4, #0]
  404d9c:	f043 0301 	orr.w	r3, r3, #1
  404da0:	1b00      	subs	r0, r0, r4
  404da2:	6053      	str	r3, [r2, #4]
  404da4:	6008      	str	r0, [r1, #0]
  404da6:	e7d5      	b.n	404d54 <_malloc_trim_r+0x3c>
  404da8:	2000044c 	.word	0x2000044c
  404dac:	20000ac4 	.word	0x20000ac4
  404db0:	20000858 	.word	0x20000858

00404db4 <_free_r>:
  404db4:	2900      	cmp	r1, #0
  404db6:	d045      	beq.n	404e44 <_free_r+0x90>
  404db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404dbc:	460d      	mov	r5, r1
  404dbe:	4680      	mov	r8, r0
  404dc0:	f000 fbfa 	bl	4055b8 <__malloc_lock>
  404dc4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404dc8:	496a      	ldr	r1, [pc, #424]	; (404f74 <_free_r+0x1c0>)
  404dca:	f027 0301 	bic.w	r3, r7, #1
  404dce:	f1a5 0408 	sub.w	r4, r5, #8
  404dd2:	18e2      	adds	r2, r4, r3
  404dd4:	688e      	ldr	r6, [r1, #8]
  404dd6:	6850      	ldr	r0, [r2, #4]
  404dd8:	42b2      	cmp	r2, r6
  404dda:	f020 0003 	bic.w	r0, r0, #3
  404dde:	d062      	beq.n	404ea6 <_free_r+0xf2>
  404de0:	07fe      	lsls	r6, r7, #31
  404de2:	6050      	str	r0, [r2, #4]
  404de4:	d40b      	bmi.n	404dfe <_free_r+0x4a>
  404de6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404dea:	1be4      	subs	r4, r4, r7
  404dec:	f101 0e08 	add.w	lr, r1, #8
  404df0:	68a5      	ldr	r5, [r4, #8]
  404df2:	4575      	cmp	r5, lr
  404df4:	443b      	add	r3, r7
  404df6:	d06f      	beq.n	404ed8 <_free_r+0x124>
  404df8:	68e7      	ldr	r7, [r4, #12]
  404dfa:	60ef      	str	r7, [r5, #12]
  404dfc:	60bd      	str	r5, [r7, #8]
  404dfe:	1815      	adds	r5, r2, r0
  404e00:	686d      	ldr	r5, [r5, #4]
  404e02:	07ed      	lsls	r5, r5, #31
  404e04:	d542      	bpl.n	404e8c <_free_r+0xd8>
  404e06:	f043 0201 	orr.w	r2, r3, #1
  404e0a:	6062      	str	r2, [r4, #4]
  404e0c:	50e3      	str	r3, [r4, r3]
  404e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404e12:	d218      	bcs.n	404e46 <_free_r+0x92>
  404e14:	08db      	lsrs	r3, r3, #3
  404e16:	1c5a      	adds	r2, r3, #1
  404e18:	684d      	ldr	r5, [r1, #4]
  404e1a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  404e1e:	60a7      	str	r7, [r4, #8]
  404e20:	2001      	movs	r0, #1
  404e22:	109b      	asrs	r3, r3, #2
  404e24:	fa00 f303 	lsl.w	r3, r0, r3
  404e28:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  404e2c:	431d      	orrs	r5, r3
  404e2e:	3808      	subs	r0, #8
  404e30:	60e0      	str	r0, [r4, #12]
  404e32:	604d      	str	r5, [r1, #4]
  404e34:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  404e38:	60fc      	str	r4, [r7, #12]
  404e3a:	4640      	mov	r0, r8
  404e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404e40:	f000 bbbc 	b.w	4055bc <__malloc_unlock>
  404e44:	4770      	bx	lr
  404e46:	0a5a      	lsrs	r2, r3, #9
  404e48:	2a04      	cmp	r2, #4
  404e4a:	d853      	bhi.n	404ef4 <_free_r+0x140>
  404e4c:	099a      	lsrs	r2, r3, #6
  404e4e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404e52:	007f      	lsls	r7, r7, #1
  404e54:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404e58:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  404e5c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  404e60:	4944      	ldr	r1, [pc, #272]	; (404f74 <_free_r+0x1c0>)
  404e62:	3808      	subs	r0, #8
  404e64:	4290      	cmp	r0, r2
  404e66:	d04d      	beq.n	404f04 <_free_r+0x150>
  404e68:	6851      	ldr	r1, [r2, #4]
  404e6a:	f021 0103 	bic.w	r1, r1, #3
  404e6e:	428b      	cmp	r3, r1
  404e70:	d202      	bcs.n	404e78 <_free_r+0xc4>
  404e72:	6892      	ldr	r2, [r2, #8]
  404e74:	4290      	cmp	r0, r2
  404e76:	d1f7      	bne.n	404e68 <_free_r+0xb4>
  404e78:	68d0      	ldr	r0, [r2, #12]
  404e7a:	60e0      	str	r0, [r4, #12]
  404e7c:	60a2      	str	r2, [r4, #8]
  404e7e:	6084      	str	r4, [r0, #8]
  404e80:	60d4      	str	r4, [r2, #12]
  404e82:	4640      	mov	r0, r8
  404e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404e88:	f000 bb98 	b.w	4055bc <__malloc_unlock>
  404e8c:	6895      	ldr	r5, [r2, #8]
  404e8e:	4f3a      	ldr	r7, [pc, #232]	; (404f78 <_free_r+0x1c4>)
  404e90:	42bd      	cmp	r5, r7
  404e92:	4403      	add	r3, r0
  404e94:	d03f      	beq.n	404f16 <_free_r+0x162>
  404e96:	68d0      	ldr	r0, [r2, #12]
  404e98:	60e8      	str	r0, [r5, #12]
  404e9a:	f043 0201 	orr.w	r2, r3, #1
  404e9e:	6085      	str	r5, [r0, #8]
  404ea0:	6062      	str	r2, [r4, #4]
  404ea2:	50e3      	str	r3, [r4, r3]
  404ea4:	e7b3      	b.n	404e0e <_free_r+0x5a>
  404ea6:	07ff      	lsls	r7, r7, #31
  404ea8:	4403      	add	r3, r0
  404eaa:	d407      	bmi.n	404ebc <_free_r+0x108>
  404eac:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404eb0:	1aa4      	subs	r4, r4, r2
  404eb2:	4413      	add	r3, r2
  404eb4:	68a0      	ldr	r0, [r4, #8]
  404eb6:	68e2      	ldr	r2, [r4, #12]
  404eb8:	60c2      	str	r2, [r0, #12]
  404eba:	6090      	str	r0, [r2, #8]
  404ebc:	4a2f      	ldr	r2, [pc, #188]	; (404f7c <_free_r+0x1c8>)
  404ebe:	6812      	ldr	r2, [r2, #0]
  404ec0:	f043 0001 	orr.w	r0, r3, #1
  404ec4:	4293      	cmp	r3, r2
  404ec6:	6060      	str	r0, [r4, #4]
  404ec8:	608c      	str	r4, [r1, #8]
  404eca:	d3b6      	bcc.n	404e3a <_free_r+0x86>
  404ecc:	4b2c      	ldr	r3, [pc, #176]	; (404f80 <_free_r+0x1cc>)
  404ece:	4640      	mov	r0, r8
  404ed0:	6819      	ldr	r1, [r3, #0]
  404ed2:	f7ff ff21 	bl	404d18 <_malloc_trim_r>
  404ed6:	e7b0      	b.n	404e3a <_free_r+0x86>
  404ed8:	1811      	adds	r1, r2, r0
  404eda:	6849      	ldr	r1, [r1, #4]
  404edc:	07c9      	lsls	r1, r1, #31
  404ede:	d444      	bmi.n	404f6a <_free_r+0x1b6>
  404ee0:	6891      	ldr	r1, [r2, #8]
  404ee2:	68d2      	ldr	r2, [r2, #12]
  404ee4:	60ca      	str	r2, [r1, #12]
  404ee6:	4403      	add	r3, r0
  404ee8:	f043 0001 	orr.w	r0, r3, #1
  404eec:	6091      	str	r1, [r2, #8]
  404eee:	6060      	str	r0, [r4, #4]
  404ef0:	50e3      	str	r3, [r4, r3]
  404ef2:	e7a2      	b.n	404e3a <_free_r+0x86>
  404ef4:	2a14      	cmp	r2, #20
  404ef6:	d817      	bhi.n	404f28 <_free_r+0x174>
  404ef8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404efc:	007f      	lsls	r7, r7, #1
  404efe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404f02:	e7a9      	b.n	404e58 <_free_r+0xa4>
  404f04:	10aa      	asrs	r2, r5, #2
  404f06:	684b      	ldr	r3, [r1, #4]
  404f08:	2501      	movs	r5, #1
  404f0a:	fa05 f202 	lsl.w	r2, r5, r2
  404f0e:	4313      	orrs	r3, r2
  404f10:	604b      	str	r3, [r1, #4]
  404f12:	4602      	mov	r2, r0
  404f14:	e7b1      	b.n	404e7a <_free_r+0xc6>
  404f16:	f043 0201 	orr.w	r2, r3, #1
  404f1a:	614c      	str	r4, [r1, #20]
  404f1c:	610c      	str	r4, [r1, #16]
  404f1e:	60e5      	str	r5, [r4, #12]
  404f20:	60a5      	str	r5, [r4, #8]
  404f22:	6062      	str	r2, [r4, #4]
  404f24:	50e3      	str	r3, [r4, r3]
  404f26:	e788      	b.n	404e3a <_free_r+0x86>
  404f28:	2a54      	cmp	r2, #84	; 0x54
  404f2a:	d806      	bhi.n	404f3a <_free_r+0x186>
  404f2c:	0b1a      	lsrs	r2, r3, #12
  404f2e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404f32:	007f      	lsls	r7, r7, #1
  404f34:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404f38:	e78e      	b.n	404e58 <_free_r+0xa4>
  404f3a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404f3e:	d806      	bhi.n	404f4e <_free_r+0x19a>
  404f40:	0bda      	lsrs	r2, r3, #15
  404f42:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404f46:	007f      	lsls	r7, r7, #1
  404f48:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404f4c:	e784      	b.n	404e58 <_free_r+0xa4>
  404f4e:	f240 5054 	movw	r0, #1364	; 0x554
  404f52:	4282      	cmp	r2, r0
  404f54:	d806      	bhi.n	404f64 <_free_r+0x1b0>
  404f56:	0c9a      	lsrs	r2, r3, #18
  404f58:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404f5c:	007f      	lsls	r7, r7, #1
  404f5e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404f62:	e779      	b.n	404e58 <_free_r+0xa4>
  404f64:	27fe      	movs	r7, #254	; 0xfe
  404f66:	257e      	movs	r5, #126	; 0x7e
  404f68:	e776      	b.n	404e58 <_free_r+0xa4>
  404f6a:	f043 0201 	orr.w	r2, r3, #1
  404f6e:	6062      	str	r2, [r4, #4]
  404f70:	50e3      	str	r3, [r4, r3]
  404f72:	e762      	b.n	404e3a <_free_r+0x86>
  404f74:	2000044c 	.word	0x2000044c
  404f78:	20000454 	.word	0x20000454
  404f7c:	20000854 	.word	0x20000854
  404f80:	20000ac0 	.word	0x20000ac0

00404f84 <_fwalk_reent>:
  404f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404f88:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404f8c:	d01f      	beq.n	404fce <_fwalk_reent+0x4a>
  404f8e:	4688      	mov	r8, r1
  404f90:	4606      	mov	r6, r0
  404f92:	f04f 0900 	mov.w	r9, #0
  404f96:	687d      	ldr	r5, [r7, #4]
  404f98:	68bc      	ldr	r4, [r7, #8]
  404f9a:	3d01      	subs	r5, #1
  404f9c:	d411      	bmi.n	404fc2 <_fwalk_reent+0x3e>
  404f9e:	89a3      	ldrh	r3, [r4, #12]
  404fa0:	2b01      	cmp	r3, #1
  404fa2:	f105 35ff 	add.w	r5, r5, #4294967295
  404fa6:	d908      	bls.n	404fba <_fwalk_reent+0x36>
  404fa8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404fac:	3301      	adds	r3, #1
  404fae:	4621      	mov	r1, r4
  404fb0:	4630      	mov	r0, r6
  404fb2:	d002      	beq.n	404fba <_fwalk_reent+0x36>
  404fb4:	47c0      	blx	r8
  404fb6:	ea49 0900 	orr.w	r9, r9, r0
  404fba:	1c6b      	adds	r3, r5, #1
  404fbc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404fc0:	d1ed      	bne.n	404f9e <_fwalk_reent+0x1a>
  404fc2:	683f      	ldr	r7, [r7, #0]
  404fc4:	2f00      	cmp	r7, #0
  404fc6:	d1e6      	bne.n	404f96 <_fwalk_reent+0x12>
  404fc8:	4648      	mov	r0, r9
  404fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fce:	46b9      	mov	r9, r7
  404fd0:	4648      	mov	r0, r9
  404fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fd6:	bf00      	nop

00404fd8 <__swhatbuf_r>:
  404fd8:	b570      	push	{r4, r5, r6, lr}
  404fda:	460d      	mov	r5, r1
  404fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fe0:	2900      	cmp	r1, #0
  404fe2:	b090      	sub	sp, #64	; 0x40
  404fe4:	4614      	mov	r4, r2
  404fe6:	461e      	mov	r6, r3
  404fe8:	db14      	blt.n	405014 <__swhatbuf_r+0x3c>
  404fea:	aa01      	add	r2, sp, #4
  404fec:	f000 fbfa 	bl	4057e4 <_fstat_r>
  404ff0:	2800      	cmp	r0, #0
  404ff2:	db0f      	blt.n	405014 <__swhatbuf_r+0x3c>
  404ff4:	9a02      	ldr	r2, [sp, #8]
  404ff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404ffa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404ffe:	fab2 f282 	clz	r2, r2
  405002:	0952      	lsrs	r2, r2, #5
  405004:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405008:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40500c:	6032      	str	r2, [r6, #0]
  40500e:	6023      	str	r3, [r4, #0]
  405010:	b010      	add	sp, #64	; 0x40
  405012:	bd70      	pop	{r4, r5, r6, pc}
  405014:	89a8      	ldrh	r0, [r5, #12]
  405016:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40501a:	b282      	uxth	r2, r0
  40501c:	2000      	movs	r0, #0
  40501e:	6030      	str	r0, [r6, #0]
  405020:	b11a      	cbz	r2, 40502a <__swhatbuf_r+0x52>
  405022:	2340      	movs	r3, #64	; 0x40
  405024:	6023      	str	r3, [r4, #0]
  405026:	b010      	add	sp, #64	; 0x40
  405028:	bd70      	pop	{r4, r5, r6, pc}
  40502a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40502e:	4610      	mov	r0, r2
  405030:	6023      	str	r3, [r4, #0]
  405032:	b010      	add	sp, #64	; 0x40
  405034:	bd70      	pop	{r4, r5, r6, pc}
  405036:	bf00      	nop

00405038 <malloc>:
  405038:	4b02      	ldr	r3, [pc, #8]	; (405044 <malloc+0xc>)
  40503a:	4601      	mov	r1, r0
  40503c:	6818      	ldr	r0, [r3, #0]
  40503e:	f000 b803 	b.w	405048 <_malloc_r>
  405042:	bf00      	nop
  405044:	20000448 	.word	0x20000448

00405048 <_malloc_r>:
  405048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40504c:	f101 050b 	add.w	r5, r1, #11
  405050:	2d16      	cmp	r5, #22
  405052:	b083      	sub	sp, #12
  405054:	4606      	mov	r6, r0
  405056:	f240 809f 	bls.w	405198 <_malloc_r+0x150>
  40505a:	f035 0507 	bics.w	r5, r5, #7
  40505e:	f100 80bf 	bmi.w	4051e0 <_malloc_r+0x198>
  405062:	42a9      	cmp	r1, r5
  405064:	f200 80bc 	bhi.w	4051e0 <_malloc_r+0x198>
  405068:	f000 faa6 	bl	4055b8 <__malloc_lock>
  40506c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  405070:	f0c0 829c 	bcc.w	4055ac <_malloc_r+0x564>
  405074:	0a6b      	lsrs	r3, r5, #9
  405076:	f000 80ba 	beq.w	4051ee <_malloc_r+0x1a6>
  40507a:	2b04      	cmp	r3, #4
  40507c:	f200 8183 	bhi.w	405386 <_malloc_r+0x33e>
  405080:	09a8      	lsrs	r0, r5, #6
  405082:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  405086:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40508a:	3038      	adds	r0, #56	; 0x38
  40508c:	4fc4      	ldr	r7, [pc, #784]	; (4053a0 <_malloc_r+0x358>)
  40508e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  405092:	f1a3 0108 	sub.w	r1, r3, #8
  405096:	685c      	ldr	r4, [r3, #4]
  405098:	42a1      	cmp	r1, r4
  40509a:	d107      	bne.n	4050ac <_malloc_r+0x64>
  40509c:	e0ac      	b.n	4051f8 <_malloc_r+0x1b0>
  40509e:	2a00      	cmp	r2, #0
  4050a0:	f280 80ac 	bge.w	4051fc <_malloc_r+0x1b4>
  4050a4:	68e4      	ldr	r4, [r4, #12]
  4050a6:	42a1      	cmp	r1, r4
  4050a8:	f000 80a6 	beq.w	4051f8 <_malloc_r+0x1b0>
  4050ac:	6863      	ldr	r3, [r4, #4]
  4050ae:	f023 0303 	bic.w	r3, r3, #3
  4050b2:	1b5a      	subs	r2, r3, r5
  4050b4:	2a0f      	cmp	r2, #15
  4050b6:	ddf2      	ble.n	40509e <_malloc_r+0x56>
  4050b8:	49b9      	ldr	r1, [pc, #740]	; (4053a0 <_malloc_r+0x358>)
  4050ba:	693c      	ldr	r4, [r7, #16]
  4050bc:	f101 0e08 	add.w	lr, r1, #8
  4050c0:	4574      	cmp	r4, lr
  4050c2:	f000 81b3 	beq.w	40542c <_malloc_r+0x3e4>
  4050c6:	6863      	ldr	r3, [r4, #4]
  4050c8:	f023 0303 	bic.w	r3, r3, #3
  4050cc:	1b5a      	subs	r2, r3, r5
  4050ce:	2a0f      	cmp	r2, #15
  4050d0:	f300 8199 	bgt.w	405406 <_malloc_r+0x3be>
  4050d4:	2a00      	cmp	r2, #0
  4050d6:	f8c1 e014 	str.w	lr, [r1, #20]
  4050da:	f8c1 e010 	str.w	lr, [r1, #16]
  4050de:	f280 809e 	bge.w	40521e <_malloc_r+0x1d6>
  4050e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4050e6:	f080 8167 	bcs.w	4053b8 <_malloc_r+0x370>
  4050ea:	08db      	lsrs	r3, r3, #3
  4050ec:	f103 0c01 	add.w	ip, r3, #1
  4050f0:	2201      	movs	r2, #1
  4050f2:	109b      	asrs	r3, r3, #2
  4050f4:	fa02 f303 	lsl.w	r3, r2, r3
  4050f8:	684a      	ldr	r2, [r1, #4]
  4050fa:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4050fe:	f8c4 8008 	str.w	r8, [r4, #8]
  405102:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  405106:	431a      	orrs	r2, r3
  405108:	f1a9 0308 	sub.w	r3, r9, #8
  40510c:	60e3      	str	r3, [r4, #12]
  40510e:	604a      	str	r2, [r1, #4]
  405110:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  405114:	f8c8 400c 	str.w	r4, [r8, #12]
  405118:	1083      	asrs	r3, r0, #2
  40511a:	2401      	movs	r4, #1
  40511c:	409c      	lsls	r4, r3
  40511e:	4294      	cmp	r4, r2
  405120:	f200 808a 	bhi.w	405238 <_malloc_r+0x1f0>
  405124:	4214      	tst	r4, r2
  405126:	d106      	bne.n	405136 <_malloc_r+0xee>
  405128:	f020 0003 	bic.w	r0, r0, #3
  40512c:	0064      	lsls	r4, r4, #1
  40512e:	4214      	tst	r4, r2
  405130:	f100 0004 	add.w	r0, r0, #4
  405134:	d0fa      	beq.n	40512c <_malloc_r+0xe4>
  405136:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40513a:	46cc      	mov	ip, r9
  40513c:	4680      	mov	r8, r0
  40513e:	f8dc 100c 	ldr.w	r1, [ip, #12]
  405142:	458c      	cmp	ip, r1
  405144:	d107      	bne.n	405156 <_malloc_r+0x10e>
  405146:	e173      	b.n	405430 <_malloc_r+0x3e8>
  405148:	2a00      	cmp	r2, #0
  40514a:	f280 8181 	bge.w	405450 <_malloc_r+0x408>
  40514e:	68c9      	ldr	r1, [r1, #12]
  405150:	458c      	cmp	ip, r1
  405152:	f000 816d 	beq.w	405430 <_malloc_r+0x3e8>
  405156:	684b      	ldr	r3, [r1, #4]
  405158:	f023 0303 	bic.w	r3, r3, #3
  40515c:	1b5a      	subs	r2, r3, r5
  40515e:	2a0f      	cmp	r2, #15
  405160:	ddf2      	ble.n	405148 <_malloc_r+0x100>
  405162:	460c      	mov	r4, r1
  405164:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  405168:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40516c:	194b      	adds	r3, r1, r5
  40516e:	f045 0501 	orr.w	r5, r5, #1
  405172:	604d      	str	r5, [r1, #4]
  405174:	f042 0101 	orr.w	r1, r2, #1
  405178:	f8c8 c00c 	str.w	ip, [r8, #12]
  40517c:	4630      	mov	r0, r6
  40517e:	f8cc 8008 	str.w	r8, [ip, #8]
  405182:	617b      	str	r3, [r7, #20]
  405184:	613b      	str	r3, [r7, #16]
  405186:	f8c3 e00c 	str.w	lr, [r3, #12]
  40518a:	f8c3 e008 	str.w	lr, [r3, #8]
  40518e:	6059      	str	r1, [r3, #4]
  405190:	509a      	str	r2, [r3, r2]
  405192:	f000 fa13 	bl	4055bc <__malloc_unlock>
  405196:	e01f      	b.n	4051d8 <_malloc_r+0x190>
  405198:	2910      	cmp	r1, #16
  40519a:	d821      	bhi.n	4051e0 <_malloc_r+0x198>
  40519c:	f000 fa0c 	bl	4055b8 <__malloc_lock>
  4051a0:	2510      	movs	r5, #16
  4051a2:	2306      	movs	r3, #6
  4051a4:	2002      	movs	r0, #2
  4051a6:	4f7e      	ldr	r7, [pc, #504]	; (4053a0 <_malloc_r+0x358>)
  4051a8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4051ac:	f1a3 0208 	sub.w	r2, r3, #8
  4051b0:	685c      	ldr	r4, [r3, #4]
  4051b2:	4294      	cmp	r4, r2
  4051b4:	f000 8145 	beq.w	405442 <_malloc_r+0x3fa>
  4051b8:	6863      	ldr	r3, [r4, #4]
  4051ba:	68e1      	ldr	r1, [r4, #12]
  4051bc:	68a5      	ldr	r5, [r4, #8]
  4051be:	f023 0303 	bic.w	r3, r3, #3
  4051c2:	4423      	add	r3, r4
  4051c4:	4630      	mov	r0, r6
  4051c6:	685a      	ldr	r2, [r3, #4]
  4051c8:	60e9      	str	r1, [r5, #12]
  4051ca:	f042 0201 	orr.w	r2, r2, #1
  4051ce:	608d      	str	r5, [r1, #8]
  4051d0:	605a      	str	r2, [r3, #4]
  4051d2:	f000 f9f3 	bl	4055bc <__malloc_unlock>
  4051d6:	3408      	adds	r4, #8
  4051d8:	4620      	mov	r0, r4
  4051da:	b003      	add	sp, #12
  4051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051e0:	2400      	movs	r4, #0
  4051e2:	230c      	movs	r3, #12
  4051e4:	4620      	mov	r0, r4
  4051e6:	6033      	str	r3, [r6, #0]
  4051e8:	b003      	add	sp, #12
  4051ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051ee:	2380      	movs	r3, #128	; 0x80
  4051f0:	f04f 0e40 	mov.w	lr, #64	; 0x40
  4051f4:	203f      	movs	r0, #63	; 0x3f
  4051f6:	e749      	b.n	40508c <_malloc_r+0x44>
  4051f8:	4670      	mov	r0, lr
  4051fa:	e75d      	b.n	4050b8 <_malloc_r+0x70>
  4051fc:	4423      	add	r3, r4
  4051fe:	68e1      	ldr	r1, [r4, #12]
  405200:	685a      	ldr	r2, [r3, #4]
  405202:	68a5      	ldr	r5, [r4, #8]
  405204:	f042 0201 	orr.w	r2, r2, #1
  405208:	60e9      	str	r1, [r5, #12]
  40520a:	4630      	mov	r0, r6
  40520c:	608d      	str	r5, [r1, #8]
  40520e:	605a      	str	r2, [r3, #4]
  405210:	f000 f9d4 	bl	4055bc <__malloc_unlock>
  405214:	3408      	adds	r4, #8
  405216:	4620      	mov	r0, r4
  405218:	b003      	add	sp, #12
  40521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40521e:	4423      	add	r3, r4
  405220:	4630      	mov	r0, r6
  405222:	685a      	ldr	r2, [r3, #4]
  405224:	f042 0201 	orr.w	r2, r2, #1
  405228:	605a      	str	r2, [r3, #4]
  40522a:	f000 f9c7 	bl	4055bc <__malloc_unlock>
  40522e:	3408      	adds	r4, #8
  405230:	4620      	mov	r0, r4
  405232:	b003      	add	sp, #12
  405234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405238:	68bc      	ldr	r4, [r7, #8]
  40523a:	6863      	ldr	r3, [r4, #4]
  40523c:	f023 0803 	bic.w	r8, r3, #3
  405240:	45a8      	cmp	r8, r5
  405242:	d304      	bcc.n	40524e <_malloc_r+0x206>
  405244:	ebc5 0308 	rsb	r3, r5, r8
  405248:	2b0f      	cmp	r3, #15
  40524a:	f300 808c 	bgt.w	405366 <_malloc_r+0x31e>
  40524e:	4b55      	ldr	r3, [pc, #340]	; (4053a4 <_malloc_r+0x35c>)
  405250:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4053b4 <_malloc_r+0x36c>
  405254:	681a      	ldr	r2, [r3, #0]
  405256:	f8d9 3000 	ldr.w	r3, [r9]
  40525a:	3301      	adds	r3, #1
  40525c:	442a      	add	r2, r5
  40525e:	eb04 0a08 	add.w	sl, r4, r8
  405262:	f000 8160 	beq.w	405526 <_malloc_r+0x4de>
  405266:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40526a:	320f      	adds	r2, #15
  40526c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  405270:	f022 020f 	bic.w	r2, r2, #15
  405274:	4611      	mov	r1, r2
  405276:	4630      	mov	r0, r6
  405278:	9201      	str	r2, [sp, #4]
  40527a:	f000 f9a1 	bl	4055c0 <_sbrk_r>
  40527e:	f1b0 3fff 	cmp.w	r0, #4294967295
  405282:	4683      	mov	fp, r0
  405284:	9a01      	ldr	r2, [sp, #4]
  405286:	f000 8158 	beq.w	40553a <_malloc_r+0x4f2>
  40528a:	4582      	cmp	sl, r0
  40528c:	f200 80fc 	bhi.w	405488 <_malloc_r+0x440>
  405290:	4b45      	ldr	r3, [pc, #276]	; (4053a8 <_malloc_r+0x360>)
  405292:	6819      	ldr	r1, [r3, #0]
  405294:	45da      	cmp	sl, fp
  405296:	4411      	add	r1, r2
  405298:	6019      	str	r1, [r3, #0]
  40529a:	f000 8153 	beq.w	405544 <_malloc_r+0x4fc>
  40529e:	f8d9 0000 	ldr.w	r0, [r9]
  4052a2:	f8df e110 	ldr.w	lr, [pc, #272]	; 4053b4 <_malloc_r+0x36c>
  4052a6:	3001      	adds	r0, #1
  4052a8:	bf1b      	ittet	ne
  4052aa:	ebca 0a0b 	rsbne	sl, sl, fp
  4052ae:	4451      	addne	r1, sl
  4052b0:	f8ce b000 	streq.w	fp, [lr]
  4052b4:	6019      	strne	r1, [r3, #0]
  4052b6:	f01b 0107 	ands.w	r1, fp, #7
  4052ba:	f000 8117 	beq.w	4054ec <_malloc_r+0x4a4>
  4052be:	f1c1 0008 	rsb	r0, r1, #8
  4052c2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4052c6:	4483      	add	fp, r0
  4052c8:	3108      	adds	r1, #8
  4052ca:	445a      	add	r2, fp
  4052cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4052d0:	ebc2 0901 	rsb	r9, r2, r1
  4052d4:	4649      	mov	r1, r9
  4052d6:	4630      	mov	r0, r6
  4052d8:	9301      	str	r3, [sp, #4]
  4052da:	f000 f971 	bl	4055c0 <_sbrk_r>
  4052de:	1c43      	adds	r3, r0, #1
  4052e0:	9b01      	ldr	r3, [sp, #4]
  4052e2:	f000 813f 	beq.w	405564 <_malloc_r+0x51c>
  4052e6:	ebcb 0200 	rsb	r2, fp, r0
  4052ea:	444a      	add	r2, r9
  4052ec:	f042 0201 	orr.w	r2, r2, #1
  4052f0:	6819      	ldr	r1, [r3, #0]
  4052f2:	f8c7 b008 	str.w	fp, [r7, #8]
  4052f6:	4449      	add	r1, r9
  4052f8:	42bc      	cmp	r4, r7
  4052fa:	f8cb 2004 	str.w	r2, [fp, #4]
  4052fe:	6019      	str	r1, [r3, #0]
  405300:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4053a8 <_malloc_r+0x360>
  405304:	d016      	beq.n	405334 <_malloc_r+0x2ec>
  405306:	f1b8 0f0f 	cmp.w	r8, #15
  40530a:	f240 80fd 	bls.w	405508 <_malloc_r+0x4c0>
  40530e:	6862      	ldr	r2, [r4, #4]
  405310:	f1a8 030c 	sub.w	r3, r8, #12
  405314:	f023 0307 	bic.w	r3, r3, #7
  405318:	18e0      	adds	r0, r4, r3
  40531a:	f002 0201 	and.w	r2, r2, #1
  40531e:	f04f 0e05 	mov.w	lr, #5
  405322:	431a      	orrs	r2, r3
  405324:	2b0f      	cmp	r3, #15
  405326:	6062      	str	r2, [r4, #4]
  405328:	f8c0 e004 	str.w	lr, [r0, #4]
  40532c:	f8c0 e008 	str.w	lr, [r0, #8]
  405330:	f200 811c 	bhi.w	40556c <_malloc_r+0x524>
  405334:	4b1d      	ldr	r3, [pc, #116]	; (4053ac <_malloc_r+0x364>)
  405336:	68bc      	ldr	r4, [r7, #8]
  405338:	681a      	ldr	r2, [r3, #0]
  40533a:	4291      	cmp	r1, r2
  40533c:	bf88      	it	hi
  40533e:	6019      	strhi	r1, [r3, #0]
  405340:	4b1b      	ldr	r3, [pc, #108]	; (4053b0 <_malloc_r+0x368>)
  405342:	681a      	ldr	r2, [r3, #0]
  405344:	4291      	cmp	r1, r2
  405346:	6862      	ldr	r2, [r4, #4]
  405348:	bf88      	it	hi
  40534a:	6019      	strhi	r1, [r3, #0]
  40534c:	f022 0203 	bic.w	r2, r2, #3
  405350:	4295      	cmp	r5, r2
  405352:	eba2 0305 	sub.w	r3, r2, r5
  405356:	d801      	bhi.n	40535c <_malloc_r+0x314>
  405358:	2b0f      	cmp	r3, #15
  40535a:	dc04      	bgt.n	405366 <_malloc_r+0x31e>
  40535c:	4630      	mov	r0, r6
  40535e:	f000 f92d 	bl	4055bc <__malloc_unlock>
  405362:	2400      	movs	r4, #0
  405364:	e738      	b.n	4051d8 <_malloc_r+0x190>
  405366:	1962      	adds	r2, r4, r5
  405368:	f043 0301 	orr.w	r3, r3, #1
  40536c:	f045 0501 	orr.w	r5, r5, #1
  405370:	6065      	str	r5, [r4, #4]
  405372:	4630      	mov	r0, r6
  405374:	60ba      	str	r2, [r7, #8]
  405376:	6053      	str	r3, [r2, #4]
  405378:	f000 f920 	bl	4055bc <__malloc_unlock>
  40537c:	3408      	adds	r4, #8
  40537e:	4620      	mov	r0, r4
  405380:	b003      	add	sp, #12
  405382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405386:	2b14      	cmp	r3, #20
  405388:	d971      	bls.n	40546e <_malloc_r+0x426>
  40538a:	2b54      	cmp	r3, #84	; 0x54
  40538c:	f200 80a4 	bhi.w	4054d8 <_malloc_r+0x490>
  405390:	0b28      	lsrs	r0, r5, #12
  405392:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  405396:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40539a:	306e      	adds	r0, #110	; 0x6e
  40539c:	e676      	b.n	40508c <_malloc_r+0x44>
  40539e:	bf00      	nop
  4053a0:	2000044c 	.word	0x2000044c
  4053a4:	20000ac0 	.word	0x20000ac0
  4053a8:	20000ac4 	.word	0x20000ac4
  4053ac:	20000abc 	.word	0x20000abc
  4053b0:	20000ab8 	.word	0x20000ab8
  4053b4:	20000858 	.word	0x20000858
  4053b8:	0a5a      	lsrs	r2, r3, #9
  4053ba:	2a04      	cmp	r2, #4
  4053bc:	d95e      	bls.n	40547c <_malloc_r+0x434>
  4053be:	2a14      	cmp	r2, #20
  4053c0:	f200 80b3 	bhi.w	40552a <_malloc_r+0x4e2>
  4053c4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4053c8:	0049      	lsls	r1, r1, #1
  4053ca:	325b      	adds	r2, #91	; 0x5b
  4053cc:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4053d0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4053d4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4055b4 <_malloc_r+0x56c>
  4053d8:	f1ac 0c08 	sub.w	ip, ip, #8
  4053dc:	458c      	cmp	ip, r1
  4053de:	f000 8088 	beq.w	4054f2 <_malloc_r+0x4aa>
  4053e2:	684a      	ldr	r2, [r1, #4]
  4053e4:	f022 0203 	bic.w	r2, r2, #3
  4053e8:	4293      	cmp	r3, r2
  4053ea:	d202      	bcs.n	4053f2 <_malloc_r+0x3aa>
  4053ec:	6889      	ldr	r1, [r1, #8]
  4053ee:	458c      	cmp	ip, r1
  4053f0:	d1f7      	bne.n	4053e2 <_malloc_r+0x39a>
  4053f2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4053f6:	687a      	ldr	r2, [r7, #4]
  4053f8:	f8c4 c00c 	str.w	ip, [r4, #12]
  4053fc:	60a1      	str	r1, [r4, #8]
  4053fe:	f8cc 4008 	str.w	r4, [ip, #8]
  405402:	60cc      	str	r4, [r1, #12]
  405404:	e688      	b.n	405118 <_malloc_r+0xd0>
  405406:	1963      	adds	r3, r4, r5
  405408:	f042 0701 	orr.w	r7, r2, #1
  40540c:	f045 0501 	orr.w	r5, r5, #1
  405410:	6065      	str	r5, [r4, #4]
  405412:	4630      	mov	r0, r6
  405414:	614b      	str	r3, [r1, #20]
  405416:	610b      	str	r3, [r1, #16]
  405418:	f8c3 e00c 	str.w	lr, [r3, #12]
  40541c:	f8c3 e008 	str.w	lr, [r3, #8]
  405420:	605f      	str	r7, [r3, #4]
  405422:	509a      	str	r2, [r3, r2]
  405424:	3408      	adds	r4, #8
  405426:	f000 f8c9 	bl	4055bc <__malloc_unlock>
  40542a:	e6d5      	b.n	4051d8 <_malloc_r+0x190>
  40542c:	684a      	ldr	r2, [r1, #4]
  40542e:	e673      	b.n	405118 <_malloc_r+0xd0>
  405430:	f108 0801 	add.w	r8, r8, #1
  405434:	f018 0f03 	tst.w	r8, #3
  405438:	f10c 0c08 	add.w	ip, ip, #8
  40543c:	f47f ae7f 	bne.w	40513e <_malloc_r+0xf6>
  405440:	e030      	b.n	4054a4 <_malloc_r+0x45c>
  405442:	68dc      	ldr	r4, [r3, #12]
  405444:	42a3      	cmp	r3, r4
  405446:	bf08      	it	eq
  405448:	3002      	addeq	r0, #2
  40544a:	f43f ae35 	beq.w	4050b8 <_malloc_r+0x70>
  40544e:	e6b3      	b.n	4051b8 <_malloc_r+0x170>
  405450:	440b      	add	r3, r1
  405452:	460c      	mov	r4, r1
  405454:	685a      	ldr	r2, [r3, #4]
  405456:	68c9      	ldr	r1, [r1, #12]
  405458:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40545c:	f042 0201 	orr.w	r2, r2, #1
  405460:	605a      	str	r2, [r3, #4]
  405462:	4630      	mov	r0, r6
  405464:	60e9      	str	r1, [r5, #12]
  405466:	608d      	str	r5, [r1, #8]
  405468:	f000 f8a8 	bl	4055bc <__malloc_unlock>
  40546c:	e6b4      	b.n	4051d8 <_malloc_r+0x190>
  40546e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  405472:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  405476:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40547a:	e607      	b.n	40508c <_malloc_r+0x44>
  40547c:	099a      	lsrs	r2, r3, #6
  40547e:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405482:	0049      	lsls	r1, r1, #1
  405484:	3238      	adds	r2, #56	; 0x38
  405486:	e7a1      	b.n	4053cc <_malloc_r+0x384>
  405488:	42bc      	cmp	r4, r7
  40548a:	4b4a      	ldr	r3, [pc, #296]	; (4055b4 <_malloc_r+0x56c>)
  40548c:	f43f af00 	beq.w	405290 <_malloc_r+0x248>
  405490:	689c      	ldr	r4, [r3, #8]
  405492:	6862      	ldr	r2, [r4, #4]
  405494:	f022 0203 	bic.w	r2, r2, #3
  405498:	e75a      	b.n	405350 <_malloc_r+0x308>
  40549a:	f859 3908 	ldr.w	r3, [r9], #-8
  40549e:	4599      	cmp	r9, r3
  4054a0:	f040 8082 	bne.w	4055a8 <_malloc_r+0x560>
  4054a4:	f010 0f03 	tst.w	r0, #3
  4054a8:	f100 30ff 	add.w	r0, r0, #4294967295
  4054ac:	d1f5      	bne.n	40549a <_malloc_r+0x452>
  4054ae:	687b      	ldr	r3, [r7, #4]
  4054b0:	ea23 0304 	bic.w	r3, r3, r4
  4054b4:	607b      	str	r3, [r7, #4]
  4054b6:	0064      	lsls	r4, r4, #1
  4054b8:	429c      	cmp	r4, r3
  4054ba:	f63f aebd 	bhi.w	405238 <_malloc_r+0x1f0>
  4054be:	2c00      	cmp	r4, #0
  4054c0:	f43f aeba 	beq.w	405238 <_malloc_r+0x1f0>
  4054c4:	421c      	tst	r4, r3
  4054c6:	4640      	mov	r0, r8
  4054c8:	f47f ae35 	bne.w	405136 <_malloc_r+0xee>
  4054cc:	0064      	lsls	r4, r4, #1
  4054ce:	421c      	tst	r4, r3
  4054d0:	f100 0004 	add.w	r0, r0, #4
  4054d4:	d0fa      	beq.n	4054cc <_malloc_r+0x484>
  4054d6:	e62e      	b.n	405136 <_malloc_r+0xee>
  4054d8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4054dc:	d818      	bhi.n	405510 <_malloc_r+0x4c8>
  4054de:	0be8      	lsrs	r0, r5, #15
  4054e0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4054e4:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4054e8:	3077      	adds	r0, #119	; 0x77
  4054ea:	e5cf      	b.n	40508c <_malloc_r+0x44>
  4054ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4054f0:	e6eb      	b.n	4052ca <_malloc_r+0x282>
  4054f2:	2101      	movs	r1, #1
  4054f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4054f8:	1092      	asrs	r2, r2, #2
  4054fa:	fa01 f202 	lsl.w	r2, r1, r2
  4054fe:	431a      	orrs	r2, r3
  405500:	f8c8 2004 	str.w	r2, [r8, #4]
  405504:	4661      	mov	r1, ip
  405506:	e777      	b.n	4053f8 <_malloc_r+0x3b0>
  405508:	2301      	movs	r3, #1
  40550a:	f8cb 3004 	str.w	r3, [fp, #4]
  40550e:	e725      	b.n	40535c <_malloc_r+0x314>
  405510:	f240 5254 	movw	r2, #1364	; 0x554
  405514:	4293      	cmp	r3, r2
  405516:	d820      	bhi.n	40555a <_malloc_r+0x512>
  405518:	0ca8      	lsrs	r0, r5, #18
  40551a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40551e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  405522:	307c      	adds	r0, #124	; 0x7c
  405524:	e5b2      	b.n	40508c <_malloc_r+0x44>
  405526:	3210      	adds	r2, #16
  405528:	e6a4      	b.n	405274 <_malloc_r+0x22c>
  40552a:	2a54      	cmp	r2, #84	; 0x54
  40552c:	d826      	bhi.n	40557c <_malloc_r+0x534>
  40552e:	0b1a      	lsrs	r2, r3, #12
  405530:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405534:	0049      	lsls	r1, r1, #1
  405536:	326e      	adds	r2, #110	; 0x6e
  405538:	e748      	b.n	4053cc <_malloc_r+0x384>
  40553a:	68bc      	ldr	r4, [r7, #8]
  40553c:	6862      	ldr	r2, [r4, #4]
  40553e:	f022 0203 	bic.w	r2, r2, #3
  405542:	e705      	b.n	405350 <_malloc_r+0x308>
  405544:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405548:	2800      	cmp	r0, #0
  40554a:	f47f aea8 	bne.w	40529e <_malloc_r+0x256>
  40554e:	4442      	add	r2, r8
  405550:	68bb      	ldr	r3, [r7, #8]
  405552:	f042 0201 	orr.w	r2, r2, #1
  405556:	605a      	str	r2, [r3, #4]
  405558:	e6ec      	b.n	405334 <_malloc_r+0x2ec>
  40555a:	23fe      	movs	r3, #254	; 0xfe
  40555c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  405560:	207e      	movs	r0, #126	; 0x7e
  405562:	e593      	b.n	40508c <_malloc_r+0x44>
  405564:	2201      	movs	r2, #1
  405566:	f04f 0900 	mov.w	r9, #0
  40556a:	e6c1      	b.n	4052f0 <_malloc_r+0x2a8>
  40556c:	f104 0108 	add.w	r1, r4, #8
  405570:	4630      	mov	r0, r6
  405572:	f7ff fc1f 	bl	404db4 <_free_r>
  405576:	f8d9 1000 	ldr.w	r1, [r9]
  40557a:	e6db      	b.n	405334 <_malloc_r+0x2ec>
  40557c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405580:	d805      	bhi.n	40558e <_malloc_r+0x546>
  405582:	0bda      	lsrs	r2, r3, #15
  405584:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405588:	0049      	lsls	r1, r1, #1
  40558a:	3277      	adds	r2, #119	; 0x77
  40558c:	e71e      	b.n	4053cc <_malloc_r+0x384>
  40558e:	f240 5154 	movw	r1, #1364	; 0x554
  405592:	428a      	cmp	r2, r1
  405594:	d805      	bhi.n	4055a2 <_malloc_r+0x55a>
  405596:	0c9a      	lsrs	r2, r3, #18
  405598:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40559c:	0049      	lsls	r1, r1, #1
  40559e:	327c      	adds	r2, #124	; 0x7c
  4055a0:	e714      	b.n	4053cc <_malloc_r+0x384>
  4055a2:	21fe      	movs	r1, #254	; 0xfe
  4055a4:	227e      	movs	r2, #126	; 0x7e
  4055a6:	e711      	b.n	4053cc <_malloc_r+0x384>
  4055a8:	687b      	ldr	r3, [r7, #4]
  4055aa:	e784      	b.n	4054b6 <_malloc_r+0x46e>
  4055ac:	08e8      	lsrs	r0, r5, #3
  4055ae:	1c43      	adds	r3, r0, #1
  4055b0:	005b      	lsls	r3, r3, #1
  4055b2:	e5f8      	b.n	4051a6 <_malloc_r+0x15e>
  4055b4:	2000044c 	.word	0x2000044c

004055b8 <__malloc_lock>:
  4055b8:	4770      	bx	lr
  4055ba:	bf00      	nop

004055bc <__malloc_unlock>:
  4055bc:	4770      	bx	lr
  4055be:	bf00      	nop

004055c0 <_sbrk_r>:
  4055c0:	b538      	push	{r3, r4, r5, lr}
  4055c2:	4c07      	ldr	r4, [pc, #28]	; (4055e0 <_sbrk_r+0x20>)
  4055c4:	2300      	movs	r3, #0
  4055c6:	4605      	mov	r5, r0
  4055c8:	4608      	mov	r0, r1
  4055ca:	6023      	str	r3, [r4, #0]
  4055cc:	f7fd f84e 	bl	40266c <_sbrk>
  4055d0:	1c43      	adds	r3, r0, #1
  4055d2:	d000      	beq.n	4055d6 <_sbrk_r+0x16>
  4055d4:	bd38      	pop	{r3, r4, r5, pc}
  4055d6:	6823      	ldr	r3, [r4, #0]
  4055d8:	2b00      	cmp	r3, #0
  4055da:	d0fb      	beq.n	4055d4 <_sbrk_r+0x14>
  4055dc:	602b      	str	r3, [r5, #0]
  4055de:	bd38      	pop	{r3, r4, r5, pc}
  4055e0:	20000e2c 	.word	0x20000e2c

004055e4 <__sread>:
  4055e4:	b510      	push	{r4, lr}
  4055e6:	460c      	mov	r4, r1
  4055e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4055ec:	f000 f924 	bl	405838 <_read_r>
  4055f0:	2800      	cmp	r0, #0
  4055f2:	db03      	blt.n	4055fc <__sread+0x18>
  4055f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4055f6:	4403      	add	r3, r0
  4055f8:	6523      	str	r3, [r4, #80]	; 0x50
  4055fa:	bd10      	pop	{r4, pc}
  4055fc:	89a3      	ldrh	r3, [r4, #12]
  4055fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405602:	81a3      	strh	r3, [r4, #12]
  405604:	bd10      	pop	{r4, pc}
  405606:	bf00      	nop

00405608 <__swrite>:
  405608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40560c:	4616      	mov	r6, r2
  40560e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405612:	461f      	mov	r7, r3
  405614:	05d3      	lsls	r3, r2, #23
  405616:	460c      	mov	r4, r1
  405618:	4605      	mov	r5, r0
  40561a:	d507      	bpl.n	40562c <__swrite+0x24>
  40561c:	2200      	movs	r2, #0
  40561e:	2302      	movs	r3, #2
  405620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405624:	f000 f8f2 	bl	40580c <_lseek_r>
  405628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40562c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405630:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405634:	81a2      	strh	r2, [r4, #12]
  405636:	463b      	mov	r3, r7
  405638:	4632      	mov	r2, r6
  40563a:	4628      	mov	r0, r5
  40563c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405640:	f000 b814 	b.w	40566c <_write_r>

00405644 <__sseek>:
  405644:	b510      	push	{r4, lr}
  405646:	460c      	mov	r4, r1
  405648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40564c:	f000 f8de 	bl	40580c <_lseek_r>
  405650:	89a3      	ldrh	r3, [r4, #12]
  405652:	1c42      	adds	r2, r0, #1
  405654:	bf0e      	itee	eq
  405656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40565a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40565e:	6520      	strne	r0, [r4, #80]	; 0x50
  405660:	81a3      	strh	r3, [r4, #12]
  405662:	bd10      	pop	{r4, pc}

00405664 <__sclose>:
  405664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405668:	f000 b868 	b.w	40573c <_close_r>

0040566c <_write_r>:
  40566c:	b570      	push	{r4, r5, r6, lr}
  40566e:	460d      	mov	r5, r1
  405670:	4c08      	ldr	r4, [pc, #32]	; (405694 <_write_r+0x28>)
  405672:	4611      	mov	r1, r2
  405674:	4606      	mov	r6, r0
  405676:	461a      	mov	r2, r3
  405678:	4628      	mov	r0, r5
  40567a:	2300      	movs	r3, #0
  40567c:	6023      	str	r3, [r4, #0]
  40567e:	f7fb f95b 	bl	400938 <_write>
  405682:	1c43      	adds	r3, r0, #1
  405684:	d000      	beq.n	405688 <_write_r+0x1c>
  405686:	bd70      	pop	{r4, r5, r6, pc}
  405688:	6823      	ldr	r3, [r4, #0]
  40568a:	2b00      	cmp	r3, #0
  40568c:	d0fb      	beq.n	405686 <_write_r+0x1a>
  40568e:	6033      	str	r3, [r6, #0]
  405690:	bd70      	pop	{r4, r5, r6, pc}
  405692:	bf00      	nop
  405694:	20000e2c 	.word	0x20000e2c

00405698 <__register_exitproc>:
  405698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40569c:	4c25      	ldr	r4, [pc, #148]	; (405734 <__register_exitproc+0x9c>)
  40569e:	6825      	ldr	r5, [r4, #0]
  4056a0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4056a4:	4606      	mov	r6, r0
  4056a6:	4688      	mov	r8, r1
  4056a8:	4692      	mov	sl, r2
  4056aa:	4699      	mov	r9, r3
  4056ac:	b3c4      	cbz	r4, 405720 <__register_exitproc+0x88>
  4056ae:	6860      	ldr	r0, [r4, #4]
  4056b0:	281f      	cmp	r0, #31
  4056b2:	dc17      	bgt.n	4056e4 <__register_exitproc+0x4c>
  4056b4:	1c43      	adds	r3, r0, #1
  4056b6:	b176      	cbz	r6, 4056d6 <__register_exitproc+0x3e>
  4056b8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4056bc:	2201      	movs	r2, #1
  4056be:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4056c2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4056c6:	4082      	lsls	r2, r0
  4056c8:	4311      	orrs	r1, r2
  4056ca:	2e02      	cmp	r6, #2
  4056cc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4056d0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4056d4:	d01e      	beq.n	405714 <__register_exitproc+0x7c>
  4056d6:	3002      	adds	r0, #2
  4056d8:	6063      	str	r3, [r4, #4]
  4056da:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4056de:	2000      	movs	r0, #0
  4056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056e4:	4b14      	ldr	r3, [pc, #80]	; (405738 <__register_exitproc+0xa0>)
  4056e6:	b303      	cbz	r3, 40572a <__register_exitproc+0x92>
  4056e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4056ec:	f7ff fca4 	bl	405038 <malloc>
  4056f0:	4604      	mov	r4, r0
  4056f2:	b1d0      	cbz	r0, 40572a <__register_exitproc+0x92>
  4056f4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4056f8:	2700      	movs	r7, #0
  4056fa:	e880 0088 	stmia.w	r0, {r3, r7}
  4056fe:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405702:	4638      	mov	r0, r7
  405704:	2301      	movs	r3, #1
  405706:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40570a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40570e:	2e00      	cmp	r6, #0
  405710:	d0e1      	beq.n	4056d6 <__register_exitproc+0x3e>
  405712:	e7d1      	b.n	4056b8 <__register_exitproc+0x20>
  405714:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  405718:	430a      	orrs	r2, r1
  40571a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40571e:	e7da      	b.n	4056d6 <__register_exitproc+0x3e>
  405720:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  405724:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405728:	e7c1      	b.n	4056ae <__register_exitproc+0x16>
  40572a:	f04f 30ff 	mov.w	r0, #4294967295
  40572e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405732:	bf00      	nop
  405734:	00405898 	.word	0x00405898
  405738:	00405039 	.word	0x00405039

0040573c <_close_r>:
  40573c:	b538      	push	{r3, r4, r5, lr}
  40573e:	4c07      	ldr	r4, [pc, #28]	; (40575c <_close_r+0x20>)
  405740:	2300      	movs	r3, #0
  405742:	4605      	mov	r5, r0
  405744:	4608      	mov	r0, r1
  405746:	6023      	str	r3, [r4, #0]
  405748:	f7fc ffbc 	bl	4026c4 <_close>
  40574c:	1c43      	adds	r3, r0, #1
  40574e:	d000      	beq.n	405752 <_close_r+0x16>
  405750:	bd38      	pop	{r3, r4, r5, pc}
  405752:	6823      	ldr	r3, [r4, #0]
  405754:	2b00      	cmp	r3, #0
  405756:	d0fb      	beq.n	405750 <_close_r+0x14>
  405758:	602b      	str	r3, [r5, #0]
  40575a:	bd38      	pop	{r3, r4, r5, pc}
  40575c:	20000e2c 	.word	0x20000e2c

00405760 <_fclose_r>:
  405760:	2900      	cmp	r1, #0
  405762:	d03d      	beq.n	4057e0 <_fclose_r+0x80>
  405764:	b570      	push	{r4, r5, r6, lr}
  405766:	4605      	mov	r5, r0
  405768:	460c      	mov	r4, r1
  40576a:	b108      	cbz	r0, 405770 <_fclose_r+0x10>
  40576c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40576e:	b37b      	cbz	r3, 4057d0 <_fclose_r+0x70>
  405770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405774:	b90b      	cbnz	r3, 40577a <_fclose_r+0x1a>
  405776:	2000      	movs	r0, #0
  405778:	bd70      	pop	{r4, r5, r6, pc}
  40577a:	4621      	mov	r1, r4
  40577c:	4628      	mov	r0, r5
  40577e:	f7ff f975 	bl	404a6c <__sflush_r>
  405782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405784:	4606      	mov	r6, r0
  405786:	b133      	cbz	r3, 405796 <_fclose_r+0x36>
  405788:	69e1      	ldr	r1, [r4, #28]
  40578a:	4628      	mov	r0, r5
  40578c:	4798      	blx	r3
  40578e:	2800      	cmp	r0, #0
  405790:	bfb8      	it	lt
  405792:	f04f 36ff 	movlt.w	r6, #4294967295
  405796:	89a3      	ldrh	r3, [r4, #12]
  405798:	061b      	lsls	r3, r3, #24
  40579a:	d41c      	bmi.n	4057d6 <_fclose_r+0x76>
  40579c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40579e:	b141      	cbz	r1, 4057b2 <_fclose_r+0x52>
  4057a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4057a4:	4299      	cmp	r1, r3
  4057a6:	d002      	beq.n	4057ae <_fclose_r+0x4e>
  4057a8:	4628      	mov	r0, r5
  4057aa:	f7ff fb03 	bl	404db4 <_free_r>
  4057ae:	2300      	movs	r3, #0
  4057b0:	6323      	str	r3, [r4, #48]	; 0x30
  4057b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4057b4:	b121      	cbz	r1, 4057c0 <_fclose_r+0x60>
  4057b6:	4628      	mov	r0, r5
  4057b8:	f7ff fafc 	bl	404db4 <_free_r>
  4057bc:	2300      	movs	r3, #0
  4057be:	6463      	str	r3, [r4, #68]	; 0x44
  4057c0:	f7ff fa92 	bl	404ce8 <__sfp_lock_acquire>
  4057c4:	2300      	movs	r3, #0
  4057c6:	81a3      	strh	r3, [r4, #12]
  4057c8:	f7ff fa90 	bl	404cec <__sfp_lock_release>
  4057cc:	4630      	mov	r0, r6
  4057ce:	bd70      	pop	{r4, r5, r6, pc}
  4057d0:	f7ff fa84 	bl	404cdc <__sinit>
  4057d4:	e7cc      	b.n	405770 <_fclose_r+0x10>
  4057d6:	6921      	ldr	r1, [r4, #16]
  4057d8:	4628      	mov	r0, r5
  4057da:	f7ff faeb 	bl	404db4 <_free_r>
  4057de:	e7dd      	b.n	40579c <_fclose_r+0x3c>
  4057e0:	2000      	movs	r0, #0
  4057e2:	4770      	bx	lr

004057e4 <_fstat_r>:
  4057e4:	b538      	push	{r3, r4, r5, lr}
  4057e6:	460b      	mov	r3, r1
  4057e8:	4c07      	ldr	r4, [pc, #28]	; (405808 <_fstat_r+0x24>)
  4057ea:	4605      	mov	r5, r0
  4057ec:	4611      	mov	r1, r2
  4057ee:	4618      	mov	r0, r3
  4057f0:	2300      	movs	r3, #0
  4057f2:	6023      	str	r3, [r4, #0]
  4057f4:	f7fc ff72 	bl	4026dc <_fstat>
  4057f8:	1c43      	adds	r3, r0, #1
  4057fa:	d000      	beq.n	4057fe <_fstat_r+0x1a>
  4057fc:	bd38      	pop	{r3, r4, r5, pc}
  4057fe:	6823      	ldr	r3, [r4, #0]
  405800:	2b00      	cmp	r3, #0
  405802:	d0fb      	beq.n	4057fc <_fstat_r+0x18>
  405804:	602b      	str	r3, [r5, #0]
  405806:	bd38      	pop	{r3, r4, r5, pc}
  405808:	20000e2c 	.word	0x20000e2c

0040580c <_lseek_r>:
  40580c:	b570      	push	{r4, r5, r6, lr}
  40580e:	460d      	mov	r5, r1
  405810:	4c08      	ldr	r4, [pc, #32]	; (405834 <_lseek_r+0x28>)
  405812:	4611      	mov	r1, r2
  405814:	4606      	mov	r6, r0
  405816:	461a      	mov	r2, r3
  405818:	4628      	mov	r0, r5
  40581a:	2300      	movs	r3, #0
  40581c:	6023      	str	r3, [r4, #0]
  40581e:	f7fc ff6d 	bl	4026fc <_lseek>
  405822:	1c43      	adds	r3, r0, #1
  405824:	d000      	beq.n	405828 <_lseek_r+0x1c>
  405826:	bd70      	pop	{r4, r5, r6, pc}
  405828:	6823      	ldr	r3, [r4, #0]
  40582a:	2b00      	cmp	r3, #0
  40582c:	d0fb      	beq.n	405826 <_lseek_r+0x1a>
  40582e:	6033      	str	r3, [r6, #0]
  405830:	bd70      	pop	{r4, r5, r6, pc}
  405832:	bf00      	nop
  405834:	20000e2c 	.word	0x20000e2c

00405838 <_read_r>:
  405838:	b570      	push	{r4, r5, r6, lr}
  40583a:	460d      	mov	r5, r1
  40583c:	4c08      	ldr	r4, [pc, #32]	; (405860 <_read_r+0x28>)
  40583e:	4611      	mov	r1, r2
  405840:	4606      	mov	r6, r0
  405842:	461a      	mov	r2, r3
  405844:	4628      	mov	r0, r5
  405846:	2300      	movs	r3, #0
  405848:	6023      	str	r3, [r4, #0]
  40584a:	f7fb f84b 	bl	4008e4 <_read>
  40584e:	1c43      	adds	r3, r0, #1
  405850:	d000      	beq.n	405854 <_read_r+0x1c>
  405852:	bd70      	pop	{r4, r5, r6, pc}
  405854:	6823      	ldr	r3, [r4, #0]
  405856:	2b00      	cmp	r3, #0
  405858:	d0fb      	beq.n	405852 <_read_r+0x1a>
  40585a:	6033      	str	r3, [r6, #0]
  40585c:	bd70      	pop	{r4, r5, r6, pc}
  40585e:	bf00      	nop
  405860:	20000e2c 	.word	0x20000e2c
  405864:	00002580 	.word	0x00002580
  405868:	000000c0 	.word	0x000000c0
  40586c:	00000800 	.word	0x00000800
	...
  40587c:	000e1000 	.word	0x000e1000
  405880:	000000c0 	.word	0x000000c0
  405884:	00000800 	.word	0x00000800
	...
  405894:	00000043 	.word	0x00000043

00405898 <_global_impure_ptr>:
  405898:	20000020                                 .. 

0040589c <_init>:
  40589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40589e:	bf00      	nop
  4058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4058a2:	bc08      	pop	{r3}
  4058a4:	469e      	mov	lr, r3
  4058a6:	4770      	bx	lr

004058a8 <__init_array_start>:
  4058a8:	00404a4d 	.word	0x00404a4d

004058ac <__frame_dummy_init_array_entry>:
  4058ac:	004000f1                                ..@.

004058b0 <_fini>:
  4058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058b2:	bf00      	nop
  4058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4058b6:	bc08      	pop	{r3}
  4058b8:	469e      	mov	lr, r3
  4058ba:	4770      	bx	lr

004058bc <__fini_array_start>:
  4058bc:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <nextCtrlState>:
20000010:	0002 0000                                   ....

20000014 <pSetPt>:
20000014:	0000 40a0                                   ...@

20000018 <holdDur>:
20000018:	0064 0000                                   d...

2000001c <delayParam>:
2000001c:	00c8 0000                                   ....

20000020 <impure_data>:
20000020:	0000 0000 030c 2000 0374 2000 03dc 2000     ....... t.. ... 
	...
20000054:	5894 0040 0000 0000 0000 0000 0000 0000     .X@.............
	...
200000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000448 <_impure_ptr>:
20000448:	0020 2000                                    .. 

2000044c <__malloc_av_>:
	...
20000454:	044c 2000 044c 2000 0454 2000 0454 2000     L.. L.. T.. T.. 
20000464:	045c 2000 045c 2000 0464 2000 0464 2000     \.. \.. d.. d.. 
20000474:	046c 2000 046c 2000 0474 2000 0474 2000     l.. l.. t.. t.. 
20000484:	047c 2000 047c 2000 0484 2000 0484 2000     |.. |.. ... ... 
20000494:	048c 2000 048c 2000 0494 2000 0494 2000     ... ... ... ... 
200004a4:	049c 2000 049c 2000 04a4 2000 04a4 2000     ... ... ... ... 
200004b4:	04ac 2000 04ac 2000 04b4 2000 04b4 2000     ... ... ... ... 
200004c4:	04bc 2000 04bc 2000 04c4 2000 04c4 2000     ... ... ... ... 
200004d4:	04cc 2000 04cc 2000 04d4 2000 04d4 2000     ... ... ... ... 
200004e4:	04dc 2000 04dc 2000 04e4 2000 04e4 2000     ... ... ... ... 
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 

20000854 <__malloc_trim_threshold>:
20000854:	0000 0002                                   ....

20000858 <__malloc_sbrk_base>:
20000858:	ffff ffff                                   ....
